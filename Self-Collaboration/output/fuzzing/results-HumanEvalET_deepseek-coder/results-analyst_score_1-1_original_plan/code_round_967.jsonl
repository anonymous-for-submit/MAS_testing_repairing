{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completion": "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "completions": ["from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l or len(l) < 2:\n        return True  # An empty list or a list with one element is trivially monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''\n    Return True if list elements are monotonically increasing or decreasing. \n    When list elements consistently increase from one element to the next, \n    they are monotonically increasing. Similarly, when list elements \n    consistently decrease from one element to the next, they are \n    monotonically decreasing.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the conditions for a monotonically increasing list.\",\n        \"details\": \"Check if each element in the list is less than or equal to the next element.\"\n      },\n      {\n        \"subproblem\": \"Identify the conditions for a monotonically decreasing list.\",\n        \"details\": \"Check if each element in the list is greater than or equal to the next element.\"\n      },\n      {\n        \"subproblem\": \"Combine the conditions for both increasing and decreasing lists.\",\n        \"details\": \"Determine if the list meets either the increasing or decreasing condition.\"\n      },\n      {\n        \"subproblem\": \"Handle edge cases such as empty lists or lists with fewer than two elements.\",\n        \"details\": \"These cases should return True since they are trivially monotonic.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Define the function 'monotonic' with a list parameter.\",\n        \"details\": \"This will be the main function that checks if the list is monotonic.\"\n      },\n      {\n        \"step\": \"Check if the list has fewer than two elements.\",\n        \"details\": \"If so, return True as the list is trivially monotonic.\"\n      },\n      {\n        \"step\": \"Iterate through the list to compare each element with the next one.\",\n        \"details\": \"Use a loop to compare elements for both increasing and decreasing conditions.\"\n      },\n      {\n        \"step\": \"Determine if the list is monotonically increasing or decreasing.\",\n        \"details\": \"Based on the comparisons, return True if the list meets either condition, otherwise return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the function.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing List\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one to ensure it does not decrease.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing List\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one to ensure it does not increase.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the checks, return True if the list meets either of the monotonicity conditions, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Implement the function with proper error handling.\",\n        \"details\": \"Ensure the function can handle different types of inputs gracefully, such as non-list inputs or lists with non-numeric elements.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement's docstring to extract the list.\",\n        \"details\": \"Extract the list from the docstring to be used in the function.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonicity.\",\n        \"details\": \"Create a function that checks if the list is monotonically increasing or decreasing.\"\n      },\n      {\n        \"step\": \"Test the function with various inputs.\",\n        \"details\": \"Test the function with different types of lists to ensure it works correctly and handles edge cases.\"\n      },\n      {\n        \"step\": \"Refine the function based on testing results.\",\n        \"details\": \"Make adjustments to the function based on the test results to ensure it meets the user's requirements.\"\n      },\n      {\n        \"step\": \"Document the function and prepare for review.\",\n        \"details\": \"Document the function and prepare for a code review to ensure the implementation meets the user's requirements and is of high quality.\"\n      }\n", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l or len(l) < 2:\n        return True  # An empty list or a list with one element is trivially monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing List\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing List\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the checks, return True if the list meets either of the conditions, otherwise return False.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Parse the requirement's docstring to extract the list.\",\n        \"substep\": \"Extract the list from the docstring using string manipulation techniques.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically increasing list.\",\n        \"substep\": \"Iterate through the list and compare each element with the next one to ensure each is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically decreasing list.\",\n        \"substep\": \"Iterate through the list and compare each element with the next one to ensure each is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"Combine the results of the increasing and decreasing checks.\",\n        \"substep\": \"Return True if either the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"Test the function with various lists to ensure it works as expected.\",\n        \"substep\": \"Use a variety of lists to verify that the function correctly identifies monotonic behavior.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing List\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing List\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the checks, return True if the list meets either of the conditions, otherwise return False.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Parse the requirement's docstring to extract the list.\",\n        \"substep\": \"Extract the list from the docstring using Python's string manipulation techniques.\"\n      },\n      {\n        \"step\": \"Implement the function to check for Monotonically Increasing List.\",\n        \"substep\": \"Iterate through the list and compare each element with the next one to ensure each subsequent element is greater or equal.\"\n      },\n      {\n        \"step\": \"Implement the function to check for Monotonically Decreasing List.\",\n        \"substep\": \"Iterate through the list and compare each element with the next one to ensure each subsequent element is less or equal.\"\n      },\n      {\n        \"step\": \"Combine the results of the increasing and decreasing checks.\",\n        \"substep\": \"Return True if either the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"substep\": \"Use the provided examples to verify the correctness of the implementation.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the function.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing List\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one to ensure each is less than or equal to the next.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing List\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one to ensure each is greater than or equal to the next.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the checks, return True if the list meets either of the monotonicity conditions, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Implement the function with proper documentation.\",\n        \"details\": \"Develop the function with a clear and concise implementation that includes the docstring provided by the user.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Extract the list from the docstring.\",\n        \"details\": \"Locate and extract the list from the function's docstring.\"\n      },\n      {\n        \"step\": \"2. Check for Monotonically Increasing.\",\n        \"details\": \"Iterate through the list to ensure each element is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"3. Check for Monotonically Decreasing.\",\n        \"details\": \"Iterate through the list to ensure each element is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"4. Return the Result.\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"5. Document the Function.\",\n        \"details\": \"Implement the function with a docstring that matches the user's requirement.\"\n      }\n    ]\n  }\n", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the function.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing List\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one to ensure it does not decrease.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing List\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one to ensure it does not increase.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the checks, return True if the list meets either of the monotonicity conditions, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Implement the function with proper documentation and test cases.\",\n        \"details\": \"Develop the function with clear documentation and include test cases to verify its correctness.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Parse the requirement to extract the function definition and docstring.\",\n        \"details\": \"Extract the function definition and its docstring from the requirement.\"\n      },\n      {\n        \"step\": \"2. Implement the function to check for monotonicity.\",\n        \"details\": \"Write the Python function that checks if the list is monotonically increasing or decreasing.\"\n      },\n      {\n        \"step\": \"3. Test the function with various test cases.\",\n        \"details\": \"Use the provided test cases and additional test cases to ensure the function works correctly.\"\n      },\n      {\n        \"step\": \"4. Document the function and prepare for review.\",\n        \"details\": \"Document the function with a proper docstring and prepare the code for review by the tester.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the function.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing List\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one to ensure each is less than or equal to the next.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing List\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one to ensure each is greater than or equal to the next.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the checks, return True if the list meets either of the monotonicity conditions, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Implement the function with proper documentation and test cases.\",\n        \"details\": \"Develop the function with the extracted list and the checks implemented. Include docstrings and test cases to validate the function.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Extract the list from the docstring.\",\n        \"details\": \"Locate and extract the list from the provided docstring.\"\n      },\n      {\n        \"step\": \"2. Check for Monotonically Increasing.\",\n        \"details\": \"Iterate through the list to ensure each element is less than or equal to the next.\"\n      },\n      {\n        \"step\": \"3. Check for Monotonically Decreasing.\",\n        \"details\": \"Iterate through the list to ensure each element is greater than or equal to the next.\"\n      },\n      {\n        \"step\": \"4. Return the Result.\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"5. Document the Function.\",\n        \"details\": \"Add a docstring to the function explaining its purpose, parameters, and return value.\"\n      },", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the function.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing List\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing List\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the checks, return True if the list meets either of the conditions, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Implement the function with proper documentation.\",\n        \"details\": \"Write the function with clear comments and docstrings to explain the purpose, parameters, and return values.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"Locate and extract the list from the provided docstring.\"\n      },\n      {\n        \"step\": \"Check for Monotonically Increasing.\",\n        \"details\": \"Iterate through the list to check if each element is less than or equal to the next one.\"\n      },\n      {\n        \"step\": \"Check for Monotonically Decreasing.\",\n        \"details\": \"Iterate through the list to check if each element is greater than or equal to the next one.\"\n      },\n      {\n        \"step\": \"Return the Result.\",\n        \"details\": \"Based on the checks, return True if the list is monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"step\": \"Document the Function.\",\n        \"details\": \"Add a docstring to the function explaining its purpose, parameters, and return value.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''\n    Return True if list elements are monotonically increasing or decreasing. \n    When list elements consistently increase from one element to the next, \n    they are monotonically increasing. Similarly, when list elements \n    consistently decrease from one element to the next, they are \n    monotonically decreasing.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the conditions for a monotonically increasing list.\"\n      },\n      {\n        \"subproblem\": \"Identify the conditions for a monotonically decreasing list.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is either monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Implement the function to check monotonicity.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Define the function `monotonic(l: list) -> bool`.\"\n      },\n      {\n        \"step\": \"Initialize two boolean variables, `increasing` and `decreasing`, to `True`.\"\n      },\n      {\n        \"step\": \"Iterate through the list and compare each element with the next one.\"\n      },\n      {\n        \"step\": \"If an element is greater than the next, set `increasing` to `False`.\"\n      },\n      {\n        \"step\": \"If an element is less than the next, set `decreasing` to `False`.\"\n      },\n      {\n        \"step\": \"Return the logical OR of `increasing` and `decreasing`.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the function.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing List\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one to ensure it does not decrease.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing List\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one to ensure it does not increase.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the checks, return True if the list meets either of the monotonicity conditions, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Implement the function with proper error handling.\",\n        \"details\": \"Ensure the function can handle different types of input and edge cases to provide robust functionality.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement's docstring to extract the list.\",\n        \"details\": \"Extract the list from the docstring to be used in the function.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonicity.\",\n        \"details\": \"Create a function that checks if the list is monotonically increasing or decreasing.\"\n      },\n      {\n        \"step\": \"Test the function with various inputs.\",\n        \"details\": \"Use a variety of test cases to ensure the function works correctly for different scenarios.\"\n      },\n      {\n        \"step\": \"Refine the function based on test results.\",\n        \"details\": \"Adjust the function based on the outcomes of the tests to ensure it handles all edge cases and user inputs correctly.\"\n      },\n      {\n        \"step\": \"Document the function and prepare for review.\",\n        \"details\": \"Document the function's purpose, usage, and any special considerations, and prepare for a code review.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the conditions for a monotonically increasing list.\",\n        \"details\": \"Check if each element in the list is less than or equal to the next element.\"\n      },\n      {\n        \"subproblem\": \"Identify the conditions for a monotonically decreasing list.\",\n        \"details\": \"Check if each element in the list is greater than or equal to the next element.\"\n      },\n      {\n        \"subproblem\": \"Combine the conditions for both increasing and decreasing lists.\",\n        \"details\": \"Determine if the list meets either the increasing or decreasing condition.\"\n      },\n      {\n        \"subproblem\": \"Handle edge cases such as empty lists or lists with fewer than two elements.\",\n        \"details\": \"These cases should return True since they are trivially monotonic.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Define the function 'monotonic' with a list parameter.\",\n        \"details\": \"This will be the main function that checks if the list is monotonic.\"\n      },\n      {\n        \"step\": \"Check if the list has fewer than two elements.\",\n        \"details\": \"If so, return True as the list is trivially monotonic.\"\n      },\n      {\n        \"step\": \"Iterate through the list to compare each element with the next one.\",\n        \"details\": \"Use a loop to compare elements for both increasing and decreasing conditions.\"\n      },\n      {\n        \"step\": \"Determine if the list is monotonically increasing or decreasing.\",\n        \"details\": \"Based on the comparisons, return True if the list meets either condition, otherwise return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. When list elements consistently increase from one element to the next, they are monotonically increasing. Similarly, when list elements consistently decrease from one element to the next, they are monotonically decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "passed": true, "pass": true, "pass_num": 10, "round": 967, "mutate_method": "expand_one2two", "save_node": false, "parent_index": 347}
