{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completion": "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "completions": ["from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. \n    Monotonically increasing means each element in the list is greater than the previous element. \n    Monotonically decreasing means each element in the list is less than the previous element.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    \n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. \n    Monotonically increasing means each element in the list is greater than the previous element. \n    Monotonically decreasing means each element in the list is less than the previous element.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    \n    if not l or len(l) < 2:\n        return True  # An empty list or a list with one element is trivially monotonic\n\n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Combine the results from the increasing and decreasing checks.\",\n        \"details\": \"The developer needs to return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Write the function based on the extracted list and the combined results.\",\n        \"details\": \"Develop the final function that uses the previously implemented checks to determine the monotonicity of the list.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"The Python developer will write a function to parse the docstring and extract the list from it.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically increasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically decreasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results and return the final decision.\",\n        \"details\": \"The Python developer will use the results from the increasing and decreasing checks to determine if the list is monotonic and return the appropriate boolean value.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"The tester will write test cases based on the examples given in the docstring to verify the correctness of the", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to iterate through the list and check if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to iterate through the list and check if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Combine the results of increasing and decreasing checks.\",\n        \"details\": \"The developer needs to return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Write the function based on the extracted list and the combined results.\",\n        \"details\": \"Develop the final function that uses the results from the previous steps to return the correct boolean value.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"The Python developer will parse the docstring to extract the list that needs to be checked for monotonicity.\"\n      },\n      {\n        \"step\": \"Check for monotonicity.\",\n        \"details\": \"The developer will implement two checks: one for increasing monotonicity and one for decreasing monotonicity. These checks will be performed sequentially.\"\n      },\n      {\n        \"step\": \"Return the result.\",\n        \"details\": \"Based on the results of the increasing and decreasing checks, the function will return True if either condition is met, otherwise it will return False.\"\n      },\n      {\n        \"step\": \"Test the function.\",\n        \"details\": \"The tester will implement unit tests to verify that the function works as expected across various scenarios.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Combine the results of increasing and decreasing checks.\",\n        \"details\": \"Develop a function that uses the results from the increasing and decreasing checks to determine if the list is monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Test the function with provided examples.\",\n        \"details\": \"Write test cases based on the examples given in the docstring to ensure the function works as expected.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"Locate and extract the list from the requirement's docstring.\"\n      },\n      {\n        \"step\": \"Implement the increasing check function.\",\n        \"details\": \"Create a function to iterate through the list and check if it is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement the decreasing check function.\",\n        \"details\": \"Create a function to iterate through the list and check if it is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the checks into a single function.\",\n        \"details\": \"Integrate the increasing and decreasing check functions into a single function that returns True if the list is monotonically increasing or decreasing, and False otherwise.\"\n      },\n      {\n        \"step\": \"Test the final function.\",\n        \"details\": \"Run the test cases provided in the docstring to verify the correctness of the function.\"\n      },\n      {\n        \"step\": \"Refine and document the function.\",\n        \"", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Combine the results from the increasing and decreasing checks.\",\n        \"details\": \"The function should return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Write the main function to execute the checks and return the result.\",\n        \"details\": \"Develop a main function that uses the above subfunctions to check the list and return the appropriate boolean value.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"The Python developer will write a function to parse the docstring and extract the list.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically increasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically decreasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results and return the final result.\",\n        \"details\": \"The Python developer will write the main function that uses the above checks to determine if the list is monotonically increasing or decreasing and return the appropriate boolean value.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"The tester will write test cases based on the provided examples to verify the correctness of the implementation", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the function.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Combine the results of increasing and decreasing checks.\",\n        \"details\": \"The function should return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Write the function with proper documentation.\",\n        \"details\": \"Include the function signature, docstring, and comments to explain the code.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"Locate and extract the list from the requirement's docstring.\"\n      },\n      {\n        \"step\": \"Check for monotonically increasing.\",\n        \"details\": \"Implement a function to check if the list is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Check for monotonically decreasing.\",\n        \"details\": \"Implement a function to check if the list is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Return the result based on the checks.\",\n        \"details\": \"Combine the results of the increasing and decreasing checks and return the appropriate boolean value.\"\n      },\n      {\n        \"step\": \"Document the function.\",\n        \"details\": \"Write the function with a clear docstring and comments to explain the code.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. \n    Monotonically increasing means each element in the list is greater than the previous element. \n    Monotonically decreasing means each element in the list is less than the previous element.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    \n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Condition\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one to ensure each is greater than or equal to the previous.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Condition\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one to ensure each is less than or equal to the previous.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is monotonically increasing or decreasing\",\n        \"details\": \"Based on the checks, return True if the list meets either of the monotonic conditions, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Implement the function with appropriate error handling\",\n        \"details\": \"Ensure the function can handle edge cases such as empty lists or lists with non-numeric elements.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\",\n        \"details\": \"Extract the list from the docstring provided in the requirement.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonicity.\",\n        \"details\": \"Create a function that checks if the list is monotonically increasing or decreasing.\"\n      },\n      {\n        \"step\": \"Test the function with various inputs.\",\n        \"details\": \"Use a variety of test cases to ensure the function works correctly for different scenarios.\"\n      },\n      {\n        \"step\": \"Refine the function based on test results.\",\n        \"details\": \"Adjust the function based on the outcomes of the test cases to ensure robustness.\"\n      },\n      {\n        \"step\": \"Document the function and prepare for review.\",\n        \"details\": \"Document the function's purpose, usage, and any special considerations in a way that is easy for the tester to understand.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. \n    Monotonically increasing means each element in the list is greater than the previous element. \n    Monotonically decreasing means each element in the list is less than the previous element.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    \n    if not l or len(l) < 2:\n        return True  # An empty list or a list with one element is trivially monotonic\n\n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to iterate through the list and check if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to iterate through the list and check if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Combine the results of increasing and decreasing checks.\",\n        \"details\": \"The developer needs to return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Write the function based on the extracted list and the combined results.\",\n        \"details\": \"Develop the final function that uses the previously defined checks to determine if the list is monotonic.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"The Python developer will write a function to parse the docstring and extract the list from it.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically increasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically decreasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results and return the final decision.\",\n        \"details\": \"The Python developer will use the results from the increasing and decreasing checks to determine if the list is monotonic and return the appropriate boolean value.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"The tester will write test cases based on the examples given in the docstring to verify the correctness of the implementation", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to iterate through the list and check if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to iterate through the list and check if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Combine the results of increasing and decreasing checks.\",\n        \"details\": \"Develop a function that uses the results from the increasing and decreasing checks to determine if the list is monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Write the main function to handle the input and output.\",\n        \"details\": \"Create a main function that takes a list as input, uses the above functions to check monotonicity, and returns the result.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"The Python developer will write a function to parse the docstring and extract the list from it.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically increasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically decreasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results and return the final output.\",\n        \"details\": \"The Python developer will combine the results of the increasing and decreasing checks to determine the final output and return it.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"The tester will write test cases based on the provided examples to verify the correctness of the implementation.\"", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Combine the results from the increasing and decreasing checks.\",\n        \"details\": \"The function should return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Write the main function to execute the checks and return the result.\",\n        \"details\": \"Develop a main function that uses the above subfunctions to check the list and return the appropriate boolean value.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"The Python developer will write a function to parse the docstring and extract the list.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically increasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically decreasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results and return the final result.\",\n        \"details\": \"The Python developer will write the main function that uses the above checks to determine if the list is monotonically increasing or decreasing and return the appropriate boolean value.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"The tester will write test cases based on the provided examples to verify the correctness of the implementation", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Combine the results of increasing and decreasing checks.\",\n        \"details\": \"Develop a function that uses the results from the increasing and decreasing checks to determine if the list is monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Test the function with provided examples.\",\n        \"details\": \"Write test cases based on the examples given in the docstring to ensure the function works as expected.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"Locate and extract the list from the requirement's docstring.\"\n      },\n      {\n        \"step\": \"Implement the increasing check function.\",\n        \"details\": \"Create a function to iterate through the list and check if it is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement the decreasing check function.\",\n        \"details\": \"Create a function to iterate through the list and check if it is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the checks into a single function.\",\n        \"details\": \"Integrate the increasing and decreasing check functions into a single function that returns True if the list is monotonically increasing or decreasing, and False otherwise.\"\n      },\n      {\n        \"step\": \"Test the final function.\",\n        \"details\": \"Run the test cases provided in the docstring to verify the correctness of the function.\"\n      },\n      {\n        \"step\": \"Refine and document the function.\",\n        \"", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to iterate through the list and verify if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"subproblem\": \"Combine the results from the increasing and decreasing checks.\",\n        \"details\": \"The developer needs to return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      },\n      {\n        \"subproblem\": \"Write the function based on the extracted list and the combined results.\",\n        \"details\": \"Develop the final function that uses the previously implemented checks to determine the monotonicity of the list.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"The Python developer will write a function to parse the docstring and extract the list from it.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically increasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement the check for monotonically decreasing.\",\n        \"details\": \"The Python developer will implement a function to iterate through the list and check if it is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results and return the final decision.\",\n        \"details\": \"The Python developer will use the results from the increasing and decreasing checks to determine if the list is monotonic and return the appropriate boolean value.\"\n      },\n      {\n        \"step\": \"Test the function with provided examples.\",\n        \"details\": \"The tester will write test cases based on the examples given in the docstring to verify the correctness of the", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each element in the list is greater than the previous element. Monotonically decreasing means each element in the list is less than the previous element.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "passed": true, "pass": true, "pass_num": 10, "round": 508, "mutate_method": "expand_one2two", "save_node": false, "parent_index": 45}
