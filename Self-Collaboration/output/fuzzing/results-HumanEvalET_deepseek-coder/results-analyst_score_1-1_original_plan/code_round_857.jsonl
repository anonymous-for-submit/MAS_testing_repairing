{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, determine the largest number less than n that divides it evenly.\n>>> largest_divisor(15)\n    5\n    '''", "entry_point": "largest_divisor", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": ["def check(largest_divisor):\n\tassert largest_divisor(47) == 1", "def check(largest_divisor):\n\tassert largest_divisor(98) == 49", "def check(largest_divisor):\n\tassert largest_divisor(104) == 52", "def check(largest_divisor):\n\tassert largest_divisor(51) == 17", "def check(largest_divisor):\n\tassert largest_divisor(10) == 5", "def check(largest_divisor):\n\tassert largest_divisor(53) == 1", "def check(largest_divisor):\n\tassert largest_divisor(3) == 1", "def check(largest_divisor):\n\tassert largest_divisor(95) == 19", "def check(largest_divisor):\n\tassert largest_divisor(44) == 22", "def check(largest_divisor):\n\tassert largest_divisor(8) == 4", "def check(largest_divisor):\n\tassert largest_divisor(4) == 2", "def check(largest_divisor):\n\tassert largest_divisor(103) == 1", "def check(largest_divisor):\n\tassert largest_divisor(11) == 1", "def check(largest_divisor):\n\tassert largest_divisor(46) == 23", "def check(largest_divisor):\n\tassert largest_divisor(49) == 7", "def check(largest_divisor):\n\tassert largest_divisor(13) == 1", "def check(largest_divisor):\n\tassert largest_divisor(14) == 7", "def check(largest_divisor):\n\tassert largest_divisor(54) == 27", "def check(largest_divisor):\n\tassert largest_divisor(99) == 33", "def check(largest_divisor):\n\tassert largest_divisor(45) == 15", "def check(largest_divisor):\n\tassert largest_divisor(9) == 3", "def check(largest_divisor):\n\tassert largest_divisor(7) == 1", "def check(largest_divisor):\n\tassert largest_divisor(100) == 50", "def check(largest_divisor):\n\tassert largest_divisor(6) == 3", "def check(largest_divisor):\n\tassert largest_divisor(48) == 24", "def check(largest_divisor):\n\tassert largest_divisor(15) == 5", "def check(largest_divisor):\n\tassert largest_divisor(101) == 1", "def check(largest_divisor):\n\tassert largest_divisor(97) == 1", "def check(largest_divisor):\n\tassert largest_divisor(12) == 6", "def check(largest_divisor):\n\tassert largest_divisor(105) == 35", "def check(largest_divisor):\n\tassert largest_divisor(5) == 1", "def check(largest_divisor):\n\tassert largest_divisor(2) == 1", "def check(largest_divisor):\n\tassert largest_divisor(102) == 51"], "test_case_list": ["assert largest_divisor(47) == 1", "assert largest_divisor(98) == 49", "assert largest_divisor(104) == 52", "assert largest_divisor(51) == 17", "assert largest_divisor(10) == 5", "assert largest_divisor(53) == 1", "assert largest_divisor(3) == 1", "assert largest_divisor(95) == 19", "assert largest_divisor(44) == 22", "assert largest_divisor(8) == 4", "assert largest_divisor(4) == 2", "assert largest_divisor(103) == 1", "assert largest_divisor(11) == 1", "assert largest_divisor(46) == 23", "assert largest_divisor(49) == 7", "assert largest_divisor(13) == 1", "assert largest_divisor(14) == 7", "assert largest_divisor(54) == 27", "assert largest_divisor(99) == 33", "assert largest_divisor(45) == 15", "assert largest_divisor(9) == 3", "assert largest_divisor(7) == 1", "assert largest_divisor(100) == 50", "assert largest_divisor(6) == 3", "assert largest_divisor(48) == 24", "assert largest_divisor(15) == 5", "assert largest_divisor(101) == 1", "assert largest_divisor(97) == 1", "assert largest_divisor(12) == 6", "assert largest_divisor(105) == 35", "assert largest_divisor(5) == 1", "assert largest_divisor(2) == 1", "assert largest_divisor(102) == 51"], "nl": " For a given number n, find the largest number that divides n evenly, smaller than n\n    ", "func": "def largest_divisor(n: int) -> int:", "examples": ">>> largest_divisor(15)\n    5\n    ", "repair_prompt": ["def largest_divisor(n: int) -> int:\t\n'''For a given number n, determine the largest number less than n that divides it evenly.\n>>> largest_divisor(15)\n    5\n    '''"], "completion": "from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "completions": ["from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "from typing import *\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to check each number from n-1 down to 1.\",\n          \"Return the first number that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Understand the requirement: Determine the largest number less than n that divides it evenly.\",\n      \"Decompose the problem into two subproblems.\",\n      \"Solve the first subproblem: Implement a method to find the largest divisor.\",\n      \"Solve the second subproblem: Implement the function largest_divisor(n: int) -> int.\",\n      \"Test the function with various inputs to ensure it works correctly.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to check each number from n-1 down to 1.\",\n          \"Return the first number that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Understand the requirement: Determine the largest number less than n that divides it evenly.\",\n      \"Decompose the problem into two subproblems.\",\n      \"Solve the first subproblem by creating a loop to find the largest divisor.\",\n      \"Solve the second subproblem by implementing the function largest_divisor.\",\n      \"Test the function with various inputs to ensure it works correctly.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to decrement the variable and check for divisibility.\",\n          \"Return the first number found that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Understand the requirement: Determine the largest number less than n that divides it evenly.\",\n      \"Decompose the problem into two subproblems.\",\n      \"Solve the first subproblem by creating a loop to find the largest divisor.\",\n      \"Solve the second subproblem by implementing the function largest_divisor.\",\n      \"Test the function with various inputs to ensure correctness.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to decrement the variable and check for divisibility.\",\n          \"Return the first number found that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Analyze the requirement to understand the need for a function that finds the largest divisor of a given number n.\",\n      \"Decompose the requirement into two subproblems: identifying the largest divisor and implementing the function.\",\n      \"For each subproblem, outline the steps necessary to solve it.\",\n      \"Communicate the plan to the developer, ensuring clarity and understanding of the tasks at hand.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to check each number from n-1 down to 1.\",\n          \"Return the first number that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Analyze the requirement to understand the need for a function that finds the largest divisor of a given number n.\",\n      \"Decompose the requirement into two subproblems: identifying the largest divisor and implementing the function.\",\n      \"Solve the first subproblem by creating a loop that checks each number less than n for divisibility.\",\n      \"Solve the second subproblem by defining the function and implementing the loop to find the largest divisor.\",\n      \"Test the function with various inputs to ensure it works as expected.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to decrement the variable and check for divisibility.\",\n          \"Return the first number that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Understand the requirement to identify the largest divisor less than n.\",\n      \"Decompose the problem into smaller subproblems.\",\n      \"Implement the function based on the subproblems identified.\",\n      \"Test the function to ensure it meets the user's requirements.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to decrement the variable and check for divisibility.\",\n          \"Return the first number found that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Analyze the requirement to understand the need for a function that finds the largest divisor of a given number n.\",\n      \"Decompose the requirement into two subproblems: identifying the largest divisor and implementing the function.\",\n      \"Solve the first subproblem by creating a loop that checks each number less than n for divisibility.\",\n      \"Solve the second subproblem by defining the function and implementing the loop to find the largest divisor.\",\n      \"Test the function with various inputs to ensure it works correctly.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to check each number from n-1 down to 1.\",\n          \"Return the first number that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Understand the requirement: Determine the largest number less than n that divides it evenly.\",\n      \"Decompose the problem into two subproblems.\",\n      \"Solve the first subproblem: Implement a method to find the largest divisor.\",\n      \"Solve the second subproblem: Implement the function largest_divisor(n: int) -> int.\",\n      \"Test the function with various inputs to ensure it works correctly.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to decrement the variable and check for divisibility.\",\n          \"Return the first number found that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Analyze the requirement to understand the need for a function that finds the largest divisor of a given number n.\",\n      \"Decompose the requirement into two subproblems: identifying the largest divisor and implementing the function.\",\n      \"Solve the first subproblem by creating a loop that checks each number less than n for divisibility.\",\n      \"Solve the second subproblem by defining the function and implementing the loop to find the largest divisor.\",\n      \"Test the function with various inputs to ensure it works correctly and efficiently.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to decrement the variable and check for divisibility.\",\n          \"Return the first number found that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Analyze the requirement to understand the need for a function that finds the largest divisor of a given number n.\",\n      \"Decompose the requirement into two subproblems: identifying the largest divisor and implementing the function.\",\n      \"Solve the first subproblem by creating a loop that checks each number less than n for divisibility.\",\n      \"Solve the second subproblem by defining the function and implementing the loop to find the largest divisor.\",\n      \"Test the function with various inputs to ensure it works correctly and efficiently.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the largest number less than n that divides it evenly.\",\n        \"steps\": [\n          \"Start with the number n-1.\",\n          \"Check if the current number divides n evenly.\",\n          \"If it does, return the current number.\",\n          \"If not, decrement the current number and repeat the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the function largest_divisor(n: int) -> int.\",\n        \"steps\": [\n          \"Define the function largest_divisor with parameter n.\",\n          \"Initialize a variable to start checking from n-1.\",\n          \"Use a loop to check each number from n-1 down to 1.\",\n          \"Return the first number that divides n evenly.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Understand the requirement: Determine the largest number less than n that divides it evenly.\",\n      \"Decompose the problem into two subproblems.\",\n      \"Solve the first subproblem: Implement a method to find the largest divisor.\",\n      \"Solve the second subproblem: Implement the function largest_divisor(n: int) -> int.\",\n      \"Test the function with various inputs to ensure it works correctly.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def largest_divisor(n: int) -> int:\n    '''For a given number n, determine the largest number less than n that divides it evenly.\n    >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [33, 33, 33, 33, 33, 33, 33, 33, 33, 33], "passed": true, "pass": true, "pass_num": 10, "round": 857, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 573}
