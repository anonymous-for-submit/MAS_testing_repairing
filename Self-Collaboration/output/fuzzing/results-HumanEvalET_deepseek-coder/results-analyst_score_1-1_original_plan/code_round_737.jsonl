{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \nFor each of the groups, output the deepest level of nesting of parentheses.  \nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "entry_point": "parse_nested_parens", "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "test": ["def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()()) ((())) (((()))) (((()))) (()) ()\") == [3, 2, 3, 4, 4, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()) (()()) ((())) ((())()())\") == [3, 1, 2, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) ((())()()) (()) (()()) ((())) ((())) () () ((())()()) (()()) () (((()))) ((())()()) () (((()))) (((()))) ()\") == [4, 3, 3, 2, 2, 3, 3, 1, 1, 3, 2, 1, 4, 3, 1, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (((()))) ((())()()) (()()) () (((())))\") == [3, 4, 3, 2, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())) (()()) () () (()()) () ()\") == [2, 3, 2, 1, 1, 2, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) () ((())()()) () () ((())) ((())) (()()) () () (()())\") == [3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) ((())()()) ((())) (()()) () ((())()()) (()()) ((())()()) ((())) ((())) (()())\") == [3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()(())((()))) (((()))) ((())) (()) () ((())) ((())) (()()) ((())()()) (()()) () (()) (((()))) (()) ((())) (((()))) ((())) ((())()()) ((())()())\") == [3, 1, 4, 4, 3, 2, 1, 3, 3, 2, 3, 2, 1, 2, 4, 2, 3, 4, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) ((())()()) ((())()()) (()()) ((())) () () ((())) () () (()())\") == [3, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())) () () () () (()()) (()()) (()()) ((())()()) ()\") == [3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (()) ((())()()) () () ((())) ((())) (((()))) () (()()) (((())))\") == [2, 4, 2, 3, 1, 1, 3, 3, 4, 1, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())) ((())) ((())()())\") == [2, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())) (()) (()()) ((())()()) ((())()())\") == [2, 3, 2, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()) (()()) ((())) (((()))) () ((())()()) ((())) (()()) (()()) (()) ((())()())\") == [3, 2, 2, 3, 4, 1, 3, 3, 2, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () ((())()()) ((())()()) (((()))) ((())()()) (((())))\") == [3, 1, 3, 3, 4, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) (()) ((())) () () () (((()))) (()()) (()()) (((()))) (()) (()) (((())))\") == [4, 3, 2, 3, 1, 1, 1, 4, 2, 2, 4, 2, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()) (()()) (()()) (()()) ((())) (((()))) (()(())((()))) (()) () (((()))) (()) ((())) (())\") == [4, 2, 2, 2, 2, 3, 4, 4, 2, 1, 4, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) (()) (()()) (()()) (((()))) (()) (((()))) (()(())((()))) ((())) ((())) ((())()()) () (((())))\") == [2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 3, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())) (((()))) ((())()()) (()()) (()(())((()))) ((())()()) ((())) ((())) (()()) ((())()()) ((())) (()) (()(())((()))) () () (()(())((()))) (()()) (((()))) (((()))) ()\") == [4, 3, 4, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 1, 1, 4, 2, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())) ((())) ((())) (()) (()(())((()))) () ((())) (((()))) (()) ((())) ((())) () (()(())((())))\") == [4, 3, 3, 3, 2, 4, 1, 3, 4, 2, 3, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()()) () ((())) (()()) () ((())()()) ((())) ((())) ((())) ((())) ((()))\") == [3, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) ((())()()) () (((()))) ((())()()) ((())()()) (()()) (()()) (()) ((())) (()())\") == [2, 3, 3, 1, 4, 3, 3, 2, 2, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()(())((()))) (()) (()(())((()))) (((()))) (()(())((()))) (())\") == [3, 4, 2, 4, 4, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()) (()(())((()))) (()) (((()))) (((()))) ((())()())\") == [2, 2, 4, 2, 4, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) ((())()()) (((()))) (()(())((()))) ((())()())\") == [4, 4, 4, 3, 4, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) ((())()()) () ((())()()) (()()) () () ((())) (()()) ((())) ((())()())\") == [1, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()()) ((())()()) (()()) () () ((())) () ((())()()) (((()))) (((()))) ()\") == [2, 2, 3, 2, 1, 1, 3, 1, 3, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())()()) ((())) (()())\") == [2, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())()()) (()()) (()) ((())()()) (((()))) (((()))) ((())()()) ((())) ((())()()) () (()()) (()()) ((())()()) (()) ((())) ((())()())\") == [3, 3, 3, 2, 2, 3, 4, 4, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () (()()) (()())\") == [2, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) () ((())()()) (()()) (()()) () ((())) ((())) (()()) (((()))) (()())\") == [4, 3, 1, 3, 2, 2, 1, 3, 3, 2, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())()()) () ((())) (()()) ((())()()) (()())\") == [3, 3, 3, 1, 3, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())) ((())) ((())()()) () ((()))\") == [2, 3, 3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) (()()) () () ((())) ((())()()) ()\") == [2, 2, 2, 1, 1, 3, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()(())((()))) ((())()()) (()()) (((()))) ((())()()) ((())()())\") == [2, 4, 3, 2, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (((()))) (((()))) (()()) (((())))\") == [3, 1, 4, 4, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) () (()()) (((()))) ((())) (()()) () (()) (((()))) (()(())((()))) (((()))) (((()))) ()\") == [1, 3, 1, 2, 4, 3, 2, 1, 2, 4, 4, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())()()) () ((()))\") == [3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () ((()))\") == [2, 2, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (()) () (()) (())\") == [4, 1, 2, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())()()) () ((())) (()()) () () () () (()()) ((())) ((()))\") == [1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (()()) (()()) ((())()()) ((())) ((())) ((())()())\") == [3, 3, 2, 2, 3, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () ((())()()) (((()))) (()) (((()))) () ((())) (()()) (()) (((()))) (()())\") == [3, 1, 3, 4, 2, 4, 1, 3, 2, 2, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) ((())) () () () ((()))\") == [2, 2, 3, 1, 1, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (((()))) ((())()()) ((())) ((())()()) (())\") == [3, 4, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())) (()()) ((())()()) () () ()\") == [3, 3, 3, 2, 3, 1, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()()) ((())()()) (()()) () (()()) ((())) () () (()())\") == [2, 2, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (((()))) (()) (()) ((())) () ((())) ((())()()) ((())) (()) (()()) (((())))\") == [2, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (((()))) () (()()) ((())()()) () (()(())((()))) (()(())((()))) (()()) () (()()) (()) (()) ((())()())\") == [4, 4, 1, 2, 3, 1, 4, 4, 2, 1, 2, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (((()))) ((())) ((())) ((())) ((())()()) ((())()()) (()()) () () (()(())((()))) ((())) ((())()()) (()(())((()))) () ((())()()) (((()))) (((()))) (()(())((()))) ((())()()) ()\") == [3, 4, 3, 3, 3, 3, 3, 2, 1, 1, 4, 3, 3, 4, 1, 3, 4, 4, 4, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) ((())()()) ((())) () (()()) () (()())\") == [1, 3, 3, 3, 1, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()()) () (()()) ((())()()) ((())) ((())) (()) ((())()()) () ((())()()) (()()) () (()) ((())) (()()) (()()) ((())()())\") == [2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (((()))) (()) (()()) (((()))) () (((()))) (()) ((())) () ()\") == [2, 4, 4, 2, 2, 4, 1, 4, 2, 3, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (((()))) (()()) (((()))) ((())) ((())()()) (()) ((())()()) (((()))) (()()) () (()) (((()))) () (()(())((()))) () (()) (()(())((()))) ((())) ((())()())\") == [2, 4, 4, 2, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 1, 4, 1, 2, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() (()(())((()))) (()) (()()) ((())()()) (()()) (()())\") == [1, 4, 2, 2, 3, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()(())((()))) (()()) (()()) ((())()()) (()()) ((())) () () (()()) (()(())((()))) ((())()()) (()()) ((())()()) (((()))) (()(())((()))) (()()) () ((())()()) ((())()()) ()\") == [3, 4, 2, 2, 3, 2, 3, 1, 1, 2, 4, 3, 2, 3, 4, 4, 2, 1, 3, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () () (()()) (()()) (()()) ((())) (()())\") == [3, 1, 1, 2, 2, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())()()) (()()) (()) ((())()()) () (((()))) ((())()()) () (()) (()) ((())()()) (()) (()) (()) ((())) ((())) (((())))\") == [1, 3, 2, 2, 3, 1, 4, 3, 1, 2, 2, 3, 2, 2, 2, 3, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) () (()(())((()))) (()) (((()))) ((())()()) ((())()()) ((())) ((())()()) (()(())((()))) ((())) (()(())((()))) ((())) ((())()())\") == [4, 1, 4, 2, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) () (()) (()) ((())) (()()) () () ((())()()) (()) ((()))\") == [2, 4, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) (()()) ((())()()) (((()))) (()()) (()(())((()))) (()()) (()(())((()))) ((())) (()) ((())) (()()) (()) (()()) () ((())) ((())) ((())) ((())) (()())\") == [2, 3, 2, 3, 4, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) ((())) ((())()()) ((())) () ()\") == [3, 3, 3, 3, 3, 3, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) () ((())()())\") == [3, 2, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () (()()) ((())) (()()) () ((())()()) ((()))\") == [3, 1, 2, 3, 2, 1, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (()) (((()))) ((())) (()) ((())()()) ((())()()) () ((())()()) (()) ((())()())\") == [4, 1, 2, 4, 3, 2, 3, 3, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () (()()) ((())) ((())()()) ((())()())\") == [3, 1, 2, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () ((())) () (()()) ((())) ((())()()) () () ((())()()) () (()())\") == [3, 1, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) (()()) (((()))) () ((())) (((()))) () (()) () () ((())()()) (()) (()()) ((())) (((()))) (()) (())\") == [1, 3, 2, 4, 1, 3, 4, 1, 2, 1, 1, 3, 2, 2, 3, 4, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () ((())()()) ((())()()) ((())) () ((())()()) ((())) () ((())()()) (()()) (()())\") == [3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() (()()) ((())()()) (()(())((()))) (((()))) (()(())((()))) ((())()()) (()) (()()) (((()))) (()) (()) (()()) (((()))) (((()))) () (()) ((())) () (()) (()())\") == [1, 2, 3, 4, 4, 4, 3, 2, 2, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (((()))) (()()) ((())) () (()()) (((()))) (()()) (((()))) () ()\") == [4, 1, 4, 2, 3, 1, 2, 4, 2, 4, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) () (()) () ((())) (()) (()()) (((()))) ((())) () () (()) () () (()) () ((())) (()(())((()))) ((()))\") == [4, 4, 4, 1, 2, 1, 3, 2, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()) (()()) ((())()()) (()) (()()) ((())) (()()) (()(())((()))) (()(())((()))) ((())()()) ((())) (((()))) (()(())((()))) ((())) ((())) (()(())((()))) () ((())) ((())) ((())()())\") == [2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 1, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()) ((())()()) (()()) ((())) (()) () () (((()))) (((()))) (())\") == [3, 1, 2, 3, 2, 3, 2, 1, 1, 4, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"\") == []", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()) (()()) ((())) () ((())) ((())()()) () () (()) (()) (((()))) (((()))) ((())) () () (()()) (())\") == [3, 2, 2, 3, 1, 3, 3, 1, 1, 2, 2, 4, 4, 3, 1, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())()()) ((())) (()()) ((())()()) () (()()) ((()))\") == [3, 3, 3, 2, 3, 1, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())()()) ((())()()) ((())) (()()) ((())) ((())()()) ((())()()) ((())()()) () ((())) (()())\") == [3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()) () (((()))) ((())()()) ((())()()) (((()))) (()) (((()))) () (((()))) ((())()()) (()()) (()) (()) (()) () (())\") == [3, 2, 1, 4, 3, 3, 4, 2, 4, 1, 4, 3, 2, 2, 2, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) ((())()()) ((())()()) () ((()))\") == [2, 2, 3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () ((())()()) () ((())) () ((())) ()\") == [2, 1, 3, 1, 3, 1, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()()) ()\") == [3, 1, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (()()) ((())()()) () ((())()()) ((())()()) ((())) (()()) ((())) () ((())()())\") == [3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () (()()) ((())) () ((())()()) (()()) ((())()())\") == [2, 1, 2, 3, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()) () ((())()()) (()()) () (()()) (()(())((()))) (()(())((()))) ((())) (((()))) (()(())((()))) ((())()()) ()\") == [4, 2, 1, 3, 2, 1, 2, 4, 4, 3, 4, 4, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()())\") == [2, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (((()))) (()) (()()) (()()) () ((())) ((())()()) () (()(())((()))) (()()) (()(())((()))) ((()))\") == [3, 3, 4, 2, 2, 2, 1, 3, 3, 1, 4, 2, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()) () (()()) (()) (()) (((()))) () (()()) (())\") == [2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('(()(())((())))') == [4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()) (((()))) () (()()) (((()))) ((())()()) ((())) (()()) ((())()()) (((()))) ((())) (()) ((())) ((())) () ((())) ((())()())\") == [3, 2, 4, 1, 2, 4, 3, 3, 2, 3, 4, 3, 2, 3, 3, 1, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) (()) ((())) ((())) ((())()()) (((()))) () ((())()()) (()(())((()))) ((())) ((())()()) ((())()()) (())\") == [2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())()()) (()()) ()\") == [2, 3, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())()()) (((()))) (()(())((()))) () (()(())((()))) ()\") == [4, 3, 4, 4, 1, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) () ((())) ((())) (()()) ((())()()) (((()))) () (()) (((())))\") == [3, 3, 3, 1, 3, 3, 2, 3, 4, 1, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (((()))) ((())) (()()) (()()) ((())()()) (()) (()(())((()))) (()) ((())) (()) ((())) () (((())))\") == [3, 4, 3, 2, 2, 3, 2, 4, 2, 3, 2, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) (()()) () (()(())((()))) (()()) (((()))) (((()))) ((())()()) (()()) () () ((())) (((()))) (()(())((()))) (((()))) ((())()()) ((())) (()(())((()))) (())\") == [3, 3, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 1, 3, 4, 4, 4, 3, 3, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) () (((()))) () (((()))) (()()) (()) (((()))) (()(())((()))) (((()))) () (()()) (()(())((()))) (()()) (()(())((()))) (()()) (((()))) (()()) (((()))) (()) (()())\") == [2, 1, 4, 1, 4, 2, 2, 4, 4, 4, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2]"], "test_case_list": ["assert parse_nested_parens(\"((())()()) (()()) ((())) (((()))) (((()))) (()) ()\") == [3, 2, 3, 4, 4, 2, 1]", "assert parse_nested_parens(\"((())) () (()) (()()) ((())) ((())()())\") == [3, 1, 2, 2, 3, 3]", "assert parse_nested_parens(\"(((()))) ((())) ((())()()) (()) (()()) ((())) ((())) () () ((())()()) (()()) () (((()))) ((())()()) () (((()))) (((()))) ()\") == [4, 3, 3, 2, 2, 3, 3, 1, 1, 3, 2, 1, 4, 3, 1, 4, 4, 1]", "assert parse_nested_parens(\"((())) (((()))) ((())()()) (()()) () (((())))\") == [3, 4, 3, 2, 1, 4]", "assert parse_nested_parens(\"(()()) ((())) (()()) () () (()()) () ()\") == [2, 3, 2, 1, 1, 2, 1, 1]", "assert parse_nested_parens(\"((())) (()()) () ((())()()) () () ((())) ((())) (()()) () () (()())\") == [3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2]", "assert parse_nested_parens(\"((())) (()()) ((())()()) ((())) (()()) () ((())()()) (()()) ((())()()) ((())) ((())) (()())\") == [3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2]", "assert parse_nested_parens(\"((())) () (()(())((()))) (((()))) ((())) (()) () ((())) ((())) (()()) ((())()()) (()()) () (()) (((()))) (()) ((())) (((()))) ((())) ((())()()) ((())()())\") == [3, 1, 4, 4, 3, 2, 1, 3, 3, 2, 3, 2, 1, 2, 4, 2, 3, 4, 3, 3, 3]", "assert parse_nested_parens(\"((())) (()()) ((())()()) ((())()()) (()()) ((())) () () ((())) () () (()())\") == [3, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())) () () () () (()()) (()()) (()()) ((())()()) ()\") == [3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1]", "assert parse_nested_parens(\"(()()) (((()))) (()) ((())()()) () () ((())) ((())) (((()))) () (()()) (((())))\") == [2, 4, 2, 3, 1, 1, 3, 3, 4, 1, 2, 4]", "assert parse_nested_parens(\"(()()) ((())) ((())) ((())()())\") == [2, 3, 3, 3]", "assert parse_nested_parens(\"(()) ((())) (()) (()()) ((())()()) ((())()())\") == [2, 3, 2, 2, 3, 3]", "assert parse_nested_parens(\"((())) (()) (()()) ((())) (((()))) () ((())()()) ((())) (()()) (()()) (()) ((())()())\") == [3, 2, 2, 3, 4, 1, 3, 3, 2, 2, 2, 3]", "assert parse_nested_parens(\"((())) () ((())()()) ((())()()) (((()))) ((())()()) (((())))\") == [3, 1, 3, 3, 4, 3, 4]", "assert parse_nested_parens(\"(((()))) ((())) (()) ((())) () () () (((()))) (()()) (()()) (((()))) (()) (()) (((())))\") == [4, 3, 2, 3, 1, 1, 1, 4, 2, 2, 4, 2, 2, 4]", "assert parse_nested_parens(\"(((()))) (()) (()()) (()()) (()()) ((())) (((()))) (()(())((()))) (()) () (((()))) (()) ((())) (())\") == [4, 2, 2, 2, 2, 3, 4, 4, 2, 1, 4, 2, 3, 2]", "assert parse_nested_parens(\"(()()) (()) (()) (()()) (()()) (((()))) (()) (((()))) (()(())((()))) ((())) ((())) ((())()()) () (((())))\") == [2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 3, 3, 1, 4]", "assert parse_nested_parens(\"(()(())((()))) ((())) (((()))) ((())()()) (()()) (()(())((()))) ((())()()) ((())) ((())) (()()) ((())()()) ((())) (()) (()(())((()))) () () (()(())((()))) (()()) (((()))) (((()))) ()\") == [4, 3, 4, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 1, 1, 4, 2, 4, 4, 1]", "assert parse_nested_parens(\"(()(())((()))) ((())) ((())) ((())) (()) (()(())((()))) () ((())) (((()))) (()) ((())) ((())) () (()(())((())))\") == [4, 3, 3, 3, 2, 4, 1, 3, 4, 2, 3, 3, 1, 4]", "assert parse_nested_parens(\"((())()()) (()()) () ((())) (()()) () ((())()()) ((())) ((())) ((())) ((())) ((()))\") == [3, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3]", "assert parse_nested_parens(\"(()) ((())()()) ((())()()) () (((()))) ((())()()) ((())()()) (()()) (()()) (()) ((())) (()())\") == [2, 3, 3, 1, 4, 3, 3, 2, 2, 2, 3, 2]", "assert parse_nested_parens(\"((())()()) (()(())((()))) (()) (()(())((()))) (((()))) (()(())((()))) (())\") == [3, 4, 2, 4, 4, 4, 2]", "assert parse_nested_parens(\"(()) (()) (()(())((()))) (()) (((()))) (((()))) ((())()())\") == [2, 2, 4, 2, 4, 4, 3]", "assert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) ((())()()) (((()))) (()(())((()))) ((())()())\") == [4, 4, 4, 3, 4, 4, 3]", "assert parse_nested_parens(\"() ((())) ((())()()) () ((())()()) (()()) () () ((())) (()()) ((())) ((())()())\") == [1, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 3]", "assert parse_nested_parens(\"(()) (()()) ((())()()) (()()) () () ((())) () ((())()()) (((()))) (((()))) ()\") == [2, 2, 3, 2, 1, 1, 3, 1, 3, 4, 4, 1]", "assert parse_nested_parens(\"(()()) ((())()()) ((())) (()())\") == [2, 3, 3, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())()()) (()()) (()) ((())()()) (((()))) (((()))) ((())()()) ((())) ((())()()) () (()()) (()()) ((())()()) (()) ((())) ((())()())\") == [3, 3, 3, 2, 2, 3, 4, 4, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3]", "assert parse_nested_parens(\"(()()) () (()()) (()())\") == [2, 1, 2, 2]", "assert parse_nested_parens(\"(((()))) ((())) () ((())()()) (()()) (()()) () ((())) ((())) (()()) (((()))) (()())\") == [4, 3, 1, 3, 2, 2, 1, 3, 3, 2, 4, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())()()) () ((())) (()()) ((())()()) (()())\") == [3, 3, 3, 1, 3, 2, 3, 2]", "assert parse_nested_parens(\"(()) ((())) ((())) ((())()()) () ((()))\") == [2, 3, 3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) (()()) (()()) () () ((())) ((())()()) ()\") == [2, 2, 2, 1, 1, 3, 3, 1]", "assert parse_nested_parens(\"(()) (()(())((()))) ((())()()) (()()) (((()))) ((())()()) ((())()())\") == [2, 4, 3, 2, 4, 3, 3]", "assert parse_nested_parens(\"((())) () (((()))) (((()))) (()()) (((())))\") == [3, 1, 4, 4, 2, 4]", "assert parse_nested_parens(\"() ((())) () (()()) (((()))) ((())) (()()) () (()) (((()))) (()(())((()))) (((()))) (((()))) ()\") == [1, 3, 1, 2, 4, 3, 2, 1, 2, 4, 4, 4, 4, 1]", "assert parse_nested_parens(\"((())) ((())()()) () ((()))\") == [3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) (()()) () ((()))\") == [2, 2, 1, 3]", "assert parse_nested_parens(\"(((()))) () (()) () (()) (())\") == [4, 1, 2, 1, 2, 2]", "assert parse_nested_parens(\"() ((())()()) () ((())) (()()) () () () () (()()) ((())) ((()))\") == [1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3]", "assert parse_nested_parens(\"((())) ((())) (()()) (()()) ((())()()) ((())) ((())) ((())()())\") == [3, 3, 2, 2, 3, 3, 3, 3]", "assert parse_nested_parens(\"((())) () ((())()()) (((()))) (()) (((()))) () ((())) (()()) (()) (((()))) (()())\") == [3, 1, 3, 4, 2, 4, 1, 3, 2, 2, 4, 2]", "assert parse_nested_parens(\"(()()) (()) ((())) () () () ((()))\") == [2, 2, 3, 1, 1, 1, 3]", "assert parse_nested_parens(\"((())()()) (((()))) ((())()()) ((())) ((())()()) (())\") == [3, 4, 3, 3, 3, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())) (()()) ((())()()) () () ()\") == [3, 3, 3, 2, 3, 1, 1, 1]", "assert parse_nested_parens(\"(()()) (()()) () (()()) ((())()()) (()()) () (()()) ((())) () () (()())\") == [2, 2, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2]", "assert parse_nested_parens(\"(()) (((()))) (()) (()) ((())) () ((())) ((())()()) ((())) (()) (()()) (((())))\") == [2, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 4]", "assert parse_nested_parens(\"(((()))) (((()))) () (()()) ((())()()) () (()(())((()))) (()(())((()))) (()()) () (()()) (()) (()) ((())()())\") == [4, 4, 1, 2, 3, 1, 4, 4, 2, 1, 2, 2, 2, 3]", "assert parse_nested_parens(\"((())()()) (((()))) ((())) ((())) ((())) ((())()()) ((())()()) (()()) () () (()(())((()))) ((())) ((())()()) (()(())((()))) () ((())()()) (((()))) (((()))) (()(())((()))) ((())()()) ()\") == [3, 4, 3, 3, 3, 3, 3, 2, 1, 1, 4, 3, 3, 4, 1, 3, 4, 4, 4, 3, 1]", "assert parse_nested_parens(\"() ((())) ((())()()) ((())) () (()()) () (()())\") == [1, 3, 3, 3, 1, 2, 1, 2]", "assert parse_nested_parens(\"(()) (()()) () (()()) ((())()()) ((())) ((())) (()) ((())()()) () ((())()()) (()()) () (()) ((())) (()()) (()()) ((())()())\") == [2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3]", "assert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]", "assert parse_nested_parens(\"(()()) (((()))) (((()))) (()) (()()) (((()))) () (((()))) (()) ((())) () ()\") == [2, 4, 4, 2, 2, 4, 1, 4, 2, 3, 1, 1]", "assert parse_nested_parens(\"(()()) (((()))) (((()))) (()()) (((()))) ((())) ((())()()) (()) ((())()()) (((()))) (()()) () (()) (((()))) () (()(())((()))) () (()) (()(())((()))) ((())) ((())()())\") == [2, 4, 4, 2, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 1, 4, 1, 2, 4, 3, 3]", "assert parse_nested_parens(\"() (()(())((()))) (()) (()()) ((())()()) (()()) (()())\") == [1, 4, 2, 2, 3, 2, 2]", "assert parse_nested_parens(\"((())()()) (()(())((()))) (()()) (()()) ((())()()) (()()) ((())) () () (()()) (()(())((()))) ((())()()) (()()) ((())()()) (((()))) (()(())((()))) (()()) () ((())()()) ((())()()) ()\") == [3, 4, 2, 2, 3, 2, 3, 1, 1, 2, 4, 3, 2, 3, 4, 4, 2, 1, 3, 3, 1]", "assert parse_nested_parens(\"((())()()) () () (()()) (()()) (()()) ((())) (()())\") == [3, 1, 1, 2, 2, 2, 3, 2]", "assert parse_nested_parens(\"() ((())()()) (()()) (()) ((())()()) () (((()))) ((())()()) () (()) (()) ((())()()) (()) (()) (()) ((())) ((())) (((())))\") == [1, 3, 2, 2, 3, 1, 4, 3, 1, 2, 2, 3, 2, 2, 2, 3, 3, 4]", "assert parse_nested_parens(\"(()(())((()))) () (()(())((()))) (()) (((()))) ((())()()) ((())()()) ((())) ((())()()) (()(())((()))) ((())) (()(())((()))) ((())) ((())()())\") == [4, 1, 4, 2, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3]", "assert parse_nested_parens(\"(()()) (((()))) () (()) (()) ((())) (()()) () () ((())()()) (()) ((()))\") == [2, 4, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3]", "assert parse_nested_parens(\"(()) ((())()()) (()()) ((())()()) (((()))) (()()) (()(())((()))) (()()) (()(())((()))) ((())) (()) ((())) (()()) (()) (()()) () ((())) ((())) ((())) ((())) (()())\") == [2, 3, 2, 3, 4, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2]", "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]", "assert parse_nested_parens(\"((())) ((())) ((())()()) ((())) ((())()()) ((())) () ()\") == [3, 3, 3, 3, 3, 3, 1, 1]", "assert parse_nested_parens(\"((())) (()()) () ((())()())\") == [3, 2, 1, 3]", "assert parse_nested_parens(\"((())()()) () (()()) ((())) (()()) () ((())()()) ((()))\") == [3, 1, 2, 3, 2, 1, 3, 3]", "assert parse_nested_parens(\"(((()))) () (()) (((()))) ((())) (()) ((())()()) ((())()()) () ((())()()) (()) ((())()())\") == [4, 1, 2, 4, 3, 2, 3, 3, 1, 3, 2, 3]", "assert parse_nested_parens(\"((())()()) () (()()) ((())) ((())()()) ((())()())\") == [3, 1, 2, 3, 3, 3]", "assert parse_nested_parens(\"((())()()) () ((())) () (()()) ((())) ((())()()) () () ((())()()) () (()())\") == [3, 1, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2]", "assert parse_nested_parens(\"() ((())) (()()) (((()))) () ((())) (((()))) () (()) () () ((())()()) (()) (()()) ((())) (((()))) (()) (())\") == [1, 3, 2, 4, 1, 3, 4, 1, 2, 1, 1, 3, 2, 2, 3, 4, 2, 2]", "assert parse_nested_parens(\"((())()()) () ((())()()) ((())()()) ((())) () ((())()()) ((())) () ((())()()) (()()) (()())\") == [3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 2]", "assert parse_nested_parens(\"() (()()) ((())()()) (()(())((()))) (((()))) (()(())((()))) ((())()()) (()) (()()) (((()))) (()) (()) (()()) (((()))) (((()))) () (()) ((())) () (()) (()())\") == [1, 2, 3, 4, 4, 4, 3, 2, 2, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 2]", "assert parse_nested_parens(\"(((()))) () (((()))) (()()) ((())) () (()()) (((()))) (()()) (((()))) () ()\") == [4, 1, 4, 2, 3, 1, 2, 4, 2, 4, 1, 1]", "assert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) () (()) () ((())) (()) (()()) (((()))) ((())) () () (()) () () (()) () ((())) (()(())((()))) ((()))\") == [4, 4, 4, 1, 2, 1, 3, 2, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 3]", "assert parse_nested_parens(\"(()) (()) (()()) ((())()()) (()) (()()) ((())) (()()) (()(())((()))) (()(())((()))) ((())()()) ((())) (((()))) (()(())((()))) ((())) ((())) (()(())((()))) () ((())) ((())) ((())()())\") == [2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 1, 3, 3, 3]", "assert parse_nested_parens(\"((())) () (()) ((())()()) (()()) ((())) (()) () () (((()))) (((()))) (())\") == [3, 1, 2, 3, 2, 3, 2, 1, 1, 4, 4, 2]", "assert parse_nested_parens(\"\") == []", "assert parse_nested_parens(\"((())()()) (()) (()()) ((())) () ((())) ((())()()) () () (()) (()) (((()))) (((()))) ((())) () () (()()) (())\") == [3, 2, 2, 3, 1, 3, 3, 1, 1, 2, 2, 4, 4, 3, 1, 1, 2, 2]", "assert parse_nested_parens(\"((())) ((())()()) ((())) (()()) ((())()()) () (()()) ((()))\") == [3, 3, 3, 2, 3, 1, 2, 3]", "assert parse_nested_parens(\"((())()()) ((())()()) ((())()()) ((())) (()()) ((())) ((())()()) ((())()()) ((())()()) () ((())) (()())\") == [3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 3, 2]", "assert parse_nested_parens(\"((())()()) (()) () (((()))) ((())()()) ((())()()) (((()))) (()) (((()))) () (((()))) ((())()()) (()()) (()) (()) (()) () (())\") == [3, 2, 1, 4, 3, 3, 4, 2, 4, 1, 4, 3, 2, 2, 2, 2, 1, 2]", "assert parse_nested_parens(\"(()()) (()) ((())()()) ((())()()) () ((()))\") == [2, 2, 3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) () ((())()()) () ((())) () ((())) ()\") == [2, 1, 3, 1, 3, 1, 3, 1]", "assert parse_nested_parens(\"((())) () (()()) ()\") == [3, 1, 2, 1]", "assert parse_nested_parens(\"((())) ((())) (()()) ((())()()) () ((())()()) ((())()()) ((())) (()()) ((())) () ((())()())\") == [3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 1, 3]", "assert parse_nested_parens(\"(()()) () (()()) ((())) () ((())()()) (()()) ((())()())\") == [2, 1, 2, 3, 1, 3, 2, 3]", "assert parse_nested_parens(\"(((()))) (()) () ((())()()) (()()) () (()()) (()(())((()))) (()(())((()))) ((())) (((()))) (()(())((()))) ((())()()) ()\") == [4, 2, 1, 3, 2, 1, 2, 4, 4, 3, 4, 4, 3, 1]", "assert parse_nested_parens(\"(()()) (()()) () (()())\") == [2, 2, 1, 2]", "assert parse_nested_parens(\"((())) ((())) (((()))) (()) (()()) (()()) () ((())) ((())()()) () (()(())((()))) (()()) (()(())((()))) ((()))\") == [3, 3, 4, 2, 2, 2, 1, 3, 3, 1, 4, 2, 4, 3]", "assert parse_nested_parens(\"(()()) (()()) () (()) () (()()) (()) (()) (((()))) () (()()) (())\") == [2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 2, 2]", "assert parse_nested_parens('(()(())((())))') == [4]", "assert parse_nested_parens(\"((())) (()) (((()))) () (()()) (((()))) ((())()()) ((())) (()()) ((())()()) (((()))) ((())) (()) ((())) ((())) () ((())) ((())()())\") == [3, 2, 4, 1, 2, 4, 3, 3, 2, 3, 4, 3, 2, 3, 3, 1, 3, 3]", "assert parse_nested_parens(\"(()) ((())()()) (()) ((())) ((())) ((())()()) (((()))) () ((())()()) (()(())((()))) ((())) ((())()()) ((())()()) (())\") == [2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 3, 3, 2]", "assert parse_nested_parens(\"(()()) ((())()()) (()()) ()\") == [2, 3, 2, 1]", "assert parse_nested_parens(\"(()(())((()))) ((())()()) (((()))) (()(())((()))) () (()(())((()))) ()\") == [4, 3, 4, 4, 1, 4, 1]", "assert parse_nested_parens(\"((())) ((())) ((())()()) () ((())) ((())) (()()) ((())()()) (((()))) () (()) (((())))\") == [3, 3, 3, 1, 3, 3, 2, 3, 4, 1, 2, 4]", "assert parse_nested_parens(\"((())) (((()))) ((())) (()()) (()()) ((())()()) (()) (()(())((()))) (()) ((())) (()) ((())) () (((())))\") == [3, 4, 3, 2, 2, 3, 2, 4, 2, 3, 2, 3, 1, 4]", "assert parse_nested_parens(\"((())) ((())) ((())()()) (()()) () (()(())((()))) (()()) (((()))) (((()))) ((())()()) (()()) () () ((())) (((()))) (()(())((()))) (((()))) ((())()()) ((())) (()(())((()))) (())\") == [3, 3, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 1, 3, 4, 4, 4, 3, 3, 4, 2]", "assert parse_nested_parens(\"(()) () (((()))) () (((()))) (()()) (()) (((()))) (()(())((()))) (((()))) () (()()) (()(())((()))) (()()) (()(())((()))) (()()) (((()))) (()()) (((()))) (()) (()())\") == [2, 1, 4, 1, 4, 2, 2, 4, 4, 4, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2]"], "nl": " Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    ", "func": "def parse_nested_parens(paren_string: str) -> List[int]:", "examples": ">>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    ", "repair_prompt": ["def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \nFor each of the groups, output the deepest level of nesting of parentheses.  \nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''"], "completion": "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    \n    return depths", "completions": ["from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_nesting = 0\n        current_nesting = 0\n        for char in group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        results.append(max_nesting)\n    \n    return results", "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_nesting = 0\n        current_nesting = 0\n        for char in group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        results.append(max_nesting)\n    \n    return results", "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    \n    return result", "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    def max_nesting_depth(paren_group: str) -> int:\n        max_depth = 0\n        depth = 0\n        for char in paren_group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n    \n    groups = paren_string.split()\n    return [max_nesting_depth(group) for group in groups]", "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    \n    return results", "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    \n    return depths", "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    max_nesting_levels = []\n    \n    for group in groups:\n        current_level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        \n        max_nesting_levels.append(max_level)\n    \n    return max_nesting_levels", "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    \n    return results", "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    def max_nesting_level(paren_group: str) -> int:\n        max_level = 0\n        current_level = 0\n        for char in paren_group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        return max_level\n    \n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]", "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    \n    return depths"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Determine the depth of nesting for each group of parentheses.\",\n        \"details\": \"For each group, we need to count the maximum levels of nested parentheses to find the deepest level of nesting.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to parse the nested parentheses.\",\n        \"details\": \"We need to write a Python function that takes a string as input, processes it to find the maximum nesting depth, and returns a list of these depths.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Receive the input string from the user.\",\n        \"details\": \"The input will be a string containing multiple groups of nested parentheses separated by spaces.\"\n      },\n      {\n        \"step\": \"Split the input string into individual groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into separate groups of parentheses.\"\n      },\n      {\n        \"step\": \"Process each group to find the maximum nesting depth.\",\n        \"details\": \"For each group, iterate through the characters to count the levels of nested parentheses and determine the maximum depth.\"\n      },\n      {\n        \"step\": \"Store the results for each group.\",\n        \"details\": \"Create a list to store the maximum nesting depth for each group of parentheses.\"\n      },\n      {\n        \"step\": \"Return the list of maximum nesting depths.\",\n        \"details\": \"The final output should be a list of integers representing the deepest level of nesting for each group of parentheses in the input string.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    \n    return depths", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    \n    return depths"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Determine the maximum level of nesting for each group of parentheses.\",\n        \"details\": \"For each group, we need to count the levels of nested parentheses to find the maximum depth.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to parse the nested parentheses.\",\n        \"details\": \"We need to write a function that takes a string representing a group of parentheses and returns the maximum nesting level.\"\n      },\n      {\n        \"subproblem\": \"Combine the results for all groups.\",\n        \"details\": \"After processing each group, we need to collect the maximum nesting levels and return them as a list.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Split the input string into groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into individual groups of parentheses.\"\n      },\n      {\n        \"step\": \"Process each group to find the maximum nesting level.\",\n        \"details\": \"For each group, iterate through the characters to count the levels of nested parentheses and determine the maximum depth.\"\n      },\n      {\n        \"step\": \"Compile the results.\",\n        \"details\": \"Store the maximum nesting levels for each group and return them as a list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_nesting = 0\n        current_nesting = 0\n        for char in group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        results.append(max_nesting)\n    \n    return results", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_nesting = 0\n        current_nesting = 0\n        for char in group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        results.append(max_nesting)\n    \n    return results"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Determine the maximum level of nesting for each group of parentheses.\",\n        \"details\": \"For each group, we need to count the levels of nested parentheses to find the maximum depth.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to parse the nested parentheses.\",\n        \"details\": \"We need to write a function that takes a string representing a group of parentheses and returns the maximum nesting level.\"\n      },\n      {\n        \"subproblem\": \"Combine the results for all groups.\",\n        \"details\": \"After processing each group, we need to collect the maximum nesting levels and return them as a list.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Split the input string into groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into individual groups of parentheses.\"\n      },\n      {\n        \"step\": \"Process each group to find the maximum nesting level.\",\n        \"details\": \"For each group, iterate through the characters to count the levels of nested parentheses and determine the maximum depth.\"\n      },\n      {\n        \"step\": \"Compile the results.\",\n        \"details\": \"Store the maximum nesting levels for each group and return them as a list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_nesting = 0\n        current_nesting = 0\n        for char in group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        results.append(max_nesting)\n    \n    return results", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_nesting = 0\n        current_nesting = 0\n        for char in group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        results.append(max_nesting)\n    \n    return results"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Determine the depth of nesting for each group of parentheses.\",\n        \"details\": \"For each group, we need to count the maximum levels of nested parentheses to find the deepest level of nesting.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to parse the nested parentheses.\",\n        \"details\": \"We need to write a Python function that takes a string as input, processes it to find the maximum nesting level, and returns a list of these levels.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Receive the input string from the user.\",\n        \"details\": \"The input will be a string containing multiple groups of nested parentheses separated by spaces.\"\n      },\n      {\n        \"step\": \"Split the input string into individual groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into a list of groups.\"\n      },\n      {\n        \"step\": \"Process each group to find the maximum nesting level.\",\n        \"details\": \"For each group, iterate through the characters to count the depth of nested parentheses and record the maximum depth encountered.\"\n      },\n      {\n        \"step\": \"Store the results for each group.\",\n        \"details\": \"Create a list to store the maximum nesting levels for each group.\"\n      },\n      {\n        \"step\": \"Return the list of maximum nesting levels.\",\n        \"details\": \"The final output should be a list of integers representing the deepest level of nesting for each group of parentheses in the input string.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    \n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    \n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Determine the depth of nesting for each group of parentheses.\",\n        \"details\": \"For each group, we need to count the maximum number of nested parentheses to find the deepest level of nesting.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to count the nesting depth of a single group of parentheses.\",\n        \"details\": \"We need a helper function that takes a string representing a group of parentheses and returns the maximum nesting depth.\"\n      },\n      {\n        \"subproblem\": \"Combine the results for all groups.\",\n        \"details\": \"After processing all groups, we need to compile the results into a list that matches the expected output format.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Split the input string into groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into individual groups of parentheses.\"\n      },\n      {\n        \"step\": \"Process each group to find the maximum nesting depth.\",\n        \"details\": \"For each group, apply the helper function designed to determine the nesting depth.\"\n      },\n      {\n        \"step\": \"Compile the results into a list.\",\n        \"details\": \"Collect the maximum nesting depths for all groups into a single list and return it.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    def max_nesting_depth(paren_group: str) -> int:\n        max_depth = 0\n        depth = 0\n        for char in paren_group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n    \n    groups = paren_string.split()\n    return [max_nesting_depth(group) for group in groups]", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    def max_nesting_depth(paren_group: str) -> int:\n        max_depth = 0\n        depth = 0\n        for char in paren_group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n    \n    groups = paren_string.split()\n    return [max_nesting_depth(group) for group in groups]"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Determine the maximum level of nesting for each group of parentheses.\",\n        \"details\": \"For each group, we need to count the levels of nested parentheses to find the maximum depth.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to parse the nested parentheses.\",\n        \"details\": \"We need to write a function that takes a string representing a group of parentheses and returns the maximum nesting level.\"\n      },\n      {\n        \"subproblem\": \"Combine the results for all groups.\",\n        \"details\": \"After processing each group, we need to collect the maximum nesting levels and return them as a list.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Split the input string into groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into individual groups of parentheses.\"\n      },\n      {\n        \"step\": \"Process each group to find the maximum nesting level.\",\n        \"details\": \"For each group, iterate through the characters to count the levels of nested parentheses and determine the maximum depth.\"\n      },\n      {\n        \"step\": \"Compile the results.\",\n        \"details\": \"Store the maximum nesting levels for each group and return them as a list in the specified format.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    \n    return results", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    \n    return results"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Determine the depth of nesting for each group of parentheses.\",\n        \"details\": \"For each group, we need to count the maximum number of nested parentheses to find the deepest level of nesting.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to parse the nested parentheses.\",\n        \"details\": \"We need to write a Python function that takes a string as input, processes it to find the maximum nesting depth, and returns a list of these depths.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Receive the input string from the user.\",\n        \"details\": \"The input will be a string containing multiple groups of nested parentheses separated by spaces.\"\n      },\n      {\n        \"step\": \"Split the input string into individual groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into a list of groups.\"\n      },\n      {\n        \"step\": \"Process each group to find the maximum nesting depth.\",\n        \"details\": \"For each group, iterate through the characters to count the maximum depth of nested parentheses.\"\n      },\n      {\n        \"step\": \"Store the results and return them.\",\n        \"details\": \"Create a list to store the maximum nesting depths for each group and return this list as the output.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    \n    return depths", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    \n    return depths"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Count the maximum level of nesting for each group of parentheses.\",\n        \"details\": \"For each group, determine the deepest level of nested parentheses. This can be achieved by iterating through the string and keeping track of the nesting level.\"\n      },\n      {\n        \"subproblem\": \"Handle edge cases such as empty strings or strings without parentheses.\",\n        \"details\": \"Ensure the function can handle cases where there are no parentheses or the input is empty.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Split the input string into groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into individual groups of parentheses.\"\n      },\n      {\n        \"step\": \"Initialize a variable to keep track of the current nesting level.\",\n        \"details\": \"This will be incremented for each opening parenthesis '(' and decremented for each closing parenthesis ')'. The maximum value of this variable during the iteration will represent the deepest level of nesting.\"\n      },\n      {\n        \"step\": \"Iterate through each character in the group.\",\n        \"details\": \"For each character, update the nesting level based on whether it is an opening or closing parenthesis. Record the maximum nesting level encountered.\"\n      },\n      {\n        \"step\": \"Store the maximum nesting level for each group.\",\n        \"details\": \"After processing each group, store the maximum nesting level in a list.\"\n      },\n      {\n        \"step\": \"Return the list of maximum nesting levels.\",\n        \"details\": \"Combine all the maximum nesting levels into a single list and return it.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    max_nesting_levels = []\n    \n    for group in groups:\n        current_level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        \n        max_nesting_levels.append(max_level)\n    \n    return max_nesting_levels", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    max_nesting_levels = []\n    \n    for group in groups:\n        current_level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        \n        max_nesting_levels.append(max_level)\n    \n    return max_nesting_levels"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Determine the maximum level of nesting for each group of parentheses.\",\n        \"details\": \"For each group, we need to count the levels of nested parentheses to find the maximum depth.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to parse the nested parentheses.\",\n        \"details\": \"We need to write a function that takes a string representing a group of parentheses and returns the maximum nesting level.\"\n      },\n      {\n        \"subproblem\": \"Combine the results for all groups.\",\n        \"details\": \"After processing each group, we need to collect the maximum nesting levels and return them as a list.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Split the input string into groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into individual groups of parentheses.\"\n      },\n      {\n        \"step\": \"Process each group to find the maximum nesting level.\",\n        \"details\": \"For each group, iterate through the characters to count the levels of nested parentheses and determine the maximum depth.\"\n      },\n      {\n        \"step\": \"Compile the results.\",\n        \"details\": \"Store the maximum nesting levels for each group and return them as a list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    \n    return results", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    results = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    \n    return results"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Determine the maximum level of nesting for each group of parentheses.\",\n        \"details\": \"For each group, we need to count the levels of nested parentheses to find the maximum depth.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to count the nesting level of a single group of parentheses.\",\n        \"details\": \"We need a helper function that takes a string representing a group of parentheses and returns the maximum nesting level.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Split the input string into groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into individual groups of parentheses.\"\n      },\n      {\n        \"step\": \"Process each group to find the maximum nesting level.\",\n        \"details\": \"For each group, apply the helper function to determine the maximum nesting level.\"\n      },\n      {\n        \"step\": \"Combine the results into a list.\",\n        \"details\": \"Collect the maximum nesting levels for all groups into a single list and return it.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    def max_nesting_level(paren_group: str) -> int:\n        max_level = 0\n        current_level = 0\n        for char in paren_group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        return max_level\n    \n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    def max_nesting_level(paren_group: str) -> int:\n        max_level = 0\n        current_level = 0\n        for char in paren_group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        return max_level\n    \n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Split the input string into individual groups of parentheses.\",\n        \"details\": \"The input string contains multiple groups of nested parentheses separated by spaces. We need to split the string to process each group individually.\"\n      },\n      {\n        \"subproblem\": \"Determine the depth of nesting for each group of parentheses.\",\n        \"details\": \"For each group, we need to count the maximum levels of nested parentheses to find the deepest level of nesting.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to parse the nested parentheses.\",\n        \"details\": \"We need to write a Python function that takes a string as input, processes it to find the maximum nesting depth, and returns a list of these depths.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Receive the input string from the user.\",\n        \"details\": \"The input will be a string containing multiple groups of nested parentheses separated by spaces.\"\n      },\n      {\n        \"step\": \"Split the input string into individual groups.\",\n        \"details\": \"Use the space character as a delimiter to split the input string into separate groups of parentheses.\"\n      },\n      {\n        \"step\": \"Process each group to find the maximum nesting depth.\",\n        \"details\": \"For each group, iterate through the characters to count the levels of nested parentheses and determine the maximum depth.\"\n      },\n      {\n        \"step\": \"Store the results for each group.\",\n        \"details\": \"Create a list to store the maximum nesting depth for each group of parentheses.\"\n      },\n      {\n        \"step\": \"Return the list of maximum nesting depths.\",\n        \"details\": \"The final output should be a list of integers representing the deepest level of nesting for each group of parentheses in the input string.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    \n    return depths", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    '''Input to this function consists of a string that represents multiple groups of nested parentheses divided by spaces.  \n    For each of the groups, output the deepest level of nesting of parentheses.  \n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    \n    return depths"}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [99, 99, 99, 99, 99, 99, 99, 99, 99, 99], "passed": true, "pass": true, "pass_num": 10, "round": 737, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 476}
