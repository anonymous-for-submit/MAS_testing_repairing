{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "entry_point": "remove_duplicates", "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "test": ["def check(remove_duplicates):\n\tassert remove_duplicates([3, 2, 5, 4]) == [3, 2, 5, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 4, 2, 1, 9, 6, 4]) == [2, 1, 9, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 3, 6, 1, 4, 4, 9]) == [6, 1, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 7, 4, 3]) == [7, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 1, 2, 4]) == [1, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 2, 7, 2, 1, 3, 1]) == [5, 7, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 6, 8, 3, 1, 8, 3]) == [4, 6, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 7, 6, 4, 2, 1, 7]) == [4, 2, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 2, 1, 4, 6, 4, 8]) == [5, 2, 1, 6, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 2, 8, 2]) == [3, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 7, 3, 6]) == [7, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 7, 4, 6]) == [5, 7, 4, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 6, 3, 4, 2, 6, 5]) == [3, 2, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 2, 6, 7, 4, 1, 3]) == [5, 2, 6, 7, 4, 1, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 7, 7, 8]) == [4, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 4, 1, 5]) == [1, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 7, 2, 7, 7, 5, 9]) == [6, 2, 5, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 1, 8, 6]) == [1, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 1, 1, 6, 8, 7, 3]) == [5, 6, 8, 7, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 1, 7, 6, 6, 10]) == [2, 7, 10]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 7, 4]) == [1, 2, 7, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 7, 2, 6]) == [1, 7, 2, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 3, 8, 9]) == [1, 3, 8, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 5, 6, 4, 8, 6, 6]) == [2, 5, 4, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 2, 5, 2]) == [4, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 6, 2, 7, 4, 2, 1]) == [6, 7, 4, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 2, 8, 3]) == [5, 2, 8, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 5, 5, 5, 5, 2, 2]) == []", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 7, 3, 7, 5, 2, 4]) == [5, 2, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 3, 7, 2, 3, 1, 5]) == [7, 2, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 1, 1, 3, 1, 6, 8]) == [4, 3, 6, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 7, 2, 4, 2, 4, 8]) == [1, 7, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 3, 6, 1, 5, 5, 3]) == [6, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 7, 5, 5]) == [4, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 2, 8]) == [1, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 4, 4, 3, 1, 6]) == [2, 3, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 7, 3, 2]) == [7, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 3, 4, 2]) == [1, 3, 4, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 2, 5, 8]) == [4, 2, 5, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 4, 5, 4, 3, 8, 9]) == [5, 3, 8, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 1, 8, 7]) == [3, 1, 8, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 5, 6, 6]) == [3, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 1, 1, 4, 3, 6, 3]) == [4]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 1, 6, 6]) == []", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 3, 1, 5, 9, 7, 6]) == [4, 3, 1, 5, 9, 7, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 2, 2, 3]) == []", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 2, 7, 1, 2, 1, 2]) == [6, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 6, 7, 9]) == [2, 6, 7, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 3, 8, 2]) == [4, 3, 8, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 6, 4, 3, 4, 3, 2]) == [6, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 1, 5, 2, 2, 6, 7]) == [5, 6, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 6, 7, 6, 8, 1, 9]) == [4, 7, 8, 1, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 8, 9]) == [1, 2, 8, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 6, 8, 1, 7, 5, 8]) == [6, 7, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 6, 2, 2, 6, 3, 7]) == [7]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 7, 1, 1, 4, 3, 7]) == [5, 4, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 6, 3, 7]) == [2, 6, 3, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 2, 1, 3, 2, 5, 2]) == [6, 1, 3, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 3, 2, 1]) == [5, 3, 2, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 6, 3, 4, 3, 1, 3]) == [4, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 6, 1, 5, 4, 1, 10]) == [5, 4, 10]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 2, 4, 5]) == [4, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 7, 3, 3, 5, 4, 4]) == [7, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 6, 8, 6]) == [3, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 3, 4, 8]) == [1, 3, 4, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 6, 6, 5]) == [5]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 4, 6, 1, 1, 1, 2]) == [4, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 7, 6, 2]) == [7, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 1, 2, 4, 2, 4, 8]) == [6, 1, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 1, 1, 2]) == []", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 1, 2, 3]) == [1, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([]) == []", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 2, 7, 2]) == [6, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 6, 8, 6]) == [2, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 7, 7, 3, 9, 2, 8]) == [6, 3, 9, 2, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 4, 5, 8]) == [4, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 5, 2, 3]) == [2, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 2, 2, 6]) == [4, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 5, 1, 2, 3, 8, 6]) == [5, 1, 3, 8, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 3, 7, 5]) == [7, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 1, 7, 5, 4, 3, 9]) == [6, 1, 7, 5, 4, 3, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 2, 2, 4, 5, 7, 4]) == [5, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 3, 1, 2]) == [5, 3, 1, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 1, 2, 6, 7, 5, 3]) == [4, 1, 2, 6, 7, 5, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 4, 3, 6, 2, 8, 2]) == [5, 4, 3, 6, 8]"], "test_case_list": ["assert remove_duplicates([3, 2, 5, 4]) == [3, 2, 5, 4]", "assert remove_duplicates([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]", "assert remove_duplicates([4, 4, 2, 1, 9, 6, 4]) == [2, 1, 9, 6]", "assert remove_duplicates([3, 3, 6, 1, 4, 4, 9]) == [6, 1, 9]", "assert remove_duplicates([3, 7, 4, 3]) == [7, 4]", "assert remove_duplicates([2, 1, 2, 4]) == [1, 4]", "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([5, 2, 7, 2, 1, 3, 1]) == [5, 7, 3]", "assert remove_duplicates([4, 6, 8, 3, 1, 8, 3]) == [4, 6, 1]", "assert remove_duplicates([6, 7, 6, 4, 2, 1, 7]) == [4, 2, 1]", "assert remove_duplicates([5, 2, 1, 4, 6, 4, 8]) == [5, 2, 1, 6, 8]", "assert remove_duplicates([3, 2, 8, 2]) == [3, 8]", "assert remove_duplicates([6, 7, 3, 6]) == [7, 3]", "assert remove_duplicates([5, 7, 4, 6]) == [5, 7, 4, 6]", "assert remove_duplicates([4, 6, 3, 4, 2, 6, 5]) == [3, 2, 5]", "assert remove_duplicates([5, 2, 6, 7, 4, 1, 3]) == [5, 2, 6, 7, 4, 1, 3]", "assert remove_duplicates([4, 7, 7, 8]) == [4, 8]", "assert remove_duplicates([4, 4, 1, 5]) == [1, 5]", "assert remove_duplicates([6, 7, 2, 7, 7, 5, 9]) == [6, 2, 5, 9]", "assert remove_duplicates([6, 1, 8, 6]) == [1, 8]", "assert remove_duplicates([5, 1, 1, 6, 8, 7, 3]) == [5, 6, 8, 7, 3]", "assert remove_duplicates([1, 2, 1, 7, 6, 6, 10]) == [2, 7, 10]", "assert remove_duplicates([1, 2, 7, 4]) == [1, 2, 7, 4]", "assert remove_duplicates([1, 7, 2, 6]) == [1, 7, 2, 6]", "assert remove_duplicates([1, 3, 8, 9]) == [1, 3, 8, 9]", "assert remove_duplicates([2, 5, 6, 4, 8, 6, 6]) == [2, 5, 4, 8]", "assert remove_duplicates([4, 2, 5, 2]) == [4, 5]", "assert remove_duplicates([2, 6, 2, 7, 4, 2, 1]) == [6, 7, 4, 1]", "assert remove_duplicates([5, 2, 8, 3]) == [5, 2, 8, 3]", "assert remove_duplicates([5, 5, 5, 5, 5, 2, 2]) == []", "assert remove_duplicates([3, 7, 3, 7, 5, 2, 4]) == [5, 2, 4]", "assert remove_duplicates([5, 3, 7, 2, 3, 1, 5]) == [7, 2, 1]", "assert remove_duplicates([4, 1, 1, 3, 1, 6, 8]) == [4, 3, 6, 8]", "assert remove_duplicates([1, 7, 2, 4, 2, 4, 8]) == [1, 7, 8]", "assert remove_duplicates([5, 3, 6, 1, 5, 5, 3]) == [6, 1]", "assert remove_duplicates([4, 7, 5, 5]) == [4, 7]", "assert remove_duplicates([1, 2, 2, 8]) == [1, 8]", "assert remove_duplicates([1, 2, 4, 4, 3, 1, 6]) == [2, 3, 6]", "assert remove_duplicates([2, 7, 3, 2]) == [7, 3]", "assert remove_duplicates([1, 3, 4, 2]) == [1, 3, 4, 2]", "assert remove_duplicates([4, 2, 5, 8]) == [4, 2, 5, 8]", "assert remove_duplicates([4, 4, 5, 4, 3, 8, 9]) == [5, 3, 8, 9]", "assert remove_duplicates([3, 1, 8, 7]) == [3, 1, 8, 7]", "assert remove_duplicates([3, 5, 6, 6]) == [3, 5]", "assert remove_duplicates([6, 1, 1, 4, 3, 6, 3]) == [4]", "assert remove_duplicates([1, 1, 6, 6]) == []", "assert remove_duplicates([4, 3, 1, 5, 9, 7, 6]) == [4, 3, 1, 5, 9, 7, 6]", "assert remove_duplicates([3, 2, 2, 3]) == []", "assert remove_duplicates([6, 2, 7, 1, 2, 1, 2]) == [6, 7]", "assert remove_duplicates([2, 6, 7, 9]) == [2, 6, 7, 9]", "assert remove_duplicates([4, 3, 8, 2]) == [4, 3, 8, 2]", "assert remove_duplicates([4, 6, 4, 3, 4, 3, 2]) == [6, 2]", "assert remove_duplicates([1, 1, 5, 2, 2, 6, 7]) == [5, 6, 7]", "assert remove_duplicates([4, 6, 7, 6, 8, 1, 9]) == [4, 7, 8, 1, 9]", "assert remove_duplicates([1, 2, 8, 9]) == [1, 2, 8, 9]", "assert remove_duplicates([1, 6, 8, 1, 7, 5, 8]) == [6, 7, 5]", "assert remove_duplicates([3, 6, 2, 2, 6, 3, 7]) == [7]", "assert remove_duplicates([5, 7, 1, 1, 4, 3, 7]) == [5, 4, 3]", "assert remove_duplicates([2, 6, 3, 7]) == [2, 6, 3, 7]", "assert remove_duplicates([6, 2, 1, 3, 2, 5, 2]) == [6, 1, 3, 5]", "assert remove_duplicates([5, 3, 2, 1]) == [5, 3, 2, 1]", "assert remove_duplicates([6, 6, 3, 4, 3, 1, 3]) == [4, 1]", "assert remove_duplicates([6, 6, 1, 5, 4, 1, 10]) == [5, 4, 10]", "assert remove_duplicates([2, 2, 4, 5]) == [4, 5]", "assert remove_duplicates([3, 7, 3, 3, 5, 4, 4]) == [7, 5]", "assert remove_duplicates([3, 6, 8, 6]) == [3, 8]", "assert remove_duplicates([1, 3, 4, 8]) == [1, 3, 4, 8]", "assert remove_duplicates([6, 6, 6, 5]) == [5]", "assert remove_duplicates([2, 4, 6, 1, 1, 1, 2]) == [4, 6]", "assert remove_duplicates([6, 7, 6, 2]) == [7, 2]", "assert remove_duplicates([6, 1, 2, 4, 2, 4, 8]) == [6, 1, 8]", "assert remove_duplicates([2, 1, 1, 2]) == []", "assert remove_duplicates([3, 1, 2, 3]) == [1, 2]", "assert remove_duplicates([]) == []", "assert remove_duplicates([6, 2, 7, 2]) == [6, 7]", "assert remove_duplicates([2, 6, 8, 6]) == [2, 8]", "assert remove_duplicates([6, 7, 7, 3, 9, 2, 8]) == [6, 3, 9, 2, 8]", "assert remove_duplicates([5, 4, 5, 8]) == [4, 8]", "assert remove_duplicates([5, 5, 2, 3]) == [2, 3]", "assert remove_duplicates([4, 2, 2, 6]) == [4, 6]", "assert remove_duplicates([2, 5, 1, 2, 3, 8, 6]) == [5, 1, 3, 8, 6]", "assert remove_duplicates([3, 3, 7, 5]) == [7, 5]", "assert remove_duplicates([6, 1, 7, 5, 4, 3, 9]) == [6, 1, 7, 5, 4, 3, 9]", "assert remove_duplicates([2, 2, 2, 4, 5, 7, 4]) == [5, 7]", "assert remove_duplicates([5, 3, 1, 2]) == [5, 3, 1, 2]", "assert remove_duplicates([4, 1, 2, 6, 7, 5, 3]) == [4, 1, 2, 6, 7, 5, 3]", "assert remove_duplicates([5, 4, 3, 6, 2, 8, 2]) == [5, 4, 3, 6, 8]"], "nl": " From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    ", "func": "def remove_duplicates(numbers: List[int]) -> List[int]:", "examples": ">>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    ", "repair_prompt": ["def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''"], "completion": "from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "completions": ["from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    unique_numbers = [num for num in numbers if counts[num] == 1]\n    return unique_numbers", "from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    unique_numbers = []\n    for num in numbers:\n        if counts[num] == 1:\n            unique_numbers.append(num)\n    \n    return unique_numbers", "from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    unique_numbers = []\n    for num in numbers:\n        if counts[num] == 1:\n            unique_numbers.append(num)\n    \n    return unique_numbers", "from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "from typing import *\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements left in the input list.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"Iterate through the input list again and add elements to the result list only if they occur exactly once.\"\n      },\n      {\n        \"step\": \"Return the result list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements left in the input list.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"Iterate through the input list again and add elements to the result list only if they occur exactly once.\"\n      },\n      {\n        \"step\": \"Return the result list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements left in the input list.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"Iterate through the input list again and add elements to the result list only if they occur exactly once.\"\n      },\n      {\n        \"step\": \"Return the result list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements left in the input list.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"Iterate through the input list again and add elements to the result list only if they occur exactly once.\"\n      },\n      {\n        \"step\": \"Return the result list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements left in the input list.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"Filter out elements that have a count greater than one.\"\n      },\n      {\n        \"step\": \"Return the filtered list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    unique_numbers = [num for num in numbers if counts[num] == 1]\n    return unique_numbers", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    unique_numbers = [num for num in numbers if counts[num] == 1]\n    return unique_numbers"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements that do not occur more than once.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"For each element in the input list, check if it occurs more than once.\"\n      },\n      {\n        \"step\": \"If an element occurs only once, add it to the list of unique elements.\"\n      },\n      {\n        \"step\": \"Return the list of unique elements.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    unique_numbers = []\n    for num in numbers:\n        if counts[num] == 1:\n            unique_numbers.append(num)\n    \n    return unique_numbers", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    unique_numbers = []\n    for num in numbers:\n        if counts[num] == 1:\n            unique_numbers.append(num)\n    \n    return unique_numbers"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements left in the input list.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"For each element in the input list, check if it occurs more than once.\"\n      },\n      {\n        \"step\": \"If an element occurs more than once, skip it; otherwise, add it to the list of unique elements.\"\n      },\n      {\n        \"step\": \"Return the list of unique elements.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    unique_numbers = []\n    for num in numbers:\n        if counts[num] == 1:\n            unique_numbers.append(num)\n    \n    return unique_numbers", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    unique_numbers = []\n    for num in numbers:\n        if counts[num] == 1:\n            unique_numbers.append(num)\n    \n    return unique_numbers"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements left in the input list.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"Iterate through the input list again and add elements to the result list only if they occur exactly once.\"\n      },\n      {\n        \"step\": \"Return the result list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements left in the input list.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"Iterate through the input list again and add elements to the result list only if they occur exactly once.\"\n      },\n      {\n        \"step\": \"Return the result list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements left in the input list.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"Iterate through the input list again and add elements to the result list only if they occur exactly once.\"\n      },\n      {\n        \"step\": \"Return the result list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify all elements that occur more than once in the input list.\"\n      },\n      {\n        \"subproblem\": \"Filter out the elements that occur more than once from the input list.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of elements left in the input list.\"\n      },\n      {\n        \"subproblem\": \"Return the filtered list as the output.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize an empty list to store the unique elements.\"\n      },\n      {\n        \"step\": \"Iterate through the input list and use a dictionary to count occurrences of each element.\"\n      },\n      {\n        \"step\": \"Iterate through the input list again and add elements to the result list only if they occur exactly once.\"\n      },\n      {\n        \"step\": \"Return the result list.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    '''From a list of integers, remove all elements that occur more than once. Maintain the order of elements left the same as in the input list. Do not alter the sequence of these remaining elements.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    counts = {}\n    for num in numbers:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = []\n    for num in numbers:\n        if counts[num] == 1:\n            result.append(num)\n    \n    return result"}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [87, 87, 87, 87, 87, 87, 87, 87, 87, 87], "passed": true, "pass": true, "pass_num": 2, "round": 986, "mutate_method": "expand_one2two", "save_node": false, "parent_index": 548}
