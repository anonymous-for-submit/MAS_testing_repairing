{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completion": "from typing import *\ndef is_monotonic_increasing(l: list) -> bool:\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list) -> bool:\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list) -> bool:\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list\")\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"All elements in the list must be numbers\")\n    \n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "completions": ["from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef is_monotonic_increasing(l: list):\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list):\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "from typing import *\ndef is_monotonic_increasing(l: list):\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list):\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. \n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one. \n    Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "from typing import *\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one.\n    Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. \n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one. \n    Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "from typing import *\ndef is_monotonic_increasing(l: list) -> bool:\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list) -> bool:\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list) -> bool:\n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)\n\n# Main function as per the user requirement\ndef main():\n    return monotonic(l)", "from typing import *\ndef is_monotonic_increasing(l: list) -> bool:\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list) -> bool:\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list) -> bool:\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list\")\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"All elements in the list must be numbers\")\n    \n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the definition of monotonically increasing and decreasing lists.\",\n        \"details\": \"Ensure the developer is clear on the criteria for a list to be considered monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically increasing.\",\n        \"details\": \"Develop a function that takes a list as input and returns True if the list is monotonically increasing, otherwise False.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically decreasing.\",\n        \"details\": \"Develop a function that takes a list as input and returns True if the list is monotonically decreasing, otherwise False.\"\n      },\n      {\n        \"subproblem\": \"Combine the two functions to check for either monotonically increasing or decreasing.\",\n        \"details\": \"Develop a main function that uses the previous two functions to determine if the list is either monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Implement error handling for invalid input.\",\n        \"details\": \"Ensure the function can handle cases where the input is not a list or contains non-numeric values.\"\n      },\n      {\n        \"subproblem\": \"Write test cases to verify the correctness of the implementation.\",\n        \"details\": \"Develop a set of test cases that cover various scenarios including empty lists, lists with equal elements, and lists with mixed increasing and decreasing sequences.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Define the functions for checking monotonicity.\",\n        \"details\": \"Create two functions, one for checking increasing and one for checking decreasing, using the definition provided.\"\n      },\n      {\n        \"step\": \"Implement the main function to use the monotonicity check functions.\",\n        \"details\": \"Create a main function that uses the increasing and decreasing check functions to determine the monotonicity of the input list.\"\n      },\n      {\n        \"step\": \"Add error handling.\",\n        \"details\": \"Implement checks to ensure the input is a list and all elements are numbers.\"\n      },\n      {\n        \"step\": \"Test the implementation.\",\n        \"details\": \"Run the test cases to verify the correctness of the implementation.\"\n      },\n      {\n", "Round_0": {"code": "def is_monotonic_increasing(l: list) -> bool:\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list) -> bool:\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list) -> bool:\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list\")\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"All elements in the list must be numbers\")\n    \n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Condition\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one to ensure it is not decreasing or equal.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Condition\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one to ensure it is not increasing or equal.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the checks, return True if the list meets either of the monotonic conditions, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement's docstring to extract the list.\",\n        \"details\": \"Extract the list from the docstring to be used in the function.\"\n      },\n      {\n        \"step\": \"Implement the function to check for Monotonically Increasing Condition.\",\n        \"details\": \"Iterate through the list and compare each element with the next one to ensure it is not decreasing or equal.\"\n      },\n      {\n        \"step\": \"Implement the function to check for Monotonically Decreasing Condition.\",\n        \"details\": \"Iterate through the list and compare each element with the next one to ensure it is not increasing or equal.\"\n      },\n      {\n        \"step\": \"Return the appropriate boolean value based on the checks.\",\n        \"details\": \"If the list is monotonically increasing or decreasing, return True. Otherwise, return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the function.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Condition\",\n        \"details\": \"Implement a function to check if the list is monotonically increasing. This involves comparing each element with the next one to ensure it is not decreasing.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Condition\",\n        \"details\": \"Implement a function to check if the list is monotonically decreasing. This involves comparing each element with the next one to ensure it is not increasing.\"\n      },\n      {\n        \"subproblem\": \"Combine the Results\",\n        \"details\": \"Develop a main function that uses the two previously defined functions to determine if the list is either monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Test the Function\",\n        \"details\": \"Write test cases based on the provided examples to verify the correctness of the implemented function.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Analyze the Requirement\",\n        \"details\": \"Understand the requirement to ensure the function checks for both monotonically increasing and decreasing conditions.\"\n      },\n      {\n        \"step\": \"Extract the List\",\n        \"details\": \"Extract the list from the docstring to use it in the function.\"\n      },\n      {\n        \"step\": \"Implement Monotonically Increasing Check\",\n        \"details\": \"Implement a function to iterate through the list and check if each element is less than or equal to the next one.\"\n      },\n      {\n        \"step\": \"Implement Monotonically Decreasing Check\",\n        \"details\": \"Implement a function to iterate through the list and check if each element is greater than or equal to the next one.\"\n      },\n      {\n        \"step\": \"Combine Checks\",\n        \"details\": \"In the main function, use the results from both checks to determine if the list is monotonically increasing or decreasing.\"\n      },\n      {\n        \"step\": \"Test the Function\",\n        \"details", "Round_0": {"code": "def is_monotonic_increasing(l: list):\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list):\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the definition of monotonically increasing and decreasing lists.\",\n        \"steps\": [\n          \"Define what it means for a list to be monotonically increasing.\",\n          \"Define what it means for a list to be monotonically decreasing.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically increasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return True if each subsequent element is greater than or equal to the previous one.\",\n          \"Return False otherwise.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically decreasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return True if each subsequent element is less than or equal to the previous one.\",\n          \"Return False otherwise.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Combine the two functions to check for monotonicity.\",\n        \"steps\": [\n          \"Use the increasing function to check the list.\",\n          \"If it returns False, use the decreasing function to check the list.\",\n          \"Return True if either function returns True, otherwise return False.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the main function based on the user requirement.\",\n        \"steps\": [\n          \"Define the main function 'monotonic' that takes a list as input.\",\n          \"Use the combined check for monotonicity.\",\n          \"Return the result of the check.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Write the docstring for the main function.\",\n        \"steps\": [\n          \"Describe the function's purpose.\",\n          \"Provide examples of usage.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Analyze the requirement to identify the need for two checks: one for increasing and one for decreasing.\",\n      \"Implement the two check functions.\",\n      \"Combine these functions into a single main function that uses both checks.\",\n      \"Write the docstring for the main function based on the user's description.\",\n      \"Implement the", "Round_0": {"code": "def is_monotonic_increasing(l: list):\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list):\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. \n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one. \n    Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the definition of monotonically increasing and decreasing lists.\",\n        \"steps\": [\n          \"Define what it means for a list to be monotonically increasing.\",\n          \"Define what it means for a list to be monotonically decreasing.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically increasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return True if each subsequent element is greater than or equal to the previous one.\",\n          \"Return False otherwise.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically decreasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return True if each subsequent element is less than or equal to the previous one.\",\n          \"Return False otherwise.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Combine the two functions to check if a list is either monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Use the increasing function to check the list.\",\n          \"If it returns False, use the decreasing function to check the list.\",\n          \"Return the result of the decreasing function if the increasing function returns False, otherwise return the result of the increasing function.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Document the function with a docstring that matches the user's requirement.\",\n        \"steps\": [\n          \"Write a clear and concise docstring that describes the function's purpose, parameters, and return value.\",\n          \"Ensure the docstring matches the example usage provided by the user.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Analyze the user requirement to understand the need for the function.\",\n      \"Decompose the requirement into subproblems that are easy to implement.\",\n      \"Implement each subproblem in Python.\",\n      \"Combine the implementations to fulfill the user's requirement.\",\n      \"Document the function with a clear and concise docstring.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one.\n    Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the function.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"details\": \"Implement a function to verify if the list elements are in non-decreasing order.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"details\": \"Implement a function to verify if the list elements are in non-increasing order.\"\n      },\n      {\n        \"subproblem\": \"Combine the results of increasing and decreasing checks.\",\n        \"details\": \"Develop a function that returns True if the list is either monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Test the function with provided examples.\",\n        \"details\": \"Ensure the function works correctly by testing it with the examples given in the requirement.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Extract the list from the docstring.\",\n        \"details\": \"Locate and extract the list from the docstring provided in the requirement.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically increasing.\",\n        \"details\": \"Create a function that iterates through the list to check if each element is greater than or equal to the previous one.\"\n      },\n      {\n        \"step\": \"Implement the function to check for monotonically decreasing.\",\n        \"details\": \"Create a function that iterates through the list to check if each element is less than or equal to the previous one.\"\n      },\n      {\n        \"step\": \"Combine the results of both checks.\",\n        \"details\": \"Develop a main function that uses the results of the increasing and decreasing checks to determine if the list is monotonic.\"\n      },\n      {\n        \"step\": \"Test the function with the provided examples.\",\n        \"details\": \"Execute the function with the examples given in the requirement to verify its correctness.\"\n      },\n      {\n        \"step\": \"Refine and document the function.\",\n        \"details\": \"Ensure the function is well-documented", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. \n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one. \n    Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the function.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Condition\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one to ensure each is less than or equal to the previous.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Condition\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one to ensure each is greater than or equal to the previous.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the checks, return True if the list meets either of the conditions, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement's docstring to extract the list.\",\n        \"details\": \"Extract the list from the docstring to be used in the function.\"\n      },\n      {\n        \"step\": \"Implement the function to check for Monotonically Increasing Condition.\",\n        \"details\": \"Iterate through the list and compare each element with the next one to ensure each is less than or equal to the previous.\"\n      },\n      {\n        \"step\": \"Implement the function to check for Monotonically Decreasing Condition.\",\n        \"details\": \"Iterate through the list and compare each element with the next one to ensure each is greater than or equal to the previous.\"\n      },\n      {\n        \"step\": \"Return the appropriate boolean value based on the conditions checked.\",\n        \"details\": \"If the list is monotonically increasing or decreasing, return True. Otherwise, return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement's docstring.\",\n        \"details\": \"The developer needs to identify and extract the list from the provided docstring to use it in the code.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Increasing Condition\",\n        \"details\": \"Determine if the list is monotonically increasing by comparing each element with the next one to ensure each is less than or equal to the previous.\"\n      },\n      {\n        \"subproblem\": \"Check for Monotonically Decreasing Condition\",\n        \"details\": \"Determine if the list is monotonically decreasing by comparing each element with the next one to ensure each is greater than or equal to the previous.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing.\",\n        \"details\": \"Based on the results from the previous checks, return True if the list meets either of the conditions, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement's docstring to extract the list.\",\n        \"details\": \"Extract the list from the docstring to be used in the function.\"\n      },\n      {\n        \"step\": \"Implement the function to check for Monotonically Increasing Condition.\",\n        \"details\": \"Iterate through the list and compare each element with the next one to ensure each is less than or equal to the previous.\"\n      },\n      {\n        \"step\": \"Implement the function to check for Monotonically Decreasing Condition.\",\n        \"details\": \"Iterate through the list and compare each element with the next one to ensure each is greater than or equal to the previous.\"\n      },\n      {\n        \"step\": \"Return the appropriate boolean value based on the conditions checked.\",\n        \"details\": \"If either condition is met, return True. Otherwise, return False.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) < 2:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the type of monotonicity (increasing or decreasing) for the list.\",\n        \"steps\": [\n          \"Check if the list is monotonically increasing.\",\n          \"Check if the list is monotonically decreasing.\",\n          \"Return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"If any element is greater than the next one, return False.\",\n          \"If the loop completes without finding any such case, return True.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"If any element is less than the next one, return False.\",\n          \"If the loop completes without finding any such case, return True.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Analyze the list to determine if it is monotonically increasing or decreasing.\",\n      \"Use the appropriate check function to verify the monotonicity.\",\n      \"Return the result based on the monotonicity check.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the definition of monotonically increasing and decreasing lists.\",\n        \"steps\": [\n          \"Define what it means for a list to be monotonically increasing.\",\n          \"Define what it means for a list to be monotonically decreasing.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically increasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return True if each subsequent element is greater than or equal to the previous one.\",\n          \"Return False otherwise.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically decreasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return True if each subsequent element is less than or equal to the previous one.\",\n          \"Return False otherwise.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Combine the two functions to check if a list is either monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Use the increasing function to check the list.\",\n          \"If it returns False, use the decreasing function to check the list.\",\n          \"Return the result of the decreasing function if the increasing function returns False, otherwise return the result of the increasing function.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the main function based on the user requirement.\",\n        \"steps\": [\n          \"Define the main function as per the user requirement.\",\n          \"Call the combined check function within the main function.\",\n          \"Return the result of the call.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Analyze the user requirement to identify the need for checking both increasing and decreasing conditions.\",\n      \"Decompose the requirement into manageable subproblems.\",\n      \"Implement the necessary helper functions.\",\n      \"Combine the helper functions to check for both increasing and decreasing conditions.\",\n      \"Implement the main function as per the user requirement.\",\n      \"Test the implementation with various test cases to ensure correctness.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def is_monotonic_increasing(l: list) -> bool:\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list) -> bool:\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list) -> bool:\n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)\n\n# Main function as per the user requirement\ndef main():\n    return monotonic(l)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the definition of monotonically increasing and decreasing lists.\",\n        \"details\": \"Ensure the developer is clear on the criteria for a list to be considered monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically increasing.\",\n        \"details\": \"Develop a function that takes a list as input and returns True if the list is monotonically increasing, otherwise False.\"\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically decreasing.\",\n        \"details\": \"Develop a function that takes a list as input and returns True if the list is monotonically decreasing, otherwise False.\"\n      },\n      {\n        \"subproblem\": \"Combine the two functions to check for either monotonically increasing or decreasing.\",\n        \"details\": \"Develop a main function that uses the previous two functions to determine if the list is either monotonically increasing or decreasing.\"\n      },\n      {\n        \"subproblem\": \"Implement error handling for invalid input.\",\n        \"details\": \"Ensure the function can handle cases where the input is not a list or contains non-numeric values.\"\n      },\n      {\n        \"subproblem\": \"Write test cases to verify the correctness of the implementation.\",\n        \"details\": \"Develop a set of test cases that cover various scenarios including empty lists, lists with equal elements, and lists with mixed increasing and decreasing sequences.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Define the functions for checking monotonicity.\",\n        \"details\": \"Create two functions, one for checking increasing and one for checking decreasing, using the definition provided.\"\n      },\n      {\n        \"step\": \"Implement the main function to use the monotonicity check functions.\",\n        \"details\": \"Create a main function that uses the increasing and decreasing check functions to determine the monotonicity of the input list.\"\n      },\n      {\n        \"step\": \"Add error handling.\",\n        \"details\": \"Implement checks to ensure the input is a list and all elements are numbers.\"\n      },\n      {\n        \"step\": \"Test the implementation.\",\n        \"details\": \"Run the test cases to verify the correctness of the implementation.\"\n      },\n      {\n", "Round_0": {"code": "def is_monotonic_increasing(l: list) -> bool:\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list) -> bool:\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list) -> bool:\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list\")\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"All elements in the list must be numbers\")\n    \n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "passed": true, "pass": true, "pass_num": 10, "round": 897, "mutate_method": "expand_one2two", "save_node": false, "parent_index": 399}
