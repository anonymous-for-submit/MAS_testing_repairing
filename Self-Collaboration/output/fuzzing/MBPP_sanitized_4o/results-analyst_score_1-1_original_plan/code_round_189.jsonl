{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Write a function that takes an angle in degrees as input. The function should then convert that angle from degrees to radians.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "completion": "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n", "completions": ["from typing import *\nimport math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n", "from typing import *\nimport math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n\n# Test the function with the example provided\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "from typing import *\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical conversion from degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Implement a function that accepts an angle in degrees as input.\",\n      \"details\": \"The function should be named 'radian_degree' and take one parameter.\"\n    },\n    {\n      \"description\": \"Perform the conversion calculation within the function.\",\n      \"details\": \"Use the formula radians = degrees * (\u03c0 / 180) to convert the input angle.\"\n    },\n    {\n      \"description\": \"Return the result of the conversion.\",\n      \"details\": \"Ensure the function returns the calculated radian value.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'radian_degree' with one parameter for the angle in degrees.\",\n    \"Import the 'math' module to access the value of \u03c0 (pi).\",\n    \"Inside the function, calculate the radian value using the formula radians = degrees * (\u03c0 / 180).\",\n    \"Return the calculated radian value from the function.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    \"Understand the mathematical formula for converting degrees to radians.\",\n    \"Implement a function that accepts an angle in degrees as input.\",\n    \"Use the conversion formula to calculate the angle in radians.\",\n    \"Return the calculated radian value.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that takes one parameter, 'angle_in_degrees'.\",\n    \"Inside the function, use the formula radians = degrees * (\u03c0 / 180) to convert the input angle from degrees to radians.\",\n    \"Return the result of the conversion.\",\n    \"Test the function with the example provided to ensure it returns the correct radian value for 90 degrees.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Understand the mathematical formula for converting degrees to radians.\",\n    \"Implement a function that accepts an angle in degrees as input.\",\n    \"Use the conversion formula to calculate the angle in radians.\",\n    \"Return the calculated radian value.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that takes one parameter, 'angle_in_degrees'.\",\n    \"Inside the function, use the formula radians = degrees * (\u03c0 / 180) to convert the input angle from degrees to radians.\",\n    \"Import the 'math' module to access the value of \u03c0 (pi).\",\n    \"Calculate the radian value using the formula and store it in a variable.\",\n    \"Return the radian value from the function.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Understand the mathematical formula for converting degrees to radians.\",\n    \"Implement a function that accepts an angle in degrees as input.\",\n    \"Use the conversion formula to calculate the angle in radians.\",\n    \"Return the calculated radian value.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that takes one parameter, 'angle_in_degrees'.\",\n    \"Inside the function, use the formula radians = degrees * (pi / 180) to convert the input angle from degrees to radians.\",\n    \"Import the 'math' module to access the value of pi.\",\n    \"Calculate the radian value using the formula and store it in a variable.\",\n    \"Return the radian value from the function.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is: radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Implement a function that takes an angle in degrees as input.\",\n      \"details\": \"Define a function named 'radian_degree' that accepts one parameter representing the angle in degrees.\"\n    },\n    {\n      \"description\": \"Apply the conversion formula within the function.\",\n      \"details\": \"Use the formula radians = degrees * (\u03c0 / 180) to convert the input angle from degrees to radians.\"\n    },\n    {\n      \"description\": \"Return the result from the function.\",\n      \"details\": \"Ensure the function returns the calculated radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example inputs.\",\n      \"details\": \"Verify the function works correctly by testing it with the example input: radian_degree(90) should return 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'radian_degree' with one parameter for the angle in degrees.\",\n    \"Inside the function, calculate the radian value using the formula: radians = degrees * (\u03c0 / 180).\",\n    \"Return the calculated radian value from the function.\",\n    \"Test the function with the provided example to ensure it returns the correct result.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Understand the mathematical formula for converting degrees to radians.\",\n    \"Create a function that accepts an angle in degrees as input.\",\n    \"Implement the conversion formula within the function.\",\n    \"Return the result of the conversion.\"\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function\",\n      \"description\": \"Create a function named 'radian_degree' that takes one parameter, 'angle_in_degrees'.\"\n    },\n    {\n      \"step\": \"Conversion formula\",\n      \"description\": \"Use the formula radians = degrees * (\u03c0 / 180) to convert the input angle from degrees to radians.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"Return the calculated radians value from the function.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is: radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Implement a function that takes an angle in degrees as input.\",\n      \"details\": \"Define a function named 'radian_degree' that accepts one parameter representing the angle in degrees.\"\n    },\n    {\n      \"description\": \"Apply the conversion formula within the function.\",\n      \"details\": \"Use the formula radians = degrees * (\u03c0 / 180) to convert the input angle from degrees to radians.\"\n    },\n    {\n      \"description\": \"Return the result from the function.\",\n      \"details\": \"Ensure the function returns the calculated radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example inputs to verify correctness.\",\n      \"details\": \"Use the example provided (radian_degree(90) should return 1.5707963267948966) to test the function.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'radian_degree' with a parameter for degrees.\",\n    \"Import the math module to access the value of \u03c0 (pi).\",\n    \"Inside the function, calculate the radians using the formula: radians = degrees * (math.pi / 180).\",\n    \"Return the calculated radian value from the function.\",\n    \"Test the function with the example input to ensure it returns the expected result.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is: radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Implement a function that takes an angle in degrees as input.\",\n      \"details\": \"Define a function named 'radian_degree' that accepts one parameter representing the angle in degrees.\"\n    },\n    {\n      \"description\": \"Apply the conversion formula within the function.\",\n      \"details\": \"Use the formula radians = degrees * (\u03c0 / 180) to convert the input angle from degrees to radians.\"\n    },\n    {\n      \"description\": \"Return the result from the function.\",\n      \"details\": \"Ensure the function returns the calculated radian value.\"\n    },\n    {\n      \"description\": \"Test the function with example inputs.\",\n      \"details\": \"Verify the function works correctly by testing it with the example input: radian_degree(90) should return 1.5707963267948966.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'radian_degree' with a parameter for degrees.\",\n    \"Import the math module to access the value of \u03c0 (pi).\",\n    \"Inside the function, calculate the radians using the formula: radians = degrees * (math.pi / 180).\",\n    \"Return the calculated radian value.\",\n    \"Test the function with the provided example to ensure accuracy.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Understand the mathematical formula for converting degrees to radians.\",\n    \"Identify the input and output requirements for the function.\",\n    \"Determine the necessary Python libraries or functions needed for the conversion.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'radian_degree' that accepts one parameter, 'angle_in_degrees'.\",\n    \"Inside the function, use the formula radians = degrees * (pi / 180) to convert the input angle from degrees to radians.\",\n    \"Import the 'math' library to access the value of pi.\",\n    \"Return the calculated radian value as the output of the function.\",\n    \"Test the function with the example provided to ensure it returns the correct result.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n\n# Example test\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Understand the mathematical formula for converting degrees to radians.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Implement a function that accepts an angle in degrees as input.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Use the conversion formula to calculate the angle in radians.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Return the calculated radian value as the output of the function.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Test the function with the example provided to ensure accuracy.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define a function named 'radian_degree' that takes one parameter, 'angle_in_degrees'.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Inside the function, apply the formula to convert degrees to radians: radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Return the calculated radians value from the function.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Test the function with the input 90 to verify it returns 1.5707963267948966.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(angle_in_degrees):\n    radians = angle_in_degrees * (math.pi / 180)\n    return radians\n\n# Test the function with the example provided\nprint(radian_degree(90))  # Output should be 1.5707963267948966\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Understand the mathematical conversion from degrees to radians.\",\n      \"details\": \"The formula to convert degrees to radians is radians = degrees * (\u03c0 / 180).\"\n    },\n    {\n      \"description\": \"Implement a function that accepts an angle in degrees as input.\",\n      \"details\": \"The function should be named 'radian_degree' and take one parameter.\"\n    },\n    {\n      \"description\": \"Perform the conversion calculation within the function.\",\n      \"details\": \"Use the formula radians = degrees * (\u03c0 / 180) to convert the input angle.\"\n    },\n    {\n      \"description\": \"Return the result of the conversion.\",\n      \"details\": \"Ensure the function returns the calculated radian value.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function 'radian_degree' with one parameter for the angle in degrees.\",\n    \"Import the 'math' module to access the value of \u03c0 (pi).\",\n    \"Inside the function, calculate the radian value using the formula radians = degrees * (\u03c0 / 180).\",\n    \"Return the calculated radian value from the function.\"\n  ]\n}\n```", "Round_0": {"code": "import math\n\ndef radian_degree(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 189, "mutate_method": "expand_one2two", "save_node": false, "parent_index": 189}
