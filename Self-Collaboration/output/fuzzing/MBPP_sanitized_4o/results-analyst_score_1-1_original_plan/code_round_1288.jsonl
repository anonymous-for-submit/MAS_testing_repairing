{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 745, "prompt": "Write a function to identify numbers in a specified range from startnum to endnum. Each number should be divisible by each digit it includes. Make sure to handle edge cases such as zero or any leading zeros in the digits of the numbers in the given range. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]", "assert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(17, 24) == [22, 24]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(25, 29) == []", "assert divisible_by_digits(25, 25) == []", "assert divisible_by_digits(25, 27) == []", "assert divisible_by_digits(18, 29) == [22, 24]", "assert divisible_by_digits(25, 21) == []", "assert divisible_by_digits(22, 28) == [22, 24]", "assert divisible_by_digits(22, 25) == [22, 24]", "assert divisible_by_digits(19, 26) == [22, 24]", "assert divisible_by_digits(15, 28) == [15, 22, 24]", "assert divisible_by_digits(20, 25) == [22, 24]", "assert divisible_by_digits(25, 26) == []", "assert divisible_by_digits(16, 20) == []", "assert divisible_by_digits(23, 20) == []", "assert divisible_by_digits(22, 23) == [22]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(21, 23) == [22]", "assert divisible_by_digits(19, 24) == [22, 24]", "assert divisible_by_digits(20, 24) == [22, 24]", "assert divisible_by_digits(17, 22) == [22]", "assert divisible_by_digits(18, 26) == [22, 24]", "assert divisible_by_digits(23, 30) == [24]", "assert divisible_by_digits(25, 28) == []", "assert divisible_by_digits(15, 29) == [15, 22, 24]", "assert divisible_by_digits(20, 26) == [22, 24]", "assert divisible_by_digits(16, 23) == [22]", "assert divisible_by_digits(20, 21) == []", "assert divisible_by_digits(18, 22) == [22]", "assert divisible_by_digits(22, 22) == [22]", "assert divisible_by_digits(21, 21) == []"], "entry_point": "divisible_by_digits", "completion": "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check divisibility of the number by its digits\n        for digit_char in num_str:\n            digit = int(digit_char)\n            if digit == 0:\n                continue\n            if num % digit != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the criteria\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "completions": ["from typing import *\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(number):\n        digits = [int(d) for d in str(number) if d != '0']\n        return all(number % d == 0 for d in digits)\n\n    valid_numbers = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            valid_numbers.append(num)\n    \n    return valid_numbers\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Extract digits of each number\n        for digit_char in num_str:\n            digit = int(digit_char)\n            \n            # Check divisibility of the number by its digits\n            if digit == 0:\n                continue\n            if num % digit != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the criteria\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Loop through each number from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check each digit\n        for digit_char in num_str:\n            digit = int(digit_char)\n            if digit == 0 or num % digit != 0:\n                is_divisible = False\n                break\n        \n        # If the number is divisible by all its non-zero digits, add to result\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Loop through each number from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to extract its digits\n        num_str = str(num)\n        # Check if the number is divisible by each of its non-zero digits\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            # If the number is divisible by all its non-zero digits, append it to the result list\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(number):\n        digits = [int(d) for d in str(number) if d != '0']\n        return all(number % d == 0 for d in digits)\n\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Loop through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to extract its digits\n        num_str = str(num)\n        # Check divisibility by each digit\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Loop through each number from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check if the number is divisible by each of its non-zero digits\n        for digit in num_str:\n            if digit == '0':\n                continue\n            if num % int(digit) != 0:\n                is_divisible = False\n                break\n        \n        # If the number is divisible by all its non-zero digits, append it to the result list\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check divisibility of the number by its digits\n        for digit_char in num_str:\n            digit = int(digit_char)\n            if digit == 0:\n                continue\n            if num % digit != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the criteria\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure that the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through each number from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Extract digits of the current number.\",\n      \"details\": \"Convert the number to a string to easily access each digit.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by its digits.\",\n      \"details\": \"For each digit, check if the number is divisible by the digit. Handle edge cases such as zero digits.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the criteria.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input range to ensure startnum and endnum are integers and startnum <= endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  Convert the number to a string to access its digits.\",\n    \"  For each digit in the number:\",\n    \"    If the digit is zero, skip the divisibility check for this digit.\",\n    \"    Otherwise, check if the number is divisible by the digit.\",\n    \"  If the number is divisible by all its non-zero digits, add it to the result list.\",\n    \"Return the list of numbers that meet the criteria.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check divisibility of the number by its digits\n        for digit_char in num_str:\n            digit = int(digit_char)\n            if digit == 0:\n                continue\n            if num % digit != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the criteria\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure that the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check divisibility of each number by its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Ensure that numbers with zero digits are handled correctly, and avoid division by zero.\"\n    },\n    {\n      \"description\": \"Collect and return the numbers that meet the criteria.\",\n      \"details\": \"Store numbers that are divisible by all their non-zero digits in a list and return this list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum, endnum).\",\n    \"Initialize an empty list to store valid numbers.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  Convert the number to a string to extract its digits.\",\n    \"  Check if the number is divisible by each of its non-zero digits.\",\n    \"  If divisible, add the number to the list of valid numbers.\",\n    \"Return the list of valid numbers.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(number):\n        digits = [int(d) for d in str(number) if d != '0']\n        return all(number % d == 0 for d in digits)\n\n    valid_numbers = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            valid_numbers.append(num)\n    \n    return valid_numbers\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Iterate through each number in the specified range from startnum to endnum.\",\n      \"details\": \"Use a loop to go through each number in the range, inclusive of both startnum and endnum.\"\n    },\n    {\n      \"description\": \"Extract digits of the current number.\",\n      \"details\": \"Convert the number to a string to easily access each digit, then convert each character back to an integer.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by each of its digits.\",\n      \"details\": \"For each digit, check if the number is divisible by the digit. Handle edge cases such as zero digits.\"\n    },\n    {\n      \"description\": \"Handle edge cases such as zero or leading zeros.\",\n      \"details\": \"Ensure that zero digits are not used in division checks to avoid division by zero errors.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the criteria.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, extract its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, add it to the result list.\",\n    \"Return the list of numbers that meet the criteria.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure that the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Extract digits of each number.\",\n      \"details\": \"Convert each number to a string to access individual digits, then convert them back to integers.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by its digits.\",\n      \"details\": \"For each digit, check if the number is divisible by the digit. Handle edge cases such as zero digits.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the criteria.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input range to ensure startnum and endnum are integers and startnum <= endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  Convert the number to a string to extract its digits.\",\n    \"  For each digit in the number:\",\n    \"    Convert the digit back to an integer.\",\n    \"    If the digit is zero, skip the divisibility check for this digit.\",\n    \"    Check if the number is divisible by the digit.\",\n    \"  If the number is divisible by all its non-zero digits, add it to the result list.\",\n    \"Return the list of numbers that are divisible by all their non-zero digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Extract digits of each number\n        for digit_char in num_str:\n            digit = int(digit_char)\n            \n            # Check divisibility of the number by its digits\n            if digit == 0:\n                continue\n            if num % digit != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the criteria\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Identify numbers within the specified range from startnum to endnum.\",\n        \"task\": \"Iterate through each number in the range.\"\n      },\n      {\n        \"description\": \"Check if each number is divisible by each of its digits.\",\n        \"task\": \"Extract digits from the number and verify divisibility.\"\n      },\n      {\n        \"description\": \"Handle edge cases such as zero or leading zeros in the digits.\",\n        \"task\": \"Ensure zero is not considered a divisor and handle numbers with leading zeros appropriately.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize an empty list to store numbers that meet the criteria.\"\n      },\n      {\n        \"step\": \"Loop through each number in the range from startnum to endnum.\"\n      },\n      {\n        \"step\": \"For each number, convert it to a string to extract individual digits.\"\n      },\n      {\n        \"step\": \"Check if the number is divisible by each of its non-zero digits.\"\n      },\n      {\n        \"step\": \"If the number is divisible by all its non-zero digits, add it to the list.\"\n      },\n      {\n        \"step\": \"Return the list of numbers that meet the criteria.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure that the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"For each number, extract its individual digits.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by its digits.\",\n      \"details\": \"For each digit in the number, check if the number is divisible by the digit. Handle edge cases such as zero digits.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility criteria.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input range to ensure startnum and endnum are integers and startnum <= endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to extract its digits.\",\n    \"Check each digit to ensure it is not zero and the number is divisible by this digit.\",\n    \"If the number is divisible by all its non-zero digits, append it to the result list.\",\n    \"Return the list of numbers that satisfy the condition.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Loop through each number from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check each digit\n        for digit_char in num_str:\n            digit = int(digit_char)\n            if digit == 0 or num % digit != 0:\n                is_divisible = False\n                break\n        \n        # If the number is divisible by all its non-zero digits, add to result\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure that the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"For each number, extract its individual digits.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by its digits.\",\n      \"details\": \"For each digit in the number, check if the number is divisible by the digit. Handle edge cases such as zero digits.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility criteria.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input range to ensure startnum and endnum are integers and startnum <= endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to extract its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, append it to the result list.\",\n    \"Return the list of numbers that are divisible by their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Loop through each number from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to extract its digits\n        num_str = str(num)\n        # Check if the number is divisible by each of its non-zero digits\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            # If the number is divisible by all its non-zero digits, append it to the result list\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure that the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"For each number, extract its digits and check divisibility.\"\n    },\n    {\n      \"description\": \"Check divisibility of a number by its digits.\",\n      \"details\": \"For each digit in the number, ensure the number is divisible by the digit. Handle edge cases such as zero digits.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Ensure that numbers with zero digits are not included in the result. Consider numbers with leading zeros as their actual integer value.\"\n    },\n    {\n      \"description\": \"Collect and return the results.\",\n      \"details\": \"Compile a list of numbers that meet the criteria and return it.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum to endnum).\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"For each number in the range, extract its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number meets the criteria, add it to the results list.\",\n    \"Return the list of numbers that are divisible by their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(number):\n        digits = [int(d) for d in str(number) if d != '0']\n        return all(number % d == 0 for d in digits)\n\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure that the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"For each number, extract its individual digits.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by its digits.\",\n      \"details\": \"For each digit in the number, check if the number is divisible by the digit. Handle edge cases such as zero digits.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility criteria.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input range to ensure startnum and endnum are integers and startnum <= endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to extract its digits.\",\n    \"Check each digit to ensure it is not zero and the number is divisible by this digit.\",\n    \"If the number is divisible by all its non-zero digits, append it to the result list.\",\n    \"Return the list of numbers that satisfy the condition.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Loop through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to extract its digits\n        num_str = str(num)\n        # Check divisibility by each digit\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure that the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"For each number, extract its individual digits.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by its digits.\",\n      \"details\": \"For each digit in the number, check if the number is divisible by the digit. Handle edge cases such as zero digits.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility criteria.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input range to ensure startnum and endnum are integers and startnum <= endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, append it to the result list.\",\n    \"Return the list of numbers that satisfy the condition.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Loop through each number from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check if the number is divisible by each of its non-zero digits\n        for digit in num_str:\n            if digit == '0':\n                continue\n            if num % int(digit) != 0:\n                is_divisible = False\n                break\n        \n        # If the number is divisible by all its non-zero digits, append it to the result list\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure that the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through each number from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Extract digits of the current number.\",\n      \"details\": \"Convert the number to a string to easily access each digit.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by its digits.\",\n      \"details\": \"For each digit, check if the number is divisible by the digit. Handle edge cases such as zero digits.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the criteria.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input range to ensure startnum and endnum are integers and startnum <= endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  Convert the number to a string to access its digits.\",\n    \"  For each digit in the number:\",\n    \"    If the digit is zero, skip the divisibility check for this digit.\",\n    \"    Otherwise, check if the number is divisible by the digit.\",\n    \"  If the number is divisible by all its non-zero digits, add it to the result list.\",\n    \"Return the list of numbers that meet the criteria.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate the input range\n    if not (isinstance(startnum, int) and isinstance(endnum, int)):\n        raise ValueError(\"startnum and endnum must be integers\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check divisibility of the number by its digits\n        for digit_char in num_str:\n            digit = int(digit_char)\n            if digit == 0:\n                continue\n            if num % digit != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the criteria\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(divisible_by_digits):\n\tassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20,25)==[22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 29) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 25) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 27) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 29) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 28) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 28) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 26) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 28) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 29) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 21) == []"], "scores": [0.1471, 0.1471, 0.1275, 1.0, 0.9804, 0.9804, 0.1275, 0.9804, 0.1275, 0.1275], "pass_results": [false, false, false, true, false, false, false, false, false, false], "pass_test_cases_num": [15, 15, 13, 102, 100, 100, 13, 100, 13, 13], "passed": true, "pass": true, "pass_num": 3, "round": 1288, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 626}
