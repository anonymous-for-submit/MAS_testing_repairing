{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 745, "prompt": "Write a function to identify numbers in a specified range from startnum to endnum. Each number must be able to be divided evenly by each digit it includes. The division should leave a remainder of zero for each digit. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]", "assert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(17, 24) == [22, 24]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(25, 29) == []", "assert divisible_by_digits(25, 25) == []", "assert divisible_by_digits(25, 27) == []", "assert divisible_by_digits(18, 29) == [22, 24]", "assert divisible_by_digits(25, 21) == []", "assert divisible_by_digits(22, 28) == [22, 24]", "assert divisible_by_digits(22, 25) == [22, 24]", "assert divisible_by_digits(19, 26) == [22, 24]", "assert divisible_by_digits(15, 28) == [15, 22, 24]", "assert divisible_by_digits(20, 25) == [22, 24]", "assert divisible_by_digits(25, 26) == []", "assert divisible_by_digits(16, 20) == []", "assert divisible_by_digits(23, 20) == []", "assert divisible_by_digits(22, 23) == [22]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(21, 23) == [22]", "assert divisible_by_digits(19, 24) == [22, 24]", "assert divisible_by_digits(20, 24) == [22, 24]", "assert divisible_by_digits(17, 22) == [22]", "assert divisible_by_digits(18, 26) == [22, 24]", "assert divisible_by_digits(23, 30) == [24]", "assert divisible_by_digits(25, 28) == []", "assert divisible_by_digits(15, 29) == [15, 22, 24]", "assert divisible_by_digits(20, 26) == [22, 24]", "assert divisible_by_digits(16, 23) == [22]", "assert divisible_by_digits(20, 21) == []", "assert divisible_by_digits(18, 22) == [22]", "assert divisible_by_digits(22, 22) == [22]", "assert divisible_by_digits(21, 21) == []"], "entry_point": "divisible_by_digits", "completion": "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate input range\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n    \n    # Initialize result list\n    result = []\n    \n    # Iterate through each number in the range\n    for num in range(startnum, endnum + 1):\n        # Convert number to string to extract digits\n        num_str = str(num)\n        # Check divisibility by each non-zero digit\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            # Append number to result list if divisible by all digits\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "completions": ["from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Input Validation\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum.\")\n    \n    # Initialize Result List\n    result = []\n    \n    # Iterate Over Range\n    for num in range(startnum, endnum + 1):\n        # Extract Digits and Check Divisibility\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            # Store Valid Numbers\n            result.append(num)\n    \n    # Return Result\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate the input\n    if not isinstance(startnum, int) or not isinstance(endnum, int) or startnum > endnum:\n        raise ValueError(\"Invalid input: startnum and endnum must be integers and startnum <= endnum.\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check divisibility of the number by each of its digits\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int == 0 or num % digit_int != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the divisibility condition\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Input Validation\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Start and end numbers must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Start number must be less than or equal to end number.\")\n    \n    # Initialize Result List\n    result = []\n    \n    # Iterate Over Range\n    for num in range(startnum, endnum + 1):\n        # Extract Digits\n        digits = [int(d) for d in str(num) if d != '0']\n        \n        # Check Divisibility\n        if all(num % d == 0 for d in digits):\n            # Update Result List\n            result.append(num)\n    \n    # Return Result\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "from typing import *\ndef divisible_by_digits(startnum, endnum):\n    # Validate input range\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n    \n    # Initialize result list\n    result = []\n    \n    # Iterate through each number in the range\n    for num in range(startnum, endnum + 1):\n        # Convert number to string to extract digits\n        num_str = str(num)\n        # Check divisibility by each non-zero digit\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            # Append number to result list if divisible by all digits\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum, endnum).\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  - Convert the number to a string to extract its digits.\",\n    \"  - Check divisibility of the number by each of its non-zero digits.\",\n    \"  - If divisible by all digits, append the number to the result list.\",\n    \"Return the list of numbers that are divisible by their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate input range\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n    \n    # Initialize result list\n    result = []\n    \n    # Iterate through each number in the range\n    for num in range(startnum, endnum + 1):\n        # Convert number to string to extract digits\n        num_str = str(num)\n        # Check divisibility by each non-zero digit\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            # Append number to result list if divisible by all digits\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input is valid and extract the start and end numbers.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and check divisibility.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"Store numbers that are divisible by all their digits in a list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Validation\",\n      \"action\": \"Verify that startnum and endnum are integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"step\": \"Initialize Result List\",\n      \"action\": \"Create an empty list to store numbers that meet the criteria.\"\n    },\n    {\n      \"step\": \"Iterate Over Range\",\n      \"action\": \"Use a loop to iterate over each number from startnum to endnum.\"\n    },\n    {\n      \"step\": \"Extract Digits and Check Divisibility\",\n      \"action\": \"For each number, convert it to a string to extract digits, then check if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"step\": \"Store Valid Numbers\",\n      \"action\": \"If a number is divisible by all its digits, append it to the result list.\"\n    },\n    {\n      \"step\": \"Return Result\",\n      \"action\": \"Return the list of numbers that are divisible by all their digits.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Input Validation\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum.\")\n    \n    # Initialize Result List\n    result = []\n    \n    # Iterate Over Range\n    for num in range(startnum, endnum + 1):\n        # Extract Digits and Check Divisibility\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            # Store Valid Numbers\n            result.append(num)\n    \n    # Return Result\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two integer parameters, startnum and endnum, which define the range of numbers to be checked.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Extract digits of the current number.\",\n      \"details\": \"Convert the current number to a string or use mathematical operations to extract each digit.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by each of its digits.\",\n      \"details\": \"For each digit, check if the number is divisible by the digit without leaving a remainder. Skip any digit that is zero to avoid division by zero.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its non-zero digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, extract its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its non-zero digits, add it to the result list.\",\n    \"Return the list of numbers that meet the condition.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input is valid and represents a range of integers.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through each number from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Extract digits of the current number.\",\n      \"details\": \"Convert the number to a string or use mathematical operations to get each digit.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by each of its digits.\",\n      \"details\": \"For each digit, check if the number is divisible by the digit without a remainder.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function divisible_by_digits that takes startnum and endnum as parameters.\",\n    \"Validate the input to ensure startnum and endnum are integers and startnum <= endnum.\",\n    \"Initialize an empty list to store numbers that meet the divisibility condition.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  Convert the number to a string to iterate over each digit.\",\n    \"  For each digit in the number:\",\n    \"    Convert the digit back to an integer.\",\n    \"    Check if the digit is not zero and the number is divisible by the digit.\",\n    \"  If the number is divisible by all its non-zero digits, add it to the result list.\",\n    \"Return the list of numbers that meet the condition.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate the input\n    if not isinstance(startnum, int) or not isinstance(endnum, int) or startnum > endnum:\n        raise ValueError(\"Invalid input: startnum and endnum must be integers and startnum <= endnum.\")\n    \n    result = []\n    \n    # Iterate through each number in the specified range\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = True\n        \n        # Check divisibility of the number by each of its digits\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int == 0 or num % digit_int != 0:\n                is_divisible = False\n                break\n        \n        # Collect numbers that meet the divisibility condition\n        if is_divisible:\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Iterate through each number in the specified range from startnum to endnum.\",\n      \"description\": \"Create a loop to go through each number within the given range.\"\n    },\n    {\n      \"subproblem\": \"Check if a number is divisible by each of its digits.\",\n      \"description\": \"For each number, extract its digits and verify if the number is divisible by each digit without leaving a remainder.\"\n    },\n    {\n      \"subproblem\": \"Handle edge cases where digits might be zero.\",\n      \"description\": \"Ensure that the program does not attempt division by zero, which is undefined.\"\n    },\n    {\n      \"subproblem\": \"Collect numbers that meet the criteria into a list.\",\n      \"description\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize an empty list to store numbers that meet the criteria.\",\n      \"description\": \"Prepare a list to collect numbers that are divisible by their digits.\"\n    },\n    {\n      \"step\": \"Loop through each number from startnum to endnum.\",\n      \"description\": \"Use a for loop to iterate over the range of numbers.\"\n    },\n    {\n      \"step\": \"Convert the current number to a string to access its digits.\",\n      \"description\": \"Transform the number into a string format to easily iterate over each digit.\"\n    },\n    {\n      \"step\": \"Check divisibility for each digit in the number.\",\n      \"description\": \"For each digit, check if the number modulo the digit equals zero, ensuring the digit is not zero.\"\n    },\n    {\n      \"step\": \"Add the number to the list if it is divisible by all its digits.\",\n      \"description\": \"If all checks pass, append the number to the result list.\"\n    },\n    {\n      \"step\": \"Return the list of numbers that meet the criteria.\",\n      \"description\": \"Output the list containing numbers that are divisible by their digits.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two parameters, startnum and endnum, which define the range of numbers to be checked.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum, inclusive.\"\n    },\n    {\n      \"description\": \"Extract digits of the current number.\",\n      \"details\": \"For each number, extract its individual digits for further processing.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by each of its digits.\",\n      \"details\": \"For each digit in the number, check if the number is divisible by the digit without leaving a remainder.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named divisible_by_digits that takes two parameters: startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the divisibility condition.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to easily access each digit.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its digits, append it to the result list.\",\n    \"Return the list of numbers that are divisible by all their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input is valid and extract the start and end numbers.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and check divisibility.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Validation\",\n      \"action\": \"Validate the input range to ensure startnum and endnum are integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"step\": \"Initialize Result List\",\n      \"action\": \"Create an empty list to store numbers that meet the divisibility condition.\"\n    },\n    {\n      \"step\": \"Iterate Over Range\",\n      \"action\": \"Loop through each number from startnum to endnum.\"\n    },\n    {\n      \"step\": \"Extract Digits\",\n      \"action\": \"For each number, convert it to a string to extract its digits.\"\n    },\n    {\n      \"step\": \"Check Divisibility\",\n      \"action\": \"For each digit, check if the number is divisible by the digit. Skip digits that are zero.\"\n    },\n    {\n      \"step\": \"Update Result List\",\n      \"action\": \"If the number is divisible by all its non-zero digits, add it to the result list.\"\n    },\n    {\n      \"step\": \"Return Result\",\n      \"action\": \"Return the list of numbers that are divisible by all their digits.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Input Validation\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Start and end numbers must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Start number must be less than or equal to end number.\")\n    \n    # Initialize Result List\n    result = []\n    \n    # Iterate Over Range\n    for num in range(startnum, endnum + 1):\n        # Extract Digits\n        digits = [int(d) for d in str(num) if d != '0']\n        \n        # Check Divisibility\n        if all(num % d == 0 for d in digits):\n            # Update Result List\n            result.append(num)\n    \n    # Return Result\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two parameters, startnum and endnum, which define the range of numbers to be checked.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum, inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each digit without leaving a remainder.\"\n    },\n    {\n      \"description\": \"Handle edge cases where a digit is zero.\",\n      \"details\": \"Ensure that the function skips or handles cases where a digit is zero to avoid division by zero errors.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the criteria.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its digits, append it to the result list.\",\n    \"Return the list of numbers that are divisible by all their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two parameters, startnum and endnum, which define the range of numbers to be checked.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum, inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each digit without leaving a remainder.\"\n    },\n    {\n      \"description\": \"Handle edge cases such as zero digits.\",\n      \"details\": \"Ensure that the function handles cases where a digit is zero, as division by zero is undefined.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the criteria.\",\n      \"details\": \"Store numbers that are divisible by all their digits in a list.\"\n    },\n    {\n      \"description\": \"Return the list of valid numbers.\",\n      \"details\": \"After iterating through the range, return the list of numbers that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over its digits.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its digits, add it to the list.\",\n    \"After the loop, return the list of numbers that are divisible by all their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(digit != '0' and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the function accepts two integer parameters, startnum and endnum, representing the range of numbers to evaluate.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Use a loop to go through each number from startnum to endnum, inclusive.\"\n    },\n    {\n      \"description\": \"Extract digits of the current number.\",\n      \"details\": \"For each number, extract its individual digits for further evaluation.\"\n    },\n    {\n      \"description\": \"Check divisibility of the number by its digits.\",\n      \"details\": \"For each digit in the number, check if the number is divisible by the digit without leaving a remainder.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility criteria.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function divisible_by_digits with parameters startnum and endnum.\",\n    \"Initialize an empty list to store numbers that meet the criteria.\",\n    \"Loop through each number from startnum to endnum.\",\n    \"For each number, convert it to a string to iterate over each digit.\",\n    \"Check if the number is divisible by each of its non-zero digits.\",\n    \"If the number is divisible by all its digits, append it to the result list.\",\n    \"Return the list of numbers that are divisible by all their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input range from startnum to endnum.\",\n      \"details\": \"Ensure the input values are valid integers and startnum is less than or equal to endnum.\"\n    },\n    {\n      \"description\": \"Iterate through each number in the specified range.\",\n      \"details\": \"Loop through numbers from startnum to endnum inclusive.\"\n    },\n    {\n      \"description\": \"Check if a number is divisible by each of its digits.\",\n      \"details\": \"For each number, extract its digits and check if the number is divisible by each non-zero digit.\"\n    },\n    {\n      \"description\": \"Collect numbers that meet the divisibility condition.\",\n      \"details\": \"If a number is divisible by all its digits, add it to the result list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse and validate the input range (startnum, endnum).\",\n    \"Initialize an empty list to store numbers that meet the condition.\",\n    \"For each number in the range from startnum to endnum:\",\n    \"  - Convert the number to a string to extract its digits.\",\n    \"  - Check divisibility of the number by each of its non-zero digits.\",\n    \"  - If divisible by all digits, append the number to the result list.\",\n    \"Return the list of numbers that are divisible by their digits.\"\n  ]\n}\n```", "Round_0": {"code": "def divisible_by_digits(startnum, endnum):\n    # Validate input range\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Startnum and endnum must be integers.\")\n    if startnum > endnum:\n        raise ValueError(\"Startnum must be less than or equal to endnum.\")\n    \n    # Initialize result list\n    result = []\n    \n    # Iterate through each number in the range\n    for num in range(startnum, endnum + 1):\n        # Convert number to string to extract digits\n        num_str = str(num)\n        # Check divisibility by each non-zero digit\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            # Append number to result list if divisible by all digits\n            result.append(num)\n    \n    return result\n\n# Example usage\nprint(divisible_by_digits(1, 22))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(divisible_by_digits):\n\tassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20,25)==[22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 29) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 25) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 27) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 29) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 28) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 28) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 26) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 28) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 29) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 21) == []"], "scores": [0.9804, 0.1471, 0.9804, 1.0, 1.0, 0.1275, 1.0, 1.0, 1.0, 0.9804], "pass_results": [false, false, false, true, true, false, true, true, true, false], "pass_test_cases_num": [100, 15, 100, 102, 102, 13, 102, 102, 102, 100], "passed": true, "pass": true, "pass_num": 3, "round": 792, "mutate_method": "expand_one2two", "save_node": false, "parent_index": 626}
