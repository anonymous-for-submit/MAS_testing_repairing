{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 120, "prompt": "Develop a function to find the maximum absolute product among numbers in pairs of tuples provided in a specified list. Consider edge cases where the list or tuples may contain zeros or negative numbers.", "code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "test_imports": [], "test_list": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "assert max_product_tuple([(5, 12), (2, 4), (1, 9), (6, 6)]) == 60", "assert max_product_tuple([(3, 9), (3, 4), (6, 5), (2, 4)]) == 30", "assert max_product_tuple([(2, 2), (3, 11), (2, 12), (4, 14)]) == 56", "assert max_product_tuple([(7, 10), (4, 5), (5, 12), (3, 12)]) == 70", "assert max_product_tuple([(3, 2), (1, 8), (4, 8), (8, 12)]) == 96", "assert max_product_tuple([(3, 6), (2, 9), (2, 3), (2, 10)]) == 20", "assert max_product_tuple([(7, 2), (1, 10), (1, 6), (5, 10)]) == 50", "assert max_product_tuple([(2, 6), (1, 8), (6, 4), (9, 4)]) == 36", "assert max_product_tuple([(2, 10), (5, 3), (6, 10), (7, 7)]) == 60", "assert max_product_tuple([(6, 7), (5, 2), (5, 12), (9, 14)]) == 126", "assert max_product_tuple([(1, 3), (2, 9), (3, 9), (2, 8)]) == 27", "assert max_product_tuple([(3, 3), (4, 5), (2, 5), (7, 10)]) == 70", "assert max_product_tuple([(2, 10), (3, 9), (6, 9), (7, 4)]) == 54", "assert max_product_tuple([(3, 7), (4, 8), (5, 13), (2, 7)]) == 65", "assert max_product_tuple([(7, 12), (4, 6), (3, 8), (6, 6)]) == 84", "assert max_product_tuple([(3, 3), (4, 5), (1, 9), (8, 7)]) == 56", "assert max_product_tuple([(3, 9), (6, 1), (3, 9), (3, 14)]) == 42", "assert max_product_tuple([(3, 9), (2, 4), (4, 6), (6, 11)]) == 66", "assert max_product_tuple([(2, 9), (3, 5), (1, 11), (6, 12)]) == 72", "assert max_product_tuple([(6, 10), (3, 1), (4, 12), (7, 9)]) == 63", "assert max_product_tuple([(2, 5), (4, 7), (2, 8), (5, 11)]) == 55", "assert max_product_tuple([(4, 8), (5, 9), (3, 7), (3, 6)]) == 45", "assert max_product_tuple([(5, 3), (2, 7), (5, 4), (5, 11)]) == 55", "assert max_product_tuple([(2, 3), (3, 8), (5, 7), (7, 12)]) == 84", "assert max_product_tuple([(6, 10), (4, 7), (4, 7), (1, 10)]) == 60", "assert max_product_tuple([(3, 12), (4, 3), (4, 8), (9, 7)]) == 63", "assert max_product_tuple([(7, 11), (6, 9), (1, 11), (5, 12)]) == 77", "assert max_product_tuple([(7, 6), (2, 8), (1, 12), (6, 14)]) == 84", "assert max_product_tuple([(7, 6), (6, 9), (2, 9), (9, 4)]) == 54", "assert max_product_tuple([(3, 10), (4, 8), (2, 5), (3, 4)]) == 32", "assert max_product_tuple([(2, 4), (2, 3), (1, 5), (8, 11)]) == 88", "assert max_product_tuple([(4, 11), (4, 11), (3, 3), (1, 9)]) == 44", "assert max_product_tuple([(4, 12), (1, 8), (4, 8), (5, 4)]) == 48", "assert max_product_tuple([(13, 15), (11, 5), (9, 6)]) == 195", "assert max_product_tuple([(9, 15), (17, 7), (1, 10)]) == 135", "assert max_product_tuple([(9, 18), (12, 5), (5, 14)]) == 162", "assert max_product_tuple([(15, 15), (15, 4), (10, 5)]) == 225", "assert max_product_tuple([(12, 17), (15, 1), (8, 6)]) == 204", "assert max_product_tuple([(13, 23), (15, 7), (2, 9)]) == 299", "assert max_product_tuple([(7, 19), (16, 7), (3, 9)]) == 133", "assert max_product_tuple([(14, 17), (20, 7), (5, 13)]) == 238", "assert max_product_tuple([(7, 25), (19, 1), (6, 5)]) == 175", "assert max_product_tuple([(7, 25), (11, 4), (2, 11)]) == 175", "assert max_product_tuple([(14, 18), (12, 4), (6, 14)]) == 252", "assert max_product_tuple([(13, 20), (14, 5), (4, 11)]) == 260", "assert max_product_tuple([(10, 20), (16, 2), (2, 7)]) == 200", "assert max_product_tuple([(7, 20), (18, 4), (2, 9)]) == 140", "assert max_product_tuple([(5, 18), (17, 2), (9, 11)]) == 99", "assert max_product_tuple([(14, 23), (13, 1), (5, 11)]) == 322", "assert max_product_tuple([(12, 23), (16, 6), (7, 7)]) == 276", "assert max_product_tuple([(10, 19), (12, 1), (7, 10)]) == 190", "assert max_product_tuple([(10, 20), (19, 6), (8, 10)]) == 200", "assert max_product_tuple([(15, 18), (12, 3), (10, 10)]) == 270", "assert max_product_tuple([(8, 24), (18, 3), (8, 11)]) == 192", "assert max_product_tuple([(10, 15), (17, 6), (3, 7)]) == 150", "assert max_product_tuple([(6, 25), (18, 5), (6, 10)]) == 150", "assert max_product_tuple([(15, 20), (13, 6), (10, 10)]) == 300", "assert max_product_tuple([(9, 22), (12, 2), (9, 11)]) == 198", "assert max_product_tuple([(5, 18), (13, 2), (7, 15)]) == 105", "assert max_product_tuple([(15, 24), (10, 7), (9, 11)]) == 360", "assert max_product_tuple([(8, 19), (12, 5), (3, 5)]) == 152", "assert max_product_tuple([(12, 18), (10, 1), (6, 7)]) == 216", "assert max_product_tuple([(14, 18), (16, 7), (6, 7)]) == 252", "assert max_product_tuple([(15, 24), (17, 3), (1, 15)]) == 360", "assert max_product_tuple([(5, 22), (11, 4), (4, 13)]) == 110", "assert max_product_tuple([(15, 21), (13, 6), (8, 11)]) == 315", "assert max_product_tuple([(10, 42), (13, 15), (25, 8), (8, 5)]) == 420", "assert max_product_tuple([(14, 45), (12, 10), (23, 8), (15, 5)]) == 630", "assert max_product_tuple([(16, 43), (14, 18), (20, 9), (12, 13)]) == 688", "assert max_product_tuple([(9, 46), (13, 16), (23, 2), (13, 9)]) == 414", "assert max_product_tuple([(6, 40), (8, 16), (21, 8), (7, 14)]) == 240", "assert max_product_tuple([(14, 46), (11, 15), (17, 4), (8, 11)]) == 644", "assert max_product_tuple([(15, 42), (9, 20), (17, 10), (10, 4)]) == 630", "assert max_product_tuple([(9, 43), (5, 15), (20, 3), (7, 6)]) == 387", "assert max_product_tuple([(14, 44), (15, 18), (20, 2), (11, 9)]) == 616", "assert max_product_tuple([(10, 43), (13, 11), (25, 3), (10, 6)]) == 430", "assert max_product_tuple([(14, 42), (11, 18), (19, 4), (10, 8)]) == 588", "assert max_product_tuple([(11, 46), (13, 11), (19, 1), (11, 10)]) == 506", "assert max_product_tuple([(14, 47), (14, 15), (17, 10), (10, 5)]) == 658", "assert max_product_tuple([(14, 40), (15, 17), (17, 10), (11, 7)]) == 560", "assert max_product_tuple([(8, 40), (8, 15), (25, 6), (8, 11)]) == 320", "assert max_product_tuple([(13, 40), (11, 11), (22, 8), (16, 7)]) == 520", "assert max_product_tuple([(13, 42), (13, 14), (25, 1), (13, 10)]) == 546", "assert max_product_tuple([(13, 45), (12, 15), (25, 6), (15, 5)]) == 585", "assert max_product_tuple([(7, 48), (12, 16), (16, 9), (14, 4)]) == 336", "assert max_product_tuple([(15, 44), (11, 16), (25, 1), (11, 14)]) == 660", "assert max_product_tuple([(13, 44), (8, 13), (18, 9), (13, 4)]) == 572", "assert max_product_tuple([(15, 45), (5, 18), (17, 6), (11, 14)]) == 675", "assert max_product_tuple([(10, 41), (14, 10), (21, 10), (11, 11)]) == 410", "assert max_product_tuple([(15, 45), (9, 18), (17, 7), (13, 6)]) == 675", "assert max_product_tuple([(10, 49), (10, 17), (15, 5), (16, 12)]) == 490", "assert max_product_tuple([(12, 48), (9, 16), (20, 6), (11, 14)]) == 576", "assert max_product_tuple([(9, 47), (9, 12), (23, 7), (16, 8)]) == 423", "assert max_product_tuple([(14, 44), (12, 19), (21, 1), (15, 12)]) == 616", "assert max_product_tuple([(12, 40), (5, 18), (23, 10), (10, 7)]) == 480", "assert max_product_tuple([(16, 40), (6, 20), (18, 3), (12, 5)]) == 640", "assert max_product_tuple([(6, 48), (13, 15), (16, 5), (10, 10)]) == 288", "assert max_product_tuple([(7, 44), (9, 20), (19, 8), (17, 5)]) == 308", "assert max_product_tuple([(13, 46), (14, 16), (25, 10), (9, 10)]) == 598"], "entry_point": "max_product_tuple", "completion": "from typing import *\ndef max_product_tuple(pairs):\n    # Validate the input\n    if not isinstance(pairs, list) or not all(isinstance(t, tuple) and len(t) == 2 for t in pairs):\n        raise ValueError(\"Input must be a list of tuples, each containing exactly two numbers.\")\n    \n    # Initialize the maximum absolute product\n    max_abs_product = 0\n    \n    # Iterate over each tuple in the list\n    for a, b in pairs:\n        # Calculate the product of the two numbers\n        product = a * b\n        # Compute the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum absolute product if the current absolute product is greater\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "completions": ["from typing import *\ndef max_product_tuple(pairs):\n    # Validate the input\n    if not isinstance(pairs, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n    \n    for pair in pairs:\n        if not isinstance(pair, tuple) or len(pair) != 2:\n            raise ValueError(\"Each element in the list must be a tuple with exactly two numbers.\")\n        if not all(isinstance(num, (int, float)) for num in pair):\n            raise ValueError(\"Each tuple must contain numbers.\")\n\n    # Handle edge case for empty list\n    if not pairs:\n        return 0  # or raise an error if preferred\n\n    # Initialize the maximum absolute product\n    max_abs_product = 0\n\n    # Calculate the absolute product for each tuple and find the maximum\n    for a, b in pairs:\n        abs_product = abs(a * b)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "from typing import *\ndef max_product_tuple(pairs):\n    # Step 1: Validate the input to ensure it is a list of tuples with two numbers each.\n    if not isinstance(pairs, list) or not all(isinstance(t, tuple) and len(t) == 2 for t in pairs):\n        raise ValueError(\"Input must be a list of tuples, each containing exactly two numbers.\")\n    \n    # Step 2: Initialize a variable to track the maximum absolute product, starting with a value of zero.\n    max_abs_product = 0\n    \n    # Step 3: Loop through each tuple in the list.\n    for a, b in pairs:\n        # Step 4: For each tuple, calculate the product of the two numbers.\n        product = a * b\n        \n        # Step 5: Compute the absolute value of the product.\n        abs_product = abs(product)\n        \n        # Step 6: Compare the absolute product with the current maximum and update the maximum if the current product is greater.\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Step 7: After processing all tuples, return the maximum absolute product found.\n    return max_abs_product\n\n# Example usage:\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(pairs):\n    # Validate the input\n    if not isinstance(pairs, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n    \n    for pair in pairs:\n        if not isinstance(pair, tuple) or len(pair) != 2:\n            raise ValueError(\"Each element in the list must be a tuple containing exactly two numbers.\")\n        if not all(isinstance(num, (int, float)) for num in pair):\n            raise ValueError(\"Each tuple must contain numbers.\")\n\n    # Initialize the maximum absolute product\n    max_abs_product = None\n\n    # Calculate the absolute product for each tuple and find the maximum\n    for a, b in pairs:\n        product = abs(a * b)\n        if max_abs_product is None or product > max_abs_product:\n            max_abs_product = product\n\n    # Handle the case of an empty list\n    if max_abs_product is None:\n        raise ValueError(\"The list is empty, no product to calculate.\")\n\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "from typing import *\ndef max_product_tuple(pairs):\n    # Step 1: Validate the input to ensure it is a list of tuples, each containing two numbers.\n    if not isinstance(pairs, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n    for pair in pairs:\n        if not (isinstance(pair, tuple) and len(pair) == 2 and all(isinstance(x, (int, float)) for x in pair)):\n            raise ValueError(\"Each element in the list must be a tuple containing exactly two numbers.\")\n\n    # Step 2: Initialize a variable to track the maximum absolute product, starting with a value of zero.\n    max_abs_product = 0\n\n    # Step 3: Iterate over each tuple in the list.\n    for pair in pairs:\n        # Step 4: For each tuple, calculate the product of the two numbers.\n        product = pair[0] * pair[1]\n\n        # Step 5: Compute the absolute value of the product.\n        abs_product = abs(product)\n\n        # Step 6: Compare the absolute product with the current maximum and update the maximum if the current product is greater.\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    # Step 7: After iterating through all tuples, return the maximum absolute product found.\n    return max_abs_product\n\n# Example usage:\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(pairs):\n    max_abs_product = 0\n    for a, b in pairs:\n        product = a * b\n        abs_product = abs(product)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(tuple_list):\n    # Step 1: Validate the input to ensure it is a list of tuples, each containing two numbers.\n    if not isinstance(tuple_list, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n    \n    for item in tuple_list:\n        if not isinstance(item, tuple) or len(item) != 2:\n            raise ValueError(\"Each element in the list must be a tuple containing exactly two numbers.\")\n        if not all(isinstance(num, (int, float)) for num in item):\n            raise ValueError(\"Each number in the tuple must be an integer or a float.\")\n    \n    # Step 2: Initialize a variable to track the maximum absolute product found.\n    max_abs_product = 0\n    \n    # Step 3: Iterate over each tuple in the list.\n    for num1, num2 in tuple_list:\n        # Step 4: For each tuple, calculate the product of the two numbers.\n        product = num1 * num2\n        \n        # Step 5: Compute the absolute value of the product.\n        abs_product = abs(product)\n        \n        # Step 6: Compare the absolute product with the current maximum and update if it is greater.\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Step 7: After iterating through all tuples, return the maximum absolute product found.\n    return max_abs_product\n", "from typing import *\ndef max_product_tuple(pairs):\n    max_abs_product = 0  # Initialize the maximum absolute product to zero\n\n    for pair in pairs:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        \n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        \n        # Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(tuples_list):\n    # Initialize the maximum absolute product to zero\n    max_abs_product = 0\n    \n    # Iterate through each tuple in the list\n    for a, b in tuples_list:\n        # Calculate the product of the two numbers\n        product = a * b\n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum absolute product if the current one is greater\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Return the maximum absolute product found\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(pairs):\n    max_abs_product = 0\n    for a, b in pairs:\n        product = a * b\n        abs_product = abs(product)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "from typing import *\ndef max_product_tuple(pairs):\n    # Validate the input\n    if not isinstance(pairs, list) or not all(isinstance(t, tuple) and len(t) == 2 for t in pairs):\n        raise ValueError(\"Input must be a list of tuples, each containing exactly two numbers.\")\n    \n    # Initialize the maximum absolute product\n    max_abs_product = 0\n    \n    # Iterate over each tuple in the list\n    for a, b in pairs:\n        # Calculate the product of the two numbers\n        product = a * b\n        # Compute the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum absolute product if the current absolute product is greater\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n"], "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input list of tuples to ensure it is in the correct format.\",\n        \"details\": \"Check if the input is a list and each element is a tuple containing exactly two numbers.\"\n      },\n      {\n        \"description\": \"Calculate the product of the numbers in each tuple.\",\n        \"details\": \"Iterate through each tuple in the list and compute the product of the two numbers.\"\n      },\n      {\n        \"description\": \"Determine the absolute value of each product.\",\n        \"details\": \"For each product calculated, find its absolute value to handle negative numbers.\"\n      },\n      {\n        \"description\": \"Identify the maximum absolute product.\",\n        \"details\": \"Compare all absolute products and find the maximum value.\"\n      },\n      {\n        \"description\": \"Handle edge cases.\",\n        \"details\": \"Consider scenarios where tuples contain zeros or negative numbers, and ensure the function handles an empty list gracefully.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Validate the input to ensure it is a list of tuples, each containing two numbers.\",\n      \"Initialize a variable to keep track of the maximum absolute product found.\",\n      \"Iterate over each tuple in the list:\",\n      \"  - Calculate the product of the two numbers in the tuple.\",\n      \"  - Compute the absolute value of the product.\",\n      \"  - Update the maximum absolute product if the current absolute product is greater.\",\n      \"Return the maximum absolute product found.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    # Validate the input\n    if not isinstance(pairs, list) or not all(isinstance(t, tuple) and len(t) == 2 for t in pairs):\n        raise ValueError(\"Input must be a list of tuples, each containing exactly two numbers.\")\n    \n    # Initialize the maximum absolute product\n    max_abs_product = 0\n    \n    # Iterate over each tuple in the list\n    for a, b in pairs:\n        # Calculate the product of the two numbers\n        product = a * b\n        # Compute the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum absolute product if the current absolute product is greater\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate the input to ensure it is a list of tuples, where each tuple contains exactly two numbers.\",\n      \"steps\": [\n        \"Check if the input is a list.\",\n        \"Iterate through each element in the list to ensure it is a tuple.\",\n        \"Ensure each tuple contains exactly two numbers.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the absolute product for each tuple in the list.\",\n      \"steps\": [\n        \"Iterate through each tuple in the list.\",\n        \"For each tuple, calculate the product of the two numbers.\",\n        \"Take the absolute value of the product.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the maximum absolute product from the calculated values.\",\n      \"steps\": [\n        \"Initialize a variable to store the maximum absolute product.\",\n        \"Compare each absolute product with the current maximum and update if a larger value is found.\"\n      ]\n    },\n    {\n      \"description\": \"Handle edge cases such as empty lists or tuples containing zeros or negative numbers.\",\n      \"steps\": [\n        \"If the list is empty, return a default value or handle it as an error.\",\n        \"Ensure that the calculation of the absolute product correctly handles zeros and negative numbers.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input to ensure it meets the expected format.\",\n    \"Iterate through the list of tuples to calculate the absolute product for each tuple.\",\n    \"Track the maximum absolute product found during the iteration.\",\n    \"Return the maximum absolute product as the result.\"\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    # Validate the input\n    if not isinstance(pairs, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n    \n    for pair in pairs:\n        if not isinstance(pair, tuple) or len(pair) != 2:\n            raise ValueError(\"Each element in the list must be a tuple with exactly two numbers.\")\n        if not all(isinstance(num, (int, float)) for num in pair):\n            raise ValueError(\"Each tuple must contain numbers.\")\n\n    # Handle edge case for empty list\n    if not pairs:\n        return 0  # or raise an error if preferred\n\n    # Initialize the maximum absolute product\n    max_abs_product = 0\n\n    # Calculate the absolute product for each tuple and find the maximum\n    for a, b in pairs:\n        abs_product = abs(a * b)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input list of tuples to ensure it is in the correct format.\",\n        \"details\": \"Check if the input is a list of tuples, and each tuple contains exactly two numbers.\"\n      },\n      {\n        \"description\": \"Calculate the product of numbers in each tuple.\",\n        \"details\": \"Iterate through each tuple in the list and compute the product of the two numbers in the tuple.\"\n      },\n      {\n        \"description\": \"Find the maximum absolute product from the computed products.\",\n        \"details\": \"Compute the absolute value of each product and determine the maximum value among them.\"\n      },\n      {\n        \"description\": \"Handle edge cases.\",\n        \"details\": \"Consider cases where tuples contain zeros or negative numbers, and ensure the function handles an empty list gracefully.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Step 1: Validate the input to ensure it is a list of tuples with two numbers each.\",\n      \"Step 2: Initialize a variable to track the maximum absolute product, starting with a value of zero.\",\n      \"Step 3: Loop through each tuple in the list.\",\n      \"Step 4: For each tuple, calculate the product of the two numbers.\",\n      \"Step 5: Compute the absolute value of the product.\",\n      \"Step 6: Compare the absolute product with the current maximum and update the maximum if the current product is greater.\",\n      \"Step 7: After processing all tuples, return the maximum absolute product found.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    # Step 1: Validate the input to ensure it is a list of tuples with two numbers each.\n    if not isinstance(pairs, list) or not all(isinstance(t, tuple) and len(t) == 2 for t in pairs):\n        raise ValueError(\"Input must be a list of tuples, each containing exactly two numbers.\")\n    \n    # Step 2: Initialize a variable to track the maximum absolute product, starting with a value of zero.\n    max_abs_product = 0\n    \n    # Step 3: Loop through each tuple in the list.\n    for a, b in pairs:\n        # Step 4: For each tuple, calculate the product of the two numbers.\n        product = a * b\n        \n        # Step 5: Compute the absolute value of the product.\n        abs_product = abs(product)\n        \n        # Step 6: Compare the absolute product with the current maximum and update the maximum if the current product is greater.\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Step 7: After processing all tuples, return the maximum absolute product found.\n    return max_abs_product\n\n# Example usage:\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate the input to ensure it is a list of tuples, where each tuple contains exactly two numbers.\",\n      \"steps\": [\n        \"Check if the input is a list.\",\n        \"Iterate through each element in the list to ensure it is a tuple.\",\n        \"Ensure each tuple contains exactly two numbers.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the absolute product for each tuple in the list.\",\n      \"steps\": [\n        \"Iterate through each tuple in the list.\",\n        \"For each tuple, calculate the product of the two numbers.\",\n        \"Take the absolute value of the product.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the maximum absolute product from the calculated values.\",\n      \"steps\": [\n        \"Initialize a variable to store the maximum absolute product.\",\n        \"Compare each absolute product with the current maximum and update if a larger value is found.\"\n      ]\n    },\n    {\n      \"description\": \"Handle edge cases such as empty lists or tuples containing zeros or negative numbers.\",\n      \"steps\": [\n        \"If the list is empty, return a default value or handle it as an error.\",\n        \"Ensure that the calculation of the absolute product correctly handles zeros and negative numbers.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input to ensure it meets the expected format.\",\n    \"Iterate through the list of tuples to calculate the absolute product for each tuple.\",\n    \"Track the maximum absolute product found during the iteration.\",\n    \"Return the maximum absolute product as the result.\"\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    # Validate the input\n    if not isinstance(pairs, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n    \n    for pair in pairs:\n        if not isinstance(pair, tuple) or len(pair) != 2:\n            raise ValueError(\"Each element in the list must be a tuple containing exactly two numbers.\")\n        if not all(isinstance(num, (int, float)) for num in pair):\n            raise ValueError(\"Each tuple must contain numbers.\")\n\n    # Initialize the maximum absolute product\n    max_abs_product = None\n\n    # Calculate the absolute product for each tuple and find the maximum\n    for a, b in pairs:\n        product = abs(a * b)\n        if max_abs_product is None or product > max_abs_product:\n            max_abs_product = product\n\n    # Handle the case of an empty list\n    if max_abs_product is None:\n        raise ValueError(\"The list is empty, no product to calculate.\")\n\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input list of tuples to ensure it is in the correct format.\",\n        \"details\": \"Check if the input is a list and each element is a tuple containing exactly two numbers.\"\n      },\n      {\n        \"description\": \"Calculate the product of each tuple.\",\n        \"details\": \"For each tuple in the list, compute the product of the two numbers.\"\n      },\n      {\n        \"description\": \"Find the maximum absolute product.\",\n        \"details\": \"Determine the maximum absolute value from the list of products calculated in the previous step.\"\n      },\n      {\n        \"description\": \"Handle edge cases.\",\n        \"details\": \"Consider cases where tuples contain zeros or negative numbers, and ensure the function handles an empty list gracefully.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Step 1: Validate the input to ensure it is a list of tuples, each containing two numbers.\",\n      \"Step 2: Initialize a variable to track the maximum absolute product, starting with a value of zero.\",\n      \"Step 3: Iterate over each tuple in the list.\",\n      \"Step 4: For each tuple, calculate the product of the two numbers.\",\n      \"Step 5: Compute the absolute value of the product.\",\n      \"Step 6: Compare the absolute product with the current maximum and update the maximum if the current product is greater.\",\n      \"Step 7: After iterating through all tuples, return the maximum absolute product found.\",\n      \"Step 8: Ensure the function handles edge cases, such as empty lists or tuples with zeros or negative numbers.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    # Step 1: Validate the input to ensure it is a list of tuples, each containing two numbers.\n    if not isinstance(pairs, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n    for pair in pairs:\n        if not (isinstance(pair, tuple) and len(pair) == 2 and all(isinstance(x, (int, float)) for x in pair)):\n            raise ValueError(\"Each element in the list must be a tuple containing exactly two numbers.\")\n\n    # Step 2: Initialize a variable to track the maximum absolute product, starting with a value of zero.\n    max_abs_product = 0\n\n    # Step 3: Iterate over each tuple in the list.\n    for pair in pairs:\n        # Step 4: For each tuple, calculate the product of the two numbers.\n        product = pair[0] * pair[1]\n\n        # Step 5: Compute the absolute value of the product.\n        abs_product = abs(product)\n\n        # Step 6: Compare the absolute product with the current maximum and update the maximum if the current product is greater.\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    # Step 7: After iterating through all tuples, return the maximum absolute product found.\n    return max_abs_product\n\n# Example usage:\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      \"Parse the input list of tuples to ensure it is in the correct format.\",\n      \"Iterate through each tuple in the list.\",\n      \"For each tuple, calculate the product of the two numbers.\",\n      \"Track the maximum absolute product encountered during the iteration.\",\n      \"Handle edge cases such as tuples containing zeros or negative numbers.\",\n      \"Return the maximum absolute product found.\"\n    ],\n    \"high_level_plan\": [\n      \"Define a function named 'max_product_tuple' that takes a list of tuples as input.\",\n      \"Initialize a variable to store the maximum absolute product, starting with a value of zero.\",\n      \"Loop through each tuple in the input list.\",\n      \"Within the loop, calculate the product of the two numbers in the current tuple.\",\n      \"Calculate the absolute value of the product.\",\n      \"Compare the absolute product with the current maximum and update the maximum if the current product is greater.\",\n      \"After the loop, return the maximum absolute product found.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    max_abs_product = 0\n    for a, b in pairs:\n        product = a * b\n        abs_product = abs(product)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input list of tuples to ensure it is in the correct format.\",\n        \"details\": \"Check if the input is a list and each element is a tuple containing exactly two numbers.\"\n      },\n      {\n        \"description\": \"Calculate the product of each tuple.\",\n        \"details\": \"For each tuple in the list, compute the product of the two numbers.\"\n      },\n      {\n        \"description\": \"Find the maximum absolute product.\",\n        \"details\": \"Determine the maximum absolute value from the list of products calculated in the previous step.\"\n      },\n      {\n        \"description\": \"Handle edge cases.\",\n        \"details\": \"Consider scenarios where tuples contain zeros or negative numbers and ensure the function handles these correctly.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Step 1: Validate the input to ensure it is a list of tuples, each containing two numbers.\",\n      \"Step 2: Initialize a variable to track the maximum absolute product found.\",\n      \"Step 3: Iterate over each tuple in the list.\",\n      \"Step 4: For each tuple, calculate the product of the two numbers.\",\n      \"Step 5: Compute the absolute value of the product.\",\n      \"Step 6: Compare the absolute product with the current maximum and update if it is greater.\",\n      \"Step 7: After iterating through all tuples, return the maximum absolute product found.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def max_product_tuple(tuple_list):\n    # Step 1: Validate the input to ensure it is a list of tuples, each containing two numbers.\n    if not isinstance(tuple_list, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n    \n    for item in tuple_list:\n        if not isinstance(item, tuple) or len(item) != 2:\n            raise ValueError(\"Each element in the list must be a tuple containing exactly two numbers.\")\n        if not all(isinstance(num, (int, float)) for num in item):\n            raise ValueError(\"Each number in the tuple must be an integer or a float.\")\n    \n    # Step 2: Initialize a variable to track the maximum absolute product found.\n    max_abs_product = 0\n    \n    # Step 3: Iterate over each tuple in the list.\n    for num1, num2 in tuple_list:\n        # Step 4: For each tuple, calculate the product of the two numbers.\n        product = num1 * num2\n        \n        # Step 5: Compute the absolute value of the product.\n        abs_product = abs(product)\n        \n        # Step 6: Compare the absolute product with the current maximum and update if it is greater.\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Step 7: After iterating through all tuples, return the maximum absolute product found.\n    return max_abs_product\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Iterate through each tuple in the list.\",\n        \"goal\": \"Access each pair of numbers for processing.\"\n      },\n      {\n        \"description\": \"Calculate the product of the two numbers in each tuple.\",\n        \"goal\": \"Determine the product for each pair.\"\n      },\n      {\n        \"description\": \"Calculate the absolute value of each product.\",\n        \"goal\": \"Ensure that negative products are considered correctly.\"\n      },\n      {\n        \"description\": \"Track the maximum absolute product encountered.\",\n        \"goal\": \"Identify the largest absolute product among all pairs.\"\n      },\n      {\n        \"description\": \"Handle edge cases such as empty lists or tuples containing zeros.\",\n        \"goal\": \"Ensure the function behaves correctly with special cases.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize a variable to store the maximum absolute product, starting with a value of zero.\",\n      \"Loop through each tuple in the provided list.\",\n      \"For each tuple, calculate the product of the two numbers.\",\n      \"Compute the absolute value of the product.\",\n      \"Compare the absolute product with the current maximum and update if it is larger.\",\n      \"After processing all tuples, return the maximum absolute product found.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    max_abs_product = 0  # Initialize the maximum absolute product to zero\n\n    for pair in pairs:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        \n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        \n        # Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Parse the input list of tuples to ensure it is in the correct format.\",\n    \"Iterate through each tuple in the list.\",\n    \"For each tuple, calculate the product of the two numbers.\",\n    \"Track the maximum absolute product encountered during the iteration.\",\n    \"Handle edge cases such as tuples containing zeros or negative numbers.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'max_product_tuple' that takes a list of tuples as an argument.\",\n    \"Initialize a variable to store the maximum absolute product, starting with a value of zero.\",\n    \"Loop through each tuple in the list:\",\n    \"  - Extract the two numbers from the tuple.\",\n    \"  - Calculate the product of these two numbers.\",\n    \"  - Calculate the absolute value of the product.\",\n    \"  - Compare the absolute product with the current maximum and update if it is greater.\",\n    \"Return the maximum absolute product after iterating through all tuples.\"\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(tuples_list):\n    # Initialize the maximum absolute product to zero\n    max_abs_product = 0\n    \n    # Iterate through each tuple in the list\n    for a, b in tuples_list:\n        # Calculate the product of the two numbers\n        product = a * b\n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum absolute product if the current one is greater\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Return the maximum absolute product found\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Extract pairs of numbers from the list of tuples.\",\n    \"Calculate the product of each pair of numbers.\",\n    \"Determine the absolute value of each product.\",\n    \"Identify the maximum absolute product from the list of absolute products.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'max_product_tuple' that takes a list of tuples as input.\",\n    \"Iterate over each tuple in the list.\",\n    \"For each tuple, calculate the product of the two numbers.\",\n    \"Convert the product to its absolute value.\",\n    \"Keep track of the maximum absolute product encountered during the iteration.\",\n    \"Return the maximum absolute product after processing all tuples.\"\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    max_abs_product = 0\n    for a, b in pairs:\n        product = a * b\n        abs_product = abs(product)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Parse the input list of tuples to ensure it is in the correct format.\",\n        \"details\": \"Check if the input is a list and each element is a tuple containing exactly two numbers.\"\n      },\n      {\n        \"description\": \"Calculate the product of the numbers in each tuple.\",\n        \"details\": \"Iterate through each tuple in the list and compute the product of the two numbers.\"\n      },\n      {\n        \"description\": \"Determine the absolute value of each product.\",\n        \"details\": \"For each product calculated, find its absolute value to handle negative numbers.\"\n      },\n      {\n        \"description\": \"Identify the maximum absolute product.\",\n        \"details\": \"Compare all absolute products and find the maximum value.\"\n      },\n      {\n        \"description\": \"Handle edge cases.\",\n        \"details\": \"Consider scenarios where tuples contain zeros or negative numbers, and ensure the function handles an empty list gracefully.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Validate the input to ensure it is a list of tuples, each containing two numbers.\",\n      \"Initialize a variable to keep track of the maximum absolute product found.\",\n      \"Iterate over each tuple in the list:\",\n      \"  - Calculate the product of the two numbers in the tuple.\",\n      \"  - Compute the absolute value of the product.\",\n      \"  - Update the maximum absolute product if the current absolute product is greater.\",\n      \"Return the maximum absolute product found.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    # Validate the input\n    if not isinstance(pairs, list) or not all(isinstance(t, tuple) and len(t) == 2 for t in pairs):\n        raise ValueError(\"Input must be a list of tuples, each containing exactly two numbers.\")\n    \n    # Initialize the maximum absolute product\n    max_abs_product = 0\n    \n    # Iterate over each tuple in the list\n    for a, b in pairs:\n        # Calculate the product of the two numbers\n        product = a * b\n        # Compute the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum absolute product if the current absolute product is greater\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(max_product_tuple):\n\tassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "def check(max_product_tuple):\n\tassert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "def check(max_product_tuple):\n\tassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 12), (2, 4), (1, 9), (6, 6)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (3, 4), (6, 5), (2, 4)]) == 30", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 2), (3, 11), (2, 12), (4, 14)]) == 56", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 10), (4, 5), (5, 12), (3, 12)]) == 70", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 2), (1, 8), (4, 8), (8, 12)]) == 96", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 6), (2, 9), (2, 3), (2, 10)]) == 20", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 2), (1, 10), (1, 6), (5, 10)]) == 50", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 6), (1, 8), (6, 4), (9, 4)]) == 36", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 10), (5, 3), (6, 10), (7, 7)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 7), (5, 2), (5, 12), (9, 14)]) == 126", "def check(max_product_tuple):\n\tassert max_product_tuple([(1, 3), (2, 9), (3, 9), (2, 8)]) == 27", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 3), (4, 5), (2, 5), (7, 10)]) == 70", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 10), (3, 9), (6, 9), (7, 4)]) == 54", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 7), (4, 8), (5, 13), (2, 7)]) == 65", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 12), (4, 6), (3, 8), (6, 6)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 3), (4, 5), (1, 9), (8, 7)]) == 56", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (6, 1), (3, 9), (3, 14)]) == 42", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (2, 4), (4, 6), (6, 11)]) == 66", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 9), (3, 5), (1, 11), (6, 12)]) == 72", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 10), (3, 1), (4, 12), (7, 9)]) == 63", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 5), (4, 7), (2, 8), (5, 11)]) == 55", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 8), (5, 9), (3, 7), (3, 6)]) == 45", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 3), (2, 7), (5, 4), (5, 11)]) == 55", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 3), (3, 8), (5, 7), (7, 12)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 10), (4, 7), (4, 7), (1, 10)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 12), (4, 3), (4, 8), (9, 7)]) == 63", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 11), (6, 9), (1, 11), (5, 12)]) == 77", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 6), (2, 8), (1, 12), (6, 14)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 6), (6, 9), (2, 9), (9, 4)]) == 54", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 10), (4, 8), (2, 5), (3, 4)]) == 32", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 4), (2, 3), (1, 5), (8, 11)]) == 88", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 11), (4, 11), (3, 3), (1, 9)]) == 44", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 12), (1, 8), (4, 8), (5, 4)]) == 48", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 15), (11, 5), (9, 6)]) == 195", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 15), (17, 7), (1, 10)]) == 135", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 18), (12, 5), (5, 14)]) == 162", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 15), (15, 4), (10, 5)]) == 225", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 17), (15, 1), (8, 6)]) == 204", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 23), (15, 7), (2, 9)]) == 299", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 19), (16, 7), (3, 9)]) == 133", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 17), (20, 7), (5, 13)]) == 238", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 25), (19, 1), (6, 5)]) == 175", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 25), (11, 4), (2, 11)]) == 175", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 18), (12, 4), (6, 14)]) == 252", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 20), (14, 5), (4, 11)]) == 260", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 20), (16, 2), (2, 7)]) == 200", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 20), (18, 4), (2, 9)]) == 140", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 18), (17, 2), (9, 11)]) == 99", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 23), (13, 1), (5, 11)]) == 322", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 23), (16, 6), (7, 7)]) == 276", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 19), (12, 1), (7, 10)]) == 190", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 20), (19, 6), (8, 10)]) == 200", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 18), (12, 3), (10, 10)]) == 270", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 24), (18, 3), (8, 11)]) == 192", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 15), (17, 6), (3, 7)]) == 150", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 25), (18, 5), (6, 10)]) == 150", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 20), (13, 6), (10, 10)]) == 300", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 22), (12, 2), (9, 11)]) == 198", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 18), (13, 2), (7, 15)]) == 105", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 24), (10, 7), (9, 11)]) == 360", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 19), (12, 5), (3, 5)]) == 152", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 18), (10, 1), (6, 7)]) == 216", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 18), (16, 7), (6, 7)]) == 252", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 24), (17, 3), (1, 15)]) == 360", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 22), (11, 4), (4, 13)]) == 110", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 21), (13, 6), (8, 11)]) == 315", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 42), (13, 15), (25, 8), (8, 5)]) == 420", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 45), (12, 10), (23, 8), (15, 5)]) == 630", "def check(max_product_tuple):\n\tassert max_product_tuple([(16, 43), (14, 18), (20, 9), (12, 13)]) == 688", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 46), (13, 16), (23, 2), (13, 9)]) == 414", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 40), (8, 16), (21, 8), (7, 14)]) == 240", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 46), (11, 15), (17, 4), (8, 11)]) == 644", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 42), (9, 20), (17, 10), (10, 4)]) == 630", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 43), (5, 15), (20, 3), (7, 6)]) == 387", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 44), (15, 18), (20, 2), (11, 9)]) == 616", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 43), (13, 11), (25, 3), (10, 6)]) == 430", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 42), (11, 18), (19, 4), (10, 8)]) == 588", "def check(max_product_tuple):\n\tassert max_product_tuple([(11, 46), (13, 11), (19, 1), (11, 10)]) == 506", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 47), (14, 15), (17, 10), (10, 5)]) == 658", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 40), (15, 17), (17, 10), (11, 7)]) == 560", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 40), (8, 15), (25, 6), (8, 11)]) == 320", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 40), (11, 11), (22, 8), (16, 7)]) == 520", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 42), (13, 14), (25, 1), (13, 10)]) == 546", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 45), (12, 15), (25, 6), (15, 5)]) == 585", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 48), (12, 16), (16, 9), (14, 4)]) == 336", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 44), (11, 16), (25, 1), (11, 14)]) == 660", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 44), (8, 13), (18, 9), (13, 4)]) == 572", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 45), (5, 18), (17, 6), (11, 14)]) == 675", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 41), (14, 10), (21, 10), (11, 11)]) == 410", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 45), (9, 18), (17, 7), (13, 6)]) == 675", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 49), (10, 17), (15, 5), (16, 12)]) == 490", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 48), (9, 16), (20, 6), (11, 14)]) == 576", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 47), (9, 12), (23, 7), (16, 8)]) == 423", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 44), (12, 19), (21, 1), (15, 12)]) == 616", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 40), (5, 18), (23, 10), (10, 7)]) == 480", "def check(max_product_tuple):\n\tassert max_product_tuple([(16, 40), (6, 20), (18, 3), (12, 5)]) == 640", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 48), (13, 15), (16, 5), (10, 10)]) == 288", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 44), (9, 20), (19, 8), (17, 5)]) == 308", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 46), (14, 16), (25, 10), (9, 10)]) == 598"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 916, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 735}
