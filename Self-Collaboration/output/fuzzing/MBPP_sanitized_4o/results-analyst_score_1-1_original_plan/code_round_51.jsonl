{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 120, "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "test_imports": [], "test_list": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "assert max_product_tuple([(5, 12), (2, 4), (1, 9), (6, 6)]) == 60", "assert max_product_tuple([(3, 9), (3, 4), (6, 5), (2, 4)]) == 30", "assert max_product_tuple([(2, 2), (3, 11), (2, 12), (4, 14)]) == 56", "assert max_product_tuple([(7, 10), (4, 5), (5, 12), (3, 12)]) == 70", "assert max_product_tuple([(3, 2), (1, 8), (4, 8), (8, 12)]) == 96", "assert max_product_tuple([(3, 6), (2, 9), (2, 3), (2, 10)]) == 20", "assert max_product_tuple([(7, 2), (1, 10), (1, 6), (5, 10)]) == 50", "assert max_product_tuple([(2, 6), (1, 8), (6, 4), (9, 4)]) == 36", "assert max_product_tuple([(2, 10), (5, 3), (6, 10), (7, 7)]) == 60", "assert max_product_tuple([(6, 7), (5, 2), (5, 12), (9, 14)]) == 126", "assert max_product_tuple([(1, 3), (2, 9), (3, 9), (2, 8)]) == 27", "assert max_product_tuple([(3, 3), (4, 5), (2, 5), (7, 10)]) == 70", "assert max_product_tuple([(2, 10), (3, 9), (6, 9), (7, 4)]) == 54", "assert max_product_tuple([(3, 7), (4, 8), (5, 13), (2, 7)]) == 65", "assert max_product_tuple([(7, 12), (4, 6), (3, 8), (6, 6)]) == 84", "assert max_product_tuple([(3, 3), (4, 5), (1, 9), (8, 7)]) == 56", "assert max_product_tuple([(3, 9), (6, 1), (3, 9), (3, 14)]) == 42", "assert max_product_tuple([(3, 9), (2, 4), (4, 6), (6, 11)]) == 66", "assert max_product_tuple([(2, 9), (3, 5), (1, 11), (6, 12)]) == 72", "assert max_product_tuple([(6, 10), (3, 1), (4, 12), (7, 9)]) == 63", "assert max_product_tuple([(2, 5), (4, 7), (2, 8), (5, 11)]) == 55", "assert max_product_tuple([(4, 8), (5, 9), (3, 7), (3, 6)]) == 45", "assert max_product_tuple([(5, 3), (2, 7), (5, 4), (5, 11)]) == 55", "assert max_product_tuple([(2, 3), (3, 8), (5, 7), (7, 12)]) == 84", "assert max_product_tuple([(6, 10), (4, 7), (4, 7), (1, 10)]) == 60", "assert max_product_tuple([(3, 12), (4, 3), (4, 8), (9, 7)]) == 63", "assert max_product_tuple([(7, 11), (6, 9), (1, 11), (5, 12)]) == 77", "assert max_product_tuple([(7, 6), (2, 8), (1, 12), (6, 14)]) == 84", "assert max_product_tuple([(7, 6), (6, 9), (2, 9), (9, 4)]) == 54", "assert max_product_tuple([(3, 10), (4, 8), (2, 5), (3, 4)]) == 32", "assert max_product_tuple([(2, 4), (2, 3), (1, 5), (8, 11)]) == 88", "assert max_product_tuple([(4, 11), (4, 11), (3, 3), (1, 9)]) == 44", "assert max_product_tuple([(4, 12), (1, 8), (4, 8), (5, 4)]) == 48", "assert max_product_tuple([(13, 15), (11, 5), (9, 6)]) == 195", "assert max_product_tuple([(9, 15), (17, 7), (1, 10)]) == 135", "assert max_product_tuple([(9, 18), (12, 5), (5, 14)]) == 162", "assert max_product_tuple([(15, 15), (15, 4), (10, 5)]) == 225", "assert max_product_tuple([(12, 17), (15, 1), (8, 6)]) == 204", "assert max_product_tuple([(13, 23), (15, 7), (2, 9)]) == 299", "assert max_product_tuple([(7, 19), (16, 7), (3, 9)]) == 133", "assert max_product_tuple([(14, 17), (20, 7), (5, 13)]) == 238", "assert max_product_tuple([(7, 25), (19, 1), (6, 5)]) == 175", "assert max_product_tuple([(7, 25), (11, 4), (2, 11)]) == 175", "assert max_product_tuple([(14, 18), (12, 4), (6, 14)]) == 252", "assert max_product_tuple([(13, 20), (14, 5), (4, 11)]) == 260", "assert max_product_tuple([(10, 20), (16, 2), (2, 7)]) == 200", "assert max_product_tuple([(7, 20), (18, 4), (2, 9)]) == 140", "assert max_product_tuple([(5, 18), (17, 2), (9, 11)]) == 99", "assert max_product_tuple([(14, 23), (13, 1), (5, 11)]) == 322", "assert max_product_tuple([(12, 23), (16, 6), (7, 7)]) == 276", "assert max_product_tuple([(10, 19), (12, 1), (7, 10)]) == 190", "assert max_product_tuple([(10, 20), (19, 6), (8, 10)]) == 200", "assert max_product_tuple([(15, 18), (12, 3), (10, 10)]) == 270", "assert max_product_tuple([(8, 24), (18, 3), (8, 11)]) == 192", "assert max_product_tuple([(10, 15), (17, 6), (3, 7)]) == 150", "assert max_product_tuple([(6, 25), (18, 5), (6, 10)]) == 150", "assert max_product_tuple([(15, 20), (13, 6), (10, 10)]) == 300", "assert max_product_tuple([(9, 22), (12, 2), (9, 11)]) == 198", "assert max_product_tuple([(5, 18), (13, 2), (7, 15)]) == 105", "assert max_product_tuple([(15, 24), (10, 7), (9, 11)]) == 360", "assert max_product_tuple([(8, 19), (12, 5), (3, 5)]) == 152", "assert max_product_tuple([(12, 18), (10, 1), (6, 7)]) == 216", "assert max_product_tuple([(14, 18), (16, 7), (6, 7)]) == 252", "assert max_product_tuple([(15, 24), (17, 3), (1, 15)]) == 360", "assert max_product_tuple([(5, 22), (11, 4), (4, 13)]) == 110", "assert max_product_tuple([(15, 21), (13, 6), (8, 11)]) == 315", "assert max_product_tuple([(10, 42), (13, 15), (25, 8), (8, 5)]) == 420", "assert max_product_tuple([(14, 45), (12, 10), (23, 8), (15, 5)]) == 630", "assert max_product_tuple([(16, 43), (14, 18), (20, 9), (12, 13)]) == 688", "assert max_product_tuple([(9, 46), (13, 16), (23, 2), (13, 9)]) == 414", "assert max_product_tuple([(6, 40), (8, 16), (21, 8), (7, 14)]) == 240", "assert max_product_tuple([(14, 46), (11, 15), (17, 4), (8, 11)]) == 644", "assert max_product_tuple([(15, 42), (9, 20), (17, 10), (10, 4)]) == 630", "assert max_product_tuple([(9, 43), (5, 15), (20, 3), (7, 6)]) == 387", "assert max_product_tuple([(14, 44), (15, 18), (20, 2), (11, 9)]) == 616", "assert max_product_tuple([(10, 43), (13, 11), (25, 3), (10, 6)]) == 430", "assert max_product_tuple([(14, 42), (11, 18), (19, 4), (10, 8)]) == 588", "assert max_product_tuple([(11, 46), (13, 11), (19, 1), (11, 10)]) == 506", "assert max_product_tuple([(14, 47), (14, 15), (17, 10), (10, 5)]) == 658", "assert max_product_tuple([(14, 40), (15, 17), (17, 10), (11, 7)]) == 560", "assert max_product_tuple([(8, 40), (8, 15), (25, 6), (8, 11)]) == 320", "assert max_product_tuple([(13, 40), (11, 11), (22, 8), (16, 7)]) == 520", "assert max_product_tuple([(13, 42), (13, 14), (25, 1), (13, 10)]) == 546", "assert max_product_tuple([(13, 45), (12, 15), (25, 6), (15, 5)]) == 585", "assert max_product_tuple([(7, 48), (12, 16), (16, 9), (14, 4)]) == 336", "assert max_product_tuple([(15, 44), (11, 16), (25, 1), (11, 14)]) == 660", "assert max_product_tuple([(13, 44), (8, 13), (18, 9), (13, 4)]) == 572", "assert max_product_tuple([(15, 45), (5, 18), (17, 6), (11, 14)]) == 675", "assert max_product_tuple([(10, 41), (14, 10), (21, 10), (11, 11)]) == 410", "assert max_product_tuple([(15, 45), (9, 18), (17, 7), (13, 6)]) == 675", "assert max_product_tuple([(10, 49), (10, 17), (15, 5), (16, 12)]) == 490", "assert max_product_tuple([(12, 48), (9, 16), (20, 6), (11, 14)]) == 576", "assert max_product_tuple([(9, 47), (9, 12), (23, 7), (16, 8)]) == 423", "assert max_product_tuple([(14, 44), (12, 19), (21, 1), (15, 12)]) == 616", "assert max_product_tuple([(12, 40), (5, 18), (23, 10), (10, 7)]) == 480", "assert max_product_tuple([(16, 40), (6, 20), (18, 3), (12, 5)]) == 640", "assert max_product_tuple([(6, 48), (13, 15), (16, 5), (10, 10)]) == 288", "assert max_product_tuple([(7, 44), (9, 20), (19, 8), (17, 5)]) == 308", "assert max_product_tuple([(13, 46), (14, 16), (25, 10), (9, 10)]) == 598"], "entry_point": "max_product_tuple", "completion": "from typing import *\ndef max_product_tuple(pairs):\n    max_abs_product = 0  # Step 2: Initialize the maximum absolute product\n\n    for pair in pairs:  # Step 3: Loop through each tuple in the input list\n        product = pair[0] * pair[1]  # Step 4: Calculate the product of the two numbers\n        abs_product = abs(product)  # Step 5: Calculate the absolute value of the product\n\n        # Step 6: Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    return max_abs_product  # Step 7: Return the maximum absolute product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "completions": ["from typing import *\ndef max_product_tuple(tuples_list):\n    max_abs_product = float('-inf')  # Initialize with a very small number\n\n    for t in tuples_list:\n        product = t[0] * t[1]  # Calculate the product of the numbers in the tuple\n        abs_product = abs(product)  # Get the absolute value of the product\n        if abs_product > max_abs_product:  # Update max_abs_product if current is larger\n            max_abs_product = abs_product\n\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(tuple_list):\n    # Initialize the maximum absolute product with a very small number\n    max_abs_product = float('-inf')\n    \n    # Iterate over each tuple in the list\n    for t in tuple_list:\n        # Calculate the product of the two numbers in the tuple\n        product = t[0] * t[1]\n        \n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        \n        # Update the maximum absolute product if the current absolute product is greater\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Return the maximum absolute product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(tuples_list):\n    max_abs_product = 0\n    for t in tuples_list:\n        product = t[0] * t[1]\n        abs_product = abs(product)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(tuple_list):\n    # Initialize the maximum absolute product with a very small number\n    max_abs_product = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for t in tuple_list:\n        # Calculate the product of the two numbers in the tuple\n        product = t[0] * t[1]\n        \n        # Convert the product to its absolute value\n        abs_product = abs(product)\n        \n        # Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Return the maximum absolute product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(pairs):\n    max_abs_product = float('-inf')  # Initialize to a very small number\n\n    for pair in pairs:\n        product = pair[0] * pair[1]  # Calculate the product of the two numbers\n        abs_product = abs(product)   # Convert the product to its absolute value\n\n        if abs_product > max_abs_product:  # Compare with the current maximum\n            max_abs_product = abs_product  # Update the maximum if necessary\n\n    return max_abs_product  # Return the maximum absolute product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(pairs):\n    max_abs_product = 0  # Initialize the variable to store the maximum absolute product\n\n    for pair in pairs:  # Iterate through the list of tuples\n        product = pair[0] * pair[1]  # Calculate the product of the two numbers in the tuple\n        abs_product = abs(product)  # Convert the product to its absolute value\n\n        if abs_product > max_abs_product:  # Compare with the current maximum and update if necessary\n            max_abs_product = abs_product\n\n    return max_abs_product  # Return the maximum absolute product after iterating through all tuples\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(pairs):\n    max_abs_product = 0\n    for a, b in pairs:\n        product = a * b\n        abs_product = abs(product)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "from typing import *\ndef max_product_tuple(tuples_list):\n    max_abs_product = 0\n    for a, b in tuples_list:\n        product = a * b\n        abs_product = abs(product)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(tuple_list):\n    # Initialize the maximum absolute product with a very small number\n    max_abs_product = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for t in tuple_list:\n        # Calculate the product of the two numbers in the tuple\n        product = t[0] * t[1]\n        \n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        \n        # Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Return the maximum absolute product found\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "from typing import *\ndef max_product_tuple(pairs):\n    max_abs_product = 0  # Step 2: Initialize the maximum absolute product\n\n    for pair in pairs:  # Step 3: Loop through each tuple in the input list\n        product = pair[0] * pair[1]  # Step 4: Calculate the product of the two numbers\n        abs_product = abs(product)  # Step 5: Calculate the absolute value of the product\n\n        # Step 6: Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    return max_abs_product  # Step 7: Return the maximum absolute product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Parse the input list of tuples to ensure it is in the correct format.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through each tuple in the list.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"For each tuple, calculate the product of the two numbers.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Track the maximum absolute product encountered during the iteration.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Return the maximum absolute product found.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define a function named 'max_product_tuple' that takes a list of tuples as input.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Initialize a variable to store the maximum absolute product, starting with a very small number or zero.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Loop through each tuple in the input list.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Within the loop, calculate the product of the two numbers in the current tuple.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Calculate the absolute value of the product.\"\n    },\n    {\n      \"step\": 6,\n      \"action\": \"Compare the absolute product with the current maximum and update the maximum if the current product is larger.\"\n    },\n    {\n      \"step\": 7,\n      \"action\": \"After the loop, return the maximum absolute product.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    max_abs_product = 0  # Step 2: Initialize the maximum absolute product\n\n    for pair in pairs:  # Step 3: Loop through each tuple in the input list\n        product = pair[0] * pair[1]  # Step 4: Calculate the product of the two numbers\n        abs_product = abs(product)  # Step 5: Calculate the absolute value of the product\n\n        # Step 6: Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    return max_abs_product  # Step 7: Return the maximum absolute product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Extract each tuple from the given list of tuples.\",\n      \"goal\": \"Iterate through the list to access each tuple.\"\n    },\n    {\n      \"description\": \"Calculate the product of the numbers in each tuple.\",\n      \"goal\": \"For each tuple, multiply the two numbers together to get the product.\"\n    },\n    {\n      \"description\": \"Calculate the absolute value of each product.\",\n      \"goal\": \"Convert each product to its absolute value.\"\n    },\n    {\n      \"description\": \"Determine the maximum absolute product.\",\n      \"goal\": \"Compare all absolute products and identify the maximum value.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a variable to store the maximum absolute product, starting with a very small number or the first calculated product.\",\n    \"Iterate through each tuple in the list.\",\n    \"For each tuple, calculate the product of the two numbers.\",\n    \"Convert the product to its absolute value.\",\n    \"Compare the absolute product with the current maximum absolute product and update the maximum if the current one is larger.\",\n    \"After iterating through all tuples, return the maximum absolute product.\"\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(tuples_list):\n    max_abs_product = float('-inf')  # Initialize with a very small number\n\n    for t in tuples_list:\n        product = t[0] * t[1]  # Calculate the product of the numbers in the tuple\n        abs_product = abs(product)  # Get the absolute value of the product\n        if abs_product > max_abs_product:  # Update max_abs_product if current is larger\n            max_abs_product = abs_product\n\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Extract each tuple from the list.\",\n      \"details\": \"Iterate over the list of tuples to access each tuple individually.\"\n    },\n    {\n      \"description\": \"Calculate the product of the numbers in each tuple.\",\n      \"details\": \"For each tuple, multiply the two numbers together to get the product.\"\n    },\n    {\n      \"description\": \"Calculate the absolute value of each product.\",\n      \"details\": \"For each product calculated, find its absolute value.\"\n    },\n    {\n      \"description\": \"Identify the maximum absolute product.\",\n      \"details\": \"Compare all the absolute products and determine the maximum value.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a variable to store the maximum absolute product, starting with a very small number or the first calculated absolute product.\",\n    \"Iterate over each tuple in the list.\",\n    \"For each tuple, calculate the product of its two numbers.\",\n    \"Calculate the absolute value of the product.\",\n    \"Compare the absolute product with the current maximum and update the maximum if the current absolute product is greater.\",\n    \"After iterating through all tuples, return the maximum absolute product.\"\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(tuple_list):\n    # Initialize the maximum absolute product with a very small number\n    max_abs_product = float('-inf')\n    \n    # Iterate over each tuple in the list\n    for t in tuple_list:\n        # Calculate the product of the two numbers in the tuple\n        product = t[0] * t[1]\n        \n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        \n        # Update the maximum absolute product if the current absolute product is greater\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Return the maximum absolute product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Extract each tuple from the list.\",\n    \"Calculate the product of the numbers in each tuple.\",\n    \"Determine the absolute value of each product.\",\n    \"Identify the maximum absolute product from the list of absolute products.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'max_product_tuple' that takes a list of tuples as input.\",\n    \"Initialize a variable to store the maximum absolute product, starting with a value of zero.\",\n    \"Iterate over each tuple in the list.\",\n    \"For each tuple, calculate the product of its two elements.\",\n    \"Compute the absolute value of the product.\",\n    \"Compare the absolute product with the current maximum absolute product and update the maximum if necessary.\",\n    \"After iterating through all tuples, return the maximum absolute product.\"\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(tuples_list):\n    max_abs_product = 0\n    for t in tuples_list:\n        product = t[0] * t[1]\n        abs_product = abs(product)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Extract each tuple from the given list of tuples.\",\n      \"goal\": \"Iterate through the list to access each tuple.\"\n    },\n    {\n      \"description\": \"Calculate the product of the numbers in each tuple.\",\n      \"goal\": \"For each tuple, multiply the two numbers together to get the product.\"\n    },\n    {\n      \"description\": \"Calculate the absolute value of each product.\",\n      \"goal\": \"Convert each product to its absolute value.\"\n    },\n    {\n      \"description\": \"Determine the maximum absolute product.\",\n      \"goal\": \"Compare all absolute products and identify the maximum value.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a variable to store the maximum absolute product, starting with a very small number or the first calculated product.\",\n    \"Iterate through each tuple in the list.\",\n    \"For each tuple, calculate the product of the two numbers.\",\n    \"Convert the product to its absolute value.\",\n    \"Compare the absolute product with the current maximum absolute product and update the maximum if the current one is larger.\",\n    \"After iterating through all tuples, return the maximum absolute product.\"\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(tuple_list):\n    # Initialize the maximum absolute product with a very small number\n    max_abs_product = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for t in tuple_list:\n        # Calculate the product of the two numbers in the tuple\n        product = t[0] * t[1]\n        \n        # Convert the product to its absolute value\n        abs_product = abs(product)\n        \n        # Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Return the maximum absolute product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Extract pairs of numbers from the list of tuples.\",\n      \"description\": \"Iterate through the list and access each tuple to retrieve the pairs of numbers.\"\n    },\n    {\n      \"subproblem\": \"Calculate the product of numbers in each tuple.\",\n      \"description\": \"For each tuple, multiply the two numbers to get the product.\"\n    },\n    {\n      \"subproblem\": \"Determine the absolute value of each product.\",\n      \"description\": \"Convert each product to its absolute value to ensure non-negative comparison.\"\n    },\n    {\n      \"subproblem\": \"Find the maximum absolute product from the list of products.\",\n      \"description\": \"Compare all absolute products and identify the maximum value.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to store the maximum absolute product.\",\n      \"description\": \"Set the initial value to a very small number or the first product's absolute value.\"\n    },\n    {\n      \"step\": \"Iterate through the list of tuples.\",\n      \"description\": \"Use a loop to access each tuple in the list.\"\n    },\n    {\n      \"step\": \"For each tuple, calculate the product of the two numbers.\",\n      \"description\": \"Multiply the two numbers in the tuple.\"\n    },\n    {\n      \"step\": \"Convert the product to its absolute value.\",\n      \"description\": \"Use the absolute function to ensure the product is non-negative.\"\n    },\n    {\n      \"step\": \"Compare the absolute product with the current maximum.\",\n      \"description\": \"If the absolute product is greater than the current maximum, update the maximum.\"\n    },\n    {\n      \"step\": \"Return the maximum absolute product after iterating through all tuples.\",\n      \"description\": \"Provide the final result as the output of the function.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    max_abs_product = float('-inf')  # Initialize to a very small number\n\n    for pair in pairs:\n        product = pair[0] * pair[1]  # Calculate the product of the two numbers\n        abs_product = abs(product)   # Convert the product to its absolute value\n\n        if abs_product > max_abs_product:  # Compare with the current maximum\n            max_abs_product = abs_product  # Update the maximum if necessary\n\n    return max_abs_product  # Return the maximum absolute product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Extract pairs of numbers from the list of tuples.\",\n      \"description\": \"Iterate through the list and access each tuple to retrieve the pairs of numbers.\"\n    },\n    {\n      \"subproblem\": \"Calculate the product of numbers in each tuple.\",\n      \"description\": \"For each tuple, multiply the two numbers to get the product.\"\n    },\n    {\n      \"subproblem\": \"Determine the absolute value of each product.\",\n      \"description\": \"Convert each product to its absolute value to ensure positive comparison.\"\n    },\n    {\n      \"subproblem\": \"Find the maximum absolute product from the list of products.\",\n      \"description\": \"Compare all absolute products and identify the maximum value.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to store the maximum absolute product.\",\n      \"description\": \"Set up a variable to keep track of the highest absolute product found.\"\n    },\n    {\n      \"step\": \"Iterate through the list of tuples.\",\n      \"description\": \"Use a loop to go through each tuple in the list.\"\n    },\n    {\n      \"step\": \"For each tuple, calculate the product of the two numbers.\",\n      \"description\": \"Multiply the numbers in the tuple to get the product.\"\n    },\n    {\n      \"step\": \"Convert the product to its absolute value.\",\n      \"description\": \"Use the absolute function to ensure the product is positive.\"\n    },\n    {\n      \"step\": \"Compare the absolute product with the current maximum and update if necessary.\",\n      \"description\": \"If the current absolute product is greater than the stored maximum, update the maximum.\"\n    },\n    {\n      \"step\": \"Return the maximum absolute product after iterating through all tuples.\",\n      \"description\": \"Once all tuples are processed, return the highest absolute product found.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    max_abs_product = 0  # Initialize the variable to store the maximum absolute product\n\n    for pair in pairs:  # Iterate through the list of tuples\n        product = pair[0] * pair[1]  # Calculate the product of the two numbers in the tuple\n        abs_product = abs(product)  # Convert the product to its absolute value\n\n        if abs_product > max_abs_product:  # Compare with the current maximum and update if necessary\n            max_abs_product = abs_product\n\n    return max_abs_product  # Return the maximum absolute product after iterating through all tuples\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Parse the input list of tuples to ensure it is in the correct format.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through each tuple in the list and calculate the product of the two numbers in the tuple.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Calculate the absolute value of each product obtained from the tuples.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Keep track of the maximum absolute product found during the iteration.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"description\": \"Define a function named 'max_product_tuple' that takes a list of tuples as input.\"\n    },\n    {\n      \"step\": 2,\n      \"description\": \"Initialize a variable to store the maximum absolute product, starting with a very small number or zero.\"\n    },\n    {\n      \"step\": 3,\n      \"description\": \"Loop through each tuple in the input list.\"\n    },\n    {\n      \"step\": 4,\n      \"description\": \"For each tuple, calculate the product of the two numbers.\"\n    },\n    {\n      \"step\": 5,\n      \"description\": \"Calculate the absolute value of the product.\"\n    },\n    {\n      \"step\": 6,\n      \"description\": \"Compare the absolute product with the current maximum and update the maximum if the current absolute product is greater.\"\n    },\n    {\n      \"step\": 7,\n      \"description\": \"After iterating through all tuples, return the maximum absolute product.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    max_abs_product = 0\n    for a, b in pairs:\n        product = a * b\n        abs_product = abs(product)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output: 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Extract each tuple from the list.\",\n    \"Calculate the product of the two numbers in each tuple.\",\n    \"Determine the absolute value of each product.\",\n    \"Identify the maximum absolute product from the list of absolute products.\"\n  ],\n  \"high_level_plan\": [\n    \"Iterate over the list of tuples.\",\n    \"For each tuple, calculate the product of its two elements.\",\n    \"Convert the product to its absolute value.\",\n    \"Keep track of the maximum absolute product encountered during iteration.\",\n    \"Return the maximum absolute product after completing the iteration.\"\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(tuples_list):\n    max_abs_product = 0\n    for a, b in tuples_list:\n        product = a * b\n        abs_product = abs(product)\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Extract each tuple from the list of tuples.\",\n      \"goal\": \"Iterate through the list to access each tuple.\"\n    },\n    {\n      \"description\": \"Calculate the product of the numbers in each tuple.\",\n      \"goal\": \"Multiply the two numbers in each tuple to get their product.\"\n    },\n    {\n      \"description\": \"Calculate the absolute value of each product.\",\n      \"goal\": \"Use the absolute function to ensure all products are positive.\"\n    },\n    {\n      \"description\": \"Find the maximum absolute product from the list of products.\",\n      \"goal\": \"Compare all absolute products and identify the maximum value.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a variable to store the maximum absolute product, starting with a very small number or the first product.\",\n    \"Iterate through each tuple in the list.\",\n    \"For each tuple, calculate the product of its two numbers.\",\n    \"Calculate the absolute value of the product.\",\n    \"Compare the absolute product with the current maximum and update the maximum if the current product is larger.\",\n    \"After iterating through all tuples, return the maximum absolute product.\"\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(tuple_list):\n    # Initialize the maximum absolute product with a very small number\n    max_abs_product = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for t in tuple_list:\n        # Calculate the product of the two numbers in the tuple\n        product = t[0] * t[1]\n        \n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        \n        # Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n    \n    # Return the maximum absolute product found\n    return max_abs_product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"id\": 1,\n      \"description\": \"Parse the input list of tuples to ensure it is in the correct format.\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Iterate through each tuple in the list.\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"For each tuple, calculate the product of the two numbers.\"\n    },\n    {\n      \"id\": 4,\n      \"description\": \"Track the maximum absolute product encountered during the iteration.\"\n    },\n    {\n      \"id\": 5,\n      \"description\": \"Return the maximum absolute product found.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": 1,\n      \"action\": \"Define a function named 'max_product_tuple' that takes a list of tuples as input.\"\n    },\n    {\n      \"step\": 2,\n      \"action\": \"Initialize a variable to store the maximum absolute product, starting with a very small number or zero.\"\n    },\n    {\n      \"step\": 3,\n      \"action\": \"Loop through each tuple in the input list.\"\n    },\n    {\n      \"step\": 4,\n      \"action\": \"Within the loop, calculate the product of the two numbers in the current tuple.\"\n    },\n    {\n      \"step\": 5,\n      \"action\": \"Calculate the absolute value of the product.\"\n    },\n    {\n      \"step\": 6,\n      \"action\": \"Compare the absolute product with the current maximum and update the maximum if the current product is larger.\"\n    },\n    {\n      \"step\": 7,\n      \"action\": \"After the loop, return the maximum absolute product.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def max_product_tuple(pairs):\n    max_abs_product = 0  # Step 2: Initialize the maximum absolute product\n\n    for pair in pairs:  # Step 3: Loop through each tuple in the input list\n        product = pair[0] * pair[1]  # Step 4: Calculate the product of the two numbers\n        abs_product = abs(product)  # Step 5: Calculate the absolute value of the product\n\n        # Step 6: Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    return max_abs_product  # Step 7: Return the maximum absolute product\n\n# Example usage\nprint(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]))  # Output should be 36\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(max_product_tuple):\n\tassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "def check(max_product_tuple):\n\tassert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "def check(max_product_tuple):\n\tassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 12), (2, 4), (1, 9), (6, 6)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (3, 4), (6, 5), (2, 4)]) == 30", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 2), (3, 11), (2, 12), (4, 14)]) == 56", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 10), (4, 5), (5, 12), (3, 12)]) == 70", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 2), (1, 8), (4, 8), (8, 12)]) == 96", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 6), (2, 9), (2, 3), (2, 10)]) == 20", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 2), (1, 10), (1, 6), (5, 10)]) == 50", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 6), (1, 8), (6, 4), (9, 4)]) == 36", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 10), (5, 3), (6, 10), (7, 7)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 7), (5, 2), (5, 12), (9, 14)]) == 126", "def check(max_product_tuple):\n\tassert max_product_tuple([(1, 3), (2, 9), (3, 9), (2, 8)]) == 27", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 3), (4, 5), (2, 5), (7, 10)]) == 70", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 10), (3, 9), (6, 9), (7, 4)]) == 54", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 7), (4, 8), (5, 13), (2, 7)]) == 65", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 12), (4, 6), (3, 8), (6, 6)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 3), (4, 5), (1, 9), (8, 7)]) == 56", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (6, 1), (3, 9), (3, 14)]) == 42", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (2, 4), (4, 6), (6, 11)]) == 66", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 9), (3, 5), (1, 11), (6, 12)]) == 72", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 10), (3, 1), (4, 12), (7, 9)]) == 63", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 5), (4, 7), (2, 8), (5, 11)]) == 55", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 8), (5, 9), (3, 7), (3, 6)]) == 45", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 3), (2, 7), (5, 4), (5, 11)]) == 55", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 3), (3, 8), (5, 7), (7, 12)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 10), (4, 7), (4, 7), (1, 10)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 12), (4, 3), (4, 8), (9, 7)]) == 63", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 11), (6, 9), (1, 11), (5, 12)]) == 77", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 6), (2, 8), (1, 12), (6, 14)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 6), (6, 9), (2, 9), (9, 4)]) == 54", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 10), (4, 8), (2, 5), (3, 4)]) == 32", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 4), (2, 3), (1, 5), (8, 11)]) == 88", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 11), (4, 11), (3, 3), (1, 9)]) == 44", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 12), (1, 8), (4, 8), (5, 4)]) == 48", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 15), (11, 5), (9, 6)]) == 195", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 15), (17, 7), (1, 10)]) == 135", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 18), (12, 5), (5, 14)]) == 162", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 15), (15, 4), (10, 5)]) == 225", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 17), (15, 1), (8, 6)]) == 204", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 23), (15, 7), (2, 9)]) == 299", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 19), (16, 7), (3, 9)]) == 133", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 17), (20, 7), (5, 13)]) == 238", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 25), (19, 1), (6, 5)]) == 175", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 25), (11, 4), (2, 11)]) == 175", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 18), (12, 4), (6, 14)]) == 252", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 20), (14, 5), (4, 11)]) == 260", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 20), (16, 2), (2, 7)]) == 200", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 20), (18, 4), (2, 9)]) == 140", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 18), (17, 2), (9, 11)]) == 99", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 23), (13, 1), (5, 11)]) == 322", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 23), (16, 6), (7, 7)]) == 276", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 19), (12, 1), (7, 10)]) == 190", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 20), (19, 6), (8, 10)]) == 200", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 18), (12, 3), (10, 10)]) == 270", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 24), (18, 3), (8, 11)]) == 192", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 15), (17, 6), (3, 7)]) == 150", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 25), (18, 5), (6, 10)]) == 150", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 20), (13, 6), (10, 10)]) == 300", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 22), (12, 2), (9, 11)]) == 198", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 18), (13, 2), (7, 15)]) == 105", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 24), (10, 7), (9, 11)]) == 360", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 19), (12, 5), (3, 5)]) == 152", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 18), (10, 1), (6, 7)]) == 216", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 18), (16, 7), (6, 7)]) == 252", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 24), (17, 3), (1, 15)]) == 360", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 22), (11, 4), (4, 13)]) == 110", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 21), (13, 6), (8, 11)]) == 315", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 42), (13, 15), (25, 8), (8, 5)]) == 420", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 45), (12, 10), (23, 8), (15, 5)]) == 630", "def check(max_product_tuple):\n\tassert max_product_tuple([(16, 43), (14, 18), (20, 9), (12, 13)]) == 688", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 46), (13, 16), (23, 2), (13, 9)]) == 414", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 40), (8, 16), (21, 8), (7, 14)]) == 240", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 46), (11, 15), (17, 4), (8, 11)]) == 644", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 42), (9, 20), (17, 10), (10, 4)]) == 630", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 43), (5, 15), (20, 3), (7, 6)]) == 387", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 44), (15, 18), (20, 2), (11, 9)]) == 616", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 43), (13, 11), (25, 3), (10, 6)]) == 430", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 42), (11, 18), (19, 4), (10, 8)]) == 588", "def check(max_product_tuple):\n\tassert max_product_tuple([(11, 46), (13, 11), (19, 1), (11, 10)]) == 506", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 47), (14, 15), (17, 10), (10, 5)]) == 658", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 40), (15, 17), (17, 10), (11, 7)]) == 560", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 40), (8, 15), (25, 6), (8, 11)]) == 320", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 40), (11, 11), (22, 8), (16, 7)]) == 520", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 42), (13, 14), (25, 1), (13, 10)]) == 546", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 45), (12, 15), (25, 6), (15, 5)]) == 585", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 48), (12, 16), (16, 9), (14, 4)]) == 336", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 44), (11, 16), (25, 1), (11, 14)]) == 660", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 44), (8, 13), (18, 9), (13, 4)]) == 572", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 45), (5, 18), (17, 6), (11, 14)]) == 675", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 41), (14, 10), (21, 10), (11, 11)]) == 410", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 45), (9, 18), (17, 7), (13, 6)]) == 675", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 49), (10, 17), (15, 5), (16, 12)]) == 490", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 48), (9, 16), (20, 6), (11, 14)]) == 576", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 47), (9, 12), (23, 7), (16, 8)]) == 423", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 44), (12, 19), (21, 1), (15, 12)]) == 616", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 40), (5, 18), (23, 10), (10, 7)]) == 480", "def check(max_product_tuple):\n\tassert max_product_tuple([(16, 40), (6, 20), (18, 3), (12, 5)]) == 640", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 48), (13, 15), (16, 5), (10, 10)]) == 288", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 44), (9, 20), (19, 8), (17, 5)]) == 308", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 46), (14, 16), (25, 10), (9, 10)]) == 598"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 51, "mutate_method": "condense_two2one", "save_node": false, "parent_index": 51}
