{"name": "1598_D. Training Session", "description": "Monocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n) and a difficulty b_i (an integer from 1 to n). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems should satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\n\n\nYour task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.", "tags": ["combinatorics", "data structures", "geometry", "implementation", "math"], "difficulty": 10, "id": 1598, "sample_io": [{"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}], "test_list": [{"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 3\n4 4\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n0\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n0\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 2\n1 4\n1 2\n5 1\n", "output": ["2\n6\n"]}, {"input": "2\n4\n2 4\n3 4\n2 3\n3 3\n5\n2 5\n2 4\n3 2\n4 2\n5 1\n", "output": ["0\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 4\n1 4\n2 2\n5 1\n", "output": ["2\n7\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 2\n3 3\n3 2\n4 2\n", "output": ["3\n6\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n0\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n0\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n1 1\n5 1\n", "output": ["4\n6\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 1\n4 5\n4 2\n4 1\n", "output": ["2\n4\n"]}, {"input": "2\n4\n4 4\n1 4\n3 2\n3 3\n0\n1 4\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n0\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 5\n1 1\n5 1\n", "output": ["3\n7\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 3\n4 3\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n2 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n4 3\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n2 3\n4 2\n5 2\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n4 4\n3 3\n4 3\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n1 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n1 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n4 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 3\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 3\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 1\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 3\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n1 2\n2 3\n5\n1 5\n2 4\n3 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 4\n3 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 1\n2 3\n5\n2 5\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 4\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n2 5\n2 3\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 1\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 1\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 3\n3 3\n4 2\n2 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n2 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 4\n2 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n4 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 1\n2 1\n2 3\n5\n1 5\n4 4\n3 3\n4 3\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n4 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n2 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 2\n4 3\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n1 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 2\n4 3\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 3\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 3\n3 4\n4 3\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 5\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n1 2\n2 3\n5\n1 5\n2 4\n4 3\n4 1\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n1 3\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 3\n3 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 4\n1 4\n4 2\n5 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n2 5\n3 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n3 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 3\n3 3\n4 2\n1 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n3 3\n2 3\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n3 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n2 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n4 4\n3 2\n4 3\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 3\n1 4\n3 5\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 3\n3 2\n2 2\n5 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 2\n1 4\n4 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n2 5\n3 4\n2 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n2 1\n4 2\n4 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n3 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 5\n2 3\n4 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n1 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 2\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 4\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 2\n", "output": ["3\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 3\n3 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n3 1\n2 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n4 4\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 3\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 5\n3 3\n4 2\n1 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n4 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 5\n2 4\n3 1\n4 2\n4 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n1 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 1\n5\n2 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n2 1\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 1\n1 2\n2 3\n5\n1 5\n2 4\n3 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n4 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 2\n", "output": ["4\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 1\n2 3\n5\n2 5\n1 4\n3 5\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n3 4\n1 2\n2 2\n2 3\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 1\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n4 1\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 4\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n3 2\n2 3\n5\n1 5\n1 3\n3 3\n4 2\n2 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n4 1\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n4 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n2 5\n2 4\n2 3\n1 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 4\n5\n1 5\n2 4\n1 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 3\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 5\n2 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n4 3\n4 1\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n1 1\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 3\n3 2\n4 4\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n2 2\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n4 1\n1 3\n5\n1 5\n2 1\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n3 2\n4 2\n", "output": ["3\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 3\n1 3\n5\n1 5\n2 4\n5 5\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n1 4\n3 5\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n1 1\n2 2\n1 4\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n2 1\n3 4\n2 3\n4 2\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n1 5\n2 4\n2 1\n4 2\n4 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n4 1\n5 2\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n4 5\n2 3\n4 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 4\n5 2\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 4\n1 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 1\n3 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n3 1\n1 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 2\n4 4\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n4 2\n2 3\n5\n1 5\n1 4\n3 3\n4 3\n4 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n4 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 1\n5\n2 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 1\n3 1\n2 2\n2 3\n5\n1 2\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 1\n1 2\n2 1\n5\n1 5\n2 4\n3 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 4\n3 2\n4 2\n3 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n3 4\n1 2\n2 2\n2 3\n5\n2 5\n2 4\n2 2\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n1 1\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 4\n2 4\n3 2\n4 2\n4 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n2 1\n5 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n2 4\n4 3\n4 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n3 3\n5\n2 5\n2 4\n2 3\n1 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 2\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n1 5\n2 2\n5 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n3 3\n4 2\n2 3\n5\n1 5\n2 4\n4 3\n4 1\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n1 1\n2 2\n2 3\n5\n2 5\n1 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n4 1\n1 3\n5\n1 5\n2 1\n3 3\n3 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n1 1\n3 5\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n1 2\n2 2\n1 4\n4 2\n5 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n5 4\n5 2\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n1 2\n2 3\n5\n1 5\n2 3\n3 3\n4 4\n1 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n1 1\n1 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 2\n4 4\n5\n1 5\n4 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n3 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 2\n2 4\n3 3\n4 4\n4 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n2 4\n1 1\n2 2\n2 3\n5\n1 5\n1 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 1\n1 3\n5\n1 5\n2 1\n3 3\n3 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 1\n3 5\n4 2\n4 1\n", "output": ["2\n7\n"]}, {"input": "2\n4\n2 4\n3 4\n1 2\n2 3\n5\n2 5\n2 3\n3 3\n4 4\n1 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n1 1\n1 3\n5\n1 5\n2 4\n3 4\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n3 3\n5\n1 4\n2 4\n3 5\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n3 3\n5\n1 4\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 3\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n4 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n4 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 2\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n4 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n1 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n1 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n2 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n1 1\n", "output": ["4\n10\n"]}], "task_id": "codecontest/61", "repair_prompt": ["Monocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n) and a difficulty b_i (an integer from 1 to n). All problems are different. This means there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems should satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\nYour task is to determine the number of ways to select three problems for the problemset. Ensure that the selection process efficiently considers all possible combinations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "from itertools import combinations\n\n# Function to check if the selected problems meet the requirements\ndef meets_requirements(problems):\n    topics = set()\n    difficulties = set()\n    for problem in problems:\n        topics.add(problem[0])\n        difficulties.add(problem[1])\n    return len(topics) == 3 or len(difficulties) == 3\n\n# Parse the input to extract the number of test cases and details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # Determine the number of ways to select three problems that meet the requirements\n    valid_combinations = 0\n    for combination in combinations(problems, 3):\n        if meets_requirements(combination):\n            valid_combinations += 1\n    \n    print(valid_combinations)\n\nmain()", "completions": ["from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input()\n    \n    # Create a dictionary to store the topics and difficulties of each problem\n    problems = {}\n    \n    # Read the topics and difficulties of each problem\n    for i in range(n):\n        a, b = map(int, input().split())\n        problems[i+1] = (a, b)\n    \n    # Initialize a counter for valid combinations\n    count = 0\n    \n    # Iterate through all possible combinations of three problems\n    for comb in combinations(problems.keys(), 3):\n        topics = set()\n        difficulties = set()\n        valid = True\n        \n        for problem in comb:\n            topic, difficulty = problems[problem]\n            if topic in topics or difficulty in difficulties:\n                valid = False\n                break\n            topics.add(topic)\n            difficulties.add(difficulty)\n        \n        if valid:\n            count += 1\n    \n    # Output the total number of valid combinations for each test case\n    print(count)\n\nmain()", "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input())\n    \n    # Create a dictionary to store the topics and difficulties of each problem\n    problems = {}\n    \n    # Read the topics and difficulties of each problem\n    for i in range(n):\n        topic, difficulty = map(int, input().split())\n        problems[i+1] = (topic, difficulty)\n    \n    # Initialize a counter for valid combinations\n    count = 0\n    \n    # Iterate through all possible combinations of three problems\n    for comb in combinations(problems.keys(), 3):\n        topics = set()\n        difficulties = set()\n        \n        # Check if the selected problems meet the conditions specified\n        for problem in comb:\n            topics.add(problems[problem][0])\n            difficulties.add(problems[problem][1])\n        \n        if len(topics) == 3 or len(difficulties) == 3:\n            count += 1\n    \n    # Output the total number of valid combinations for each test case\n    print(count)\n\nmain()", "from itertools import combinations\n\n# Parse the input to extract the number of test cases and the details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n\n    # For each test case, determine the number of ways to select three problems that meet the given conditions\n    count = 0\n    for comb in combinations(problems, 3):\n        topics = set()\n        difficulties = set()\n        for problem in comb:\n            topics.add(problem[0])\n            difficulties.add(problem[1])\n        if len(topics) == 3 or len(difficulties) == 3:\n            count += 1\n\n    print(count)\n\nmain()", "from itertools import combinations\n\ndef count_valid_combinations(problems):\n    topics = set()\n    difficulties = set()\n    valid_combinations = 0\n    \n    for problem in problems:\n        topic, difficulty = problem\n        if topic not in topics or difficulty not in difficulties:\n            topics.add(topic)\n            difficulties.add(difficulty)\n    \n    if len(topics) >= 3 or len(difficulties) >= 3:\n        return 3\n    \n    return valid_combinations\n\nif __name__ == \"__main__\":\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n        \n        print(count_valid_combinations(problems))\n\nmain()", "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input())\n    \n    # Initialize lists to store topics and difficulties\n    topics = []\n    difficulties = []\n    \n    # Read the topics and difficulties of each problem\n    for _ in range(n):\n        a, b = map(int, input().split())\n        topics.append(a)\n        difficulties.append(b)\n    \n    # Initialize counters for valid combinations\n    count_topics = 0\n    count_difficulties = 0\n    \n    # Generate all possible combinations of selecting 3 problems\n    comb = list(combinations(range(n), 3))\n    \n    # Check each combination for valid conditions\n    for c in comb:\n        if len(set([topics[i] for i in c])) == 3:\n            count_topics += 1\n        if len(set([difficulties[i] for i in c])) == 3:\n            count_difficulties += 1\n    \n    # Output the total number of valid combinations for the test case\n    print(count_topics + count_difficulties)\n\nmain()", "from itertools import combinations\n\n# Function to check if the selected problems meet the conditions\ndef meets_conditions(problems):\n    topics = set()\n    difficulties = set()\n    for problem in problems:\n        topics.add(problem[0])\n        difficulties.add(problem[1])\n    return len(topics) == 3 or len(difficulties) == 3\n\n# Parse the input to extract the number of test cases and details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # Determine the number of ways to select three problems that meet the conditions\n    count = 0\n    for comb in combinations(problems, 3):\n        if meets_conditions(comb):\n            count += 1\n    \n    print(count)\n\nmain()", "from itertools import combinations\n\n# Function to determine the number of ways to select three problems that meet the given conditions\ndef count_valid_combinations(n, problems):\n    topics = set()\n    difficulties = set()\n    valid_combinations = 0\n    \n    for i in range(n):\n        topics.add(problems[i][0])\n        difficulties.add(problems[i][1])\n    \n    if len(topics) >= 3:\n        valid_combinations += n*(n-1)*(n-2)//6\n    \n    if len(difficulties) >= 3:\n        valid_combinations += n*(n-1)*(n-2)//6\n    \n    return valid_combinations\n\n# Parse the input to extract the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # For each test case, parse the input to extract the number of problems and their topics and difficulties\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # For each test case, determine the number of ways to select three problems that meet the given conditions\n    result = count_valid_combinations(n, problems)\n    \n    # Output the result\n    print(result)\n\nmain()", "from itertools import combinations\n\n# Parse the input to extract the number of test cases and the details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n\n    # For each test case, determine the number of ways to select three problems that meet the given conditions\n    count = 0\n    for comb in combinations(problems, 3):\n        topics = set()\n        difficulties = set()\n        for problem in comb:\n            topics.add(problem[0])\n            difficulties.add(problem[1])\n        if len(topics) == 3 or len(difficulties) == 3:\n            count += 1\n\n    print(count)\n\nmain()", "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input())\n    \n    # Initialize lists to store topics and difficulties\n    topics = []\n    difficulties = []\n    \n    # Read the topics and difficulties of each problem\n    for _ in range(n):\n        a, b = map(int, input().split())\n        topics.append(a)\n        difficulties.append(b)\n    \n    # Initialize counters for valid combinations\n    valid_combinations = 0\n    \n    # Generate all possible combinations of selecting 3 problems\n    problem_indices = list(range(n))\n    for comb in combinations(problem_indices, 3):\n        selected_topics = set()\n        selected_difficulties = set()\n        valid = True\n        \n        for idx in comb:\n            if topics[idx] in selected_topics or difficulties[idx] in selected_difficulties:\n                valid = False\n                break\n            selected_topics.add(topics[idx])\n            selected_difficulties.add(difficulties[idx])\n        \n        if valid:\n            valid_combinations += 1\n    \n    # Output the total number of valid combinations for each test case\n    print(valid_combinations)\n\nmain()", "from itertools import combinations\n\n# Function to check if the selected problems meet the requirements\ndef meets_requirements(problems):\n    topics = set()\n    difficulties = set()\n    for problem in problems:\n        topics.add(problem[0])\n        difficulties.add(problem[1])\n    return len(topics) == 3 or len(difficulties) == 3\n\n# Parse the input to extract the number of test cases and details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # Determine the number of ways to select three problems that meet the requirements\n    valid_combinations = 0\n    for combination in combinations(problems, 3):\n        if meets_requirements(combination):\n            valid_combinations += 1\n    \n    print(valid_combinations)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine the number of ways to select three problems that meet the given requirements\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, parse the input to extract the number of problems and their topics and difficulties\",\n    \"Step 3\": \"For each test case, iterate through all possible combinations of three problems\",\n    \"Step 4\": \"Check if the selected three problems meet either of the requirements\",\n    \"Step 5\": \"Count the number of valid combinations and output the result\"\n  }\n}", "Round_0": {"code": "from itertools import combinations\n\n# Function to check if the selected problems meet the requirements\ndef meets_requirements(problems):\n    topics = set()\n    difficulties = set()\n    for problem in problems:\n        topics.add(problem[0])\n        difficulties.add(problem[1])\n    return len(topics) == 3 or len(difficulties) == 3\n\n# Parse the input to extract the number of test cases and details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # Determine the number of ways to select three problems that meet the requirements\n    valid_combinations = 0\n    for combination in combinations(problems, 3):\n        if meets_requirements(combination):\n            valid_combinations += 1\n    \n    print(valid_combinations)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "from itertools import combinations\n\n# Function to check if the selected problems meet the requirements\ndef meets_requirements(problems):\n    topics = set()\n    difficulties = set()\n    for problem in problems:\n        topics.add(problem[0])\n        difficulties.add(problem[1])\n    return len(topics) == 3 or len(difficulties) == 3\n\n# Parse the input to extract the number of test cases and details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # Determine the number of ways to select three problems that meet the requirements\n    valid_combinations = 0\n    for combination in combinations(problems, 3):\n        if meets_requirements(combination):\n            valid_combinations += 1\n    \n    print(valid_combinations)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine the number of ways to select three problems that meet the given conditions\"\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from input\",\n    \"For each test case, read the number of problems and their topics and difficulties\",\n    \"Create a data structure to store the topics and difficulties of each problem\",\n    \"Iterate through all possible combinations of three problems\",\n    \"Check if the selected problems meet the conditions specified in the requirement\",\n    \"Count the number of valid combinations\",\n    \"Output the total number of valid combinations for each test case\"\n  ]\n}", "Round_0": {"code": "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input())\n    \n    # Create a dictionary to store the topics and difficulties of each problem\n    problems = {}\n    \n    # Read the topics and difficulties of each problem\n    for i in range(n):\n        a, b = map(int, input().split())\n        problems[i+1] = (a, b)\n    \n    # Initialize a counter for valid combinations\n    count = 0\n    \n    # Iterate through all possible combinations of three problems\n    for comb in combinations(problems.keys(), 3):\n        topics = set()\n        difficulties = set()\n        valid = True\n        \n        for problem in comb:\n            topic, difficulty = problems[problem]\n            if topic in topics or difficulty in difficulties:\n                valid = False\n                break\n            topics.add(topic)\n            difficulties.add(difficulty)\n        \n        if valid:\n            count += 1\n    \n    # Output the total number of valid combinations for each test case\n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 47)"}, "Round_1": {"code": "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input()\n    \n    # Create a dictionary to store the topics and difficulties of each problem\n    problems = {}\n    \n    # Read the topics and difficulties of each problem\n    for i in range(n):\n        a, b = map(int, input().split())\n        problems[i+1] = (a, b)\n    \n    # Initialize a counter for valid combinations\n    count = 0\n    \n    # Iterate through all possible combinations of three problems\n    for comb in combinations(problems.keys(), 3):\n        topics = set()\n        difficulties = set()\n        valid = True\n        \n        for problem in comb:\n            topic, difficulty = problems[problem]\n            if topic in topics or difficulty in difficulties:\n                valid = False\n                break\n            topics.add(topic)\n            difficulties.add(difficulty)\n        \n        if valid:\n            count += 1\n    \n    # Output the total number of valid combinations for each test case\n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine the number of ways to select three problems that meet the given conditions\"\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from input\",\n    \"For each test case, read the number of problems and their topics and difficulties\",\n    \"Create a data structure to store the topics and difficulties of each problem\",\n    \"Iterate through all possible combinations of three problems\",\n    \"Check if the selected problems meet the conditions specified in the requirement\",\n    \"Count the number of valid combinations\",\n    \"Output the total number of valid combinations for each test case\"\n  ]\n}", "Round_0": {"code": "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input())\n    \n    # Create a dictionary to store the topics and difficulties of each problem\n    problems = {}\n    \n    # Read the topics and difficulties of each problem\n    for i in range(n):\n        topic, difficulty = map(int, input().split())\n        problems[i+1] = (topic, difficulty)\n    \n    # Initialize a counter for valid combinations\n    count = 0\n    \n    # Iterate through all possible combinations of three problems\n    for comb in combinations(problems.keys(), 3):\n        topics = set()\n        difficulties = set()\n        \n        # Check if the selected problems meet the conditions specified\n        for problem in comb:\n            topics.add(problems[problem][0])\n            difficulties.add(problems[problem][1])\n        \n        if len(topics) == 3 or len(difficulties) == 3:\n            count += 1\n    \n    # Output the total number of valid combinations for each test case\n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 43)"}, "Round_1": {"code": "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input())\n    \n    # Create a dictionary to store the topics and difficulties of each problem\n    problems = {}\n    \n    # Read the topics and difficulties of each problem\n    for i in range(n):\n        topic, difficulty = map(int, input().split())\n        problems[i+1] = (topic, difficulty)\n    \n    # Initialize a counter for valid combinations\n    count = 0\n    \n    # Iterate through all possible combinations of three problems\n    for comb in combinations(problems.keys(), 3):\n        topics = set()\n        difficulties = set()\n        \n        # Check if the selected problems meet the conditions specified\n        for problem in comb:\n            topics.add(problems[problem][0])\n            difficulties.add(problems[problem][1])\n        \n        if len(topics) == 3 or len(difficulties) == 3:\n            count += 1\n    \n    # Output the total number of valid combinations for each test case\n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine the number of ways to select three problems that meet the given conditions\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, parse the input to extract the number of problems and their topics and difficulties\",\n    \"Step 3\": \"For each test case, iterate through all possible combinations of three problems\",\n    \"Step 4\": \"Check if the selected three problems meet the conditions specified in the requirement\",\n    \"Step 5\": \"Count the number of valid combinations and output the result\"\n  }\n}", "Round_0": {"code": "from itertools import combinations\n\n# Parse the input to extract the number of test cases and the details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n\n    # For each test case, determine the number of ways to select three problems that meet the given conditions\n    count = 0\n    for comb in combinations(problems, 3):\n        topics = set()\n        difficulties = set()\n        for problem in comb:\n            topics.add(problem[0])\n            difficulties.add(problem[1])\n        if len(topics) == 3 or len(difficulties) == 3:\n            count += 1\n\n    print(count)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from itertools import combinations\n\n# Parse the input to extract the number of test cases and the details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n\n    # For each test case, determine the number of ways to select three problems that meet the given conditions\n    count = 0\n    for comb in combinations(problems, 3):\n        topics = set()\n        difficulties = set()\n        for problem in comb:\n            topics.add(problem[0])\n            difficulties.add(problem[1])\n        if len(topics) == 3 or len(difficulties) == 3:\n            count += 1\n\n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine the number of ways to select three problems that meet the given conditions\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, parse the input to extract the number of problems and their topics and difficulties\",\n    \"Step 3\": \"Create a function to calculate the number of ways to select three problems that meet the conditions\",\n    \"Step 4\": \"Iterate through all possible combinations of three problems and check if they meet the conditions\",\n    \"Step 5\": \"Increment a counter for each valid combination\",\n    \"Step 6\": \"Output the total number of valid combinations for each test case\"\n  }\n}", "Round_0": {"code": "from itertools import combinations\n\ndef count_valid_combinations(problems):\n    topics = set()\n    difficulties = set()\n    valid_combinations = 0\n    \n    for problem in problems:\n        topic, difficulty = problem\n        if topic not in topics or difficulty not in difficulties:\n            topics.add(topic)\n            difficulties.add(difficulty)\n    \n    if len(topics) >= 3 or len(difficulties) >= 3:\n        return 3\n    \n    return valid_combinations\n\nif __name__ == \"__main__\":\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n        \n        print(count_valid_combinations(problems))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 36)"}, "Round_1": {"code": "from itertools import combinations\n\ndef count_valid_combinations(problems):\n    topics = set()\n    difficulties = set()\n    valid_combinations = 0\n    \n    for problem in problems:\n        topic, difficulty = problem\n        if topic not in topics or difficulty not in difficulties:\n            topics.add(topic)\n            difficulties.add(difficulty)\n    \n    if len(topics) >= 3 or len(difficulties) >= 3:\n        return 3\n    \n    return valid_combinations\n\nif __name__ == \"__main__\":\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n        \n        print(count_valid_combinations(problems))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine all possible combinations of selecting 3 problems that meet the given conditions\",\n    \"Count the number of valid combinations for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases from input\",\n    \"Step 2\": \"For each test case, read the number of problems and their topics/difficulties\",\n    \"Step 3\": \"Generate all possible combinations of selecting 3 problems for each test case\",\n    \"Step 4\": \"Check if each combination meets the given conditions (different topics or different difficulties)\",\n    \"Step 5\": \"Count the number of valid combinations for each test case\",\n    \"Step 6\": \"Output the total number of valid combinations for all test cases\"\n  }\n}", "Round_0": {"code": "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input())\n    \n    # Initialize lists to store topics and difficulties\n    topics = []\n    difficulties = []\n    \n    # Read the topics and difficulties of each problem\n    for _ in range(n):\n        a, b = map(int, input().split())\n        topics.append(a)\n        difficulties.append(b)\n    \n    # Initialize counters for valid combinations\n    count_topics = 0\n    count_difficulties = 0\n    \n    # Generate all possible combinations of selecting 3 problems\n    comb = list(combinations(range(n), 3))\n    \n    # Check each combination for valid conditions\n    for c in comb:\n        if len(set([topics[i] for i in c])) == 3:\n            count_topics += 1\n        if len(set([difficulties[i] for i in c])) == 3:\n            count_difficulties += 1\n    \n    # Output the total number of valid combinations for the test case\n    print(count_topics + count_difficulties)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input())\n    \n    # Initialize lists to store topics and difficulties\n    topics = []\n    difficulties = []\n    \n    # Read the topics and difficulties of each problem\n    for _ in range(n):\n        a, b = map(int, input().split())\n        topics.append(a)\n        difficulties.append(b)\n    \n    # Initialize counters for valid combinations\n    count_topics = 0\n    count_difficulties = 0\n    \n    # Generate all possible combinations of selecting 3 problems\n    comb = list(combinations(range(n), 3))\n    \n    # Check each combination for valid conditions\n    for c in comb:\n        if len(set([topics[i] for i in c])) == 3:\n            count_topics += 1\n        if len(set([difficulties[i] for i in c])) == 3:\n            count_difficulties += 1\n    \n    # Output the total number of valid combinations for the test case\n    print(count_topics + count_difficulties)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine the number of ways to select three problems that meet the given conditions\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, parse the input to extract the number of problems and their topics and difficulties\",\n    \"Step 3\": \"For each test case, iterate through all possible combinations of three problems\",\n    \"Step 4\": \"Check if the selected three problems meet either of the given conditions\",\n    \"Step 5\": \"Count the number of valid combinations and output the result\"\n  }\n}", "Round_0": {"code": "from itertools import combinations\n\n# Function to check if the selected problems meet the conditions\ndef meets_conditions(problems):\n    topics = set()\n    difficulties = set()\n    for problem in problems:\n        topics.add(problem[0])\n        difficulties.add(problem[1])\n    return len(topics) == 3 or len(difficulties) == 3\n\n# Parse the input to extract the number of test cases and details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # Determine the number of ways to select three problems that meet the conditions\n    count = 0\n    for comb in combinations(problems, 3):\n        if meets_conditions(comb):\n            count += 1\n    \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "from itertools import combinations\n\n# Function to check if the selected problems meet the conditions\ndef meets_conditions(problems):\n    topics = set()\n    difficulties = set()\n    for problem in problems:\n        topics.add(problem[0])\n        difficulties.add(problem[1])\n    return len(topics) == 3 or len(difficulties) == 3\n\n# Parse the input to extract the number of test cases and details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # Determine the number of ways to select three problems that meet the conditions\n    count = 0\n    for comb in combinations(problems, 3):\n        if meets_conditions(comb):\n            count += 1\n    \n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine the number of ways to select three problems that meet the given conditions\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, parse the input to extract the number of problems and their topics and difficulties\",\n    \"Step 3\": \"For each test case, iterate through all possible combinations of three problems\",\n    \"Step 4\": \"Check if the selected three problems meet the conditions specified in the requirement\",\n    \"Step 5\": \"Count the number of valid combinations and output the result\"\n  }\n}", "Round_0": {"code": "from itertools import combinations\n\n# Function to determine the number of ways to select three problems that meet the given conditions\ndef count_valid_combinations(n, problems):\n    topics = set()\n    difficulties = set()\n    valid_combinations = 0\n    \n    for i in range(n):\n        topics.add(problems[i][0])\n        difficulties.add(problems[i][1])\n    \n    if len(topics) >= 3:\n        valid_combinations += n*(n-1)*(n-2)//6\n    \n    if len(difficulties) >= 3:\n        valid_combinations += n*(n-1)*(n-2)//6\n    \n    return valid_combinations\n\n# Parse the input to extract the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # For each test case, parse the input to extract the number of problems and their topics and difficulties\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # For each test case, determine the number of ways to select three problems that meet the given conditions\n    result = count_valid_combinations(n, problems)\n    \n    # Output the result\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 43)"}, "Round_1": {"code": "from itertools import combinations\n\n# Function to determine the number of ways to select three problems that meet the given conditions\ndef count_valid_combinations(n, problems):\n    topics = set()\n    difficulties = set()\n    valid_combinations = 0\n    \n    for i in range(n):\n        topics.add(problems[i][0])\n        difficulties.add(problems[i][1])\n    \n    if len(topics) >= 3:\n        valid_combinations += n*(n-1)*(n-2)//6\n    \n    if len(difficulties) >= 3:\n        valid_combinations += n*(n-1)*(n-2)//6\n    \n    return valid_combinations\n\n# Parse the input to extract the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # For each test case, parse the input to extract the number of problems and their topics and difficulties\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # For each test case, determine the number of ways to select three problems that meet the given conditions\n    result = count_valid_combinations(n, problems)\n    \n    # Output the result\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine the number of ways to select three problems that meet the given conditions\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, parse the input to extract the number of problems and their topics and difficulties\",\n    \"Step 3\": \"For each test case, iterate through all possible combinations of three problems\",\n    \"Step 4\": \"Check if the selected three problems meet either of the given conditions\",\n    \"Step 5\": \"Count the number of valid combinations and output the result\"\n  }\n}", "Round_0": {"code": "from itertools import combinations\n\n# Parse the input to extract the number of test cases and the details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n\n    # For each test case, determine the number of ways to select three problems that meet the given conditions\n    count = 0\n    for comb in combinations(problems, 3):\n        topics = set()\n        difficulties = set()\n        for problem in comb:\n            topics.add(problem[0])\n            difficulties.add(problem[1])\n        if len(topics) == 3 or len(difficulties) == 3:\n            count += 1\n\n    print(count)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from itertools import combinations\n\n# Parse the input to extract the number of test cases and the details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n\n    # For each test case, determine the number of ways to select three problems that meet the given conditions\n    count = 0\n    for comb in combinations(problems, 3):\n        topics = set()\n        difficulties = set()\n        for problem in comb:\n            topics.add(problem[0])\n            difficulties.add(problem[1])\n        if len(topics) == 3 or len(difficulties) == 3:\n            count += 1\n\n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine all possible combinations of selecting 3 problems that meet the given conditions\",\n    \"Count the number of valid combinations for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of problems and their topics/difficulties\",\n    \"Step 3\": \"Generate all possible combinations of selecting 3 problems\",\n    \"Step 4\": \"Check if each combination meets the given conditions\",\n    \"Step 5\": \"Count the number of valid combinations\",\n    \"Step 6\": \"Output the total number of valid combinations for each test case\"\n  }\n}", "Round_0": {"code": "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input())\n    \n    # Initialize lists to store topics and difficulties\n    topics = []\n    difficulties = []\n    \n    # Read the topics and difficulties of each problem\n    for _ in range(n):\n        a, b = map(int, input().split())\n        topics.append(a)\n        difficulties.append(b)\n    \n    # Initialize counters for valid combinations\n    valid_combinations = 0\n    \n    # Generate all possible combinations of selecting 3 problems\n    problem_indices = list(range(n))\n    for comb in combinations(problem_indices, 3):\n        selected_topics = set()\n        selected_difficulties = set()\n        valid = True\n        \n        for idx in comb:\n            if topics[idx] in selected_topics or difficulties[idx] in selected_difficulties:\n                valid = False\n                break\n            selected_topics.add(topics[idx])\n            selected_difficulties.add(difficulties[idx])\n        \n        if valid:\n            valid_combinations += 1\n    \n    # Output the total number of valid combinations for each test case\n    print(valid_combinations)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 49)"}, "Round_1": {"code": "from itertools import combinations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of problems\n    n = int(input())\n    \n    # Initialize lists to store topics and difficulties\n    topics = []\n    difficulties = []\n    \n    # Read the topics and difficulties of each problem\n    for _ in range(n):\n        a, b = map(int, input().split())\n        topics.append(a)\n        difficulties.append(b)\n    \n    # Initialize counters for valid combinations\n    valid_combinations = 0\n    \n    # Generate all possible combinations of selecting 3 problems\n    problem_indices = list(range(n))\n    for comb in combinations(problem_indices, 3):\n        selected_topics = set()\n        selected_difficulties = set()\n        valid = True\n        \n        for idx in comb:\n            if topics[idx] in selected_topics or difficulties[idx] in selected_difficulties:\n                valid = False\n                break\n            selected_topics.add(topics[idx])\n            selected_difficulties.add(difficulties[idx])\n        \n        if valid:\n            valid_combinations += 1\n    \n    # Output the total number of valid combinations for each test case\n    print(valid_combinations)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the details of each test case\",\n    \"For each test case, determine the number of ways to select three problems that meet the given requirements\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, parse the input to extract the number of problems and their topics and difficulties\",\n    \"Step 3\": \"For each test case, iterate through all possible combinations of three problems\",\n    \"Step 4\": \"Check if the selected three problems meet either of the requirements\",\n    \"Step 5\": \"Count the number of valid combinations and output the result\"\n  }\n}", "Round_0": {"code": "from itertools import combinations\n\n# Function to check if the selected problems meet the requirements\ndef meets_requirements(problems):\n    topics = set()\n    difficulties = set()\n    for problem in problems:\n        topics.add(problem[0])\n        difficulties.add(problem[1])\n    return len(topics) == 3 or len(difficulties) == 3\n\n# Parse the input to extract the number of test cases and details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # Determine the number of ways to select three problems that meet the requirements\n    valid_combinations = 0\n    for combination in combinations(problems, 3):\n        if meets_requirements(combination):\n            valid_combinations += 1\n    \n    print(valid_combinations)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "from itertools import combinations\n\n# Function to check if the selected problems meet the requirements\ndef meets_requirements(problems):\n    topics = set()\n    difficulties = set()\n    for problem in problems:\n        topics.add(problem[0])\n        difficulties.add(problem[1])\n    return len(topics) == 3 or len(difficulties) == 3\n\n# Parse the input to extract the number of test cases and details of each test case\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    problems = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        problems.append((a, b))\n    \n    # Determine the number of ways to select three problems that meet the requirements\n    valid_combinations = 0\n    for combination in combinations(problems, 3):\n        if meets_requirements(combination):\n            valid_combinations += 1\n    \n    print(valid_combinations)\n"}}], "scores": [], "pass_results": [false, false, true, false, true, true, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 43, "prompt": "Monocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n) and a difficulty b_i (an integer from 1 to n). All problems are different. This means there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems should satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\nYour task is to determine the number of ways to select three problems for the problemset. Ensure that the selection process efficiently considers all possible combinations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 22}
