{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "repair_prompt": ["The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns), with rows numbered from 1 to n from top to bottom and columns numbered from 1 to m from left to right. The robot is able to move from the current cell to one of the four cells adjacent by side, executing the sequence of commands s given, with each command denoted by 'L', 'R', 'D' or 'U' for moving left, right, down or up, respectively. The robot can start its movement in any cell, executing the commands from the first one in s strictly in order, but falls and breaks if it moves beyond the board's edge, rendering a command causing it to break unsuccessfully executed. The robot's task is to execute as many commands as possible without falling off the board; for example, on board 3 \u00d7 3, if starting a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, it performs one command before the next forces it over the edge. If starting from cell (2, 1), all commands succeed, stopping the robot in cell (1, 2). The robot starts from cell (2, 1), moves right, right, down, left, up, and up, ending in cell (1, 2). Determine the cell from which the robot should start its movement to execute the most commands; the goal is finding a starting cell that maximizes successful moves, considering edge cases like a very small board or commands moving in a single direction. Pay special attention to scenarios where the sequence of commands may form a loop.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def find_optimal_starting_cell(test_cases):\n    for i in range(test_cases):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for row in range(1, n+1):\n            for col in range(1, m+1):\n                current_row, current_col = row, col\n                successful_moves = 0\n                \n                for command in commands:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n                    \n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n                    successful_moves += 1\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (row, col)\n        \n        print(optimal_starting_cell[0], optimal_starting_cell[1])\n\n# Input\ntest_cases = int(input())\nfind_optimal_starting_cell(test_cases)\n\nmain()", "completions": ["def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    if 1 <= x + dx <= n and 1 <= y + dy <= m:\n                        x += dx\n                        y += dy\n                        successful_moves += 1\n                    else:\n                        break\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (i, j)\n\n        return optimal_starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        result = count_successful_moves(n, m, s)\n        results.append(result)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append(((n, m), s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n\nmain()", "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for move in s:\n                    dx, dy = directions[move]\n                    if 1 <= x + dx <= n and 1 <= y + dy <= m:\n                        x += dx\n                        y += dy\n                        successful_moves += 1\n                    else:\n                        break\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n\nmain()", "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for move in s:\n                    dx, dy = directions[move]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n\nmain()", "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (i, j)\n\n        return optimal_starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        result = count_successful_moves(n, m, s)\n        results.append(result)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    test_cases.append((n, m, s))\n\n# Output\noutput = find_starting_cell(t, test_cases)\nfor result in output:\n    print(result[0], result[1])\n\nmain()", "def find_optimal_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s, start_row, start_col):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        successful_moves = 0\n        current_row, current_col = start_row, start_col\n        \n        for direction in s:\n            new_row = current_row + directions[direction][0]\n            new_col = current_col + directions[direction][1]\n            \n            if 1 <= new_row <= n and 1 <= new_col <= m:\n                successful_moves += 1\n                current_row, current_col = new_row, new_col\n            else:\n                break\n        \n        return successful_moves\n\n    results = []\n    \n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for row in range(1, n + 1):\n            for col in range(1, m + 1):\n                successful_moves = count_successful_moves(n, m, s, row, col)\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (row, col)\n        \n        results.append(optimal_starting_cell)\n    \n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append(((n, m), s))\n\n# Output\nresults = find_optimal_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n\nmain()", "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n\nmain()", "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for move in s:\n                    dx, dy = directions[move]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = map(int, test_cases[i][0].split())\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n_m = input()\n    s = input()\n    test_cases.append((n_m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n\nmain()", "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n\nmain()", "def find_starting_cell(t, test_cases):\n    def simulate_movement(n, m, commands):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        \n        def is_valid_move(x, y):\n            return 1 <= x <= n and 1 <= y <= m\n        \n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n                \n                for command in commands:\n                    dx, dy = directions[command]\n                    new_x, new_y = x + dx, y + dy\n                    \n                    if is_valid_move(new_x, new_y):\n                        successful_moves += 1\n                        x, y = new_x, new_y\n                    else:\n                        break\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (i, j)\n        \n        return optimal_starting_cell\n    \n    results = []\n    \n    for i in range(t):\n        n, m = test_cases[i][0]\n        commands = test_cases[i][1]\n        optimal_starting_cell = simulate_movement(n, m, commands)\n        results.append(optimal_starting_cell)\n    \n    return results\n\n# Input\nt = int(input())\ntest_cases = []\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append(((n, m), commands))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n\nmain()", "def find_optimal_starting_cell(test_cases):\n    for i in range(test_cases):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for row in range(1, n+1):\n            for col in range(1, m+1):\n                current_row, current_col = row, col\n                successful_moves = 0\n                \n                for command in commands:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n                    \n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n                    successful_moves += 1\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (row, col)\n        \n        print(optimal_starting_cell[0], optimal_starting_cell[1])\n\n# Input\ntest_cases = int(input())\nfind_optimal_starting_cell(test_cases)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Output the coordinates of the optimal starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"Iterate through each test case\",\n    \"Step 3\": \"For each test case, iterate through all possible starting cells\",\n    \"Step 4\": \"Simulate the robot's movement based on the command sequence and determine the number of successful moves\",\n    \"Step 5\": \"Track the starting cell that maximizes successful moves\",\n    \"Step 6\": \"Output the coordinates of the optimal starting cell for each test case\"\n  }\n}", "Round_0": {"code": "def find_optimal_starting_cell(test_cases):\n    for i in range(test_cases):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for row in range(1, n+1):\n            for col in range(1, m+1):\n                current_row, current_col = row, col\n                successful_moves = 0\n                \n                for command in commands:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n                    \n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n                    successful_moves += 1\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (row, col)\n        \n        print(optimal_starting_cell[0], optimal_starting_cell[1])\n\n# Input\ntest_cases = int(input())\nfind_optimal_starting_cell(test_cases)\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 46)"}, "Round_1": {"code": "def find_optimal_starting_cell(test_cases):\n    for i in range(test_cases):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for row in range(1, n+1):\n            for col in range(1, m+1):\n                current_row, current_col = row, col\n                successful_moves = 0\n                \n                for command in commands:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n                    \n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n                    successful_moves += 1\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (row, col)\n        \n        print(optimal_starting_cell[0], optimal_starting_cell[1])\n\n# Input\ntest_cases = int(input())\nfind_optimal_starting_cell(test_cases)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Output the coordinates of the optimal starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"Iterate through each test case\",\n    \"Step 3\": \"For each test case, iterate through all possible starting cells\",\n    \"Step 4\": \"Simulate the robot's movement based on the command sequence\",\n    \"Step 5\": \"Count the number of successful moves for each starting cell\",\n    \"Step 6\": \"Output the coordinates of the starting cell with the maximum successful moves\"\n  }\n}", "Round_0": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    if 1 <= x + dx <= n and 1 <= y + dy <= m:\n                        x += dx\n                        y += dy\n                        successful_moves += 1\n                    else:\n                        break\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (i, j)\n\n        return optimal_starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        result = count_successful_moves(n, m, s)\n        results.append(result)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append(((n, m), s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 53)"}, "Round_1": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    if 1 <= x + dx <= n and 1 <= y + dy <= m:\n                        x += dx\n                        y += dy\n                        successful_moves += 1\n                    else:\n                        break\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (i, j)\n\n        return optimal_starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        result = count_successful_moves(n, m, s)\n        results.append(result)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append(((n, m), s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Calculate the number of successful moves for each starting cell\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Step 2\": \"Iterate through each test case\",\n    \"Step 3\": \"For each test case, iterate through each cell on the board\",\n    \"Step 4\": \"For each cell, simulate the robot's movement based on the command sequence and calculate the number of successful moves\",\n    \"Step 5\": \"Track the starting cell that maximizes successful moves for each test case\",\n    \"Step 6\": \"Output the coordinates of the starting cell for each test case\"\n  }\n}", "Round_0": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for move in s:\n                    dx, dy = directions[move]\n                    if 1 <= x + dx <= n and 1 <= y + dy <= m:\n                        x += dx\n                        y += dy\n                        successful_moves += 1\n                    else:\n                        break\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 53)"}, "Round_1": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for move in s:\n                    dx, dy = directions[move]\n                    if 1 <= x + dx <= n and 1 <= y + dy <= m:\n                        x += dx\n                        y += dy\n                        successful_moves += 1\n                    else:\n                        break\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Calculate the number of successful moves for each starting cell\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the necessary information for each test case\",\n    \"step_2\": \"Iterate through each test case\",\n    \"step_3\": \"For each test case, iterate through each cell on the board and calculate the number of successful moves\",\n    \"step_4\": \"Output the coordinates of the cell that maximizes successful moves for each test case\"\n  }\n}", "Round_0": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for move in s:\n                    dx, dy = directions[move]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 54)"}, "Round_1": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for move in s:\n                    dx, dy = directions[move]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Output the coordinates of the optimal starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"steps\": [\n      \"Parse the input to extract the number of test cases\",\n      \"For each test case, parse the board dimensions and command sequence\",\n      \"Iterate through each cell on the board and simulate the robot's movement based on the command sequence\",\n      \"Track the number of successful moves for each starting cell\",\n      \"Output the coordinates of the cell with the maximum successful moves\"\n    ]\n  }\n}", "Round_0": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (i, j)\n\n        return optimal_starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        result = count_successful_moves(n, m, s)\n        results.append(result)\n\n    return results\n\n# Input\nt = 4\ntest_cases = [\n    [(1, 1), \"L\"],\n    [(1, 2), \"L\"],\n    [(3, 3), \"RRDLUU\"],\n    [(4, 3), \"LUURRDDLLLUU\"]\n]\n\n# Output\noutput = find_starting_cell(t, test_cases)\nfor result in output:\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 73)"}, "Round_1": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (i, j)\n\n        return optimal_starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        result = count_successful_moves(n, m, s)\n        results.append(result)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    test_cases.append((n, m, s))\n\n# Output\noutput = find_starting_cell(t, test_cases)\nfor result in output:\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Output the coordinates of the optimal starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"Iterate through each test case\",\n    \"Step 3\": \"For each test case, iterate through all possible starting cells\",\n    \"Step 4\": \"Simulate the robot's movement based on the command sequence\",\n    \"Step 5\": \"Count the number of successful moves for each starting cell\",\n    \"Step 6\": \"Output the coordinates of the starting cell with the maximum successful moves\"\n  }\n}", "Round_0": {"code": "def find_optimal_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s, start_row, start_col):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        successful_moves = 0\n        current_row, current_col = start_row, start_col\n        \n        for direction in s:\n            new_row = current_row + directions[direction][0]\n            new_col = current_col + directions[direction][1]\n            \n            if 1 <= new_row <= n and 1 <= new_col <= m:\n                successful_moves += 1\n                current_row, current_col = new_row, new_col\n            else:\n                break\n        \n        return successful_moves\n\n    results = []\n    \n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for row in range(1, n + 1):\n            for col in range(1, m + 1):\n                successful_moves = count_successful_moves(n, m, s, row, col)\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (row, col)\n        \n        results.append(optimal_starting_cell)\n    \n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append(((n, m), s))\n\n# Output\nresults = find_optimal_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 56)"}, "Round_1": {"code": "def find_optimal_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s, start_row, start_col):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        successful_moves = 0\n        current_row, current_col = start_row, start_col\n        \n        for direction in s:\n            new_row = current_row + directions[direction][0]\n            new_col = current_col + directions[direction][1]\n            \n            if 1 <= new_row <= n and 1 <= new_col <= m:\n                successful_moves += 1\n                current_row, current_col = new_row, new_col\n            else:\n                break\n        \n        return successful_moves\n\n    results = []\n    \n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for row in range(1, n + 1):\n            for col in range(1, m + 1):\n                successful_moves = count_successful_moves(n, m, s, row, col)\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (row, col)\n        \n        results.append(optimal_starting_cell)\n    \n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append(((n, m), s))\n\n# Output\nresults = find_optimal_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Calculate the number of successful moves for each starting cell\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the necessary information for each test case\",\n    \"Step 2\": \"Iterate through each test case\",\n    \"Step 3\": \"For each test case, iterate through each cell on the board and calculate the number of successful moves\",\n    \"Step 4\": \"Output the coordinates of the cell that maximizes successful moves for each test case\"\n  }\n}", "Round_0": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 54)"}, "Round_1": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Calculate the number of successful moves for each starting cell\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"step_2\": \"Iterate through each test case\",\n    \"step_3\": \"For each test case, iterate through each cell on the board\",\n    \"step_4\": \"For each cell, simulate the robot's movement based on the command sequence\",\n    \"step_5\": \"Count the number of successful moves for each cell\",\n    \"step_6\": \"Return the coordinates of the cell with the maximum number of successful moves\"\n  }\n}", "Round_0": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for move in s:\n                    dx, dy = directions[move]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 63)"}, "Round_1": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for move in s:\n                    dx, dy = directions[move]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = map(int, test_cases[i][0].split())\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n_m = input()\n    s = input()\n    test_cases.append((n_m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Calculate the number of successful moves for each starting cell\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the necessary information for each test case\",\n    \"Step 2\": \"Iterate through each test case\",\n    \"Step 3\": \"For each test case, iterate through each cell on the board\",\n    \"Step 4\": \"Simulate the robot's movement from each cell using the given command sequence\",\n    \"Step 5\": \"Count the number of successful moves for each starting cell\",\n    \"Step 6\": \"Output the coordinates of the cell that maximizes successful moves for each test case\"\n  }\n}", "Round_0": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 54)"}, "Round_1": {"code": "def find_starting_cell(t, test_cases):\n    def count_successful_moves(n, m, s):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        max_successful_moves = 0\n        starting_cell = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n\n                for direction in s:\n                    dx, dy = directions[direction]\n                    x += dx\n                    y += dy\n\n                    if x < 1 or x > n or y < 1 or y > m:\n                        break\n\n                    successful_moves += 1\n\n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    starting_cell = (i, j)\n\n        return starting_cell\n\n    results = []\n    for i in range(t):\n        n, m = test_cases[i][0]\n        s = test_cases[i][1]\n        starting_cell = count_successful_moves(n, m, s)\n        results.append(starting_cell)\n\n    return results\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Implement a function to simulate the robot's movement based on the given commands\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the necessary information for each test case\",\n    \"step_2\": \"Iterate through each test case and simulate the robot's movement to find the starting cell with the most successful moves\",\n    \"step_3\": \"Output the coordinates of the optimal starting cell for each test case\"\n  }\n}", "Round_0": {"code": "def find_starting_cell(t, test_cases):\n    def simulate_movement(n, m, commands):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        \n        def is_valid_move(x, y):\n            return 1 <= x <= n and 1 <= y <= m\n        \n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n                \n                for command in commands:\n                    dx, dy = directions[command]\n                    new_x, new_y = x + dx, y + dy\n                    \n                    if is_valid_move(new_x, new_y):\n                        successful_moves += 1\n                        x, y = new_x, new_y\n                    else:\n                        break\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (i, j)\n        \n        return optimal_starting_cell\n    \n    results = []\n    \n    for i in range(t):\n        n, m = test_cases[i][0]\n        commands = test_cases[i][1]\n        optimal_starting_cell = simulate_movement(n, m, commands)\n        results.append(optimal_starting_cell)\n    \n    return results\n\n# Input\nt = int(input())\ntest_cases = []\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append(((n, m), commands))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 60)"}, "Round_1": {"code": "def find_starting_cell(t, test_cases):\n    def simulate_movement(n, m, commands):\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        \n        def is_valid_move(x, y):\n            return 1 <= x <= n and 1 <= y <= m\n        \n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                successful_moves = 0\n                \n                for command in commands:\n                    dx, dy = directions[command]\n                    new_x, new_y = x + dx, y + dy\n                    \n                    if is_valid_move(new_x, new_y):\n                        successful_moves += 1\n                        x, y = new_x, new_y\n                    else:\n                        break\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (i, j)\n        \n        return optimal_starting_cell\n    \n    results = []\n    \n    for i in range(t):\n        n, m = test_cases[i][0]\n        commands = test_cases[i][1]\n        optimal_starting_cell = simulate_movement(n, m, commands)\n        results.append(optimal_starting_cell)\n    \n    return results\n\n# Input\nt = int(input())\ntest_cases = []\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append(((n, m), commands))\n\n# Output\nresults = find_starting_cell(t, test_cases)\nfor result in results:\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that maximizes successful moves\",\n    \"Output the coordinates of the optimal starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"Iterate through each test case\",\n    \"Step 3\": \"For each test case, iterate through all possible starting cells\",\n    \"Step 4\": \"Simulate the robot's movement based on the command sequence and determine the number of successful moves\",\n    \"Step 5\": \"Track the starting cell that maximizes successful moves\",\n    \"Step 6\": \"Output the coordinates of the optimal starting cell for each test case\"\n  }\n}", "Round_0": {"code": "def find_optimal_starting_cell(test_cases):\n    for i in range(test_cases):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for row in range(1, n+1):\n            for col in range(1, m+1):\n                current_row, current_col = row, col\n                successful_moves = 0\n                \n                for command in commands:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n                    \n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n                    successful_moves += 1\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (row, col)\n        \n        print(optimal_starting_cell[0], optimal_starting_cell[1])\n\n# Input\ntest_cases = int(input())\nfind_optimal_starting_cell(test_cases)\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 46)"}, "Round_1": {"code": "def find_optimal_starting_cell(test_cases):\n    for i in range(test_cases):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        max_successful_moves = 0\n        optimal_starting_cell = (1, 1)\n        \n        for row in range(1, n+1):\n            for col in range(1, m+1):\n                current_row, current_col = row, col\n                successful_moves = 0\n                \n                for command in commands:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n                    \n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n                    successful_moves += 1\n                \n                if successful_moves > max_successful_moves:\n                    max_successful_moves = successful_moves\n                    optimal_starting_cell = (row, col)\n        \n        print(optimal_starting_cell[0], optimal_starting_cell[1])\n\n# Input\ntest_cases = int(input())\nfind_optimal_starting_cell(test_cases)\n"}}], "scores": [], "pass_results": [true, false, true, false, false, false, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 69, "prompt": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns), with rows numbered from 1 to n from top to bottom and columns numbered from 1 to m from left to right. The robot is able to move from the current cell to one of the four cells adjacent by side, executing the sequence of commands s given, with each command denoted by 'L', 'R', 'D' or 'U' for moving left, right, down or up, respectively. The robot can start its movement in any cell, executing the commands from the first one in s strictly in order, but falls and breaks if it moves beyond the board's edge, rendering a command causing it to break unsuccessfully executed. The robot's task is to execute as many commands as possible without falling off the board; for example, on board 3 \u00d7 3, if starting a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, it performs one command before the next forces it over the edge. If starting from cell (2, 1), all commands succeed, stopping the robot in cell (1, 2). The robot starts from cell (2, 1), moves right, right, down, left, up, and up, ending in cell (1, 2). Determine the cell from which the robot should start its movement to execute the most commands; the goal is finding a starting cell that maximizes successful moves, considering edge cases like a very small board or commands moving in a single direction. Pay special attention to scenarios where the sequence of commands may form a loop.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 44}
