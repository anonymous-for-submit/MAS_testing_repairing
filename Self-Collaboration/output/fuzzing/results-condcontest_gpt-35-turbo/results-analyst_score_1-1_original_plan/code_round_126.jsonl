{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He possesses a number of one-minute songs, b two-minute songs and c three-minute songs. He owns a collection of songs with a mix of lengths. These songs include b songs lasting two minutes. There are also c songs that last three minutes. He wants to distribute all songs into two concerts. Every song should be included to exactly one concert. \n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    print(min_diff)\n\nmain()", "completions": ["# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum possible difference between the durations of the two concerts\n    # Distribute the songs evenly to minimize the absolute difference\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Print the minimal possible difference in minutes between the concerts durations for each test case\n    print(min_diff)\n\nmain()", "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if half_duration % 2 == 0:\n                    print(half_duration - total_duration // 2)\n                else:\n                    print(half_duration - total_duration // 2 + 1)\n\n# Read the number of test cases\nt = int(input())\n\ntest_cases = []\n# Read the test cases\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output the minimal possible difference in minutes between the concerts durations\ncalculate_minimal_difference(t, test_cases)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(8):\n        duration1 = 0\n        duration2 = 0\n        \n        if i & 1:\n            duration1 += a\n        if i & 2:\n            duration1 += 2*b\n        if i & 4:\n            duration1 += 3*c\n        \n        duration2 = total_duration - duration1\n        min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    print(min_diff)\n\nmain()", "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == 0:\n                print(abs(half_duration - (b*2 + c*3)))\n            elif b == 0:\n                print(abs(half_duration - (a + c*3)))\n            elif c == 0:\n                print(abs(half_duration - (a + b*2)))\n            else:\n                min_diff = min(abs(half_duration - (a + b*2 + c*3)), abs(half_duration - (a + 2*b + c*3)), abs(half_duration - (a + 2*b + 3*c)))\n                print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum possible difference between the durations of the two concerts\n    # Distribute the songs evenly to minimize the absolute difference\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Print the minimal possible difference in minutes between the concerts durations for each test case\n    print(min_diff)\n\nmain()", "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == 0:\n                print(abs(half_duration - (b*2 + c*3)))\n            elif b == 0:\n                print(abs(half_duration - (a + c*3)))\n            elif c == 0:\n                print(abs(half_duration - (a + b*2)))\n            else:\n                min_diff = min(abs(half_duration - (a + b*2 + c*3)), abs(half_duration - (a + 2*b + c*3)), abs(half_duration - (a + 2*b + 3*c)))\n                print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n\nmain()", "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if half_duration % 2 == 0:\n                    print(half_duration - total_duration // 2)\n                else:\n                    print(half_duration - total_duration // 2 + 1)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n\nmain()", "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = float('inf')\n        for i in range(a+1):\n            for j in range(b+1):\n                for k in range(c+1):\n                    duration = i + 2*j + 3*k\n                    if duration <= half_duration:\n                        min_diff = min(min_diff, half_duration - duration)\n        \n        print(min_diff)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Output\ncalculate_minimal_difference(t, test_cases)\n\nmain()", "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = float('inf')\n        for x in range(a+1):\n            for y in range(b+1):\n                for z in range(c+1):\n                    duration = x + 2*y + 3*z\n                    if duration <= half_duration:\n                        min_diff = min(min_diff, half_duration - duration)\n        \n        print(min_diff)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Output\ncalculate_minimal_difference(t, test_cases)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    print(min_diff)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum difference between the durations of the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c)\",\n    \"Step 3\": \"Calculate the total duration of all songs: total_duration = a + 2b + 3c\",\n    \"Step 4\": \"Initialize min_diff to a large value\",\n    \"Step 5\": \"Iterate through all possible combinations of distributing songs into two concerts\",\n    \"Step 6\": \"Calculate the duration of each concert and update min_diff if the absolute difference is smaller\",\n    \"Step 7\": \"Print the min_diff for each test case\"\n  }\n}", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    print(min_diff)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum difference between the durations of the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs by multiplying the number of songs with their respective durations\",\n    \"Step 4\": \"Determine the minimum possible difference between the durations of the two concerts by distributing the songs evenly\",\n    \"Step 5\": \"Print the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum possible difference between the durations of the two concerts\n    # Distribute the songs evenly to minimize the absolute difference\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Print the minimal possible difference in minutes between the concerts durations for each test case\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum possible difference between the durations of the two concerts\n    # Distribute the songs evenly to minimize the absolute difference\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Print the minimal possible difference in minutes between the concerts durations for each test case\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}", "Round_0": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if half_duration % 2 == 0:\n                    print(half_duration - total_duration // 2)\n                else:\n                    print(half_duration - total_duration // 2 + 1)\n\n# Read the number of test cases\nt = int(input())\n\ntest_cases = []\n# Read the test cases\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output the minimal possible difference in minutes between the concerts durations\ncalculate_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 35)"}, "Round_1": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if half_duration % 2 == 0:\n                    print(half_duration - total_duration // 2)\n                else:\n                    print(half_duration - total_duration // 2 + 1)\n\n# Read the number of test cases\nt = int(input())\n\ntest_cases = []\n# Read the test cases\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output the minimal possible difference in minutes between the concerts durations\ncalculate_minimal_difference(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum difference between the durations of the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c)\",\n    \"Step 3\": \"Calculate the total duration of all songs: total_duration = a + 2b + 3c\",\n    \"Step 4\": \"Initialize min_diff to a large value\",\n    \"Step 5\": \"Iterate through all possible combinations of distributing songs into two concerts\",\n    \"Step 6\": \"Calculate the duration of each concert and update min_diff if the absolute difference is smaller\",\n    \"Step 7\": \"Print the min_diff for each test case\"\n  }\n}", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(8):\n        duration1 = 0\n        duration2 = 0\n        \n        if i & 1:\n            duration1 += a\n        if i & 2:\n            duration1 += 2*b\n        if i & 4:\n            duration1 += 3*c\n        \n        duration2 = total_duration - duration1\n        min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    print(min_diff)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 30)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(8):\n        duration1 = 0\n        duration2 = 0\n        \n        if i & 1:\n            duration1 += a\n        if i & 2:\n            duration1 += 2*b\n        if i & 4:\n            duration1 += 3*c\n        \n        duration2 = total_duration - duration1\n        min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}", "Round_0": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == 0:\n                print(abs(half_duration - (b*2 + c*3)))\n            elif b == 0:\n                print(abs(half_duration - (a + c*3)))\n            elif c == 0:\n                print(abs(half_duration - (a + b*2)))\n            else:\n                min_diff = min(abs(half_duration - (a + b*2 + c*3)), abs(half_duration - (a + 2*b + c*3)), abs(half_duration - (a + 2*b + 3*c)))\n                print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == 0:\n                print(abs(half_duration - (b*2 + c*3)))\n            elif b == 0:\n                print(abs(half_duration - (a + c*3)))\n            elif c == 0:\n                print(abs(half_duration - (a + b*2)))\n            else:\n                min_diff = min(abs(half_duration - (a + b*2 + c*3)), abs(half_duration - (a + 2*b + c*3)), abs(half_duration - (a + 2*b + 3*c)))\n                print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum difference between the durations of the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs by multiplying the number of songs with their respective durations\",\n    \"Step 4\": \"Determine the minimum possible difference between the durations of the two concerts by distributing the songs evenly\",\n    \"Step 5\": \"Print the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum possible difference between the durations of the two concerts\n    # Distribute the songs evenly to minimize the absolute difference\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Print the minimal possible difference in minutes between the concerts durations for each test case\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum possible difference between the durations of the two concerts\n    # Distribute the songs evenly to minimize the absolute difference\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Print the minimal possible difference in minutes between the concerts durations for each test case\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}", "Round_0": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == 0:\n                print(abs(half_duration - (b*2 + c*3)))\n            elif b == 0:\n                print(abs(half_duration - (a + c*3)))\n            elif c == 0:\n                print(abs(half_duration - (a + b*2)))\n            else:\n                min_diff = min(abs(half_duration - (a + b*2 + c*3)), abs(half_duration - (a + 2*b + c*3)), abs(half_duration - (a + 2*b + 3*c)))\n                print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 35)"}, "Round_1": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == 0:\n                print(abs(half_duration - (b*2 + c*3)))\n            elif b == 0:\n                print(abs(half_duration - (a + c*3)))\n            elif c == 0:\n                print(abs(half_duration - (a + b*2)))\n            else:\n                min_diff = min(abs(half_duration - (a + b*2 + c*3)), abs(half_duration - (a + 2*b + c*3)), abs(half_duration - (a + 2*b + 3*c)))\n                print(min_diff)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}", "Round_0": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if half_duration % 2 == 0:\n                    print(half_duration - total_duration // 2)\n                else:\n                    print(half_duration - total_duration // 2 + 1)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 33)"}, "Round_1": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            print(0)\n        else:\n            if a == b == c == 1:\n                print(1)\n            else:\n                if half_duration % 2 == 0:\n                    print(half_duration - total_duration // 2)\n                else:\n                    print(half_duration - total_duration // 2 + 1)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Calculate and output minimal possible difference\ncalculate_minimal_difference(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective lengths\",\n    \"Step 2\": \"Generate all possible combinations of songs for each concert\",\n    \"Step 3\": \"Calculate the duration of each concert for each combination\",\n    \"Step 4\": \"Find the combination that minimizes the absolute difference in duration between the two concerts\"\n  }\n}", "Round_0": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = float('inf')\n        for i in range(a+1):\n            for j in range(b+1):\n                for k in range(c+1):\n                    duration = i + 2*j + 3*k\n                    if duration <= half_duration:\n                        min_diff = min(min_diff, half_duration - duration)\n        \n        print(min_diff)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Output\ncalculate_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = float('inf')\n        for i in range(a+1):\n            for j in range(b+1):\n                for k in range(c+1):\n                    duration = i + 2*j + 3*k\n                    if duration <= half_duration:\n                        min_diff = min(min_diff, half_duration - duration)\n        \n        print(min_diff)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Output\ncalculate_minimal_difference(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective lengths\",\n    \"Step 2\": \"Generate all possible combinations of songs for each concert\",\n    \"Step 3\": \"Calculate the duration of each concert for each combination\",\n    \"Step 4\": \"Find the combination that minimizes the absolute difference in duration between the two concerts\"\n  }\n}", "Round_0": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = float('inf')\n        for x in range(a+1):\n            for y in range(b+1):\n                for z in range(c+1):\n                    duration = x + 2*y + 3*z\n                    if duration <= half_duration:\n                        min_diff = min(min_diff, half_duration - duration)\n        \n        print(min_diff)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Output\ncalculate_minimal_difference(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_minimal_difference(t, test_cases):\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = float('inf')\n        for x in range(a+1):\n            for y in range(b+1):\n                for z in range(c+1):\n                    duration = x + 2*y + 3*z\n                    if duration <= half_duration:\n                        min_diff = min(min_diff, half_duration - duration)\n        \n        print(min_diff)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    test_case = list(map(int, input().split()))\n    test_cases.append(test_case)\n\n# Output\ncalculate_minimal_difference(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum difference between the durations of the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c)\",\n    \"Step 3\": \"Calculate the total duration of all songs: total_duration = a + 2b + 3c\",\n    \"Step 4\": \"Initialize min_diff to a large value\",\n    \"Step 5\": \"Iterate through all possible combinations of distributing songs into two concerts\",\n    \"Step 6\": \"Calculate the duration of each concert and update min_diff if the absolute difference is smaller\",\n    \"Step 7\": \"Print the min_diff for each test case\"\n  }\n}", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    print(min_diff)\n"}}], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 10, "round": 126, "prompt": "Luntik has decided to try singing. He possesses a number of one-minute songs, b two-minute songs and c three-minute songs. He owns a collection of songs with a mix of lengths. These songs include b songs lasting two minutes. There are also c songs that last three minutes. He wants to distribute all songs into two concerts. Every song should be included to exactly one concert. \n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 67}
