{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He possesses a one-minute songs, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He aims to minimize the absolute difference between the lengths of the two concerts, with the duration of the concert being the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Any insight into the optimal distribution strategy would be greatly appreciated. Consider experimenting with different combinations to identify any potential patterns.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The target duration for each concert is half of the total duration\n        target_duration = total_duration // 2\n        \n        # We will use a dynamic programming approach to find the closest sum to target_duration\n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 1)\n            possible_sums.update(new_sums)\n        \n        # Add two-minute songs\n        for _ in range(b):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 2)\n            possible_sums.update(new_sums)\n        \n        # Add three-minute songs\n        for _ in range(c):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 3)\n            possible_sums.update(new_sums)\n        \n        # Find the closest sum to target_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "completions": ["def minimal_difference(t, test_cases):\n    results = []\n    \n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target = total_duration // 2\n        \n        # Dynamic programming approach\n        dp = [False] * (target + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(target, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(target, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(target, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest possible sum to the target\n        closest_sum = 0\n        for i in range(target, -1, -1):\n            if dp[i]:\n                closest_sum = i\n                break\n        \n        # Calculate the minimal possible difference\n        min_difference = abs(total_duration - 2 * closest_sum)\n        results.append(min_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n\n        # Dynamic programming approach to find the closest possible sum to target_duration\n        dp = [False] * (target_duration + 1)\n        dp[0] = True\n\n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(target_duration, 0, -1):\n                if j >= 1 and dp[j - 1]:\n                    dp[j] = True\n\n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(target_duration, 1, -1):\n                if j >= 2 and dp[j - 2]:\n                    dp[j] = True\n\n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(target_duration, 2, -1):\n                if j >= 3 and dp[j - 3]:\n                    dp[j] = True\n\n        # Find the closest possible sum to target_duration\n        closest_sum = max(i for i in range(target_duration + 1) if dp[i])\n\n        # Calculate the minimal possible difference\n        minimal_difference = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_difference)\n\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n        \n        # Initialize a set to store possible durations for one concert\n        possible_durations = {0}\n        \n        # Try to add one-minute songs\n        for _ in range(a):\n            new_durations = set()\n            for duration in possible_durations:\n                new_durations.add(duration + 1)\n            possible_durations.update(new_durations)\n        \n        # Try to add two-minute songs\n        for _ in range(b):\n            new_durations = set()\n            for duration in possible_durations:\n                new_durations.add(duration + 2)\n            possible_durations.update(new_durations)\n        \n        # Try to add three-minute songs\n        for _ in range(c):\n            new_durations = set()\n            for duration in possible_durations:\n                new_durations.add(duration + 3)\n            possible_durations.update(new_durations)\n        \n        # Find the closest possible duration to the target duration\n        closest_duration = min(possible_durations, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference\n        difference = abs(total_duration - 2 * closest_duration)\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The minimal possible difference is the remainder when total_duration is divided by 2\n        # This is because we can always split the songs to get as close as possible to half of the total_duration\n        min_difference = total_duration % 2\n        results.append(min_difference)\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n\n        # Use a greedy approach to find the closest sum to target_duration\n        possible_sums = {0}\n        for _ in range(a):\n            possible_sums = {x + 1 for x in possible_sums} | possible_sums\n        for _ in range(b):\n            possible_sums = {x + 2 for x in possible_sums} | possible_sums\n        for _ in range(c):\n            possible_sums = {x + 3 for x in possible_sums} | possible_sums\n\n        # Find the closest possible sum to target_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n        \n        # Initialize DP array\n        dp = [False] * (target_duration + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(target_duration, 0, -1):\n                if j >= 1 and dp[j - 1]:\n                    dp[j] = True\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(target_duration, 1, -1):\n                if j >= 2 and dp[j - 2]:\n                    dp[j] = True\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(target_duration, 2, -1):\n                if j >= 3 and dp[j - 3]:\n                    dp[j] = True\n        \n        # Find the closest possible duration to target_duration\n        for i in range(target_duration, -1, -1):\n            if dp[i]:\n                concert1_duration = i\n                break\n        \n        concert2_duration = total_duration - concert1_duration\n        difference = abs(concert1_duration - concert2_duration)\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Determine the target duration for each concert\n        target_duration = total_duration // 2\n        \n        # Dynamic programming approach to find the closest possible sum to the target duration\n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 1)\n            possible_sums.update(new_sums)\n        \n        # Add two-minute songs\n        for _ in range(b):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 2)\n            possible_sums.update(new_sums)\n        \n        # Add three-minute songs\n        for _ in range(c):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 3)\n            possible_sums.update(new_sums)\n        \n        # Find the closest possible sum to the target duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference between the two concerts\n        difference = abs(total_duration - 2 * closest_sum)\n        \n        # Store the result for the current test case\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n\n        # Use a greedy approach to find the closest sum to target_duration\n        # Start with the largest songs to minimize the difference\n        current_sum = 0\n        for _ in range(c):\n            if current_sum + 3 <= target_duration:\n                current_sum += 3\n        for _ in range(b):\n            if current_sum + 2 <= target_duration:\n                current_sum += 2\n        for _ in range(a):\n            if current_sum + 1 <= target_duration:\n                current_sum += 1\n\n        minimal_diff = abs(total_duration - 2 * current_sum)\n        results.append(minimal_diff)\n\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The goal is to split the total_duration into two parts with minimal difference\n        # We can achieve this by trying to get as close as possible to half of the total_duration\n        half_duration = total_duration // 2\n        \n        # Initialize a set to keep track of possible sums we can achieve\n        possible_sums = {0}\n        \n        # Try to add each song duration to the possible sums\n        for _ in range(a):\n            possible_sums.update({x + 1 for x in possible_sums})\n        for _ in range(b):\n            possible_sums.update({x + 2 for x in possible_sums})\n        for _ in range(c):\n            possible_sums.update({x + 3 for x in possible_sums})\n        \n        # Find the closest sum to half_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - half_duration))\n        \n        # Calculate the minimal difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The target duration for each concert is half of the total duration\n        target_duration = total_duration // 2\n        \n        # We will use a dynamic programming approach to find the closest sum to target_duration\n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 1)\n            possible_sums.update(new_sums)\n        \n        # Add two-minute songs\n        for _ in range(b):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 2)\n            possible_sums.update(new_sums)\n        \n        # Add three-minute songs\n        for _ in range(c):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 3)\n            possible_sums.update(new_sums)\n        \n        # Find the closest sum to target_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Sum the total minutes of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert.\",\n      \"details\": \"The target duration for each concert is half of the total duration, rounded down if necessary.\"\n    },\n    {\n      \"description\": \"Distribute songs to minimize the difference between concert durations.\",\n      \"details\": \"Use a strategy to distribute songs such that the absolute difference between the two concert durations is minimized.\"\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference.\",\n      \"details\": \"Compute the absolute difference between the durations of the two concerts after distribution.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases and the number of songs of each type for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Calculate total duration\",\n      \"details\": \"Compute the total duration of all songs using the formula provided in subproblem 1.\"\n    },\n    {\n      \"step\": \"Determine target duration\",\n      \"details\": \"Calculate the target duration for each concert as described in subproblem 2.\"\n    },\n    {\n      \"step\": \"Distribute songs\",\n      \"details\": \"Implement a strategy to distribute songs between the two concerts to minimize the difference, as outlined in subproblem 3.\"\n    },\n    {\n      \"step\": \"Calculate minimal difference\",\n      \"details\": \"Compute the minimal possible difference between the concert durations as described in subproblem 4.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"details\": \"Print the minimal possible difference for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The target duration for each concert is half of the total duration\n        target_duration = total_duration // 2\n        \n        # We will use a dynamic programming approach to find the closest sum to target_duration\n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 1)\n            possible_sums.update(new_sums)\n        \n        # Add two-minute songs\n        for _ in range(b):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 2)\n            possible_sums.update(new_sums)\n        \n        # Add three-minute songs\n        for _ in range(c):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 3)\n            possible_sums.update(new_sums)\n        \n        # Find the closest sum to target_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The target duration for each concert is half of the total duration\n        target_duration = total_duration // 2\n        \n        # We will use a dynamic programming approach to find the closest sum to target_duration\n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 1)\n            possible_sums.update(new_sums)\n        \n        # Add two-minute songs\n        for _ in range(b):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 2)\n            possible_sums.update(new_sums)\n        \n        # Add three-minute songs\n        for _ in range(c):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 3)\n            possible_sums.update(new_sums)\n        \n        # Find the closest sum to target_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs combined.\",\n      \"input\": \"Three integers a, b, c representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the total duration of all songs.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert to minimize the difference.\",\n      \"input\": \"The total duration of all songs.\",\n      \"output\": \"An integer representing half of the total duration (or the closest integer if the total is odd).\"\n    },\n    {\n      \"description\": \"Use a dynamic programming approach to find the closest possible sum to the target duration using the available songs.\",\n      \"input\": \"The number of each type of song (a, b, c) and the target duration.\",\n      \"output\": \"The closest possible sum to the target duration that can be achieved using the available songs.\"\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference between the two concerts.\",\n      \"input\": \"The total duration of all songs and the closest possible sum to the target duration.\",\n      \"output\": \"The minimal possible difference in minutes between the durations of the two concerts.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"Calculate the total duration of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\",\n    \"Determine the target duration for each concert as half of the total duration.\",\n    \"Implement a dynamic programming solution to find the closest possible sum to the target duration using the available songs.\",\n    \"Calculate the minimal possible difference as the absolute difference between the total duration and twice the closest possible sum.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    \n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target = total_duration // 2\n        \n        # Dynamic programming approach\n        dp = [False] * (target + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(target, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(target, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(target, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest possible sum to the target\n        closest_sum = 0\n        for i in range(target, -1, -1):\n            if dp[i]:\n                closest_sum = i\n                break\n        \n        # Calculate the minimal possible difference\n        min_difference = abs(total_duration - 2 * closest_sum)\n        results.append(min_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    \n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target = total_duration // 2\n        \n        # Dynamic programming approach\n        dp = [False] * (target + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(target, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(target, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(target, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest possible sum to the target\n        closest_sum = 0\n        for i in range(target, -1, -1):\n            if dp[i]:\n                closest_sum = i\n                break\n        \n        # Calculate the minimal possible difference\n        min_difference = abs(total_duration - 2 * closest_sum)\n        results.append(min_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs combined.\",\n      \"input\": \"Three integers a, b, c representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"An integer representing the total duration of all songs.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert to minimize the difference.\",\n      \"input\": \"The total duration of all songs.\",\n      \"output\": \"An integer representing half of the total duration (or the closest integer if the total is odd).\"\n    },\n    {\n      \"description\": \"Use a dynamic programming approach to find the closest possible sum to the target duration using the available songs.\",\n      \"input\": \"The number of each type of song (a, b, c) and the target duration.\",\n      \"output\": \"The closest possible sum to the target duration that can be achieved using the available songs.\"\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference between the two concerts.\",\n      \"input\": \"The total duration of all songs and the closest possible sum to the target duration.\",\n      \"output\": \"The minimal possible difference in minutes between the durations of the two concerts.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  Calculate the total duration of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\",\n    \"  Determine the target duration for each concert as half of the total duration.\",\n    \"  Implement a dynamic programming solution to find the closest possible sum to the target duration using the available songs.\",\n    \"  Calculate the minimal possible difference as the absolute difference between the total duration and twice the closest possible sum.\",\n    \"  Output the minimal possible difference for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n\n        # Dynamic programming approach to find the closest possible sum to target_duration\n        dp = [False] * (target_duration + 1)\n        dp[0] = True\n\n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(target_duration, 0, -1):\n                if j >= 1 and dp[j - 1]:\n                    dp[j] = True\n\n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(target_duration, 1, -1):\n                if j >= 2 and dp[j - 2]:\n                    dp[j] = True\n\n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(target_duration, 2, -1):\n                if j >= 3 and dp[j - 3]:\n                    dp[j] = True\n\n        # Find the closest possible sum to target_duration\n        closest_sum = max(i for i in range(target_duration + 1) if dp[i])\n\n        # Calculate the minimal possible difference\n        minimal_difference = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_difference)\n\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n\n        # Dynamic programming approach to find the closest possible sum to target_duration\n        dp = [False] * (target_duration + 1)\n        dp[0] = True\n\n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(target_duration, 0, -1):\n                if j >= 1 and dp[j - 1]:\n                    dp[j] = True\n\n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(target_duration, 1, -1):\n                if j >= 2 and dp[j - 2]:\n                    dp[j] = True\n\n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(target_duration, 2, -1):\n                if j >= 3 and dp[j - 3]:\n                    dp[j] = True\n\n        # Find the closest possible sum to target_duration\n        closest_sum = max(i for i in range(target_duration + 1) if dp[i])\n\n        # Calculate the minimal possible difference\n        minimal_difference = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_difference)\n\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs combined.\",\n      \"details\": \"Given the number of one-minute, two-minute, and three-minute songs, calculate the total duration by summing up the products of the number of songs and their respective durations.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert.\",\n      \"details\": \"The target duration for each concert is half of the total duration. This is the ideal duration for minimizing the difference between the two concerts.\"\n    },\n    {\n      \"description\": \"Implement a strategy to distribute songs between two concerts.\",\n      \"details\": \"Use a dynamic programming approach or a greedy strategy to distribute songs such that the absolute difference between the two concerts' durations is minimized.\"\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference.\",\n      \"details\": \"After distributing the songs, calculate the absolute difference between the durations of the two concerts.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Parse the number of one-minute, two-minute, and three-minute songs.\",\n    \"  - Calculate the total duration of all songs.\",\n    \"  - Determine the target duration for each concert.\",\n    \"  - Distribute the songs between two concerts using an optimal strategy.\",\n    \"  - Calculate the minimal possible difference between the two concerts' durations.\",\n    \"  - Store the result for the current test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n        \n        # Initialize a set to store possible durations for one concert\n        possible_durations = {0}\n        \n        # Try to add one-minute songs\n        for _ in range(a):\n            new_durations = set()\n            for duration in possible_durations:\n                new_durations.add(duration + 1)\n            possible_durations.update(new_durations)\n        \n        # Try to add two-minute songs\n        for _ in range(b):\n            new_durations = set()\n            for duration in possible_durations:\n                new_durations.add(duration + 2)\n            possible_durations.update(new_durations)\n        \n        # Try to add three-minute songs\n        for _ in range(c):\n            new_durations = set()\n            for duration in possible_durations:\n                new_durations.add(duration + 3)\n            possible_durations.update(new_durations)\n        \n        # Find the closest possible duration to the target duration\n        closest_duration = min(possible_durations, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference\n        difference = abs(total_duration - 2 * closest_duration)\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n        \n        # Initialize a set to store possible durations for one concert\n        possible_durations = {0}\n        \n        # Try to add one-minute songs\n        for _ in range(a):\n            new_durations = set()\n            for duration in possible_durations:\n                new_durations.add(duration + 1)\n            possible_durations.update(new_durations)\n        \n        # Try to add two-minute songs\n        for _ in range(b):\n            new_durations = set()\n            for duration in possible_durations:\n                new_durations.add(duration + 2)\n            possible_durations.update(new_durations)\n        \n        # Try to add three-minute songs\n        for _ in range(c):\n            new_durations = set()\n            for duration in possible_durations:\n                new_durations.add(duration + 3)\n            possible_durations.update(new_durations)\n        \n        # Find the closest possible duration to the target duration\n        closest_duration = min(possible_durations, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference\n        difference = abs(total_duration - 2 * closest_duration)\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Sum the total minutes of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert.\",\n      \"details\": \"The target duration for each concert is half of the total duration. If the total duration is odd, one concert will have one more minute than the other.\"\n    },\n    {\n      \"description\": \"Find the optimal distribution of songs.\",\n      \"details\": \"Use a strategy to distribute songs such that the absolute difference between the two concerts' durations is minimized.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data.\",\n      \"details\": \"Parse the number of test cases and the number of songs of each type for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Calculate total duration.\",\n      \"details\": \"Compute the total duration of all songs using the formula provided in the subproblems.\"\n    },\n    {\n      \"step\": \"Determine target duration for concerts.\",\n      \"details\": \"Calculate the target duration for each concert as half of the total duration.\"\n    },\n    {\n      \"step\": \"Distribute songs optimally.\",\n      \"details\": \"Implement a strategy to distribute songs between the two concerts to minimize the absolute difference in their durations.\"\n    },\n    {\n      \"step\": \"Output the minimal possible difference.\",\n      \"details\": \"For each test case, print the minimal possible difference in minutes between the concerts' durations.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The minimal possible difference is the remainder when total_duration is divided by 2\n        # This is because we can always split the songs to get as close as possible to half of the total_duration\n        min_difference = total_duration % 2\n        results.append(min_difference)\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Sum the total minutes of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert.\",\n      \"details\": \"The target duration for each concert is half of the total duration, rounded down if necessary.\"\n    },\n    {\n      \"description\": \"Find the optimal distribution of songs.\",\n      \"details\": \"Use a strategy to distribute songs such that the absolute difference between the two concerts' durations is minimized.\"\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference.\",\n      \"details\": \"Compute the absolute difference between the durations of the two concerts after distribution.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data.\",\n      \"details\": \"Parse the number of test cases and the number of songs for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Calculate total duration of songs.\",\n      \"details\": \"Use the formula: total_duration = a * 1 + b * 2 + c * 3.\"\n    },\n    {\n      \"step\": \"Determine target duration for each concert.\",\n      \"details\": \"Calculate target_duration = total_duration // 2.\"\n    },\n    {\n      \"step\": \"Distribute songs optimally.\",\n      \"details\": \"Implement a strategy to distribute songs to minimize the difference between concert durations.\"\n    },\n    {\n      \"step\": \"Calculate minimal possible difference.\",\n      \"details\": \"Compute the absolute difference between the two concerts' durations.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print the minimal possible difference for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n\n        # Dynamic programming approach to find the closest sum to target_duration\n        possible_sums = {0}\n        for _ in range(a):\n            possible_sums = {x + 1 for x in possible_sums} | possible_sums\n        for _ in range(b):\n            possible_sums = {x + 2 for x in possible_sums} | possible_sums\n        for _ in range(c):\n            possible_sums = {x + 3 for x in possible_sums} | possible_sums\n\n        # Find the closest possible sum to target_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n\n        # Use a greedy approach to find the closest sum to target_duration\n        possible_sums = {0}\n        for _ in range(a):\n            possible_sums = {x + 1 for x in possible_sums} | possible_sums\n        for _ in range(b):\n            possible_sums = {x + 2 for x in possible_sums} | possible_sums\n        for _ in range(c):\n            possible_sums = {x + 3 for x in possible_sums} | possible_sums\n\n        # Find the closest possible sum to target_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs combined.\",\n      \"input\": \"Three integers a, b, c representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"Total duration of all songs.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert to minimize the difference.\",\n      \"input\": \"Total duration of all songs.\",\n      \"output\": \"Target duration for each concert, which is half of the total duration.\"\n    },\n    {\n      \"description\": \"Implement a strategy to distribute songs between two concerts to achieve the target duration as closely as possible.\",\n      \"input\": \"Number of one-minute, two-minute, and three-minute songs (a, b, c) and target duration.\",\n      \"output\": \"Distribution of songs between two concerts.\"\n    },\n    {\n      \"description\": \"Calculate the actual durations of the two concerts based on the distribution.\",\n      \"input\": \"Distribution of songs between two concerts.\",\n      \"output\": \"Actual durations of the two concerts.\"\n    },\n    {\n      \"description\": \"Compute the absolute difference between the durations of the two concerts.\",\n      \"input\": \"Actual durations of the two concerts.\",\n      \"output\": \"Minimal possible difference in minutes between the concerts' durations.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"Calculate the total duration of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\",\n    \"Determine the target duration for each concert as half of the total duration.\",\n    \"Implement a dynamic programming or greedy approach to distribute songs between two concerts to achieve the target duration as closely as possible.\",\n    \"Calculate the actual durations of the two concerts based on the distribution.\",\n    \"Compute the absolute difference between the durations of the two concerts.\",\n    \"Output the minimal possible difference for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n        \n        # Initialize DP array\n        dp = [False] * (target_duration + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(target_duration, 0, -1):\n                if j >= 1 and dp[j - 1]:\n                    dp[j] = True\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(target_duration, 1, -1):\n                if j >= 2 and dp[j - 2]:\n                    dp[j] = True\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(target_duration, 2, -1):\n                if j >= 3 and dp[j - 3]:\n                    dp[j] = True\n        \n        # Find the closest possible duration to target_duration\n        for i in range(target_duration, -1, -1):\n            if dp[i]:\n                concert1_duration = i\n                break\n        \n        concert2_duration = total_duration - concert1_duration\n        difference = abs(concert1_duration - concert2_duration)\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n        \n        # Initialize DP array\n        dp = [False] * (target_duration + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(target_duration, 0, -1):\n                if j >= 1 and dp[j - 1]:\n                    dp[j] = True\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(target_duration, 1, -1):\n                if j >= 2 and dp[j - 2]:\n                    dp[j] = True\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(target_duration, 2, -1):\n                if j >= 3 and dp[j - 3]:\n                    dp[j] = True\n        \n        # Find the closest possible duration to target_duration\n        for i in range(target_duration, -1, -1):\n            if dp[i]:\n                concert1_duration = i\n                break\n        \n        concert2_duration = total_duration - concert1_duration\n        difference = abs(concert1_duration - concert2_duration)\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs combined.\",\n      \"input\": \"Three integers a, b, c representing the number of one-minute, two-minute, and three-minute songs.\",\n      \"output\": \"Total duration of all songs.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert to minimize the difference.\",\n      \"input\": \"Total duration of all songs.\",\n      \"output\": \"Target duration for each concert.\"\n    },\n    {\n      \"description\": \"Use a dynamic programming approach to find the closest possible sum to the target duration using the available songs.\",\n      \"input\": \"Number of each type of song and their durations.\",\n      \"output\": \"Closest possible sum to the target duration.\"\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference between the two concerts.\",\n      \"input\": \"Total duration of all songs and the closest possible sum to the target duration.\",\n      \"output\": \"Minimal possible difference between the two concerts.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  1. Parse the input to get the number of one-minute, two-minute, and three-minute songs.\",\n    \"  2. Calculate the total duration of all songs.\",\n    \"  3. Determine the target duration for each concert, which is half of the total duration.\",\n    \"  4. Implement a dynamic programming solution to find the closest possible sum to the target duration using the available songs.\",\n    \"  5. Calculate the minimal possible difference between the two concerts using the closest possible sum.\",\n    \"  6. Store the result for the current test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Determine the target duration for each concert\n        target_duration = total_duration // 2\n        \n        # Dynamic programming approach to find the closest possible sum to the target duration\n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 1)\n            possible_sums.update(new_sums)\n        \n        # Add two-minute songs\n        for _ in range(b):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 2)\n            possible_sums.update(new_sums)\n        \n        # Add three-minute songs\n        for _ in range(c):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 3)\n            possible_sums.update(new_sums)\n        \n        # Find the closest possible sum to the target duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference between the two concerts\n        difference = abs(total_duration - 2 * closest_sum)\n        \n        # Store the result for the current test case\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Determine the target duration for each concert\n        target_duration = total_duration // 2\n        \n        # Dynamic programming approach to find the closest possible sum to the target duration\n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 1)\n            possible_sums.update(new_sums)\n        \n        # Add two-minute songs\n        for _ in range(b):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 2)\n            possible_sums.update(new_sums)\n        \n        # Add three-minute songs\n        for _ in range(c):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 3)\n            possible_sums.update(new_sums)\n        \n        # Find the closest possible sum to the target duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference between the two concerts\n        difference = abs(total_duration - 2 * closest_sum)\n        \n        # Store the result for the current test case\n        results.append(difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Sum the total minutes of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert.\",\n      \"details\": \"The target duration for each concert is half of the total duration, rounded down if necessary.\"\n    },\n    {\n      \"description\": \"Distribute songs to minimize the difference between concert durations.\",\n      \"details\": \"Use a strategy to distribute songs such that the absolute difference between the two concert durations is minimized.\"\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference.\",\n      \"details\": \"Compute the absolute difference between the durations of the two concerts after distribution.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data.\",\n      \"details\": \"Parse the number of test cases and the number of songs of each type for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Calculate total duration of songs.\",\n      \"details\": \"Use the formula: total_duration = a * 1 + b * 2 + c * 3.\"\n    },\n    {\n      \"step\": \"Determine target duration for each concert.\",\n      \"details\": \"Calculate target_duration = total_duration // 2.\"\n    },\n    {\n      \"step\": \"Distribute songs to minimize difference.\",\n      \"details\": \"Implement a strategy to distribute songs between two concerts to minimize the difference in their durations.\"\n    },\n    {\n      \"step\": \"Calculate and store the minimal possible difference.\",\n      \"details\": \"Compute the absolute difference between the two concert durations and store the result.\"\n    },\n    {\n      \"step\": \"Output results for all test cases.\",\n      \"details\": \"Print the minimal possible difference for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n\n        # Dynamic programming approach to find the closest sum to target_duration\n        possible_sums = {0}\n        for _ in range(a):\n            possible_sums.update({x + 1 for x in possible_sums})\n        for _ in range(b):\n            possible_sums.update({x + 2 for x in possible_sums})\n        for _ in range(c):\n            possible_sums.update({x + 3 for x in possible_sums})\n\n        # Find the closest possible sum to target_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n\n        # Use a greedy approach to find the closest sum to target_duration\n        # Start with the largest songs to minimize the difference\n        current_sum = 0\n        for _ in range(c):\n            if current_sum + 3 <= target_duration:\n                current_sum += 3\n        for _ in range(b):\n            if current_sum + 2 <= target_duration:\n                current_sum += 2\n        for _ in range(a):\n            if current_sum + 1 <= target_duration:\n                current_sum += 1\n\n        minimal_diff = abs(total_duration - 2 * current_sum)\n        results.append(minimal_diff)\n\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Sum the total minutes of songs by multiplying the number of songs by their respective durations: total_duration = a * 1 + b * 2 + c * 3.\"\n    },\n    {\n      \"description\": \"Determine possible distributions of songs between two concerts.\",\n      \"details\": \"Explore combinations of songs that can be split into two groups to minimize the difference in their total durations.\"\n    },\n    {\n      \"description\": \"Calculate the difference in durations between two concerts for each distribution.\",\n      \"details\": \"For each possible distribution, calculate the absolute difference between the total durations of the two concerts.\"\n    },\n    {\n      \"description\": \"Identify the minimal possible difference.\",\n      \"details\": \"Track the minimal difference encountered across all distributions and return this value for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the values of a, b, and c.\",\n    \"Calculate the total duration of all songs.\",\n    \"Generate all possible distributions of songs between two concerts.\",\n    \"For each distribution, calculate the absolute difference in durations between the two concerts.\",\n    \"Track and output the minimal difference for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The goal is to split the total_duration into two parts with minimal difference\n        # We can achieve this by trying to get as close as possible to half of the total_duration\n        half_duration = total_duration // 2\n        \n        # Initialize a set to keep track of possible sums we can achieve\n        possible_sums = {0}\n        \n        # Try to add each song duration to the possible sums\n        for _ in range(a):\n            possible_sums.update({x + 1 for x in possible_sums})\n        for _ in range(b):\n            possible_sums.update({x + 2 for x in possible_sums})\n        for _ in range(c):\n            possible_sums.update({x + 3 for x in possible_sums})\n        \n        # Find the closest sum to half_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - half_duration))\n        \n        # Calculate the minimal difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The goal is to split the total_duration into two parts with minimal difference\n        # We can achieve this by trying to get as close as possible to half of the total_duration\n        half_duration = total_duration // 2\n        \n        # Initialize a set to keep track of possible sums we can achieve\n        possible_sums = {0}\n        \n        # Try to add each song duration to the possible sums\n        for _ in range(a):\n            possible_sums.update({x + 1 for x in possible_sums})\n        for _ in range(b):\n            possible_sums.update({x + 2 for x in possible_sums})\n        for _ in range(c):\n            possible_sums.update({x + 3 for x in possible_sums})\n        \n        # Find the closest sum to half_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - half_duration))\n        \n        # Calculate the minimal difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the total duration of all songs.\",\n      \"details\": \"Sum the total minutes of all songs using the formula: total_duration = a * 1 + b * 2 + c * 3.\"\n    },\n    {\n      \"description\": \"Determine the target duration for each concert.\",\n      \"details\": \"The target duration for each concert is half of the total duration, rounded down if necessary.\"\n    },\n    {\n      \"description\": \"Distribute songs to minimize the difference between concert durations.\",\n      \"details\": \"Use a strategy to distribute songs such that the absolute difference between the two concert durations is minimized.\"\n    },\n    {\n      \"description\": \"Calculate the minimal possible difference.\",\n      \"details\": \"Compute the absolute difference between the durations of the two concerts after distribution.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases and the number of songs of each type for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Calculate total duration\",\n      \"details\": \"Compute the total duration of all songs using the formula provided in subproblem 1.\"\n    },\n    {\n      \"step\": \"Determine target duration\",\n      \"details\": \"Calculate the target duration for each concert as described in subproblem 2.\"\n    },\n    {\n      \"step\": \"Distribute songs\",\n      \"details\": \"Implement a strategy to distribute songs between the two concerts to minimize the difference, as outlined in subproblem 3.\"\n    },\n    {\n      \"step\": \"Calculate minimal difference\",\n      \"details\": \"Compute the minimal possible difference between the concert durations as described in subproblem 4.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"details\": \"Print the minimal possible difference for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The target duration for each concert is half of the total duration\n        target_duration = total_duration // 2\n        \n        # We will use a dynamic programming approach to find the closest sum to target_duration\n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 1)\n            possible_sums.update(new_sums)\n        \n        # Add two-minute songs\n        for _ in range(b):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 2)\n            possible_sums.update(new_sums)\n        \n        # Add three-minute songs\n        for _ in range(c):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 3)\n            possible_sums.update(new_sums)\n        \n        # Find the closest sum to target_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # The target duration for each concert is half of the total duration\n        target_duration = total_duration // 2\n        \n        # We will use a dynamic programming approach to find the closest sum to target_duration\n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 1)\n            possible_sums.update(new_sums)\n        \n        # Add two-minute songs\n        for _ in range(b):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 2)\n            possible_sums.update(new_sums)\n        \n        # Add three-minute songs\n        for _ in range(c):\n            new_sums = set()\n            for s in possible_sums:\n                new_sums.add(s + 3)\n            possible_sums.update(new_sums)\n        \n        # Find the closest sum to target_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - target_duration))\n        \n        # Calculate the minimal possible difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index + 1])\n        c = int(data[index + 2])\n        test_cases.append((a, b, c))\n        index += 3\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n"}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 168, "prompt": "Luntik has decided to try singing. He possesses a one-minute songs, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He aims to minimize the absolute difference between the lengths of the two concerts, with the duration of the concert being the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Any insight into the optimal distribution strategy would be greatly appreciated. Consider experimenting with different combinations to identify any potential patterns.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 128}
