{"name": "1600_F. Party Organization", "description": "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "tags": ["brute force", "math", "probabilities"], "difficulty": 12, "id": 1600, "sample_io": [{"input": "5 4\n1 2\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 4\n", "output": ["1 2 3 5 6\n"]}], "test_list": [{"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "10 8\n5 2\n1 8\n5 7\n1 9\n6 4\n2 7\n8 9\n3 10\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 9\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 0\n", "output": ["1 2 3 4 5\n"]}, {"input": "10 8\n2 7\n2 9\n7 9\n8 10\n5 3\n1 4\n10 6\n6 8\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 2\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "6 3\n1 4\n1 3\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "6 3\n1 2\n4 2\n5 2\n", "output": ["1 3 4 5 6\n"]}, {"input": "6 4\n1 4\n4 1\n2 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "7 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["1 2 4 6 7\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n2 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n5 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 3\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n2 4\n1 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "8 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 6\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 5\n4 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n2 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n2 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n1 6\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 5\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 6\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 2\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n1 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n5 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n1 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 2\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 4\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n1 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 1\n4 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 3\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n2 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n1 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n4 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 5\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 3\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n4 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n1 4\n1 5\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 4\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n4 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n1 3\n4 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n3 2\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n4 1\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n2 4\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 2\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n2 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}], "task_id": "codecontest/76", "repair_prompt": ["On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so. You should consider edge cases, such as when N is less than 5 or when there are no friendships at all.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list for the graph\n    graph = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        graph[U].add(V)\n        graph[V].add(U)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Check for an\nmain()", "completions": ["import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    people = list(range(1, N + 1))\n    \n    for group in combinations(people, 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for u in range(1, N + 1):\n            if len(friendships[u]) >= 4:\n                friends = list(friendships[u])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [u, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for u in range(1, N + 1):\n            if len(friendships[u]) < N - 1:\n                non_friends -= friendships[u]\n                non_friends.discard(u)\n                if len(non_friends) >= 5:\n                    return list(non_friends)[:5]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size_5()\n    if independent_set\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for friendships\n    friends = defaultdict(set)\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friends[U].add(V)\n        friends[V].add(U)\n    \n    # Check for a clique of 5 people (all friends with each other)\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friends[person]) >= 4:\n                potential_clique = [person] + list(friends[person])\n                if len(potential_clique) >= 5:\n                    for i in range(5):\n                        for j in range(i + 1, 5):\n                            if potential_clique[j] not in friends[potential_clique[i]]:\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        return potential_clique[:5]\n        return None\n    \n    # Check for an independent set of 5 people (no two are friends)\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) < 5:\n                break\n            non_friends -= friends[person]\n            non_friends.discard(person)\n            if len(non_friends) >= 5:\n                return list(non_friends)[:5]\n        return None\n    \n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a complete subgraph of size 5 (clique)\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                f1, f2, f3, f4 = friends[i], friends[j], friends[k], friends[l]\n                                if (f2 in friendships[f1] and f3 in friendships[f1] and f4 in friendships[f1] and\n                                    f3 in friendships[f2] and f4 in friendships[f2] and\n                                    f4 in friendships[f3]):\n                                    return [person, f1, f2, f3, f4]\n        return None\n    \n    # Check for a group of 5 people with no friendships\n    def find_independent_set_of_size_5():\n        non_friends = [i for i in range(1, N + 1) if len(friendships[i]) == 0]\n        if len(non_friends) >= 5:\n            return non_friends[:5]\n        \n        # Check for a set of 5 people with no mutual friendships\n        for a in range(1, N + 1):\n            for b in range(a + 1, N + 1):\n                if b in friendships[a]:\n                    continue\n                for c in range(b + 1, N + 1):\n                    if c in friendships[a] or c in friendships[b]:\n                        continue\n                    for d in range(c + 1, N + 1):\n                        if d in\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list\n    adj_list = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        adj_list[U].add(V)\n        adj_list[V].add(U)\n    \n    # Function to find a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(adj_list[person]) >= 4:\n                friends = list(adj_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in adj_list[friends[j]] and\n                                    friends[i] in adj_list[friends[k]] and\n                                    friends[i] in adj_list[friends[l]] and\n                                    friends[j] in adj_list[friends[k]] and\n                                    friends[j] in adj_list[friends[l]] and\n                                    friends[k] in adj_list[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) >= 5:\n                independent_set = list(non_friends)[:5]\n                if all(independent_set[i] not in adj_list[independent_set[j]] for i in range(5) for j in range(i + 1, 5)):\n                    return independent_set\n            non_friends -= adj_list[person]\n        return None\n    \n    # Check for clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str,\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    if M == 0:\n        if N >= 5:\n            print(1, 2, 3, 4, 5)\n        else:\n            print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                return [person, non_friends[0], non_friends[1], non_friends[2], non_friends[3]]\n        return None\n    \n    clique = find_clique()\n    if clique:\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.add((u, v))\n        friendships.add((v, u))\n        index += 2\n    \n    # Check for a fully connected group of 5 friends\n    for group in combinations(range(1, N + 1), 5):\n        if all((group[i], group[j]) in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(' '.join(map(str, group)))\n            return\n    \n    # Check for a group of 5 people with no friendships\n    for group in combinations(range(1, N + 1), 5):\n        if all((group[i], group[j]) not in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(' '.join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    if M == 0:\n        if N >= 5:\n            print(1, 2, 3, 4, 5)\n        else:\n            print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    clique = find_clique()\n    if clique:\n        print(*clique)\n        return\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    from collections import defaultdict\n\n    data = input().strip().split()\n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships[U].add(V)\n        friendships[V].add(U)\n        index += 2\n    \n    # Check for a clique of 5\n    for person in range(1, N + 1):\n        if len(friendships[person]) >= 4:\n            friends = list(friendships[person])\n            for i in range(len(friends)):\n                for j in range(i + 1, len(friends)):\n                    for k in range(j + 1, len(friends)):\n                        for l in range(k + 1, len(friends)):\n                            if (friends[i] in friendships[friends[j]] and\n                                friends[i] in friendships[friends[k]] and\n                                friends[i] in friendships[friends[l]] and\n                                friends[j] in friendships[friends[k]] and\n                                friends[j] in friendships[friends[l]] and\n                                friends[k] in friendships[friends[l]]):\n                                print(person, friends[i], friends[j], friends[k], friends[l])\n                                return\n    \n    # Check for a group of 5 with no friendships\n    if M == 0:\n        print(1, 2, 3, 4, 5)\n        return\n    \n    # Try to find 5 people with no friendships\n    non_friends = set(range(1, N + 1))\n    for person in range(1, N + 1):\n        if len(friendships[person]) < N - 1:\n            possible_group = non_friends - friendships[person] - {person}\n            if len(possible_group) >= 4:\n                group = list(possible_group)[:4]\n                print(person, *group)\n                return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list for the graph\n    graph = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        graph[U].add(V)\n        graph[V].add(U)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Check for an\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people. If N < 5, immediately return -1.\",\n      \"output\": \"Boolean indicating if a party is possible based on the number of people.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Search for a clique of size 5 in the graph where all 5 people are friends with each other.\",\n      \"output\": \"List of 5 people if such a clique exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Search for an independent set of size 5 in the graph where no two people are friends with each other.\",\n      \"output\": \"List of 5 people if such an independent set exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Determine if either a clique or an independent set of size 5 was found. If found, output the list of 5 people. If neither is found, output -1.\",\n      \"output\": \"List of 5 people for a successful party or -1 if not possible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendship pairs.\",\n    \"Check if N is less than 5. If so, print -1 and exit.\",\n    \"Construct a graph using an adjacency list to represent friendships.\",\n    \"Implement a function to find a clique of size 5 in the graph.\",\n    \"Implement a function to find an independent set of size 5 in the graph.\",\n    \"Check the results of the clique and independent set functions.\",\n    \"If a valid set of 5 people is found, print their indices. Otherwise, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list for the graph\n    graph = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        graph[U].add(V)\n        graph[V].add(U)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Check for an", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 105)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list for the graph\n    graph = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        graph[U].add(V)\n        graph[V].add(U)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Check for an", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"details\": \"Read the first line to get N and M. Then read the next M lines to get the pairs of friends.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with 5 people.\",\n      \"details\": \"If N < 5, immediately return -1 as it's impossible to have a party with 5 people.\"\n    },\n    {\n      \"description\": \"Identify potential groups of 5 people.\",\n      \"details\": \"Generate combinations of 5 people from the list of N people.\"\n    },\n    {\n      \"description\": \"Check each group of 5 people for the party conditions.\",\n      \"details\": \"For each combination, check if all 5 people are friends with each other or if no two people are friends with each other.\"\n    },\n    {\n      \"description\": \"Output the result.\",\n      \"details\": \"If a successful party is found, print the 5 people. If no successful party is found after checking all combinations, print -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendship pairs.\",\n    \"Check if N is less than 5. If true, print -1 and exit.\",\n    \"Generate all possible combinations of 5 people from the list of N people.\",\n    \"For each combination, check if all members are friends with each other or if none are friends with each other.\",\n    \"If a valid combination is found, print the 5 people and exit.\",\n    \"If no valid combination is found after checking all, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    people = list(range(1, N + 1))\n    \n    for group in combinations(people, 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), the number of friendships (M), and the list of friendships.\",\n      \"details\": \"Read the first line to get N and M. Then read the next M lines to get the pairs of friends.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with all 5 people being friends.\",\n      \"details\": \"Identify any complete subgraph of 5 nodes (a clique) in the friendship graph.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with no two people being friends.\",\n      \"details\": \"Identify any set of 5 nodes where no two nodes are connected by an edge in the friendship graph.\"\n    },\n    {\n      \"description\": \"Handle edge cases where a successful party is impossible.\",\n      \"details\": \"If N < 5, immediately return -1. If M = 0, check if N >= 5 to return any 5 people, otherwise return -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"If N < 5, print -1 and exit.\",\n    \"Construct a graph representation using adjacency lists or matrices based on the friendships.\",\n    \"Search for a clique of size 5 in the graph. If found, print the 5 people and exit.\",\n    \"Search for an independent set of size 5 in the graph. If found, print the 5 people and exit.\",\n    \"If neither a clique nor an independent set of size 5 is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for u in range(1, N + 1):\n            if len(friendships[u]) >= 4:\n                friends = list(friendships[u])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [u, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for u in range(1, N + 1):\n            if len(friendships[u]) < N - 1:\n                non_friends -= friendships[u]\n                non_friends.discard(u)\n                if len(non_friends) >= 5:\n                    return list(non_friends)[:5]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size_5()\n    if independent_set", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 63)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for u in range(1, N + 1):\n            if len(friendships[u]) >= 4:\n                friends = list(friendships[u])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[j] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[i]] and\n                                    friends[l] in friendships[friends[i]] and\n                                    friends[k] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[j]] and\n                                    friends[l] in friendships[friends[k]]):\n                                    return [u, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for u in range(1, N + 1):\n            if len(friendships[u]) < N - 1:\n                non_friends -= friendships[u]\n                non_friends.discard(u)\n                if len(non_friends) >= 5:\n                    return list(non_friends)[:5]\n                non_friends = set(range(1, N + 1))\n        return None\n    \n    # Try to find a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set of size 5\n    independent_set = find_independent_set_of_size_5()\n    if independent_set"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"input\": \"Raw input data\",\n      \"output\": \"N, M, and a list of tuples representing friendships\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with all 5 people being friends.\",\n      \"input\": \"N, M, and the list of friendships\",\n      \"output\": \"A list of 5 people who are all friends or an indication that such a group doesn't exist\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with no two people being friends.\",\n      \"input\": \"N, M, and the list of friendships\",\n      \"output\": \"A list of 5 people who are not friends with each other or an indication that such a group doesn't exist\"\n    },\n    {\n      \"description\": \"Determine the final output based on the results of the previous checks.\",\n      \"input\": \"Results from the previous subproblems\",\n      \"output\": \"5 numbers indicating the people to invite or -1 if no successful party is possible\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendships.\",\n    \"Create a data structure to represent friendships, such as an adjacency list or matrix.\",\n    \"Check for a clique of 5 people (all friends with each other) using the friendship data structure.\",\n    \"If a clique is found, output the 5 people.\",\n    \"If no clique is found, check for an independent set of 5 people (no two are friends) using the friendship data structure.\",\n    \"If an independent set is found, output the 5 people.\",\n    \"If neither a clique nor an independent set is found, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for friendships\n    friends = defaultdict(set)\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friends[U].add(V)\n        friends[V].add(U)\n    \n    # Check for a clique of 5 people (all friends with each other)\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friends[person]) >= 4:\n                potential_clique = [person] + list(friends[person])\n                if len(potential_clique) >= 5:\n                    for i in range(5):\n                        for j in range(i + 1, 5):\n                            if potential_clique[j] not in friends[potential_clique[i]]:\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        return potential_clique[:5]\n        return None\n    \n    # Check for an independent set of 5 people (no two are friends)\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) < 5:\n                break\n            non_friends -= friends[person]\n            non_friends.discard(person)\n            if len(non_friends) >= 5:\n                return list(non_friends)[:5]\n        return None\n    \n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Check if a successful party is possible with all attendees being friends.\",\n      \"steps\": [\n        \"If N < 5, immediately return -1 as it's impossible to form a party.\",\n        \"Create a graph representation using adjacency lists for friendships.\",\n        \"Check for any complete subgraph (clique) of size 5 in the graph.\"\n      ]\n    },\n    {\n      \"description\": \"Check if a successful party is possible with no attendees being friends.\",\n      \"steps\": [\n        \"If N >= 5, check if there are at least 5 people with no friendships.\",\n        \"Identify any group of 5 people who are not connected by any friendship.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the checks.\",\n      \"steps\": [\n        \"If a successful party configuration is found, output the 5 people.\",\n        \"If no configuration is found, output -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and friendship pairs.\",\n    \"Create a graph representation of friendships.\",\n    \"Check for a complete subgraph of size 5 (all friends).\",\n    \"Check for a group of 5 people with no friendships.\",\n    \"Output the result based on the checks.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a complete subgraph of size 5 (clique)\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                f1, f2, f3, f4 = friends[i], friends[j], friends[k], friends[l]\n                                if (f2 in friendships[f1] and f3 in friendships[f1] and f4 in friendships[f1] and\n                                    f3 in friendships[f2] and f4 in friendships[f2] and\n                                    f4 in friendships[f3]):\n                                    return [person, f1, f2, f3, f4]\n        return None\n    \n    # Check for a group of 5 people with no friendships\n    def find_independent_set_of_size_5():\n        non_friends = [i for i in range(1, N + 1) if len(friendships[i]) == 0]\n        if len(non_friends) >= 5:\n            return non_friends[:5]\n        \n        # Check for a set of 5 people with no mutual friendships\n        for a in range(1, N + 1):\n            for b in range(a + 1, N + 1):\n                if b in friendships[a]:\n                    continue\n                for c in range(b + 1, N + 1):\n                    if c in friendships[a] or c in friendships[b]:\n                        continue\n                    for d in range(c + 1, N + 1):\n                        if d in", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 56)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a complete subgraph of size 5 (clique)\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                f1, f2, f3, f4 = friends[i], friends[j], friends[k], friends[l]\n                                if (f2 in friendships[f1] and f3 in friendships[f1] and f4 in friendships[f1] and\n                                    f3 in friendships[f2] and f4 in friendships[f2] and\n                                    f4 in friendships[f3]):\n                                    return [person, f1, f2, f3, f4]\n        return None\n    \n    # Check for a group of 5 people with no friendships\n    def find_independent_set_of_size_5():\n        non_friends = [i for i in range(1, N + 1) if len(friendships[i]) == 0]\n        if len(non_friends) >= 5:\n            return non_friends[:5]\n        \n        # Check for a set of 5 people with no mutual friendships\n        for a in range(1, N + 1):\n            for b in range(a + 1, N + 1):\n                if b in friendships[a]:\n                    continue\n                for c in range(b + 1, N + 1):\n                    if c in friendships[a] or c in friendships[b]:\n                        continue\n                    for d in range(c + 1, N + 1):\n                        if d in"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), the number of friendships (M), and the list of friendships.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people.\",\n      \"output\": \"Return -1 if N < 5, as it's impossible to have a party with fewer than 5 people.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"An adjacency list where each person points to a list of their friends.\"\n    },\n    {\n      \"description\": \"Search for a clique of size 5 in the graph, where all 5 people are friends with each other.\",\n      \"output\": \"Return the list of 5 people if such a clique is found.\"\n    },\n    {\n      \"description\": \"Search for an independent set of size 5 in the graph, where no two people are friends with each other.\",\n      \"output\": \"Return the list of 5 people if such an independent set is found.\"\n    },\n    {\n      \"description\": \"If neither a clique nor an independent set of size 5 is found, determine that it's impossible to organize a successful party.\",\n      \"output\": \"Return -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"Check if N is less than 5. If so, print -1 and exit.\",\n    \"Construct an adjacency list to represent the friendships as a graph.\",\n    \"Implement a function to search for a clique of size 5 in the graph.\",\n    \"Implement a function to search for an independent set of size 5 in the graph.\",\n    \"If a clique is found, print the 5 people in the clique.\",\n    \"If an independent set is found, print the 5 people in the independent set.\",\n    \"If neither is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list\n    adj_list = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        adj_list[U].add(V)\n        adj_list[V].add(U)\n    \n    # Function to find a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(adj_list[person]) >= 4:\n                friends = list(adj_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in adj_list[friends[j]] and\n                                    friends[i] in adj_list[friends[k]] and\n                                    friends[i] in adj_list[friends[l]] and\n                                    friends[j] in adj_list[friends[k]] and\n                                    friends[j] in adj_list[friends[l]] and\n                                    friends[k] in adj_list[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) >= 5:\n                independent_set = list(non_friends)[:5]\n                if all(independent_set[i] not in adj_list[independent_set[j]] for i in range(5) for j in range(i + 1, 5)):\n                    return independent_set\n            non_friends -= adj_list[person]\n        return None\n    \n    # Check for clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str,", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 60)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list\n    adj_list = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        adj_list[U].add(V)\n        adj_list[V].add(U)\n    \n    # Function to find a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(adj_list[person]) >= 4:\n                friends = list(adj_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in adj_list[friends[j]] and\n                                    friends[i] in adj_list[friends[k]] and\n                                    friends[i] in adj_list[friends[l]] and\n                                    friends[j] in adj_list[friends[k]] and\n                                    friends[j] in adj_list[friends[l]] and\n                                    friends[k] in adj_list[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) >= 5:\n                independent_set = list(non_friends)[:5]\n                if all(independent_set[i] not in adj_list[independent_set[j]] for i in range(5) for j in range(i + 1, 5)):\n                    return independent_set\n            non_friends -= adj_list[person]\n        return None\n    \n    # Check for clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str,"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"input\": \"Raw input data\",\n      \"output\": \"N, M, and a list of tuples representing friendships\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with all 5 people being friends with each other.\",\n      \"input\": \"List of friendships\",\n      \"output\": \"A list of 5 people who are all friends with each other or an indication that such a group doesn't exist\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with no two people being friends with each other.\",\n      \"input\": \"List of friendships\",\n      \"output\": \"A list of 5 people who are not friends with each other or an indication that such a group doesn't exist\"\n    },\n    {\n      \"description\": \"Handle edge cases where N is less than 5 or there are no friendships.\",\n      \"input\": \"N and M\",\n      \"output\": \"An indication that a successful party is impossible if N < 5 or if M = 0\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendships.\",\n    \"If N < 5, print -1 and exit as it's impossible to have a party.\",\n    \"If M = 0, check if N >= 5 and print any 5 people as they are all not friends with each other. If N < 5, print -1.\",\n    \"Create a graph representation of friendships using an adjacency list.\",\n    \"Check for a clique of size 5 (all 5 people are friends with each other) using the graph. If found, print the 5 people.\",\n    \"If no clique is found, check for an independent set of size 5 (no two people are friends with each other) using the graph. If found, print the 5 people.\",\n    \"If neither a clique nor an independent set of size 5 is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    if M == 0:\n        if N >= 5:\n            print(1, 2, 3, 4, 5)\n        else:\n            print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                return [person, non_friends[0], non_friends[1], non_friends[2], non_friends[3]]\n        return None\n    \n    clique = find_clique()\n    if clique:", "report": "The compilation output of the preceding code is: expected an indented block (<string>, line 66)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    if M == 0:\n        if N >= 5:\n            print(1, 2, 3, 4, 5)\n        else:\n            print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                return [person, non_friends[0], non_friends[1], non_friends[2], non_friends[3]]\n        return None\n    \n    clique = find_clique()\n    if clique:"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"input\": \"Raw input data\",\n      \"output\": \"Integers N, M and a list of tuples representing friendships\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with all 5 people being friends.\",\n      \"input\": \"List of friendships\",\n      \"output\": \"A boolean indicating if a fully connected group of 5 friends exists\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with no two people being friends.\",\n      \"input\": \"List of friendships\",\n      \"output\": \"A boolean indicating if a group of 5 people with no friendships exists\"\n    },\n    {\n      \"description\": \"Determine the output based on the results of the previous checks.\",\n      \"input\": \"Results from the checks for fully connected and non-connected groups\",\n      \"output\": \"List of 5 people for a successful party or -1 if not possible\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"If N is less than 5, immediately output -1 as it's impossible to form a party.\",\n    \"Create a graph representation of the friendships using an adjacency list.\",\n    \"Check for a fully connected group of 5 friends by iterating over all possible combinations of 5 people and checking if they are all friends.\",\n    \"If a fully connected group is found, output the list of 5 people.\",\n    \"If not found, check for a group of 5 people with no friendships by iterating over all possible combinations of 5 people and checking if none of them are friends.\",\n    \"If a non-connected group is found, output the list of 5 people.\",\n    \"If neither condition is met, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.add((u, v))\n        friendships.add((v, u))\n        index += 2\n    \n    # Check for a fully connected group of 5 friends\n    for group in combinations(range(1, N + 1), 5):\n        if all((group[i], group[j]) in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(' '.join(map(str, group)))\n            return\n    \n    # Check for a group of 5 people with no friendships\n    for group in combinations(range(1, N + 1), 5):\n        if all((group[i], group[j]) not in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(' '.join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"input\": \"Raw input data\",\n      \"output\": \"N, M, and a list of tuples representing friendships\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with all 5 people being friends with each other.\",\n      \"input\": \"List of friendships\",\n      \"output\": \"A list of 5 people who are all friends with each other or an indication that such a group does not exist\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with no two people being friends with each other.\",\n      \"input\": \"List of friendships\",\n      \"output\": \"A list of 5 people who are not friends with each other or an indication that such a group does not exist\"\n    },\n    {\n      \"description\": \"Handle edge cases where N is less than 5 or there are no friendships.\",\n      \"input\": \"N and M\",\n      \"output\": \"An indication that a successful party is impossible if N < 5 or M = 0\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"If N < 5, immediately output -1 as it's impossible to have a party.\",\n    \"If M = 0, check if N >= 5 and output any 5 people, otherwise output -1.\",\n    \"Create a graph representation of friendships using adjacency lists.\",\n    \"Check for a clique of size 5 (all 5 people are friends with each other) using the graph.\",\n    \"If a clique is found, output the 5 people in the clique.\",\n    \"If no clique is found, check for an independent set of size 5 (no two people are friends with each other) using the graph.\",\n    \"If an independent set is found, output the 5 people in the set.\",\n    \"If neither a clique nor an independent set is found, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    if M == 0:\n        if N >= 5:\n            print(1, 2, 3, 4, 5)\n        else:\n            print(-1)\n        return\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    clique = find_clique()\n    if clique:\n        print(*clique)\n        return", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"input\": \"Raw input data\",\n      \"output\": \"N, M, and a list of tuples representing friendships\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with all 5 people being friends with each other.\",\n      \"input\": \"N, M, and the list of friendships\",\n      \"output\": \"A list of 5 people who are all friends with each other or an indication that such a group doesn't exist\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a successful party with no two people being friends with each other.\",\n      \"input\": \"N, M, and the list of friendships\",\n      \"output\": \"A list of 5 people who are not friends with each other or an indication that such a group doesn't exist\"\n    },\n    {\n      \"description\": \"Handle edge cases where N is less than 5 or there are no friendships.\",\n      \"input\": \"N, M\",\n      \"output\": \"An indication that a successful party is impossible\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendships.\",\n    \"If N is less than 5, immediately output -1 as a successful party is impossible.\",\n    \"If M is 0, check if N is at least 5. If so, output any 5 people as they are all not friends with each other. Otherwise, output -1.\",\n    \"Create a graph representation of the friendships using an adjacency list.\",\n    \"For each person, check if they and four of their friends form a complete subgraph (clique) of 5 people. If found, output these 5 people.\",\n    \"If no clique of 5 is found, attempt to find 5 people such that no two are friends. This can be done by checking combinations of people who are not directly connected in the graph.\",\n    \"If either a clique or a non-connected group of 5 is found, output the group. If neither is found, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    from collections import defaultdict\n\n    data = input().strip().split()\n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships[U].add(V)\n        friendships[V].add(U)\n        index += 2\n    \n    # Check for a clique of 5\n    for person in range(1, N + 1):\n        if len(friendships[person]) >= 4:\n            friends = list(friendships[person])\n            for i in range(len(friends)):\n                for j in range(i + 1, len(friends)):\n                    for k in range(j + 1, len(friends)):\n                        for l in range(k + 1, len(friends)):\n                            if (friends[i] in friendships[friends[j]] and\n                                friends[i] in friendships[friends[k]] and\n                                friends[i] in friendships[friends[l]] and\n                                friends[j] in friendships[friends[k]] and\n                                friends[j] in friendships[friends[l]] and\n                                friends[k] in friendships[friends[l]]):\n                                print(person, friends[i], friends[j], friends[k], friends[l])\n                                return\n    \n    # Check for a group of 5 with no friendships\n    if M == 0:\n        print(1, 2, 3, 4, 5)\n        return\n    \n    # Try to find 5 people with no friendships\n    non_friends = set(range(1, N + 1))\n    for person in range(1, N + 1):\n        if len(friendships[person]) < N - 1:\n            possible_group = non_friends - friendships[person] - {person}\n            if len(possible_group) >= 4:\n                group = list(possible_group)[:4]\n                print(person, *group)\n                return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Check if it's possible to have a party with exactly 5 people. If N < 5, immediately return -1.\",\n      \"output\": \"Boolean indicating if a party is possible based on the number of people.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Search for a clique of size 5 in the graph where all 5 people are friends with each other.\",\n      \"output\": \"List of 5 people if such a clique exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Search for an independent set of size 5 in the graph where no two people are friends with each other.\",\n      \"output\": \"List of 5 people if such an independent set exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Determine if either a clique or an independent set of size 5 was found. If found, output the list of 5 people. If neither is found, output -1.\",\n      \"output\": \"List of 5 people for a successful party or -1 if not possible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendship pairs.\",\n    \"Check if N is less than 5. If so, print -1 and exit.\",\n    \"Construct a graph using an adjacency list to represent friendships.\",\n    \"Implement a function to find a clique of size 5 in the graph.\",\n    \"Implement a function to find an independent set of size 5 in the graph.\",\n    \"Check the results of the clique and independent set functions.\",\n    \"If a valid set of 5 people is found, print their indices. Otherwise, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list for the graph\n    graph = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        graph[U].add(V)\n        graph[V].add(U)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Check for an", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 105)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    if N < 5:\n        print(-1)\n        return\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list for the graph\n    graph = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        graph[U].add(V)\n        graph[V].add(U)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Check for an", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, false, true, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 219, "prompt": "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so. You should consider edge cases, such as when N is less than 5 or when there are no friendships at all.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "examples": "\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 29}
