{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "repair_prompt": ["Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Ensure your solution efficiently handles large values of n and optimizes for time complexity. Assume n is a positive integer and Petya's watering pattern is provided as an array of boolean values.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def flower_growth(test_cases):\n    results = []\n    for n, pattern in test_cases:\n        height = 1\n        previous_day_watered = False\n        consecutive_days_not_watered = 0\n        \n        for day in pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n                consecutive_days_not_watered = 0\n            else:\n                consecutive_days_not_watered += 1\n                if consecutive_days_not_watered == 2:\n                    height = -1\n                    break\n                previous_day_watered = False\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, pattern))\n    \n    results = flower_growth(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        previous_day_watered = False\n        flower_died = False\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Initialize the flower height\n        height = 1\n        dead = False\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 4  # Already added 1 for today, add 4 more to make it 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and watering_pattern[i - 1] == 0:\n                    dead = True\n                    break\n        \n        if dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_died = False\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def flower_growth(test_cases):\n    results = []\n    for n, pattern in test_cases:\n        height = 1\n        consecutive_no_water = 0\n        for i in range(n):\n            if pattern[i] == 1:\n                if i > 0 and pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_no_water = 0\n            else:\n                consecutive_no_water += 1\n                if consecutive_no_water == 2:\n                    height = -1\n                    break\n        results.append(height)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, pattern))\n    \n    results = flower_growth(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def calculate_flower_height(test_cases):\n    results = []\n    for n, watering_pattern in test_cases:\n        height = 1\n        previous_day_watered = False\n        flower_died = False\n\n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    break\n\n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, watering_pattern))\n    \n    results = calculate_flower_height(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def flower_growth(test_cases):\n    results = []\n    for n, pattern in test_cases:\n        height = 1\n        consecutive_unwatered_days = 0\n        \n        for i in range(n):\n            if pattern[i] == 1:\n                if i > 0 and pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, pattern))\n    \n    results = flower_growth(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def calculate_flower_height(test_cases):\n    results = []\n    for n, watering_pattern in test_cases:\n        height = 1\n        previous_day_watered = False\n        flower_died = False\n\n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    break\n\n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, watering_pattern))\n    \n    results = calculate_flower_height(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                consecutive_unwatered_days = 0\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n\nmain()", "def flower_growth(test_cases):\n    results = []\n    for n, pattern in test_cases:\n        height = 1\n        consecutive_no_water = 0\n        for i in range(n):\n            if pattern[i] == 1:\n                if i > 0 and pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_no_water = 0\n            else:\n                consecutive_no_water += 1\n                if consecutive_no_water == 2:\n                    height = -1\n                    break\n        results.append(height)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, pattern))\n    \n    results = flower_growth(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def flower_growth(test_cases):\n    results = []\n    for n, pattern in test_cases:\n        height = 1\n        previous_day_watered = False\n        consecutive_days_not_watered = 0\n        \n        for day in pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n                consecutive_days_not_watered = 0\n            else:\n                consecutive_days_not_watered += 1\n                if consecutive_days_not_watered == 2:\n                    height = -1\n                    break\n                previous_day_watered = False\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, pattern))\n    \n    results = flower_growth(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n and the array of integers representing the watering pattern.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the flower height to 1 centimeter.\",\n        \"Iterate over the watering pattern array:\",\n        \"If the flower is watered (a_i = 1), check if it was watered the previous day:\",\n        \"If yes, increase the height by 5 centimeters.\",\n        \"If no, increase the height by 1 centimeter.\",\n        \"If the flower is not watered (a_i = 0), check if it was not watered the previous day:\",\n        \"If yes, the flower dies, set height to -1 and break the loop.\",\n        \"If no, continue without changing the height.\"\n      ]\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"steps\": [\n        \"For each test case, print the final height of the flower or -1 if the flower died.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input data.\",\n    \"For each test case, simulate the growth of the flower based on the watering pattern.\",\n    \"Determine the final height of the flower or if it dies.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def flower_growth(test_cases):\n    results = []\n    for n, pattern in test_cases:\n        height = 1\n        previous_day_watered = False\n        consecutive_days_not_watered = 0\n        \n        for day in pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n                consecutive_days_not_watered = 0\n            else:\n                consecutive_days_not_watered += 1\n                if consecutive_days_not_watered == 2:\n                    height = -1\n                    break\n                previous_day_watered = False\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, pattern))\n    \n    results = flower_growth(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n and the array of integers representing the watering pattern.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the flower height to 1 centimeter.\",\n        \"Iterate over the watering pattern array:\",\n        \"If the flower is watered (a_i = 1), check if it was watered the previous day:\",\n        \"If yes, increase the height by 5 centimeters.\",\n        \"If no, increase the height by 1 centimeter.\",\n        \"If the flower is not watered (a_i = 0), check if it was not watered the previous day:\",\n        \"If yes, the flower dies, set height to -1 and break the loop.\",\n        \"If no, continue without changing the height.\"\n      ]\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"steps\": [\n        \"For each test case, print the final height of the flower or -1 if the flower died.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input data.\",\n    \"For each test case, simulate the growth of the flower based on the watering pattern.\",\n    \"Determine the final height of the flower or if it dies.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        previous_day_watered = False\n        flower_died = False\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the watering patterns for each test case.\",\n      \"details\": [\n        \"Read the number of test cases t.\",\n        \"For each test case, read the integer n representing the number of days.\",\n        \"Read the array of integers representing the watering pattern for n days.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"details\": [\n        \"Initialize the flower height to 1 centimeter at the start of each test case.\",\n        \"Iterate over the watering pattern array to update the flower height.\",\n        \"Check consecutive days to determine if the flower dies or grows by 5 centimeters.\",\n        \"If the flower is not watered for two consecutive days, mark it as dead.\"\n      ]\n    },\n    {\n      \"description\": \"Output the final height of the flower or -1 if the flower dies for each test case.\",\n      \"details\": [\n        \"After processing each test case, output the flower's height or -1 if it died.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input data to extract the number of test cases and watering patterns.\",\n    \"For each test case, initialize the flower height and simulate its growth based on the watering pattern.\",\n    \"Check for consecutive days without watering to determine if the flower dies.\",\n    \"Calculate the final height of the flower for each test case and output the result.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Initialize the flower height\n        height = 1\n        dead = False\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 4  # Already added 1 for today, add 4 more to make it 5\n                else:\n                    height += 1\n            else:\n                if i > 0 and watering_pattern[i - 1] == 0:\n                    dead = True\n                    break\n        \n        if dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the corresponding data for each test case.\",\n      \"details\": \"Read the number of test cases t. For each test case, read the integer n and the array of integers representing the watering pattern.\"\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"details\": \"Initialize the flower height to 1 cm. Iterate over the watering pattern array and update the flower height according to the rules provided.\"\n    },\n    {\n      \"description\": \"Determine if the flower dies during the simulation.\",\n      \"details\": \"Track consecutive days without watering. If there are two consecutive days without watering, mark the flower as dead and set the height to -1.\"\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"details\": \"After processing each test case, print the resulting height or -1 if the flower died.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t from standard input.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the integer n and the array of integers representing the watering pattern.\",\n    \"  b. Initialize the flower height to 1 cm.\",\n    \"  c. Initialize a counter for consecutive unwatered days.\",\n    \"  d. Iterate over the watering pattern array:\",\n    \"     i. If the current day is watered (a_i = 1), reset the consecutive unwatered days counter.\",\n    \"        - If the previous day was also watered, increase the height by 5 cm.\",\n    \"        - Otherwise, increase the height by 1 cm.\",\n    \"     ii. If the current day is not watered (a_i = 0), increment the consecutive unwatered days counter.\",\n    \"        - If the counter reaches 2, set the height to -1 and break the loop.\",\n    \"  e. After processing the array, store the final height or -1 if the flower died.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        flower_died = False\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the corresponding data for each test case.\",\n      \"details\": \"Read the number of test cases t. For each test case, read the integer n and the array of integers representing the watering pattern.\"\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"details\": \"Initialize the flower height to 1 cm. Iterate over the watering pattern and update the height according to the rules provided. Track consecutive days without water to determine if the flower dies.\"\n    },\n    {\n      \"description\": \"Determine the final height of the flower or if it dies for each test case.\",\n      \"details\": \"If the flower is not watered for two consecutive days, set the result to -1 for that test case. Otherwise, calculate the final height based on the watering pattern.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print the final height of the flower or -1 if it dies.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the number of days n and the watering pattern array.\",\n    \"  b. Initialize the flower height to 1 cm.\",\n    \"  c. Iterate over the watering pattern:\",\n    \"     i. If the flower is watered, update the height based on the previous day's watering status.\",\n    \"     ii. If the flower is not watered, check for consecutive days without water.\",\n    \"  d. If the flower dies, set the result to -1.\",\n    \"  e. Otherwise, calculate the final height.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def flower_growth(test_cases):\n    results = []\n    for n, pattern in test_cases:\n        height = 1\n        consecutive_no_water = 0\n        for i in range(n):\n            if pattern[i] == 1:\n                if i > 0 and pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_no_water = 0\n            else:\n                consecutive_no_water += 1\n                if consecutive_no_water == 2:\n                    height = -1\n                    break\n        results.append(height)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, pattern))\n    \n    results = flower_growth(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the watering patterns for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n representing the number of days.\",\n        \"Read the array of integers representing the watering pattern for n days.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the height of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the flower height to 1 centimeter at the start of each test case.\",\n        \"Iterate through the watering pattern array:\",\n        \"If the flower is watered (a_i = 1), check if the previous day was also watered:\",\n        \"If yes, increase the height by 5 centimeters.\",\n        \"If no, increase the height by 1 centimeter.\",\n        \"If the flower is not watered (a_i = 0), check if the previous day was also not watered:\",\n        \"If yes, the flower dies, set the height to -1 and break the loop.\",\n        \"If no, continue without changing the height.\"\n      ]\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"steps\": [\n        \"For each test case, print the calculated height of the flower.\",\n        \"Ensure the output format matches the requirement.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the watering patterns.\",\n    \"For each test case, initialize the flower height and iterate through the watering pattern to calculate the final height.\",\n    \"Handle the conditions for growth and death of the flower based on consecutive watering or non-watering days.\",\n    \"Output the final height for each test case, ensuring the format is correct.\"\n  ]\n}\n```", "Round_0": {"code": "def calculate_flower_height(test_cases):\n    results = []\n    for n, watering_pattern in test_cases:\n        height = 1\n        previous_day_watered = False\n        flower_died = False\n\n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    break\n\n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, watering_pattern))\n    \n    results = calculate_flower_height(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the watering patterns for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n and the array of integers representing the watering pattern.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the flower height to 1 centimeter at the start of each test case.\",\n        \"Iterate through the watering pattern array:\",\n        \"If the flower is watered (a_i = 1), check if it was watered the previous day (a_(i-1) = 1) to determine growth (5 cm if consecutive, otherwise 1 cm).\",\n        \"If the flower is not watered (a_i = 0), check if it was not watered the previous day (a_(i-1) = 0) to determine if it dies (-1).\",\n        \"Update the flower height accordingly.\"\n      ]\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"steps\": [\n        \"For each test case, print the final height of the flower or -1 if the flower dies.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the watering patterns.\",\n    \"For each test case, simulate the growth of the flower based on the watering pattern.\",\n    \"Check conditions for growth and death of the flower.\",\n    \"Output the final height of the flower for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def flower_growth(test_cases):\n    results = []\n    for n, pattern in test_cases:\n        height = 1\n        consecutive_unwatered_days = 0\n        \n        for i in range(n):\n            if pattern[i] == 1:\n                if i > 0 and pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, pattern))\n    \n    results = flower_growth(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the watering patterns for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n representing the number of days.\",\n        \"Read the array of integers representing the watering pattern for n days.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the height of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the height of the flower to 1 centimeter at the start of each test case.\",\n        \"Iterate through the watering pattern array:\",\n        \"If the flower is watered on the current day, check if it was watered the previous day:\",\n        \"If yes, increase the height by 5 centimeters.\",\n        \"If no, increase the height by 1 centimeter.\",\n        \"If the flower is not watered, check if it was not watered the previous day:\",\n        \"If yes, set the height to -1 (flower dies) and break the loop.\",\n        \"If no, continue to the next day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"steps\": [\n        \"For each test case, print the calculated height of the flower.\",\n        \"Ensure the output format matches the requirement.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the watering patterns.\",\n    \"For each test case, initialize the flower height and iterate through the watering pattern.\",\n    \"Calculate the flower's height based on the watering rules.\",\n    \"Check for consecutive days without watering to determine if the flower dies.\",\n    \"Output the final height for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def calculate_flower_height(test_cases):\n    results = []\n    for n, watering_pattern in test_cases:\n        height = 1\n        previous_day_watered = False\n        flower_died = False\n\n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    break\n\n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, watering_pattern))\n    \n    results = calculate_flower_height(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the corresponding data for each test case.\",\n      \"details\": \"Read the number of test cases t. For each test case, read the integer n and the array of integers representing the watering pattern.\"\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"details\": \"Initialize the flower height to 1 cm. Iterate over the watering pattern array and update the flower height according to the rules provided.\"\n    },\n    {\n      \"description\": \"Determine if the flower dies during the simulation.\",\n      \"details\": \"Track consecutive days without watering. If there are two consecutive days without watering, mark the flower as dead and set the height to -1.\"\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"details\": \"After processing each test case, print the resulting height or -1 if the flower died.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t from standard input.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the integer n and the array of integers representing the watering pattern.\",\n    \"  b. Initialize the flower height to 1 cm.\",\n    \"  c. Initialize a counter for consecutive unwatered days.\",\n    \"  d. Iterate over the watering pattern array:\",\n    \"     i. If the current day is watered (a_i = 1), reset the consecutive unwatered days counter.\",\n    \"        - If the previous day was also watered, increase the height by 5 cm.\",\n    \"        - Otherwise, increase the height by 1 cm.\",\n    \"     ii. If the current day is not watered (a_i = 0), increment the consecutive unwatered days counter.\",\n    \"        - If the counter reaches 2, set the height to -1 and break the loop.\",\n    \"  e. After processing the array, store the final height or -1 if the flower died.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                consecutive_unwatered_days = 0\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 73)"}, "Round_1": {"code": "def flower_growth_simulation():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        watering_pattern = list(map(int, data[index:index + n]))\n        index += n\n        \n        height = 1\n        consecutive_unwatered_days = 0\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                consecutive_unwatered_days = 0\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)\n\nflower_growth_simulation()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the corresponding data for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the integer n and the subsequent n integers representing the watering pattern.\"\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"details\": \"Initialize the flower height to 1 cm. Iterate over the watering pattern and update the height according to the rules provided. Track consecutive days without water to determine if the flower dies.\"\n    },\n    {\n      \"description\": \"Determine the final height of the flower or if it dies for each test case.\",\n      \"details\": \"If the flower is not watered for two consecutive days, set the result to -1 for that test case. Otherwise, calculate the final height based on the watering rules.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, print the final height of the flower or -1 if it dies.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the integer n and the array of n integers representing the watering pattern.\",\n    \"  b. Initialize the flower height to 1 cm.\",\n    \"  c. Iterate over the watering pattern:\",\n    \"     i. If the flower is watered on the current day, increase the height by 1 cm.\",\n    \"     ii. If the flower is watered on consecutive days, increase the height by an additional 4 cm (total 5 cm for that day).\",\n    \"     iii. Track consecutive days without water. If there are two consecutive days without water, set the result to -1 and break the loop.\",\n    \"  d. Store the result (final height or -1) for the current test case.\",\n    \"Print the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def flower_growth(test_cases):\n    results = []\n    for n, pattern in test_cases:\n        height = 1\n        consecutive_no_water = 0\n        for i in range(n):\n            if pattern[i] == 1:\n                if i > 0 and pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_no_water = 0\n            else:\n                consecutive_no_water += 1\n                if consecutive_no_water == 2:\n                    height = -1\n                    break\n        results.append(height)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, pattern))\n    \n    results = flower_growth(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the integer n and the array of integers representing the watering pattern.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the growth of the flower for each test case based on the watering pattern.\",\n      \"steps\": [\n        \"Initialize the flower height to 1 centimeter.\",\n        \"Iterate over the watering pattern array:\",\n        \"If the flower is watered (a_i = 1), check if it was watered the previous day:\",\n        \"If yes, increase the height by 5 centimeters.\",\n        \"If no, increase the height by 1 centimeter.\",\n        \"If the flower is not watered (a_i = 0), check if it was not watered the previous day:\",\n        \"If yes, the flower dies, set height to -1 and break the loop.\",\n        \"If no, continue without changing the height.\"\n      ]\n    },\n    {\n      \"description\": \"Output the final height of the flower for each test case.\",\n      \"steps\": [\n        \"For each test case, print the final height of the flower or -1 if the flower died.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input data.\",\n    \"For each test case, simulate the growth of the flower based on the watering pattern.\",\n    \"Determine the final height of the flower or if it dies.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def flower_growth(test_cases):\n    results = []\n    for n, pattern in test_cases:\n        height = 1\n        previous_day_watered = False\n        consecutive_days_not_watered = 0\n        \n        for day in pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n                consecutive_days_not_watered = 0\n            else:\n                consecutive_days_not_watered += 1\n                if consecutive_days_not_watered == 2:\n                    height = -1\n                    break\n                previous_day_watered = False\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        pattern = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, pattern))\n    \n    results = flower_growth(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, true, true, true, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 107, "prompt": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Ensure your solution efficiently handles large values of n and optimizes for time complexity. Assume n is a positive integer and Petya's watering pattern is provided as an array of boolean values.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 108}
