{"name": "1575_I. Illusions of the Desert", "description": "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions.\n\nThe map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them such that it is possible to travel between each pair of rooms through several tunnels.\n\nThe i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z.\n\nTo prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries.\n\nThere are two types of queries to be done:\n\n  * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). \n  * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). \n\n\n\nHelp them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "tags": ["data structures", "trees"], "difficulty": 15, "id": 1575, "sample_io": [{"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["39\n32\n0\n"]}], "test_list": [{"input": "2 1\n-1000000000 1000000000\n2 1\n2 1 2\n", "output": ["2000000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000000003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["19\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n30\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n"]}, {"input": "2 1\n-1000000000 1010000000\n2 1\n2 1 2\n", "output": ["2010000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000002003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["39\n33\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n32\n23\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n32\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["9\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["35\n29\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["9\n32\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["31\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["3\n26\n22\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n40\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n38\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n29\n0\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["17\n0\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["16\n0\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n19\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n22\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n34\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n8\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["9\n13\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 2 3\n", "output": ["8\n11\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000002003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n22\n15\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["1\n4\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["21\n32\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 6 3\n", "output": ["9\n30\n5\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 0\n2 1 2\n2 5 2\n", "output": ["3\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n45\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n24\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n7\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n21\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n15\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["19\n32\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["21\n0\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["1\n14\n21\n"]}, {"input": "6 4\n0 -9 2 -1 3 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["19\n30\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["38\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["3\n24\n22\n"]}, {"input": "6 3\n0 0 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 4\n1 2 3\n", "output": ["19\n12\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["28\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n4\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 5 2\n", "output": ["1\n5\n9\n"]}, {"input": "6 4\n10 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["26\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["0\n5\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["5\n5\n0\n"]}, {"input": "2 1\n-1000000000 1000000010\n2 1\n2 1 2\n", "output": ["2000000010\n"]}, {"input": "6 4\n0 -9 2 -1 4 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n22\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["9\n12\n21\n"]}, {"input": "2 1\n-651044801 1010000000\n2 1\n2 1 2\n", "output": ["1661044801\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["10\n0\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n2 3 3\n", "output": ["9\n15\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["35\n35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -2\n2 1 2\n1 3 2\n", "output": ["9\n31\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n30\n0\n"]}, {"input": "6 4\n10 -13 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["0\n26\n22\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n35\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n23\n"]}, {"input": "6 4\n-1 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["17\n0\n13\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n13\n"]}, {"input": "6 4\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 2 3\n", "output": ["8\n12\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["39\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n31\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 5\n", "output": ["0\n7\n4\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["37\n0\n0\n"]}, {"input": "4 4\n2 -1000 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n21\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n43\n15\n"]}, {"input": "6 4\n3 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["19\n0\n"]}, {"input": "2 1\n-651044801 1010000100\n2 1\n2 1 2\n", "output": ["1661044901\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["28\n30\n14\n"]}, {"input": "6 4\n0 -6 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n20\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["9\n0\n13\n"]}, {"input": "6 3\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 5\n2 2 3\n", "output": ["8\n8\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["37\n0\n"]}, {"input": "4 4\n2 -1000 110 4\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000004\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n13\n51\n"]}, {"input": "6 4\n0 -9 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["27\n30\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["51\n25\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n10\n48\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["57\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n55\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 6\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n24\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["37\n40\n"]}, {"input": "2 1\n-1000000000 1010001000\n2 1\n2 1 2\n", "output": ["2010001000\n"]}, {"input": "6 4\n0 -9 2 -1 4 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n26\n17\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["5\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["1\n34\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["17\n35\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n38\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n8\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 6\n", "output": ["16\n0\n10\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n"]}, {"input": "6 4\n0 -12 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n16\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["29\n8\n0\n"]}, {"input": "6 4\n10 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n27\n0\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["49\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 1\n", "output": ["9\n0\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 6\n", "output": ["9\n13\n7\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 1 3\n", "output": ["17\n45\n35\n"]}, {"input": "6 4\n0 -3 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n23\n0\n"]}, {"input": "6 4\n10 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["11\n24\n"]}, {"input": "6 4\n10 -9 2 -1 6 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["42\n0\n"]}, {"input": "6 4\n1 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["4\n24\n22\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["0\n4\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 6\n", "output": ["0\n5\n2\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 4 3\n", "output": ["9\n13\n21\n"]}, {"input": "6 4\n10 -9 2 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["31\n31\n0\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 6\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n22\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["47\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n28\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n23\n"]}, {"input": "6 4\n0 -9 4 1 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["1\n0\n13\n"]}, {"input": "6 4\n0 -9 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["8\n12\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n25\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 1 5\n", "output": ["0\n7\n2\n"]}, {"input": "4 4\n2 -1350 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1460\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 7 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n24\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -4\n2 1 2\n2 2 3\n", "output": ["28\n34\n10\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n3 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["23\n29\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 4 2\n2 2 3\n", "output": ["9\n9\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n5 2\n2 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n20\n13\n"]}, {"input": "6 4\n3 -2 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 4\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["21\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["28\n15\n"]}, {"input": "6 4\n0 -8 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["26\n29\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 2\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n67\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 3\n", "output": ["37\n23\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 6\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["30\n10\n20\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 2 4\n1 2 3\n", "output": ["9\n44\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 4\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n33\n"]}, {"input": "6 3\n10 -21 2 -1 8 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n63\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 5\n0 2 3\n", "output": ["9\n7\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 3 3\n", "output": ["10\n35\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -4\n2 1 2\n1 3 3\n", "output": ["31\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["2\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n9\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 6\n", "output": ["16\n0\n15\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["33\n27\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 3 2\n2 3 1\n", "output": ["9\n23\n25\n"]}, {"input": "6 4\n0 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n15\n14\n"]}, {"input": "6 4\n19 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["20\n24\n"]}, {"input": "6 4\n0 -9 2 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 5 3\n", "output": ["9\n13\n16\n"]}, {"input": "6 4\n-1 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["5\n0\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -11\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["57\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -4\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["33\n0\n19\n"]}, {"input": "6 4\n0 -9 4 1 -1 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["3\n0\n13\n"]}, {"input": "4 4\n2 -2609 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2719\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["9\n26\n15\n"]}, {"input": "6 4\n13 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 3 -3\n2 1 2\n2 2 3\n", "output": ["31\n24\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 2 3\n", "output": ["10\n35\n25\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n31\n9\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["13\n37\n0\n"]}, {"input": "6 4\n1 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["17\n15\n14\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["21\n12\n0\n"]}, {"input": "6 4\n0 -17 2 -1 4 -16\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["42\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["27\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["21\n30\n20\n"]}, {"input": "6 3\n0 -7 4 -1 10 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n42\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -2\n2 1 3\n2 3 3\n", "output": ["13\n36\n0\n"]}, {"input": "6 4\n19 -3 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 1 3\n", "output": ["20\n18\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 1 3\n", "output": ["21\n12\n25\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["13\n27\n0\n"]}, {"input": "6 3\n0 -7 4 -1 10 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n36\n"]}, {"input": "6 4\n0 -16 2 -1 4 -23\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["56\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 2 2\n2 4 4\n", "output": ["13\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n1 2 2\n2 4 4\n", "output": ["13\n0\n"]}, {"input": "4 4\n3 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2103\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 2\n", "output": ["9\n12\n23\n"]}, {"input": "6 3\n0 -5 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n1 1 4\n2 2 3\n", "output": ["9\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -5\n2 1 2\n2 3 3\n", "output": ["0\n31\n0\n"]}, {"input": "6 4\n0 -9 4 0 11 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["22\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -5\n2 1 2\n2 3 3\n", "output": ["0\n36\n0\n"]}, {"input": "6 4\n10 -1 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 4\n", "output": ["9\n0\n23\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["4\n13\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 2 -1000000000\n2 1 4\n", "output": ["1100\n0\n2000000005\n"]}, {"input": "6 4\n0 -4 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n19\n0\n"]}], "task_id": "codecontest/8", "repair_prompt": ["Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, allowing travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate; to travel from the x-th room to the y-th room requires a tunnel between x and y, consuming max(|a_x + a_y|, |a_x - a_y|) energy, where |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure! Consider providing an efficient algorithm to handle these queries within the constraints provided.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 1 else int(data[index + 2]) - 1\n        queries.append((query_type, u, v))\n        index += 3\n    \n    return n, q, illusion_rates, tree, queries\n\ndef bfs_path(tree, start, end):\n    queue = deque([start])\n    parent = {start: None}\n    \n    while queue:\n        node = queue.popleft()\n        if node == end:\n            break\n        for neighbor in tree[node]:\n            if neighbor not in parent:\n                parent[neighbor] = node\n                queue.append(neighbor)\n    \n    path = []\n    while end is not None:\n        path.append(end)\n        end = parent[end]\n    \n    return path[::-1]\n\ndef calculate_energy(illusion_rates, path):\n    energy = 0\n    for i in range(len(path) - 1):\n        x = path[i]\n        y = path[i + 1]\n        energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    return energy\n\ndef process_queries(n, q, illusion_rates, tree, queries):\n    results = []\n    for query_type, u, v in queries:\n        if query_type == 1:\n            illusion_rates[u] = v\n        elif query_type == 2:\n            path = bfs_path(tree, u, v)\n            energy = calculate_energy(illusion_rates, path)\n            results.append(energy)\n    return results\n\ndef main():\n    n, q, illusion_rates, tree, queries = parse_input()\n    results\nmain()", "completions": ["def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, a, parent_list):\n    energy = 0\n    while u != v:\n        energy += max(abs(a[u] + a[parent_list[u]]), abs(a[u] - a[parent_list[u]]))\n        u = parent_list[u]\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, 0, 0, adj, parent_list, depth_list)\n    \n    result = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            a[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor = lca(u, v, parent_list, depth_list)\n            energy\nmain()", "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Build the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Preprocess to find parent and depth using DFS\n    parent = [-1] * n\n    depth = [0] * n\n    def dfs(node, par, dep):\n        parent[node] = par\n        depth[node] = dep\n        for neighbor in tree[node]:\n            if neighbor != par:\n                dfs(neighbor, node, dep + 1)\n    \n    dfs(0, -1, 0)\n    \n    # Function to find LCA\n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        # Bring u and v to the same depth\n        while depth[u] > depth[v]:\n            u = parent[u]\n        while u != v:\n            u = parent[u]\n            v = parent[v]\n        return u\n    \n    # Function to calculate energy between two nodes\n    def calculate_energy(u, v):\n        return max(abs(illusion_rates[u] + illusion_rates[v]), abs(illusion_rates[u] - illusion_rates[v]))\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            # Update illusion rate\n            c = int(data[index + 2])\n            illusion_rates[u] = c\n            index += 3\n        elif query_type == 2:\n            # Calculate minimum energy\n            v = int(data[index + 2]) - 1\n            index += 3\n            \n            # Find LCA of u and v\n            ancestor = lca(u, v)\n            \n            # Calculate energy from u to ancestor and ancestor to v\n            total_energy = 0\nmain()", "def main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        index += 2\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    # Preprocessing for LCA and distance calculation\n    parent = [-1] * n\n    depth = [0] * n\n    LOG = 17  # log2(100000) is approximately 16.6, so we use 17\n    up = [[-1] * LOG for _ in range(n)]\n    \n    def dfs(v, p, d):\n        parent[v] = p\n        depth[v] = d\n        up[v][0] = p\n        for i in range(1, LOG):\n            if up[v][i - 1] != -1:\n                up[v][i] = up[up[v][i - 1]][i - 1]\n        for u in tree[v]:\n            if u != p:\n                dfs(u, v, d + 1)\n    \n    dfs(0, -1, 0)\n    \n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        diff = depth[u] - depth[v]\n        for i in range(LOG):\n            if (diff >> i) & 1:\n                u = up[u][i]\n        if u == v:\n            return u\n        for i in range(LOG - 1, -1, -1):\n            if up[u][i] != up[v][i]:\n                u = up[u][i]\n                v = up[v][i]\n        return parent[u]\n    \n    def path_energy(u, v):\n        ancestor = lca(u, v)\n        total_energy = 0\n        \n        def calculate_energy(x, y):\n            return max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n        \n        # Calculate energy from u\nmain()", "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, a, parent_list):\n    energy = 0\n    while u != v:\n        energy += max(abs(a[u] + a[parent_list[u]]), abs(a[u] - a[parent_list[u]]))\n        u = parent_list[u]\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, 0, 0, adj, parent_list, depth_list)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            a[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor = lca(u, v, parent_list, depth_list)\n            energy\nmain()", "def dfs(node, parent, depth, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in tree[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list):\n    energy = 0\n    while u != v:\n        parent_u = parent_list[u]\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_u]), abs(illusion_rates[u] - illusion_rates[parent_u]))\n        u = parent_u\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    dfs(1, -1, 0, parent_list, depth_list)\n    \n    result = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor\nmain()", "def dfs(node, parent, depth, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in tree[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list):\n    energy = 0\n    while u != v:\n        parent_u = parent_list[u]\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_u]), abs(illusion_rates[u] - illusion_rates[parent_u]))\n        u = parent_u\n    return energy\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    dfs(1, -1, 0, parent_list, depth_list)\n    \n    result = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\nmain()", "def dfs(node, parent, depth, adj, illusion_rates, energy_cost, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            energy_cost[neighbor] = energy_cost[node] + max(abs(illusion_rates[node] + illusion_rates[neighbor]), abs(illusion_rates[node] - illusion_rates[neighbor]))\n            dfs(neighbor, node, depth + 1, adj, illusion_rates, energy_cost, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    energy_cost = [0] * (n + 1)\n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, -1, 0, adj, illusion_rates, energy_cost, parent_list, depth_list)\n    \n    output = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n            energy_cost = [0] * (n + 1)\n            dfs(1, -1, 0, adj,\nmain()", "def main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            queries.append((query_type, u, c))\n        else:\n            v = int(data[index]) - 1\n            index += 1\n            queries.append((query_type, u, v))\n    \n    # Preprocessing for LCA and distance calculation\n    parent = [-1] * n\n    depth = [0] * n\n    max_log = 17  # Since n <= 100000, log2(100000) is approximately 17\n    up = [[-1] * max_log for _ in range(n)]\n    \n    def dfs(v, p, d):\n        parent[v] = p\n        depth[v] = d\n        up[v][0] = p\n        for i in range(1, max_log):\n            if up[v][i - 1] != -1:\n                up[v][i] = up[up[v][i - 1]][i - 1]\n        for u in tree[v]:\n            if u != p:\n                dfs(u, v, d + 1)\n    \n    dfs(0, -1, 0)\n    \n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        diff = depth[u] - depth[v]\n        for i in range(max_log):\n            if (diff >> i) & 1:\n                u = up[u][i]\n        if u == v:\n            return u\nmain()", "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list):\n    energy = 0\n    while u != v:\n        parent_u = parent_list[u]\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_u]), abs(illusion_rates[u] - illusion_rates[parent_u]))\n        u = parent_u\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, 0, 0, adj, parent_list, depth_list)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor = l\nmain()", "def parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 1 else int(data[index + 2]) - 1\n        queries.append((query_type, u, v))\n        index += 3\n    \n    return n, q, illusion_rates, tree, queries\n\ndef bfs_path(tree, start, end):\n    queue = deque([start])\n    parent = {start: None}\n    \n    while queue:\n        node = queue.popleft()\n        if node == end:\n            break\n        for neighbor in tree[node]:\n            if neighbor not in parent:\n                parent[neighbor] = node\n                queue.append(neighbor)\n    \n    path = []\n    while end is not None:\n        path.append(end)\n        end = parent[end]\n    \n    return path[::-1]\n\ndef calculate_energy(illusion_rates, path):\n    energy = 0\n    for i in range(len(path) - 1):\n        x = path[i]\n        y = path[i + 1]\n        energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    return energy\n\ndef process_queries(n, q, illusion_rates, tree, queries):\n    results = []\n    for query_type, u, v in queries:\n        if query_type == 1:\n            illusion_rates[u] = v\n        elif query_type == 2:\n            path = bfs_path(tree, u, v)\n            energy = calculate_energy(illusion_rates, path)\n            results.append(energy)\n    return results\n\ndef main():\n    n, q, illusion_rates, tree, queries = parse_input()\n    results\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure of the maze.\",\n      \"steps\": [\n        \"Read the number of rooms (n) and number of queries (q).\",\n        \"Read the initial illusion rates for each room into an array.\",\n        \"Read the n-1 pairs of integers representing tunnels and construct the tree structure using adjacency lists.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a mechanism to efficiently update the illusion rate of a room.\",\n      \"steps\": [\n        \"For a type 1 query, update the illusion rate of the specified room in the array.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms in the tree.\",\n      \"steps\": [\n        \"For a type 2 query, find the path between the specified rooms using a tree traversal algorithm (e.g., DFS or BFS).\",\n        \"Calculate the energy required for each tunnel in the path using the formula max(|a_x + a_y|, |a_x - a_y|).\",\n        \"Sum the energies to get the total energy required for the path.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize the solution to handle up to 100,000 queries efficiently.\",\n      \"steps\": [\n        \"Consider using data structures like segment trees or binary indexed trees to manage updates and queries efficiently.\",\n        \"Implement path compression and union-find techniques to optimize tree traversal.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Construct the tree structure using adjacency lists.\",\n    \"Implement functions to handle type 1 and type 2 queries.\",\n    \"Optimize the solution using advanced data structures and algorithms.\",\n    \"Output the results for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def parse_input(data):\n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 1 else int(data[index + 2]) - 1\n        queries.append((query_type, u, v))\n        index += 3\n    \n    return n, q, illusion_rates, tree, queries\n\ndef bfs_path(tree, start, end):\n    queue = deque([start])\n    parent = {start: None}\n    \n    while queue:\n        node = queue.popleft()\n        if node == end:\n            break\n        for neighbor in tree[node]:\n            if neighbor not in parent:\n                parent[neighbor] = node\n                queue.append(neighbor)\n    \n    path = []\n    while end is not None:\n        path.append(end)\n        end = parent[end]\n    \n    return path[::-1]\n\ndef calculate_energy(illusion_rates, path):\n    energy = 0\n    for i in range(len(path) - 1):\n        x = path[i]\n        y = path[i + 1]\n        energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    return energy\n\ndef process_queries(n, q, illusion_rates, tree, queries):\n    results = []\n    for query_type, u, v in queries:\n        if query_type == 1:\n            illusion_rates[u] = v\n        elif query_type == 2:\n            path = bfs_path(tree, u, v)\n            energy = calculate_energy(illusion_rates, path)\n            results.append(energy)\n    return results\n\ndef main():\n    n, q, illusion_rates, tree, queries = parse_input(data)\n    results =", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 69)"}, "Round_1": {"code": "def parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 1 else int(data[index + 2]) - 1\n        queries.append((query_type, u, v))\n        index += 3\n    \n    return n, q, illusion_rates, tree, queries\n\ndef bfs_path(tree, start, end):\n    queue = deque([start])\n    parent = {start: None}\n    \n    while queue:\n        node = queue.popleft()\n        if node == end:\n            break\n        for neighbor in tree[node]:\n            if neighbor not in parent:\n                parent[neighbor] = node\n                queue.append(neighbor)\n    \n    path = []\n    while end is not None:\n        path.append(end)\n        end = parent[end]\n    \n    return path[::-1]\n\ndef calculate_energy(illusion_rates, path):\n    energy = 0\n    for i in range(len(path) - 1):\n        x = path[i]\n        y = path[i + 1]\n        energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    return energy\n\ndef process_queries(n, q, illusion_rates, tree, queries):\n    results = []\n    for query_type, u, v in queries:\n        if query_type == 1:\n            illusion_rates[u] = v\n        elif query_type == 2:\n            path = bfs_path(tree, u, v)\n            energy = calculate_energy(illusion_rates, path)\n            results.append(energy)\n    return results\n\ndef main():\n    n, q, illusion_rates, tree, queries = parse_input()\n    results"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms (n), number of queries (q), list of illusion rates (a), and adjacency list for the tree structure.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates and queries on the tree structure.\",\n      \"output\": \"A segment tree or similar data structure to manage updates and path queries efficiently.\"\n    },\n    {\n      \"description\": \"Handle type 1 queries to update the illusion rate of a specific room.\",\n      \"output\": \"Update the data structure to reflect the new illusion rate for the specified room.\"\n    },\n    {\n      \"description\": \"Handle type 2 queries to calculate the minimum energy required to travel from room u to room v.\",\n      \"output\": \"Use the data structure to compute the minimum energy path between two rooms and return the result.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct the tree using an adjacency list to represent the connections between rooms.\",\n    \"Initialize a data structure (e.g., segment tree) to manage updates and queries efficiently.\",\n    \"For each query, determine its type:\",\n    \"  - If it's a type 1 query, update the illusion rate of the specified room in the data structure.\",\n    \"  - If it's a type 2 query, calculate the minimum energy required to travel from room u to room v using the data structure and output the result.\",\n    \"Ensure the solution is optimized to handle up to 100,000 rooms and queries efficiently.\"\n  ]\n}\n```", "Round_0": {"code": "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, a, parent_list):\n    energy = 0\n    while u != v:\n        energy += max(abs(a[u] + a[parent_list[u]]), abs(a[u] - a[parent_list[u]]))\n        u = parent_list[u]\n    return energy\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, 0, 0, adj, parent_list, depth_list)\n    \n    result = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            a[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor = lca(u, v,", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 67)"}, "Round_1": {"code": "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, a, parent_list):\n    energy = 0\n    while u != v:\n        energy += max(abs(a[u] + a[parent_list[u]]), abs(a[u] - a[parent_list[u]]))\n        u = parent_list[u]\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, 0, 0, adj, parent_list, depth_list)\n    \n    result = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            a[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor = lca(u, v, parent_list, depth_list)\n            energy"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure of the maze.\",\n      \"tasks\": [\n        \"Read and store the number of rooms (n) and queries (q).\",\n        \"Read and store the initial illusion rates for each room.\",\n        \"Read and store the tree structure as an adjacency list or similar representation.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a mechanism to update the illusion rate of a room based on type 1 queries.\",\n      \"tasks\": [\n        \"For each type 1 query, update the illusion rate of the specified room.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms based on type 2 queries.\",\n      \"tasks\": [\n        \"Implement a method to find the path between two rooms using the tree structure.\",\n        \"Calculate the energy required for each segment of the path using the given formula.\",\n        \"Sum the energies to find the total energy required for the path.\"\n      ]\n    },\n    {\n      \"description\": \"Efficiently handle multiple queries and output results for type 2 queries.\",\n      \"tasks\": [\n        \"Iterate through the list of queries.\",\n        \"For type 1 queries, update the illusion rate.\",\n        \"For type 2 queries, calculate and store the result.\",\n        \"Output the results for all type 2 queries.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data structures.\",\n    \"Initialize data structures to represent the maze and illusion rates.\",\n    \"Implement functions to handle type 1 and type 2 queries.\",\n    \"For type 1 queries, update the illusion rate of the specified room.\",\n    \"For type 2 queries, find the path between the specified rooms and calculate the required energy.\",\n    \"Output the results for type 2 queries.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Build the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Preprocess to find parent and depth using DFS\n    parent = [-1] * n\n    depth = [0] * n\n    def dfs(node, par, dep):\n        parent[node] = par\n        depth[node] = dep\n        for neighbor in tree[node]:\n            if neighbor != par:\n                dfs(neighbor, node, dep + 1)\n    \n    dfs(0, -1, 0)\n    \n    # Function to find LCA\n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        # Bring u and v to the same depth\n        while depth[u] > depth[v]:\n            u = parent[u]\n        while u != v:\n            u = parent[u]\n            v = parent[v]\n        return u\n    \n    # Function to calculate energy between two nodes\n    def calculate_energy(u, v):\n        return max(abs(illusion_rates[u] + illusion_rates[v]), abs(illusion_rates[u] - illusion_rates[v]))\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            # Update illusion rate\n            c = int(data[index + 2])\n            illusion_rates[u] = c\n            index += 3\n        elif query_type == 2:\n            # Calculate minimum energy\n            v = int(data[index + 2]) - 1\n            index += 3\n            \n            # Find LCA of u and v\n            ancestor = lca(u, v)\n            \n            # Calculate energy from u to ancestor and ancestor to v\n            total_energy = 0", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Build the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Preprocess to find parent and depth using DFS\n    parent = [-1] * n\n    depth = [0] * n\n    def dfs(node, par, dep):\n        parent[node] = par\n        depth[node] = dep\n        for neighbor in tree[node]:\n            if neighbor != par:\n                dfs(neighbor, node, dep + 1)\n    \n    dfs(0, -1, 0)\n    \n    # Function to find LCA\n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        # Bring u and v to the same depth\n        while depth[u] > depth[v]:\n            u = parent[u]\n        while u != v:\n            u = parent[u]\n            v = parent[v]\n        return u\n    \n    # Function to calculate energy between two nodes\n    def calculate_energy(u, v):\n        return max(abs(illusion_rates[u] + illusion_rates[v]), abs(illusion_rates[u] - illusion_rates[v]))\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            # Update illusion rate\n            c = int(data[index + 2])\n            illusion_rates[u] = c\n            index += 3\n        elif query_type == 2:\n            # Calculate minimum energy\n            v = int(data[index + 2]) - 1\n            index += 3\n            \n            # Find LCA of u and v\n            ancestor = lca(u, v)\n            \n            # Calculate energy from u to ancestor and ancestor to v\n            total_energy = 0"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure of the maze.\",\n      \"steps\": [\n        \"Read the first line to get the number of rooms (n) and number of queries (q).\",\n        \"Read the second line to get the initial illusion rates for each room.\",\n        \"Read the next n-1 lines to construct the tree structure using adjacency lists or another suitable data structure.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a mechanism to efficiently update the illusion rate of a room.\",\n      \"steps\": [\n        \"For type 1 queries, update the illusion rate of the specified room.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms in the tree.\",\n      \"steps\": [\n        \"For type 2 queries, use a tree traversal algorithm (e.g., DFS or BFS) to find the path between the specified rooms.\",\n        \"Calculate the energy required for each tunnel in the path using the formula max(|a_x + a_y|, |a_x - a_y|).\",\n        \"Sum the energies to get the total energy required for the path.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize the solution to handle up to 100,000 queries efficiently.\",\n      \"steps\": [\n        \"Consider using data structures like segment trees or binary indexed trees to manage updates and queries efficiently.\",\n        \"Ensure the solution can handle the constraints of up to 100,000 rooms and queries.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to represent the tree and store illusion rates.\",\n    \"Implement functions to handle type 1 and type 2 queries.\",\n    \"For type 1 queries, update the illusion rate of the specified room.\",\n    \"For type 2 queries, find the path between the specified rooms and calculate the required energy.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        index += 2\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    # Preprocessing for LCA and distance calculation\n    parent = [-1] * n\n    depth = [0] * n\n    max_depth = 0\n    LOG = 17  # log2(100000) is approximately 16.6, so we use 17\n    up = [[-1] * LOG for _ in range(n)]\n    \n    def dfs(v, p, d):\n        nonlocal max_depth\n        parent[v] = p\n        depth[v] = d\n        max_depth = max(max_depth, d)\n        up[v][0] = p\n        for i in range(1, LOG):\n            if up[v][i - 1] != -1:\n                up[v][i] = up[up[v][i - 1]][i - 1]\n        for u in tree[v]:\n            if u != p:\n                dfs(u, v, d + 1)\n    \n    dfs(0, -1, 0)\n    \n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        diff = depth[u] - depth[v]\n        for i in range(LOG):\n            if (diff >> i) & 1:\n                u = up[u][i]\n        if u == v:\n            return u\n        for i in range(LOG - 1, -1, -1):\n            if up[u][i] != up[v][i]:\n                u = up[u][i]\n                v = up[v][i]\n        return parent[u]\n    \n    def path_energy(u, v):\n        ancestor = lca(u, v)\n        total_energy = 0\n        \n        def calculate_energy(x, y):", "report": "The compilation output of the preceding code is: expected an indented block (<string>, line 63)"}, "Round_1": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        index += 2\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    # Preprocessing for LCA and distance calculation\n    parent = [-1] * n\n    depth = [0] * n\n    LOG = 17  # log2(100000) is approximately 16.6, so we use 17\n    up = [[-1] * LOG for _ in range(n)]\n    \n    def dfs(v, p, d):\n        parent[v] = p\n        depth[v] = d\n        up[v][0] = p\n        for i in range(1, LOG):\n            if up[v][i - 1] != -1:\n                up[v][i] = up[up[v][i - 1]][i - 1]\n        for u in tree[v]:\n            if u != p:\n                dfs(u, v, d + 1)\n    \n    dfs(0, -1, 0)\n    \n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        diff = depth[u] - depth[v]\n        for i in range(LOG):\n            if (diff >> i) & 1:\n                u = up[u][i]\n        if u == v:\n            return u\n        for i in range(LOG - 1, -1, -1):\n            if up[u][i] != up[v][i]:\n                u = up[u][i]\n                v = up[v][i]\n        return parent[u]\n    \n    def path_energy(u, v):\n        ancestor = lca(u, v)\n        total_energy = 0\n        \n        def calculate_energy(x, y):\n            return max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n        \n        # Calculate energy from u"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms, queries, initial illusion rates, and adjacency list for the tree.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates and queries on the tree structure.\",\n      \"output\": \"A segment tree or similar data structure to manage updates and path queries efficiently.\"\n    },\n    {\n      \"description\": \"Handle type 1 queries to update the illusion rate of a specific room.\",\n      \"output\": \"Update the data structure to reflect the new illusion rate for the specified room.\"\n    },\n    {\n      \"description\": \"Handle type 2 queries to calculate the minimum energy required to travel from room u to room v.\",\n      \"output\": \"Use the data structure to compute the minimum energy path between two rooms and return the result.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct an adjacency list to represent the tree structure of the maze.\",\n    \"Initialize a data structure (e.g., segment tree) to manage updates and queries efficiently.\",\n    \"For each query, determine its type:\",\n    \"  - If it's a type 1 query, update the illusion rate of the specified room in the data structure.\",\n    \"  - If it's a type 2 query, calculate the minimum energy required to travel from room u to room v using the data structure and output the result.\",\n    \"Ensure the solution is optimized to handle up to 100,000 rooms and queries efficiently.\"\n  ]\n}\n```", "Round_0": {"code": "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, a, parent_list):\n    energy = 0\n    while u != v:\n        energy += max(abs(a[u] + a[parent_list[u]]), abs(a[u] - a[parent_list[u]]))\n        u = parent_list[u]\n    return energy\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, 0, 0, adj, parent_list, depth_list)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            a[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor = lca(u, v,", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 67)"}, "Round_1": {"code": "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, a, parent_list):\n    energy = 0\n    while u != v:\n        energy += max(abs(a[u] + a[parent_list[u]]), abs(a[u] - a[parent_list[u]]))\n        u = parent_list[u]\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, 0, 0, adj, parent_list, depth_list)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            a[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor = lca(u, v, parent_list, depth_list)\n            energy", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure of the maze.\",\n      \"details\": \"Read the input data and store the number of rooms (n), number of queries (q), initial illusion rates (a_i), and the tree structure (edges) in appropriate data structures.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates and queries on the tree.\",\n      \"details\": \"Use a data structure like a segment tree or a Fenwick tree to manage the illusion rates and efficiently compute the minimum energy required for type 2 queries.\"\n    },\n    {\n      \"description\": \"Handle type 1 queries to update the illusion rate of a specific room.\",\n      \"details\": \"Update the data structure to reflect the change in the illusion rate of the specified room.\"\n    },\n    {\n      \"description\": \"Handle type 2 queries to compute the minimum energy required to travel from room u to room v.\",\n      \"details\": \"Use a tree traversal algorithm (e.g., DFS) to find the path from room u to room v and calculate the energy required using the given formula.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure.\",\n    \"Initialize a data structure to manage the illusion rates and efficiently compute the minimum energy required for type 2 queries.\",\n    \"For each query, determine its type:\",\n    \"  - If it's a type 1 query, update the illusion rate of the specified room in the data structure.\",\n    \"  - If it's a type 2 query, find the path from room u to room v using a tree traversal algorithm and compute the energy required.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def dfs(node, parent, depth, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in tree[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list):\n    energy = 0\n    while u != v:\n        parent_u = parent_list[u]\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_u]), abs(illusion_rates[u] - illusion_rates[parent_u]))\n        u = parent_u\n    return energy\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    dfs(1, -1, 0, parent_list, depth_list)\n    \n    result = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor =", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 66)"}, "Round_1": {"code": "def dfs(node, parent, depth, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in tree[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list):\n    energy = 0\n    while u != v:\n        parent_u = parent_list[u]\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_u]), abs(illusion_rates[u] - illusion_rates[parent_u]))\n        u = parent_u\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    dfs(1, -1, 0, parent_list, depth_list)\n    \n    result = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure of the maze.\",\n      \"tasks\": [\n        \"Read the number of rooms (n) and number of queries (q).\",\n        \"Read the initial illusion rates for each room.\",\n        \"Read the n-1 pairs of integers representing the tunnels connecting the rooms.\",\n        \"Read the q queries.\"\n      ]\n    },\n    {\n      \"description\": \"Represent the maze as a tree data structure to facilitate traversal and query processing.\",\n      \"tasks\": [\n        \"Construct a tree using adjacency lists from the given tunnels.\",\n        \"Ensure the tree structure allows efficient traversal and updates.\"\n      ]\n    },\n    {\n      \"description\": \"Implement functionality to update the illusion rate of a room.\",\n      \"tasks\": [\n        \"For a type 1 query, update the illusion rate of the specified room.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms.\",\n      \"tasks\": [\n        \"For a type 2 query, find the path between the specified rooms using tree traversal.\",\n        \"Calculate the energy required for each segment of the path using the given formula.\",\n        \"Sum the energies to find the total energy required.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize query processing to handle large input sizes efficiently.\",\n      \"tasks\": [\n        \"Consider using data structures like segment trees or binary indexed trees for efficient updates and queries.\",\n        \"Implement pathfinding using techniques like depth-first search (DFS) or breadth-first search (BFS) to find paths quickly.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Construct the tree representation of the maze.\",\n    \"Implement functions to handle type 1 and type 2 queries.\",\n    \"Optimize the solution to handle large input sizes efficiently.\",\n    \"Output the results for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def dfs(node, parent, depth, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in tree[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list):\n    energy = 0\n    while u != v:\n        parent_u = parent_list[u]\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_u]), abs(illusion_rates[u] - illusion_rates[parent_u]))\n        u = parent_u\n    return energy\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    dfs(1, -1, 0, parent_list, depth_list)\n    \n    result = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures representing the tree of rooms and the list of queries.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates and queries on the tree structure, such as a Segment Tree or a Fenwick Tree.\",\n      \"output\": \"A data structure that supports efficient updates and path queries.\"\n    },\n    {\n      \"description\": \"Develop a function to handle type 1 queries, which update the illusion rate of a specific room.\",\n      \"output\": \"Updated data structure reflecting the new illusion rates.\"\n    },\n    {\n      \"description\": \"Develop a function to handle type 2 queries, which calculate the minimum energy required to travel from one room to another.\",\n      \"output\": \"The minimum energy required for each type 2 query.\"\n    },\n    {\n      \"description\": \"Implement a function to calculate the energy cost between two connected rooms based on their illusion rates.\",\n      \"output\": \"Energy cost for a given tunnel between two rooms.\"\n    },\n    {\n      \"description\": \"Optimize the pathfinding algorithm to efficiently compute the minimum energy path using techniques like Depth-First Search (DFS) and Lowest Common Ancestor (LCA).\",\n      \"output\": \"Efficient pathfinding mechanism to support type 2 queries.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, queries, initial illusion rates, and room connections.\",\n    \"Construct the tree structure using the room connections.\",\n    \"Initialize a data structure to manage updates and queries on the tree.\",\n    \"For each query, determine its type and execute the corresponding function:\",\n    \"  - For type 1 queries, update the illusion rate of the specified room.\",\n    \"  - For type 2 queries, calculate the minimum energy required to travel from the starting room to the destination room using the pathfinding mechanism.\",\n    \"Output the results for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def dfs(node, parent, depth, adj, illusion_rates, energy_cost, parent_list):\n    parent_list[node] = parent\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            energy_cost[neighbor] = energy_cost[node] + max(abs(illusion_rates[node] + illusion_rates[neighbor]), abs(illusion_rates[node] - illusion_rates[neighbor]))\n            dfs(neighbor, node, depth + 1, adj, illusion_rates, energy_cost, parent_list)\n\ndef lca(u, v, parent_list, depth):\n    if depth[u] < depth[v]:\n        u, v = v, u\n    while depth[u] > depth[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    energy_cost = [0] * (n + 1)\n    parent_list = [0] * (n + 1)\n    depth = [0] * (n + 1)\n    \n    dfs(1, -1, 0, adj, illusion_rates, energy_cost, parent_list)\n    \n    output = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n            energy_cost = [0] * (n + 1)\n            dfs(1, -1, 0, adj, illusion_rates, energy_cost, parent_list)\n        elif query_type ==", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 59)"}, "Round_1": {"code": "def dfs(node, parent, depth, adj, illusion_rates, energy_cost, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            energy_cost[neighbor] = energy_cost[node] + max(abs(illusion_rates[node] + illusion_rates[neighbor]), abs(illusion_rates[node] - illusion_rates[neighbor]))\n            dfs(neighbor, node, depth + 1, adj, illusion_rates, energy_cost, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    energy_cost = [0] * (n + 1)\n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, -1, 0, adj, illusion_rates, energy_cost, parent_list, depth_list)\n    \n    output = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n            energy_cost = [0] * (n + 1)\n            dfs(1, -1, 0, adj,"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures representing the tree of rooms and the list of queries.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates to the illusion rates of rooms.\",\n      \"output\": \"A data structure that allows for quick updates to the illusion rates.\"\n    },\n    {\n      \"description\": \"Implement a method to calculate the minimum energy required to travel between two rooms given the current illusion rates.\",\n      \"output\": \"A function that computes the minimum energy for a given path in the tree.\"\n    },\n    {\n      \"description\": \"Handle type 1 queries by updating the illusion rate of a specified room.\",\n      \"output\": \"Updated data structure reflecting the new illusion rate.\"\n    },\n    {\n      \"description\": \"Handle type 2 queries by calculating the minimum energy required to travel from one room to another.\",\n      \"output\": \"The minimum energy required for each type 2 query.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct a tree data structure to represent the maze using the room connections.\",\n    \"Initialize a data structure to store and update the illusion rates of each room.\",\n    \"For each query, determine the type of query:\",\n    \"  - If it is a type 1 query, update the illusion rate of the specified room.\",\n    \"  - If it is a type 2 query, calculate the minimum energy required to travel from the starting room to the destination room using the current illusion rates.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            queries.append((query_type, u, c))\n        else:\n            v = int(data[index]) - 1\n            index += 1\n            queries.append((query_type, u, v))\n    \n    # Preprocessing for LCA and distance calculation\n    parent = [-1] * n\n    depth = [0] * n\n    max_log = 17  # Since n <= 100000, log2(100000) is approximately 17\n    up = [[-1] * max_log for _ in range(n)]\n    \n    def dfs(v, p, d):\n        parent[v] = p\n        depth[v] = d\n        up[v][0] = p\n        for i in range(1, max_log):\n            if up[v][i - 1] != -1:\n                up[v][i] = up[up[v][i - 1]][i - 1]\n        for u in tree[v]:\n            if u != p:\n                dfs(u, v, d + 1)\n    \n    dfs(0, -1, 0)\n    \n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        diff = depth[u] - depth[v]\n        for i in range(max_log):\n            if (diff >> i) & 1:\n                u = up[u][i]\n        if", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 64)"}, "Round_1": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            queries.append((query_type, u, c))\n        else:\n            v = int(data[index]) - 1\n            index += 1\n            queries.append((query_type, u, v))\n    \n    # Preprocessing for LCA and distance calculation\n    parent = [-1] * n\n    depth = [0] * n\n    max_log = 17  # Since n <= 100000, log2(100000) is approximately 17\n    up = [[-1] * max_log for _ in range(n)]\n    \n    def dfs(v, p, d):\n        parent[v] = p\n        depth[v] = d\n        up[v][0] = p\n        for i in range(1, max_log):\n            if up[v][i - 1] != -1:\n                up[v][i] = up[up[v][i - 1]][i - 1]\n        for u in tree[v]:\n            if u != p:\n                dfs(u, v, d + 1)\n    \n    dfs(0, -1, 0)\n    \n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        diff = depth[u] - depth[v]\n        for i in range(max_log):\n            if (diff >> i) & 1:\n                u = up[u][i]\n        if u == v:\n            return u"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms, queries, initial illusion rates, and adjacency list for the tree.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates and queries on the tree structure.\",\n      \"output\": \"A segment tree or similar data structure to manage updates and path queries efficiently.\"\n    },\n    {\n      \"description\": \"Handle the update query to change the illusion rate of a specific room.\",\n      \"output\": \"Update the data structure to reflect the new illusion rate for the specified room.\"\n    },\n    {\n      \"description\": \"Handle the path query to calculate the minimum energy required to travel from one room to another.\",\n      \"output\": \"Use the data structure to compute the minimum energy required for the path between two rooms.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct an adjacency list to represent the tree structure of the maze.\",\n    \"Initialize a data structure (e.g., segment tree) to manage updates and queries efficiently.\",\n    \"For each query, determine its type:\",\n    \"  - If it's an update query, modify the illusion rate of the specified room in the data structure.\",\n    \"  - If it's a path query, calculate the minimum energy required to travel from the starting room to the destination room using the data structure.\",\n    \"Output the result for each path query.\"\n  ]\n}\n```", "Round_0": {"code": "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list):\n    energy = 0\n    while u != v:\n        parent_u = parent_list[u]\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_u]), abs(illusion_rates[u] - illusion_rates[parent_u]))\n        u = parent_u\n    return energy\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, 0, 0, adj, parent_list, depth_list)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 109)"}, "Round_1": {"code": "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list):\n    energy = 0\n    while u != v:\n        parent_u = parent_list[u]\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_u]), abs(illusion_rates[u] - illusion_rates[parent_u]))\n        u = parent_u\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    \n    dfs(1, 0, 0, adj, parent_list, depth_list)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index])\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index])\n            index += 1\n            ancestor = l"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure of the maze.\",\n      \"steps\": [\n        \"Read the number of rooms (n) and number of queries (q).\",\n        \"Read the initial illusion rates for each room into an array.\",\n        \"Read the n-1 pairs of integers representing tunnels and construct the tree structure using adjacency lists.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a mechanism to efficiently update the illusion rate of a room.\",\n      \"steps\": [\n        \"For a type 1 query, update the illusion rate of the specified room in the array.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms in the tree.\",\n      \"steps\": [\n        \"For a type 2 query, find the path between the specified rooms using a tree traversal algorithm (e.g., DFS or BFS).\",\n        \"Calculate the energy required for each tunnel in the path using the formula max(|a_x + a_y|, |a_x - a_y|).\",\n        \"Sum the energies to get the total energy required for the path.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize the solution to handle up to 100,000 queries efficiently.\",\n      \"steps\": [\n        \"Consider using data structures like segment trees or binary indexed trees to manage updates and queries efficiently.\",\n        \"Implement path compression and union-find techniques to optimize tree traversal.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Construct the tree structure using adjacency lists.\",\n    \"Implement functions to handle type 1 and type 2 queries.\",\n    \"Optimize the solution using advanced data structures and algorithms.\",\n    \"Output the results for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def parse_input(data):\n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 1 else int(data[index + 2]) - 1\n        queries.append((query_type, u, v))\n        index += 3\n    \n    return n, q, illusion_rates, tree, queries\n\ndef bfs_path(tree, start, end):\n    queue = deque([start])\n    parent = {start: None}\n    \n    while queue:\n        node = queue.popleft()\n        if node == end:\n            break\n        for neighbor in tree[node]:\n            if neighbor not in parent:\n                parent[neighbor] = node\n                queue.append(neighbor)\n    \n    path = []\n    while end is not None:\n        path.append(end)\n        end = parent[end]\n    \n    return path[::-1]\n\ndef calculate_energy(illusion_rates, path):\n    energy = 0\n    for i in range(len(path) - 1):\n        x = path[i]\n        y = path[i + 1]\n        energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    return energy\n\ndef process_queries(n, q, illusion_rates, tree, queries):\n    results = []\n    for query_type, u, v in queries:\n        if query_type == 1:\n            illusion_rates[u] = v\n        elif query_type == 2:\n            path = bfs_path(tree, u, v)\n            energy = calculate_energy(illusion_rates, path)\n            results.append(energy)\n    return results\n\ndef main():\n    n, q, illusion_rates, tree, queries = parse_input(data)\n    results =", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 69)"}, "Round_1": {"code": "def parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 1 else int(data[index + 2]) - 1\n        queries.append((query_type, u, v))\n        index += 3\n    \n    return n, q, illusion_rates, tree, queries\n\ndef bfs_path(tree, start, end):\n    queue = deque([start])\n    parent = {start: None}\n    \n    while queue:\n        node = queue.popleft()\n        if node == end:\n            break\n        for neighbor in tree[node]:\n            if neighbor not in parent:\n                parent[neighbor] = node\n                queue.append(neighbor)\n    \n    path = []\n    while end is not None:\n        path.append(end)\n        end = parent[end]\n    \n    return path[::-1]\n\ndef calculate_energy(illusion_rates, path):\n    energy = 0\n    for i in range(len(path) - 1):\n        x = path[i]\n        y = path[i + 1]\n        energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    return energy\n\ndef process_queries(n, q, illusion_rates, tree, queries):\n    results = []\n    for query_type, u, v in queries:\n        if query_type == 1:\n            illusion_rates[u] = v\n        elif query_type == 2:\n            path = bfs_path(tree, u, v)\n            energy = calculate_energy(illusion_rates, path)\n            results.append(energy)\n    return results\n\ndef main():\n    n, q, illusion_rates, tree, queries = parse_input()\n    results"}}], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 4, "round": 71, "prompt": "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, allowing travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate; to travel from the x-th room to the y-th room requires a tunnel between x and y, consuming max(|a_x + a_y|, |a_x - a_y|) energy, where |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure! Consider providing an efficient algorithm to handle these queries within the constraints provided.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "examples": "\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 56}
