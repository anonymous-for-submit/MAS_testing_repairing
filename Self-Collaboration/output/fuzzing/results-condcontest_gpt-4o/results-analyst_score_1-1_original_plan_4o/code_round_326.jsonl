{"name": "1600_F. Party Organization", "description": "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "tags": ["brute force", "math", "probabilities"], "difficulty": 12, "id": 1600, "sample_io": [{"input": "5 4\n1 2\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 4\n", "output": ["1 2 3 5 6\n"]}], "test_list": [{"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "10 8\n5 2\n1 8\n5 7\n1 9\n6 4\n2 7\n8 9\n3 10\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 9\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 0\n", "output": ["1 2 3 4 5\n"]}, {"input": "10 8\n2 7\n2 9\n7 9\n8 10\n5 3\n1 4\n10 6\n6 8\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 2\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "6 3\n1 4\n1 3\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "6 3\n1 2\n4 2\n5 2\n", "output": ["1 3 4 5 6\n"]}, {"input": "6 4\n1 4\n4 1\n2 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "7 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["1 2 4 6 7\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n2 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n5 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 3\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n2 4\n1 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "8 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 6\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 5\n4 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n2 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n2 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n1 6\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 5\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 6\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 2\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n1 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n5 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n1 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 2\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 4\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n1 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 1\n4 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 3\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n2 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n1 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n4 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 5\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 3\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n4 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n1 4\n1 5\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 4\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n4 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n1 3\n4 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n3 2\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n4 1\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n2 4\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 2\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n2 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}], "task_id": "codecontest/76", "repair_prompt": ["In the large island of Baltia, N individuals reside, identified by numbers ranging from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful; on the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other. This ensures that they can all talk to each other without having to worry about talking to someone they are not friends with. Or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so. Note that each pair counts as a bidirectional friendship.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for a in range(1, N + 1):\n            for b in friendships[a]:\n                if b <= a:\n                    continue\n                for c in friendships[a].intersection(friendships[b]):\n                    if c <= b:\n                        continue\n                    for d in friendships[a].intersection(friendships[b], friendships[c]):\n                        if d <= c:\n                            continue\n                        for e in friendships[a].intersection(friendships[b], friendships[c], friendships[d]):\n                            if e <= d:\n                                continue\n                            return [a, b, c, d, e]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) < 5:\n                break\n            if person in non_friends:\n                current_set = {person}\n                for other in non_friends:\n                    if other != person and other not in friendships[person]:\n                        current_set.add(other)\n                    if len(current_set) == 5:\n                        return list(current_set)\n        return None\n    \n    # Try to find a successful party\n    clique = find_clique_of_size_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set_of_size_5()\n    if independent_set:\n        print(\" \".join(map(str, independent_set)))\n        return\n    \n    # If no successful party configuration is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create a graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    \n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(graph[independent_set[x]].isdisjoint(independent_set) for x in range(5)):\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check for a successful party with all friends\n    for combo in combinations(range(1, N + 1), 5):\n        if all((combo[i], combo[j]) in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(' '.join(map(str, combo)))\n            return\n    \n    # Check for a successful party with no friends\n    for combo in combinations(range(1, N + 1), 5):\n        if all((combo[i], combo[j]) not in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(' '.join(map(str, combo)))\n            return\n    \n    # If no successful party is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = [set() for _ in range(N + 1)]\n    \n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships[U].add(V)\n        friendships[V].add(U)\n        index += 2\n    \n    # Generate all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        # Check if the combination is a clique\n        is_clique = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if combo[j] not in friendships[combo[i]]:\n                    is_clique = False\n                    break\n            if not is_clique:\n                break\n        \n        if is_clique:\n            print(' '.join(map(str, combo)))\n            return\n        \n        # Check if the combination is an independent set\n        is_independent_set = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if combo[j] in friendships[combo[i]]:\n                    is_independent_set = False\n                    break\n            if not is_independent_set:\n                break\n        \n        if is_independent_set:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    # Initialize adjacency list\n    friends = {i: set() for i in range(1, N + 1)}\n    \n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friends[U].add(V)\n        friends[V].add(U)\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friends[person]) >= 4:\n                potential_clique = [person] + list(friends[person])\n                if len(potential_clique) >= 5:\n                    for i in range(5):\n                        for j in range(i + 1, 5):\n                            if potential_clique[j] not in friends[potential_clique[i]]:\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        return potential_clique[:5]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) >= 5:\n                potential_set = list(non_friends)\n                for i in range(5):\n                    for j in range(i + 1, 5):\n                        if potential_set[j] in friends[potential_set[i]]:\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    return potential_set[:5]\n            non_friends -= friends[person]\n        return None\n    \n    # Try to find a successful party configuration\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If no configuration is found, print -1\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        index += 2\n        friendships[u].add(v)\n        friendships[v].add(u)\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(friendships[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - friendships[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(friendships[independent_set[x]].intersection(independent_set) == set() for x in range(5)):\n                                    return independent_set\n        return None\n    \n    # Try to find a successful party configuration\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str,\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a complete subgraph of size 5 (clique)\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in friendships[friends[j]] and\n                                    friends[i] in friendships[friends[k]] and\n                                    friends[i] in friendships[friends[l]] and\n                                    friends[j] in friendships[friends[k]] and\n                                    friends[j] in friendships[friends[l]] and\n                                    friends[k] in friendships[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for a set of 5 individuals with no edges between them\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                possible_set = non_friends - friendships[person] - {person}\n                if len(possible_set) >= 4:\n                    return [person] + list(possible_set)[:4]\n        return None\n    \n    # Try to find a successful party configuration\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If no configuration is found, print -1\n    print(-1)\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Generate all combinations of 5 individuals\n    for group in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        # Check if all are friends or none are friends\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in friendships[friends[j]] and\n                                    friends[i] in friendships[friends[k]] and\n                                    friends[i] in friendships[friends[l]] and\n                                    friends[j] in friendships[friends[k]] and\n                                    friends[j] in friendships[friends[l]] and\n                                    friends[k] in friendships[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                possible_set = non_friends - friendships[person] - {person}\n                if len(possible_set) >= 4:\n                    return [person] + list(possible_set)[:4]\n        return None\n    \n    # Try to find a clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set\n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If neither is found, print -1\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Parse friendships\n    friendships = set()\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.add((u, v))\n        friendships.add((v, u))\n        index += 2\n    \n    # Check for a successful party with all friends\n    def all_friends(group):\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) not in friendships:\n                    return False\n        return True\n    \n    # Check for a successful party with no friends\n    def no_friends(group):\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    return False\n        return True\n    \n    # Iterate over all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        if all_friends(group) or no_friends(group):\n            print(' '.join(map(str, group)))\n            return\n    \n    # If no successful party is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for a in range(1, N + 1):\n            for b in friendships[a]:\n                if b <= a:\n                    continue\n                for c in friendships[a].intersection(friendships[b]):\n                    if c <= b:\n                        continue\n                    for d in friendships[a].intersection(friendships[b], friendships[c]):\n                        if d <= c:\n                            continue\n                        for e in friendships[a].intersection(friendships[b], friendships[c], friendships[d]):\n                            if e <= d:\n                                continue\n                            return [a, b, c, d, e]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) < 5:\n                break\n            if person in non_friends:\n                current_set = {person}\n                for other in non_friends:\n                    if other != person and other not in friendships[person]:\n                        current_set.add(other)\n                    if len(current_set) == 5:\n                        return list(current_set)\n        return None\n    \n    # Try to find a successful party\n    clique = find_clique_of_size_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set_of_size_5()\n    if independent_set:\n        print(\" \".join(map(str, independent_set)))\n        return\n    \n    # If no successful party configuration is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where all 5 people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a complete subgraph (clique) of size 5 in the friendship graph.\",\n        \"Use graph traversal techniques to identify cliques.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where no two people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a set of 5 individuals with no edges between them in the friendship graph.\",\n        \"Use graph traversal techniques to identify independent sets.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, print the 5 individuals.\",\n        \"If no configuration is found, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Construct a graph representation using adjacency lists or matrices.\",\n    \"Check for a clique of size 5 in the graph.\",\n    \"Check for an independent set of size 5 in the graph.\",\n    \"Output the result based on the findings.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for a in range(1, N + 1):\n            for b in friendships[a]:\n                if b <= a:\n                    continue\n                for c in friendships[a].intersection(friendships[b]):\n                    if c <= b:\n                        continue\n                    for d in friendships[a].intersection(friendships[b], friendships[c]):\n                        if d <= c:\n                            continue\n                        for e in friendships[a].intersection(friendships[b], friendships[c], friendships[d]):\n                            if e <= d:\n                                continue\n                            return [a, b, c, d, e]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) < 5:\n                break\n            if person in non_friends:\n                current_set = {person}\n                for other in non_friends:\n                    if other != person and other not in friendships[person]:\n                        current_set.add(other)\n                    if len(current_set) == 5:\n                        return list(current_set)\n        return None\n    \n    # Try to find a successful party\n    clique = find_clique_of_size_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set_of_size_5()\n    if independent_set:\n        print(\" \".join(map(str, independent_set)))\n        return\n    \n    # If no successful party configuration is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"output\": \"A list of friendships and the values of N and M.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"A graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Check for a clique of size 5 in the graph, where all 5 people are friends with each other.\",\n      \"output\": \"A list of 5 people forming a clique or an indication that no such clique exists.\"\n    },\n    {\n      \"description\": \"Check for an independent set of size 5 in the graph, where no two people are friends with each other.\",\n      \"output\": \"A list of 5 people forming an independent set or an indication that no such set exists.\"\n    },\n    {\n      \"description\": \"Determine if either a clique or an independent set of size 5 exists and output the result.\",\n      \"output\": \"5 numbers indicating a successful party or -1 if no successful party is possible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"Construct a graph using the parsed friendships.\",\n    \"Implement a function to search for a clique of size 5 in the graph.\",\n    \"Implement a function to search for an independent set of size 5 in the graph.\",\n    \"Check the results of the clique and independent set functions.\",\n    \"If a clique or independent set is found, print the 5 people involved.\",\n    \"If neither is found, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create a graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    \n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(graph[independent_set[x]].isdisjoint(independent_set) for x in range(5)):", "report": "The compilation output of the preceding code is: expected an indented block (<string>, line 56)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create a graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    \n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(graph[independent_set[x]].isdisjoint(independent_set) for x in range(5)):"}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"description\": \"Read the input data and store the number of individuals, number of friendships, and the friendship pairs in appropriate data structures.\"\n    },\n    {\n      \"subproblem\": \"Check for a successful party with all friends.\",\n      \"description\": \"Identify if there exists a group of 5 individuals where each individual is friends with every other individual in the group.\"\n    },\n    {\n      \"subproblem\": \"Check for a successful party with no friends.\",\n      \"description\": \"Identify if there exists a group of 5 individuals where no individual is friends with any other individual in the group.\"\n    },\n    {\n      \"subproblem\": \"Output the result.\",\n      \"description\": \"If a successful party is found, output the 5 individuals. If no successful party is possible, output -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"description\": \"Read the input values for N, M, and the friendship pairs. Store the friendship pairs in a suitable data structure, such as an adjacency list or matrix.\"\n    },\n    {\n      \"step\": \"Check for All Friends Party\",\n      \"description\": \"Iterate through combinations of 5 individuals and check if all pairs within the combination are friends using the stored friendship data.\"\n    },\n    {\n      \"step\": \"Check for No Friends Party\",\n      \"description\": \"Iterate through combinations of 5 individuals and check if no pairs within the combination are friends using the stored friendship data.\"\n    },\n    {\n      \"step\": \"Output Result\",\n      \"description\": \"If a valid combination is found in either of the previous steps, print the 5 individuals. Otherwise, print -1.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check for a successful party with all friends\n    for combo in combinations(range(1, N + 1), 5):\n        if all((combo[i], combo[j]) in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(' '.join(map(str, combo)))\n            return\n    \n    # Check for a successful party with no friends\n    for combo in combinations(range(1, N + 1), 5):\n        if all((combo[i], combo[j]) not in friendships for i in range(5) for j in range(i + 1, 5)):\n            print(' '.join(map(str, combo)))\n            return\n    \n    # If no successful party is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"output\": \"A graph representation of friendships using an adjacency list or adjacency matrix.\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N individuals.\",\n      \"output\": \"A list of all possible 5-person combinations.\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if all are friends with each other.\",\n      \"output\": \"A boolean indicating if the combination is a complete subgraph (clique) of size 5.\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if no two people are friends with each other.\",\n      \"output\": \"A boolean indicating if the combination is an independent set of size 5.\"\n    },\n    {\n      \"description\": \"Determine if there exists at least one successful party configuration.\",\n      \"output\": \"Either a list of 5 people for a successful party or -1 if no such configuration exists.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendships. Represent the friendships as a graph using an adjacency list or matrix.\",\n    \"Generate all possible combinations of 5 people from the N individuals.\",\n    \"For each combination, check if it forms a clique by verifying that every pair of people in the combination are friends.\",\n    \"If a clique is found, output the combination as a successful party and terminate.\",\n    \"If no clique is found, for each combination, check if it forms an independent set by verifying that no pair of people in the combination are friends.\",\n    \"If an independent set is found, output the combination as a successful party and terminate.\",\n    \"If neither a clique nor an independent set is found for any combination, output -1 indicating that a successful party is not possible.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = [set() for _ in range(N + 1)]\n    \n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships[U].add(V)\n        friendships[V].add(U)\n        index += 2\n    \n    # Generate all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        # Check if the combination is a clique\n        is_clique = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if combo[j] not in friendships[combo[i]]:\n                    is_clique = False\n                    break\n            if not is_clique:\n                break\n        \n        if is_clique:\n            print(' '.join(map(str, combo)))\n            return\n        \n        # Check if the combination is an independent set\n        is_independent_set = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if combo[j] in friendships[combo[i]]:\n                    is_independent_set = False\n                    break\n            if not is_independent_set:\n                break\n        \n        if is_independent_set:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where all 5 people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a complete subgraph (clique) of size 5 in the friendship graph.\",\n        \"Use graph traversal techniques to identify cliques.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where no two people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a set of 5 individuals with no edges between them in the friendship graph.\",\n        \"Use graph traversal techniques to identify independent sets.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, print the 5 individuals.\",\n        \"If no configuration is found, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Construct a graph representation using adjacency lists or matrices.\",\n    \"Check for a clique of size 5 in the graph.\",\n    \"Check for an independent set of size 5 in the graph.\",\n    \"Output the result based on the findings.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    # Initialize adjacency list\n    friends = {i: set() for i in range(1, N + 1)}\n    \n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friends[U].add(V)\n        friends[V].add(U)\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friends[person]) >= 4:\n                potential_clique = [person] + list(friends[person])\n                if len(potential_clique) >= 5:\n                    for i in range(5):\n                        for j in range(i + 1, 5):\n                            if potential_clique[j] not in friends[potential_clique[i]]:\n                                break\n                        else:\n                            continue\n                        break\n                    else:\n                        return potential_clique[:5]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) >= 5:\n                potential_set = list(non_friends)\n                for i in range(5):\n                    for j in range(i + 1, 5):\n                        if potential_set[j] in friends[potential_set[i]]:\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    return potential_set[:5]\n            non_friends -= friends[person]\n        return None\n    \n    # Try to find a successful party configuration\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If no configuration is found, print -1\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where all 5 people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a complete subgraph (clique) of size 5 in the friendship graph.\",\n        \"Use graph traversal techniques to identify cliques.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where no two people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a set of 5 individuals with no edges between them in the friendship graph.\",\n        \"Use graph traversal techniques to identify independent sets.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, print the 5 individuals.\",\n        \"If no configuration is found, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Construct a graph representation using adjacency lists or matrices.\",\n    \"Check for a clique of size 5 in the graph.\",\n    \"Check for an independent set of size 5 in the graph.\",\n    \"Output the result based on the checks.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        index += 2\n        friendships[u].add(v)\n        friendships[v].add(u)\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(friendships[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - friendships[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(friendships[independent_set[x]].intersection(independent_set) == set() for x in range(5)):\n                                    return independent_set\n        return None\n    \n    # Try to find a successful party configuration\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str,", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 55)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        index += 2\n        friendships[u].add(v)\n        friendships[v].add(u)\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(friendships[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - friendships[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(friendships[independent_set[x]].intersection(independent_set) == set() for x in range(5)):\n                                    return independent_set\n        return None\n    \n    # Try to find a successful party configuration\n    clique = find_clique_of_size_5()\n    if clique:\n        print(' '.join(map(str,"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where all 5 people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a complete subgraph (clique) of size 5 in the friendship graph.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where no two people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a set of 5 individuals with no edges between them in the friendship graph.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, print the 5 individuals.\",\n        \"If no configuration is found, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendship pairs.\",\n    \"Construct a graph representation using adjacency lists or matrices.\",\n    \"Check for a complete subgraph of size 5 (clique) in the graph.\",\n    \"Check for a set of 5 individuals with no edges between them in the graph.\",\n    \"Output the result based on the findings: either the list of 5 individuals or -1 if no successful party can be organized.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a complete subgraph of size 5 (clique)\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in friendships[friends[j]] and\n                                    friends[i] in friendships[friends[k]] and\n                                    friends[i] in friendships[friends[l]] and\n                                    friends[j] in friendships[friends[k]] and\n                                    friends[j] in friendships[friends[l]] and\n                                    friends[k] in friendships[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for a set of 5 individuals with no edges between them\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                possible_set = non_friends - friendships[person] - {person}\n                if len(possible_set) >= 4:\n                    return [person] + list(possible_set)[:4]\n        return None\n    \n    # Try to find a successful party configuration\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If no configuration is found, print -1\n    print(-1)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"description\": \"Read the input data and store the number of individuals, number of friendships, and the friendship pairs in appropriate data structures.\"\n    },\n    {\n      \"subproblem\": \"Identify potential groups of 5 individuals.\",\n      \"description\": \"Generate all possible combinations of 5 individuals from the list of N individuals.\"\n    },\n    {\n      \"subproblem\": \"Check if a group of 5 individuals is a successful party.\",\n      \"description\": \"For each group of 5 individuals, check if all individuals are friends with each other or if no individuals are friends with each other.\"\n    },\n    {\n      \"subproblem\": \"Output the result.\",\n      \"description\": \"If a successful party is found, output the 5 individuals. If no successful party is found, output -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"description\": \"Read the input values for N, M, and the friendship pairs. Store these values in appropriate data structures such as lists or sets.\"\n    },\n    {\n      \"step\": \"Generate Combinations\",\n      \"description\": \"Use combinatorial logic to generate all possible combinations of 5 individuals from the list of N individuals.\"\n    },\n    {\n      \"step\": \"Evaluate Combinations\",\n      \"description\": \"For each combination of 5 individuals, evaluate if they form a successful party by checking the friendship conditions.\"\n    },\n    {\n      \"step\": \"Output Result\",\n      \"description\": \"If a successful party is found, print the 5 individuals. If no successful party is found after evaluating all combinations, print -1.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Generate all combinations of 5 individuals\n    for group in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        # Check if all are friends or none are friends\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, group)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"output\": \"A list of friendships and the values of N and M.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"A graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Check for a clique of size 5 in the graph, where all 5 people are friends with each other.\",\n      \"output\": \"A list of 5 people if such a clique exists, otherwise continue.\"\n    },\n    {\n      \"description\": \"Check for an independent set of size 5 in the graph, where no two people are friends with each other.\",\n      \"output\": \"A list of 5 people if such an independent set exists, otherwise continue.\"\n    },\n    {\n      \"description\": \"Determine if it's impossible to organize a successful party based on the above checks.\",\n      \"output\": \"-1 if no successful party configuration is found.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"Construct a graph using the parsed friendships.\",\n    \"Search for a clique of size 5 in the graph. If found, output the 5 people.\",\n    \"If no clique is found, search for an independent set of size 5. If found, output the 5 people.\",\n    \"If neither a clique nor an independent set of size 5 is found, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse friendships\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(friendships[person]) >= 4:\n                friends = list(friendships[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in friendships[friends[j]] and\n                                    friends[i] in friendships[friends[k]] and\n                                    friends[i] in friendships[friends[l]] and\n                                    friends[j] in friendships[friends[k]] and\n                                    friends[j] in friendships[friends[l]] and\n                                    friends[k] in friendships[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(friendships[person]) < N - 1:\n                possible_set = non_friends - friendships[person] - {person}\n                if len(possible_set) >= 4:\n                    return [person] + list(possible_set)[:4]\n        return None\n    \n    # Try to find a clique\n    clique = find_clique()\n    if clique:\n        print(' '.join(map(str, clique)))\n        return\n    \n    # Try to find an independent set\n    independent_set = find_independent_set()\n    if independent_set:\n        print(' '.join(map(str, independent_set)))\n        return\n    \n    # If neither is found, print -1\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"description\": \"Read the input data and store the number of individuals, number of friendships, and the friendship pairs in appropriate data structures.\"\n    },\n    {\n      \"subproblem\": \"Check for a successful party with all friends.\",\n      \"description\": \"Identify if there exists a group of 5 individuals where each individual is friends with every other individual in the group.\"\n    },\n    {\n      \"subproblem\": \"Check for a successful party with no friends.\",\n      \"description\": \"Identify if there exists a group of 5 individuals where no individual is friends with any other individual in the group.\"\n    },\n    {\n      \"subproblem\": \"Output the result.\",\n      \"description\": \"If a successful party is found, output the 5 individuals. If no successful party is possible, output -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"description\": \"Read the input values for N, M, and the friendship pairs. Store the friendships in a suitable data structure, such as an adjacency list or matrix.\"\n    },\n    {\n      \"step\": \"All Friends Check\",\n      \"description\": \"Iterate over all possible combinations of 5 individuals. For each combination, check if all individuals are friends with each other using the friendship data structure.\"\n    },\n    {\n      \"step\": \"No Friends Check\",\n      \"description\": \"Iterate over all possible combinations of 5 individuals. For each combination, check if no individuals are friends with each other using the friendship data structure.\"\n    },\n    {\n      \"step\": \"Result Output\",\n      \"description\": \"If a successful party is found in either check, print the 5 individuals. If no successful party is found, print -1.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Parse friendships\n    friendships = set()\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.add((u, v))\n        friendships.add((v, u))\n        index += 2\n    \n    # Check for a successful party with all friends\n    def all_friends(group):\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) not in friendships:\n                    return False\n        return True\n    \n    # Check for a successful party with no friends\n    def no_friends(group):\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (group[i], group[j]) in friendships:\n                    return False\n        return True\n    \n    # Iterate over all combinations of 5 people\n    for group in combinations(range(1, N + 1), 5):\n        if all_friends(group) or no_friends(group):\n            print(' '.join(map(str, group)))\n            return\n    \n    # If no successful party is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where all 5 people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a complete subgraph (clique) of size 5 in the friendship graph.\",\n        \"Use graph traversal techniques to identify cliques.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized where no two people are friends with each other.\",\n      \"steps\": [\n        \"Check if there exists a set of 5 individuals with no edges between them in the friendship graph.\",\n        \"Use graph traversal techniques to identify independent sets.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, print the 5 individuals.\",\n        \"If no configuration is found, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Construct a graph representation using adjacency lists or matrices.\",\n    \"Check for a clique of size 5 in the graph.\",\n    \"Check for an independent set of size 5 in the graph.\",\n    \"Output the result based on the findings.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    from collections import defaultdict\n    \n    # Parse the friendship pairs\n    friendships = defaultdict(set)\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships[u].add(v)\n        friendships[v].add(u)\n        index += 2\n    \n    # Check for a clique of size 5\n    def find_clique_of_size_5():\n        for a in range(1, N + 1):\n            for b in friendships[a]:\n                if b <= a:\n                    continue\n                for c in friendships[a].intersection(friendships[b]):\n                    if c <= b:\n                        continue\n                    for d in friendships[a].intersection(friendships[b], friendships[c]):\n                        if d <= c:\n                            continue\n                        for e in friendships[a].intersection(friendships[b], friendships[c], friendships[d]):\n                            if e <= d:\n                                continue\n                            return [a, b, c, d, e]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) < 5:\n                break\n            if person in non_friends:\n                current_set = {person}\n                for other in non_friends:\n                    if other != person and other not in friendships[person]:\n                        current_set.add(other)\n                    if len(current_set) == 5:\n                        return list(current_set)\n        return None\n    \n    # Try to find a successful party\n    clique = find_clique_of_size_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return\n    \n    independent_set = find_independent_set_of_size_5()\n    if independent_set:\n        print(\" \".join(map(str, independent_set)))\n        return\n    \n    # If no successful party configuration is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, true, false, false, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 326, "prompt": "In the large island of Baltia, N individuals reside, identified by numbers ranging from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful; on the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other. This ensures that they can all talk to each other without having to worry about talking to someone they are not friends with. Or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so. Note that each pair counts as a bidirectional friendship.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "examples": "\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 211}
