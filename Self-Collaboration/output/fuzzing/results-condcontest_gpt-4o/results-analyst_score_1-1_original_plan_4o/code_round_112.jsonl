{"name": "1600_F. Party Organization", "description": "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "tags": ["brute force", "math", "probabilities"], "difficulty": 12, "id": 1600, "sample_io": [{"input": "5 4\n1 2\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 4\n", "output": ["1 2 3 5 6\n"]}], "test_list": [{"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "10 8\n5 2\n1 8\n5 7\n1 9\n6 4\n2 7\n8 9\n3 10\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 9\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 0\n", "output": ["1 2 3 4 5\n"]}, {"input": "10 8\n2 7\n2 9\n7 9\n8 10\n5 3\n1 4\n10 6\n6 8\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 2\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "6 3\n1 4\n1 3\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "6 3\n1 2\n4 2\n5 2\n", "output": ["1 3 4 5 6\n"]}, {"input": "6 4\n1 4\n4 1\n2 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "7 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["1 2 4 6 7\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n2 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n5 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 3\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n2 4\n1 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "8 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 6\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 5\n4 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n2 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n2 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n1 6\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 5\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 6\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 2\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n1 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n5 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n1 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 2\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 4\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n1 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 1\n4 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 3\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n2 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n1 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n4 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 5\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 3\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n4 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n1 4\n1 5\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 4\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n4 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n1 3\n4 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n3 2\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n4 1\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n2 4\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 2\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n2 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}], "task_id": "codecontest/76", "repair_prompt": ["On the great island of Baltia, there live N individuals, numbered from 1 to N. There are precisely M pairs of persons that have a friendship with one another. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. A party on Baltia comprises exactly 5 people and is considered successful if either all are friends allowing uninterrupted conversation, or no two are friends enabling phone engagement without disturbance. Please help the people of Baltia organize a successful party or tell them that it's impossible to do so. Consider all possible configurations of friendships to determine the party's success potential.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(graph[independent_set[x]].intersection(independent_set) == set() for x in range(5)):\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return\n    \n    # Check for an independent set of size\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U_i = int(data[index])\n        V_i = int(data[index + 1])\n        friendships.add((U_i, V_i))\n        friendships.add((V_i, U_i))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(graph[independent_set[x]].intersection(independent_set) == set() for x in range(5)):\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    # Initialize adjacency list for friendships\n    friends = [set() for _ in range(N + 1)]\n    \n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friends[U].add(V)\n        friends[V].add(U)\n    \n    # Check for a fully connected group of 5 friends\n    def is_fully_connected(group):\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if group[j] not in friends[group[i]]:\n                    return False\n        return True\n    \n    # Check for a group of 5 individuals with no friendships\n    def is_non_connected(group):\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if group[j] in friends[group[i]]:\n                    return False\n        return True\n    \n    # Try all combinations of 5 people\n    from itertools import combinations\n    \n    for group in combinations(range(1, N + 1), 5):\n        if is_fully_connected(group) or is_non_connected(group):\n            print(' '.join(map(str, group)))\n            return\n    \n    # If no successful party configuration is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    graph = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for a in range(1, N + 1):\n            for b in graph[a]:\n                if b <= a:\n                    continue\n                for c in graph[a].intersection(graph[b]):\n                    if c <= b:\n                        continue\n                    for d in graph[a].intersection(graph[b], graph[c]):\n                        if d <= c:\n                            continue\n                        for e in graph[a].intersection(graph[b], graph[c], graph[d]):\n                            if e <= d:\n                                continue\n                            return [a, b, c, d, e]\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for a in range(1, N + 1):\n            for b in range(a + 1, N + 1):\n                if b in graph[a]:\n                    continue\n                for c in range(b + 1, N + 1):\n                    if c in graph[a] or c in graph[b]:\n                        continue\n                    for d in range(c + 1, N + 1):\n                        if d in graph[a] or d in graph[b] or d in graph[c]:\n                            continue\n                        for e in range(d + 1, N + 1):\n                            if e in graph[a] or e in graph[b] or e in graph[c] or e in graph[d]:\n                                continue\n                            return [a, b, c, d, e]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs (U_i, V_i).\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized with exactly 5 people.\",\n      \"steps\": [\n        \"Check if there exists a group of 5 people where all are friends.\",\n        \"Check if there exists a group of 5 people where no two are friends.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, output the 5 individuals.\",\n        \"If no successful party configuration is found, output -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Create a data structure to represent the friendships (e.g., adjacency list or matrix).\",\n    \"Iterate over all possible combinations of 5 individuals.\",\n    \"For each combination, check if all 5 are friends or if none are friends.\",\n    \"If a valid combination is found, print the 5 individuals.\",\n    \"If no valid combination is found after checking all possibilities, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Check for a complete subgraph (clique) of size 5 in the graph, where all 5 individuals are friends with each other.\",\n      \"output\": \"List of 5 individuals forming a clique or indication that no such clique exists.\"\n    },\n    {\n      \"description\": \"Check for an independent set of size 5 in the graph, where no two individuals are friends with each other.\",\n      \"output\": \"List of 5 individuals forming an independent set or indication that no such set exists.\"\n    },\n    {\n      \"description\": \"Determine if either a clique or an independent set of size 5 exists and output the result.\",\n      \"output\": \"5 numbers indicating a successful party configuration or -1 if impossible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendship pairs.\",\n    \"Construct a graph representation of the friendships.\",\n    \"Search for a clique of size 5 in the graph.\",\n    \"If a clique is found, output the 5 individuals forming the clique.\",\n    \"If no clique is found, search for an independent set of size 5.\",\n    \"If an independent set is found, output the 5 individuals forming the independent set.\",\n    \"If neither a clique nor an independent set is found, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(graph[independent_set[x]].intersection(independent_set) == set() for x in range(5)):", "report": "The compilation output of the preceding code is: expected an indented block (<string>, line 55)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(graph[independent_set[x]].intersection(independent_set) == set() for x in range(5)):"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs (U_i, V_i).\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized with exactly 5 people.\",\n      \"steps\": [\n        \"Check if there exists a group of 5 people where all are friends.\",\n        \"Check if there exists a group of 5 people where no two are friends.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, print the 5 individuals.\",\n        \"If no successful party configuration is found, print -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Create a representation of the friendships using a suitable data structure (e.g., adjacency list or matrix).\",\n    \"Iterate over all possible combinations of 5 individuals.\",\n    \"For each combination, check if all 5 individuals are friends or if none are friends.\",\n    \"If a valid combination is found, output the 5 individuals.\",\n    \"If no valid combination is found after checking all possibilities, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Check for a complete subgraph (clique) of size 5 in the graph, where all 5 individuals are friends with each other.\",\n      \"output\": \"List of 5 individuals if such a clique exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Check for an independent set of size 5 in the graph, where no two individuals are friends with each other.\",\n      \"output\": \"List of 5 individuals if such an independent set exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Determine if either a clique or an independent set of size 5 exists and output the result.\",\n      \"output\": \"5 numbers indicating the individuals to invite or -1 if no successful party is possible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendship pairs.\",\n    \"Construct a graph representation of the friendships.\",\n    \"Search for a clique of size 5 in the graph.\",\n    \"If a clique is found, output the 5 individuals.\",\n    \"If no clique is found, search for an independent set of size 5.\",\n    \"If an independent set is found, output the 5 individuals.\",\n    \"If neither a clique nor an independent set is found, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return\n    \n    # Check for an independent set of size", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 3 were given"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to find a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Function to find an independent set of size 5\n    def find_independent_set_of_size_5():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(graph[person]) < N - 1:\n                non_friends -= graph[person]\n                non_friends.discard(person)\n                if len(non_friends) >= 4:\n                    return [person] + list(non_friends)[:4]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return\n    \n    # Check for an independent set of size"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs (U_i, V_i).\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized with exactly 5 people.\",\n      \"steps\": [\n        \"Check if there exists a group of 5 people where all are friends.\",\n        \"Check if there exists a group of 5 people where no two are friends.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, output the 5 individuals.\",\n        \"If no successful party configuration is found, output -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Create a data structure to represent the friendships (e.g., adjacency list or matrix).\",\n    \"Iterate over all possible combinations of 5 individuals.\",\n    \"For each combination, check if all 5 are friends or if none are friends.\",\n    \"If a valid combination is found, print the 5 individuals.\",\n    \"If no valid combination is found after checking all possibilities, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U_i = int(data[index])\n        V_i = int(data[index + 1])\n        friendships.add((U_i, V_i))\n        friendships.add((V_i, U_i))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Check for a complete subgraph (clique) of size 5 in the graph, where all 5 individuals are friends with each other.\",\n      \"output\": \"List of 5 individuals if such a clique exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Check for an independent set of size 5 in the graph, where no two individuals are friends with each other.\",\n      \"output\": \"List of 5 individuals if such an independent set exists, otherwise null.\"\n    },\n    {\n      \"description\": \"Determine if either a clique or an independent set of size 5 exists and output the result.\",\n      \"output\": \"List of 5 individuals for a successful party or -1 if no such configuration exists.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to obtain N, M, and the list of friendship pairs.\",\n    \"Construct a graph representation of the friendships.\",\n    \"Search for a clique of size 5 in the graph.\",\n    \"If a clique is found, output the list of 5 individuals.\",\n    \"If no clique is found, search for an independent set of size 5.\",\n    \"If an independent set is found, output the list of 5 individuals.\",\n    \"If neither a clique nor an independent set is found, output -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(graph[independent_set[x]].intersection(independent_set) == set() for x in range(5)):", "report": "The compilation output of the preceding code is: expected an indented block (<string>, line 55)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse the input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    friendships = []\n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friendships.append((U, V))\n    \n    # Create graph representation using adjacency list\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for u, v in friendships:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                clique = [person, friends[i], friends[j], friends[k], friends[l]]\n                                if all(graph[clique[x]].intersection(clique) == set(clique) - {clique[x]} for x in range(5)):\n                                    return clique\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            non_friends = all_people - graph[person] - {person}\n            if len(non_friends) >= 4:\n                non_friends = list(non_friends)\n                for i in range(len(non_friends)):\n                    for j in range(i + 1, len(non_friends)):\n                        for k in range(j + 1, len(non_friends)):\n                            for l in range(k + 1, len(non_friends)):\n                                independent_set = [person, non_friends[i], non_friends[j], non_friends[k], non_friends[l]]\n                                if all(graph[independent_set[x]].intersection(independent_set) == set() for x in range(5)):"}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Parse the input data\",\n      \"description\": \"Read the number of individuals (N) and the number of friendships (M). Then, read the M pairs of friendships.\"\n    },\n    {\n      \"subproblem\": \"Represent friendships as a graph\",\n      \"description\": \"Use an adjacency list or adjacency matrix to represent the friendships between individuals.\"\n    },\n    {\n      \"subproblem\": \"Check for a fully connected group of 5 friends\",\n      \"description\": \"Determine if there exists a subset of 5 individuals where each individual is friends with every other individual in the subset.\"\n    },\n    {\n      \"subproblem\": \"Check for a group of 5 individuals with no friendships\",\n      \"description\": \"Determine if there exists a subset of 5 individuals where no individual is friends with any other individual in the subset.\"\n    },\n    {\n      \"subproblem\": \"Output the result\",\n      \"description\": \"If a successful party configuration is found, output the 5 individuals. If no configuration is possible, output -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"description\": \"Read the input values for N and M, followed by the M pairs of friendships.\"\n    },\n    {\n      \"step\": \"Graph Construction\",\n      \"description\": \"Construct a graph using the input data to represent friendships between individuals.\"\n    },\n    {\n      \"step\": \"Search for Fully Connected Subset\",\n      \"description\": \"Implement a search algorithm to find a subset of 5 individuals where all are friends with each other.\"\n    },\n    {\n      \"step\": \"Search for Non-connected Subset\",\n      \"description\": \"Implement a search algorithm to find a subset of 5 individuals where none are friends with each other.\"\n    },\n    {\n      \"step\": \"Result Output\",\n      \"description\": \"Output the indices of the 5 individuals if a successful party configuration is found, otherwise output -1.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    # Initialize adjacency list for friendships\n    friends = [set() for _ in range(N + 1)]\n    \n    for _ in range(M):\n        U = int(data[index])\n        index += 1\n        V = int(data[index])\n        index += 1\n        friends[U].add(V)\n        friends[V].add(U)\n    \n    # Check for a fully connected group of 5 friends\n    def is_fully_connected(group):\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if group[j] not in friends[group[i]]:\n                    return False\n        return True\n    \n    # Check for a group of 5 individuals with no friendships\n    def is_non_connected(group):\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if group[j] in friends[group[i]]:\n                    return False\n        return True\n    \n    # Try all combinations of 5 people\n    from itertools import combinations\n    \n    for group in combinations(range(1, N + 1), 5):\n        if is_fully_connected(group) or is_non_connected(group):\n            print(' '.join(map(str, group)))\n            return\n    \n    # If no successful party configuration is found\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs (U_i, V_i).\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized with exactly 5 people.\",\n      \"steps\": [\n        \"Check if there exists a group of 5 people where all are friends.\",\n        \"Check if there exists a group of 5 people where no two are friends.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, output the 5 individuals.\",\n        \"If no successful party configuration is found, output -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Create a representation of the friendships using a graph or adjacency list.\",\n    \"Iterate over all possible combinations of 5 individuals.\",\n    \"For each combination, check if all individuals are friends or if no individuals are friends.\",\n    \"Output the combination if a successful party is found, otherwise output -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 98)"}, "Round_1": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs (U_i, V_i).\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized with exactly 5 people.\",\n      \"steps\": [\n        \"Check if there exists a group of 5 people where all are friends.\",\n        \"Check if there exists a group of 5 people where no two are friends.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, output the 5 individuals.\",\n        \"If no successful party configuration is possible, output -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Create a data structure to represent the friendships (e.g., adjacency list or matrix).\",\n    \"Iterate over all possible combinations of 5 individuals.\",\n    \"For each combination, check if all 5 are friends or if none are friends.\",\n    \"If a valid combination is found, print the 5 individuals.\",\n    \"If no valid combination is found after checking all possibilities, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Check for a complete subgraph (clique) of size 5 in the graph, where all 5 individuals are friends with each other.\",\n      \"output\": \"List of 5 individuals forming a clique or indication that no such clique exists.\"\n    },\n    {\n      \"description\": \"Check for an independent set of size 5 in the graph, where no two individuals are friends with each other.\",\n      \"output\": \"List of 5 individuals forming an independent set or indication that no such set exists.\"\n    },\n    {\n      \"description\": \"Determine if either a clique or an independent set of size 5 exists and output the result accordingly.\",\n      \"output\": \"5 numbers indicating a successful party configuration or -1 if impossible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to obtain N, M, and the list of friendship pairs.\",\n    \"Construct a graph representation of the friendships using an adjacency list or matrix.\",\n    \"Implement a function to search for a clique of size 5 in the graph.\",\n    \"Implement a function to search for an independent set of size 5 in the graph.\",\n    \"Check the results of the clique and independent set searches.\",\n    \"If a clique or independent set is found, print the list of 5 individuals. Otherwise, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    # Parse input\n    index = 0\n    N = int(data[index])\n    index += 1\n    M = int(data[index])\n    index += 1\n    \n    from collections import defaultdict\n    \n    # Create adjacency list for the graph\n    graph = defaultdict(set)\n    for _ in range(M):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Function to check for a clique of size 5\n    def find_clique_of_size_5():\n        for a in range(1, N + 1):\n            for b in graph[a]:\n                if b <= a:\n                    continue\n                for c in graph[a].intersection(graph[b]):\n                    if c <= b:\n                        continue\n                    for d in graph[a].intersection(graph[b], graph[c]):\n                        if d <= c:\n                            continue\n                        for e in graph[a].intersection(graph[b], graph[c], graph[d]):\n                            if e <= d:\n                                continue\n                            return [a, b, c, d, e]\n        return None\n    \n    # Function to check for an independent set of size 5\n    def find_independent_set_of_size_5():\n        all_people = set(range(1, N + 1))\n        for a in range(1, N + 1):\n            for b in range(a + 1, N + 1):\n                if b in graph[a]:\n                    continue\n                for c in range(b + 1, N + 1):\n                    if c in graph[a] or c in graph[b]:\n                        continue\n                    for d in range(c + 1, N + 1):\n                        if d in graph[a] or d in graph[b] or d in graph[c]:\n                            continue\n                        for e in range(d + 1, N + 1):\n                            if e in graph[a] or e in graph[b] or e in graph[c] or e in graph[d]:\n                                continue\n                            return [a, b, c, d, e]\n        return None\n    \n    # Check for a clique of size 5\n    clique = find_clique_of_size_5()\n    if clique:\n        print(\" \".join(map(str, clique)))\n        return", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of individuals (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs (U_i, V_i).\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized with exactly 5 people.\",\n      \"steps\": [\n        \"Check if there exists a group of 5 people where all are friends.\",\n        \"Check if there exists a group of 5 people where no two are friends.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, output the 5 individuals.\",\n        \"If no successful party configuration is found, output -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Create a data structure to represent the friendships (e.g., adjacency list or matrix).\",\n    \"Iterate over all possible combinations of 5 individuals.\",\n    \"For each combination, check if all 5 are friends or if none are friends.\",\n    \"If a valid combination is found, print the 5 individuals.\",\n    \"If no valid combination is found after checking all possibilities, print -1.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, true, true, true, true, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 112, "prompt": "On the great island of Baltia, there live N individuals, numbered from 1 to N. There are precisely M pairs of persons that have a friendship with one another. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. A party on Baltia comprises exactly 5 people and is considered successful if either all are friends allowing uninterrupted conversation, or no two are friends enabling phone engagement without disturbance. Please help the people of Baltia organize a successful party or tell them that it's impossible to do so. Consider all possible configurations of friendships to determine the party's success potential.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "examples": "\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 96}
