{"name": "1623_A. Robot Cleaner", "description": "A robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n", "tags": ["brute force", "implementation", "math"], "difficulty": 7, "id": 1623, "sample_io": [{"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}], "test_list": [{"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 2 1\n17 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n15\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n15\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n27\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n3\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n9\n3\n1\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 4 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n9\n1\n1\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 2\n6 16 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n8\n3\n0\n"]}, {"input": "5\n6 10 6 1 2 8\n10 10 9 9 2 1\n14 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["4\n9\n9\n3\n0\n"]}, {"input": "5\n18 10 1 1 2 8\n10 10 9 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n10\n9\n3\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n8 8 5 8 2 1\n6 9 4 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n7\n1\n1\n"]}, {"input": "5\n7 10 1 1 2 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n9\n9\n3\n0\n"]}, {"input": "5\n7 10 1 1 4 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["3\n9\n9\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n7 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n7\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 5 6 3 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n26\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 12 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n21\n3\n0\n"]}, {"input": "5\n10 10 2 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 2\n6 16 2 2 5 8\n2 2 1 1 2 1\n", "output": ["0\n10\n8\n3\n0\n"]}, {"input": "5\n18 10 6 2 2 8\n10 10 9 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["6\n10\n9\n3\n0\n"]}, {"input": "5\n6 10 6 1 2 8\n10 10 5 9 2 1\n14 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["4\n10\n9\n3\n0\n"]}, {"input": "5\n7 10 1 1 4 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 2 2 1 8\n2 1 1 1 2 1\n", "output": ["3\n9\n9\n6\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n7 8 5 6 3 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n6\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n7\n15\n3\n0\n"]}, {"input": "5\n10 10 6 2 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n8 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["6\n10\n9\n3\n1\n"]}, {"input": "5\n7 10 1 1 4 8\n10 10 9 9 1 1\n11 8 9 6 1 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["3\n10\n9\n3\n0\n"]}, {"input": "5\n25 10 5 1 2 8\n10 10 9 9 2 1\n17 11 5 6 2 1\n6 9 3 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n15\n2\n1\n"]}, {"input": "5\n14 10 5 1 4 8\n10 10 9 5 4 1\n17 11 5 6 2 1\n6 9 2 2 5 4\n2 2 1 1 2 1\n", "output": ["7\n7\n15\n2\n0\n"]}, {"input": "5\n18 10 1 2 2 8\n10 10 9 9 1 1\n25 8 7 6 2 1\n6 9 3 1 5 8\n2 1 2 1 2 1\n", "output": ["1\n10\n9\n2\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 9 3 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n2\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 2 1\n17 8 5 6 2 1\n6 9 2 2 2 8\n2 2 1 1 2 1\n", "output": ["7\n9\n9\n0\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 8 5 1 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n0\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 3\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["2\n9\n27\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 6 8\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n4\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 4 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n7\n27\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 6 2 2\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n26\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n14 8 5 6 2 1\n6 9 1 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n9\n4\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 15 5 6 2 1\n6 9 4 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n11\n1\n1\n"]}, {"input": "5\n7 10 1 1 2 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 1 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n9\n9\n4\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 12 2 1\n6 9 2 2 3 8\n2 2 1 2 2 2\n", "output": ["7\n9\n21\n1\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 2 2 1\n8 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n11\n3\n1\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 16 2 2 2 8\n2 2 2 1 2 1\n", "output": ["7\n10\n9\n0\n0\n"]}, {"input": "5\n18 17 11 1 2 8\n10 10 9 9 2 1\n17 17 5 8 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n25\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n6 8 5 6 2 1\n6 9 4 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n5\n1\n1\n"]}, {"input": "5\n25 10 2 1 2 8\n10 10 9 9 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["0\n9\n15\n3\n1\n"]}, {"input": "5\n18 10 1 2 2 8\n10 10 9 9 1 1\n25 13 7 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n10\n19\n3\n0\n"]}, {"input": "5\n14 10 1 1 4 8\n10 10 9 5 4 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["3\n7\n15\n3\n0\n"]}, {"input": "5\n18 10 1 2 2 8\n10 10 9 9 1 1\n25 8 7 6 2 1\n6 9 6 1 5 8\n2 1 2 1 2 1\n", "output": ["1\n10\n9\n1\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n17 8 2 6 2 1\n6 9 3 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n0\n2\n0\n"]}, {"input": "5\n14 10 6 1 2 3\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 1 8\n2 2 1 2 2 2\n", "output": ["2\n9\n27\n6\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 8 1 6 2 1\n6 16 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n1\n3\n0\n"]}, {"input": "5\n6 10 6 1 4 8\n10 10 9 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["2\n10\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n12 10 9 5 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n13\n15\n3\n0\n"]}, {"input": "5\n14 17 11 1 2 8\n10 10 9 9 2 1\n17 28 3 6 2 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n29\n3\n0\n"]}, {"input": "5\n18 17 11 1 2 11\n10 10 9 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n9\n27\n3\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 2 2 3 8\n2 1 1 1 2 1\n", "output": ["1\n9\n9\n1\n0\n"]}, {"input": "5\n7 10 2 1 2 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 1 2 5 8\n2 1 1 1 2 1\n", "output": ["0\n9\n9\n4\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 5 6 2 1\n6 9 2 2 5 0\n2 2 1 2 2 1\n", "output": ["7\n7\n15\n3\n1\n"]}, {"input": "5\n8 10 5 1 2 8\n10 10 9 9 2 1\n17 16 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n25\n3\n1\n"]}, {"input": "5\n7 10 1 1 2 8\n10 10 9 9 1 1\n11 8 9 7 1 1\n6 9 2 2 5 8\n2 1 2 1 2 1\n", "output": ["1\n10\n8\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 7 5 4 1\n17 11 5 6 2 1\n6 9 4 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n15\n1\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 9 5 1 2 1\n6 9 2 2 5 8\n2 2 1 1 2 0\n", "output": ["7\n9\n0\n3\n1\n"]}, {"input": "5\n6 10 6 1 4 8\n10 10 10 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["2\n9\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n13 10 9 5 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n14\n15\n3\n0\n"]}, {"input": "5\n14 17 11 1 2 8\n14 10 9 9 2 1\n17 28 3 6 2 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["7\n10\n29\n3\n0\n"]}, {"input": "5\n18 17 11 1 2 11\n10 10 5 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n10\n27\n3\n0\n"]}, {"input": "5\n18 10 1 1 2 8\n10 19 9 9 1 1\n25 8 5 1 1 1\n6 9 2 2 5 3\n2 1 1 1 2 1\n", "output": ["1\n10\n0\n1\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n10 10 9 9 2 1\n5 8 5 6 1 1\n6 9 2 2 3 8\n2 1 1 1 2 1\n", "output": ["1\n9\n4\n1\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 1 6 2 1\n6 9 2 2 5 0\n2 2 1 2 2 1\n", "output": ["7\n7\n1\n3\n1\n"]}, {"input": "5\n14 16 6 1 2 8\n15 10 9 9 2 1\n17 17 5 6 3 1\n6 9 2 3 5 8\n2 2 1 2 2 2\n", "output": ["7\n10\n26\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n6 8 5 6 2 2\n6 9 4 2 5 8\n2 2 1 1 1 2\n", "output": ["7\n10\n5\n1\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 9 9 9 5 1\n17 11 5 6 4 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n6\n15\n3\n0\n"]}, {"input": "5\n18 10 1 2 2 7\n10 10 9 9 1 1\n25 13 7 6 2 2\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n10\n18\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 21 2 3 3 1\n5 9 2 2 5 8\n2 2 0 2 2 2\n", "output": ["7\n9\n1\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 1\n10 10 9 9 2 1\n17 9 5 1 2 1\n6 9 2 2 5 8\n2 2 1 1 2 0\n", "output": ["0\n9\n0\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 4 1\n17 17 5 5 2 1\n6 15 2 2 5 8\n3 2 1 2 2 1\n", "output": ["7\n7\n27\n3\n1\n"]}, {"input": "5\n14 17 11 1 2 8\n14 10 9 9 2 1\n17 28 3 1 2 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["7\n10\n0\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 1 6 2 1\n6 9 2 2 6 0\n2 2 1 2 2 1\n", "output": ["7\n7\n1\n4\n1\n"]}, {"input": "5\n18 8 6 2 2 8\n10 10 6 9 1 1\n25 8 5 6 2 2\n6 9 2 2 5 8\n2 1 0 1 2 1\n", "output": ["6\n10\n8\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 9 9 9 5 1\n17 11 5 6 4 2\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n6\n14\n3\n0\n"]}, {"input": "5\n18 10 1 3 2 8\n10 10 9 9 1 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 2 1 2 1\n", "output": ["1\n10\n9\n7\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 2 1\n25 8 5 6 1 1\n6 9 2 2 3 9\n2 1 1 1 0 1\n", "output": ["7\n9\n9\n1\n0\n"]}, {"input": "5\n18 20 11 1 2 11\n10 10 5 9 2 1\n17 17 3 6 2 2\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n10\n26\n3\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n10 10 9 9 2 1\n5 8 1 6 1 1\n6 9 2 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n9\n0\n1\n0\n"]}, {"input": "5\n9 10 6 1 2 8\n10 10 1 9 2 1\n17 21 2 3 3 1\n5 9 2 2 5 8\n2 2 0 2 2 2\n", "output": ["7\n1\n1\n3\n0\n"]}, {"input": "5\n18 10 1 3 1 8\n10 10 9 9 1 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 2 1 2 1\n", "output": ["0\n10\n9\n7\n0\n"]}, {"input": "5\n14 17 11 1 2 8\n10 10 9 9 2 1\n34 28 3 1 2 1\n6 9 4 1 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n0\n1\n0\n"]}, {"input": "5\n18 10 2 3 1 8\n10 10 9 9 1 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 0 1 2 1\n", "output": ["5\n10\n9\n7\n0\n"]}, {"input": "5\n14 17 11 1 2 8\n10 10 9 9 2 1\n34 28 3 1 2 1\n6 9 4 1 1 8\n2 2 1 2 2 2\n", "output": ["7\n9\n0\n7\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n20 10 9 9 2 1\n5 12 1 6 1 1\n6 8 4 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n10\n0\n5\n0\n"]}, {"input": "5\n7 10 1 2 1 8\n20 10 9 9 2 1\n5 12 1 6 1 1\n6 9 4 2 3 8\n3 1 1 1 2 1\n", "output": ["0\n10\n0\n5\n0\n"]}, {"input": "5\n10 10 1 2 1 8\n20 14 9 9 2 1\n5 21 1 6 1 1\n6 9 4 2 3 8\n3 1 1 1 2 1\n", "output": ["0\n18\n0\n5\n0\n"]}, {"input": "5\n10 10 1 2 1 8\n20 14 9 9 2 1\n5 21 1 6 1 1\n6 9 4 2 3 5\n3 1 1 1 2 1\n", "output": ["0\n18\n0\n3\n0\n"]}, {"input": "5\n13 10 1 2 1 8\n19 14 9 9 2 1\n5 21 1 12 1 1\n6 9 4 1 2 5\n3 1 1 1 2 1\n", "output": ["0\n18\n0\n4\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 32 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n29\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 5 2 1\n17 11 5 6 2 2\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n14\n3\n1\n"]}, {"input": "5\n6 10 6 1 2 8\n10 10 9 9 3 1\n14 8 5 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["4\n8\n9\n3\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n8 8 5 8 2 1\n6 9 4 2 1 8\n2 2 1 1 2 2\n", "output": ["7\n10\n7\n6\n1\n"]}, {"input": "5\n7 10 1 1 2 8\n10 10 9 9 1 1\n11 8 5 5 1 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n10\n10\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 12 2 1\n6 9 2 2 5 2\n2 2 1 2 2 2\n", "output": ["7\n9\n21\n0\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n7 8 5 6 2 1\n8 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n7\n3\n1\n"]}, {"input": "5\n6 10 6 1 2 8\n10 10 5 9 2 1\n14 8 5 6 2 1\n6 9 4 2 5 8\n2 2 1 1 2 1\n", "output": ["4\n10\n9\n1\n0\n"]}, {"input": "5\n18 10 1 1 0 8\n10 10 9 9 1 1\n25 8 5 6 1 1\n6 9 1 2 5 8\n2 1 1 1 2 1\n", "output": ["7\n10\n9\n4\n0\n"]}, {"input": "5\n14 10 6 1 2 5\n10 10 9 9 2 1\n17 17 5 3 3 1\n6 9 2 2 5 8\n2 2 0 2 2 2\n", "output": ["4\n9\n26\n3\n0\n"]}, {"input": "5\n23 10 6 2 2 8\n17 10 9 9 1 1\n25 8 5 4 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["6\n10\n11\n3\n0\n"]}, {"input": "5\n7 10 1 1 2 0\n10 10 9 9 2 1\n11 13 5 6 2 1\n6 9 2 2 5 8\n3 1 1 1 2 1\n", "output": ["1\n9\n15\n3\n0\n"]}, {"input": "5\n18 10 1 2 2 8\n9 10 9 9 1 1\n25 8 7 6 2 1\n12 9 3 1 5 8\n2 1 2 1 2 1\n", "output": ["1\n8\n9\n2\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 9 3 2 2 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n6\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 8 4 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n24\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 5 5 2 1\n6 9 2 2 2 8\n2 2 1 2 2 1\n", "output": ["7\n9\n27\n0\n1\n"]}, {"input": "5\n14 10 6 1 2 3\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 4 2 5 8\n2 2 1 2 2 2\n", "output": ["2\n9\n27\n1\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 3 1\n17 17 3 6 2 2\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n8\n26\n3\n1\n"]}, {"input": "5\n18 10 1 1 2 8\n11 19 9 9 1 1\n25 8 5 6 1 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n12\n9\n3\n0\n"]}, {"input": "5\n14 16 6 1 2 15\n10 10 9 9 2 1\n17 17 5 6 3 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["14\n9\n26\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 1 12 2 1\n6 9 2 2 3 8\n2 2 1 2 2 2\n", "output": ["7\n9\n1\n1\n0\n"]}, {"input": "5\n7 10 1 1 2 0\n10 10 9 1 2 1\n11 8 5 6 2 1\n6 9 2 3 5 8\n3 1 1 1 2 1\n", "output": ["1\n0\n9\n3\n0\n"]}, {"input": "5\n18 10 6 2 2 8\n10 10 9 9 2 1\n17 8 5 6 2 1\n6 9 2 0 2 8\n2 2 1 1 2 1\n", "output": ["6\n9\n9\n0\n0\n"]}, {"input": "5\n14 10 2 1 2 3\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 1 8\n2 2 1 2 2 2\n", "output": ["0\n9\n27\n6\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 5 1 2 1\n6 9 2 2 6 8\n3 2 1 2 2 2\n", "output": ["7\n9\n0\n4\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n12 10 9 5 2 1\n17 11 5 6 2 1\n6 9 2 2 2 8\n2 2 1 2 2 2\n", "output": ["7\n13\n15\n0\n0\n"]}, {"input": "5\n18 17 11 1 2 7\n10 10 9 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["6\n9\n27\n3\n0\n"]}, {"input": "5\n18 10 1 1 2 8\n10 10 9 5 1 2\n25 8 5 6 2 1\n6 9 2 2 2 8\n2 1 1 1 2 1\n", "output": ["1\n10\n9\n0\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 2 6 2 1\n6 9 2 2 5 0\n2 2 1 1 2 1\n", "output": ["7\n7\n0\n3\n0\n"]}, {"input": "5\n23 10 6 2 3 8\n10 10 9 9 1 1\n25 8 5 5 2 1\n6 9 2 2 5 8\n2 1 1 1 0 1\n", "output": ["6\n10\n10\n3\n0\n"]}, {"input": "5\n6 10 6 1 4 8\n10 10 10 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 0\n", "output": ["2\n9\n9\n3\n1\n"]}, {"input": "5\n14 17 11 1 2 8\n14 10 9 9 2 1\n17 28 3 6 1 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["7\n10\n30\n3\n0\n"]}, {"input": "5\n18 17 11 1 2 11\n10 13 5 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n13\n27\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 2\n6 8 5 6 2 2\n6 9 4 2 5 8\n2 2 1 1 1 2\n", "output": ["7\n9\n5\n1\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n10 10 9 9 3 1\n5 8 5 6 1 1\n6 9 2 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n8\n4\n1\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 9 9 9 5 1\n17 11 5 6 4 2\n6 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n6\n14\n3\n1\n"]}, {"input": "5\n25 10 3 1 2 8\n10 10 9 9 2 2\n17 11 1 6 2 1\n6 9 2 2 5 6\n2 2 1 2 2 1\n", "output": ["7\n9\n1\n3\n1\n"]}, {"input": "5\n18 20 11 1 2 11\n10 10 5 9 2 1\n17 17 3 10 2 2\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n10\n22\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 9 9 9 5 1\n17 11 5 6 4 2\n6 9 4 2 5 6\n2 2 1 1 2 1\n", "output": ["7\n6\n14\n1\n0\n"]}, {"input": "5\n9 10 6 1 2 8\n10 10 1 9 4 1\n17 21 2 3 3 1\n5 9 2 2 5 8\n2 2 0 2 2 2\n", "output": ["7\n3\n1\n3\n0\n"]}, {"input": "5\n14 17 11 1 2 7\n10 10 9 9 2 1\n34 28 3 1 2 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["6\n9\n0\n3\n0\n"]}, {"input": "5\n18 10 1 3 1 8\n10 10 9 9 2 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 0 1 2 1\n", "output": ["0\n9\n9\n7\n0\n"]}, {"input": "5\n18 36 11 1 2 11\n10 10 5 9 2 2\n17 17 3 6 2 2\n6 9 2 2 5 8\n5 2 1 2 2 2\n", "output": ["10\n9\n26\n3\n0\n"]}, {"input": "5\n7 13 1 1 1 8\n14 10 9 4 1 1\n11 8 9 7 1 1\n6 26 2 2 5 8\n2 1 2 1 2 1\n", "output": ["0\n15\n8\n3\n0\n"]}, {"input": "5\n18 10 2 6 1 8\n10 10 9 9 1 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 0 1 2 1\n", "output": ["2\n10\n9\n7\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n20 10 9 10 2 1\n5 12 1 6 1 1\n6 9 4 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n9\n0\n5\n0\n"]}, {"input": "5\n10 10 1 2 1 8\n20 14 9 9 2 1\n5 21 1 6 1 1\n6 9 4 2 3 3\n3 1 1 1 2 1\n", "output": ["0\n18\n0\n1\n0\n"]}, {"input": "5\n13 10 1 2 1 8\n19 14 9 9 2 2\n5 21 1 12 1 1\n6 9 4 2 2 5\n3 1 1 1 2 1\n", "output": ["0\n17\n0\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 5 1 1\n17 11 5 6 2 2\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n10\n14\n3\n1\n"]}, {"input": "5\n7 10 1 1 2 8\n10 10 9 9 1 1\n11 8 5 5 1 1\n6 9 2 2 2 8\n2 1 1 1 2 1\n", "output": ["1\n10\n10\n0\n0\n"]}, {"input": "5\n18 10 6 1 2 2\n10 10 9 9 1 1\n7 8 5 6 2 1\n6 9 2 2 5 8\n2 2 0 1 2 1\n", "output": ["1\n10\n7\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 6\n10 10 9 9 2 1\n17 17 3 12 2 1\n6 9 2 2 5 2\n2 2 1 2 2 2\n", "output": ["5\n9\n21\n0\n0\n"]}, {"input": "5\n18 10 6 2 2 8\n10 10 1 9 1 1\n25 8 3 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["6\n0\n9\n3\n0\n"]}, {"input": "5\n18 17 11 1 2 3\n10 10 9 9 2 1\n17 17 5 1 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["2\n9\n0\n3\n0\n"]}, {"input": "5\n18 10 0 1 0 8\n10 10 9 9 1 1\n25 8 5 6 1 1\n6 9 1 2 5 8\n2 1 1 1 2 1\n", "output": ["0\n10\n9\n4\n0\n"]}, {"input": "5\n18 17 11 1 2 8\n10 10 9 2 2 1\n17 12 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 1 2\n", "output": ["7\n9\n17\n3\n0\n"]}, {"input": "5\n7 10 1 1 4 8\n10 10 9 9 1 1\n11 8 9 6 1 1\n6 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["3\n10\n9\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 5\n10 10 9 9 2 1\n17 17 5 3 3 1\n6 9 1 2 5 8\n2 2 0 2 2 2\n", "output": ["4\n9\n26\n4\n0\n"]}, {"input": "5\n23 10 6 2 2 8\n17 10 9 9 1 1\n25 8 5 4 2 1\n6 9 2 2 5 4\n2 1 1 1 2 1\n", "output": ["6\n10\n11\n2\n0\n"]}, {"input": "5\n23 10 11 2 2 8\n17 10 2 9 1 1\n25 8 5 1 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["6\n10\n0\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 8 4 2 1\n6 9 2 2 5 8\n2 2 1 2 1 1\n", "output": ["7\n9\n24\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 3 5 2 1\n6 9 2 2 2 8\n2 2 1 2 2 1\n", "output": ["7\n9\n28\n0\n1\n"]}, {"input": "5\n14 10 6 1 2 6\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 4 2 5 8\n2 2 1 2 2 2\n", "output": ["5\n9\n27\n1\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 3 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n8\n27\n3\n1\n"]}, {"input": "5\n14 17 11 1 2 8\n10 10 9 9 2 2\n17 17 3 6 2 1\n6 9 2 1 5 2\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n1\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n25 6 5 6 1 2\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["7\n10\n4\n3\n0\n"]}, {"input": "5\n6 10 6 1 2 8\n10 10 9 6 2 1\n14 8 5 6 2 1\n6 9 2 2 5 8\n3 2 1 2 2 1\n", "output": ["4\n9\n9\n3\n1\n"]}, {"input": "5\n18 17 11 1 2 8\n10 10 9 9 4 1\n17 17 3 6 2 1\n6 9 2 2 4 8\n3 2 1 2 2 2\n", "output": ["7\n7\n27\n2\n0\n"]}, {"input": "5\n7 10 1 1 2 8\n19 10 9 9 2 1\n11 8 5 6 1 1\n6 9 1 2 5 8\n2 1 0 1 2 1\n", "output": ["1\n10\n9\n4\n0\n"]}, {"input": "5\n10 10 6 1 2 6\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 16 2 2 1 8\n2 2 2 1 2 1\n", "output": ["5\n10\n9\n6\n0\n"]}, {"input": "5\n14 10 3 1 4 8\n10 9 9 9 4 1\n17 19 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["1\n7\n27\n3\n0\n"]}, {"input": "5\n18 10 1 2 2 8\n12 10 9 9 1 1\n25 13 7 6 2 1\n6 9 2 2 2 8\n2 1 1 1 2 1\n", "output": ["1\n10\n19\n0\n0\n"]}, {"input": "5\n25 10 3 1 2 8\n10 15 9 9 2 1\n17 11 5 6 2 1\n6 9 3 2 4 8\n2 2 1 2 2 1\n", "output": ["7\n9\n15\n1\n1\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 14 8 6 2 2\n10 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n20\n3\n0\n"]}, {"input": "5\n14 10 2 1 2 3\n10 10 9 9 1 1\n17 17 5 6 2 1\n6 9 2 2 1 8\n2 2 1 2 2 2\n", "output": ["0\n10\n27\n6\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 5 1 2 1\n6 9 2 2 4 8\n3 2 1 2 2 2\n", "output": ["7\n9\n0\n2\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n12 10 9 10 2 1\n17 11 5 6 2 1\n6 9 2 2 2 8\n2 2 1 2 2 2\n", "output": ["7\n9\n15\n0\n0\n"]}, {"input": "5\n14 17 11 1 4 10\n10 10 9 9 2 1\n17 28 3 6 2 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["9\n9\n29\n3\n0\n"]}, {"input": "5\n18 10 1 1 2 8\n10 19 9 9 1 1\n25 10 5 6 1 1\n6 9 2 2 5 5\n2 1 1 1 2 1\n", "output": ["1\n10\n13\n3\n0\n"]}, {"input": "5\n8 10 5 1 2 7\n10 10 9 9 2 1\n17 16 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 1 1\n", "output": ["6\n9\n25\n3\n0\n"]}, {"input": "5\n7 10 1 3 4 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 2 2 1 6\n2 1 0 1 2 1\n", "output": ["3\n9\n9\n4\n0\n"]}, {"input": "5\n18 10 1 2 2 7\n10 10 9 9 1 1\n25 13 7 11 2 1\n6 9 2 2 5 8\n2 1 1 1 1 1\n", "output": ["1\n10\n14\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 1 8 2 1\n6 9 3 2 5 0\n2 2 1 2 2 1\n", "output": ["7\n7\n1\n2\n1\n"]}, {"input": "5\n18 10 1 2 2 7\n10 10 9 9 1 1\n19 13 7 6 2 2\n6 9 2 2 4 8\n2 1 1 1 2 1\n", "output": ["1\n10\n18\n2\n0\n"]}, {"input": "5\n18 10 1 3 1 8\n19 10 9 9 1 1\n9 8 7 6 2 1\n6 9 6 1 5 8\n2 1 2 1 2 1\n", "output": ["0\n10\n9\n1\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n10 10 9 9 3 1\n5 8 3 6 1 1\n6 9 2 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n8\n6\n1\n0\n"]}, {"input": "5\n18 20 11 1 2 11\n10 10 5 9 2 1\n17 17 3 10 2 1\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n10\n23\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 9 9 9 5 1\n17 11 5 6 4 2\n6 9 3 2 5 6\n2 2 1 1 2 1\n", "output": ["7\n6\n14\n2\n0\n"]}, {"input": "5\n9 10 6 1 2 8\n10 10 1 9 4 1\n17 21 2 3 3 1\n5 9 2 2 3 8\n2 2 0 2 2 2\n", "output": ["7\n3\n1\n1\n0\n"]}, {"input": "5\n18 10 2 3 1 8\n10 10 9 9 2 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 0 1 2 1\n", "output": ["5\n9\n9\n7\n0\n"]}, {"input": "5\n18 36 11 1 2 11\n10 10 5 9 2 2\n17 17 3 6 3 2\n6 9 2 2 5 8\n5 2 1 2 2 2\n", "output": ["10\n9\n0\n3\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n20 10 9 9 2 2\n5 12 1 6 2 1\n6 8 2 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n9\n1\n1\n0\n"]}, {"input": "5\n15 10 1 2 1 8\n19 14 9 9 2 1\n5 21 1 6 1 1\n6 9 4 3 2 5\n3 1 1 1 2 1\n", "output": ["0\n18\n0\n2\n0\n"]}, {"input": "5\n13 10 1 2 1 8\n19 14 9 9 2 3\n5 21 1 12 1 1\n6 9 4 2 2 5\n3 1 1 1 2 1\n", "output": ["0\n16\n0\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 5 1 1\n17 11 5 6 2 2\n6 9 2 2 6 8\n2 2 1 2 2 1\n", "output": ["7\n10\n14\n4\n1\n"]}, {"input": "5\n10 10 6 1 1 8\n9 10 9 9 1 1\n7 8 5 6 2 1\n8 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n8\n7\n3\n1\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n9\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n27\n3\n1\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 16 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n14 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 5 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n15\n3\n1\n"]}, {"input": "5\n14 17 11 1 2 8\n10 10 9 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}], "task_id": "codecontest/160", "repair_prompt": ["A robot cleaner is placed on the floor of a rectangle room, surrounded by walls, consisting of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns from 1 to m from left to right. A cell (r, c) denotes the intersection of the r-th row and the c-th column; the robot's initial position is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, moving from cell (r, c) to (r + dr, c + dc), starting with dr = 1, dc = 1, and if there is a vertical wall (left or right), dc is reflected before movement, becoming -dc. If there is a horizontal wall (upper or lower), dr is reflected before movement, becoming -dr.\n\nEach second, including before the robot starts moving, it cleans every cell it shares a row or column with. There is only one dirty cell at (r_d, c_d), and the robot's job is to clean it.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def robot_cleaner(test_cases):\n    results = []\n    for n, m, r_b, c_b, r_d, c_d in test_cases:\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot cleans the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            r_b += dr\n            c_b += dc\n            time += 1\n            \n            # Reflect direction if hitting a wall\n            if r_b == 1 or r_b == n:\n                dr = -dr\n            if c_b == 1 or c_b == m:\n                dc = -dc\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        test_cases.append((n, m, r_b, c_b, r_d, c_d))\n        index += 6\n    \n    results = robot_cleaner(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def robot_cleaner(t, test_cases):\n    results = []\n    for i in range(t):\n        n, m, r_b, c_b, r_d, c_d = test_cases[i]\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot cleans the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            r_b += dr\n            c_b += dc\n            time += 1\n            \n            # Reflect direction if hitting a wall\n            if r_b == 1 or r_b == n:\n                dr = -dr\n            if c_b == 1 or c_b == m:\n                dc = -dc\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        n, m, r_b, c_b, r_d, c_d = map(int, data[index:index+6])\n        test_cases.append((n, m, r_b, c_b, r_d, c_d))\n        index += 6\n    \n    results = robot_cleaner(t, test_cases)\n    for result in results:\n        print(result)\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the row and column it is on every second\n        # So we need to find the minimum time to reach either the same row or column as the dirty cell\n        time_to_clean = min(\n            abs(r_d - r_b),  # Time to reach the same row\n            abs(c_d - c_b)   # Time to reach the same column\n        )\n        \n        results.append(time_to_clean)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the dirty cell when it shares a row or column with it\n        # Calculate the minimum time to reach the same row or column\n        time_to_clean = min(\n            abs(r_d - r_b),  # Time to reach the same row\n            abs(c_d - c_b)   # Time to reach the same column\n        )\n        \n        results.append(time_to_clean)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Initialize direction\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot is in the same row or column as the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            if r_b + dr > n or r_b + dr < 1:\n                dr = -dr\n            if c_b + dc > m or c_b + dc < 1:\n                dc = -dc\n            \n            r_b += dr\n            c_b += dc\n            time += 1\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the row and column it is on, so we need to find the minimum time\n        # it takes to be on the same row or column as the dirty cell.\n        \n        # Calculate the time to reach the same row as the dirty cell\n        if r_b <= r_d:\n            time_to_row = r_d - r_b\n        else:\n            time_to_row = (n - r_b) + (n - r_d)\n        \n        # Calculate the time to reach the same column as the dirty cell\n        if c_b <= c_d:\n            time_to_col = c_d - c_b\n        else:\n            time_to_col = (m - c_b) + (m - c_d)\n        \n        # The time to clean the dirty cell is the minimum of the two times\n        result = min(time_to_row, time_to_col)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def robot_cleaner(test_cases):\n    results = []\n    for n, m, r_b, c_b, r_d, c_d in test_cases:\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot cleans the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            r_b += dr\n            c_b += dc\n            time += 1\n            \n            # Reflect direction if hitting a wall\n            if r_b == 1 or r_b == n:\n                dr = -dr\n            if c_b == 1 or c_b == m:\n                dc = -dc\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        test_cases.append((n, m, r_b, c_b, r_d, c_d))\n        index += 6\n    \n    results = robot_cleaner(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the row and column it is on every second\n        # We need to calculate the minimum time to reach the dirty cell\n        # considering the reflections on the walls.\n        \n        # Calculate the time to reach the dirty cell in row and column\n        if r_b <= r_d:\n            time_to_row = r_d - r_b\n        else:\n            time_to_row = (n - r_b) + (n - r_d)\n        \n        if c_b <= c_d:\n            time_to_col = c_d - c_b\n        else:\n            time_to_col = (m - c_b) + (m - c_d)\n        \n        # The time to clean the dirty cell is the maximum of the two times\n        time_to_clean = max(time_to_row, time_to_col)\n        \n        results.append(time_to_clean)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the dirty cell when it is in the same row or column\n        # Calculate the minimum time to reach the same row or column\n        if r_b <= r_d:\n            time_to_row = r_d - r_b\n        else:\n            time_to_row = (n - r_b) + (n - r_d)\n        \n        if c_b <= c_d:\n            time_to_col = c_d - c_b\n        else:\n            time_to_col = (m - c_b) + (m - c_d)\n        \n        # The time to clean the dirty cell is the minimum of the two times\n        result = min(time_to_row, time_to_col)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the row and column it is on, so we need to find the minimum time\n        # it takes to be on the same row or column as the dirty cell.\n        \n        # Calculate the time to reach the same row\n        if r_b <= r_d:\n            time_to_row = r_d - r_b\n        else:\n            time_to_row = (n - r_b) + (n - r_d)\n        \n        # Calculate the time to reach the same column\n        if c_b <= c_d:\n            time_to_col = c_d - c_b\n        else:\n            time_to_col = (m - c_b) + (m - c_d)\n        \n        # The time to clean the dirty cell is the minimum of the two times\n        result = min(time_to_row, time_to_col)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def robot_cleaner(test_cases):\n    results = []\n    for n, m, r_b, c_b, r_d, c_d in test_cases:\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot cleans the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            r_b += dr\n            c_b += dc\n            time += 1\n            \n            # Reflect direction if hitting a wall\n            if r_b == 1 or r_b == n:\n                dr = -dr\n            if c_b == 1 or c_b == m:\n                dc = -dc\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        test_cases.append((n, m, r_b, c_b, r_d, c_d))\n        index += 6\n    \n    results = robot_cleaner(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the input data, which includes the number of test cases and for each test case, the room dimensions, initial robot position, and dirty cell position.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process.\",\n      \"details\": \"For each test case, simulate the robot's movement according to the rules: reflect direction upon hitting walls and clean the row and column each second.\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell.\",\n      \"details\": \"Track the time steps and check if the robot's current row or column matches the dirty cell's row or column. If so, record the time taken.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, output the time taken for the robot to clean the dirty cell.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Extract the room dimensions, initial robot position, and dirty cell position.\",\n    \"  - Initialize the robot's direction of movement (dr = 1, dc = 1).\",\n    \"  - Initialize a time counter to zero.\",\n    \"  - While the robot has not cleaned the dirty cell:\",\n    \"    - Check if the robot's current row or column matches the dirty cell's row or column.\",\n    \"    - If matched, record the current time as the result for this test case.\",\n    \"    - Otherwise, increment the time counter.\",\n    \"    - Update the robot's position based on the current direction.\",\n    \"    - Reflect the direction if the robot hits a wall.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def robot_cleaner(test_cases):\n    results = []\n    for n, m, r_b, c_b, r_d, c_d in test_cases:\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot cleans the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            r_b += dr\n            c_b += dc\n            time += 1\n            \n            # Reflect direction if hitting a wall\n            if r_b == 1 or r_b == n:\n                dr = -dr\n            if c_b == 1 or c_b == m:\n                dc = -dc\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        test_cases.append((n, m, r_b, c_b, r_d, c_d))\n        index += 6\n    \n    results = robot_cleaner(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def robot_cleaner(test_cases):\n    results = []\n    for n, m, r_b, c_b, r_d, c_d in test_cases:\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot cleans the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            r_b += dr\n            c_b += dc\n            time += 1\n            \n            # Reflect direction if hitting a wall\n            if r_b == 1 or r_b == n:\n                dr = -dr\n            if c_b == 1 or c_b == m:\n                dc = -dc\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        test_cases.append((n, m, r_b, c_b, r_d, c_d))\n        index += 6\n    \n    results = robot_cleaner(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the input to get the number of test cases t. For each test case, extract the integers n, m, r_b, c_b, r_d, and c_d.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process.\",\n      \"details\": \"For each test case, simulate the robot's movement starting from (r_b, c_b) with initial direction (dr, dc) = (1, 1). Reflect the direction when hitting a wall and track the time taken to clean the dirty cell at (r_d, c_d).\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell.\",\n      \"details\": \"Calculate the minimum time required for the robot to clean the dirty cell by considering the robot's path and the cleaning process.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output the calculated time taken for the robot to clean the dirty cell.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Extract the room dimensions (n, m), robot's initial position (r_b, c_b), and dirty cell's position (r_d, c_d).\",\n    \"  b. Initialize the robot's direction as (dr, dc) = (1, 1).\",\n    \"  c. Simulate the robot's movement and cleaning process:\",\n    \"     i. While the robot has not cleaned the dirty cell:\",\n    \"        - Check if the robot's current row or column matches the dirty cell's row or column.\",\n    \"        - If matched, calculate the time taken and break the loop.\",\n    \"        - Update the robot's position based on the current direction.\",\n    \"        - Reflect the direction if the robot hits a wall.\",\n    \"  d. Record the time taken for the robot to clean the dirty cell.\",\n    \"Output the time taken for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def robot_cleaner(t, test_cases):\n    results = []\n    for i in range(t):\n        n, m, r_b, c_b, r_d, c_d = test_cases[i]\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot cleans the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            r_b += dr\n            c_b += dc\n            time += 1\n            \n            # Reflect direction if hitting a wall\n            if r_b == 1 or r_b == n:\n                dr = -dr\n            if c_b == 1 or c_b == m:\n                dc = -dc\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    test_cases = []\n    index = 1\n    for _ in range(t):\n        n, m, r_b, c_b, r_d, c_d = map(int, data[index:index+6])\n        test_cases.append((n, m, r_b, c_b, r_d, c_d))\n        index += 6\n    \n    results = robot_cleaner(t, test_cases)\n    for result in results:\n        print(result)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the parameters for each test case.\",\n      \"details\": \"Read the input data, which includes the number of test cases and for each test case, the room dimensions, initial robot position, and dirty cell position.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process.\",\n      \"details\": \"Implement the logic to simulate the robot's movement across the room, reflecting off walls, and cleaning the row and column it occupies each second.\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell for each test case.\",\n      \"details\": \"Calculate the number of seconds required for the robot to reach the dirty cell's row or column and clean it.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the time taken for the robot to clean the dirty cell for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"action\": \"Read the number of test cases and the parameters for each test case from standard input.\"\n    },\n    {\n      \"step\": \"Simulation Setup\",\n      \"action\": \"Initialize variables for robot's position, direction of movement, and time counter for each test case.\"\n    },\n    {\n      \"step\": \"Movement Simulation\",\n      \"action\": \"Simulate the robot's movement, updating its position and direction based on wall reflections, and increment the time counter each second.\"\n    },\n    {\n      \"step\": \"Cleaning Check\",\n      \"action\": \"Check if the robot's current row or column matches the dirty cell's row or column, indicating the cell is cleaned.\"\n    },\n    {\n      \"step\": \"Result Collection\",\n      \"action\": \"Store the time taken for the robot to clean the dirty cell for each test case.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"action\": \"Print the results for all test cases to standard output.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the row and column it is on every second\n        # So we need to find the minimum time to reach either the same row or column as the dirty cell\n        time_to_clean = min(\n            abs(r_d - r_b),  # Time to reach the same row\n            abs(c_d - c_b)   # Time to reach the same column\n        )\n        \n        results.append(time_to_clean)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the parameters for each test case.\",\n      \"details\": \"Read the input data, which includes the number of test cases and for each test case, the room dimensions, initial robot position, and dirty cell position.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process.\",\n      \"details\": \"Implement the logic to move the robot according to the rules provided, reflecting its direction when hitting walls, and track the time taken to clean the dirty cell.\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell for each test case.\",\n      \"details\": \"Calculate the number of seconds required for the robot to clean the dirty cell based on its movement and cleaning pattern.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the time taken for the robot to clean the dirty cell for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"action\": \"Read the number of test cases and the parameters for each test case from standard input.\"\n    },\n    {\n      \"step\": \"Simulation Setup\",\n      \"action\": \"Initialize variables for robot position, direction, and time tracking for each test case.\"\n    },\n    {\n      \"step\": \"Movement Simulation\",\n      \"action\": \"Simulate the robot's movement, updating its position and direction based on wall reflections, and check if the dirty cell is cleaned.\"\n    },\n    {\n      \"step\": \"Time Calculation\",\n      \"action\": \"Calculate the time taken for the robot to clean the dirty cell once it shares a row or column with the dirty cell.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"action\": \"Print the calculated time for each test case to standard output.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the dirty cell when it shares a row or column with it\n        # Calculate the minimum time to reach the same row or column\n        time_to_clean = min(\n            abs(r_d - r_b),  # Time to reach the same row\n            abs(c_d - c_b)   # Time to reach the same column\n        )\n        \n        results.append(time_to_clean)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 2 were given"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the dirty cell when it shares a row or column with it\n        # Calculate the minimum time to reach the same row or column\n        time_to_clean = min(\n            abs(r_d - r_b),  # Time to reach the same row\n            abs(c_d - c_b)   # Time to reach the same column\n        )\n        \n        results.append(time_to_clean)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the parameters for each test case.\",\n      \"details\": \"Read the input values and store them in a structured format for easy access.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process for each test case.\",\n      \"details\": \"Implement the logic to move the robot according to the rules, reflecting its direction upon hitting walls, and track the time taken to clean the dirty cell.\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell for each test case.\",\n      \"details\": \"Calculate the number of seconds required for the robot to reach the dirty cell's row or column and clean it.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the time taken for the robot to clean the dirty cell for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Extract the room dimensions, robot's initial position, and dirty cell's position.\",\n    \"  b. Initialize the robot's movement direction (dr, dc) as (1, 1).\",\n    \"  c. While the robot has not cleaned the dirty cell:\",\n    \"     i. Check if the robot is already in the same row or column as the dirty cell. If so, calculate the time and break the loop.\",\n    \"     ii. Move the robot according to the current direction (dr, dc).\",\n    \"     iii. If the robot hits a vertical wall, reverse the column direction (dc).\",\n    \"     iv. If the robot hits a horizontal wall, reverse the row direction (dr).\",\n    \"     v. Increment the time counter.\",\n    \"  d. Store the time taken for the robot to clean the dirty cell.\",\n    \"Output the time taken for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Initialize direction\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot is in the same row or column as the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            if r_b + dr > n or r_b + dr < 1:\n                dr = -dr\n            if c_b + dc > m or c_b + dc < 1:\n                dc = -dc\n            \n            r_b += dr\n            c_b += dc\n            time += 1\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the parameters for each test case.\",\n      \"details\": \"Read the input data, which includes the number of test cases and for each test case, the room dimensions, initial robot position, and dirty cell position.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process.\",\n      \"details\": \"Implement the logic to simulate the robot's movement across the room, reflecting off walls, and cleaning the row and column it occupies each second.\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell.\",\n      \"details\": \"Calculate the number of seconds required for the robot to clean the dirty cell based on its movement and cleaning pattern.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the time taken for the robot to clean the dirty cell for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"action\": \"Read the number of test cases and the parameters for each test case from standard input.\"\n    },\n    {\n      \"step\": \"Simulation Setup\",\n      \"action\": \"Initialize variables for the robot's position, direction of movement, and time counter for each test case.\"\n    },\n    {\n      \"step\": \"Movement Simulation\",\n      \"action\": \"Simulate the robot's movement, updating its position and direction based on wall reflections, and increment the time counter.\"\n    },\n    {\n      \"step\": \"Cleaning Check\",\n      \"action\": \"Check if the robot's current row or column matches the dirty cell's position, indicating the cell is cleaned.\"\n    },\n    {\n      \"step\": \"Result Collection\",\n      \"action\": \"Store the time taken for the robot to clean the dirty cell for each test case.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"action\": \"Print the results for all test cases to standard output.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the row and column it is on, so we need to find the minimum time\n        # it takes to be on the same row or column as the dirty cell.\n        \n        # Calculate the time to reach the same row as the dirty cell\n        if r_b <= r_d:\n            time_to_row = r_d - r_b\n        else:\n            time_to_row = (n - r_b) + (n - r_d)\n        \n        # Calculate the time to reach the same column as the dirty cell\n        if c_b <= c_d:\n            time_to_col = c_d - c_b\n        else:\n            time_to_col = (m - c_b) + (m - c_d)\n        \n        # The time to clean the dirty cell is the minimum of the two times\n        result = min(time_to_row, time_to_col)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the parameters for each test case.\",\n      \"details\": \"Read the input values and store them in a structured format for easy access.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process for each test case.\",\n      \"details\": \"Implement the logic to move the robot according to the rules, reflecting its direction upon hitting walls, and track the time taken to clean the dirty cell.\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell for each test case.\",\n      \"details\": \"Calculate the number of seconds required for the robot to reach the dirty cell's row or column and clean it.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the time taken for the robot to clean the dirty cell for each test case in the specified format.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, extract the room dimensions, initial robot position, and dirty cell position.\",\n    \"Initialize the robot's direction of movement (dr = 1, dc = 1).\",\n    \"Simulate the robot's movement: at each step, check if the robot's current row or column matches the dirty cell's row or column.\",\n    \"If the robot's current row or column matches the dirty cell's row or column, calculate the time taken and store the result.\",\n    \"If the robot hits a wall, reflect its direction accordingly (change dr or dc to -dr or -dc).\",\n    \"Continue the simulation until the robot cleans the dirty cell.\",\n    \"Output the time taken for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def robot_cleaner(test_cases):\n    results = []\n    for n, m, r_b, c_b, r_d, c_d in test_cases:\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot cleans the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            r_b += dr\n            c_b += dc\n            time += 1\n            \n            # Reflect direction if hitting a wall\n            if r_b == 1 or r_b == n:\n                dr = -dr\n            if c_b == 1 or c_b == m:\n                dc = -dc\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        test_cases.append((n, m, r_b, c_b, r_d, c_d))\n        index += 6\n    \n    results = robot_cleaner(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the input to get the number of test cases t. For each test case, extract the integers n, m, r_b, c_b, r_d, and c_d.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process.\",\n      \"details\": \"For each test case, simulate the robot's movement starting from (r_b, c_b) with initial direction (dr, dc) = (1, 1). Reflect the direction when hitting a wall and track the time taken to clean the dirty cell at (r_d, c_d).\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell.\",\n      \"details\": \"Calculate the minimum time required for the robot to either reach the dirty cell or clean it by being in the same row or column.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output the calculated time in the required format.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Initialize the robot's position and direction.\",\n    \"  - Simulate the robot's movement and cleaning process.\",\n    \"  - Calculate the time taken to clean the dirty cell.\",\n    \"  - Store the result for the current test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the row and column it is on every second\n        # We need to calculate the minimum time to reach the dirty cell\n        # considering the reflections on the walls.\n        \n        # Calculate the time to reach the dirty cell in row and column\n        if r_b <= r_d:\n            time_to_row = r_d - r_b\n        else:\n            time_to_row = (n - r_b) + (n - r_d)\n        \n        if c_b <= c_d:\n            time_to_col = c_d - c_b\n        else:\n            time_to_col = (m - c_b) + (m - c_d)\n        \n        # The time to clean the dirty cell is the maximum of the two times\n        time_to_clean = max(time_to_row, time_to_col)\n        \n        results.append(time_to_clean)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the parameters for each test case.\",\n      \"details\": \"Read the input data to get the number of test cases t. For each test case, extract the integers n, m, r_b, c_b, r_d, and c_d.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process.\",\n      \"details\": \"For each test case, simulate the robot's movement starting from (r_b, c_b) with initial direction (dr, dc) = (1, 1). Reflect the direction when the robot hits a wall and track the time taken to clean the dirty cell at (r_d, c_d).\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell.\",\n      \"details\": \"Calculate the minimum time required for the robot to either reach the same row or column as the dirty cell, considering the reflections at the walls.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, output the calculated time in the specified format.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Extract the room dimensions (n, m), robot's initial position (r_b, c_b), and dirty cell's position (r_d, c_d).\",\n    \"  b. Initialize the robot's direction as (dr, dc) = (1, 1).\",\n    \"  c. Simulate the robot's movement and cleaning process:\",\n    \"     i. While the robot has not cleaned the dirty cell, update its position based on the current direction.\",\n    \"     ii. Reflect the direction if the robot hits a wall.\",\n    \"     iii. Check if the robot cleans the dirty cell by being in the same row or column.\",\n    \"  d. Record the time taken for the robot to clean the dirty cell.\",\n    \"Output the time taken for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the dirty cell when it is in the same row or column\n        # Calculate the minimum time to reach the same row or column\n        if r_b <= r_d:\n            time_to_row = r_d - r_b\n        else:\n            time_to_row = (n - r_b) + (n - r_d)\n        \n        if c_b <= c_d:\n            time_to_col = c_d - c_b\n        else:\n            time_to_col = (m - c_b) + (m - c_d)\n        \n        # The time to clean the dirty cell is the minimum of the two times\n        result = min(time_to_row, time_to_col)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the parameters for each test case.\",\n      \"details\": \"Read the input data, which includes the number of test cases and for each test case, the room dimensions, initial robot position, and dirty cell position.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process.\",\n      \"details\": \"Implement the logic to simulate the robot's movement across the room, reflecting off walls, and cleaning the row and column it occupies each second.\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell.\",\n      \"details\": \"Calculate the number of seconds required for the robot to clean the dirty cell based on its movement and cleaning pattern.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"Print the time taken for the robot to clean the dirty cell for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"action\": \"Read the number of test cases and the parameters for each test case from standard input.\"\n    },\n    {\n      \"step\": \"Simulation Setup\",\n      \"action\": \"Initialize variables for the robot's position, direction of movement, and cleaning status for each test case.\"\n    },\n    {\n      \"step\": \"Movement Simulation\",\n      \"action\": \"Simulate the robot's movement, reflecting off walls as necessary, and track the cleaning process each second.\"\n    },\n    {\n      \"step\": \"Time Calculation\",\n      \"action\": \"Calculate the time taken for the robot to clean the dirty cell by checking when the robot's cleaning area includes the dirty cell.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"action\": \"Print the calculated time for each test case to standard output.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the row and column it is on, so we need to find the minimum time\n        # it takes to be on the same row or column as the dirty cell.\n        \n        # Calculate the time to reach the same row\n        if r_b <= r_d:\n            time_to_row = r_d - r_b\n        else:\n            time_to_row = (n - r_b) + (n - r_d)\n        \n        # Calculate the time to reach the same column\n        if c_b <= c_d:\n            time_to_col = c_d - c_b\n        else:\n            time_to_col = (m - c_b) + (m - c_d)\n        \n        # The time to clean the dirty cell is the minimum of the two times\n        result = min(time_to_row, time_to_col)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 2 were given"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        index += 6\n        \n        # Calculate the time to reach the dirty cell\n        # The robot cleans the row and column it is on, so we need to find the minimum time\n        # it takes to be on the same row or column as the dirty cell.\n        \n        # Calculate the time to reach the same row\n        if r_b <= r_d:\n            time_to_row = r_d - r_b\n        else:\n            time_to_row = (n - r_b) + (n - r_d)\n        \n        # Calculate the time to reach the same column\n        if c_b <= c_d:\n            time_to_col = c_d - c_b\n        else:\n            time_to_col = (m - c_b) + (m - c_d)\n        \n        # The time to clean the dirty cell is the minimum of the two times\n        result = min(time_to_row, time_to_col)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"details\": \"Read the input data, which includes the number of test cases and for each test case, the room dimensions, initial robot position, and dirty cell position.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement and cleaning process.\",\n      \"details\": \"For each test case, simulate the robot's movement according to the rules: reflect direction upon hitting walls and clean the row and column each second.\"\n    },\n    {\n      \"description\": \"Determine the time taken for the robot to clean the dirty cell.\",\n      \"details\": \"Track the time steps and check if the robot's current row or column matches the dirty cell's row or column. If so, record the time taken.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, output the time taken for the robot to clean the dirty cell.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Extract the room dimensions, initial robot position, and dirty cell position.\",\n    \"  - Initialize the robot's direction of movement (dr = 1, dc = 1).\",\n    \"  - Initialize a time counter to zero.\",\n    \"  - While the robot has not cleaned the dirty cell:\",\n    \"    - Check if the robot's current row or column matches the dirty cell's row or column.\",\n    \"    - If matched, record the current time as the result for this test case.\",\n    \"    - Otherwise, increment the time counter.\",\n    \"    - Update the robot's position based on the current direction.\",\n    \"    - Reflect the direction if the robot hits a wall.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def robot_cleaner(test_cases):\n    results = []\n    for n, m, r_b, c_b, r_d, c_d in test_cases:\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot cleans the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            r_b += dr\n            c_b += dc\n            time += 1\n            \n            # Reflect direction if hitting a wall\n            if r_b == 1 or r_b == n:\n                dr = -dr\n            if c_b == 1 or c_b == m:\n                dc = -dc\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        test_cases.append((n, m, r_b, c_b, r_d, c_d))\n        index += 6\n    \n    results = robot_cleaner(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: timed out"}, "Round_1": {"code": "def robot_cleaner(test_cases):\n    results = []\n    for n, m, r_b, c_b, r_d, c_d in test_cases:\n        dr, dc = 1, 1\n        time = 0\n        \n        while True:\n            # Check if the robot cleans the dirty cell\n            if r_b == r_d or c_b == c_d:\n                results.append(time)\n                break\n            \n            # Move the robot\n            r_b += dr\n            c_b += dc\n            time += 1\n            \n            # Reflect direction if hitting a wall\n            if r_b == 1 or r_b == n:\n                dr = -dr\n            if c_b == 1 or c_b == m:\n                dc = -dc\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        r_b = int(data[index + 2])\n        c_b = int(data[index + 3])\n        r_d = int(data[index + 4])\n        c_d = int(data[index + 5])\n        test_cases.append((n, m, r_b, c_b, r_d, c_d))\n        index += 6\n    \n    results = robot_cleaner(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}], "scores": [], "pass_results": [false, false, false, true, true, false, true, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 554, "prompt": "A robot cleaner is placed on the floor of a rectangle room, surrounded by walls, consisting of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns from 1 to m from left to right. A cell (r, c) denotes the intersection of the r-th row and the c-th column; the robot's initial position is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, moving from cell (r, c) to (r + dr, c + dc), starting with dr = 1, dc = 1, and if there is a vertical wall (left or right), dc is reflected before movement, becoming -dc. If there is a horizontal wall (upper or lower), dr is reflected before movement, becoming -dr.\n\nEach second, including before the robot starts moving, it cleans every cell it shares a row or column with. There is only one dirty cell at (r_d, c_d), and the robot's job is to clean it.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n", "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 314}
