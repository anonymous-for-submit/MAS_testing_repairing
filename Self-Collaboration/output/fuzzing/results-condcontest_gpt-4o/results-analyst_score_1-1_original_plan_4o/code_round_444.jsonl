{"name": "1579_C. Ticks", "description": "Casimir has a rectangular piece of paper with a checkered field of size n \u00d7 m. Initially, all cells of the field are white.\n\nLet us denote the cell with coordinates i vertically and j horizontally by (i, j). The upper left cell will be referred to as (1, 1) and the lower right cell as (n, m).\n\nCasimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: \n\n  1. First, the center cell (i, j) is painted black. \n  2. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black. \n  3. That is all the cells with coordinates (i - h, j \u00b1 h) for all h between 0 and d are painted. In particular, a tick consists of 2d + 1 black cells. \n\n\n\nAn already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3.\n\n<image>\n\nYou are given a description of a checkered field of size n \u00d7 m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks).\n\nDetermine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.", "tags": ["greedy", "implementation"], "difficulty": 9, "id": 1579, "sample_io": [{"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n"]}], "test_list": [{"input": "1\n1 1 1\n*\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n.*.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n1 1 1\n.\n", "output": ["YES\n"]}, {"input": "1\n3 9 1\n*.*...*.*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.*.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 5 1\n.....\n", "output": ["YES\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*..\n..*...\n", "output": ["NO\n"]}, {"input": "1\n3 6 1\n.*....\n..*.*.\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.+.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 5 2\n.....\n", "output": ["YES\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n...*.....\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..+.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n*..+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/.*.\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 2 2\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 3\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n1 1 0\n.\n", "output": ["YES\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n.*...\n.*.*.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n.*.+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n*..+-\n-.*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/.*.\n*.*.\n.*/.\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*/.+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n*.*.\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 2 2\n....*\n*..+-\n..+..\n.../.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....*.\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*./.\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 3 1\n..*/\n*.*.\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n./..*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-./..\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n../...\n.....*\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*./\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n...*.\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n.*.*\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 1 1\n..*/\n*.*.\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n./..*\n*..+-\n..+./\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 4\n-./..\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 2\n*-*...*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 3\n../...\n.....*\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n.*./\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/./*\n.*.*\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 1 2\n*\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*-*\n.*.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*.*...*.*\n.*../..*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n1 6 1\n.*....\n..*.*.\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.+-\n..*./\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.+.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n/..*\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..+./\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/*..\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n.*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n.*...*\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n+...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n4 4 1\n..*.\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n-+.*.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n./..*\n*..+-\n-.*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n/.*.\n*.*.\n.*/.\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n-+./*\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n.*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n**.......\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*.-\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n..*.\n./..\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 0\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*./.\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n3 4 1\n...*\n*.*-\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n...*.\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n*.*/\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 3 1\n..*/\n*.*.\n.+..\n..1.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-./..\n.....\n*.*.*\n*..*/\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n.-**..*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*/\n.*./\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n..//\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 3 1\n/..*\n.*.*\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n/...*\n*..+-\n..+./\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 3\n-./..\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 3\n*-*...*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 3\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n/.*.\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n../..\n.....\n*.*-*\n.*.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n/*.+-\n..*./\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n/..*\n*.+.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n/..*\n.*.*\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/*..\n*.*.\n.*..\n.0..\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.../.\n.....\n*.*.*\n.*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n.*...*\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n./..*\n*..+-\n-.*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n/.*.\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n-+./*\n./+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n-*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n..-...\n.....*\n*...*.\n.*.*.-\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*/*-\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n*.*/\n*.-.\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 1 1\n..*/\n*.*.\n.+..\n..1.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-./..\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 4 2\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*/\n.*./\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n..*.\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.,-\n./*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 1\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n/*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n//.*\n*.+.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n0..*\n.*.*\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n-.....\n.....*\n.*...*\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n./-.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n*../\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n../..\n*.*.*\n-*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.).\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*/*-\n.)..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 1 1\n..*/\n*.*.\n.+-.\n..1.\n", "output": ["NO\n"]}, {"input": "1\n5 5 3\n-./..\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 4 2\n.../..\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*/\n..*/\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.+-\n./*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 1\n../...\n*.....\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n0..*\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 6 3\n-.....\n.....*\n.*...*\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n.-/.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n.*./\n.//.\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n*../\n*.*.\n*...\n.//.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n../..\n*.*.*\n-+..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n.*..\n*.).\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n5 5 3\n-....\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n*...\n*.*/\n..*/\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n..*.\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.+.\n./*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 1\n../.-.\n*.....\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.+.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n*..0\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n-.....\n.....*\n.*...*\n.*.*..\n..*../\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n..*.\n.-/.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n.*//\n.//.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n*../\n*.*.\n*...\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n.*/.\n*.).\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 5 3\n-....\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n*...\n*.*/\n/*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n..).\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.+.\n./*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n2 6 1\n../.-.\n*.....\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*-+.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n*.//\n.//.\n", "output": ["NO\n"]}, {"input": "1\n3 5 3\n-....\n.....\n*.*.*\n/*..*\n..)..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n.)..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.*.\n./*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*-+.\n/*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 1 2\n..*.\n*.+.\n*.//\n.//.\n", "output": ["NO\n"]}, {"input": "1\n3 5 3\n....-\n.....\n*.*.*\n/*..*\n..)..\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.*.\n-/*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n.*.*.\n/.*..\n", "output": ["NO\n"]}, {"input": "1\n1 9 1\n*.*...*.*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n...**\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n3 6 1\n.*../.\n..*.*.\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n....\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n..**\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n2 5 1\n....*\n.*.+.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n.*..\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n/..*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....)\n*..+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..*..\n-....\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n-+..*\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n*/*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*.*...*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..+.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n.*.+-\n..*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n).*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n*..+-\n..*-.\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/.*.\n.*.*\n.*/.\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*/.+-\n..+..\n-....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n**..\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n*-.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....*.\n-...*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...).\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n...-.*.\n..*.*..\n...*./.\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}], "task_id": "codecontest/15", "repair_prompt": ["Casimir is curious to determine if the checkered field pattern can be recreated using ticks of size at least k. He wants to ensure no cells contradict the constraints of the tick size.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark visited cells\n    visited = [[False] * m for _ in range(n)]\n\n    # Function to check if a tick of size s can be centered at (i, j)\n    def can_form_tick(i, j, s):\n        if i - s < 0 or i + s >= n or j - s < 0 or j + s >= m:\n            return False\n        return (field[i - s][j - s] == '*' and field[i - s][j + s] == '*' and\n                field[i + s][j - s] == '*' and field[i + s][j + s] == '*')\n\n    # Iterate over each cell in the field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Try to form the largest possible tick centered at (i, j)\n                size = 0\n                while can_form_tick(i, j, size + 1):\n                    size += 1\n\n                # If the tick size is at least k, mark the cells as visited\n                if size >= k:\n                    for s in range(size + 1):\n                        visited[i - s][j - s] = True\n                        visited[i - s][j + s] = True\n                        visited[i + s][j - s] = True\n                        visited[i + s][j + s] = True\n\n    # Check if all '*' cells are part of a tick of size at least k\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not visited[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        field = [data[index + i + 1] for i in range(n)]\n        index += n + 1\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark used asterisks\n    used = [[False] * m for _ in range(n)]\n\n    # Check if a tick of size `size` can be centered at (i, j)\n    def can_place_tick(i, j, size):\n        for d in range(size):\n            if i - d < 0 or j - d < 0 or j + d >= m:\n                return False\n            if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                return False\n        return True\n\n    # Mark the tick of size `size` centered at (i, j) as used\n    def mark_tick(i, j, size):\n        for d in range(size):\n            used[i - d][j - d] = True\n            used[i - d][j + d] = True\n\n    # Iterate over each cell to find possible ticks\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Find the maximum size of the tick that can be placed here\n                size = 0\n                while can_place_tick(i, j, size + 1):\n                    size += 1\n                # If the size is at least k, mark it\n                if size >= k:\n                    mark_tick(i, j, size)\n\n    # Check if all asterisks are used\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not used[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a 2D list to mark cells that are part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible ticks from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size k can be formed with center at (i, j)\n                size = 0\n                while True:\n                    if i - size < 0 or j - size < 0 or j + size >= m:\n                        break\n                    if field[i - size][j - size] == '*' and field[i - size][j + size] == '*':\n                        size += 1\n                    else:\n                        break\n\n                # If a tick of at least size k is found, mark the cells\n                if size > k:\n                    for s in range(size):\n                        marked[i - s][j - s] = True\n                        marked[i - s][j + s] = True\n\n    # Check if all '*' are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_place_tick(field, n, m, x, y, size):\n    # Check if a tick of the given size can be placed with center at (x, y)\n    for i in range(size):\n        if x - i < 0 or y - i < 0 or y + i >= m:\n            return False\n        if field[x - i][y - i] != '*' or field[x - i][y + i] != '*':\n            return False\n    return True\n\ndef solve_test_case(n, m, k, field):\n    # Create a 2D list to mark covered positions\n    covered = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to find valid tick centers\n    for x in range(n):\n        for y in range(m):\n            # Try to place the largest possible tick\n            size = 0\n            while can_place_tick(field, n, m, x, y, size + 1):\n                size += 1\n            # Mark the positions covered by the tick\n            if size >= k:\n                for i in range(size):\n                    covered[x - i][y - i] = True\n                    covered[x - i][y + i] = True\n    \n    # Verify all '*' are covered\n    for x in range(n):\n        for y in range(m):\n            if field[x][y] == '*' and not covered[x][y]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = solve_test_case(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_place_tick(field, n, m, x, y, size):\n    # Check if a tick of the given size can be centered at (x, y)\n    for i in range(size):\n        if x - i < 0 or y - i < 0 or y + i >= m:\n            return False\n        if field[x - i][y - i] != '*' or field[x - i][y + i] != '*':\n            return False\n    return True\n\ndef solve_test_case(n, m, k, field):\n    # Create a matrix to track covered cells\n    covered = [[False] * m for _ in range(n)]\n    \n    # Try to place the largest possible tick at each cell\n    for x in range(n):\n        for y in range(m):\n            if field[x][y] == '*':\n                # Find the largest tick size that can be placed here\n                size = 0\n                while can_place_tick(field, n, m, x, y, size + 1):\n                    size += 1\n                # If the size is at least k, mark the cells as covered\n                if size >= k:\n                    for i in range(size):\n                        covered[x - i][y - i] = True\n                        covered[x - i][y + i] = True\n    \n    # Check if all '*' cells are covered\n    for x in range(n):\n        for y in range(m):\n            if field[x][y] == '*' and not covered[x][y]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        result = solve_test_case(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a 2D list to mark cells that are part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible ticks from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size k can be formed with center at (i, j)\n                size = 0\n                while True:\n                    if (i - size >= 0 and j - size >= 0 and j + size < m and\n                        field[i - size][j - size] == '*' and field[i - size][j + size] == '*'):\n                        size += 1\n                    else:\n                        break\n\n                # If a tick of at least size k is found, mark the cells\n                if size > k:\n                    for s in range(size):\n                        marked[i - s][j - s] = True\n                        marked[i - s][j + s] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a matrix to mark cells that can be part of a tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check if it can be the center of a tick of size at least k\n    for i in range(k, n):\n        for j in range(k, m):\n            if field[i][j] == '*':\n                # Check if a tick of size k can be formed with center at (i, j)\n                can_form_tick = True\n                for d in range(1, k + 1):\n                    if (i - d < 0 or j - d < 0 or i + d >= n or j + d >= m or\n                        field[i - d][j - d] != '*' or field[i - d][j + d] != '*' or\n                        field[i + d][j - d] != '*' or field[i + d][j + d] != '*'):\n                        can_form_tick = False\n                        break\n                if can_form_tick:\n                    # Mark the cells that can be part of a tick\n                    for d in range(1, k + 1):\n                        marked[i - d][j - d] = True\n                        marked[i - d][j + d] = True\n                        marked[i + d][j - d] = True\n                        marked[i + d][j + d] = True\n\n    # Validate the field against the tick constraints\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a 2D list to mark cells that can be part of a valid tick\n    valid_tick = [[False] * m for _ in range(n)]\n\n    # Check for each cell if it can be the center of a tick of size at least k\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size k can be formed with (i, j) as the center\n                size = 0\n                while True:\n                    if i - size < 0 or j - size < 0 or j + size >= m:\n                        break\n                    if field[i - size][j - size] != '*' or field[i - size][j + size] != '*':\n                        break\n                    size += 1\n                # If the size of the tick is at least k, mark the cells as valid\n                if size > k:\n                    for x in range(size):\n                        valid_tick[i - x][j - x] = True\n                        valid_tick[i - x][j + x] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not valid_tick[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_recreate_field(n, m, k, field):\n    # Create a copy of the field to mark valid tick positions\n    valid_field = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size k can be centered at (i, j)\n                valid_tick = True\n                for x in range(1, k + 1):\n                    if i - x < 0 or j - x < 0 or j + x >= m:\n                        valid_tick = False\n                        break\n                    if field[i - x][j - x] != '*' or field[i - x][j + x] != '*':\n                        valid_tick = False\n                        break\n                if valid_tick:\n                    # Mark the positions of the tick as valid\n                    for x in range(k + 1):\n                        valid_field[i - x][j - x] = True\n                        valid_field[i - x][j + x] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not valid_field[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_recreate_field(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a matrix to track if a cell is part of a valid tick\n    valid_tick = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell in the field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if we can form a tick of size at least k centered at (i, j)\n                size = 0\n                while True:\n                    if (i - size >= 0 and j - size >= 0 and j + size < m and\n                        field[i - size][j - size] == '*' and field[i - size][j + size] == '*'):\n                        size += 1\n                    else:\n                        break\n\n                # If the tick size is at least k, mark the cells as part of a valid tick\n                if size > k:\n                    for s in range(size):\n                        valid_tick[i - s][j - s] = True\n                        valid_tick[i - s][j + s] = True\n\n    # Check if all asterisks are part of valid ticks\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not valid_tick[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark visited cells\n    visited = [[False] * m for _ in range(n)]\n\n    # Function to check if a tick of size s can be centered at (i, j)\n    def can_form_tick(i, j, s):\n        if i - s < 0 or i + s >= n or j - s < 0 or j + s >= m:\n            return False\n        return (field[i - s][j - s] == '*' and field[i - s][j + s] == '*' and\n                field[i + s][j - s] == '*' and field[i + s][j + s] == '*')\n\n    # Iterate over each cell in the field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Try to form the largest possible tick centered at (i, j)\n                size = 0\n                while can_form_tick(i, j, size + 1):\n                    size += 1\n\n                # If the tick size is at least k, mark the cells as visited\n                if size >= k:\n                    for s in range(size + 1):\n                        visited[i - s][j - s] = True\n                        visited[i - s][j + s] = True\n                        visited[i + s][j - s] = True\n                        visited[i + s][j + s] = True\n\n    # Check if all '*' cells are part of a tick of size at least k\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not visited[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        field = [data[index + i + 1] for i in range(n)]\n        index += n + 1\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers n, m, and k from the first line of the test case description.\",\n        \"Read the next n lines to obtain the field pattern, storing each line as a list of characters.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the field can be recreated using ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size k or larger.\",\n        \"A tick of size s centered at (i, j) requires that the cells (i-s, j-s), (i-s, j+s), (i+s, j-s), and (i+s, j+s) are all '*'.\",\n        \"Ensure that all '*' in the field can be part of a tick of size at least k.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, if the field can be recreated using ticks of size at least k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, analyze the field to determine if it can be recreated using ticks of size at least k.\",\n    \"Output 'YES' if the field can be recreated, otherwise output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark visited cells\n    visited = [[False] * m for _ in range(n)]\n\n    # Function to check if a tick of size s can be centered at (i, j)\n    def can_form_tick(i, j, s):\n        if i - s < 0 or i + s >= n or j - s < 0 or j + s >= m:\n            return False\n        return (field[i - s][j - s] == '*' and field[i - s][j + s] == '*' and\n                field[i + s][j - s] == '*' and field[i + s][j + s] == '*')\n\n    # Iterate over each cell in the field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Try to form the largest possible tick centered at (i, j)\n                size = 0\n                while can_form_tick(i, j, size + 1):\n                    size += 1\n\n                # If the tick size is at least k, mark the cells as visited\n                if size >= k:\n                    for s in range(size + 1):\n                        visited[i - s][j - s] = True\n                        visited[i - s][j + s] = True\n                        visited[i + s][j - s] = True\n                        visited[i + s][j + s] = True\n\n    # Check if all '*' cells are part of a tick of size at least k\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not visited[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        field = [data[index + i + 1] for i in range(n)]\n        index += n + 1\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers n, m, and k from the first line of the test case description.\",\n        \"Read the next n lines to obtain the field pattern, storing each line as a list of characters.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the field can be recreated using ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell contains an asterisk ('*').\",\n        \"If it does, verify if it can be the center of a tick of size at least k.\",\n        \"A tick of size k requires k asterisks diagonally in each direction (up-left, up-right, down-left, down-right).\",\n        \"Ensure no cells contradict the constraints of the tick size.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, if the field can be recreated using ticks of size at least k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, analyze the field to determine if it can be recreated using ticks of size at least k.\",\n    \"Output the result for each test case based on the analysis.\"\n  ]\n}\n```", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark used asterisks\n    used = [[False] * m for _ in range(n)]\n\n    # Check if a tick of size `size` can be centered at (i, j)\n    def can_place_tick(i, j, size):\n        for d in range(size):\n            if i - d < 0 or j - d < 0 or j + d >= m:\n                return False\n            if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                return False\n        return True\n\n    # Mark the tick of size `size` centered at (i, j) as used\n    def mark_tick(i, j, size):\n        for d in range(size):\n            used[i - d][j - d] = True\n            used[i - d][j + d] = True\n\n    # Iterate over each cell to find possible ticks\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Find the maximum size of the tick that can be placed here\n                size = 0\n                while can_place_tick(i, j, size + 1):\n                    size += 1\n                # If the size is at least k, mark it\n                if size >= k:\n                    mark_tick(i, j, size)\n\n    # Check if all asterisks are used\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not used[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 100)"}, "Round_1": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark used asterisks\n    used = [[False] * m for _ in range(n)]\n\n    # Check if a tick of size `size` can be centered at (i, j)\n    def can_place_tick(i, j, size):\n        for d in range(size):\n            if i - d < 0 or j - d < 0 or j + d >= m:\n                return False\n            if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                return False\n        return True\n\n    # Mark the tick of size `size` centered at (i, j) as used\n    def mark_tick(i, j, size):\n        for d in range(size):\n            used[i - d][j - d] = True\n            used[i - d][j + d] = True\n\n    # Iterate over each cell to find possible ticks\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Find the maximum size of the tick that can be placed here\n                size = 0\n                while can_place_tick(i, j, size + 1):\n                    size += 1\n                # If the size is at least k, mark it\n                if size >= k:\n                    mark_tick(i, j, size)\n\n    # Check if all asterisks are used\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not used[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers n, m, and k from the first line of the test case description.\",\n        \"Read the next n lines to obtain the field pattern, storing each line as a list of characters.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the field can be recreated using ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell contains an asterisk ('*').\",\n        \"If it does, attempt to form a tick centered at this cell with size at least k.\",\n        \"Verify that the tick does not contradict the constraints of the tick size by ensuring all required cells are asterisks.\",\n        \"If a valid tick is found, mark the cells as part of a tick.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, after processing the field, determine if all asterisks can be part of valid ticks.\",\n        \"If all asterisks are part of valid ticks, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, iterate over the field to check if it can be recreated using ticks of size at least k.\",\n    \"For each cell containing an asterisk, attempt to form a tick centered at this cell with size at least k.\",\n    \"Verify the tick does not contradict the constraints of the tick size.\",\n    \"Mark cells as part of a tick if a valid tick is found.\",\n    \"After processing the field, determine if all asterisks are part of valid ticks.\",\n    \"Output 'YES' if all asterisks are part of valid ticks, otherwise output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a 2D list to mark cells that are part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible ticks from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size k can be formed with center at (i, j)\n                size = 0\n                while True:\n                    if i - size < 0 or j - size < 0 or j + size >= m:\n                        break\n                    if field[i - size][j - size] == '*' and field[i - size][j + size] == '*':\n                        size += 1\n                    else:\n                        break\n\n                # If a tick of at least size k is found, mark the cells\n                if size > k:\n                    for s in range(size):\n                        marked[i - s][j - s] = True\n                        marked[i - s][j + s] = True\n\n    # Check if all '*' are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the field dimensions, minimum tick size, and the field pattern.\",\n      \"output\": \"A structured representation of the input data, such as a list of dictionaries, where each dictionary contains the details of a single test case.\"\n    },\n    {\n      \"description\": \"For each test case, determine if the field can be recreated using ticks of at least the given size k.\",\n      \"output\": \"A boolean value or string ('YES' or 'NO') indicating whether the field can be recreated for each test case.\"\n    },\n    {\n      \"description\": \"Implement a function to check if a tick of a given size can be placed at a specific position in the field.\",\n      \"output\": \"A boolean value indicating whether a tick can be placed at the specified position.\"\n    },\n    {\n      \"description\": \"Iterate over each cell in the field to check if it can be the center of a valid tick of size k or larger.\",\n      \"output\": \"A list of positions where valid ticks can be placed.\"\n    },\n    {\n      \"description\": \"Verify that all '*' in the field are covered by valid ticks of at least size k.\",\n      \"output\": \"A boolean value indicating whether all '*' are covered by valid ticks.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and details for each test case.\",\n    \"For each test case, initialize a data structure to represent the field and store the positions of all '*' characters.\",\n    \"Define a function to check if a tick of a given size can be placed at a specific position in the field.\",\n    \"Iterate over each cell in the field to determine if it can be the center of a valid tick of size k or larger.\",\n    \"Mark the positions covered by valid ticks in a separate data structure.\",\n    \"After processing all potential tick centers, verify that all '*' in the field are covered by valid ticks.\",\n    \"Output 'YES' if all '*' are covered by valid ticks, otherwise output 'NO'.\",\n    \"Repeat the process for each test case and print the results.\"\n  ]\n}\n```", "Round_0": {"code": "def can_place_tick(field, n, m, x, y, size):\n    # Check if a tick of the given size can be placed with center at (x, y)\n    for i in range(size):\n        if x - i < 0 or y - i < 0 or y + i >= m:\n            return False\n        if field[x - i][y - i] != '*' or field[x - i][y + i] != '*':\n            return False\n    return True\n\ndef solve_test_case(n, m, k, field):\n    # Create a 2D list to mark covered positions\n    covered = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to find valid tick centers\n    for x in range(n):\n        for y in range(m):\n            # Try to place the largest possible tick\n            size = 0\n            while can_place_tick(field, n, m, x, y, size + 1):\n                size += 1\n            # Mark the positions covered by the tick\n            if size >= k:\n                for i in range(size):\n                    covered[x - i][y - i] = True\n                    covered[x - i][y + i] = True\n    \n    # Verify all '*' are covered\n    for x in range(n):\n        for y in range(m):\n            if field[x][y] == '*' and not covered[x][y]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = solve_test_case(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: solve_test_case() missing 4 required positional arguments: 'n', 'm', 'k', and 'field'"}, "Round_1": {"code": "def can_place_tick(field, n, m, x, y, size):\n    # Check if a tick of the given size can be placed with center at (x, y)\n    for i in range(size):\n        if x - i < 0 or y - i < 0 or y + i >= m:\n            return False\n        if field[x - i][y - i] != '*' or field[x - i][y + i] != '*':\n            return False\n    return True\n\ndef solve_test_case(n, m, k, field):\n    # Create a 2D list to mark covered positions\n    covered = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to find valid tick centers\n    for x in range(n):\n        for y in range(m):\n            # Try to place the largest possible tick\n            size = 0\n            while can_place_tick(field, n, m, x, y, size + 1):\n                size += 1\n            # Mark the positions covered by the tick\n            if size >= k:\n                for i in range(size):\n                    covered[x - i][y - i] = True\n                    covered[x - i][y + i] = True\n    \n    # Verify all '*' are covered\n    for x in range(n):\n        for y in range(m):\n            if field[x][y] == '*' and not covered[x][y]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = solve_test_case(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the field dimensions, minimum tick size, and the field pattern.\",\n      \"output\": \"A structured representation of the input data, such as a list of dictionaries, where each dictionary contains the details of a test case.\"\n    },\n    {\n      \"description\": \"For each test case, determine if the field can be recreated using ticks of at least the given size k.\",\n      \"output\": \"A boolean value indicating whether the field can be recreated (True for YES, False for NO).\"\n    },\n    {\n      \"description\": \"Implement a function to check if a tick of a given size can be centered at a specific cell in the field.\",\n      \"output\": \"A boolean value indicating whether a tick of the specified size can be centered at the given cell.\"\n    },\n    {\n      \"description\": \"Iterate over each cell in the field to identify potential tick centers and verify if the entire field can be covered by valid ticks.\",\n      \"output\": \"A boolean value indicating whether the entire field can be covered by valid ticks.\"\n    },\n    {\n      \"description\": \"Format the results for each test case into the required output format.\",\n      \"output\": \"A list of strings, each being 'YES' or 'NO', corresponding to each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to extract the number of test cases and details for each test case.\",\n    \"For each test case, initialize a data structure to track which cells are covered by valid ticks.\",\n    \"Define a function to check if a tick of size k can be centered at a given cell, ensuring all required cells for the tick are within bounds and marked with '*'.\",\n    \"Iterate over each cell in the field, attempting to place the largest possible tick centered at each cell, and mark the covered cells.\",\n    \"After attempting to place ticks, verify if all '*' cells in the field are covered by valid ticks.\",\n    \"Store the result ('YES' or 'NO') for each test case based on whether the field can be fully covered by valid ticks.\",\n    \"Output the results for all test cases in the specified format.\"\n  ]\n}\n```", "Round_0": {"code": "def can_place_tick(field, n, m, x, y, size):\n    # Check if a tick of the given size can be centered at (x, y)\n    for i in range(size):\n        if x - i < 0 or y - i < 0 or y + i >= m:\n            return False\n        if field[x - i][y - i] != '*' or field[x - i][y + i] != '*':\n            return False\n    return True\n\ndef solve_test_case(n, m, k, field):\n    # Create a matrix to track covered cells\n    covered = [[False] * m for _ in range(n)]\n    \n    # Try to place the largest possible tick at each cell\n    for x in range(n):\n        for y in range(m):\n            if field[x][y] == '*':\n                # Find the largest tick size that can be placed here\n                size = 0\n                while can_place_tick(field, n, m, x, y, size + 1):\n                    size += 1\n                # If the size is at least k, mark the cells as covered\n                if size >= k:\n                    for i in range(size):\n                        covered[x - i][y - i] = True\n                        covered[x - i][y + i] = True\n    \n    # Check if all '*' cells are covered\n    for x in range(n):\n        for y in range(m):\n            if field[x][y] == '*' and not covered[x][y]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        result = solve_test_case(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers n, m, and k from the first line of the test case description.\",\n        \"Read the next n lines to obtain the field pattern, storing each line as a list of characters.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the field can be recreated using ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell contains an asterisk ('*').\",\n        \"If it does, attempt to form a tick centered at this cell with size at least k.\",\n        \"Verify that the tick does not contradict the constraints of the tick size by checking the diagonals.\",\n        \"Ensure that all asterisks in the field can be part of a valid tick of size at least k.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, if the field can be recreated using ticks of size at least k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, analyze the field to determine if it can be recreated using ticks of size at least k.\",\n    \"Iterate over each cell in the field and attempt to form a valid tick centered at each asterisk.\",\n    \"Check the diagonals to ensure the tick size constraints are met.\",\n    \"Output 'YES' if the field can be recreated using valid ticks, otherwise output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a 2D list to mark cells that are part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible ticks from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size k can be formed with center at (i, j)\n                size = 0\n                while True:\n                    if (i - size >= 0 and j - size >= 0 and j + size < m and\n                        field[i - size][j - size] == '*' and field[i - size][j + size] == '*'):\n                        size += 1\n                    else:\n                        break\n\n                # If a tick of at least size k is found, mark the cells\n                if size > k:\n                    for s in range(size):\n                        marked[i - s][j - s] = True\n                        marked[i - s][j + s] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers n, m, and k from the first line of the test case description.\",\n        \"Read the next n lines to obtain the field pattern, storing each line as a list of characters.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the field can be recreated using ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size at least k.\",\n        \"A tick of size k centered at (i, j) requires that for each 1 \u2264 d \u2264 k, the cells (i-d, j-d), (i-d, j+d), (i+d, j-d), and (i+d, j+d) are all '*'.\",\n        \"Mark cells that can be part of a tick of size at least k.\"\n      ]\n    },\n    {\n      \"description\": \"Validate the field against the tick constraints.\",\n      \"steps\": [\n        \"For each test case, verify that all '*' cells in the field can be part of a tick of size at least k.\",\n        \"If any '*' cell cannot be part of a valid tick, the answer for that test case is NO.\",\n        \"Otherwise, the answer is YES.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, analyze the field to determine if it can be recreated using ticks of size at least k.\",\n    \"Iterate over each cell in the field to check if it can be the center of a tick of size at least k.\",\n    \"Mark cells that can be part of a tick of size at least k.\",\n    \"Validate the field against the tick constraints to ensure all '*' cells can be part of a valid tick.\",\n    \"Output YES if the field can be recreated using ticks of size at least k, otherwise output NO.\"\n  ]\n}\n```", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a matrix to mark cells that can be part of a tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check if it can be the center of a tick of size at least k\n    for i in range(k, n):\n        for j in range(k, m):\n            if field[i][j] == '*':\n                # Check if a tick of size k can be formed with center at (i, j)\n                can_form_tick = True\n                for d in range(1, k + 1):\n                    if (i - d < 0 or j - d < 0 or i + d >= n or j + d >= m or\n                        field[i - d][j - d] != '*' or field[i - d][j + d] != '*' or\n                        field[i + d][j - d] != '*' or field[i + d][j + d] != '*'):\n                        can_form_tick = False\n                        break\n                if can_form_tick:\n                    # Mark the cells that can be part of a tick\n                    for d in range(1, k + 1):\n                        marked[i - d][j - d] = True\n                        marked[i - d][j + d] = True\n                        marked[i + d][j - d] = True\n                        marked[i + d][j + d] = True\n\n    # Validate the field against the tick constraints\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers n, m, and k from the first line of the test case description.\",\n        \"Read the next n lines to obtain the field pattern, storing each line as a list of characters.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the field can be recreated using ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size at least k.\",\n        \"A tick of size k centered at (i, j) requires '*' at positions (i-x, j-x) and (i-x, j+x) for all x from 1 to k.\",\n        \"Ensure no cells contradict the constraints of the tick size.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If the field can be recreated using ticks of size at least k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, analyze the field to determine if it can be recreated using ticks of size at least k.\",\n    \"Iterate over each cell in the field to check if it can be the center of a valid tick.\",\n    \"Output 'YES' if the field can be recreated, otherwise output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a 2D list to mark cells that can be part of a valid tick\n    valid_tick = [[False] * m for _ in range(n)]\n\n    # Check for each cell if it can be the center of a tick of size at least k\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size k can be formed with (i, j) as the center\n                size = 0\n                while True:\n                    if i - size < 0 or j - size < 0 or j + size >= m:\n                        break\n                    if field[i - size][j - size] != '*' or field[i - size][j + size] != '*':\n                        break\n                    size += 1\n                # If the size of the tick is at least k, mark the cells as valid\n                if size > k:\n                    for x in range(size):\n                        valid_tick[i - x][j - x] = True\n                        valid_tick[i - x][j + x] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not valid_tick[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers n, m, and k from the first line of the test case description.\",\n        \"Read the next n lines to obtain the field pattern, storing each line as a list of characters.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the field can be recreated using ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size at least k.\",\n        \"A tick of size k centered at (i, j) requires '*' at positions (i-x, j-x) and (i-x, j+x) for all x from 1 to k.\",\n        \"Ensure no cells contradict the constraints of the tick size.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If the field can be recreated using ticks of size at least k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, analyze the field to determine if it can be recreated using ticks of size at least k.\",\n    \"Iterate over each cell in the field to check if it can be the center of a valid tick.\",\n    \"Output 'YES' if the field can be recreated, otherwise output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_recreate_field(n, m, k, field):\n    # Create a copy of the field to mark valid tick positions\n    valid_field = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size k can be centered at (i, j)\n                valid_tick = True\n                for x in range(1, k + 1):\n                    if i - x < 0 or j - x < 0 or j + x >= m:\n                        valid_tick = False\n                        break\n                    if field[i - x][j - x] != '*' or field[i - x][j + x] != '*':\n                        valid_tick = False\n                        break\n                if valid_tick:\n                    # Mark the positions of the tick as valid\n                    for x in range(k + 1):\n                        valid_field[i - x][j - x] = True\n                        valid_field[i - x][j + x] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not valid_field[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_recreate_field(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers n, m, and k from the first line of the test case description.\",\n        \"Read the next n lines to obtain the field pattern, storing each line as a list of characters.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the field can be recreated using ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell contains an asterisk ('*').\",\n        \"If it does, attempt to form a tick centered at this cell with size at least k.\",\n        \"Verify that the tick does not contradict the constraints of the tick size.\",\n        \"Ensure that all asterisks in the field can be part of valid ticks.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, if the field can be recreated using valid ticks, output 'YES'.\",\n        \"If the field cannot be recreated, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, analyze the field to determine if it can be recreated using ticks of size at least k.\",\n    \"Iterate over each cell in the field to check for valid tick formation.\",\n    \"Ensure all asterisks are part of valid ticks.\",\n    \"Output 'YES' or 'NO' for each test case based on the analysis.\"\n  ]\n}\n```", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a matrix to track if a cell is part of a valid tick\n    valid_tick = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell in the field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if we can form a tick of size at least k centered at (i, j)\n                size = 0\n                while True:\n                    if (i - size >= 0 and j - size >= 0 and j + size < m and\n                        field[i - size][j - size] == '*' and field[i - size][j + size] == '*'):\n                        size += 1\n                    else:\n                        break\n\n                # If the tick size is at least k, mark the cells as part of a valid tick\n                if size > k:\n                    for s in range(size):\n                        valid_tick[i - s][j - s] = True\n                        valid_tick[i - s][j + s] = True\n\n    # Check if all asterisks are part of valid ticks\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not valid_tick[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read the integers n, m, and k from the first line of the test case description.\",\n        \"Read the next n lines to obtain the field pattern, storing each line as a list of characters.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the field can be recreated using ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size k or larger.\",\n        \"A tick of size s centered at (i, j) requires that the cells (i-s, j-s), (i-s, j+s), (i+s, j-s), and (i+s, j+s) are all '*'.\",\n        \"Ensure that all '*' in the field can be part of a tick of size at least k.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, if the field can be recreated using ticks of size at least k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, analyze the field to determine if it can be recreated using ticks of size at least k.\",\n    \"Output 'YES' if the field can be recreated, otherwise output 'NO'.\"\n  ]\n}\n```", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark visited cells\n    visited = [[False] * m for _ in range(n)]\n\n    # Function to check if a tick of size s can be centered at (i, j)\n    def can_form_tick(i, j, s):\n        if i - s < 0 or i + s >= n or j - s < 0 or j + s >= m:\n            return False\n        return (field[i - s][j - s] == '*' and field[i - s][j + s] == '*' and\n                field[i + s][j - s] == '*' and field[i + s][j + s] == '*')\n\n    # Iterate over each cell in the field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Try to form the largest possible tick centered at (i, j)\n                size = 0\n                while can_form_tick(i, j, size + 1):\n                    size += 1\n\n                # If the tick size is at least k, mark the cells as visited\n                if size >= k:\n                    for s in range(size + 1):\n                        visited[i - s][j - s] = True\n                        visited[i - s][j + s] = True\n                        visited[i + s][j - s] = True\n                        visited[i + s][j + s] = True\n\n    # Check if all '*' cells are part of a tick of size at least k\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not visited[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        field = [data[index + i + 1] for i in range(n)]\n        index += n + 1\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, false, true, false, true, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 444, "prompt": "Casimir is curious to determine if the checkered field pattern can be recreated using ticks of size at least k. He wants to ensure no cells contradict the constraints of the tick size.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 263}
