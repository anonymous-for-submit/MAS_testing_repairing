{"name": "1575_I. Illusions of the Desert", "description": "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions.\n\nThe map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them such that it is possible to travel between each pair of rooms through several tunnels.\n\nThe i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z.\n\nTo prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries.\n\nThere are two types of queries to be done:\n\n  * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). \n  * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). \n\n\n\nHelp them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "tags": ["data structures", "trees"], "difficulty": 15, "id": 1575, "sample_io": [{"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["39\n32\n0\n"]}], "test_list": [{"input": "2 1\n-1000000000 1000000000\n2 1\n2 1 2\n", "output": ["2000000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000000003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["19\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n30\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n"]}, {"input": "2 1\n-1000000000 1010000000\n2 1\n2 1 2\n", "output": ["2010000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000002003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["39\n33\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n32\n23\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n32\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["9\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["35\n29\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["9\n32\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["31\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["3\n26\n22\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n40\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n38\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n29\n0\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["17\n0\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["16\n0\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n19\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n22\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n34\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n8\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["9\n13\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 2 3\n", "output": ["8\n11\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000002003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n22\n15\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["1\n4\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["21\n32\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 6 3\n", "output": ["9\n30\n5\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 0\n2 1 2\n2 5 2\n", "output": ["3\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n45\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n24\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n7\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n21\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n15\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["19\n32\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["21\n0\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["1\n14\n21\n"]}, {"input": "6 4\n0 -9 2 -1 3 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["19\n30\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["38\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["3\n24\n22\n"]}, {"input": "6 3\n0 0 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 4\n1 2 3\n", "output": ["19\n12\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["28\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n4\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 5 2\n", "output": ["1\n5\n9\n"]}, {"input": "6 4\n10 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["26\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["0\n5\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["5\n5\n0\n"]}, {"input": "2 1\n-1000000000 1000000010\n2 1\n2 1 2\n", "output": ["2000000010\n"]}, {"input": "6 4\n0 -9 2 -1 4 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n22\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["9\n12\n21\n"]}, {"input": "2 1\n-651044801 1010000000\n2 1\n2 1 2\n", "output": ["1661044801\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["10\n0\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n2 3 3\n", "output": ["9\n15\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["35\n35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -2\n2 1 2\n1 3 2\n", "output": ["9\n31\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n30\n0\n"]}, {"input": "6 4\n10 -13 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["0\n26\n22\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n35\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n23\n"]}, {"input": "6 4\n-1 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["17\n0\n13\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n13\n"]}, {"input": "6 4\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 2 3\n", "output": ["8\n12\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["39\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n31\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 5\n", "output": ["0\n7\n4\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["37\n0\n0\n"]}, {"input": "4 4\n2 -1000 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n21\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n43\n15\n"]}, {"input": "6 4\n3 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["19\n0\n"]}, {"input": "2 1\n-651044801 1010000100\n2 1\n2 1 2\n", "output": ["1661044901\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["28\n30\n14\n"]}, {"input": "6 4\n0 -6 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n20\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["9\n0\n13\n"]}, {"input": "6 3\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 5\n2 2 3\n", "output": ["8\n8\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["37\n0\n"]}, {"input": "4 4\n2 -1000 110 4\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000004\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n13\n51\n"]}, {"input": "6 4\n0 -9 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["27\n30\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["51\n25\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n10\n48\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["57\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n55\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 6\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n24\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["37\n40\n"]}, {"input": "2 1\n-1000000000 1010001000\n2 1\n2 1 2\n", "output": ["2010001000\n"]}, {"input": "6 4\n0 -9 2 -1 4 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n26\n17\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["5\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["1\n34\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["17\n35\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n38\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n8\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 6\n", "output": ["16\n0\n10\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n"]}, {"input": "6 4\n0 -12 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n16\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["29\n8\n0\n"]}, {"input": "6 4\n10 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n27\n0\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["49\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 1\n", "output": ["9\n0\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 6\n", "output": ["9\n13\n7\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 1 3\n", "output": ["17\n45\n35\n"]}, {"input": "6 4\n0 -3 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n23\n0\n"]}, {"input": "6 4\n10 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["11\n24\n"]}, {"input": "6 4\n10 -9 2 -1 6 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["42\n0\n"]}, {"input": "6 4\n1 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["4\n24\n22\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["0\n4\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 6\n", "output": ["0\n5\n2\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 4 3\n", "output": ["9\n13\n21\n"]}, {"input": "6 4\n10 -9 2 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["31\n31\n0\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 6\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n22\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["47\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n28\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n23\n"]}, {"input": "6 4\n0 -9 4 1 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["1\n0\n13\n"]}, {"input": "6 4\n0 -9 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["8\n12\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n25\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 1 5\n", "output": ["0\n7\n2\n"]}, {"input": "4 4\n2 -1350 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1460\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 7 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n24\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -4\n2 1 2\n2 2 3\n", "output": ["28\n34\n10\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n3 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["23\n29\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 4 2\n2 2 3\n", "output": ["9\n9\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n5 2\n2 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n20\n13\n"]}, {"input": "6 4\n3 -2 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 4\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["21\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["28\n15\n"]}, {"input": "6 4\n0 -8 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["26\n29\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 2\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n67\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 3\n", "output": ["37\n23\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 6\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["30\n10\n20\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 2 4\n1 2 3\n", "output": ["9\n44\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 4\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n33\n"]}, {"input": "6 3\n10 -21 2 -1 8 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n63\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 5\n0 2 3\n", "output": ["9\n7\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 3 3\n", "output": ["10\n35\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -4\n2 1 2\n1 3 3\n", "output": ["31\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["2\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n9\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 6\n", "output": ["16\n0\n15\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["33\n27\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 3 2\n2 3 1\n", "output": ["9\n23\n25\n"]}, {"input": "6 4\n0 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n15\n14\n"]}, {"input": "6 4\n19 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["20\n24\n"]}, {"input": "6 4\n0 -9 2 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 5 3\n", "output": ["9\n13\n16\n"]}, {"input": "6 4\n-1 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["5\n0\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -11\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["57\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -4\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["33\n0\n19\n"]}, {"input": "6 4\n0 -9 4 1 -1 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["3\n0\n13\n"]}, {"input": "4 4\n2 -2609 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2719\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["9\n26\n15\n"]}, {"input": "6 4\n13 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 3 -3\n2 1 2\n2 2 3\n", "output": ["31\n24\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 2 3\n", "output": ["10\n35\n25\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n31\n9\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["13\n37\n0\n"]}, {"input": "6 4\n1 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["17\n15\n14\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["21\n12\n0\n"]}, {"input": "6 4\n0 -17 2 -1 4 -16\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["42\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["27\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["21\n30\n20\n"]}, {"input": "6 3\n0 -7 4 -1 10 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n42\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -2\n2 1 3\n2 3 3\n", "output": ["13\n36\n0\n"]}, {"input": "6 4\n19 -3 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 1 3\n", "output": ["20\n18\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 1 3\n", "output": ["21\n12\n25\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["13\n27\n0\n"]}, {"input": "6 3\n0 -7 4 -1 10 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n36\n"]}, {"input": "6 4\n0 -16 2 -1 4 -23\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["56\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 2 2\n2 4 4\n", "output": ["13\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n1 2 2\n2 4 4\n", "output": ["13\n0\n"]}, {"input": "4 4\n3 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2103\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 2\n", "output": ["9\n12\n23\n"]}, {"input": "6 3\n0 -5 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n1 1 4\n2 2 3\n", "output": ["9\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -5\n2 1 2\n2 3 3\n", "output": ["0\n31\n0\n"]}, {"input": "6 4\n0 -9 4 0 11 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["22\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -5\n2 1 2\n2 3 3\n", "output": ["0\n36\n0\n"]}, {"input": "6 4\n10 -1 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 4\n", "output": ["9\n0\n23\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["4\n13\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 2 -1000000000\n2 1 4\n", "output": ["1100\n0\n2000000005\n"]}, {"input": "6 4\n0 -4 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n19\n0\n"]}], "task_id": "codecontest/8", "repair_prompt": ["Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, allowing travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate; to travel from the x-th room to the y-th room requires a tunnel between x and y, consuming max(|a_x + a_y|, |a_x - a_y|) energy, where |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree using adjacency list\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_energy(u, v):\n        visited = [False] * n\n        queue = deque([(u, 0)])\n        visited[u] = True\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy\n            v = int(data[index]) - 1\n            index += 1\n            energy = calculate_energy(u, v)\n            results.append(str(energy))\n    \n    # Output the results for type 2 queries\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Parse the tunnel connections and build the tree\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to perform BFS and calculate the minimum energy\n    def bfs_min_energy(u, v):\n        queue = deque([(u, 0)])\n        visited = set()\n        visited.add(u)\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n        \n        return -1  # Should never reach here if the input is valid\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate of the u-th room\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy from room u to room v\n            v = int(data[index]) - 1\n            index += 1\n            results.append(bfs_min_energy(u, v))\n    \n    # Output the results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index])\n        index += 1\n        if query_type == 1:\n            queries.append((query_type, u, v))\n        else:\n            queries.append((query_type, u, v - 1))\n    \n    # Precompute parent and depth using DFS\n    parent = [-1] * n\n    depth = [0] * n\n    \n    def dfs(node, par):\n        for neighbor in tree[node]:\n            if neighbor != par:\n                parent[neighbor] = node\n                depth[neighbor] = depth[node] + 1\n                dfs(neighbor, node)\n    \n    dfs(0, -1)\n    \n    # Function to find LCA\n    @lru_cache(None)\n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        while depth[u] > depth[v]:\n            u = parent[u]\n        while u != v:\n            u = parent[u]\n            v = parent[v]\n        return u\n    \n    # Function to calculate energy cost\n    def energy_cost(u, v):\n        return max(abs(illusion_rates[u] + illusion_rates[v]), abs(illusion_rates[u] - illusion_rates[v]))\n    \n    # Function to calculate path energy\n    def path_energy(u, v):\n        ancestor = lca(u, v)\n        total_energy = 0\n        \n        # Traverse from u to ancestor\n        while u != ancestor:\n            total_energy += energy_cost(u, parent[u])\n            u = parent\nmain()", "import sys\nimport collections\n\ninput = sys.stdin.read\nsys.setrecursionlimit(200000)\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Build the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    # Prepare to handle queries\n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) if query_type == 1 else int(data[index]) - 1\n        index += 1\n        queries.append((query_type, u, v))\n    \n    # Helper function to calculate energy between two rooms\n    def calculate_energy(x, y):\n        return max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    \n    # DFS to find path and calculate energy\n    def dfs_find_path_energy(u, v, parent):\n        if u == v:\n            return 0\n        for neighbor in tree[u]:\n            if neighbor != parent:\n                energy = calculate_energy(u, neighbor)\n                result = dfs_find_path_energy(neighbor, v, u)\n                if result != -1:\n                    return energy + result\n        return -1\n    \n    # Process each query\n    results = []\n    for query_type, u, v in queries:\n        if query_type == 1:\n            # Update illusion rate\n            illusion_rates[u] = v\n        elif query_type == 2:\n            # Calculate minimum energy path\n            energy = dfs_find_path_energy(u, v, -1)\n            results.append(energy)\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            # Update illusion rate\n            c = int(data[index + 2])\n            illusion_rates[u] = c\n            index += 3\n        elif query_type == 2:\n            # Calculate minimum energy\n            v = int(data[index + 2]) - 1\n            index += 3\n            results.append(calculate_min_energy(tree, illusion_rates, u, v))\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\ndef calculate_min_energy(tree, illusion_rates, start, end):\n    # BFS to find the path from start to end\n    queue = deque([(start, 0)])  # (current_node, current_energy)\n    visited = set()\n    \n    while queue:\n        current, current_energy = queue.popleft()\n        \n        if current == end:\n            return current_energy\n        \n        visited.add(current)\n        \n        for neighbor in tree[current]:\n            if neighbor not in visited:\n                energy_cost = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                  abs(illusion_rates[current] - illusion_rates[neighbor]))\n                queue.append((neighbor, current_energy + energy_cost))\n    \n    return -1  # Should not reach here if the input is valid\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree structure using adjacency list\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_energy(u, v):\n        visited = [False] * n\n        queue = deque([(u, 0)])\n        visited[u] = True\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate of the specified room\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy required to travel from u to v\n            v = int(data[index]) - 1\n            index += 1\n            energy = calculate_energy(u, v)\n            results.append(str(energy))\n    \n    # Output the results for type 2 queries\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Prepare to process queries\n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_min_energy(start, end):\n        queue = collections.deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == end:\n                return energy\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy_cost = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                      abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy + energy_cost))\n        \n        return -1  # Should not reach here if the input is valid\n    \n    # Process each query\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            # Update illusion rate\n            _, room, new_rate = query\n            illusion_rates[room] = new_rate\n        else:\n            # Calculate minimum energy\n            _, start, end = query\n            min_energy = calculate_min_energy(start, end)\n            results.append(min_energy)\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\nmain()", "import sys\nimport collections\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            queries.append((query_type, u, c))\n        else:\n            v = int(data[index]) - 1\n            index += 1\n            queries.append((query_type, u, v))\n    \n    def dfs_path(start, end):\n        stack = [(start, -1)]\n        parent = {start: None}\n        \n        while stack:\n            node, par = stack.pop()\n            if node == end:\n                break\n            for neighbor in tree[node]:\n                if neighbor != par:\n                    parent[neighbor] = node\n                    stack.append((neighbor, node))\n        \n        path = []\n        while end is not None:\n            path.append(end)\n            end = parent[end]\n        path.reverse()\n        return path\n    \n    results = []\n    \n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            illusion_rates[u] = c\n        else:\n            _, u, v = query\n            path = dfs_path(u, v)\n            energy = 0\n            for i in range(len(path) - 1):\n                x = path[i]\n                y = path[i + 1]\n                energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def dfs(graph, node, parent, depth, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in graph[node]:\n        if neighbor != parent:\n            dfs(graph, neighbor, node, depth + 1, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(a, path):\n    energy = 0\n    for i in range(len(path) - 1):\n        x, y = path[i], path[i + 1]\n        energy += max(abs(a[x] + a[y]), abs(a[x] - a[y]))\n    return energy\n\ndef find_path(u, v, parent_list):\n    path_u = []\n    path_v = []\n    while u != -1:\n        path_u.append(u)\n        u = parent_list[u]\n    while v != -1:\n        path_v.append(v)\n        v = parent_list[v]\n    path_u.reverse()\n    path_v.reverse()\n    i = 0\n    while i < min(len(path_u), len(path_v)) and path_u[i] == path_v[i]:\n        i += 1\n    return path_u[:i] + path_v[i-1::-1]\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = int(data[index])\n        index += 1\n    \n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        graph[s].append(t)\n        graph[t].append(s)\n    \n    parent_list = [-1] * (n + 1)\n    depth_list = [0] *\nmain()", "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Prepare to handle queries\n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    # Function to calculate energy between two rooms\n    def calculate_energy(x, y):\n        return max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    \n    # Function to find the path and calculate energy using DFS\n    def dfs_find_path_energy(start, end):\n        stack = [(start, -1, 0)]  # (current_node, parent, current_energy)\n        visited = set()\n        \n        while stack:\n            node, parent, current_energy = stack.pop()\n            if node == end:\n                return current_energy\n            \n            visited.add(node)\n            for neighbor in tree[node]:\n                if neighbor != parent and neighbor not in visited:\n                    energy = calculate_energy(node, neighbor)\n                    stack.append((neighbor, node, current_energy + energy))\n        \n        return float('inf')  # Should not reach here if the tree is valid\n    \n    # Process each query\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            # Update illusion rate\n            _, u, c = query\n            illusion_rates[u] = c\n        else:\n            # Calculate minimum energy\n            _, u, v = query\n            energy = dfs_find_path_energy(u\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree using adjacency list\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_energy(u, v):\n        visited = [False] * n\n        queue = deque([(u, 0)])\n        visited[u] = True\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy\n            v = int(data[index]) - 1\n            index += 1\n            energy = calculate_energy(u, v)\n            results.append(str(energy))\n    \n    # Output the results for type 2 queries\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, tunnel connections, and queries.\",\n      \"details\": \"Read and store the values of n, q, a_i, tunnel connections, and queries from the input.\"\n    },\n    {\n      \"description\": \"Construct the tree structure representing the maze using the tunnel connections.\",\n      \"details\": \"Use the given tunnel connections to build an adjacency list representation of the tree.\"\n    },\n    {\n      \"description\": \"Implement a mechanism to update the illusion rate of a room.\",\n      \"details\": \"For type 1 queries, update the illusion rate of the specified room.\"\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms.\",\n      \"details\": \"For type 2 queries, use a tree traversal algorithm (e.g., DFS or BFS) to find the path between the specified rooms and calculate the energy required for each segment of the path.\"\n    },\n    {\n      \"description\": \"Output the results for type 2 queries.\",\n      \"details\": \"For each type 2 query, output the calculated minimum energy required.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data including number of rooms, queries, illusion rates, and tunnel connections.\",\n    \"Construct the tree structure using the adjacency list based on tunnel connections.\",\n    \"Implement a function to update the illusion rate of a room for type 1 queries.\",\n    \"Implement a function to calculate the minimum energy required to travel between two rooms for type 2 queries using tree traversal.\",\n    \"For each type 2 query, traverse the tree to find the path and calculate the energy, then output the result.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree using adjacency list\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_energy(u, v):\n        visited = [False] * n\n        queue = deque([(u, 0)])\n        visited[u] = True\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy\n            v = int(data[index]) - 1\n            index += 1\n            energy = calculate_energy(u, v)\n            results.append(str(energy))\n    \n    # Output the results for type 2 queries\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 148)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree using adjacency list\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_energy(u, v):\n        visited = [False] * n\n        queue = deque([(u, 0)])\n        visited[u] = True\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy\n            v = int(data[index]) - 1\n            index += 1\n            energy = calculate_energy(u, v)\n            results.append(str(energy))\n    \n    # Output the results for type 2 queries\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, tunnel connections, and queries.\",\n      \"details\": \"Read the input data and store the number of rooms (n), number of queries (q), initial illusion rates (a_i), tunnel connections (s_i, t_i), and queries.\"\n    },\n    {\n      \"description\": \"Represent the maze as a tree structure.\",\n      \"details\": \"Use the tunnel connections to build a tree data structure where each room is a node and each tunnel is an edge.\"\n    },\n    {\n      \"description\": \"Implement a method to update the illusion rate of a room.\",\n      \"details\": \"For type 1 queries, update the illusion rate of the specified room.\"\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms.\",\n      \"details\": \"For type 2 queries, find the path between the specified rooms and calculate the sum of energy required using the given formula.\"\n    },\n    {\n      \"description\": \"Efficiently handle multiple queries.\",\n      \"details\": \"Ensure the program can handle up to 100,000 queries efficiently, possibly using techniques like depth-first search (DFS) or breadth-first search (BFS) for pathfinding.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data including number of rooms, queries, initial illusion rates, and tunnel connections.\",\n    \"Construct a tree representation of the maze using the tunnel connections.\",\n    \"Implement a function to update the illusion rate of a room based on type 1 queries.\",\n    \"Implement a function to calculate the minimum energy required to travel between two rooms based on type 2 queries.\",\n    \"Use efficient algorithms to handle pathfinding and energy calculation, ensuring the program can process up to 100,000 queries quickly.\",\n    \"Output the result for each type 2 query as specified.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Parse the tunnel connections and build the tree\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to perform BFS and calculate the minimum energy\n    def bfs_min_energy(u, v):\n        queue = deque([(u, 0)])\n        visited = set()\n        visited.add(u)\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n        \n        return -1  # Should never reach here if the input is valid\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate of the u-th room\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy from room u to room v\n            v = int(data[index]) - 1\n            index += 1\n            results.append(bfs_min_energy(u, v))\n    \n    # Output the results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 163)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Parse the tunnel connections and build the tree\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to perform BFS and calculate the minimum energy\n    def bfs_min_energy(u, v):\n        queue = deque([(u, 0)])\n        visited = set()\n        visited.add(u)\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n        \n        return -1  # Should never reach here if the input is valid\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate of the u-th room\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy from room u to room v\n            v = int(data[index]) - 1\n            index += 1\n            results.append(bfs_min_energy(u, v))\n    \n    # Output the results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms (n), number of queries (q), list of illusion rates (a), and adjacency list for the tree structure.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates to the illusion rates and queries for minimum energy paths.\",\n      \"output\": \"A segment tree or similar data structure to manage updates and queries efficiently.\"\n    },\n    {\n      \"description\": \"Handle the update query to change the illusion rate of a specific room.\",\n      \"output\": \"Update the data structure to reflect the new illusion rate for the specified room.\"\n    },\n    {\n      \"description\": \"Handle the path query to calculate the minimum energy required to travel from room u to room v.\",\n      \"output\": \"Use a tree traversal algorithm (e.g., DFS) to find the path and calculate the energy cost using the given formula.\"\n    },\n    {\n      \"description\": \"Output the results for each type 2 query.\",\n      \"output\": \"Print the minimum energy required for each type 2 query.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct the tree using an adjacency list to represent the connections between rooms.\",\n    \"Initialize a data structure to manage the illusion rates and efficiently handle updates and queries.\",\n    \"For each query, determine the type of query:\",\n    \"  - If it's an update query (type 1), update the illusion rate of the specified room in the data structure.\",\n    \"  - If it's a path query (type 2), perform a tree traversal to find the path from room u to room v and calculate the energy cost using the formula max(|a_x + a_y|, |a_x - a_y|) for each tunnel in the path.\",\n    \"Output the results for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index])\n        index += 1\n        if query_type == 1:\n            queries.append((query_type, u, v))\n        else:\n            queries.append((query_type, u, v - 1))\n    \n    # Precompute parent and depth using DFS\n    parent = [-1] * n\n    depth = [0] * n\n    \n    def dfs(node, par):\n        for neighbor in tree[node]:\n            if neighbor != par:\n                parent[neighbor] = node\n                depth[neighbor] = depth[node] + 1\n                dfs(neighbor, node)\n    \n    dfs(0, -1)\n    \n    # Function to find LCA\n    @lru_cache(None)\n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        while depth[u] > depth[v]:\n            u = parent[u]\n        while u != v:\n            u = parent[u]\n            v = parent[v]\n        return u\n    \n    # Function to calculate energy cost\n    def energy_cost(u, v):\n        return max(abs(illusion_rates[u] + illusion_rates[v]), abs(illusion_rates[u] - illusion_rates[v]))\n    \n    # Function to calculate path energy\n    def path_energy(u, v):\n        ancestor = lca(u, v)\n        total_energy = 0\n        \n        # Traverse from u to ancestor\n        while u != ancestor:\n            total_energy += energy_cost", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index])\n        index += 1\n        if query_type == 1:\n            queries.append((query_type, u, v))\n        else:\n            queries.append((query_type, u, v - 1))\n    \n    # Precompute parent and depth using DFS\n    parent = [-1] * n\n    depth = [0] * n\n    \n    def dfs(node, par):\n        for neighbor in tree[node]:\n            if neighbor != par:\n                parent[neighbor] = node\n                depth[neighbor] = depth[node] + 1\n                dfs(neighbor, node)\n    \n    dfs(0, -1)\n    \n    # Function to find LCA\n    @lru_cache(None)\n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        while depth[u] > depth[v]:\n            u = parent[u]\n        while u != v:\n            u = parent[u]\n            v = parent[v]\n        return u\n    \n    # Function to calculate energy cost\n    def energy_cost(u, v):\n        return max(abs(illusion_rates[u] + illusion_rates[v]), abs(illusion_rates[u] - illusion_rates[v]))\n    \n    # Function to calculate path energy\n    def path_energy(u, v):\n        ancestor = lca(u, v)\n        total_energy = 0\n        \n        # Traverse from u to ancestor\n        while u != ancestor:\n            total_energy += energy_cost(u, parent[u])\n            u = parent", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms (n), number of queries (q), list of illusion rates (a), and adjacency list for the tree structure.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates to the illusion rates and queries for minimum energy paths.\",\n      \"output\": \"A segment tree or similar data structure to manage updates and queries efficiently.\"\n    },\n    {\n      \"description\": \"Handle type 1 queries to update the illusion rate of a specific room.\",\n      \"output\": \"Update the data structure to reflect the new illusion rate for the specified room.\"\n    },\n    {\n      \"description\": \"Handle type 2 queries to calculate the minimum energy required to travel from room u to room v.\",\n      \"output\": \"Use a graph traversal algorithm (e.g., DFS or BFS) to find the path from u to v and calculate the energy cost using the given formula.\"\n    },\n    {\n      \"description\": \"Output the results for each type 2 query.\",\n      \"output\": \"Print the calculated minimum energy for each type 2 query.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct an adjacency list to represent the tree structure of the maze.\",\n    \"Initialize a data structure to manage updates and queries efficiently, such as a segment tree.\",\n    \"For each query, determine its type:\",\n    \"  - If it's a type 1 query, update the illusion rate of the specified room in the data structure.\",\n    \"  - If it's a type 2 query, perform a graph traversal to find the path from room u to room v, calculate the energy cost for the path, and store the result.\",\n    \"Output the results for all type 2 queries in the order they were received.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nimport collections\n\ninput = sys.stdin.read\nsys.setrecursionlimit(200000)\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Build the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    # Prepare to handle queries\n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) if query_type == 1 else int(data[index]) - 1\n        index += 1\n        queries.append((query_type, u, v))\n    \n    # Helper function to calculate energy between two rooms\n    def calculate_energy(x, y):\n        return max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    \n    # DFS to find path and calculate energy\n    def dfs_find_path_energy(u, v, parent):\n        if u == v:\n            return 0\n        for neighbor in tree[u]:\n            if neighbor != parent:\n                energy = calculate_energy(u, neighbor)\n                result = dfs_find_path_energy(neighbor, v, u)\n                if result != -1:\n                    return energy + result\n        return -1\n    \n    # Process each query\n    results = []\n    for query_type, u, v in queries:\n        if query_type == 1:\n            # Update illusion rate\n            illusion_rates[u] = v\n        elif query_type == 2:\n            # Calculate minimum energy path\n            energy = dfs_find_path_energy(u, v, -1)\n            results.append(energy)\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 152)"}, "Round_1": {"code": "import sys\nimport collections\n\ninput = sys.stdin.read\nsys.setrecursionlimit(200000)\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Build the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    # Prepare to handle queries\n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) if query_type == 1 else int(data[index]) - 1\n        index += 1\n        queries.append((query_type, u, v))\n    \n    # Helper function to calculate energy between two rooms\n    def calculate_energy(x, y):\n        return max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    \n    # DFS to find path and calculate energy\n    def dfs_find_path_energy(u, v, parent):\n        if u == v:\n            return 0\n        for neighbor in tree[u]:\n            if neighbor != parent:\n                energy = calculate_energy(u, neighbor)\n                result = dfs_find_path_energy(neighbor, v, u)\n                if result != -1:\n                    return energy + result\n        return -1\n    \n    # Process each query\n    results = []\n    for query_type, u, v in queries:\n        if query_type == 1:\n            # Update illusion rate\n            illusion_rates[u] = v\n        elif query_type == 2:\n            # Calculate minimum energy path\n            energy = dfs_find_path_energy(u, v, -1)\n            results.append(energy)\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, tunnel connections, and queries.\",\n      \"details\": \"Read and store the values of n, q, a_i, tunnel connections, and queries from the input.\"\n    },\n    {\n      \"description\": \"Construct the tree structure representing the maze using the tunnel connections.\",\n      \"details\": \"Use the given tunnel connections to build an adjacency list representation of the tree.\"\n    },\n    {\n      \"description\": \"Implement a mechanism to update the illusion rate of a room.\",\n      \"details\": \"For type 1 queries, update the illusion rate of the specified room.\"\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms.\",\n      \"details\": \"For type 2 queries, use a tree traversal algorithm (e.g., DFS or BFS) to find the path between the specified rooms and calculate the energy required for each segment of the path.\"\n    },\n    {\n      \"description\": \"Output the results for type 2 queries.\",\n      \"details\": \"For each type 2 query, output the calculated minimum energy required.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data including number of rooms, queries, illusion rates, and tunnel connections.\",\n    \"Construct the tree structure using the adjacency list based on tunnel connections.\",\n    \"Implement a function to update the illusion rate of a room for type 1 queries.\",\n    \"Implement a function to calculate the minimum energy required to travel between two rooms for type 2 queries using tree traversal.\",\n    \"For each type 2 query, traverse the tree to find the path and calculate the energy, then output the result.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            # Update illusion rate\n            c = int(data[index + 2])\n            illusion_rates[u] = c\n            index += 3\n        elif query_type == 2:\n            # Calculate minimum energy\n            v = int(data[index + 2]) - 1\n            index += 3\n            results.append(calculate_min_energy(tree, illusion_rates, u, v))\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\ndef calculate_min_energy(tree, illusion_rates, start, end):\n    # BFS to find the path from start to end\n    queue = deque([(start, -1, 0)])  # (current_node, parent_node, current_energy)\n    visited = set()\n    \n    while queue:\n        current, parent, current_energy = queue.popleft()\n        \n        if current == end:\n            return current_energy\n        \n        visited.add(current)\n        \n        for neighbor in tree[current]:\n            if neighbor != parent and neighbor not in visited:\n                energy_cost = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                  abs(illusion_rates[current] - illusion_rates[neighbor]))\n                queue.append((neighbor, current, current_energy + energy_cost))\n    \n    return -1  # Should not reach here if the input is valid\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: calculate_min_energy() missing 4 required positional arguments: 'tree', 'illusion_rates', 'start', and 'end'"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            # Update illusion rate\n            c = int(data[index + 2])\n            illusion_rates[u] = c\n            index += 3\n        elif query_type == 2:\n            # Calculate minimum energy\n            v = int(data[index + 2]) - 1\n            index += 3\n            results.append(calculate_min_energy(tree, illusion_rates, u, v))\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\ndef calculate_min_energy(tree, illusion_rates, start, end):\n    # BFS to find the path from start to end\n    queue = deque([(start, 0)])  # (current_node, current_energy)\n    visited = set()\n    \n    while queue:\n        current, current_energy = queue.popleft()\n        \n        if current == end:\n            return current_energy\n        \n        visited.add(current)\n        \n        for neighbor in tree[current]:\n            if neighbor not in visited:\n                energy_cost = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                  abs(illusion_rates[current] - illusion_rates[neighbor]))\n                queue.append((neighbor, current_energy + energy_cost))\n    \n    return -1  # Should not reach here if the input is valid\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, tunnel connections, and queries.\",\n      \"details\": \"Read the input data and store the number of rooms (n), number of queries (q), initial illusion rates (a_i), tunnel connections (s_i, t_i), and queries.\"\n    },\n    {\n      \"description\": \"Construct the tree structure representing the maze using the tunnel connections.\",\n      \"details\": \"Use the tunnel connections to build an adjacency list or other suitable data structure to represent the tree.\"\n    },\n    {\n      \"description\": \"Implement a mechanism to update the illusion rate of a room based on type 1 queries.\",\n      \"details\": \"For type 1 queries, update the illusion rate of the specified room to the new value.\"\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms based on type 2 queries.\",\n      \"details\": \"For type 2 queries, use a tree traversal algorithm (e.g., DFS or BFS) to find the path between the specified rooms and calculate the energy required using the given formula.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data including number of rooms, queries, initial illusion rates, tunnel connections, and queries.\",\n    \"Construct the tree structure using the tunnel connections to represent the maze.\",\n    \"For each query, determine its type:\",\n    \"  - If it's a type 1 query, update the illusion rate of the specified room.\",\n    \"  - If it's a type 2 query, calculate the minimum energy required to travel from the starting room to the destination room using the tree structure and output the result.\",\n    \"Ensure efficient handling of queries to meet performance requirements given the constraints.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree structure using adjacency list\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_energy(u, v):\n        visited = [False] * n\n        queue = deque([(u, 0)])\n        visited[u] = True\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate of the specified room\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy required to travel from u to v\n            v = int(data[index]) - 1\n            index += 1\n            energy = calculate_energy(u, v)\n            results.append(str(energy))\n    \n    # Output the results for type 2 queries\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 142)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree structure using adjacency list\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_energy(u, v):\n        visited = [False] * n\n        queue = deque([(u, 0)])\n        visited[u] = True\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate of the specified room\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy required to travel from u to v\n            v = int(data[index]) - 1\n            index += 1\n            energy = calculate_energy(u, v)\n            results.append(str(energy))\n    \n    # Output the results for type 2 queries\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store rooms, illusion rates, and connections.\"\n    },\n    {\n      \"description\": \"Construct a tree data structure to represent the maze using the room connections.\",\n      \"output\": \"A tree representation of the maze.\"\n    },\n    {\n      \"description\": \"Implement a function to update the illusion rate of a specific room based on type 1 queries.\",\n      \"output\": \"Updated illusion rates for the rooms.\"\n    },\n    {\n      \"description\": \"Implement a function to calculate the minimum energy required to travel from room u to room v based on type 2 queries.\",\n      \"output\": \"Minimum energy required for each type 2 query.\"\n    },\n    {\n      \"description\": \"Efficiently handle multiple queries, ensuring that updates and calculations are performed in a time-efficient manner.\",\n      \"output\": \"Correct results for all queries within time constraints.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct a tree data structure to represent the maze using the room connections.\",\n    \"For each query, determine its type:\",\n    \"  - If it's a type 1 query, update the illusion rate of the specified room.\",\n    \"  - If it's a type 2 query, calculate the minimum energy required to travel from the starting room to the destination room using a tree traversal algorithm.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Prepare to process queries\n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_min_energy(start, end):\n        queue = collections.deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == end:\n                return energy\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy_cost = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                      abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy + energy_cost))\n        \n        return -1  # Should not reach here if the input is valid\n    \n    # Process each query\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            # Update illusion rate\n            _, room, new_rate = query\n            illusion_rates[room] = new_rate\n        else:\n            # Calculate minimum energy\n            _, start, end = query\n            min_energy = calculate_min_energy(start, end)\n            results.append(min_energy)\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 153)"}, "Round_1": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Prepare to process queries\n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_min_energy(start, end):\n        queue = collections.deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == end:\n                return energy\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy_cost = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                      abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy + energy_cost))\n        \n        return -1  # Should not reach here if the input is valid\n    \n    # Process each query\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            # Update illusion rate\n            _, room, new_rate = query\n            illusion_rates[room] = new_rate\n        else:\n            # Calculate minimum energy\n            _, start, end = query\n            min_energy = calculate_min_energy(start, end)\n            results.append(min_energy)\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, tunnel connections, and queries.\",\n      \"details\": \"Read the input data and store the number of rooms (n), number of queries (q), initial illusion rates (a_i), tunnel connections (s_i, t_i), and queries.\"\n    },\n    {\n      \"description\": \"Represent the maze as a tree structure.\",\n      \"details\": \"Use the tunnel connections to build a tree data structure where each room is a node and each tunnel is an edge.\"\n    },\n    {\n      \"description\": \"Implement a method to update the illusion rate of a room.\",\n      \"details\": \"For type 1 queries, update the illusion rate of the specified room to the new value.\"\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms.\",\n      \"details\": \"For type 2 queries, find the path between the specified rooms and calculate the sum of energy required using the given formula.\"\n    },\n    {\n      \"description\": \"Efficiently handle multiple queries.\",\n      \"details\": \"Ensure the program can handle up to 100,000 queries efficiently, possibly using techniques like depth-first search (DFS) or breadth-first search (BFS) for pathfinding.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data including number of rooms, queries, initial illusion rates, and tunnel connections.\",\n    \"Construct a tree representation of the maze using the tunnel connections.\",\n    \"Implement a function to update the illusion rate of a room based on type 1 queries.\",\n    \"Implement a function to calculate the minimum energy required to travel between two rooms based on type 2 queries.\",\n    \"Use efficient algorithms to handle pathfinding and energy calculation, ensuring the program can process up to 100,000 queries quickly.\",\n    \"Output the result for each type 2 query as specified.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nimport collections\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            queries.append((query_type, u, c))\n        else:\n            v = int(data[index]) - 1\n            index += 1\n            queries.append((query_type, u, v))\n    \n    def dfs_path(start, end):\n        stack = [(start, -1)]\n        parent = {start: None}\n        \n        while stack:\n            node, par = stack.pop()\n            if node == end:\n                break\n            for neighbor in tree[node]:\n                if neighbor != par:\n                    parent[neighbor] = node\n                    stack.append((neighbor, node))\n        \n        path = []\n        while end is not None:\n            path.append(end)\n            end = parent[end]\n        path.reverse()\n        return path\n    \n    results = []\n    \n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            illusion_rates[u] = c\n        else:\n            _, u, v = query\n            path = dfs_path(u, v)\n            energy = 0\n            for i in range(len(path) - 1):\n                x = path[i]\n                y = path[i + 1]\n                energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 163)"}, "Round_1": {"code": "import sys\nimport collections\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            queries.append((query_type, u, c))\n        else:\n            v = int(data[index]) - 1\n            index += 1\n            queries.append((query_type, u, v))\n    \n    def dfs_path(start, end):\n        stack = [(start, -1)]\n        parent = {start: None}\n        \n        while stack:\n            node, par = stack.pop()\n            if node == end:\n                break\n            for neighbor in tree[node]:\n                if neighbor != par:\n                    parent[neighbor] = node\n                    stack.append((neighbor, node))\n        \n        path = []\n        while end is not None:\n            path.append(end)\n            end = parent[end]\n        path.reverse()\n        return path\n    \n    results = []\n    \n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            illusion_rates[u] = c\n        else:\n            _, u, v = query\n            path = dfs_path(u, v)\n            energy = 0\n            for i in range(len(path) - 1):\n                x = path[i]\n                y = path[i + 1]\n                energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms (n), number of queries (q), list of illusion rates (a), and adjacency list for the tree structure.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates to the illusion rates and queries for minimum energy paths.\",\n      \"output\": \"A segment tree or similar data structure to manage updates and queries efficiently.\"\n    },\n    {\n      \"description\": \"Handle the update query to change the illusion rate of a specific room.\",\n      \"output\": \"Update the data structure to reflect the new illusion rate for the specified room.\"\n    },\n    {\n      \"description\": \"Handle the path query to calculate the minimum energy required to travel from room u to room v.\",\n      \"output\": \"Use a tree traversal algorithm (e.g., DFS) to find the path and calculate the energy cost using the given formula.\"\n    },\n    {\n      \"description\": \"Output the results for each type 2 query.\",\n      \"output\": \"Print the minimum energy required for each type 2 query.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct the tree using an adjacency list to represent the connections between rooms.\",\n    \"Initialize a data structure to manage the illusion rates and efficiently handle updates and queries.\",\n    \"For each query, determine its type:\",\n    \"  - If it's an update query (type 1), update the illusion rate of the specified room in the data structure.\",\n    \"  - If it's a path query (type 2), perform a tree traversal to find the path from room u to room v and calculate the minimum energy required using the given formula.\",\n    \"Output the results for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def dfs(graph, node, parent, depth, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in graph[node]:\n        if neighbor != parent:\n            dfs(graph, neighbor, node, depth + 1, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(a, path):\n    energy = 0\n    for i in range(len(path) - 1):\n        x, y = path[i], path[i + 1]\n        energy += max(abs(a[x] + a[y]), abs(a[x] - a[y]))\n    return energy\n\ndef find_path(u, v, parent_list):\n    path_u = []\n    path_v = []\n    while u != -1:\n        path_u.append(u)\n        u = parent_list[u]\n    while v != -1:\n        path_v.append(v)\n        v = parent_list[v]\n    path_u.reverse()\n    path_v.reverse()\n    i = 0\n    while i < min(len(path_u), len(path_v)) and path_u[i] == path_v[i]:\n        i += 1\n    return path_u[:i] + path_v[i-1::-1]\n\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = int(data[index])\n        index += 1\n    \n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        graph[s].append(t)\n        graph[t].append(s)\n    \n    parent_list = [-1] * (n + 1)\n    depth_list = [", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 66)"}, "Round_1": {"code": "def dfs(graph, node, parent, depth, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in graph[node]:\n        if neighbor != parent:\n            dfs(graph, neighbor, node, depth + 1, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(a, path):\n    energy = 0\n    for i in range(len(path) - 1):\n        x, y = path[i], path[i + 1]\n        energy += max(abs(a[x] + a[y]), abs(a[x] - a[y]))\n    return energy\n\ndef find_path(u, v, parent_list):\n    path_u = []\n    path_v = []\n    while u != -1:\n        path_u.append(u)\n        u = parent_list[u]\n    while v != -1:\n        path_v.append(v)\n        v = parent_list[v]\n    path_u.reverse()\n    path_v.reverse()\n    i = 0\n    while i < min(len(path_u), len(path_v)) and path_u[i] == path_v[i]:\n        i += 1\n    return path_u[:i] + path_v[i-1::-1]\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = int(data[index])\n        index += 1\n    \n    graph = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index])\n        index += 1\n        t = int(data[index])\n        index += 1\n        graph[s].append(t)\n        graph[t].append(s)\n    \n    parent_list = [-1] * (n + 1)\n    depth_list = [0] *"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, tunnel connections, and queries.\",\n      \"details\": \"Read the input data and store it in appropriate data structures for further processing.\"\n    },\n    {\n      \"description\": \"Construct the tree representation of the maze using the tunnel connections.\",\n      \"details\": \"Use the given tunnel connections to build an adjacency list or other suitable data structure to represent the tree.\"\n    },\n    {\n      \"description\": \"Implement a mechanism to update the illusion rate of a room based on type 1 queries.\",\n      \"details\": \"Modify the data structure storing illusion rates to reflect changes as specified by type 1 queries.\"\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms based on type 2 queries.\",\n      \"details\": \"Use a tree traversal algorithm (e.g., DFS or BFS) to find the path between the specified rooms and compute the energy required using the given formula.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, tunnel connections, and queries.\",\n    \"Construct the tree representation of the maze using the tunnel connections.\",\n    \"For each query, determine its type:\",\n    \"  - If type 1, update the illusion rate of the specified room.\",\n    \"  - If type 2, calculate the minimum energy required to travel from the starting room to the destination room using the current illusion rates.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```", "Round_0": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Prepare to handle queries\n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    # Function to calculate energy between two rooms\n    def calculate_energy(x, y):\n        return max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    \n    # Function to find the path and calculate energy using DFS\n    def dfs_find_path_energy(start, end):\n        stack = [(start, -1, 0)]  # (current_node, parent, current_energy)\n        visited = set()\n        \n        while stack:\n            node, parent, current_energy = stack.pop()\n            if node == end:\n                return current_energy\n            \n            visited.add(node)\n            for neighbor in tree[node]:\n                if neighbor != parent and neighbor not in visited:\n                    energy = calculate_energy(node, neighbor)\n                    stack.append((neighbor, node, current_energy + energy))\n        \n        return float('inf')  # Should not reach here if the tree is valid\n    \n    # Process each query\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            # Update illusion rate\n            _, u, c = query\n            illusion_rates[u] = c\n        else:\n            # Calculate minimum energy\n            _, u, v = query\n            energy = dfs_find_path_energy(u", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 69)"}, "Round_1": {"code": "def main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree\n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Prepare to handle queries\n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    # Function to calculate energy between two rooms\n    def calculate_energy(x, y):\n        return max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n    \n    # Function to find the path and calculate energy using DFS\n    def dfs_find_path_energy(start, end):\n        stack = [(start, -1, 0)]  # (current_node, parent, current_energy)\n        visited = set()\n        \n        while stack:\n            node, parent, current_energy = stack.pop()\n            if node == end:\n                return current_energy\n            \n            visited.add(node)\n            for neighbor in tree[node]:\n                if neighbor != parent and neighbor not in visited:\n                    energy = calculate_energy(node, neighbor)\n                    stack.append((neighbor, node, current_energy + energy))\n        \n        return float('inf')  # Should not reach here if the tree is valid\n    \n    # Process each query\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            # Update illusion rate\n            _, u, c = query\n            illusion_rates[u] = c\n        else:\n            # Calculate minimum energy\n            _, u, v = query\n            energy = dfs_find_path_energy(u"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, tunnel connections, and queries.\",\n      \"details\": \"Read and store the values of n, q, a_i, tunnel connections, and queries from the input.\"\n    },\n    {\n      \"description\": \"Construct the tree structure representing the maze using the tunnel connections.\",\n      \"details\": \"Use the given tunnel connections to build an adjacency list representation of the tree.\"\n    },\n    {\n      \"description\": \"Implement a mechanism to update the illusion rate of a room.\",\n      \"details\": \"For type 1 queries, update the illusion rate of the specified room.\"\n    },\n    {\n      \"description\": \"Calculate the minimum energy required to travel between two rooms.\",\n      \"details\": \"For type 2 queries, use a tree traversal algorithm (e.g., DFS or BFS) to find the path between the specified rooms and calculate the energy required for each segment of the path.\"\n    },\n    {\n      \"description\": \"Output the results for type 2 queries.\",\n      \"details\": \"For each type 2 query, output the calculated minimum energy required.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data including number of rooms, queries, illusion rates, and tunnel connections.\",\n    \"Construct the tree structure using the adjacency list based on tunnel connections.\",\n    \"Implement a function to update the illusion rate of a room for type 1 queries.\",\n    \"Implement a function to calculate the minimum energy required to travel between two rooms for type 2 queries using tree traversal.\",\n    \"For each type 2 query, traverse the tree to find the path and calculate the energy, then output the result.\"\n  ]\n}\n```", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree using adjacency list\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_energy(u, v):\n        visited = [False] * n\n        queue = deque([(u, 0)])\n        visited[u] = True\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy\n            v = int(data[index]) - 1\n            index += 1\n            energy = calculate_energy(u, v)\n            results.append(str(energy))\n    \n    # Output the results for type 2 queries\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 148)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse the number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse the initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Construct the tree using adjacency list\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate the minimum energy using BFS\n    def calculate_energy(u, v):\n        visited = [False] * n\n        queue = deque([(u, 0)])\n        visited[u] = True\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            \n            if current == v:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]),\n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n    \n    # Process each query\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update the illusion rate\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate the minimum energy\n            v = int(data[index]) - 1\n            index += 1\n            energy = calculate_energy(u, v)\n            results.append(str(energy))\n    \n    # Output the results for type 2 queries\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"}}], "scores": [], "pass_results": [true, true, true, true, true, false, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 2, "prompt": "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, allowing travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate; to travel from the x-th room to the y-th room requires a tunnel between x and y, consuming max(|a_x + a_y|, |a_x - a_y|) energy, where |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "examples": "\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 2}
