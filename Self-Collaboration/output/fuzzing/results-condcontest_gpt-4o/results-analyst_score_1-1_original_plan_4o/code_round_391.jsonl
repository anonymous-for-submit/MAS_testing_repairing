{"name": "1579_B. Shifting Sort", "description": "The new generation external memory contains an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. \n  2. Then you replace the segment a[l \u2026 r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\n\n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "tags": ["implementation", "sortings"], "difficulty": 8, "id": 1579, "sample_io": [{"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}], "test_list": [{"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 4\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n0 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n2 4 -1 5\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n0\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n2 4 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 5\n5\n2 10 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 5\n5\n2 10 2 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 1 1\n4\n2 4 -1 5\n5\n2 6 1 4 3\n", "output": ["0\n0\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n0\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 2 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n1\n2 3 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n2 3 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 6 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 4 0 5\n5\n2 10 1 4 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 4 1 3\n5\n2 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n0 2 0\n4\n-1 6 1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 6 0 5\n5\n2 10 2 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 1\n4\n1 4 0 3\n5\n0 5 1 4 0\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n0 4 -1 4\n5\n2 5 2 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 4 0 5\n5\n2 3 1 4 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n4 8 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n2 4 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 3 1\n4\n2 13 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 1\n4\n2 13 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n0 4 -1 3\n5\n2 0 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n0 4 -1 3\n5\n2 0 -1 1 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n2 3 1\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 4\n5\n2 8 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 2 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n2 3 1\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n-1 2 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n0 2 0\n4\n-1 6 1 0\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 4 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n0 4 -1 4\n5\n2 5 1 8 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 2 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 0\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n4 3 0\n4\n0 6 1 3\n5\n2 3 1 4 3\n", "output": ["1\n1 2 1\n2\n1 3 2\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 0 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n0\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 0 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n0\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n3 0\n3\n2 4 0\n4\n0 15 1 0\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 4 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 4\n5\n0 5 1 4 11\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 1 0 5\n5\n2 3 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n2 3 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 8 -1 3\n5\n0 5 1 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n1 9 1 3\n5\n1 5 2 4 0\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 5 4\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 1\n4\n4 8 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n2 4 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n1 4 -1 3\n5\n1 28 -1 4 5\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n0 2 -1 3\n5\n2 0 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 4 2 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 0 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 0\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 4 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 4 0 3\n5\n0 10 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n4 1\n3\n1 5 0\n4\n0 6 1 3\n5\n2 5 1 7 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 8 1 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 4 1\n4\n2 4 0 5\n5\n2 10 2 4 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 2 1 3\n5\n4 5 1 0 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n3\n1 4 3\n2 4 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n4 5 1 6 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n2\n1 3 2\n2 5 3\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 6 5\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 7 0 5\n5\n2 10 2 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n4 2\n3\n0 2 0\n4\n-1 2 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n2 3 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 7 0 3\n5\n2 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n0 4 0\n4\n0 9 0 3\n5\n1 6 2 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 4 2 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 1 1\n4\n2 4 0 3\n5\n2 5 1 4 3\n", "output": ["0\n0\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 0\n4\n0 0 1 3\n5\n2 5 0 4 3\n", "output": ["0\n1\n1 3 2\n0\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 8 1 3\n5\n4 5 1 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n2 5 3\n"]}, {"input": "4\n2\n0 1\n3\n1 4 0\n4\n0 2 1 3\n5\n4 5 1 0 3\n", "output": ["0\n1\n1 3 2\n1\n2 3 1\n3\n1 4 3\n2 4 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n1 5 1 6 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n0 4 -1\n4\n-1 6 1 3\n5\n0 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 1 -1 3\n5\n0 5 0 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n2 3 1\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 2 2 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n0\n0\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 0\n4\n0 0 1 3\n5\n2 5 0 6 3\n", "output": ["0\n1\n1 3 2\n0\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n3 1\n3\n1 2 2\n4\n0 8 1 3\n5\n4 5 1 8 3\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n2\n1 3 2\n2 5 3\n"]}, {"input": "4\n2\n2 1\n3\n-2 2 0\n4\n3 8 1 6\n5\n2 5 1 6 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 1 3\n5\n2 0 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 5 1 5 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 5 4\n2 4 2\n"]}, {"input": "4\n2\n2 0\n3\n1 2 0\n4\n2 4 1 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 1\n4\n2 4 -1 0\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n2 4 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 2 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 8 1 6\n5\n1 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 4 1 3\n5\n2 5 1 6 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 2 -1\n4\n2 4 1 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n0 4 0\n4\n0 6 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 2 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 1 0\n4\n0 9 1 3\n5\n1 5 2 4 3\n", "output": ["0\n2\n1 3 2\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 9 2 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 0 3\n5\n1 8 2 4 1\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 1\n4\n4 18 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n2 4 2\n1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 2\n4\n2 18 -1 3\n5\n0 -1 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n2\n1 2 1\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 0\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 2 8 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 4 0 3\n5\n2 5 1 4 6\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n0 4 -1 4\n5\n2 5 1 8 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 4 1\n4\n0 2 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n2 3 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 -1 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 -1\n3\n2 1 3\n4\n1 18 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n1\n1 2 1\n2\n1 3 2\n3 4 1\n1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 4 2 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 2 0 3\n5\n0 10 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 0 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n1 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 4 2 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 10 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 8 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 3 0\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 0\n4\n0 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 2\n3\n1 2 0\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n4 1\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 4 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 8 1 6\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n2 4 -1 5\n5\n2 6 1 4 3\n", "output": ["1\n1 2 1\n0\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n2 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 1\n4\n0 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n0 2 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 2\n3\n1 2 0\n4\n1 4 -1 2\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 1\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n0 2 1\n4\n0 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 15 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 1\n4\n2 4 0 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 -1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 4\n3\n1 2 0\n4\n2 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 4\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n0 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 3 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n1 7 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 5 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 2 0\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 4 0\n4\n0 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 8 1 6\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 2\n3\n1 2 -1\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 4 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 0 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n0\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n-1 11 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 4 0\n4\n0 15 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 2\n3\n0 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 4 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 4\n3\n1 2 0\n4\n2 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 4\n5\n2 5 1 4 11\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n2 9 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 9 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 7 1 3\n5\n2 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n-1 2 0\n4\n-1 6 1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 2 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -2\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 4 -1\n4\n0 15 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 8 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 6\n5\n2 9 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 9 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n-1 2 0\n4\n-1 12 1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n1 9 1 3\n5\n1 5 2 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 -2\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 4 -1\n4\n0 15 1 3\n5\n1 5 1 4 2\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 9 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 14 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 0 3\n5\n1 5 2 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 6 -1\n4\n0 15 1 3\n5\n1 5 1 4 2\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}], "task_id": "codecontest/14", "repair_prompt": ["The advanced external memory is made up of a sequence of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. However, it allows for a different kind of operation that can be used to modify the array. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. \n  2. Then you substitute the segment a[l \u2026 r] with its cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2.\n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nReorder the given array a using no greater than n cyclic shifts of any of its parts. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the correct position of a[j] in the sorted array\n                correct_pos = a.index(sorted_a[j], j)\n                \n                # Perform a cyclic shift to move a[j] to its correct position\n                if correct_pos > j:\n                    d = correct_pos - j\n                    actions.append((j + 1, correct_pos + 1, d))\n                    a[j:correct_pos + 1] = a[j + d:correct_pos + 1] + a[j:j + d]\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        current_a = a[:]\n        \n        for j in range(n):\n            if current_a == sorted_a:\n                break\n            \n            for l in range(n):\n                for r in range(l + 1, n):\n                    segment = current_a[l:r+1]\n                    for d in range(1, r - l + 1):\n                        shifted_segment = segment[d:] + segment[:d]\n                        new_a = current_a[:l] + shifted_segment + current_a[r+1:]\n                        \n                        if new_a == sorted_a:\n                            actions.append((l + 1, r + 1, d))\n                            current_a = new_a\n                            break\n                        \n                        if new_a < current_a:\n                            actions.append((l + 1, r + 1, d))\n                            current_a = new_a\n                            break\n                    if current_a == sorted_a:\n                        break\n                if current_a == sorted_a:\n                    break\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, array = test_cases[i]\n        sorted_array = sorted(array)\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if array[j] != sorted_array[j]:\n                # Find the position of the correct element\n                correct_pos = array.index(sorted_array[j], j)\n                \n                # Perform a cyclic shift to bring the correct element to position j\n                if correct_pos > j:\n                    d = correct_pos - j\n                    actions.append((j + 1, correct_pos + 1, d))\n                    # Perform the cyclic shift\n                    array[j:correct_pos + 1] = array[j + d:correct_pos + 1] + array[j:j + d]\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift(arr, l, r, d):\n    # Perform a cyclic shift to the left by d on the segment arr[l...r]\n    segment = arr[l:r+1]\n    d = d % len(segment)  # Ensure d is within the bounds of the segment length\n    shifted_segment = segment[d:] + segment[:d]\n    arr[l:r+1] = shifted_segment\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index+n]))\n        index += n\n        \n        if a == sorted(a):\n            results.append(\"0\")\n            continue\n        \n        actions = []\n        \n        # Simple strategy: bubble sort-like approach using cyclic shifts\n        for i in range(n):\n            for j in range(n-1, i, -1):\n                if a[j] < a[j-1]:\n                    # Perform a cyclic shift to move a[j] to the correct position\n                    l = j - 1\n                    r = j\n                    d = 1\n                    cyclic_shift(a, l, r, d)\n                    actions.append(f\"{l+1} {r+1} {d}\")\n        \n        results.append(str(len(actions)))\n        results.extend(actions)\n    \n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    solve()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for n, array in test_cases:\n        actions = []\n        \n        # Check if the array is already sorted\n        if array == sorted(array):\n            results.append((0, actions))\n            continue\n        \n        # Perform cyclic shifts to sort the array\n        sorted_array = sorted(array)\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for i in range(n):\n            if array[i] != sorted_array[i]:\n                # Find the correct position of the current element\n                correct_pos = sorted_array.index(array[i])\n                \n                # Perform a cyclic shift to move the element to its correct position\n                if correct_pos > i:\n                    l = i + 1\n                    r = correct_pos + 1\n                    d = correct_pos - i\n                    actions.append((l, r, d))\n                    # Perform the cyclic shift\n                    segment = array[l-1:r]\n                    shifted_segment = segment[d:] + segment[:d]\n                    array[l-1:r] = shifted_segment\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index+n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for n, array in test_cases:\n        sorted_array = sorted(array)\n        operations = []\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for i in range(n):\n            if array[i] != sorted_array[i]:\n                # Find the correct position of the current element\n                correct_pos = array.index(sorted_array[i], i)\n                \n                # Perform a cyclic shift to move the element to its correct position\n                if correct_pos > i:\n                    d = correct_pos - i\n                    operations.append((i + 1, correct_pos + 1, d))\n                    array[i:correct_pos + 1] = array[i + d:correct_pos + 1] + array[i:i + d]\n        \n        results.append((len(operations), operations))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, operations in results:\n        print(k)\n        for l, r, d in operations:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the correct position of a[j] in the sorted array\n                correct_pos = sorted_a.index(a[j])\n                \n                # Perform a cyclic shift to move a[j] to its correct position\n                if correct_pos > j:\n                    l = j + 1\n                    r = correct_pos + 1\n                    d = correct_pos - j\n                    a[j:r] = a[j+d:r] + a[j:j+d]\n                    actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        current_a = a[:]\n        \n        for _ in range(n):\n            if current_a == sorted_a:\n                break\n            \n            for l in range(n):\n                for r in range(l + 1, n):\n                    segment = current_a[l:r+1]\n                    for d in range(1, r - l + 1):\n                        shifted_segment = segment[d:] + segment[:d]\n                        new_a = current_a[:l] + shifted_segment + current_a[r+1:]\n                        \n                        if new_a == sorted_a:\n                            actions.append((l + 1, r + 1, d))\n                            current_a = new_a\n                            break\n                    if current_a == sorted_a:\n                        break\n                if current_a == sorted_a:\n                    break\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the position of the element that should be here\n                target_index = a.index(sorted_a[j], j)\n                \n                # Perform a cyclic shift to bring the element to the correct position\n                if target_index > j:\n                    # Calculate the offset\n                    offset = target_index - j\n                    # Perform the cyclic shift\n                    segment = a[j:target_index+1]\n                    shifted_segment = segment[offset:] + segment[:offset]\n                    a[j:target_index+1] = shifted_segment\n                    actions.append((j+1, target_index+1, offset))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index+n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def cyclic_shift(arr, l, r, d):\n    # Perform cyclic shift to the left by d positions on the segment arr[l:r+1]\n    segment = arr[l:r+1]\n    d = d % len(segment)  # Ensure d is within the segment length\n    shifted_segment = segment[d:] + segment[:d]\n    arr[l:r+1] = shifted_segment\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index+n]))\n        index += n\n        \n        if a == sorted(a):\n            results.append(\"0\")\n            continue\n        \n        actions = []\n        \n        # Simple strategy: sort the array using cyclic shifts\n        sorted_a = sorted(a)\n        \n        for i in range(n):\n            if a[i] != sorted_a[i]:\n                # Find the position of the correct element in the unsorted array\n                correct_pos = a.index(sorted_a[i], i)\n                \n                # Perform a cyclic shift to move the correct element to the current position\n                if correct_pos > i:\n                    cyclic_shift(a, i, correct_pos, correct_pos - i)\n                    actions.append(f\"{i+1} {correct_pos+1} {correct_pos-i}\")\n        \n        results.append(str(len(actions)))\n        results.extend(actions)\n    \n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    solve()\n\nmain()", "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the correct position of a[j] in the sorted array\n                correct_pos = a.index(sorted_a[j], j)\n                \n                # Perform a cyclic shift to move a[j] to its correct position\n                if correct_pos > j:\n                    d = correct_pos - j\n                    actions.append((j + 1, correct_pos + 1, d))\n                    a[j:correct_pos + 1] = a[j + d:correct_pos + 1] + a[j:j + d]\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Parse the input data\",\n      \"description\": \"Read the number of test cases and for each test case, read the length of the array and the array elements.\"\n    },\n    {\n      \"subproblem\": \"Determine if the array is already sorted\",\n      \"description\": \"Check if the array is in non-decreasing order. If it is, output 0 and no actions.\"\n    },\n    {\n      \"subproblem\": \"Identify segments for cyclic shifts\",\n      \"description\": \"For unsorted arrays, identify segments that can be cyclically shifted to move elements into their correct positions.\"\n    },\n    {\n      \"subproblem\": \"Perform cyclic shifts\",\n      \"description\": \"Execute the cyclic shifts on the identified segments to sort the array. Ensure the number of shifts does not exceed the length of the array.\"\n    },\n    {\n      \"subproblem\": \"Output the results\",\n      \"description\": \"For each test case, output the number of shifts and the details of each shift (l, r, d).\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Handling\",\n      \"description\": \"Read and parse the input data to extract the number of test cases, array lengths, and array elements.\"\n    },\n    {\n      \"step\": \"Sorting Check\",\n      \"description\": \"For each test case, check if the array is already sorted. If sorted, output 0 and proceed to the next test case.\"\n    },\n    {\n      \"step\": \"Segment Identification\",\n      \"description\": \"For unsorted arrays, identify segments that can be cyclically shifted to help sort the array.\"\n    },\n    {\n      \"step\": \"Cyclic Shift Execution\",\n      \"description\": \"Perform the cyclic shifts on the identified segments, ensuring the number of shifts does not exceed the array length.\"\n    },\n    {\n      \"step\": \"Output Generation\",\n      \"description\": \"Generate the output for each test case, including the number of shifts and the details of each shift.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the correct position of a[j] in the sorted array\n                correct_pos = a.index(sorted_a[j], j)\n                \n                # Perform a cyclic shift to move a[j] to its correct position\n                if correct_pos > j:\n                    d = correct_pos - j\n                    actions.append((j + 1, correct_pos + 1, d))\n                    a[j:correct_pos + 1] = a[j + d:correct_pos + 1] + a[j:j + d]\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which is the length of the array.\",\n        \"Read the array of integers a of length n.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"steps\": [\n        \"Compare the array a with its sorted version.\",\n        \"If the array is already sorted, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n      ]\n    },\n    {\n      \"description\": \"If the array is not sorted, find a sequence of cyclic shifts to sort it.\",\n      \"steps\": [\n        \"Identify segments of the array that can be cyclically shifted to move elements closer to their sorted positions.\",\n        \"For each segment, determine the indices l and r and the offset d for the cyclic shift.\",\n        \"Apply the cyclic shift to the segment and update the array.\",\n        \"Repeat the process until the array is sorted or the number of shifts reaches n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the integer k, which is the number of cyclic shifts performed.\",\n        \"For each shift, output the indices l, r, and the offset d.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details of each test case.\",\n    \"For each test case, check if the array is already sorted.\",\n    \"If the array is sorted, output k = 0 and an empty sequence of shifts.\",\n    \"If the array is not sorted, find a sequence of cyclic shifts to sort the array.\",\n    \"Output the number of shifts and the details of each shift for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        current_a = a[:]\n        \n        for j in range(n):\n            if current_a == sorted_a:\n                break\n            \n            for l in range(n):\n                for r in range(l + 1, n):\n                    segment = current_a[l:r+1]\n                    for d in range(1, r - l + 1):\n                        shifted_segment = segment[d:] + segment[:d]\n                        new_a = current_a[:l] + shifted_segment + current_a[r+1:]\n                        \n                        if new_a == sorted_a:\n                            actions.append((l + 1, r + 1, d))\n                            current_a = new_a\n                            break\n                        \n                        if new_a < current_a:\n                            actions.append((l + 1, r + 1, d))\n                            current_a = new_a\n                            break\n                    if current_a == sorted_a:\n                        break\n                if current_a == sorted_a:\n                    break\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Parse Input\",\n      \"description\": \"Read the number of test cases and for each test case, read the length of the array and the array elements.\"\n    },\n    {\n      \"subproblem\": \"Check Sorted\",\n      \"description\": \"For each test case, check if the array is already sorted. If sorted, output 0 and move to the next test case.\"\n    },\n    {\n      \"subproblem\": \"Identify Segments\",\n      \"description\": \"Identify segments within the array that can be cyclically shifted to move elements closer to their sorted positions.\"\n    },\n    {\n      \"subproblem\": \"Perform Cyclic Shifts\",\n      \"description\": \"For each identified segment, perform cyclic shifts to the left by the appropriate offset to sort the array.\"\n    },\n    {\n      \"subproblem\": \"Output Results\",\n      \"description\": \"For each test case, output the number of cyclic shifts performed and the details of each shift (l, r, d).\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize\",\n      \"description\": \"Initialize necessary data structures to store input and output data.\"\n    },\n    {\n      \"step\": \"Parse Input\",\n      \"description\": \"Read and parse the input data to extract the number of test cases and the arrays for each test case.\"\n    },\n    {\n      \"step\": \"Process Each Test Case\",\n      \"description\": \"Iterate over each test case and perform the following steps.\"\n    },\n    {\n      \"step\": \"Check Sorted\",\n      \"description\": \"Check if the current array is already sorted. If yes, record 0 actions and continue to the next test case.\"\n    },\n    {\n      \"step\": \"Identify Segments\",\n      \"description\": \"Identify segments within the array that can be cyclically shifted to sort the array.\"\n    },\n    {\n      \"step\": \"Perform Cyclic Shifts\",\n      \"description\": \"Perform cyclic shifts on identified segments and record the actions taken.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"description\": \"Output the number of actions and the details of each action for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, array = test_cases[i]\n        sorted_array = sorted(array)\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if array[j] != sorted_array[j]:\n                # Find the position of the correct element\n                correct_pos = array.index(sorted_array[j], j)\n                \n                # Perform a cyclic shift to bring the correct element to position j\n                if correct_pos > j:\n                    d = correct_pos - j\n                    actions.append((j + 1, correct_pos + 1, d))\n                    # Perform the cyclic shift\n                    array[j:correct_pos + 1] = array[j + d:correct_pos + 1] + array[j:j + d]\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each test case.\",\n      \"details\": \"Read the integer t for the number of test cases. For each test case, read the integer n for the length of the array and then read the array of integers a.\"\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"details\": \"For each test case, check if the array a is in non-decreasing order. If it is, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n    },\n    {\n      \"description\": \"Implement a method to perform cyclic shifts on a segment of the array.\",\n      \"details\": \"Create a function that takes parameters l, r, and d, and performs a cyclic shift to the left by d on the segment a[l...r].\"\n    },\n    {\n      \"description\": \"Develop a strategy to sort the array using cyclic shifts.\",\n      \"details\": \"Design a method to sort the array using at most n cyclic shifts. This can be done by identifying unsorted segments and applying cyclic shifts to move elements into their correct positions.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, output the integer k, the number of cyclic shifts used, followed by k lines describing each shift in the format 'l r d'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details of each test case.\",\n    \"For each test case, check if the array is already sorted. If sorted, output k = 0 and an empty sequence.\",\n    \"If the array is not sorted, apply the cyclic shift strategy to sort the array using at most n shifts.\",\n    \"For each shift, record the indices l, r, and the offset d used.\",\n    \"Output the number of shifts k and the details of each shift for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift(arr, l, r, d):\n    # Perform a cyclic shift to the left by d on the segment arr[l...r]\n    segment = arr[l:r+1]\n    d = d % len(segment)  # Ensure d is within the bounds of the segment length\n    shifted_segment = segment[d:] + segment[:d]\n    arr[l:r+1] = shifted_segment\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index+n]))\n        index += n\n        \n        if a == sorted(a):\n            results.append(\"0\")\n            continue\n        \n        actions = []\n        \n        # Simple strategy: bubble sort-like approach using cyclic shifts\n        for i in range(n):\n            for j in range(n-1, i, -1):\n                if a[j] < a[j-1]:\n                    # Perform a cyclic shift to move a[j] to the correct position\n                    l = j - 1\n                    r = j\n                    d = 1\n                    cyclic_shift(a, l, r, d)\n                    actions.append(f\"{l+1} {r+1} {d}\")\n        \n        results.append(str(len(actions)))\n        results.extend(actions)\n    \n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    solve()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"name\": \"Parse Input\",\n      \"description\": \"Read the number of test cases and the array data for each test case from standard input.\"\n    },\n    {\n      \"name\": \"Check Sorted\",\n      \"description\": \"Determine if the array is already sorted. If sorted, output 0 actions.\"\n    },\n    {\n      \"name\": \"Perform Cyclic Shifts\",\n      \"description\": \"Identify segments within the array that can be cyclically shifted to move elements into their correct positions.\"\n    },\n    {\n      \"name\": \"Generate Output\",\n      \"description\": \"For each test case, output the number of actions and the details of each cyclic shift performed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize\",\n      \"description\": \"Start by reading the input data and initializing necessary variables.\"\n    },\n    {\n      \"step\": \"Iterate Test Cases\",\n      \"description\": \"Loop through each test case to process the array.\"\n    },\n    {\n      \"step\": \"Sort Check\",\n      \"description\": \"Check if the array is already sorted. If yes, output 0 actions and continue to the next test case.\"\n    },\n    {\n      \"step\": \"Identify Segments\",\n      \"description\": \"For unsorted arrays, identify segments that can be cyclically shifted to sort the array.\"\n    },\n    {\n      \"step\": \"Perform Shifts\",\n      \"description\": \"Execute the cyclic shifts on identified segments and keep track of the actions performed.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"description\": \"Output the number of actions and the details of each shift for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for n, array in test_cases:\n        actions = []\n        \n        # Check if the array is already sorted\n        if array == sorted(array):\n            results.append((0, actions))\n            continue\n        \n        # Perform cyclic shifts to sort the array\n        sorted_array = sorted(array)\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for i in range(n):\n            if array[i] != sorted_array[i]:\n                # Find the correct position of the current element\n                correct_pos = sorted_array.index(array[i])\n                \n                # Perform a cyclic shift to move the element to its correct position\n                if correct_pos > i:\n                    l = i + 1\n                    r = correct_pos + 1\n                    d = correct_pos - i\n                    actions.append((l, r, d))\n                    # Perform the cyclic shift\n                    segment = array[l-1:r]\n                    shifted_segment = segment[d:] + segment[:d]\n                    array[l-1:r] = shifted_segment\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index+n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each test case, including the length of the array and the array elements.\",\n      \"output\": \"A list of test cases, where each test case is a tuple containing the length of the array and the array itself.\"\n    },\n    {\n      \"description\": \"For each test case, determine if the array is already sorted.\",\n      \"output\": \"A boolean value indicating whether the array is sorted.\"\n    },\n    {\n      \"description\": \"If the array is not sorted, identify segments of the array that can be cyclically shifted to move elements closer to their sorted positions.\",\n      \"output\": \"A list of operations, where each operation is a tuple (l, r, d) representing the segment boundaries and the shift offset.\"\n    },\n    {\n      \"description\": \"Apply the identified cyclic shifts to the array and verify if the array becomes sorted.\",\n      \"output\": \"The modified array after applying the cyclic shifts.\"\n    },\n    {\n      \"description\": \"Format the output for each test case, including the number of operations and the details of each operation.\",\n      \"output\": \"A formatted string for each test case, ready for output.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a list of test cases.\",\n    \"For each test case, check if the array is already sorted. If it is, output 0 operations.\",\n    \"If the array is not sorted, devise a strategy to sort the array using cyclic shifts. This may involve identifying segments that can be shifted to move elements into their correct positions.\",\n    \"Apply the cyclic shifts to the array and ensure it becomes sorted.\",\n    \"Count the number of operations used and format the output for each test case.\",\n    \"Print the results for all test cases.\"\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for n, array in test_cases:\n        sorted_array = sorted(array)\n        operations = []\n        \n        if array == sorted_array:\n            results.append((0, []))\n            continue\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for i in range(n):\n            if array[i] != sorted_array[i]:\n                # Find the correct position of the current element\n                correct_pos = array.index(sorted_array[i], i)\n                \n                # Perform a cyclic shift to move the element to its correct position\n                if correct_pos > i:\n                    d = correct_pos - i\n                    operations.append((i + 1, correct_pos + 1, d))\n                    array[i:correct_pos + 1] = array[i + d:correct_pos + 1] + array[i:i + d]\n        \n        results.append((len(operations), operations))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, operations in results:\n        print(k)\n        for l, r, d in operations:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Parse the input data\",\n      \"description\": \"Read the number of test cases and for each test case, read the length of the array and the array elements.\"\n    },\n    {\n      \"subproblem\": \"Determine if the array is already sorted\",\n      \"description\": \"Check if the array is in non-decreasing order. If it is, no cyclic shifts are needed.\"\n    },\n    {\n      \"subproblem\": \"Identify segments for cyclic shifts\",\n      \"description\": \"Find segments within the array that can be cyclically shifted to move elements closer to their sorted positions.\"\n    },\n    {\n      \"subproblem\": \"Perform cyclic shifts\",\n      \"description\": \"Execute the cyclic shifts on identified segments to sort the array. Ensure the number of shifts does not exceed the length of the array.\"\n    },\n    {\n      \"subproblem\": \"Format the output\",\n      \"description\": \"For each test case, output the number of shifts and the details of each shift in the specified format.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"description\": \"Read the input data including the number of test cases, array lengths, and array elements.\"\n    },\n    {\n      \"step\": \"Check Sorted Status\",\n      \"description\": \"For each test case, check if the array is already sorted. If sorted, output zero shifts.\"\n    },\n    {\n      \"step\": \"Segment Identification\",\n      \"description\": \"Identify segments within the array that can be cyclically shifted to sort the array.\"\n    },\n    {\n      \"step\": \"Execute Cyclic Shifts\",\n      \"description\": \"Perform the cyclic shifts on the identified segments, ensuring the number of shifts does not exceed the array length.\"\n    },\n    {\n      \"step\": \"Output Formatting\",\n      \"description\": \"Format the output for each test case, including the number of shifts and the details of each shift.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the correct position of a[j] in the sorted array\n                correct_pos = sorted_a.index(a[j])\n                \n                # Perform a cyclic shift to move a[j] to its correct position\n                if correct_pos > j:\n                    l = j + 1\n                    r = correct_pos + 1\n                    d = correct_pos - j\n                    a[j:r] = a[j+d:r] + a[j:j+d]\n                    actions.append((l, r, d))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which is the length of the array.\",\n        \"Read the array of integers a of length n.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"steps\": [\n        \"Compare the array a with its sorted version.\",\n        \"If the array is already sorted, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n      ]\n    },\n    {\n      \"description\": \"If the array is not sorted, determine a sequence of cyclic shifts to sort it.\",\n      \"steps\": [\n        \"Identify segments of the array that can be cyclically shifted to move elements closer to their sorted positions.\",\n        \"For each segment, determine the indices l and r and the offset d for the cyclic shift.\",\n        \"Apply the cyclic shift to the segment and update the array.\",\n        \"Repeat the process until the array is sorted or the number of shifts reaches n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the integer k, which is the number of cyclic shifts performed.\",\n        \"For each shift, output the indices l, r, and the offset d.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details of each test case.\",\n    \"For each test case, check if the array is already sorted.\",\n    \"If the array is sorted, output k = 0 and an empty sequence of shifts.\",\n    \"If the array is not sorted, determine a sequence of cyclic shifts to sort the array.\",\n    \"Output the number of shifts and the details of each shift for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        current_a = a[:]\n        \n        for _ in range(n):\n            if current_a == sorted_a:\n                break\n            \n            for l in range(n):\n                for r in range(l + 1, n):\n                    segment = current_a[l:r+1]\n                    for d in range(1, r - l + 1):\n                        shifted_segment = segment[d:] + segment[:d]\n                        new_a = current_a[:l] + shifted_segment + current_a[r+1:]\n                        \n                        if new_a == sorted_a:\n                            actions.append((l + 1, r + 1, d))\n                            current_a = new_a\n                            break\n                    if current_a == sorted_a:\n                        break\n                if current_a == sorted_a:\n                    break\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which is the length of the array.\",\n        \"Read the array of integers a of length n.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"steps\": [\n        \"Compare the array a with its sorted version.\",\n        \"If the array is already sorted, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n      ]\n    },\n    {\n      \"description\": \"If the array is not sorted, find a sequence of cyclic shifts to sort it.\",\n      \"steps\": [\n        \"Identify segments of the array that can be cyclically shifted to move elements closer to their sorted positions.\",\n        \"For each segment, determine the indices l and r and the offset d for the cyclic shift.\",\n        \"Apply the cyclic shift to the segment and update the array.\",\n        \"Repeat the process until the array is sorted or the number of shifts reaches n.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, output the integer k, which is the number of cyclic shifts performed.\",\n        \"For each shift, output the indices l, r, and the offset d.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details of each test case.\",\n    \"For each test case, check if the array is already sorted.\",\n    \"If the array is sorted, output k = 0 and an empty sequence of shifts.\",\n    \"If the array is not sorted, find a sequence of cyclic shifts to sort the array.\",\n    \"Output the number of shifts and the details of each shift for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the position of the element that should be here\n                target_index = a.index(sorted_a[j], j)\n                \n                # Perform a cyclic shift to bring the element to the correct position\n                if target_index > j:\n                    # Calculate the offset\n                    offset = target_index - j\n                    # Perform the cyclic shift\n                    segment = a[j:target_index+1]\n                    shifted_segment = segment[offset:] + segment[:offset]\n                    a[j:target_index+1] = shifted_segment\n                    actions.append((j+1, target_index+1, offset))\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index+n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each test case.\",\n      \"details\": \"Read the integer t for the number of test cases. For each test case, read the integer n for the length of the array and then read the array of integers a.\"\n    },\n    {\n      \"description\": \"Determine if the array is already sorted.\",\n      \"details\": \"For each test case, check if the array a is in non-decreasing order. If it is, set k = 0 and prepare an empty sequence of cyclic shifts.\"\n    },\n    {\n      \"description\": \"Implement a method to perform cyclic shifts on a segment of the array.\",\n      \"details\": \"Create a function that takes indices l, r, and offset d, and performs a cyclic shift to the left on the segment a[l...r] by d positions.\"\n    },\n    {\n      \"description\": \"Develop a strategy to sort the array using cyclic shifts.\",\n      \"details\": \"Design a sequence of cyclic shifts that will sort the array a. Ensure that the number of shifts does not exceed n. This can be done by identifying unsorted segments and applying cyclic shifts to move elements into their correct positions.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, output the integer k, the number of cyclic shifts performed, followed by k lines describing each shift in the format 'l r d'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data to extract the number of test cases and the details of each test case.\",\n    \"For each test case, check if the array is already sorted. If sorted, output k = 0 and an empty sequence.\",\n    \"If the array is not sorted, identify segments that need to be shifted to sort the array.\",\n    \"Use the cyclic shift function to perform the necessary shifts on the identified segments.\",\n    \"Ensure that the number of shifts does not exceed n for each test case.\",\n    \"Output the number of shifts and the details of each shift for each test case.\"\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift(arr, l, r, d):\n    # Perform cyclic shift to the left by d positions on the segment arr[l:r+1]\n    segment = arr[l:r+1]\n    d = d % len(segment)  # Ensure d is within the segment length\n    shifted_segment = segment[d:] + segment[:d]\n    arr[l:r+1] = shifted_segment\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index+n]))\n        index += n\n        \n        if a == sorted(a):\n            results.append(\"0\")\n            continue\n        \n        actions = []\n        \n        # Simple strategy: sort the array using cyclic shifts\n        sorted_a = sorted(a)\n        \n        for i in range(n):\n            if a[i] != sorted_a[i]:\n                # Find the position of the correct element in the unsorted array\n                correct_pos = a.index(sorted_a[i], i)\n                \n                # Perform a cyclic shift to move the correct element to the current position\n                if correct_pos > i:\n                    cyclic_shift(a, i, correct_pos, correct_pos - i)\n                    actions.append(f\"{i+1} {correct_pos+1} {correct_pos-i}\")\n        \n        results.append(str(len(actions)))\n        results.extend(actions)\n    \n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    solve()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Parse the input data\",\n      \"description\": \"Read the number of test cases and for each test case, read the length of the array and the array elements.\"\n    },\n    {\n      \"subproblem\": \"Determine if the array is already sorted\",\n      \"description\": \"Check if the array is in non-decreasing order. If it is, output 0 and no actions.\"\n    },\n    {\n      \"subproblem\": \"Identify segments for cyclic shifts\",\n      \"description\": \"For unsorted arrays, identify segments that can be cyclically shifted to move elements into their correct positions.\"\n    },\n    {\n      \"subproblem\": \"Perform cyclic shifts\",\n      \"description\": \"Execute the cyclic shifts on the identified segments to sort the array. Ensure the number of shifts does not exceed the length of the array.\"\n    },\n    {\n      \"subproblem\": \"Output the results\",\n      \"description\": \"For each test case, output the number of shifts and the details of each shift (l, r, d).\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Handling\",\n      \"description\": \"Read and parse the input data to extract the number of test cases, array lengths, and array elements.\"\n    },\n    {\n      \"step\": \"Sorting Check\",\n      \"description\": \"For each test case, check if the array is already sorted. If sorted, output 0 and proceed to the next test case.\"\n    },\n    {\n      \"step\": \"Segment Identification\",\n      \"description\": \"For unsorted arrays, identify segments that can be cyclically shifted to help sort the array.\"\n    },\n    {\n      \"step\": \"Cyclic Shift Execution\",\n      \"description\": \"Perform the cyclic shifts on the identified segments, ensuring the number of shifts does not exceed the array length.\"\n    },\n    {\n      \"step\": \"Output Generation\",\n      \"description\": \"Generate the output for each test case, including the number of shifts and the details of each shift.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def cyclic_shift_sort(t, test_cases):\n    results = []\n    \n    for i in range(t):\n        n, a = test_cases[i]\n        sorted_a = sorted(a)\n        \n        if a == sorted_a:\n            results.append((0, []))\n            continue\n        \n        actions = []\n        \n        # A simple strategy to sort the array using cyclic shifts\n        for j in range(n):\n            if a[j] != sorted_a[j]:\n                # Find the correct position of a[j] in the sorted array\n                correct_pos = a.index(sorted_a[j], j)\n                \n                # Perform a cyclic shift to move a[j] to its correct position\n                if correct_pos > j:\n                    d = correct_pos - j\n                    actions.append((j + 1, correct_pos + 1, d))\n                    a[j:correct_pos + 1] = a[j + d:correct_pos + 1] + a[j:j + d]\n        \n        results.append((len(actions), actions))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = cyclic_shift_sort(t, test_cases)\n    \n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, false, false, false, false, false, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 391, "prompt": "The advanced external memory is made up of a sequence of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. However, it allows for a different kind of operation that can be used to modify the array. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. \n  2. Then you substitute the segment a[l \u2026 r] with its cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2.\n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nReorder the given array a using no greater than n cyclic shifts of any of its parts. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "mutate_method": "rephrase_one", "save_node": true, "parent_index": 207}
