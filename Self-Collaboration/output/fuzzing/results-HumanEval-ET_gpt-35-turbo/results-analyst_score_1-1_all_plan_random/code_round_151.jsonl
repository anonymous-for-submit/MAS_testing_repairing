{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a sequence composed of \"(\" and \")\". \n    return True if every opening bracket has a matching closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "test": ["def check(correct_bracketing):\n\tassert correct_bracketing(\"(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()))((())((()()((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((((((()())())()(((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((())))()(()))())\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"(()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()((()()())())(()()(()))()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()))\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\")\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")())()())))(((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))((((((()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()((()()())())(()()(()))\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((())()))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()(())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()))()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()()(()())()()()((()()())())(()()(()))\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()))))()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(((()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")))((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()(()())()\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"((((\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()(())()((()())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()))))(()()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()())())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()((()()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()((()()())())(()()(()))()()(()())()()\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"((()())))\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()\")", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"(\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"())())((()()))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()))(((()((()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()))))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))())()))(())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")())())()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((()))))((()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()())())))(()(())()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((((((\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\")(()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((())()()\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"()()(()())()))()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()(())((())((())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()()((()()())())(()()(()))(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()((()()())())(()()(()))(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()((()()())())(()()(()))\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"()()(()())())(()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()(())()()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()()(()(())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()()())(())\") == False"], "entry_point": "correct_bracketing", "completion": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    opening_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "completions": ["def correct_bracketing(brackets: str):\n    opening_bracket = \"(\"\n    closing_bracket = \")\"\n    count_opening = 0\n    count_closing = 0\n    \n    for bracket in brackets:\n        if bracket == opening_bracket:\n            count_opening += 1\n        elif bracket == closing_bracket:\n            count_closing += 1\n    \n    if count_opening != count_closing:\n        return False\n    \n    balance = 0\n    for bracket in brackets:\n        if bracket == opening_bracket:\n            balance += 1\n        elif bracket == closing_bracket:\n            balance -= 1\n        \n        if balance < 0:\n            return False\n    \n    return balance == 0\n", "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    open_count = 0\n    close_count = 0\n    \n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n        \n        if close_count > open_count:\n            return False\n    \n    return open_count == close_count\n", "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    \n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    closing_brackets = 0\n    \n    for bracket in brackets:\n        if bracket == '(':\n            opening_brackets += 1\n        elif bracket == ')':\n            closing_brackets += 1\n    \n    if opening_brackets != closing_brackets:\n        return False\n    \n    nested_brackets = 0\n    for bracket in brackets:\n        if bracket == '(':\n            nested_brackets += 1\n        elif bracket == ')':\n            nested_brackets -= 1\n        \n        if nested_brackets < 0:\n            return False\n    \n    return nested_brackets == 0\n", "def correct_bracketing(brackets: str):\n    opening_bracket = \"(\"\n    closing_bracket = \")\"\n    count_opening = 0\n    count_closing = 0\n    \n    for bracket in brackets:\n        if bracket == opening_bracket:\n            count_opening += 1\n        elif bracket == closing_bracket:\n            count_closing += 1\n    \n    if count_opening != count_closing:\n        return False\n    \n    balance = 0\n    for bracket in brackets:\n        if bracket == opening_bracket:\n            balance += 1\n        elif bracket == closing_bracket:\n            balance -= 1\n        \n        if balance < 0:\n            return False\n    \n    return balance == 0\n", "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    \n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "def correct_bracketing(brackets: str):\n    opening_bracket = \"(\"\n    closing_bracket = \")\"\n    count_opening = 0\n    count_closing = 0\n    \n    for bracket in brackets:\n        if bracket == opening_bracket:\n            count_opening += 1\n        elif bracket == closing_bracket:\n            count_closing += 1\n    \n    if count_opening != count_closing:\n        return False\n    \n    balance = 0\n    for bracket in brackets:\n        if bracket == opening_bracket:\n            balance += 1\n        elif bracket == closing_bracket:\n            balance -= 1\n        \n        if balance < 0:\n            return False\n    \n    return balance == 0\n", "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    \n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    \n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    opening_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening brackets is equal to the number of closing brackets\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a counter variable for opening brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the counter\",\n      \"If the character is a closing bracket, decrement the counter\",\n      \"If the counter becomes negative at any point, return False\",\n      \"If the counter is not zero at the end, return False\",\n      \"Return True if all conditions are met\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    opening_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the number of opening and closing brackets is equal\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Count the number of opening and closing brackets in the input string\",\n      \"If the counts are not equal, return False\",\n      \"Iterate through the input string and keep track of the balance of opening and closing brackets\",\n      \"If at any point the balance becomes negative, return False\",\n      \"If the balance is zero at the end of the iteration, return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    opening_bracket = \"(\"\n    closing_bracket = \")\"\n    count_opening = 0\n    count_closing = 0\n    \n    for bracket in brackets:\n        if bracket == opening_bracket:\n            count_opening += 1\n        elif bracket == closing_bracket:\n            count_closing += 1\n    \n    if count_opening != count_closing:\n        return False\n    \n    balance = 0\n    for bracket in brackets:\n        if bracket == opening_bracket:\n            balance += 1\n        elif bracket == closing_bracket:\n            balance -= 1\n        \n        if balance < 0:\n            return False\n    \n    return balance == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening brackets is equal to the number of closing brackets\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a counter for opening brackets and closing brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the opening bracket counter\",\n      \"If the character is a closing bracket, increment the closing bracket counter\",\n      \"If the closing bracket counter is greater than the opening bracket counter, return False\",\n      \"If the closing bracket counter is equal to the opening bracket counter, return True\",\n      \"If the closing bracket counter is less than the opening bracket counter, return False\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    open_count = 0\n    close_count = 0\n    \n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n        \n        if close_count > open_count:\n            return False\n    \n    return open_count == close_count\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the number of opening and closing brackets is equal\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Initialize a counter variable to keep track of the number of opening brackets\",\n      \"Iterate through each character in the brackets string\",\n      \"If the character is an opening bracket, increment the counter\",\n      \"If the character is a closing bracket, decrement the counter\",\n      \"If the counter becomes negative at any point, return False\",\n      \"If the counter is not zero at the end, return False\",\n      \"Return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    \n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the number of opening and closing brackets is equal\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function that takes a string of brackets as input\",\n      \"Count the number of opening and closing brackets\",\n      \"If the counts are not equal, return False\",\n      \"Iterate through the string of brackets\",\n      \"If a closing bracket is encountered before an opening bracket, return False\",\n      \"If all brackets are correctly nested, return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    closing_brackets = 0\n    \n    for bracket in brackets:\n        if bracket == '(':\n            opening_brackets += 1\n        elif bracket == ')':\n            closing_brackets += 1\n    \n    if opening_brackets != closing_brackets:\n        return False\n    \n    nested_brackets = 0\n    for bracket in brackets:\n        if bracket == '(':\n            nested_brackets += 1\n        elif bracket == ')':\n            nested_brackets -= 1\n        \n        if nested_brackets < 0:\n            return False\n    \n    return nested_brackets == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the number of opening and closing brackets is equal\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Count the number of opening and closing brackets in the input string\",\n      \"If the counts are not equal, return False\",\n      \"Iterate through the input string and keep track of the balance of opening and closing brackets\",\n      \"If at any point the balance becomes negative, return False\",\n      \"If the balance is zero at the end of the iteration, return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    opening_bracket = \"(\"\n    closing_bracket = \")\"\n    count_opening = 0\n    count_closing = 0\n    \n    for bracket in brackets:\n        if bracket == opening_bracket:\n            count_opening += 1\n        elif bracket == closing_bracket:\n            count_closing += 1\n    \n    if count_opening != count_closing:\n        return False\n    \n    balance = 0\n    for bracket in brackets:\n        if bracket == opening_bracket:\n            balance += 1\n        elif bracket == closing_bracket:\n            balance -= 1\n        \n        if balance < 0:\n            return False\n    \n    return balance == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Check if the number of opening and closing brackets is equal\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"major_steps\": [\n      \"Create a function correct_bracketing that takes a string of brackets as input\",\n      \"Initialize a counter variable to keep track of the number of opening brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the counter\",\n      \"If the character is a closing bracket, decrement the counter\",\n      \"If the counter becomes negative at any point, return False\",\n      \"If the counter is not zero at the end of the iteration, return False\",\n      \"Return True if all conditions are met\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    \n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the number of opening and closing brackets is equal\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Count the number of opening and closing brackets in the input string\",\n      \"If the counts are not equal, return False\",\n      \"Iterate through the input string and keep track of the balance of opening and closing brackets\",\n      \"If at any point the balance becomes negative, return False\",\n      \"If the balance is zero at the end of the iteration, return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    opening_bracket = \"(\"\n    closing_bracket = \")\"\n    count_opening = 0\n    count_closing = 0\n    \n    for bracket in brackets:\n        if bracket == opening_bracket:\n            count_opening += 1\n        elif bracket == closing_bracket:\n            count_closing += 1\n    \n    if count_opening != count_closing:\n        return False\n    \n    balance = 0\n    for bracket in brackets:\n        if bracket == opening_bracket:\n            balance += 1\n        elif bracket == closing_bracket:\n            balance -= 1\n        \n        if balance < 0:\n            return False\n    \n    return balance == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the number of opening and closing brackets is equal\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Initialize a counter variable to keep track of the number of opening brackets\",\n      \"Iterate through each character in the brackets string\",\n      \"If the character is an opening bracket, increment the counter\",\n      \"If the character is a closing bracket, decrement the counter\",\n      \"If the counter becomes negative at any point, return False\",\n      \"If the counter is not zero at the end, return False\",\n      \"Return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    \n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the number of opening and closing brackets is equal\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Initialize a counter variable to keep track of the number of opening brackets\",\n      \"Iterate through each character in the brackets string\",\n      \"If the character is an opening bracket, increment the counter\",\n      \"If the character is a closing bracket, decrement the counter\",\n      \"If the counter becomes negative at any point, return False\",\n      \"If the counter is not zero at the end, return False\",\n      \"Return True\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    opening_brackets = 0\n    \n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the input string is empty\",\n      \"Check if the number of opening brackets is equal to the number of closing brackets\",\n      \"Check if the brackets are correctly nested\"\n    ],\n    \"steps\": [\n      \"Create a function correct_bracketing that takes a string brackets as input\",\n      \"Check if the input string is empty, return False if it is\",\n      \"Initialize a counter variable for opening brackets\",\n      \"Iterate through each character in the input string\",\n      \"If the character is an opening bracket, increment the counter\",\n      \"If the character is a closing bracket, decrement the counter\",\n      \"If the counter becomes negative at any point, return False\",\n      \"If the counter is not zero at the end, return False\",\n      \"Return True if all conditions are met\"\n    ]\n  }\n}", "Round_0": {"code": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    \n    opening_brackets = 0\n    for char in brackets:\n        if char == '(':\n            opening_brackets += 1\n        elif char == ')':\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    \n    return opening_brackets == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 0.9873, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9873], "pass_results": [true, false, true, true, true, true, true, true, true, false], "pass_test_cases_num": [79, 78, 79, 79, 79, 79, 79, 79, 79, 78], "passed": true, "passAt10": true, "nl": " brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    ", "func": "def correct_bracketing(brackets: str):", "examples": ">>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    ", "canonical_plan": ["{\n  \"high-level plan\": {\n    \"subproblems\": [\n      \"Identify opening and closing brackets in the input string\",\n      \"Check if each opening bracket has a corresponding closing bracket\"\n    ],\n    \"major steps\": [\n      \"Initialize a depth variable to keep track of bracket nesting level\",\n      \"Iterate through each character in the input string\",\n      \"Increment depth for each opening bracket and decrement for each closing bracket\",\n      \"Return False if depth becomes negative at any point\",\n      \"Return True if depth is zero at the end\"\n    ]\n  }\n}"], "plan_score_gpt-35-turbo": [83.5, 95.0], "plan_score_gpt-4o": [82.5, 86.0], "mutate_method": "rephrase_one", "test_case_list": ["assert correct_bracketing(\"(\") == False", "assert correct_bracketing(\"))()))((())((()()((((\") == False", "assert correct_bracketing(\")((((((()())())()(((\") == False", "assert correct_bracketing(\")((())))()(()))())\") == False", "assert not correct_bracketing(\"(()\")", "assert correct_bracketing(\"(()())\") == True", "assert correct_bracketing(\"(()())()()((()()())())(()()(()))()\") == True", "assert correct_bracketing(\"()))\") == False", "assert not correct_bracketing(\")\")", "assert correct_bracketing(\"()()\") == True", "assert correct_bracketing(\")())()())))(((\") == False", "assert correct_bracketing(\"))((((((()\") == False", "assert correct_bracketing(\")((((\") == False", "assert correct_bracketing(\"()(()())\") == True", "assert correct_bracketing(\"(()())()()((()()())())(()()(()))\") == True", "assert correct_bracketing(\"((())()))\") == False", "assert correct_bracketing(\"()()()(())(\") == False", "assert correct_bracketing(\"))())\") == False", "assert correct_bracketing(\"()()(()())()\")", "assert correct_bracketing(\"()()(()())()\") == True", "assert correct_bracketing(\")\") == False", "assert correct_bracketing(\"()()()\") == True", "assert correct_bracketing(\"()))()(\") == False", "assert correct_bracketing(\"(())\") == True", "assert correct_bracketing(\"()()(()())()()()(()())()\") == True", "assert correct_bracketing(\"()()(()())()()()(()())()()()((()()())())(()()(()))\") == True", "assert correct_bracketing(\"(()())()(()())\") == True", "assert correct_bracketing(\"(()))))()\") == False", "assert correct_bracketing(\")(()())(\") == False", "assert correct_bracketing(\"((((\") == False", "assert correct_bracketing(\"(()())\")", "assert correct_bracketing(\"(((()\") == False", "assert correct_bracketing(\"))()\") == False", "assert correct_bracketing(\")))((\") == False", "assert correct_bracketing(\")()())\") == False", "assert correct_bracketing(\"(()\") == False", "assert correct_bracketing(\"(()())(()())()\") == True", "assert correct_bracketing(\"(()())()()(()())()\") == True", "assert correct_bracketing(\"()()(()())()(()())()\") == True", "assert not correct_bracketing(\"((((\")", "assert correct_bracketing(\"))))\") == False", "assert correct_bracketing(\"()\") == True", "assert correct_bracketing(\"())\") == False", "assert correct_bracketing(\")()(())()((()())\") == False", "assert correct_bracketing(\"))()))))(()()(\") == False", "assert correct_bracketing(\"()())())(\") == False", "assert correct_bracketing(\"()()()()(()())()\") == True", "assert correct_bracketing(\")()(\") == False", "assert correct_bracketing(\"((((((\") == False", "assert correct_bracketing(\"()()()((()()(\") == False", "assert correct_bracketing(\"()()((()()())())(()()(()))()()(()())()()\") == True", "assert not correct_bracketing(\"((()())))\")", "assert correct_bracketing(\"()\")", "assert not correct_bracketing(\"(\")", "assert correct_bracketing(\"())())((()()))\") == False", "assert correct_bracketing(\"(()())()\") == True", "assert correct_bracketing(\")(()))(((()((()\") == False", "assert correct_bracketing(\"()))))\") == False", "assert correct_bracketing(\"))())()))(())\") == False", "assert correct_bracketing(\")())())()\") == False", "assert correct_bracketing(\")((()))))((()(\") == False", "assert correct_bracketing(\"()())())))(()(())()\") == False", "assert correct_bracketing(\")((((((\") == False", "assert not correct_bracketing(\")(()\")", "assert correct_bracketing(\"((())()()\") == False", "assert not correct_bracketing(\"()()(()())()))()\")", "assert correct_bracketing(\")(()(())((())((())\") == False", "assert correct_bracketing(\")(()\") == False", "assert correct_bracketing(\")()\") == False", "assert correct_bracketing(\"()()(()())()()()((()()())())(()()(()))(()())\") == True", "assert correct_bracketing(\"()()(()())()()\") == True", "assert correct_bracketing(\"(()())()()((()()())())(()()(()))(()())\") == True", "assert correct_bracketing(\"()()((()()())())(()()(()))\")", "assert correct_bracketing(\"(((\") == False", "assert correct_bracketing(\"\") == True", "assert not correct_bracketing(\"()()(()())())(()\")", "assert correct_bracketing(\"()(())()()()\") == True", "assert correct_bracketing(\")()()(()(())(\") == False", "assert correct_bracketing(\"))()()())(())\") == False"], "save_node": true, "pass": true, "parent_index": 140, "round": 151}
