{"task_id": "HumanEval/103", "prompt": "def rounded_avg(n, m):\t\n'''You are given two positive integers n and m, and your task is to compute the\naverage of the numbers from n to m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    '''", "test": ["def check(rounded_avg):\n\tassert rounded_avg(7, 1) == -1", "def check(rounded_avg):\n\tassert rounded_avg(201, 228) == '0b11010110'", "def check(rounded_avg):\n\tassert rounded_avg(565, 856) == '0b1011000110'", "def check(rounded_avg):\n\tassert rounded_avg(3, 3) == '0b11'", "def check(rounded_avg):\n\tassert rounded_avg(2, 5) == '0b100'", "def check(rounded_avg):\n\tassert rounded_avg(7, 2) == -1", "def check(rounded_avg):\n\tassert rounded_avg(2, 3) == '0b10'", "def check(rounded_avg):\n\tassert rounded_avg(361, 495) == '0b110101100'", "def check(rounded_avg):\n\tassert rounded_avg(187, 545) == '0b101101110'", "def check(rounded_avg):\n\tassert rounded_avg(2, 2) == '0b10'", "def check(rounded_avg):\n\tassert rounded_avg(10, 7) == -1", "def check(rounded_avg):\n\tassert rounded_avg(969, 973) == '0b1111001011'", "def check(rounded_avg):\n\tassert rounded_avg(10, 2) == -1", "def check(rounded_avg):\n\tassert rounded_avg(1000, 992) == -1", "def check(rounded_avg):\n\tassert rounded_avg(9, 12) == '0b1010'", "def check(rounded_avg):\n\tassert rounded_avg(1000, 997) == -1", "def check(rounded_avg):\n\tassert rounded_avg(350,902) == \"0b1001110010\"", "def check(rounded_avg):\n\tassert rounded_avg(3, 5) == '0b100'", "def check(rounded_avg):\n\tassert rounded_avg(5, 5) == \"0b101\"", "def check(rounded_avg):\n\tassert rounded_avg(365, 492) == '0b110101100'", "def check(rounded_avg):\n\tassert rounded_avg(357, 500) == '0b110101100'", "def check(rounded_avg):\n\tassert rounded_avg(6, 10) == '0b1000'", "def check(rounded_avg):\n\tassert rounded_avg(1, 5) == \"0b11\"", "def check(rounded_avg):\n\tassert rounded_avg(5, 17) == '0b1011'", "def check(rounded_avg):\n\tassert rounded_avg(4, 8) == '0b110'", "def check(rounded_avg):\n\tassert rounded_avg(194, 238) == '0b11011000'", "def check(rounded_avg):\n\tassert rounded_avg(348, 904) == '0b1001110010'", "def check(rounded_avg):\n\tassert rounded_avg(198, 229) == '0b11010110'", "def check(rounded_avg):\n\tassert rounded_avg(2, 6) == '0b100'", "def check(rounded_avg):\n\tassert rounded_avg(959, 976) == '0b1111001000'", "def check(rounded_avg):\n\tassert rounded_avg(7, 13) == \"0b1010\"", "def check(rounded_avg):\n\tassert rounded_avg(555, 849) == '0b1010111110'", "def check(rounded_avg):\n\tassert rounded_avg(5, 5) == '0b101'", "def check(rounded_avg):\n\tassert rounded_avg(349, 902) == '0b1001110010'", "def check(rounded_avg):\n\tassert rounded_avg(966, 977) == '0b1111001100'", "def check(rounded_avg):\n\tassert rounded_avg(965, 980) == '0b1111001100'", "def check(rounded_avg):\n\tassert rounded_avg(193, 237) == '0b11010111'", "def check(rounded_avg):\n\tassert rounded_avg(960, 972) == '0b1111000110'", "def check(rounded_avg):\n\tassert rounded_avg(992, 1001) == '0b1111100100'", "def check(rounded_avg):\n\tassert rounded_avg(186, 549) == '0b101110000'", "def check(rounded_avg):\n\tassert rounded_avg(367, 500) == '0b110110010'", "def check(rounded_avg):\n\tassert rounded_avg(5, 3) == -1", "def check(rounded_avg):\n\tassert rounded_avg(362,496) == \"0b110101101\"", "def check(rounded_avg):\n\tassert rounded_avg(6, 4) == -1", "def check(rounded_avg):\n\tassert rounded_avg(357, 498) == '0b110101100'", "def check(rounded_avg):\n\tassert rounded_avg(1, 1) == '0b1'", "def check(rounded_avg):\n\tassert rounded_avg(197, 237) == '0b11011001'", "def check(rounded_avg):\n\tassert rounded_avg(365, 501) == '0b110110001'", "def check(rounded_avg):\n\tassert rounded_avg(3, 6) == '0b100'", "def check(rounded_avg):\n\tassert rounded_avg(7, 9) == '0b1000'", "def check(rounded_avg):\n\tassert rounded_avg(359, 491) == '0b110101001'", "def check(rounded_avg):\n\tassert rounded_avg(11, 18) == '0b1110'", "def check(rounded_avg):\n\tassert rounded_avg(197, 232) == '0b11010110'", "def check(rounded_avg):\n\tassert rounded_avg(189, 544) == '0b101101110'", "def check(rounded_avg):\n\tassert rounded_avg(4, 5) == '0b100'", "def check(rounded_avg):\n\tassert rounded_avg(347, 905) == '0b1001110010'", "def check(rounded_avg):\n\tassert rounded_avg(183, 546) == '0b101101100'", "def check(rounded_avg):\n\tassert rounded_avg(359, 495) == '0b110101011'", "def check(rounded_avg):\n\tassert rounded_avg(364, 498) == '0b110101111'", "def check(rounded_avg):\n\tassert rounded_avg(564, 847) == '0b1011000010'", "def check(rounded_avg):\n\tassert rounded_avg(4, 2) == -1", "def check(rounded_avg):\n\tassert rounded_avg(964, 973) == '0b1111001000'", "def check(rounded_avg):\n\tassert rounded_avg(562, 847) == '0b1011000000'", "def check(rounded_avg):\n\tassert rounded_avg(11, 11) == '0b1011'", "def check(rounded_avg):\n\tassert rounded_avg(192, 231) == '0b11010100'", "def check(rounded_avg):\n\tassert rounded_avg(12, 15) == '0b1110'", "def check(rounded_avg):\n\tassert rounded_avg(185, 542) == '0b101101100'", "def check(rounded_avg):\n\tassert rounded_avg(8, 10) == '0b1001'", "def check(rounded_avg):\n\tassert rounded_avg(3, 7) == '0b101'", "def check(rounded_avg):\n\tassert rounded_avg(992, 998) == '0b1111100011'", "def check(rounded_avg):\n\tassert rounded_avg(10, 13) == '0b1100'", "def check(rounded_avg):\n\tassert rounded_avg(194, 237) == '0b11011000'", "def check(rounded_avg):\n\tassert rounded_avg(355, 907) == '0b1001110111'", "def check(rounded_avg):\n\tassert rounded_avg(6, 6) == '0b110'", "def check(rounded_avg):\n\tassert rounded_avg(7, 5) == -1", "def check(rounded_avg):\n\tassert rounded_avg(994, 992) == -1", "def check(rounded_avg):\n\tassert rounded_avg(964,977) == \"0b1111001010\"", "def check(rounded_avg):\n\tassert rounded_avg(185,546) == \"0b101101110\"", "def check(rounded_avg):\n\tassert rounded_avg(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(rounded_avg):\n\tassert rounded_avg(197, 238) == '0b11011010'", "def check(rounded_avg):\n\tassert rounded_avg(9, 5) == -1", "def check(rounded_avg):\n\tassert rounded_avg(6, 2) == -1", "def check(rounded_avg):\n\tassert rounded_avg(180, 541) == '0b101101000'", "def check(rounded_avg):\n\tassert rounded_avg(969, 972) == '0b1111001010'", "def check(rounded_avg):\n\tassert rounded_avg(348, 902) == '0b1001110001'", "def check(rounded_avg):\n\tassert rounded_avg(187, 548) == '0b101110000'", "def check(rounded_avg):\n\tassert rounded_avg(4, 6) == '0b101'", "def check(rounded_avg):\n\tassert rounded_avg(993, 992) == -1", "def check(rounded_avg):\n\tassert rounded_avg(563, 852) == '0b1011000100'", "def check(rounded_avg):\n\tassert rounded_avg(3, 10) == '0b110'", "def check(rounded_avg):\n\tassert rounded_avg(11, 15) == '0b1101'", "def check(rounded_avg):\n\tassert rounded_avg(185, 546) == '0b101101110'", "def check(rounded_avg):\n\tassert rounded_avg(961, 980) == '0b1111001010'", "def check(rounded_avg):\n\tassert rounded_avg(180, 543) == '0b101101010'", "def check(rounded_avg):\n\tassert rounded_avg(5, 1) == -1", "def check(rounded_avg):\n\tassert rounded_avg(561, 849) == '0b1011000001'", "def check(rounded_avg):\n\tassert rounded_avg(995, 993) == -1", "def check(rounded_avg):\n\tassert rounded_avg(4, 15) == '0b1010'", "def check(rounded_avg):\n\tassert rounded_avg(8, 1) == -1", "def check(rounded_avg):\n\tassert rounded_avg(8, 3) == -1", "def check(rounded_avg):\n\tassert rounded_avg(4, 7) == '0b110'", "def check(rounded_avg):\n\tassert rounded_avg(964, 974) == '0b1111001001'", "def check(rounded_avg):\n\tassert rounded_avg(564, 850) == '0b1011000011'", "def check(rounded_avg):\n\tassert rounded_avg(555, 852) == '0b1011000000'", "def check(rounded_avg):\n\tassert rounded_avg(350, 903) == '0b1001110010'", "def check(rounded_avg):\n\tassert rounded_avg(355, 900) == '0b1001110100'", "def check(rounded_avg):\n\tassert rounded_avg(558, 852) == '0b1011000001'", "def check(rounded_avg):\n\tassert rounded_avg(996,997) == \"0b1111100100\"", "def check(rounded_avg):\n\tassert rounded_avg(968, 972) == '0b1111001010'", "def check(rounded_avg):\n\tassert rounded_avg(180, 546) == '0b101101011'", "def check(rounded_avg):\n\tassert rounded_avg(352, 900) == '0b1001110010'", "def check(rounded_avg):\n\tassert rounded_avg(352, 897) == '0b1001110000'", "def check(rounded_avg):\n\tassert rounded_avg(10, 15) == '0b1100'", "def check(rounded_avg):\n\tassert rounded_avg(991, 996) == '0b1111100010'", "def check(rounded_avg):\n\tassert rounded_avg(560,851) == \"0b1011000010\"", "def check(rounded_avg):\n\tassert rounded_avg(995, 999) == '0b1111100101'", "def check(rounded_avg):\n\tassert rounded_avg(991, 994) == '0b1111100000'", "def check(rounded_avg):\n\tassert rounded_avg(564, 848) == '0b1011000010'", "def check(rounded_avg):\n\tassert rounded_avg(6, 1) == -1"], "entry_point": "rounded_avg", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n", "completions": ["def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n", "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n", "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n", "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n", "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n", "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_avg = round(average)\n    \n    return bin(rounded_avg)\n", "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n", "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n", "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n", "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m\",\n      \"If n is greater than m, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation of the rounded average\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m, if so, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation of the rounded average\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m, if so, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation of the rounded average\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m, if true, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation of the rounded average\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m, if so, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary format\",\n      \"Return the binary representation of the rounded average\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m, if so, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation of the rounded average\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m, if so, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation of the rounded average\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_avg = round(average)\n    \n    return bin(rounded_avg)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m, if true, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation of the rounded average\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m, if true, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m, if so, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation of the rounded average\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the average of numbers from n to m\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"steps\": [\n      \"Check if n is greater than m\",\n      \"If n is greater than m, return -1\",\n      \"Calculate the sum of numbers from n to m\",\n      \"Calculate the average by dividing the sum by the count of numbers\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation of the rounded average\"\n    ]\n  }\n}", "Round_0": {"code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [119, 119, 119, 119, 119, 119, 119, 119, 119, 119], "passed": true, "passAt10": true, "nl": "You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    ", "func": "def rounded_avg(n, m):", "examples": "Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    ", "canonical_plan": ["{\n  \"high-level plan\": {\n    \"subproblems\": [\n      \"Check if n is greater than m\",\n      \"Calculate the sum of integers from n to m\",\n      \"Calculate the average of the sum\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\"\n    ],\n    \"major steps\": [\n      \"Check if n is greater than m\",\n      \"If n is greater than m, return -1\",\n      \"Calculate the sum of integers from n to m\",\n      \"Calculate the average of the sum\",\n      \"Round the average to the nearest integer\",\n      \"Convert the rounded average to binary\",\n      \"Return the binary representation\"\n    ]\n  }\n}"], "plan_score_gpt-35-turbo": [89.5, 95.0], "plan_score_gpt-4o": [95.0, 97.0], "mutate_method": "rephrase_one", "test_case_list": ["assert rounded_avg(7, 1) == -1", "assert rounded_avg(201, 228) == '0b11010110'", "assert rounded_avg(565, 856) == '0b1011000110'", "assert rounded_avg(3, 3) == '0b11'", "assert rounded_avg(2, 5) == '0b100'", "assert rounded_avg(7, 2) == -1", "assert rounded_avg(2, 3) == '0b10'", "assert rounded_avg(361, 495) == '0b110101100'", "assert rounded_avg(187, 545) == '0b101101110'", "assert rounded_avg(2, 2) == '0b10'", "assert rounded_avg(10, 7) == -1", "assert rounded_avg(969, 973) == '0b1111001011'", "assert rounded_avg(10, 2) == -1", "assert rounded_avg(1000, 992) == -1", "assert rounded_avg(9, 12) == '0b1010'", "assert rounded_avg(1000, 997) == -1", "assert rounded_avg(350,902) == \"0b1001110010\"", "assert rounded_avg(3, 5) == '0b100'", "assert rounded_avg(5, 5) == \"0b101\"", "assert rounded_avg(365, 492) == '0b110101100'", "assert rounded_avg(357, 500) == '0b110101100'", "assert rounded_avg(6, 10) == '0b1000'", "assert rounded_avg(1, 5) == \"0b11\"", "assert rounded_avg(5, 17) == '0b1011'", "assert rounded_avg(4, 8) == '0b110'", "assert rounded_avg(194, 238) == '0b11011000'", "assert rounded_avg(348, 904) == '0b1001110010'", "assert rounded_avg(198, 229) == '0b11010110'", "assert rounded_avg(2, 6) == '0b100'", "assert rounded_avg(959, 976) == '0b1111001000'", "assert rounded_avg(7, 13) == \"0b1010\"", "assert rounded_avg(555, 849) == '0b1010111110'", "assert rounded_avg(5, 5) == '0b101'", "assert rounded_avg(349, 902) == '0b1001110010'", "assert rounded_avg(966, 977) == '0b1111001100'", "assert rounded_avg(965, 980) == '0b1111001100'", "assert rounded_avg(193, 237) == '0b11010111'", "assert rounded_avg(960, 972) == '0b1111000110'", "assert rounded_avg(992, 1001) == '0b1111100100'", "assert rounded_avg(186, 549) == '0b101110000'", "assert rounded_avg(367, 500) == '0b110110010'", "assert rounded_avg(5, 3) == -1", "assert rounded_avg(362,496) == \"0b110101101\"", "assert rounded_avg(6, 4) == -1", "assert rounded_avg(357, 498) == '0b110101100'", "assert rounded_avg(1, 1) == '0b1'", "assert rounded_avg(197, 237) == '0b11011001'", "assert rounded_avg(365, 501) == '0b110110001'", "assert rounded_avg(3, 6) == '0b100'", "assert rounded_avg(7, 9) == '0b1000'", "assert rounded_avg(359, 491) == '0b110101001'", "assert rounded_avg(11, 18) == '0b1110'", "assert rounded_avg(197, 232) == '0b11010110'", "assert rounded_avg(189, 544) == '0b101101110'", "assert rounded_avg(4, 5) == '0b100'", "assert rounded_avg(347, 905) == '0b1001110010'", "assert rounded_avg(183, 546) == '0b101101100'", "assert rounded_avg(359, 495) == '0b110101011'", "assert rounded_avg(364, 498) == '0b110101111'", "assert rounded_avg(564, 847) == '0b1011000010'", "assert rounded_avg(4, 2) == -1", "assert rounded_avg(964, 973) == '0b1111001000'", "assert rounded_avg(562, 847) == '0b1011000000'", "assert rounded_avg(11, 11) == '0b1011'", "assert rounded_avg(192, 231) == '0b11010100'", "assert rounded_avg(12, 15) == '0b1110'", "assert rounded_avg(185, 542) == '0b101101100'", "assert rounded_avg(8, 10) == '0b1001'", "assert rounded_avg(3, 7) == '0b101'", "assert rounded_avg(992, 998) == '0b1111100011'", "assert rounded_avg(10, 13) == '0b1100'", "assert rounded_avg(194, 237) == '0b11011000'", "assert rounded_avg(355, 907) == '0b1001110111'", "assert rounded_avg(6, 6) == '0b110'", "assert rounded_avg(7, 5) == -1", "assert rounded_avg(994, 992) == -1", "assert rounded_avg(964,977) == \"0b1111001010\"", "assert rounded_avg(185,546) == \"0b101101110\"", "assert rounded_avg(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert rounded_avg(197, 238) == '0b11011010'", "assert rounded_avg(9, 5) == -1", "assert rounded_avg(6, 2) == -1", "assert rounded_avg(180, 541) == '0b101101000'", "assert rounded_avg(969, 972) == '0b1111001010'", "assert rounded_avg(348, 902) == '0b1001110001'", "assert rounded_avg(187, 548) == '0b101110000'", "assert rounded_avg(4, 6) == '0b101'", "assert rounded_avg(993, 992) == -1", "assert rounded_avg(563, 852) == '0b1011000100'", "assert rounded_avg(3, 10) == '0b110'", "assert rounded_avg(11, 15) == '0b1101'", "assert rounded_avg(185, 546) == '0b101101110'", "assert rounded_avg(961, 980) == '0b1111001010'", "assert rounded_avg(180, 543) == '0b101101010'", "assert rounded_avg(5, 1) == -1", "assert rounded_avg(561, 849) == '0b1011000001'", "assert rounded_avg(995, 993) == -1", "assert rounded_avg(4, 15) == '0b1010'", "assert rounded_avg(8, 1) == -1", "assert rounded_avg(8, 3) == -1", "assert rounded_avg(4, 7) == '0b110'", "assert rounded_avg(964, 974) == '0b1111001001'", "assert rounded_avg(564, 850) == '0b1011000011'", "assert rounded_avg(555, 852) == '0b1011000000'", "assert rounded_avg(350, 903) == '0b1001110010'", "assert rounded_avg(355, 900) == '0b1001110100'", "assert rounded_avg(558, 852) == '0b1011000001'", "assert rounded_avg(996,997) == \"0b1111100100\"", "assert rounded_avg(968, 972) == '0b1111001010'", "assert rounded_avg(180, 546) == '0b101101011'", "assert rounded_avg(352, 900) == '0b1001110010'", "assert rounded_avg(352, 897) == '0b1001110000'", "assert rounded_avg(10, 15) == '0b1100'", "assert rounded_avg(991, 996) == '0b1111100010'", "assert rounded_avg(560,851) == \"0b1011000010\"", "assert rounded_avg(995, 999) == '0b1111100101'", "assert rounded_avg(991, 994) == '0b1111100000'", "assert rounded_avg(564, 848) == '0b1011000010'", "assert rounded_avg(6, 1) == -1"], "save_node": false, "pass": true, "parent_index": 75, "round": 955}
