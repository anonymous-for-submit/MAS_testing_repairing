{"name": "1598_C. Delete Two Elements", "description": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "tags": ["data structures", "dp", "implementation", "math", "two pointers"], "difficulty": 9, "id": 1598, "sample_io": [{"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}], "test_list": [{"input": "1\n3\n228 1337 228\n", "output": ["0\n"]}, {"input": "1\n3\n228 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n2\n3\n"]}, {"input": "4\n4\n8 9 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n34 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 7\n", "output": ["6\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 1\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["0\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 9\n", "output": ["6\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 10\n5\n1 2 7 0 5\n7\n2 2 3 7 1 4 9\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 6\n5\n1 2 7 0 5\n7\n0 2 3 7 1 4 9\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 28 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n4\n8 8 5 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["0\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n4 2 3 7 1 4 7\n", "output": ["6\n0\n1\n3\n"]}, {"input": "4\n4\n5 8 11 8\n3\n9 24 10\n5\n1 4 2 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["2\n0\n2\n0\n"]}, {"input": "4\n4\n5 8 5 8\n3\n9 34 10\n5\n1 4 4 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["4\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 18 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 8 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 127\n", "output": ["0\n"]}, {"input": "1\n3\n40 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 9\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 0 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 -1 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n342 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 0 4 5 6 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 9\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 0\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 -1 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 8 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 3 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 14 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 103\n", "output": ["0\n"]}, {"input": "1\n3\n40 270 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 44\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 37 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 3\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n382 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 8\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 74\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n298 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n93 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 15\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 11\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 5\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 29 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n141 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 10 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 0\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 20\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 16\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 11 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n148 141 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 5\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n233 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 16\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 0\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 6 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 6 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n0 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 24 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 7 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 461 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 1 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 4 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 28\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 12\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}], "task_id": "codecontest/60", "prompt": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e. sum divided by n). Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "repair_prompt": ["Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e. sum divided by n). Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)\nmain()", "completions": ["def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        \n        # Calculate the sum of the array elements\n        total_sum = sum(a)\n        \n        # Calculate the mathematic mean of the array\n        mean = total_sum / n\n        \n        # Initialize the count of valid pairs\n        count = 0\n        \n        # Iterate through all possible pairs of positions [i, j]\n        for i in range(n):\n            for j in range(i + 1, n):\n                # Create a new array excluding the elements at positions i and j\n                new_array = a[:i] + a[i+1:j] + a[j+1:]\n                \n                # Calculate the sum of the new array\n                new_sum = sum(new_array)\n                \n                # Calculate the new mean\n                new_mean = new_sum / (n - 2)\n                \n                # Check if the new mean is equal to the original mean\n                if new_mean == mean:\n                    count += 1\n        \n        # Append the count of valid pairs to the results\n        results.append(count)\n    \n    # Print the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        \n        print(count)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        mean_a = sum(a) / n\n        count = 0\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                temp_a = a[:i] + a[i+1:j] + a[j+1:]\n                if sum(temp_a) / (n - 2) == mean_a:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean_value = total_sum / n\n        \n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                temp_sum = total_sum - a[i] - a[j]\n                if temp_sum / (n - 2) == mean_value:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)\nmain()", "def read_input():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n    return test_cases\n\ndef calculate_mean(a):\n    return sum(a) / len(a)\n\ndef count_valid_pairs(n, a):\n    mean = calculate_mean(a)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            temp_a = a[:i] + a[i+1:j] + a[j+1:]\n            if calculate_mean(temp_a) == mean:\n                count += 1\n    return count\n\ndef main():\n    test_cases = read_input()\n    results = []\n    for n, a in test_cases:\n        results.append(count_valid_pairs(n, a))\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        k = total_sum / n\n        \n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == k:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean_value = total_sum / n\n        \n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                temp_sum = total_sum - a[i] - a[j]\n                if temp_sum / (n - 2) == mean_value:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the input for each test case.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"For each test case, read the number of elements in the array.\",\n          \"Read the elements of the array.\"\n        ]\n      },\n      {\n        \"Description\": \"Calculate the mathematic mean of the array for each test case.\",\n        \"Tasks\": [\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean by dividing the sum by the number of elements.\"\n        ]\n      },\n      {\n        \"Description\": \"Find pairs of positions [i, j] such that deleting the elements at these positions keeps the mathematic mean unchanged.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j] where i < j.\",\n          \"Check if deleting the elements at positions i and j results in the remaining elements having the same mathematic mean as the original array.\"\n        ]\n      },\n      {\n        \"Description\": \"Output the number of valid pairs for each test case.\",\n        \"Tasks\": [\n          \"For each test case, output the count of valid pairs.\"\n        ]\n      }\n    ]\n  },\n  \"High-Level Plan\": {\n    \"Steps\": [\n      {\n        \"Description\": \"Initialize the main function to handle the input and output.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"Iterate through each test case.\"\n        ]\n      },\n      {\n        \"Description\": \"For each test case, read the array and compute the mathematic mean.\",\n        \"Tasks\": [\n          \"Read the number of elements in the array.\",\n          \"Read the elements of the array.\",\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean.\"\n        ]\n      },\n      {\n        \"Description\": \"Find and count the valid pairs for each test case.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j].\",\n          \"Check if deleting the elements at positions i and j results in the remaining elements having the same mathematic mean.\",\n          \"Count the valid pairs.\"\n        ]", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)"}}, "session_historys": [{"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the input for each test case.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"For each test case, read the number of elements in the array.\",\n          \"Read the elements of the array.\"\n        ]\n      },\n      {\n        \"Description\": \"Calculate the mathematic mean of the array for each test case.\",\n        \"Tasks\": [\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean by dividing the sum by the number of elements.\"\n        ]\n      },\n      {\n        \"Description\": \"Find pairs of positions [i, j] such that deleting the elements at these positions keeps the mathematic mean unchanged.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j] where i < j.\",\n          \"Check if deleting the elements at positions i and j results in the remaining elements having the same mathematic mean as the original array.\"\n        ]\n      },\n      {\n        \"Description\": \"Output the number of such pairs for each test case.\",\n        \"Tasks\": [\n          \"For each test case, output the count of valid pairs.\"\n        ]\n      }\n    ]\n  },\n  \"High-Level Plan\": {\n    \"Steps\": [\n      {\n        \"Description\": \"Initialize the main function to handle the input and output.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"Iterate through each test case.\"\n        ]\n      },\n      {\n        \"Description\": \"For each test case, read the array and compute the mathematic mean.\",\n        \"Tasks\": [\n          \"Read the number of elements in the array.\",\n          \"Read the elements of the array.\",\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean.\"\n        ]\n      },\n      {\n        \"Description\": \"Find and count the valid pairs for each test case.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j].\",\n          \"Check if deleting the elements at positions i and j results in the remaining elements having the same mathematic mean.\",\n          \"Count and store the valid pairs.\"\n", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        \n        # Calculate the sum of the array elements\n        total_sum = sum(a)\n        \n        # Calculate the mathematic mean of the array\n        mean = total_sum / n\n        \n        # Initialize the count of valid pairs\n        count = 0\n        \n        # Iterate through all possible pairs of positions [i, j]\n        for i in range(n):\n            for j in range(i + 1, n):\n                # Create a new array excluding the elements at positions i and j\n                new_array = a[:i] + a[i+1:j] + a[j+1:]\n                \n                # Calculate the sum of the new array\n                new_sum = sum(new_array)\n                \n                # Calculate the new mean\n                new_mean = new_sum / (n - 2)\n                \n                # Check if the new mean is equal to the original mean\n                if new_mean == mean:\n                    count += 1\n        \n        # Append the count of valid pairs to the results\n        results.append(count)\n    \n    # Print the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the input for each test case.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"For each test case, read the number of elements in the array.\",\n          \"Read the elements of the array.\"\n        ]\n      },\n      {\n        \"Description\": \"Calculate the mathematic mean of the array for each test case.\",\n        \"Tasks\": [\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean by dividing the sum by the number of elements.\"\n        ]\n      },\n      {\n        \"Description\": \"Find pairs of positions [i, j] such that deleting the elements at these positions keeps the mathematic mean unchanged.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j] where i < j.\",\n          \"Check if deleting the elements at positions i and j results in the remaining elements having the same mathematic mean as the original array.\"\n        ]\n      },\n      {\n        \"Description\": \"Output the number of valid pairs for each test case.\",\n        \"Tasks\": [\n          \"For each test case, count the number of valid pairs.\",\n          \"Output the count for each test case.\"\n        ]\n      }\n    ]\n  },\n  \"High-Level Plan\": {\n    \"Steps\": [\n      {\n        \"Description\": \"Initialize the main function to handle the input and output.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"Iterate through each test case.\"\n        ]\n      },\n      {\n        \"Description\": \"For each test case, read the array and compute the mathematic mean.\",\n        \"Tasks\": [\n          \"Read the number of elements in the array.\",\n          \"Read the elements of the array.\",\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean.\"\n        ]\n      },\n      {\n        \"Description\": \"Find and count the valid pairs for each test case.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j].\",\n          \"Check if deleting the elements at positions i and j results in the remaining elements having the same mathematic mean.\",", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        \n        print(count)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Subproblem\": \"Read Input\",\n        \"Details\": \"Read the number of test cases and for each test case, read the number of elements and the elements of the array.\"\n      },\n      {\n        \"Subproblem\": \"Calculate the Mean\",\n        \"Details\": \"For each test case, calculate the mean of the array.\"\n      },\n      {\n        \"Subproblem\": \"Find Pairs of Positions\",\n        \"Details\": \"For each test case, find all pairs of positions [i, j] (i < j) such that removing the elements at these positions results in the mean of the remaining elements being equal to the mean of the original array.\"\n      },\n      {\n        \"Subproblem\": \"Output the Result\",\n        \"Details\": \"For each test case, output the number of such pairs.\"\n      }\n    ],\n    \"HighLevelPlan\": [\n      {\n        \"Step\": \"Initialize the Result Counter\",\n        \"Details\": \"Initialize a counter to keep track of the number of valid pairs for each test case.\"\n      },\n      {\n        \"Step\": \"Iterate Over Each Test Case\",\n        \"Details\": \"Loop through each test case to process the array.\"\n      },\n      {\n        \"Step\": \"Calculate the Mean of the Array\",\n        \"Details\": \"Calculate the mean of the current array and store it for later use.\"\n      },\n      {\n        \"Step\": \"Find Valid Pairs\",\n        \"Details\": \"Iterate over all pairs of positions in the array and check if removing these elements results in the mean of the remaining elements being equal to the calculated mean.\"\n      },\n      {\n        \"Step\": \"Output the Result\",\n        \"Details\": \"After processing all test cases, output the number of valid pairs for each test case.\"\n      }\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        mean_a = sum(a) / n\n        count = 0\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                temp_a = a[:i] + a[i+1:j] + a[j+1:]\n                if sum(temp_a) / (n - 2) == mean_a:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and the details for each test case.\",\n        \"steps\": [\n          \"Read the first line to get the number of test cases.\",\n          \"For each test case, read the number of elements and the array elements.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the mean of the array for each test case.\",\n        \"steps\": [\n          \"For each test case, compute the mean of the array.\"\n        ]\n      },\n      {\n        \"description\": \"Find pairs of indices that can be removed to maintain the mean.\",\n        \"steps\": [\n          \"For each test case, iterate through all possible pairs of indices.\",\n          \"Check if removing the elements at these indices results in the mean of the remaining elements being equal to the computed mean.\"\n        ]\n      },\n      {\n        \"description\": \"Count the valid pairs of indices.\",\n        \"steps\": [\n          \"Count the number of pairs that meet the criteria.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize a counter for the number of valid pairs.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the array size and elements.\",\n      \"Calculate the mean of the array.\",\n      \"Iterate through all possible pairs of indices in the array.\",\n      \"Check if removing the elements at these indices maintains the mean.\",\n      \"Count the pairs that meet the criteria.\",\n      \"Output the count for each test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        mean_value = sum(a) / n\n        \n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                temp_a = a[:i] + a[i+1:j] + a[j+1:]\n                if sum(temp_a) / (n - 2) == mean_value:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: failed with AssertionError. "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean_value = total_sum / n\n        \n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                temp_sum = total_sum - a[i] - a[j]\n                if temp_sum / (n - 2) == mean_value:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the input for each test case.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"For each test case, read the number of elements in the array.\",\n          \"Read the elements of the array.\"\n        ]\n      },\n      {\n        \"Description\": \"Calculate the mathematic mean of the array for each test case.\",\n        \"Tasks\": [\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean by dividing the sum by the number of elements.\"\n        ]\n      },\n      {\n        \"Description\": \"Find pairs of positions [i, j] such that deleting the elements at these positions keeps the mathematic mean unchanged.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j] where i < j.\",\n          \"Check if deleting the elements at positions i and j results in the remaining elements having the same mathematic mean as the original array.\"\n        ]\n      },\n      {\n        \"Description\": \"Output the number of valid pairs for each test case.\",\n        \"Tasks\": [\n          \"For each test case, count the number of valid pairs.\",\n          \"Output the count for each test case.\"\n        ]\n      }\n    ]\n  },\n  \"High-Level Plan\": {\n    \"Steps\": [\n      {\n        \"Description\": \"Initialize the main function to handle the input and output.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"Iterate through each test case.\"\n        ]\n      },\n      {\n        \"Description\": \"For each test case, read the array and compute the mathematic mean.\",\n        \"Tasks\": [\n          \"Read the number of elements in the array.\",\n          \"Read the elements of the array.\",\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean.\"\n        ]\n      },\n      {\n        \"Description\": \"Find and count the valid pairs for each test case.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j].\",\n          \"Check if deleting the elements at positions i and j keeps the mathematic mean unchanged.\",\n          \"Count the", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)"}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Read Input\",\n      \"Description\": \"Implement a function to read the number of test cases and each test case's array size and elements from standard input.\"\n    },\n    {\n      \"Subproblem\": \"Calculate Mean\",\n      \"Description\": \"Implement a function to calculate the mean of the array elements for each test case.\"\n    },\n    {\n      \"Subproblem\": \"Count Valid Pairs\",\n      \"Description\": \"Implement a function to count the number of pairs [i, j] such that removing the elements at these positions keeps the mean of the remaining elements equal to the original mean.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize the program to read input from standard input.\",\n      \"Action\": \"Read the number of test cases.\"\n    },\n    {\n      \"Step\": \"For each test case:\",\n      \"Sub-steps\": [\n        {\n          \"Action\": \"Read the size of the array and the array elements.\"\n        },\n        {\n          \"Action\": \"Calculate the mean of the array elements.\"\n        },\n        {\n          \"Action\": \"Count the number of valid pairs [i, j] that can be removed to keep the mean unchanged.\"\n        },\n        {\n          \"Action\": \"Output the count of valid pairs for the current test case.\"\n        }\n      ]\n    },\n    {\n      \"Step\": \"Output the results for all test cases.\",\n      \"Action\": \"Print the count of valid pairs for each test case.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def read_input():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n    return test_cases\n\ndef calculate_mean(a):\n    return sum(a) / len(a)\n\ndef count_valid_pairs(n, a):\n    mean = calculate_mean(a)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            temp_a = a[:i] + a[i+1:j] + a[j+1:]\n            if calculate_mean(temp_a) == mean:\n                count += 1\n    return count\n\ndef main():\n    test_cases = read_input()\n    results = []\n    for n, a in test_cases:\n        results.append(count_valid_pairs(n, a))\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the input for each test case.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"For each test case, read the number of elements in the array.\",\n          \"Read the elements of the array.\"\n        ]\n      },\n      {\n        \"Description\": \"Calculate the mathematic mean of the array for each test case.\",\n        \"Tasks\": [\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean by dividing the sum by the number of elements.\"\n        ]\n      },\n      {\n        \"Description\": \"Find pairs of positions [i, j] such that deleting the elements at these positions keeps the mathematic mean unchanged.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j] where i < j.\",\n          \"Check if deleting the elements at positions i and j results in the remaining elements having the same mathematic mean as the original array.\"\n        ]\n      },\n      {\n        \"Description\": \"Output the number of valid pairs for each test case.\",\n        \"Tasks\": [\n          \"For each test case, count the number of valid pairs.\",\n          \"Output the count for each test case.\"\n        ]\n      }\n    ]\n  },\n  \"High-Level Plan\": {\n    \"Steps\": [\n      {\n        \"Description\": \"Initialize the main function to handle the input and output.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"Iterate through each test case.\"\n        ]\n      },\n      {\n        \"Description\": \"For each test case, read the array and compute the mathematic mean.\",\n        \"Tasks\": [\n          \"Read the number of elements in the array.\",\n          \"Read the elements of the array.\",\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean.\"\n        ]\n      },\n      {\n        \"Description\": \"Find and count the valid pairs for each test case.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j].\",\n          \"Check if deleting the elements at positions i and j keeps the mathematic mean unchanged.\",\n          \"Count the", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": {\n      \"Description\": \"Read the number of test cases and the details for each test case from standard input.\",\n      \"Tasks\": [\n        \"Read the number of test cases (t).\",\n        \"For each test case, read the number of elements (n) and the array elements.\"\n      ]\n    },\n    \"Subproblem2\": {\n      \"Description\": \"Calculate the mathematic mean (k) of the array for each test case.\",\n      \"Tasks\": [\n        \"For each test case, compute the sum of the array elements.\",\n        \"Calculate the mathematic mean (k) by dividing the sum by the number of elements (n).\"\n      ]\n    },\n    \"Subproblem3\": {\n      \"Description\": \"Determine the number of pairs [i, j] such that deleting elements at these positions keeps the mathematic mean unchanged.\",\n      \"Tasks\": [\n        \"For each pair of positions (i, j) where i < j, check if deleting the elements at these positions results in the remaining elements having the same mean as k.\",\n        \"Count all such valid pairs.\"\n      ]\n    }\n  },\n  \"High-Level Plan\": {\n    \"Steps\": [\n      \"Initialize a counter to keep track of the number of valid pairs.\",\n      \"Iterate over each test case.\",\n      \"For each test case, read the number of elements and the array.\",\n      \"Calculate the mathematic mean (k) of the array.\",\n      \"Iterate over all possible pairs of positions (i, j) where i < j.\",\n      \"For each pair, check if deleting the elements at positions i and j results in the remaining elements having the same mean as k.\",\n      \"If the condition is met, increment the counter.\",\n      \"After processing all test cases, print the total count of valid pairs.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        k = total_sum / n\n        \n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == k:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the input for each test case, including the number of elements and the array elements.\",\n    \"Subproblem2\": \"Calculate the mean of the array elements.\",\n    \"Subproblem3\": \"Iterate through all possible pairs of indices [i, j] where i < j and check if removing the elements at these indices results in the mean of the remaining elements being equal to the calculated mean.\",\n    \"Subproblem4\": \"Count and return the number of such pairs for each test case.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Initialize a counter to keep track of the number of valid pairs.\",\n    \"Step2\": \"Loop through each test case.\",\n    \"Step3\": \"For each test case, read the number of elements and the array elements.\",\n    \"Step4\": \"Calculate the mean of the array elements.\",\n    \"Step5\": \"Iterate through all possible pairs of indices [i, j] where i < j.\",\n    \"Step6\": \"Check if removing the elements at indices i and j results in the mean of the remaining elements being equal to the calculated mean.\",\n    \"Step7\": \"If the condition is met, increment the counter.\",\n    \"Step8\": \"After processing all pairs for the current test case, output the counter value.\",\n    \"Step9\": \"Repeat steps 2-8 for each test case.\"\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        mean_value = sum(a) / n\n        \n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                temp_a = a[:i] + a[i+1:j] + a[j+1:]\n                if sum(temp_a) / (n - 2) == mean_value:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: failed with AssertionError. "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean_value = total_sum / n\n        \n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                temp_sum = total_sum - a[i] - a[j]\n                if temp_sum / (n - 2) == mean_value:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the input for each test case.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"For each test case, read the number of elements in the array.\",\n          \"Read the elements of the array.\"\n        ]\n      },\n      {\n        \"Description\": \"Calculate the mathematic mean of the array for each test case.\",\n        \"Tasks\": [\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean by dividing the sum by the number of elements.\"\n        ]\n      },\n      {\n        \"Description\": \"Find pairs of positions [i, j] such that deleting the elements at these positions keeps the mathematic mean unchanged.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j] where i < j.\",\n          \"Check if deleting the elements at positions i and j results in the remaining elements having the same mathematic mean as the original array.\"\n        ]\n      },\n      {\n        \"Description\": \"Output the number of valid pairs for each test case.\",\n        \"Tasks\": [\n          \"For each test case, output the count of valid pairs.\"\n        ]\n      }\n    ]\n  },\n  \"High-Level Plan\": {\n    \"Steps\": [\n      {\n        \"Description\": \"Initialize the main function to handle the input and output.\",\n        \"Tasks\": [\n          \"Read the number of test cases.\",\n          \"Iterate through each test case.\"\n        ]\n      },\n      {\n        \"Description\": \"For each test case, read the array and compute the mathematic mean.\",\n        \"Tasks\": [\n          \"Read the number of elements in the array.\",\n          \"Read the elements of the array.\",\n          \"Compute the sum of the array elements.\",\n          \"Calculate the mathematic mean.\"\n        ]\n      },\n      {\n        \"Description\": \"Find and count the valid pairs for each test case.\",\n        \"Tasks\": [\n          \"Iterate through all possible pairs of positions [i, j].\",\n          \"Check if deleting the elements at positions i and j results in the remaining elements having the same mathematic mean.\",\n          \"Count the valid pairs.\"\n        ]", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                new_sum = total_sum - a[i] - a[j]\n                if new_sum / (n - 2) == mean:\n                    count += 1\n        print(count)"}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 87, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 8}
