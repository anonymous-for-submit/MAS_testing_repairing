{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower. Petya is a busy person. Sometimes, he forgets to water it. You are given n days from Petya's life and you need to ascertain what the outcome for his flower is at the end.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days consecutively, it dies.\n  * If the flower is watered on the i-th day, it grows by 1 centimeter.\n  * If the flower is watered on both the i-th and (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1.\n  * If the flower is not watered on the i-th day, it remains the same height.\n\nAt the start of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower. Petya is a busy person. Sometimes, he forgets to water it. You are given n days from Petya's life and you need to ascertain what the outcome for his flower is at the end.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two days consecutively, it dies.\n  * If the flower is watered on the i-th day, it grows by 1 centimeter.\n  * If the flower is watered on both the i-th and (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1.\n  * If the flower is not watered on the i-th day, it remains the same height.\n\nAt the start of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "completions": ["def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if died or (watering_schedule[-1] == 0 and watering_schedule[-2] == 0):\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower has been watered on consecutive days without interruption.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the final height of the flower or if it has died.\",\n        \"steps\": [\n          \"If the flower was not watered for two consecutive days, set the final height to -1.\",\n          \"Otherwise, output the final height of the flower.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"Print the results list containing the final heights or -1 for each test case.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases and the results list.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the number of days and the watering schedule.\",\n      \"Initialize the flower's height and set up variables to track watering status.\",\n      \"Iterate through each day to update the flower's height based on the watering schedule.\",\n      \"Check for consecutive non-watering days and determine if the flower has died.\",\n      \"Store the final height or -1 in the results list for each test case.\",\n      \"Output the results list after processing all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower has been watered for two consecutive days without a watering day in between.\"\n        ]\n      },\n      {\n        \"description\": \"Store the result for each test case and output the results.\",\n        \"steps\": [\n          \"If the flower has died, store -1 for that test case.\",\n          \"Otherwise, store the final height of the flower for that test case.\",\n          \"After processing all test cases, output the results list.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"Loop through each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day applying the growth rules.\",\n      \"  Check for consecutive non-watering days.\",\n      \"  Store the result for each test case.\",\n      \"Output the results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower has been watered for two consecutive days without a watering day in between.\"\n        ]\n      },\n      {\n        \"description\": \"Store the result for each test case and output the results.\",\n        \"steps\": [\n          \"If the flower has died, store -1 for that test case.\",\n          \"Otherwise, store the final height of the flower for that test case.\",\n          \"After processing all test cases, output the results list.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"Loop through each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day applying the growth rules.\",\n      \"  Check for consecutive non-watering days.\",\n      \"  Store the result for each test case.\",\n      \"Output the results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height after n days.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower was watered on consecutive days without interruption.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the outcome for each test case and store the result.\",\n        \"steps\": [\n          \"If the flower dies (not watered for two consecutive days), store -1.\",\n          \"Otherwise, store the final height of the flower.\",\n          \"Output the results for all test cases.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"Loop through each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day applying the growth rules.\",\n      \"  Check for consecutive non-watering days.\",\n      \"  Store the result for each test case.\",\n      \"Output the results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize a list to store the results of each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to update the flower's height based on the watering schedule and rules provided.\",\n          \"Check if the flower has died by not being watered for two consecutive days.\",\n          \"Store the result for the current test case.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"For each test case result, print it to standard output.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"Loop through each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day to update the flower's height.\",\n      \"  Check if the flower has died.\",\n      \"  Store the result.\",\n      \"Output the results for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height after n days.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower was watered on consecutive days without interruption.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the outcome for each test case and store the result.\",\n        \"steps\": [\n          \"If the flower dies (not watered for two consecutive days), store -1.\",\n          \"Otherwise, store the final height of the flower.\",\n          \"Output the results for all test cases.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"Loop through each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day applying the growth rules.\",\n      \"  Check for consecutive non-watering days.\",\n      \"  Store the result for each test case.\",\n      \"Output the results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize a list to store the results of each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower has died (not watered for two consecutive days) and set the result to -1 if true.\",\n          \"Store the final height of the flower for each test case in the results list.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"Print the results list for all test cases to standard output.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the results list.\",\n      \"Read the number of test cases.\",\n      \"Loop through each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day applying the growth rules.\",\n      \"  Check for flower death and set the result accordingly.\",\n      \"  Store the result.\",\n      \"Output the results list.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results of each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower has been watered for two consecutive days without a watering day in between.\"\n        ]\n      },\n      {\n        \"description\": \"Store the result for each test case and output the results.\",\n        \"steps\": [\n          \"If the flower has died, store -1 for that test case.\",\n          \"Otherwise, store the final height of the flower for that test case.\",\n          \"After processing all test cases, output the results list.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day applying the growth rules.\",\n      \"  Check for consecutive non-watering days.\",\n      \"  Store the result for each test case.\",\n      \"Output the results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results of each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower has been watered for two consecutive days without a watering day in between.\"\n        ]\n      },\n      {\n        \"description\": \"Store the result for each test case and output the results.\",\n        \"steps\": [\n          \"If the flower has died, store -1 for that test case.\",\n          \"Otherwise, store the final height of the flower for that test case.\",\n          \"After processing all test cases, output the results list.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"Loop through each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day applying the growth rules.\",\n      \"  Check for consecutive non-watering days.\",\n      \"  Store the result for each test case.\",\n      \"Output the results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if died or (watering_schedule[-1] == 0 and watering_schedule[-2] == 0):\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if died or (watering_schedule[-1] == 0 and watering_schedule[-2] == 0):\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize a list to store the results of each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to update the flower's height based on the watering schedule and growth rules.\",\n          \"Check if the flower has died by not being watered for two consecutive days.\",\n          \"Store the result for the current test case.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"For each test case result, print it to standard output.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"Loop through each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day to update the flower's height.\",\n      \"  Check if the flower has died.\",\n      \"  Store the result.\",\n      \"Output the results for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower has been watered on consecutive days without interruption.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the final height of the flower or if it has died.\",\n        \"steps\": [\n          \"If the flower was not watered for two consecutive days, set the final height to -1.\",\n          \"Otherwise, output the final height of the flower.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"Print the results list containing the final heights or -1 for each test case.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases and the results list.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the number of days and the watering schedule.\",\n      \"Initialize the flower's height and set up variables to track watering status.\",\n      \"Iterate through each day to update the flower's height based on the watering schedule.\",\n      \"Check for consecutive non-watering days and determine if the flower has died.\",\n      \"Store the final height or -1 in the results list for each test case.\",\n      \"Output the results list after processing all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if watering_schedule[i] == 0:\n                if i > 0 and watering_schedule[i-1] == 0:\n                    died = True\n                    break\n            else:\n                if i > 0 and watering_schedule[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 77, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 40}
