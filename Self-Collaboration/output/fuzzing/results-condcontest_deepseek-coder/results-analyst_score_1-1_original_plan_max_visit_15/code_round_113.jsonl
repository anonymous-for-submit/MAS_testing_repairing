{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower and being a busy person, he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower develops as follows: \n\n  * If the flower isn't watered for two consecutive days, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow.\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower and being a busy person, he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower develops as follows: \n\n  * If the flower isn't watered for two consecutive days, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow.\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif i > 0 and watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "completions": ["def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif i > 0 and watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5  # Grow by 5 centimeters if watered both days\n            elif watering_schedule[i] == 1:\n                height += 1  # Grow by 1 centimeter if watered on the current day\n            else:\n                height = -1  # Flower dies if not watered for two consecutive days\n                break\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif i > 0 and watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5  # Grow by 5 centimeters if watered both days.\n            elif i > 0 and watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break  # The flower dies if not watered for two consecutive days.\n            elif watering_schedule[i] == 1:\n                height += 1  # Grow by 1 centimeter if watered on the current day.\n        \n        results.append(-1 if died else height)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif i > 0 and watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule a_1, a_2, ..., a_n.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Initialize a variable to track if the flower has died (initially false).\",\n          \"Iterate through each day from 1 to n:\",\n          \"  If the flower is not watered for two consecutive days, set the death flag to true and break the loop.\",\n          \"  If the flower is watered on the i-th day, update the flower's height based on whether it was also watered on the (i-1)-th day.\",\n          \"  Append the final height of the flower or -1 if it has died to the results list.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"For each test case result in the results list, print it to standard output.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height and check for death.\",\n      \"  Update the flower's height based on the watering schedule.\",\n      \"  Append the result to the results list.\",\n      \"Output all results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif i > 0 and watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule a_1, a_2, ..., a_n.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Initialize a variable to track if the flower has died (initially false).\",\n          \"Iterate through each day from 1 to n:\",\n          \"  - Check if the flower was watered on the current day or the previous day.\",\n          \"  - Update the flower's height based on the watering schedule.\",\n          \"  - If the flower is not watered for two consecutive days, set the death flag to true and break the loop.\",\n          \"Store the final height or -1 if the flower has died in the results list.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"For each test case result, print it to standard output.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the number of test cases.\",\n      \"Read the number of test cases.\",\n      \"Loop through each test case:\",\n      \"  - Read the number of days and the watering schedule.\",\n      \"  - Initialize the flower's height and check for death.\",\n      \"  - Update the flower's height based on the watering schedule.\",\n      \"  - Check for consecutive non-watering days.\",\n      \"  - Store the result for each test case.\",\n      \"Output the results for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif i > 0 and watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif i > 0 and watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize a list to store the results of each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to update the flower's height based on the watering schedule and rules provided.\",\n          \"Check if the flower has died due to lack of watering on two consecutive days.\",\n          \"Store the result for the current test case.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"Print the results list for all test cases.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases and the results list.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the number of days and the watering schedule.\",\n      \"Initialize the flower's height and set a flag for consecutive unwatering days.\",\n      \"Iterate through each day to update the flower's height.\",\n      \"Check if the flower has died and store the result.\",\n      \"Output the results for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: failed with AssertionError. "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule a_1, a_2, ..., a_n.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower has been watered for two consecutive days without a watering in between.\",\n          \"If the flower dies, set the result for this test case to -1.\",\n          \"Otherwise, set the result to the final height of the flower.\",\n          \"Append the result to the results list.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"Print each result in the results list separated by a newline.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day to apply growth rules.\",\n      \"  Check for consecutive non-watering days.\",\n      \"  Store the result for each test case.\",\n      \"Output the results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # Initial height of the flower\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize a list to store the results of each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to update the flower's height based on the watering schedule and growth rules.\",\n          \"Check if the flower has died due to lack of watering on two consecutive days.\",\n          \"Store the result for the current test case.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"Print the results list for all test cases.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases and the results list.\",\n      \"Loop through each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day to update the flower's height.\",\n      \"  Check for flower death and store the result.\",\n      \"Output the results list.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 91)"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                results.append(-1)\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if not died:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule a_1, a_2, ..., a_n.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Initialize a variable to track if the flower has died (initially false).\",\n          \"Iterate through each day from 1 to n:\",\n          \"  - Check if the flower was watered on the current day or the previous day.\",\n          \"  - Update the flower's height based on the watering schedule.\",\n          \"  - If the flower is not watered for two consecutive days, set the death flag to true and break the loop.\",\n          \"Store the final height or -1 if the flower has died in the results list.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"For each test case result, print it to standard output.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"For each test case:\",\n      \"  - Read the number of days and the watering schedule.\",\n      \"  - Initialize the flower's height and check for death.\",\n      \"  - Update the flower's height based on the watering schedule.\",\n      \"  - Store the result for the current test case.\",\n      \"Output all results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5  # Grow by 5 centimeters if watered both days\n            elif watering_schedule[i] == 1:\n                height += 1  # Grow by 1 centimeter if watered on the current day\n            else:\n                height = -1  # Flower dies if not watered for two consecutive days\n                break\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5  # Grow by 5 centimeters if watered both days\n            elif watering_schedule[i] == 1:\n                height += 1  # Grow by 1 centimeter if watered on the current day\n            else:\n                height = -1  # Flower dies if not watered for two consecutive days\n                break\n        \n        results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to update the flower's height based on the watering schedule and rules provided.\",\n          \"Check if the flower has died due to lack of watering on two consecutive days.\",\n          \"Store the result for the current test case.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"Print the results list containing the flower's height or -1 for each test case.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases and the results list.\",\n      \"Loop through each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day to update the flower's height.\",\n      \"  Check for flower death condition.\",\n      \"  Store the result for the current test case.\",\n      \"Output the results list.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule a_1, a_2, ..., a_n.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Iterate through each day to apply the growth rules based on the watering schedule.\",\n          \"Check if the flower has been watered for two consecutive days without a watering in between.\",\n          \"If the flower dies, set the result for this test case to -1.\",\n          \"Otherwise, set the result to the final height of the flower.\",\n          \"Append the result to the results list.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"Print each result in the results list separated by a newline.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height.\",\n      \"  Iterate through each day to apply growth rules.\",\n      \"  Check for consecutive non-watering days.\",\n      \"  Store the result for each test case.\",\n      \"Output the results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1\n        died = False\n        \n        for i in range(1, n):\n            if watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break\n            elif watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule a_1, a_2, ..., a_n.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Initialize a variable to track if the flower has died (initially false).\",\n          \"Iterate through each day from 1 to n:\",\n          \"  - Check if the flower was watered on the current day or the previous day.\",\n          \"  - Update the flower's height based on the watering schedule.\",\n          \"  - If the flower is not watered for two consecutive days, set the death flag to true and break the loop.\",\n          \"Store the final height or -1 if the flower has died in the results list.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"For each test case result, print it to standard output.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the number of test cases.\",\n      \"Read the number of test cases.\",\n      \"Loop through each test case:\",\n      \"  - Read the number of days and the watering schedule.\",\n      \"  - Initialize the flower's height and check for death.\",\n      \"  - Update the flower's height based on the watering schedule.\",\n      \"  - Check for consecutive non-watering days.\",\n      \"  - Store the result for each test case.\",\n      \"Output the results for all test cases.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif i > 0 and watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 58)"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif i > 0 and watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule a_1, a_2, ..., a_n.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Initialize a variable to track if the flower has died (initially false).\",\n          \"Iterate through each day from 1 to n:\",\n          \"  - Check if the flower was watered on the current day or the previous day.\",\n          \"  - Update the flower's height based on the watering schedule.\",\n          \"  - If the flower is not watered for two consecutive days, set the death flag to true and break the loop.\",\n          \"Store the final height or -1 if the flower has died in the results list.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"For each test case result, print it to standard output.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"For each test case:\",\n      \"  - Read the number of days and the watering schedule.\",\n      \"  - Initialize the flower's height and check for death.\",\n      \"  - Update the flower's height based on the watering schedule.\",\n      \"  - Store the result.\",\n      \"Output all results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5  # Grow by 5 centimeters if watered both days.\n            elif i > 0 and watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break  # The flower dies if not watered for two consecutive days.\n            elif watering_schedule[i] == 1:\n                height += 1  # Grow by 1 centimeter if watered on the current day.\n        \n        results.append(-1 if died else height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: main() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 1 and watering_schedule[i-1] == 1:\n                height += 5  # Grow by 5 centimeters if watered both days.\n            elif i > 0 and watering_schedule[i] == 0 and watering_schedule[i-1] == 0:\n                died = True\n                break  # The flower dies if not watered for two consecutive days.\n            elif watering_schedule[i] == 1:\n                height += 1  # Grow by 1 centimeter if watered on the current day.\n        \n        results.append(-1 if died else height)\n    \n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases and initialize the results list.\",\n        \"steps\": [\n          \"Read the number of test cases t from standard input.\",\n          \"Initialize an empty list to store the results for each test case.\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to determine the flower's height or if it has died.\",\n        \"steps\": [\n          \"For each test case, read the number of days n and the watering schedule a_1, a_2, ..., a_n.\",\n          \"Initialize the flower's height to 1 centimeter.\",\n          \"Initialize a variable to track if the flower has died (initially false).\",\n          \"Iterate through each day from 1 to n:\",\n          \"  If the flower is not watered for two consecutive days, set the death flag to true and break the loop.\",\n          \"  If the flower is watered on the i-th day, update the flower's height based on whether it was also watered on the (i-1)-th day.\",\n          \"  Append the final height of the flower or -1 if it has died to the results list.\"\n        ]\n      },\n      {\n        \"description\": \"Output the results for all test cases.\",\n        \"steps\": [\n          \"For each test case result in the results list, print it to standard output.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Read the number of test cases.\",\n      \"Initialize a list to store the results.\",\n      \"For each test case:\",\n      \"  Read the number of days and the watering schedule.\",\n      \"  Initialize the flower's height and check for death.\",\n      \"  Update the flower's height based on the watering schedule.\",\n      \"  Append the result to the results list.\",\n      \"Output all results.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_schedule = list(map(int, input().split()))\n        \n        height = 1  # The flower starts at 1 centimeter tall.\n        died = False\n        \n        for i in range(n):\n            if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n                died = True\n                break\n            elif i > 0 and watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n                height += 5\n            elif watering_schedule[i] == 1:\n                height += 1\n        \n        if died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, true, false, false, true, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 113, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 80}
