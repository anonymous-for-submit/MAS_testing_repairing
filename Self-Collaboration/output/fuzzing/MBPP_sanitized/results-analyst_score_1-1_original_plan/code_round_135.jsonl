{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 432, "prompt": "Write a function to find the median length of a trapezium.\nA trapezium is a quadrilateral with at least one pair of parallel sides.", "code": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median", "test_imports": [], "test_list": ["assert median_trapezium(15,25,35)==20", "assert median_trapezium(10,20,30)==15", "assert median_trapezium(6,9,4)==7.5", "assert median_trapezium(20, 25, 31) == 22.5", "assert median_trapezium(12, 30, 31) == 21.0", "assert median_trapezium(19, 22, 30) == 20.5", "assert median_trapezium(13, 20, 37) == 16.5", "assert median_trapezium(13, 30, 40) == 21.5", "assert median_trapezium(17, 23, 38) == 20.0", "assert median_trapezium(10, 23, 39) == 16.5", "assert median_trapezium(12, 21, 40) == 16.5", "assert median_trapezium(19, 30, 39) == 24.5", "assert median_trapezium(11, 29, 30) == 20.0", "assert median_trapezium(10, 28, 31) == 19.0", "assert median_trapezium(16, 25, 32) == 20.5", "assert median_trapezium(12, 23, 38) == 17.5", "assert median_trapezium(15, 29, 34) == 22.0", "assert median_trapezium(20, 30, 32) == 25.0", "assert median_trapezium(20, 24, 30) == 22.0", "assert median_trapezium(15, 22, 35) == 18.5", "assert median_trapezium(18, 29, 32) == 23.5", "assert median_trapezium(11, 29, 31) == 20.0", "assert median_trapezium(13, 24, 30) == 18.5", "assert median_trapezium(13, 30, 35) == 21.5", "assert median_trapezium(17, 27, 32) == 22.0", "assert median_trapezium(16, 30, 30) == 23.0", "assert median_trapezium(13, 20, 34) == 16.5", "assert median_trapezium(15, 22, 36) == 18.5", "assert median_trapezium(12, 20, 34) == 16.0", "assert median_trapezium(16, 24, 39) == 20.0", "assert median_trapezium(13, 28, 30) == 20.5", "assert median_trapezium(15, 21, 33) == 18.0", "assert median_trapezium(13, 27, 40) == 20.0", "assert median_trapezium(13, 26, 31) == 19.5", "assert median_trapezium(17, 23, 36) == 20.0", "assert median_trapezium(13, 30, 38) == 21.5", "assert median_trapezium(13, 15, 32) == 14.0", "assert median_trapezium(5, 24, 33) == 14.5", "assert median_trapezium(5, 15, 35) == 10.0", "assert median_trapezium(9, 25, 28) == 17.0", "assert median_trapezium(10, 25, 34) == 17.5", "assert median_trapezium(9, 18, 35) == 13.5", "assert median_trapezium(15, 18, 33) == 16.5", "assert median_trapezium(6, 21, 28) == 13.5", "assert median_trapezium(8, 21, 31) == 14.5", "assert median_trapezium(13, 21, 30) == 17.0", "assert median_trapezium(11, 23, 29) == 17.0", "assert median_trapezium(8, 23, 35) == 15.5", "assert median_trapezium(12, 17, 25) == 14.5", "assert median_trapezium(12, 20, 34) == 16.0", "assert median_trapezium(13, 18, 32) == 15.5", "assert median_trapezium(8, 15, 27) == 11.5", "assert median_trapezium(14, 20, 26) == 17.0", "assert median_trapezium(14, 21, 25) == 17.5", "assert median_trapezium(9, 18, 32) == 13.5", "assert median_trapezium(5, 15, 32) == 10.0", "assert median_trapezium(15, 19, 30) == 17.0", "assert median_trapezium(14, 21, 30) == 17.5", "assert median_trapezium(7, 15, 32) == 11.0", "assert median_trapezium(15, 23, 25) == 19.0", "assert median_trapezium(9, 16, 34) == 12.5", "assert median_trapezium(14, 20, 26) == 17.0", "assert median_trapezium(10, 23, 33) == 16.5", "assert median_trapezium(11, 21, 34) == 16.0", "assert median_trapezium(7, 20, 29) == 13.5", "assert median_trapezium(15, 16, 27) == 15.5", "assert median_trapezium(11, 17, 25) == 14.0", "assert median_trapezium(7, 24, 25) == 15.5", "assert median_trapezium(10, 22, 28) == 16.0", "assert median_trapezium(9, 4, 4) == 6.5", "assert median_trapezium(11, 6, 6) == 8.5", "assert median_trapezium(7, 6, 2) == 6.5", "assert median_trapezium(1, 5, 7) == 3.0", "assert median_trapezium(9, 13, 5) == 11.0", "assert median_trapezium(4, 12, 9) == 8.0", "assert median_trapezium(10, 4, 5) == 7.0", "assert median_trapezium(3, 13, 2) == 8.0", "assert median_trapezium(3, 10, 4) == 6.5", "assert median_trapezium(3, 5, 1) == 4.0", "assert median_trapezium(5, 13, 9) == 9.0", "assert median_trapezium(2, 10, 8) == 6.0", "assert median_trapezium(8, 8, 5) == 8.0", "assert median_trapezium(11, 8, 8) == 9.5", "assert median_trapezium(2, 11, 6) == 6.5", "assert median_trapezium(2, 14, 8) == 8.0", "assert median_trapezium(7, 7, 8) == 7.0", "assert median_trapezium(4, 8, 3) == 6.0", "assert median_trapezium(8, 9, 7) == 8.5", "assert median_trapezium(5, 4, 3) == 4.5", "assert median_trapezium(2, 7, 8) == 4.5", "assert median_trapezium(10, 8, 3) == 9.0", "assert median_trapezium(9, 12, 7) == 10.5", "assert median_trapezium(11, 7, 9) == 9.0", "assert median_trapezium(6, 11, 2) == 8.5", "assert median_trapezium(8, 14, 1) == 11.0", "assert median_trapezium(5, 12, 5) == 8.5", "assert median_trapezium(1, 9, 4) == 5.0", "assert median_trapezium(7, 6, 8) == 6.5", "assert median_trapezium(2, 12, 2) == 7.0", "assert median_trapezium(4, 9, 9) == 6.5", "assert median_trapezium(6, 6, 6) == 6.0", "assert median_trapezium(4, 8, 4) == 6.0"], "entry_point": "median_trapezium", "completion": "from typing import *\ndef median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    if a == b or a == c:\n        return a\n    elif b == c:\n        return b\n    else:\n        return (a + b) / 2\n\n# Test the function\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "completions": ["from typing import *\ndef median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]):\n        return \"Invalid input: sides must be numeric\"\n    \n    if a == b or b == c or a == c:\n        return \"Invalid input: sides must form a trapezium\"\n    \n    parallel_sides = [a, b, c]\n    parallel_sides.remove(max(parallel_sides))\n    parallel_sides.remove(min(parallel_sides))\n    \n    return sum(parallel_sides) / 2\n\n# Test the function\nprint(median_trapezium(15, 25, 35))  # Output should be 20.0\n", "from typing import *\ndef median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    parallel_sides = [a, b, c]\n    parallel_sides.remove(max(parallel_sides))\n    parallel_sides.remove(min(parallel_sides))\n    \n    return sum(parallel_sides) / 2\n\n# Test the function with the example\nprint(median_trapezium(15, 25, 35))  # Output should be 20.0\n", "from typing import *\ndef median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    parallel_sides = [a, b, c]\n    parallel_sides.remove(max(parallel_sides))\n    parallel_sides.remove(min(parallel_sides))\n    \n    return sum(parallel_sides) / 2\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20.0\n", "from typing import *\ndef median_trapezium(a, b, c):\n    if a + b > c and abs(a - b) < c:\n        return (a + b) / 2\n    else:\n        return \"Invalid input, not a trapezium\"\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "from typing import *\ndef median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Please provide positive numeric values for the sides of the trapezium.\"\n    \n    parallel_sides = [a, b, c]\n    parallel_sides.remove(max(parallel_sides))\n    parallel_sides.remove(min(parallel_sides))\n    \n    median_length = sum(parallel_sides) / 2\n    return median_length\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20.0\n", "from typing import *\ndef is_trapezium(a, b, c):\n    if a == b or b == c:\n        return True\n    return False\n\ndef median_trapezium(a, b, c):\n    if is_trapezium(a, b, c):\n        return (a + b) / 2\n    else:\n        return \"Input values do not represent a trapezium\"\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "from typing import *\ndef median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    if a == b or a == c:\n        return a\n    elif b == c:\n        return b\n    else:\n        return (a + b) / 2\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "from typing import *\ndef median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    if a == b or a == c:\n        return a\n    elif b == c:\n        return b\n    else:\n        return (a + b) / 2\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "from typing import *\ndef median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    parallel_sides = [a, b, c]\n    parallel_sides.remove(max(parallel_sides))\n    parallel_sides.remove(min(parallel_sides))\n    \n    return sum(parallel_sides) / 2\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20.0\n", "from typing import *\ndef median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    if a == b or a == c:\n        return a\n    elif b == c:\n        return b\n    else:\n        return (a + b) / 2\n\n# Test the function\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median\",\n      \"Handle invalid inputs\"\n    ],\n    \"steps\": [\n      \"Check if the input values represent a trapezium with at least one pair of parallel sides\",\n      \"Calculate the length of the median using the formula: (a + b) / 2, where a and b are the lengths of the parallel sides\",\n      \"Return the calculated median length\",\n      \"Handle any invalid inputs such as non-numeric values or negative lengths\"\n    ]\n  }\n}", "Round_0": {"code": "def median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    if a == b or a == c:\n        return a\n    elif b == c:\n        return b\n    else:\n        return (a + b) / 2\n\n# Test the function\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median\",\n      \"Handle invalid inputs\"\n    ],\n    \"steps\": [\n      \"Identify the parallel sides of the trapezium using the input parameters\",\n      \"Calculate the length of the median by averaging the lengths of the parallel sides\",\n      \"Handle invalid inputs such as non-numeric inputs or sides that do not form a trapezium\"\n    ]\n  }\n}", "Round_0": {"code": "def median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]):\n        return \"Invalid input: sides must be numeric\"\n    \n    if a == b or b == c or a == c:\n        return \"Invalid input: sides must form a trapezium\"\n    \n    parallel_sides = [a, b, c]\n    parallel_sides.remove(max(parallel_sides))\n    parallel_sides.remove(min(parallel_sides))\n    \n    return sum(parallel_sides) / 2\n\n# Test the function\nprint(median_trapezium(15, 25, 35))  # Output should be 20.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median\",\n      \"Handle invalid inputs\"\n    ],\n    \"steps\": [\n      \"Identify the parallel sides of the trapezium using the input parameters\",\n      \"Calculate the length of the median by averaging the lengths of the parallel sides\",\n      \"Handle invalid inputs such as non-numeric values or negative lengths\"\n    ]\n  }\n}", "Round_0": {"code": "def median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    parallel_sides = [a, b, c]\n    parallel_sides.remove(max(parallel_sides))\n    parallel_sides.remove(min(parallel_sides))\n    \n    return sum(parallel_sides) / 2\n\n# Test the function with the example\nprint(median_trapezium(15, 25, 35))  # Output should be 20.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median\",\n      \"Handle invalid inputs\"\n    ],\n    \"steps\": [\n      \"Identify the parallel sides of the trapezium using the input parameters\",\n      \"Calculate the length of the median by averaging the lengths of the parallel sides\",\n      \"Handle invalid inputs such as non-numeric values or negative lengths\"\n    ]\n  }\n}", "Round_0": {"code": "def median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    parallel_sides = [a, b, c]\n    parallel_sides.remove(max(parallel_sides))\n    parallel_sides.remove(min(parallel_sides))\n    \n    return sum(parallel_sides) / 2\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median\",\n      \"Handle invalid inputs\"\n    ],\n    \"steps\": [\n      \"Check if the input values represent a trapezium\",\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median using the formula (a + b) / 2\",\n      \"Return the calculated median length\",\n      \"Handle invalid inputs by returning an error message\"\n    ]\n  }\n}", "Round_0": {"code": "def median_trapezium(a, b, c):\n    if a + b > c and abs(a - b) < c:\n        return (a + b) / 2\n    else:\n        return \"Invalid input, not a trapezium\"\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 15)"}, "Round_1": {"code": "def median_trapezium(a, b, c):\n    if a + b > c and abs(a - b) < c:\n        return (a + b) / 2\n    else:\n        return \"Invalid input, not a trapezium\"\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median\",\n      \"Handle invalid inputs\"\n    ],\n    \"steps\": [\n      \"Identify the parallel sides of the trapezium using the input parameters\",\n      \"Calculate the length of the median by averaging the lengths of the parallel sides\",\n      \"Handle invalid inputs such as non-numeric values or negative lengths\"\n    ]\n  }\n}", "Round_0": {"code": "def median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Please provide positive numeric values for the sides of the trapezium.\"\n    \n    parallel_sides = [a, b, c]\n    parallel_sides.remove(max(parallel_sides))\n    parallel_sides.remove(min(parallel_sides))\n    \n    median_length = sum(parallel_sides) / 2\n    return median_length\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the input values represent a trapezium\",\n      \"Calculate the median length of a trapezium\"\n    ],\n    \"steps\": [\n      \"Check if the input values satisfy the conditions of a trapezium\",\n      \"If the conditions are met, calculate the median length using the formula: (a + b) / 2, where a and b are the lengths of the parallel sides\",\n      \"Return the calculated median length\"\n    ]\n  }\n}", "Round_0": {"code": "def is_trapezium(a, b, c):\n    if a == b or b == c:\n        return True\n    return False\n\ndef median_trapezium(a, b, c):\n    if is_trapezium(a, b, c):\n        return (a + b) / 2\n    else:\n        return \"Input values do not represent a trapezium\"\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median\",\n      \"Handle invalid inputs\"\n    ],\n    \"steps\": [\n      \"Check if the input values represent a trapezium with at least one pair of parallel sides\",\n      \"Calculate the length of the median using the formula: (a + b) / 2, where a and b are the lengths of the parallel sides\",\n      \"Return the calculated median length\",\n      \"Handle any invalid inputs such as non-numeric values or negative lengths\"\n    ]\n  }\n}", "Round_0": {"code": "def median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    if a == b or a == c:\n        return a\n    elif b == c:\n        return b\n    else:\n        return (a + b) / 2\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median\",\n      \"Handle invalid inputs\"\n    ],\n    \"steps\": [\n      \"Check if the input values represent a trapezium with at least one pair of parallel sides\",\n      \"Calculate the length of the median using the formula: (a + b) / 2, where a and b are the lengths of the parallel sides\",\n      \"Return the calculated median length\",\n      \"Handle any invalid inputs such as non-numeric values or negative lengths\"\n    ]\n  }\n}", "Round_0": {"code": "def median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    if a == b or a == c:\n        return a\n    elif b == c:\n        return b\n    else:\n        return (a + b) / 2\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median\",\n      \"Handle invalid inputs\"\n    ],\n    \"steps\": [\n      \"Identify the parallel sides of the trapezium using the input parameters\",\n      \"Calculate the length of the median by averaging the lengths of the parallel sides\",\n      \"Handle invalid inputs such as non-numeric values or negative lengths\"\n    ]\n  }\n}", "Round_0": {"code": "def median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    parallel_sides = [a, b, c]\n    parallel_sides.remove(max(parallel_sides))\n    parallel_sides.remove(min(parallel_sides))\n    \n    return sum(parallel_sides) / 2\n\n# Test the function with the example provided\nprint(median_trapezium(15, 25, 35))  # Output should be 20.0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the parallel sides of the trapezium\",\n      \"Calculate the length of the median\",\n      \"Handle invalid inputs\"\n    ],\n    \"steps\": [\n      \"Check if the input values represent a trapezium with at least one pair of parallel sides\",\n      \"Calculate the length of the median using the formula: (a + b) / 2, where a and b are the lengths of the parallel sides\",\n      \"Return the calculated median length\",\n      \"Handle any invalid inputs such as non-numeric values or negative lengths\"\n    ]\n  }\n}", "Round_0": {"code": "def median_trapezium(a, b, c):\n    if not all(isinstance(side, (int, float)) for side in [a, b, c]) or any(side < 0 for side in [a, b, c]):\n        return \"Invalid input. Lengths must be non-negative numbers.\"\n    \n    if a == b or a == c:\n        return a\n    elif b == c:\n        return b\n    else:\n        return (a + b) / 2\n\n# Test the function\nprint(median_trapezium(15, 25, 35))  # Output should be 20\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(median_trapezium):\n\tassert median_trapezium(15,25,35)==20", "def check(median_trapezium):\n\tassert median_trapezium(10,20,30)==15", "def check(median_trapezium):\n\tassert median_trapezium(6,9,4)==7.5", "def check(median_trapezium):\n\tassert median_trapezium(20, 25, 31) == 22.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 30, 31) == 21.0", "def check(median_trapezium):\n\tassert median_trapezium(19, 22, 30) == 20.5", "def check(median_trapezium):\n\tassert median_trapezium(13, 20, 37) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(13, 30, 40) == 21.5", "def check(median_trapezium):\n\tassert median_trapezium(17, 23, 38) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(10, 23, 39) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 21, 40) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(19, 30, 39) == 24.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 29, 30) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(10, 28, 31) == 19.0", "def check(median_trapezium):\n\tassert median_trapezium(16, 25, 32) == 20.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 23, 38) == 17.5", "def check(median_trapezium):\n\tassert median_trapezium(15, 29, 34) == 22.0", "def check(median_trapezium):\n\tassert median_trapezium(20, 30, 32) == 25.0", "def check(median_trapezium):\n\tassert median_trapezium(20, 24, 30) == 22.0", "def check(median_trapezium):\n\tassert median_trapezium(15, 22, 35) == 18.5", "def check(median_trapezium):\n\tassert median_trapezium(18, 29, 32) == 23.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 29, 31) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 24, 30) == 18.5", "def check(median_trapezium):\n\tassert median_trapezium(13, 30, 35) == 21.5", "def check(median_trapezium):\n\tassert median_trapezium(17, 27, 32) == 22.0", "def check(median_trapezium):\n\tassert median_trapezium(16, 30, 30) == 23.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 20, 34) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(15, 22, 36) == 18.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 20, 34) == 16.0", "def check(median_trapezium):\n\tassert median_trapezium(16, 24, 39) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 28, 30) == 20.5", "def check(median_trapezium):\n\tassert median_trapezium(15, 21, 33) == 18.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 27, 40) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 26, 31) == 19.5", "def check(median_trapezium):\n\tassert median_trapezium(17, 23, 36) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 30, 38) == 21.5", "def check(median_trapezium):\n\tassert median_trapezium(13, 15, 32) == 14.0", "def check(median_trapezium):\n\tassert median_trapezium(5, 24, 33) == 14.5", "def check(median_trapezium):\n\tassert median_trapezium(5, 15, 35) == 10.0", "def check(median_trapezium):\n\tassert median_trapezium(9, 25, 28) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(10, 25, 34) == 17.5", "def check(median_trapezium):\n\tassert median_trapezium(9, 18, 35) == 13.5", "def check(median_trapezium):\n\tassert median_trapezium(15, 18, 33) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(6, 21, 28) == 13.5", "def check(median_trapezium):\n\tassert median_trapezium(8, 21, 31) == 14.5", "def check(median_trapezium):\n\tassert median_trapezium(13, 21, 30) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(11, 23, 29) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(8, 23, 35) == 15.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 17, 25) == 14.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 20, 34) == 16.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 18, 32) == 15.5", "def check(median_trapezium):\n\tassert median_trapezium(8, 15, 27) == 11.5", "def check(median_trapezium):\n\tassert median_trapezium(14, 20, 26) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(14, 21, 25) == 17.5", "def check(median_trapezium):\n\tassert median_trapezium(9, 18, 32) == 13.5", "def check(median_trapezium):\n\tassert median_trapezium(5, 15, 32) == 10.0", "def check(median_trapezium):\n\tassert median_trapezium(15, 19, 30) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(14, 21, 30) == 17.5", "def check(median_trapezium):\n\tassert median_trapezium(7, 15, 32) == 11.0", "def check(median_trapezium):\n\tassert median_trapezium(15, 23, 25) == 19.0", "def check(median_trapezium):\n\tassert median_trapezium(9, 16, 34) == 12.5", "def check(median_trapezium):\n\tassert median_trapezium(14, 20, 26) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(10, 23, 33) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 21, 34) == 16.0", "def check(median_trapezium):\n\tassert median_trapezium(7, 20, 29) == 13.5", "def check(median_trapezium):\n\tassert median_trapezium(15, 16, 27) == 15.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 17, 25) == 14.0", "def check(median_trapezium):\n\tassert median_trapezium(7, 24, 25) == 15.5", "def check(median_trapezium):\n\tassert median_trapezium(10, 22, 28) == 16.0", "def check(median_trapezium):\n\tassert median_trapezium(9, 4, 4) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 6, 6) == 8.5", "def check(median_trapezium):\n\tassert median_trapezium(7, 6, 2) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(1, 5, 7) == 3.0", "def check(median_trapezium):\n\tassert median_trapezium(9, 13, 5) == 11.0", "def check(median_trapezium):\n\tassert median_trapezium(4, 12, 9) == 8.0", "def check(median_trapezium):\n\tassert median_trapezium(10, 4, 5) == 7.0", "def check(median_trapezium):\n\tassert median_trapezium(3, 13, 2) == 8.0", "def check(median_trapezium):\n\tassert median_trapezium(3, 10, 4) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(3, 5, 1) == 4.0", "def check(median_trapezium):\n\tassert median_trapezium(5, 13, 9) == 9.0", "def check(median_trapezium):\n\tassert median_trapezium(2, 10, 8) == 6.0", "def check(median_trapezium):\n\tassert median_trapezium(8, 8, 5) == 8.0", "def check(median_trapezium):\n\tassert median_trapezium(11, 8, 8) == 9.5", "def check(median_trapezium):\n\tassert median_trapezium(2, 11, 6) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(2, 14, 8) == 8.0", "def check(median_trapezium):\n\tassert median_trapezium(7, 7, 8) == 7.0", "def check(median_trapezium):\n\tassert median_trapezium(4, 8, 3) == 6.0", "def check(median_trapezium):\n\tassert median_trapezium(8, 9, 7) == 8.5", "def check(median_trapezium):\n\tassert median_trapezium(5, 4, 3) == 4.5", "def check(median_trapezium):\n\tassert median_trapezium(2, 7, 8) == 4.5", "def check(median_trapezium):\n\tassert median_trapezium(10, 8, 3) == 9.0", "def check(median_trapezium):\n\tassert median_trapezium(9, 12, 7) == 10.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 7, 9) == 9.0", "def check(median_trapezium):\n\tassert median_trapezium(6, 11, 2) == 8.5", "def check(median_trapezium):\n\tassert median_trapezium(8, 14, 1) == 11.0", "def check(median_trapezium):\n\tassert median_trapezium(5, 12, 5) == 8.5", "def check(median_trapezium):\n\tassert median_trapezium(1, 9, 4) == 5.0", "def check(median_trapezium):\n\tassert median_trapezium(7, 6, 8) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(2, 12, 2) == 7.0", "def check(median_trapezium):\n\tassert median_trapezium(4, 9, 9) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(6, 6, 6) == 6.0", "def check(median_trapezium):\n\tassert median_trapezium(4, 8, 4) == 6.0"], "scores": [0.0, 0.0, 0.0, 0.5882, 0.0, 0.0784, 0.9216, 0.9216, 0.0, 0.9216], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [0, 0, 0, 60, 0, 8, 94, 94, 0, 94], "passed": false, "pass": false, "pass_num": 6, "round": 135, "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 135}
