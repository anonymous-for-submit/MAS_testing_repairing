{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 476, "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.", "code": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum", "test_imports": [], "test_list": ["assert big_sum([1,2,3]) == 4", "assert big_sum([-1,2,3,4]) == 3", "assert big_sum([2,3,6]) == 8", "assert big_sum([4, 6, 3]) == 9", "assert big_sum([5, 4, 5]) == 9", "assert big_sum([6, 6, 8]) == 14", "assert big_sum([4, 3, 3]) == 7", "assert big_sum([1, 2, 2]) == 3", "assert big_sum([2, 2, 3]) == 5", "assert big_sum([2, 7, 2]) == 9", "assert big_sum([3, 4, 5]) == 8", "assert big_sum([5, 5, 8]) == 13", "assert big_sum([3, 1, 3]) == 4", "assert big_sum([3, 1, 8]) == 9", "assert big_sum([6, 7, 6]) == 13", "assert big_sum([5, 1, 2]) == 6", "assert big_sum([2, 4, 5]) == 7", "assert big_sum([1, 4, 5]) == 6", "assert big_sum([6, 4, 7]) == 11", "assert big_sum([1, 1, 4]) == 5", "assert big_sum([1, 2, 1]) == 3", "assert big_sum([2, 4, 6]) == 8", "assert big_sum([3, 4, 3]) == 7", "assert big_sum([1, 5, 8]) == 9", "assert big_sum([5, 4, 3]) == 8", "assert big_sum([4, 4, 5]) == 9", "assert big_sum([1, 1, 6]) == 7", "assert big_sum([2, 2, 2]) == 4", "assert big_sum([4, 6, 8]) == 12", "assert big_sum([4, 7, 1]) == 8", "assert big_sum([3, 2, 4]) == 6", "assert big_sum([2, 4, 3]) == 6", "assert big_sum([6, 7, 4]) == 11", "assert big_sum([3, 2, 5]) == 7", "assert big_sum([5, 2, 5]) == 7", "assert big_sum([1, 5, 3]) == 6", "assert big_sum([-1, 3, 2, 4]) == 3", "assert big_sum([-1, 5, 2, 9]) == 8", "assert big_sum([2, 4, 2, 3]) == 6", "assert big_sum([0, 1, 7, 7]) == 7", "assert big_sum([-3, 3, 1, 8]) == 5", "assert big_sum([1, 4, 1, 9]) == 10", "assert big_sum([0, 3, 3, 7]) == 7", "assert big_sum([-3, 1, 4, 5]) == 2", "assert big_sum([4, 1, 5, 3]) == 6", "assert big_sum([4, 6, 7, 2]) == 9", "assert big_sum([3, 2, 8, 7]) == 10", "assert big_sum([4, 7, 3, 7]) == 10", "assert big_sum([1, 5, 6, 5]) == 7", "assert big_sum([4, 2, 1, 6]) == 7", "assert big_sum([-4, 6, 1, 3]) == 2", "assert big_sum([-6, 5, 2, 5]) == -1", "assert big_sum([-3, 4, 4, 3]) == 1", "assert big_sum([-6, 4, 4, 9]) == 3", "assert big_sum([-5, 2, 2, 7]) == 2", "assert big_sum([-5, 7, 6, 1]) == 2", "assert big_sum([-4, 5, 5, 2]) == 1", "assert big_sum([4, 7, 1, 1]) == 8", "assert big_sum([0, 3, 8, 3]) == 8", "assert big_sum([-3, 2, 8, 4]) == 5", "assert big_sum([4, 6, 8, 3]) == 11", "assert big_sum([2, 2, 4, 7]) == 9", "assert big_sum([2, 5, 3, 4]) == 7", "assert big_sum([-1, 2, 5, 6]) == 5", "assert big_sum([2, 2, 5, 7]) == 9", "assert big_sum([4, 6, 1, 6]) == 7", "assert big_sum([0, 4, 5, 9]) == 9", "assert big_sum([0, 1, 7, 6]) == 7", "assert big_sum([-6, 1, 5, 2]) == -1", "assert big_sum([3, 5, 4]) == 8", "assert big_sum([2, 6, 9]) == 11", "assert big_sum([2, 6, 9]) == 11", "assert big_sum([7, 8, 2]) == 10", "assert big_sum([3, 3, 8]) == 11", "assert big_sum([5, 4, 10]) == 14", "assert big_sum([3, 7, 6]) == 10", "assert big_sum([2, 3, 11]) == 13", "assert big_sum([1, 4, 3]) == 5", "assert big_sum([3, 4, 10]) == 13", "assert big_sum([6, 4, 5]) == 10", "assert big_sum([5, 2, 2]) == 7", "assert big_sum([1, 2, 6]) == 7", "assert big_sum([6, 8, 6]) == 14", "assert big_sum([3, 3, 3]) == 6", "assert big_sum([4, 1, 6]) == 7", "assert big_sum([6, 7, 4]) == 11", "assert big_sum([7, 7, 3]) == 10", "assert big_sum([1, 1, 2]) == 3", "assert big_sum([3, 7, 9]) == 12", "assert big_sum([1, 7, 11]) == 12", "assert big_sum([5, 5, 4]) == 9", "assert big_sum([7, 1, 5]) == 8", "assert big_sum([1, 6, 8]) == 9", "assert big_sum([6, 4, 11]) == 15", "assert big_sum([4, 8, 6]) == 12", "assert big_sum([2, 5, 6]) == 8", "assert big_sum([1, 1, 6]) == 7", "assert big_sum([7, 7, 3]) == 10", "assert big_sum([4, 1, 8]) == 9", "assert big_sum([6, 2, 8]) == 10", "assert big_sum([1, 3, 2]) == 4", "assert big_sum([6, 1, 10]) == 11"], "entry_point": "big_sum", "completion": "from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "completions": ["from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "from typing import *\ndef big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Create a function that takes an array as input\",\n      \"Find the largest value in the array\",\n      \"Find the smallest value in the array\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Create a function that takes an array as input\",\n      \"Find the largest value in the array\",\n      \"Find the smallest value in the array\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Create a function that takes an array as input\",\n      \"Find the largest value in the array\",\n      \"Find the smallest value in the array\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Create a function that takes an array as input\",\n      \"Find the largest value in the array\",\n      \"Find the smallest value in the array\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Create a function that takes an array as input\",\n      \"Find the largest value in the array\",\n      \"Find the smallest value in the array\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Create a function that takes an array as input\",\n      \"Find the largest value in the array\",\n      \"Find the smallest value in the array\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Define a function named big_sum that takes an array as input\",\n      \"Find the largest value in the array using a built-in function or loop\",\n      \"Find the smallest value in the array using a built-in function or loop\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Define a function called big_sum that takes an array as input\",\n      \"Find the largest value in the array\",\n      \"Find the smallest value in the array\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Create a function that takes an array as input\",\n      \"Find the largest value in the array\",\n      \"Find the smallest value in the array\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Define a function called big_sum that takes an array as input\",\n      \"Find the largest value in the array\",\n      \"Find the smallest value in the array\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Identify the largest value in the given array\",\n      \"Identify the smallest value in the given array\",\n      \"Calculate the sum of the largest and smallest values\"\n    ],\n    \"high-level steps\": [\n      \"Create a function that takes an array as input\",\n      \"Find the largest value in the array\",\n      \"Find the smallest value in the array\",\n      \"Calculate the sum of the largest and smallest values\",\n      \"Return the sum\"\n    ]\n  }\n}", "Round_0": {"code": "def big_sum(arr):\n    if not arr:\n        return 0\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    \n    return max_val + min_val\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(big_sum):\n\tassert big_sum([1,2,3]) == 4", "def check(big_sum):\n\tassert big_sum([-1,2,3,4]) == 3", "def check(big_sum):\n\tassert big_sum([2,3,6]) == 8", "def check(big_sum):\n\tassert big_sum([4, 6, 3]) == 9", "def check(big_sum):\n\tassert big_sum([5, 4, 5]) == 9", "def check(big_sum):\n\tassert big_sum([6, 6, 8]) == 14", "def check(big_sum):\n\tassert big_sum([4, 3, 3]) == 7", "def check(big_sum):\n\tassert big_sum([1, 2, 2]) == 3", "def check(big_sum):\n\tassert big_sum([2, 2, 3]) == 5", "def check(big_sum):\n\tassert big_sum([2, 7, 2]) == 9", "def check(big_sum):\n\tassert big_sum([3, 4, 5]) == 8", "def check(big_sum):\n\tassert big_sum([5, 5, 8]) == 13", "def check(big_sum):\n\tassert big_sum([3, 1, 3]) == 4", "def check(big_sum):\n\tassert big_sum([3, 1, 8]) == 9", "def check(big_sum):\n\tassert big_sum([6, 7, 6]) == 13", "def check(big_sum):\n\tassert big_sum([5, 1, 2]) == 6", "def check(big_sum):\n\tassert big_sum([2, 4, 5]) == 7", "def check(big_sum):\n\tassert big_sum([1, 4, 5]) == 6", "def check(big_sum):\n\tassert big_sum([6, 4, 7]) == 11", "def check(big_sum):\n\tassert big_sum([1, 1, 4]) == 5", "def check(big_sum):\n\tassert big_sum([1, 2, 1]) == 3", "def check(big_sum):\n\tassert big_sum([2, 4, 6]) == 8", "def check(big_sum):\n\tassert big_sum([3, 4, 3]) == 7", "def check(big_sum):\n\tassert big_sum([1, 5, 8]) == 9", "def check(big_sum):\n\tassert big_sum([5, 4, 3]) == 8", "def check(big_sum):\n\tassert big_sum([4, 4, 5]) == 9", "def check(big_sum):\n\tassert big_sum([1, 1, 6]) == 7", "def check(big_sum):\n\tassert big_sum([2, 2, 2]) == 4", "def check(big_sum):\n\tassert big_sum([4, 6, 8]) == 12", "def check(big_sum):\n\tassert big_sum([4, 7, 1]) == 8", "def check(big_sum):\n\tassert big_sum([3, 2, 4]) == 6", "def check(big_sum):\n\tassert big_sum([2, 4, 3]) == 6", "def check(big_sum):\n\tassert big_sum([6, 7, 4]) == 11", "def check(big_sum):\n\tassert big_sum([3, 2, 5]) == 7", "def check(big_sum):\n\tassert big_sum([5, 2, 5]) == 7", "def check(big_sum):\n\tassert big_sum([1, 5, 3]) == 6", "def check(big_sum):\n\tassert big_sum([-1, 3, 2, 4]) == 3", "def check(big_sum):\n\tassert big_sum([-1, 5, 2, 9]) == 8", "def check(big_sum):\n\tassert big_sum([2, 4, 2, 3]) == 6", "def check(big_sum):\n\tassert big_sum([0, 1, 7, 7]) == 7", "def check(big_sum):\n\tassert big_sum([-3, 3, 1, 8]) == 5", "def check(big_sum):\n\tassert big_sum([1, 4, 1, 9]) == 10", "def check(big_sum):\n\tassert big_sum([0, 3, 3, 7]) == 7", "def check(big_sum):\n\tassert big_sum([-3, 1, 4, 5]) == 2", "def check(big_sum):\n\tassert big_sum([4, 1, 5, 3]) == 6", "def check(big_sum):\n\tassert big_sum([4, 6, 7, 2]) == 9", "def check(big_sum):\n\tassert big_sum([3, 2, 8, 7]) == 10", "def check(big_sum):\n\tassert big_sum([4, 7, 3, 7]) == 10", "def check(big_sum):\n\tassert big_sum([1, 5, 6, 5]) == 7", "def check(big_sum):\n\tassert big_sum([4, 2, 1, 6]) == 7", "def check(big_sum):\n\tassert big_sum([-4, 6, 1, 3]) == 2", "def check(big_sum):\n\tassert big_sum([-6, 5, 2, 5]) == -1", "def check(big_sum):\n\tassert big_sum([-3, 4, 4, 3]) == 1", "def check(big_sum):\n\tassert big_sum([-6, 4, 4, 9]) == 3", "def check(big_sum):\n\tassert big_sum([-5, 2, 2, 7]) == 2", "def check(big_sum):\n\tassert big_sum([-5, 7, 6, 1]) == 2", "def check(big_sum):\n\tassert big_sum([-4, 5, 5, 2]) == 1", "def check(big_sum):\n\tassert big_sum([4, 7, 1, 1]) == 8", "def check(big_sum):\n\tassert big_sum([0, 3, 8, 3]) == 8", "def check(big_sum):\n\tassert big_sum([-3, 2, 8, 4]) == 5", "def check(big_sum):\n\tassert big_sum([4, 6, 8, 3]) == 11", "def check(big_sum):\n\tassert big_sum([2, 2, 4, 7]) == 9", "def check(big_sum):\n\tassert big_sum([2, 5, 3, 4]) == 7", "def check(big_sum):\n\tassert big_sum([-1, 2, 5, 6]) == 5", "def check(big_sum):\n\tassert big_sum([2, 2, 5, 7]) == 9", "def check(big_sum):\n\tassert big_sum([4, 6, 1, 6]) == 7", "def check(big_sum):\n\tassert big_sum([0, 4, 5, 9]) == 9", "def check(big_sum):\n\tassert big_sum([0, 1, 7, 6]) == 7", "def check(big_sum):\n\tassert big_sum([-6, 1, 5, 2]) == -1", "def check(big_sum):\n\tassert big_sum([3, 5, 4]) == 8", "def check(big_sum):\n\tassert big_sum([2, 6, 9]) == 11", "def check(big_sum):\n\tassert big_sum([2, 6, 9]) == 11", "def check(big_sum):\n\tassert big_sum([7, 8, 2]) == 10", "def check(big_sum):\n\tassert big_sum([3, 3, 8]) == 11", "def check(big_sum):\n\tassert big_sum([5, 4, 10]) == 14", "def check(big_sum):\n\tassert big_sum([3, 7, 6]) == 10", "def check(big_sum):\n\tassert big_sum([2, 3, 11]) == 13", "def check(big_sum):\n\tassert big_sum([1, 4, 3]) == 5", "def check(big_sum):\n\tassert big_sum([3, 4, 10]) == 13", "def check(big_sum):\n\tassert big_sum([6, 4, 5]) == 10", "def check(big_sum):\n\tassert big_sum([5, 2, 2]) == 7", "def check(big_sum):\n\tassert big_sum([1, 2, 6]) == 7", "def check(big_sum):\n\tassert big_sum([6, 8, 6]) == 14", "def check(big_sum):\n\tassert big_sum([3, 3, 3]) == 6", "def check(big_sum):\n\tassert big_sum([4, 1, 6]) == 7", "def check(big_sum):\n\tassert big_sum([6, 7, 4]) == 11", "def check(big_sum):\n\tassert big_sum([7, 7, 3]) == 10", "def check(big_sum):\n\tassert big_sum([1, 1, 2]) == 3", "def check(big_sum):\n\tassert big_sum([3, 7, 9]) == 12", "def check(big_sum):\n\tassert big_sum([1, 7, 11]) == 12", "def check(big_sum):\n\tassert big_sum([5, 5, 4]) == 9", "def check(big_sum):\n\tassert big_sum([7, 1, 5]) == 8", "def check(big_sum):\n\tassert big_sum([1, 6, 8]) == 9", "def check(big_sum):\n\tassert big_sum([6, 4, 11]) == 15", "def check(big_sum):\n\tassert big_sum([4, 8, 6]) == 12", "def check(big_sum):\n\tassert big_sum([2, 5, 6]) == 8", "def check(big_sum):\n\tassert big_sum([1, 1, 6]) == 7", "def check(big_sum):\n\tassert big_sum([7, 7, 3]) == 10", "def check(big_sum):\n\tassert big_sum([4, 1, 8]) == 9", "def check(big_sum):\n\tassert big_sum([6, 2, 8]) == 10", "def check(big_sum):\n\tassert big_sum([1, 3, 2]) == 4", "def check(big_sum):\n\tassert big_sum([6, 1, 10]) == 11"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 155, "mutate_method": "condense_two2one", "save_node": false, "parent_index": 155}
