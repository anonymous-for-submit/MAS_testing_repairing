{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "completion": "from typing import *\ndef sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    sorted_matrix = sorted(matrix, key=row_sum)\n    \n    return sorted_matrix\n\n# Test the function with the provided example\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "completions": ["from typing import *\ndef sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    sorted_matrix = sorted(matrix, key=row_sum)\n    \n    return sorted_matrix\n\n# Test the function with the provided example\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import *\ndef sort_matrix(matrix):\n    row_sums = [(sum(row), row) for row in matrix]\n    sorted_rows = [row for _, row in sorted(row_sums)]\n    return sorted_rows\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n", "from typing import *\ndef sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n", "from typing import *\ndef sort_matrix(matrix):\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    return sorted_matrix\n\n# Example\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n", "from typing import *\ndef sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nexample_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nsorted_example_matrix = sort_matrix(example_matrix)\nprint(sorted_example_matrix)\n", "from typing import *\ndef sort_matrix(matrix):\n    row_sums = [(sum(row), row) for row in matrix]\n    sorted_rows = [row for _, row in sorted(row_sums)]\n    return sorted_rows\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n", "from typing import *\ndef sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nexample_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nsorted_example_matrix = sort_matrix(example_matrix)\nprint(sorted_example_matrix)\n", "from typing import *\ndef sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    sorted_matrix = sorted(matrix, key=row_sum)\n    \n    return sorted_matrix\n\n# Test the function with the provided example\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with sorted rows\"\n    ],\n    \"steps\": [\n      \"Create a function to calculate the sum of each row in the matrix\",\n      \"Use the calculated sums to sort the rows in ascending order\",\n      \"Reconstruct the matrix with the sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    sorted_matrix = sorted(matrix, key=row_sum)\n    \n    return sorted_matrix\n\n# Test the function with the provided example\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 17)"}, "Round_1": {"code": "def sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    sorted_matrix = sorted(matrix, key=row_sum)\n    \n    return sorted_matrix\n\n# Test the function with the provided example\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with sorted rows\"\n    ],\n    \"high-level steps\": [\n      \"Create a function to calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums using a built-in sorting function\",\n      \"Reconstruct the matrix with sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with sorted rows\"\n    ],\n    \"high-level steps\": [\n      \"Create a function to calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums using a built-in sorting function\",\n      \"Reconstruct the matrix with sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with sorted rows\"\n    ],\n    \"steps\": [\n      \"Create a function to calculate the sum of each row in the matrix\",\n      \"Use the calculated sums to sort the rows in ascending order\",\n      \"Reconstruct the matrix with the sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    sorted_matrix = sorted(matrix, key=row_sum)\n    \n    return sorted_matrix\n\n# Test the function with the provided example\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 17)"}, "Round_1": {"code": "def sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    sorted_matrix = sorted(matrix, key=row_sum)\n    \n    return sorted_matrix\n\n# Test the function with the provided example\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with sorted rows\"\n    ],\n    \"steps\": [\n      \"Iterate through each row in the matrix and calculate the sum of each row\",\n      \"Sort the rows based on their sums in ascending order\",\n      \"Reconstruct the matrix with sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def sort_matrix(matrix):\n    row_sums = [(sum(row), row) for row in matrix]\n    sorted_rows = [row for _, row in sorted(row_sums)]\n    return sorted_rows\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 14)"}, "Round_1": {"code": "def sort_matrix(matrix):\n    row_sums = [(sum(row), row) for row in matrix]\n    sorted_rows = [row for _, row in sorted(row_sums)]\n    return sorted_rows\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with the sorted rows\"\n    ],\n    \"steps\": [\n      \"Create a function to calculate the sum of each row in the matrix\",\n      \"Use the calculated sums to sort the rows in ascending order\",\n      \"Reconstruct the matrix with the sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 15)"}, "Round_1": {"code": "def sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with the sorted rows\"\n    ],\n    \"steps\": [\n      \"Create a function to calculate the sum of a row in the matrix\",\n      \"Use the calculated sums to sort the rows in ascending order\",\n      \"Reconstruct the matrix with the sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def calculate_row_sum(row):\n    return sum(row)\n\ndef sort_matrix(matrix):\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    return sorted_matrix\n\n# Example\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 18)"}, "Round_1": {"code": "def sort_matrix(matrix):\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    return sorted_matrix\n\n# Example\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nsorted_matrix = sort_matrix(matrix)\nprint(sorted_matrix)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with sorted rows\"\n    ],\n    \"steps\": [\n      \"Create a function to calculate the sum of each row in the matrix\",\n      \"Use the calculated sums to sort the rows in ascending order\",\n      \"Reconstruct the matrix with the sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nexample_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nsorted_example_matrix = sort_matrix(example_matrix)\nprint(sorted_example_matrix)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with sorted rows\"\n    ],\n    \"steps\": [\n      \"Iterate through each row in the matrix and calculate the sum of each row\",\n      \"Sort the rows based on their sums using a sorting algorithm\",\n      \"Reconstruct the matrix with sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def sort_matrix(matrix):\n    row_sums = [(sum(row), row) for row in matrix]\n    sorted_rows = [row for _, row in sorted(row_sums)]\n    return sorted_rows\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 14)"}, "Round_1": {"code": "def sort_matrix(matrix):\n    row_sums = [(sum(row), row) for row in matrix]\n    sorted_rows = [row for _, row in sorted(row_sums)]\n    return sorted_rows\n\n# Test the function with the example provided\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with sorted rows\"\n    ],\n    \"high-level steps\": [\n      \"Create a function to calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums using a built-in sorting function\",\n      \"Reconstruct the matrix with sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def sort_matrix(matrix):\n    row_sums = [sum(row) for row in matrix]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in sorted_indices]\n    return sorted_matrix\n\n# Test the function with the example provided\nexample_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nsorted_example_matrix = sort_matrix(example_matrix)\nprint(sorted_example_matrix)\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the sum of each row in the matrix\",\n      \"Sort the rows based on their sums\",\n      \"Reconstruct the matrix with sorted rows\"\n    ],\n    \"steps\": [\n      \"Create a function to calculate the sum of each row in the matrix\",\n      \"Use the calculated sums to sort the rows in ascending order\",\n      \"Reconstruct the matrix with the sorted rows\"\n    ]\n  }\n}", "Round_0": {"code": "def sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    sorted_matrix = sorted(matrix, key=row_sum)\n    \n    return sorted_matrix\n\n# Test the function with the provided example\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 17)"}, "Round_1": {"code": "def sort_matrix(matrix):\n    def row_sum(row):\n        return sum(row)\n    \n    sorted_matrix = sorted(matrix, key=row_sum)\n    \n    return sorted_matrix\n\n# Test the function with the provided example\nprint(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"}}], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 1.0, 1.0, 0.9216, 1.0, 1.0, 1.0, 0.9216, 1.0, 1.0], "pass_results": [true, true, true, false, true, true, true, false, true, true], "pass_test_cases_num": [102, 102, 102, 94, 102, 102, 102, 94, 102, 102], "passed": true, "pass": true, "pass_num": 6, "round": 5, "mutate_method": "condense_two2one", "save_node": false, "parent_index": 5}
