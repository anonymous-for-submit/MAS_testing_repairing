{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 96, "prompt": "Write a python function to find the number of divisors of a given integer. Ensure your implementation can efficiently handle very large integers. Consider edge cases such as negative numbers and zero for a comprehensive solution.", "code": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "test_imports": [], "test_list": ["assert divisor(15) == 4 ", "assert divisor(12) == 6", "assert divisor(9) == 3", "assert divisor(11) == 2", "assert divisor(13) == 2", "assert divisor(12) == 6", "assert divisor(19) == 2", "assert divisor(15) == 4", "assert divisor(10) == 4", "assert divisor(14) == 4", "assert divisor(14) == 4", "assert divisor(13) == 2", "assert divisor(10) == 4", "assert divisor(16) == 5", "assert divisor(11) == 2", "assert divisor(20) == 6", "assert divisor(18) == 6", "assert divisor(14) == 4", "assert divisor(18) == 6", "assert divisor(10) == 4", "assert divisor(10) == 4", "assert divisor(17) == 2", "assert divisor(12) == 6", "assert divisor(16) == 5", "assert divisor(14) == 4", "assert divisor(16) == 5", "assert divisor(13) == 2", "assert divisor(20) == 6", "assert divisor(20) == 6", "assert divisor(19) == 2", "assert divisor(15) == 4", "assert divisor(11) == 2", "assert divisor(11) == 2", "assert divisor(13) == 2", "assert divisor(13) == 2", "assert divisor(19) == 2", "assert divisor(12) == 6", "assert divisor(8) == 4", "assert divisor(11) == 2", "assert divisor(13) == 2", "assert divisor(11) == 2", "assert divisor(10) == 4", "assert divisor(11) == 2", "assert divisor(12) == 6", "assert divisor(13) == 2", "assert divisor(17) == 2", "assert divisor(15) == 4", "assert divisor(14) == 4", "assert divisor(14) == 4", "assert divisor(9) == 3", "assert divisor(7) == 2", "assert divisor(15) == 4", "assert divisor(7) == 2", "assert divisor(9) == 3", "assert divisor(13) == 2", "assert divisor(7) == 2", "assert divisor(12) == 6", "assert divisor(15) == 4", "assert divisor(15) == 4", "assert divisor(14) == 4", "assert divisor(8) == 4", "assert divisor(11) == 2", "assert divisor(17) == 2", "assert divisor(9) == 3", "assert divisor(11) == 2", "assert divisor(9) == 3", "assert divisor(10) == 4", "assert divisor(15) == 4", "assert divisor(16) == 5", "assert divisor(8) == 4", "assert divisor(6) == 4", "assert divisor(14) == 4", "assert divisor(12) == 6", "assert divisor(9) == 3", "assert divisor(10) == 4", "assert divisor(10) == 4", "assert divisor(4) == 3", "assert divisor(10) == 4", "assert divisor(8) == 4", "assert divisor(13) == 2", "assert divisor(13) == 2", "assert divisor(4) == 3", "assert divisor(12) == 6", "assert divisor(14) == 4", "assert divisor(11) == 2", "assert divisor(13) == 2", "assert divisor(13) == 2", "assert divisor(4) == 3", "assert divisor(13) == 2", "assert divisor(5) == 2", "assert divisor(13) == 2", "assert divisor(11) == 2", "assert divisor(12) == 6", "assert divisor(12) == 6", "assert divisor(10) == 4", "assert divisor(7) == 2", "assert divisor(13) == 2", "assert divisor(6) == 4", "assert divisor(14) == 4", "assert divisor(11) == 2", "assert divisor(4) == 3", "assert divisor(8) == 4"], "entry_point": "divisor", "completion": "from typing import *\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i != i:\n                count += 1\n    \n    return count\n\n# Test the function with the example\nprint(divisor(15))  # Output: 4\n", "completions": ["from typing import *\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "from typing import *\nimport math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "from typing import *\nimport math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "from typing import *\nimport math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "from typing import *\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "from typing import *\nimport math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "from typing import *\nimport math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "from typing import *\nimport math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "from typing import *\nimport math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function with the example\nprint(divisor(15))  # Output should be 4\n", "from typing import *\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i != i:\n                count += 1\n    \n    return count\n\n# Test the function with the example\nprint(divisor(15))  # Output: 4\n"], "session_history": {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero as input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If the input is negative or zero, return an error message\",\n      \"Find all divisors of the input integer\",\n      \"Count the number of divisors found\",\n      \"Return the count of divisors\"\n    ]\n  }\n}", "Round_0": {"code": "def divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i != i:\n                count += 1\n    \n    return count\n\n# Test the function with the example\nprint(divisor(15))  # Output: 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 22)"}, "Round_1": {"code": "def divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i != i:\n                count += 1\n    \n    return count\n\n# Test the function with the example\nprint(divisor(15))  # Output: 4\n"}}, "session_historys": [{"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero as input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If the input is negative or zero, return an error message\",\n      \"Find all divisors of the input integer\",\n      \"Count the number of divisors found\",\n      \"Return the count of divisors\"\n    ]\n  }\n}", "Round_0": {"code": "def divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "def divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n"}}, {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero as input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If negative or zero, return appropriate message\",\n      \"If positive integer, find all divisors using a loop\",\n      \"Count the number of divisors found\",\n      \"Return the count of divisors\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n"}}, {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero as input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If negative or zero, return appropriate message\",\n      \"If positive integer, find all divisors using a loop\",\n      \"Count the number of divisors found\",\n      \"Return the count of divisors\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n"}}, {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If input is negative or zero, return an error message\",\n      \"Find all divisors of the input integer\",\n      \"Count the number of divisors found\",\n      \"Return the count of divisors\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n"}}, {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero as input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If the input is negative or zero, return an error message\",\n      \"Find all divisors of the input integer\",\n      \"Count the number of divisors found\",\n      \"Return the count of divisors\"\n    ]\n  }\n}", "Round_0": {"code": "def divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "def divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n"}}, {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero as input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If the input is negative or zero, return an error message\",\n      \"Find all divisors of the input integer\",\n      \"Count the number of divisors found\",\n      \"Return the count of divisors\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n"}}, {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero as input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If negative or zero, return appropriate message\",\n      \"If positive integer, find all divisors using a loop\",\n      \"Count the number of divisors found\",\n      \"Return the count of divisors\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n"}}, {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero as input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If the input is negative or zero, return an error message\",\n      \"If the input is positive, find all divisors of the integer\",\n      \"Count the number of divisors found and return the result\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function\nprint(divisor(15))  # Output: 4\n"}}, {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero as input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If the input is negative or zero, return an error message\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\",\n      \"Return the count of divisors\"\n    ]\n  }\n}", "Round_0": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function with the example\nprint(divisor(15))  # Output should be 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 31)"}, "Round_1": {"code": "import math\n\ndef divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    \n    return count\n\n# Test the function with the example\nprint(divisor(15))  # Output should be 4\n"}}, {"plan": "{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Handle negative numbers and zero as input\",\n      \"Implement a function to find all divisors of a given integer\",\n      \"Count the number of divisors found\"\n    ],\n    \"major_steps\": [\n      \"Check if the input integer is negative or zero\",\n      \"If the input is negative or zero, return an error message\",\n      \"Find all divisors of the input integer\",\n      \"Count the number of divisors found\",\n      \"Return the count of divisors\"\n    ]\n  }\n}", "Round_0": {"code": "def divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i != i:\n                count += 1\n    \n    return count\n\n# Test the function with the example\nprint(divisor(15))  # Output: 4\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 22)"}, "Round_1": {"code": "def divisor(n):\n    if n <= 0:\n        return \"Error: Input must be a positive integer\"\n    \n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if n // i != i:\n                count += 1\n    \n    return count\n\n# Test the function with the example\nprint(divisor(15))  # Output: 4\n"}}], "test": ["def check(divisor):\n\tassert divisor(15) == 4 ", "def check(divisor):\n\tassert divisor(12) == 6", "def check(divisor):\n\tassert divisor(9) == 3", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(12) == 6", "def check(divisor):\n\tassert divisor(19) == 2", "def check(divisor):\n\tassert divisor(15) == 4", "def check(divisor):\n\tassert divisor(10) == 4", "def check(divisor):\n\tassert divisor(14) == 4", "def check(divisor):\n\tassert divisor(14) == 4", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(10) == 4", "def check(divisor):\n\tassert divisor(16) == 5", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(20) == 6", "def check(divisor):\n\tassert divisor(18) == 6", "def check(divisor):\n\tassert divisor(14) == 4", "def check(divisor):\n\tassert divisor(18) == 6", "def check(divisor):\n\tassert divisor(10) == 4", "def check(divisor):\n\tassert divisor(10) == 4", "def check(divisor):\n\tassert divisor(17) == 2", "def check(divisor):\n\tassert divisor(12) == 6", "def check(divisor):\n\tassert divisor(16) == 5", "def check(divisor):\n\tassert divisor(14) == 4", "def check(divisor):\n\tassert divisor(16) == 5", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(20) == 6", "def check(divisor):\n\tassert divisor(20) == 6", "def check(divisor):\n\tassert divisor(19) == 2", "def check(divisor):\n\tassert divisor(15) == 4", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(19) == 2", "def check(divisor):\n\tassert divisor(12) == 6", "def check(divisor):\n\tassert divisor(8) == 4", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(10) == 4", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(12) == 6", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(17) == 2", "def check(divisor):\n\tassert divisor(15) == 4", "def check(divisor):\n\tassert divisor(14) == 4", "def check(divisor):\n\tassert divisor(14) == 4", "def check(divisor):\n\tassert divisor(9) == 3", "def check(divisor):\n\tassert divisor(7) == 2", "def check(divisor):\n\tassert divisor(15) == 4", "def check(divisor):\n\tassert divisor(7) == 2", "def check(divisor):\n\tassert divisor(9) == 3", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(7) == 2", "def check(divisor):\n\tassert divisor(12) == 6", "def check(divisor):\n\tassert divisor(15) == 4", "def check(divisor):\n\tassert divisor(15) == 4", "def check(divisor):\n\tassert divisor(14) == 4", "def check(divisor):\n\tassert divisor(8) == 4", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(17) == 2", "def check(divisor):\n\tassert divisor(9) == 3", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(9) == 3", "def check(divisor):\n\tassert divisor(10) == 4", "def check(divisor):\n\tassert divisor(15) == 4", "def check(divisor):\n\tassert divisor(16) == 5", "def check(divisor):\n\tassert divisor(8) == 4", "def check(divisor):\n\tassert divisor(6) == 4", "def check(divisor):\n\tassert divisor(14) == 4", "def check(divisor):\n\tassert divisor(12) == 6", "def check(divisor):\n\tassert divisor(9) == 3", "def check(divisor):\n\tassert divisor(10) == 4", "def check(divisor):\n\tassert divisor(10) == 4", "def check(divisor):\n\tassert divisor(4) == 3", "def check(divisor):\n\tassert divisor(10) == 4", "def check(divisor):\n\tassert divisor(8) == 4", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(4) == 3", "def check(divisor):\n\tassert divisor(12) == 6", "def check(divisor):\n\tassert divisor(14) == 4", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(4) == 3", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(5) == 2", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(12) == 6", "def check(divisor):\n\tassert divisor(12) == 6", "def check(divisor):\n\tassert divisor(10) == 4", "def check(divisor):\n\tassert divisor(7) == 2", "def check(divisor):\n\tassert divisor(13) == 2", "def check(divisor):\n\tassert divisor(6) == 4", "def check(divisor):\n\tassert divisor(14) == 4", "def check(divisor):\n\tassert divisor(11) == 2", "def check(divisor):\n\tassert divisor(4) == 3", "def check(divisor):\n\tassert divisor(8) == 4"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "passed": true, "pass": true, "pass_num": 10, "round": 271, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 273}
