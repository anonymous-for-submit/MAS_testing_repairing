{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string shown as multiple groups for nested parentheses divided by spaces. For every group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "entry_point": "parse_nested_parens", "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "test": ["def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()()) ((())) (((()))) (((()))) (()) ()\") == [3, 2, 3, 4, 4, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()) (()()) ((())) ((())()())\") == [3, 1, 2, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) ((())()()) (()) (()()) ((())) ((())) () () ((())()()) (()()) () (((()))) ((())()()) () (((()))) (((()))) ()\") == [4, 3, 3, 2, 2, 3, 3, 1, 1, 3, 2, 1, 4, 3, 1, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (((()))) ((())()()) (()()) () (((())))\") == [3, 4, 3, 2, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())) (()()) () () (()()) () ()\") == [2, 3, 2, 1, 1, 2, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) () ((())()()) () () ((())) ((())) (()()) () () (()())\") == [3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) ((())()()) ((())) (()()) () ((())()()) (()()) ((())()()) ((())) ((())) (()())\") == [3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()(())((()))) (((()))) ((())) (()) () ((())) ((())) (()()) ((())()()) (()()) () (()) (((()))) (()) ((())) (((()))) ((())) ((())()()) ((())()())\") == [3, 1, 4, 4, 3, 2, 1, 3, 3, 2, 3, 2, 1, 2, 4, 2, 3, 4, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) ((())()()) ((())()()) (()()) ((())) () () ((())) () () (()())\") == [3, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())) () () () () (()()) (()()) (()()) ((())()()) ()\") == [3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (()) ((())()()) () () ((())) ((())) (((()))) () (()()) (((())))\") == [2, 4, 2, 3, 1, 1, 3, 3, 4, 1, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())) ((())) ((())()())\") == [2, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())) (()) (()()) ((())()()) ((())()())\") == [2, 3, 2, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()) (()()) ((())) (((()))) () ((())()()) ((())) (()()) (()()) (()) ((())()())\") == [3, 2, 2, 3, 4, 1, 3, 3, 2, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () ((())()()) ((())()()) (((()))) ((())()()) (((())))\") == [3, 1, 3, 3, 4, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) (()) ((())) () () () (((()))) (()()) (()()) (((()))) (()) (()) (((())))\") == [4, 3, 2, 3, 1, 1, 1, 4, 2, 2, 4, 2, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()) (()()) (()()) (()()) ((())) (((()))) (()(())((()))) (()) () (((()))) (()) ((())) (())\") == [4, 2, 2, 2, 2, 3, 4, 4, 2, 1, 4, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) (()) (()()) (()()) (((()))) (()) (((()))) (()(())((()))) ((())) ((())) ((())()()) () (((())))\") == [2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 3, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())) (((()))) ((())()()) (()()) (()(())((()))) ((())()()) ((())) ((())) (()()) ((())()()) ((())) (()) (()(())((()))) () () (()(())((()))) (()()) (((()))) (((()))) ()\") == [4, 3, 4, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 1, 1, 4, 2, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())) ((())) ((())) (()) (()(())((()))) () ((())) (((()))) (()) ((())) ((())) () (()(())((())))\") == [4, 3, 3, 3, 2, 4, 1, 3, 4, 2, 3, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()()) () ((())) (()()) () ((())()()) ((())) ((())) ((())) ((())) ((()))\") == [3, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) ((())()()) () (((()))) ((())()()) ((())()()) (()()) (()()) (()) ((())) (()())\") == [2, 3, 3, 1, 4, 3, 3, 2, 2, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()(())((()))) (()) (()(())((()))) (((()))) (()(())((()))) (())\") == [3, 4, 2, 4, 4, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()) (()(())((()))) (()) (((()))) (((()))) ((())()())\") == [2, 2, 4, 2, 4, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) ((())()()) (((()))) (()(())((()))) ((())()())\") == [4, 4, 4, 3, 4, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) ((())()()) () ((())()()) (()()) () () ((())) (()()) ((())) ((())()())\") == [1, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()()) ((())()()) (()()) () () ((())) () ((())()()) (((()))) (((()))) ()\") == [2, 2, 3, 2, 1, 1, 3, 1, 3, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())()()) ((())) (()())\") == [2, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())()()) (()()) (()) ((())()()) (((()))) (((()))) ((())()()) ((())) ((())()()) () (()()) (()()) ((())()()) (()) ((())) ((())()())\") == [3, 3, 3, 2, 2, 3, 4, 4, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () (()()) (()())\") == [2, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) () ((())()()) (()()) (()()) () ((())) ((())) (()()) (((()))) (()())\") == [4, 3, 1, 3, 2, 2, 1, 3, 3, 2, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())()()) () ((())) (()()) ((())()()) (()())\") == [3, 3, 3, 1, 3, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())) ((())) ((())()()) () ((()))\") == [2, 3, 3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) (()()) () () ((())) ((())()()) ()\") == [2, 2, 2, 1, 1, 3, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()(())((()))) ((())()()) (()()) (((()))) ((())()()) ((())()())\") == [2, 4, 3, 2, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (((()))) (((()))) (()()) (((())))\") == [3, 1, 4, 4, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) () (()()) (((()))) ((())) (()()) () (()) (((()))) (()(())((()))) (((()))) (((()))) ()\") == [1, 3, 1, 2, 4, 3, 2, 1, 2, 4, 4, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())()()) () ((()))\") == [3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () ((()))\") == [2, 2, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (()) () (()) (())\") == [4, 1, 2, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())()()) () ((())) (()()) () () () () (()()) ((())) ((()))\") == [1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (()()) (()()) ((())()()) ((())) ((())) ((())()())\") == [3, 3, 2, 2, 3, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () ((())()()) (((()))) (()) (((()))) () ((())) (()()) (()) (((()))) (()())\") == [3, 1, 3, 4, 2, 4, 1, 3, 2, 2, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) ((())) () () () ((()))\") == [2, 2, 3, 1, 1, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (((()))) ((())()()) ((())) ((())()()) (())\") == [3, 4, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())) (()()) ((())()()) () () ()\") == [3, 3, 3, 2, 3, 1, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()()) ((())()()) (()()) () (()()) ((())) () () (()())\") == [2, 2, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (((()))) (()) (()) ((())) () ((())) ((())()()) ((())) (()) (()()) (((())))\") == [2, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (((()))) () (()()) ((())()()) () (()(())((()))) (()(())((()))) (()()) () (()()) (()) (()) ((())()())\") == [4, 4, 1, 2, 3, 1, 4, 4, 2, 1, 2, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (((()))) ((())) ((())) ((())) ((())()()) ((())()()) (()()) () () (()(())((()))) ((())) ((())()()) (()(())((()))) () ((())()()) (((()))) (((()))) (()(())((()))) ((())()()) ()\") == [3, 4, 3, 3, 3, 3, 3, 2, 1, 1, 4, 3, 3, 4, 1, 3, 4, 4, 4, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) ((())()()) ((())) () (()()) () (()())\") == [1, 3, 3, 3, 1, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()()) () (()()) ((())()()) ((())) ((())) (()) ((())()()) () ((())()()) (()()) () (()) ((())) (()()) (()()) ((())()())\") == [2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (((()))) (()) (()()) (((()))) () (((()))) (()) ((())) () ()\") == [2, 4, 4, 2, 2, 4, 1, 4, 2, 3, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (((()))) (()()) (((()))) ((())) ((())()()) (()) ((())()()) (((()))) (()()) () (()) (((()))) () (()(())((()))) () (()) (()(())((()))) ((())) ((())()())\") == [2, 4, 4, 2, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 1, 4, 1, 2, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() (()(())((()))) (()) (()()) ((())()()) (()()) (()())\") == [1, 4, 2, 2, 3, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()(())((()))) (()()) (()()) ((())()()) (()()) ((())) () () (()()) (()(())((()))) ((())()()) (()()) ((())()()) (((()))) (()(())((()))) (()()) () ((())()()) ((())()()) ()\") == [3, 4, 2, 2, 3, 2, 3, 1, 1, 2, 4, 3, 2, 3, 4, 4, 2, 1, 3, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () () (()()) (()()) (()()) ((())) (()())\") == [3, 1, 1, 2, 2, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())()()) (()()) (()) ((())()()) () (((()))) ((())()()) () (()) (()) ((())()()) (()) (()) (()) ((())) ((())) (((())))\") == [1, 3, 2, 2, 3, 1, 4, 3, 1, 2, 2, 3, 2, 2, 2, 3, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) () (()(())((()))) (()) (((()))) ((())()()) ((())()()) ((())) ((())()()) (()(())((()))) ((())) (()(())((()))) ((())) ((())()())\") == [4, 1, 4, 2, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) () (()) (()) ((())) (()()) () () ((())()()) (()) ((()))\") == [2, 4, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) (()()) ((())()()) (((()))) (()()) (()(())((()))) (()()) (()(())((()))) ((())) (()) ((())) (()()) (()) (()()) () ((())) ((())) ((())) ((())) (()())\") == [2, 3, 2, 3, 4, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) ((())) ((())()()) ((())) () ()\") == [3, 3, 3, 3, 3, 3, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) () ((())()())\") == [3, 2, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () (()()) ((())) (()()) () ((())()()) ((()))\") == [3, 1, 2, 3, 2, 1, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (()) (((()))) ((())) (()) ((())()()) ((())()()) () ((())()()) (()) ((())()())\") == [4, 1, 2, 4, 3, 2, 3, 3, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () (()()) ((())) ((())()()) ((())()())\") == [3, 1, 2, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () ((())) () (()()) ((())) ((())()()) () () ((())()()) () (()())\") == [3, 1, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) (()()) (((()))) () ((())) (((()))) () (()) () () ((())()()) (()) (()()) ((())) (((()))) (()) (())\") == [1, 3, 2, 4, 1, 3, 4, 1, 2, 1, 1, 3, 2, 2, 3, 4, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () ((())()()) ((())()()) ((())) () ((())()()) ((())) () ((())()()) (()()) (()())\") == [3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() (()()) ((())()()) (()(())((()))) (((()))) (()(())((()))) ((())()()) (()) (()()) (((()))) (()) (()) (()()) (((()))) (((()))) () (()) ((())) () (()) (()())\") == [1, 2, 3, 4, 4, 4, 3, 2, 2, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (((()))) (()()) ((())) () (()()) (((()))) (()()) (((()))) () ()\") == [4, 1, 4, 2, 3, 1, 2, 4, 2, 4, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) () (()) () ((())) (()) (()()) (((()))) ((())) () () (()) () () (()) () ((())) (()(())((()))) ((()))\") == [4, 4, 4, 1, 2, 1, 3, 2, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()) (()()) ((())()()) (()) (()()) ((())) (()()) (()(())((()))) (()(())((()))) ((())()()) ((())) (((()))) (()(())((()))) ((())) ((())) (()(())((()))) () ((())) ((())) ((())()())\") == [2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 1, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()) ((())()()) (()()) ((())) (()) () () (((()))) (((()))) (())\") == [3, 1, 2, 3, 2, 3, 2, 1, 1, 4, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"\") == []", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()) (()()) ((())) () ((())) ((())()()) () () (()) (()) (((()))) (((()))) ((())) () () (()()) (())\") == [3, 2, 2, 3, 1, 3, 3, 1, 1, 2, 2, 4, 4, 3, 1, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())()()) ((())) (()()) ((())()()) () (()()) ((()))\") == [3, 3, 3, 2, 3, 1, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())()()) ((())()()) ((())) (()()) ((())) ((())()()) ((())()()) ((())()()) () ((())) (()())\") == [3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()) () (((()))) ((())()()) ((())()()) (((()))) (()) (((()))) () (((()))) ((())()()) (()()) (()) (()) (()) () (())\") == [3, 2, 1, 4, 3, 3, 4, 2, 4, 1, 4, 3, 2, 2, 2, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) ((())()()) ((())()()) () ((()))\") == [2, 2, 3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () ((())()()) () ((())) () ((())) ()\") == [2, 1, 3, 1, 3, 1, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()()) ()\") == [3, 1, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (()()) ((())()()) () ((())()()) ((())()()) ((())) (()()) ((())) () ((())()())\") == [3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () (()()) ((())) () ((())()()) (()()) ((())()())\") == [2, 1, 2, 3, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()) () ((())()()) (()()) () (()()) (()(())((()))) (()(())((()))) ((())) (((()))) (()(())((()))) ((())()()) ()\") == [4, 2, 1, 3, 2, 1, 2, 4, 4, 3, 4, 4, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()())\") == [2, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (((()))) (()) (()()) (()()) () ((())) ((())()()) () (()(())((()))) (()()) (()(())((()))) ((()))\") == [3, 3, 4, 2, 2, 2, 1, 3, 3, 1, 4, 2, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()) () (()()) (()) (()) (((()))) () (()()) (())\") == [2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('(()(())((())))') == [4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()) (((()))) () (()()) (((()))) ((())()()) ((())) (()()) ((())()()) (((()))) ((())) (()) ((())) ((())) () ((())) ((())()())\") == [3, 2, 4, 1, 2, 4, 3, 3, 2, 3, 4, 3, 2, 3, 3, 1, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) (()) ((())) ((())) ((())()()) (((()))) () ((())()()) (()(())((()))) ((())) ((())()()) ((())()()) (())\") == [2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())()()) (()()) ()\") == [2, 3, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())()()) (((()))) (()(())((()))) () (()(())((()))) ()\") == [4, 3, 4, 4, 1, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) () ((())) ((())) (()()) ((())()()) (((()))) () (()) (((())))\") == [3, 3, 3, 1, 3, 3, 2, 3, 4, 1, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (((()))) ((())) (()()) (()()) ((())()()) (()) (()(())((()))) (()) ((())) (()) ((())) () (((())))\") == [3, 4, 3, 2, 2, 3, 2, 4, 2, 3, 2, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) (()()) () (()(())((()))) (()()) (((()))) (((()))) ((())()()) (()()) () () ((())) (((()))) (()(())((()))) (((()))) ((())()()) ((())) (()(())((()))) (())\") == [3, 3, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 1, 3, 4, 4, 4, 3, 3, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) () (((()))) () (((()))) (()()) (()) (((()))) (()(())((()))) (((()))) () (()()) (()(())((()))) (()()) (()(())((()))) (()()) (((()))) (()()) (((()))) (()) (()())\") == [2, 1, 4, 1, 4, 2, 2, 4, 4, 4, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2]"], "test_case_list": ["assert parse_nested_parens(\"((())()()) (()()) ((())) (((()))) (((()))) (()) ()\") == [3, 2, 3, 4, 4, 2, 1]", "assert parse_nested_parens(\"((())) () (()) (()()) ((())) ((())()())\") == [3, 1, 2, 2, 3, 3]", "assert parse_nested_parens(\"(((()))) ((())) ((())()()) (()) (()()) ((())) ((())) () () ((())()()) (()()) () (((()))) ((())()()) () (((()))) (((()))) ()\") == [4, 3, 3, 2, 2, 3, 3, 1, 1, 3, 2, 1, 4, 3, 1, 4, 4, 1]", "assert parse_nested_parens(\"((())) (((()))) ((())()()) (()()) () (((())))\") == [3, 4, 3, 2, 1, 4]", "assert parse_nested_parens(\"(()()) ((())) (()()) () () (()()) () ()\") == [2, 3, 2, 1, 1, 2, 1, 1]", "assert parse_nested_parens(\"((())) (()()) () ((())()()) () () ((())) ((())) (()()) () () (()())\") == [3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2]", "assert parse_nested_parens(\"((())) (()()) ((())()()) ((())) (()()) () ((())()()) (()()) ((())()()) ((())) ((())) (()())\") == [3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2]", "assert parse_nested_parens(\"((())) () (()(())((()))) (((()))) ((())) (()) () ((())) ((())) (()()) ((())()()) (()()) () (()) (((()))) (()) ((())) (((()))) ((())) ((())()()) ((())()())\") == [3, 1, 4, 4, 3, 2, 1, 3, 3, 2, 3, 2, 1, 2, 4, 2, 3, 4, 3, 3, 3]", "assert parse_nested_parens(\"((())) (()()) ((())()()) ((())()()) (()()) ((())) () () ((())) () () (()())\") == [3, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())) () () () () (()()) (()()) (()()) ((())()()) ()\") == [3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1]", "assert parse_nested_parens(\"(()()) (((()))) (()) ((())()()) () () ((())) ((())) (((()))) () (()()) (((())))\") == [2, 4, 2, 3, 1, 1, 3, 3, 4, 1, 2, 4]", "assert parse_nested_parens(\"(()()) ((())) ((())) ((())()())\") == [2, 3, 3, 3]", "assert parse_nested_parens(\"(()) ((())) (()) (()()) ((())()()) ((())()())\") == [2, 3, 2, 2, 3, 3]", "assert parse_nested_parens(\"((())) (()) (()()) ((())) (((()))) () ((())()()) ((())) (()()) (()()) (()) ((())()())\") == [3, 2, 2, 3, 4, 1, 3, 3, 2, 2, 2, 3]", "assert parse_nested_parens(\"((())) () ((())()()) ((())()()) (((()))) ((())()()) (((())))\") == [3, 1, 3, 3, 4, 3, 4]", "assert parse_nested_parens(\"(((()))) ((())) (()) ((())) () () () (((()))) (()()) (()()) (((()))) (()) (()) (((())))\") == [4, 3, 2, 3, 1, 1, 1, 4, 2, 2, 4, 2, 2, 4]", "assert parse_nested_parens(\"(((()))) (()) (()()) (()()) (()()) ((())) (((()))) (()(())((()))) (()) () (((()))) (()) ((())) (())\") == [4, 2, 2, 2, 2, 3, 4, 4, 2, 1, 4, 2, 3, 2]", "assert parse_nested_parens(\"(()()) (()) (()) (()()) (()()) (((()))) (()) (((()))) (()(())((()))) ((())) ((())) ((())()()) () (((())))\") == [2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 3, 3, 1, 4]", "assert parse_nested_parens(\"(()(())((()))) ((())) (((()))) ((())()()) (()()) (()(())((()))) ((())()()) ((())) ((())) (()()) ((())()()) ((())) (()) (()(())((()))) () () (()(())((()))) (()()) (((()))) (((()))) ()\") == [4, 3, 4, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 1, 1, 4, 2, 4, 4, 1]", "assert parse_nested_parens(\"(()(())((()))) ((())) ((())) ((())) (()) (()(())((()))) () ((())) (((()))) (()) ((())) ((())) () (()(())((())))\") == [4, 3, 3, 3, 2, 4, 1, 3, 4, 2, 3, 3, 1, 4]", "assert parse_nested_parens(\"((())()()) (()()) () ((())) (()()) () ((())()()) ((())) ((())) ((())) ((())) ((()))\") == [3, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3]", "assert parse_nested_parens(\"(()) ((())()()) ((())()()) () (((()))) ((())()()) ((())()()) (()()) (()()) (()) ((())) (()())\") == [2, 3, 3, 1, 4, 3, 3, 2, 2, 2, 3, 2]", "assert parse_nested_parens(\"((())()()) (()(())((()))) (()) (()(())((()))) (((()))) (()(())((()))) (())\") == [3, 4, 2, 4, 4, 4, 2]", "assert parse_nested_parens(\"(()) (()) (()(())((()))) (()) (((()))) (((()))) ((())()())\") == [2, 2, 4, 2, 4, 4, 3]", "assert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) ((())()()) (((()))) (()(())((()))) ((())()())\") == [4, 4, 4, 3, 4, 4, 3]", "assert parse_nested_parens(\"() ((())) ((())()()) () ((())()()) (()()) () () ((())) (()()) ((())) ((())()())\") == [1, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 3]", "assert parse_nested_parens(\"(()) (()()) ((())()()) (()()) () () ((())) () ((())()()) (((()))) (((()))) ()\") == [2, 2, 3, 2, 1, 1, 3, 1, 3, 4, 4, 1]", "assert parse_nested_parens(\"(()()) ((())()()) ((())) (()())\") == [2, 3, 3, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())()()) (()()) (()) ((())()()) (((()))) (((()))) ((())()()) ((())) ((())()()) () (()()) (()()) ((())()()) (()) ((())) ((())()())\") == [3, 3, 3, 2, 2, 3, 4, 4, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3]", "assert parse_nested_parens(\"(()()) () (()()) (()())\") == [2, 1, 2, 2]", "assert parse_nested_parens(\"(((()))) ((())) () ((())()()) (()()) (()()) () ((())) ((())) (()()) (((()))) (()())\") == [4, 3, 1, 3, 2, 2, 1, 3, 3, 2, 4, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())()()) () ((())) (()()) ((())()()) (()())\") == [3, 3, 3, 1, 3, 2, 3, 2]", "assert parse_nested_parens(\"(()) ((())) ((())) ((())()()) () ((()))\") == [2, 3, 3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) (()()) (()()) () () ((())) ((())()()) ()\") == [2, 2, 2, 1, 1, 3, 3, 1]", "assert parse_nested_parens(\"(()) (()(())((()))) ((())()()) (()()) (((()))) ((())()()) ((())()())\") == [2, 4, 3, 2, 4, 3, 3]", "assert parse_nested_parens(\"((())) () (((()))) (((()))) (()()) (((())))\") == [3, 1, 4, 4, 2, 4]", "assert parse_nested_parens(\"() ((())) () (()()) (((()))) ((())) (()()) () (()) (((()))) (()(())((()))) (((()))) (((()))) ()\") == [1, 3, 1, 2, 4, 3, 2, 1, 2, 4, 4, 4, 4, 1]", "assert parse_nested_parens(\"((())) ((())()()) () ((()))\") == [3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) (()()) () ((()))\") == [2, 2, 1, 3]", "assert parse_nested_parens(\"(((()))) () (()) () (()) (())\") == [4, 1, 2, 1, 2, 2]", "assert parse_nested_parens(\"() ((())()()) () ((())) (()()) () () () () (()()) ((())) ((()))\") == [1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3]", "assert parse_nested_parens(\"((())) ((())) (()()) (()()) ((())()()) ((())) ((())) ((())()())\") == [3, 3, 2, 2, 3, 3, 3, 3]", "assert parse_nested_parens(\"((())) () ((())()()) (((()))) (()) (((()))) () ((())) (()()) (()) (((()))) (()())\") == [3, 1, 3, 4, 2, 4, 1, 3, 2, 2, 4, 2]", "assert parse_nested_parens(\"(()()) (()) ((())) () () () ((()))\") == [2, 2, 3, 1, 1, 1, 3]", "assert parse_nested_parens(\"((())()()) (((()))) ((())()()) ((())) ((())()()) (())\") == [3, 4, 3, 3, 3, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())) (()()) ((())()()) () () ()\") == [3, 3, 3, 2, 3, 1, 1, 1]", "assert parse_nested_parens(\"(()()) (()()) () (()()) ((())()()) (()()) () (()()) ((())) () () (()())\") == [2, 2, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2]", "assert parse_nested_parens(\"(()) (((()))) (()) (()) ((())) () ((())) ((())()()) ((())) (()) (()()) (((())))\") == [2, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 4]", "assert parse_nested_parens(\"(((()))) (((()))) () (()()) ((())()()) () (()(())((()))) (()(())((()))) (()()) () (()()) (()) (()) ((())()())\") == [4, 4, 1, 2, 3, 1, 4, 4, 2, 1, 2, 2, 2, 3]", "assert parse_nested_parens(\"((())()()) (((()))) ((())) ((())) ((())) ((())()()) ((())()()) (()()) () () (()(())((()))) ((())) ((())()()) (()(())((()))) () ((())()()) (((()))) (((()))) (()(())((()))) ((())()()) ()\") == [3, 4, 3, 3, 3, 3, 3, 2, 1, 1, 4, 3, 3, 4, 1, 3, 4, 4, 4, 3, 1]", "assert parse_nested_parens(\"() ((())) ((())()()) ((())) () (()()) () (()())\") == [1, 3, 3, 3, 1, 2, 1, 2]", "assert parse_nested_parens(\"(()) (()()) () (()()) ((())()()) ((())) ((())) (()) ((())()()) () ((())()()) (()()) () (()) ((())) (()()) (()()) ((())()())\") == [2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3]", "assert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]", "assert parse_nested_parens(\"(()()) (((()))) (((()))) (()) (()()) (((()))) () (((()))) (()) ((())) () ()\") == [2, 4, 4, 2, 2, 4, 1, 4, 2, 3, 1, 1]", "assert parse_nested_parens(\"(()()) (((()))) (((()))) (()()) (((()))) ((())) ((())()()) (()) ((())()()) (((()))) (()()) () (()) (((()))) () (()(())((()))) () (()) (()(())((()))) ((())) ((())()())\") == [2, 4, 4, 2, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 1, 4, 1, 2, 4, 3, 3]", "assert parse_nested_parens(\"() (()(())((()))) (()) (()()) ((())()()) (()()) (()())\") == [1, 4, 2, 2, 3, 2, 2]", "assert parse_nested_parens(\"((())()()) (()(())((()))) (()()) (()()) ((())()()) (()()) ((())) () () (()()) (()(())((()))) ((())()()) (()()) ((())()()) (((()))) (()(())((()))) (()()) () ((())()()) ((())()()) ()\") == [3, 4, 2, 2, 3, 2, 3, 1, 1, 2, 4, 3, 2, 3, 4, 4, 2, 1, 3, 3, 1]", "assert parse_nested_parens(\"((())()()) () () (()()) (()()) (()()) ((())) (()())\") == [3, 1, 1, 2, 2, 2, 3, 2]", "assert parse_nested_parens(\"() ((())()()) (()()) (()) ((())()()) () (((()))) ((())()()) () (()) (()) ((())()()) (()) (()) (()) ((())) ((())) (((())))\") == [1, 3, 2, 2, 3, 1, 4, 3, 1, 2, 2, 3, 2, 2, 2, 3, 3, 4]", "assert parse_nested_parens(\"(()(())((()))) () (()(())((()))) (()) (((()))) ((())()()) ((())()()) ((())) ((())()()) (()(())((()))) ((())) (()(())((()))) ((())) ((())()())\") == [4, 1, 4, 2, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3]", "assert parse_nested_parens(\"(()()) (((()))) () (()) (()) ((())) (()()) () () ((())()()) (()) ((()))\") == [2, 4, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3]", "assert parse_nested_parens(\"(()) ((())()()) (()()) ((())()()) (((()))) (()()) (()(())((()))) (()()) (()(())((()))) ((())) (()) ((())) (()()) (()) (()()) () ((())) ((())) ((())) ((())) (()())\") == [2, 3, 2, 3, 4, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2]", "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]", "assert parse_nested_parens(\"((())) ((())) ((())()()) ((())) ((())()()) ((())) () ()\") == [3, 3, 3, 3, 3, 3, 1, 1]", "assert parse_nested_parens(\"((())) (()()) () ((())()())\") == [3, 2, 1, 3]", "assert parse_nested_parens(\"((())()()) () (()()) ((())) (()()) () ((())()()) ((()))\") == [3, 1, 2, 3, 2, 1, 3, 3]", "assert parse_nested_parens(\"(((()))) () (()) (((()))) ((())) (()) ((())()()) ((())()()) () ((())()()) (()) ((())()())\") == [4, 1, 2, 4, 3, 2, 3, 3, 1, 3, 2, 3]", "assert parse_nested_parens(\"((())()()) () (()()) ((())) ((())()()) ((())()())\") == [3, 1, 2, 3, 3, 3]", "assert parse_nested_parens(\"((())()()) () ((())) () (()()) ((())) ((())()()) () () ((())()()) () (()())\") == [3, 1, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2]", "assert parse_nested_parens(\"() ((())) (()()) (((()))) () ((())) (((()))) () (()) () () ((())()()) (()) (()()) ((())) (((()))) (()) (())\") == [1, 3, 2, 4, 1, 3, 4, 1, 2, 1, 1, 3, 2, 2, 3, 4, 2, 2]", "assert parse_nested_parens(\"((())()()) () ((())()()) ((())()()) ((())) () ((())()()) ((())) () ((())()()) (()()) (()())\") == [3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 2]", "assert parse_nested_parens(\"() (()()) ((())()()) (()(())((()))) (((()))) (()(())((()))) ((())()()) (()) (()()) (((()))) (()) (()) (()()) (((()))) (((()))) () (()) ((())) () (()) (()())\") == [1, 2, 3, 4, 4, 4, 3, 2, 2, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 2]", "assert parse_nested_parens(\"(((()))) () (((()))) (()()) ((())) () (()()) (((()))) (()()) (((()))) () ()\") == [4, 1, 4, 2, 3, 1, 2, 4, 2, 4, 1, 1]", "assert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) () (()) () ((())) (()) (()()) (((()))) ((())) () () (()) () () (()) () ((())) (()(())((()))) ((()))\") == [4, 4, 4, 1, 2, 1, 3, 2, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 3]", "assert parse_nested_parens(\"(()) (()) (()()) ((())()()) (()) (()()) ((())) (()()) (()(())((()))) (()(())((()))) ((())()()) ((())) (((()))) (()(())((()))) ((())) ((())) (()(())((()))) () ((())) ((())) ((())()())\") == [2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 1, 3, 3, 3]", "assert parse_nested_parens(\"((())) () (()) ((())()()) (()()) ((())) (()) () () (((()))) (((()))) (())\") == [3, 1, 2, 3, 2, 3, 2, 1, 1, 4, 4, 2]", "assert parse_nested_parens(\"\") == []", "assert parse_nested_parens(\"((())()()) (()) (()()) ((())) () ((())) ((())()()) () () (()) (()) (((()))) (((()))) ((())) () () (()()) (())\") == [3, 2, 2, 3, 1, 3, 3, 1, 1, 2, 2, 4, 4, 3, 1, 1, 2, 2]", "assert parse_nested_parens(\"((())) ((())()()) ((())) (()()) ((())()()) () (()()) ((()))\") == [3, 3, 3, 2, 3, 1, 2, 3]", "assert parse_nested_parens(\"((())()()) ((())()()) ((())()()) ((())) (()()) ((())) ((())()()) ((())()()) ((())()()) () ((())) (()())\") == [3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 3, 2]", "assert parse_nested_parens(\"((())()()) (()) () (((()))) ((())()()) ((())()()) (((()))) (()) (((()))) () (((()))) ((())()()) (()()) (()) (()) (()) () (())\") == [3, 2, 1, 4, 3, 3, 4, 2, 4, 1, 4, 3, 2, 2, 2, 2, 1, 2]", "assert parse_nested_parens(\"(()()) (()) ((())()()) ((())()()) () ((()))\") == [2, 2, 3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) () ((())()()) () ((())) () ((())) ()\") == [2, 1, 3, 1, 3, 1, 3, 1]", "assert parse_nested_parens(\"((())) () (()()) ()\") == [3, 1, 2, 1]", "assert parse_nested_parens(\"((())) ((())) (()()) ((())()()) () ((())()()) ((())()()) ((())) (()()) ((())) () ((())()())\") == [3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 1, 3]", "assert parse_nested_parens(\"(()()) () (()()) ((())) () ((())()()) (()()) ((())()())\") == [2, 1, 2, 3, 1, 3, 2, 3]", "assert parse_nested_parens(\"(((()))) (()) () ((())()()) (()()) () (()()) (()(())((()))) (()(())((()))) ((())) (((()))) (()(())((()))) ((())()()) ()\") == [4, 2, 1, 3, 2, 1, 2, 4, 4, 3, 4, 4, 3, 1]", "assert parse_nested_parens(\"(()()) (()()) () (()())\") == [2, 2, 1, 2]", "assert parse_nested_parens(\"((())) ((())) (((()))) (()) (()()) (()()) () ((())) ((())()()) () (()(())((()))) (()()) (()(())((()))) ((()))\") == [3, 3, 4, 2, 2, 2, 1, 3, 3, 1, 4, 2, 4, 3]", "assert parse_nested_parens(\"(()()) (()()) () (()) () (()()) (()) (()) (((()))) () (()()) (())\") == [2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 2, 2]", "assert parse_nested_parens('(()(())((())))') == [4]", "assert parse_nested_parens(\"((())) (()) (((()))) () (()()) (((()))) ((())()()) ((())) (()()) ((())()()) (((()))) ((())) (()) ((())) ((())) () ((())) ((())()())\") == [3, 2, 4, 1, 2, 4, 3, 3, 2, 3, 4, 3, 2, 3, 3, 1, 3, 3]", "assert parse_nested_parens(\"(()) ((())()()) (()) ((())) ((())) ((())()()) (((()))) () ((())()()) (()(())((()))) ((())) ((())()()) ((())()()) (())\") == [2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 3, 3, 2]", "assert parse_nested_parens(\"(()()) ((())()()) (()()) ()\") == [2, 3, 2, 1]", "assert parse_nested_parens(\"(()(())((()))) ((())()()) (((()))) (()(())((()))) () (()(())((()))) ()\") == [4, 3, 4, 4, 1, 4, 1]", "assert parse_nested_parens(\"((())) ((())) ((())()()) () ((())) ((())) (()()) ((())()()) (((()))) () (()) (((())))\") == [3, 3, 3, 1, 3, 3, 2, 3, 4, 1, 2, 4]", "assert parse_nested_parens(\"((())) (((()))) ((())) (()()) (()()) ((())()()) (()) (()(())((()))) (()) ((())) (()) ((())) () (((())))\") == [3, 4, 3, 2, 2, 3, 2, 4, 2, 3, 2, 3, 1, 4]", "assert parse_nested_parens(\"((())) ((())) ((())()()) (()()) () (()(())((()))) (()()) (((()))) (((()))) ((())()()) (()()) () () ((())) (((()))) (()(())((()))) (((()))) ((())()()) ((())) (()(())((()))) (())\") == [3, 3, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 1, 3, 4, 4, 4, 3, 3, 4, 2]", "assert parse_nested_parens(\"(()) () (((()))) () (((()))) (()()) (()) (((()))) (()(())((()))) (((()))) () (()()) (()(())((()))) (()()) (()(())((()))) (()()) (((()))) (()()) (((()))) (()) (()())\") == [2, 1, 4, 1, 4, 2, 2, 4, 4, 4, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2]"], "nl": " Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    ", "func": "def parse_nested_parens(paren_string: str) -> List[int]:", "examples": ">>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    ", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Traverse each character in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth for the current group to the list of results\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for all groups\n    return max_depths\n", "completions": ["from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list of groups\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group string\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds the recorded maximum depth\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth to the list of depths\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for each group\n    return max_depths\n", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into a list of groups using the space character as a delimiter\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list of groups\n    for group in groups:\n        # Initialize a counter for the current depth and a variable to track the maximum depth\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group string\n        for char in group:\n            if char == '(':\n                # Increment the current depth counter\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds the previously recorded maximum depth\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                # Decrement the current depth counter\n                current_depth -= 1\n        \n        # After processing all characters in the group, append the maximum depth to the list of results\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for each group\n    return max_depths\n", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into a list of strings, where each string is a group of parentheses\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the maximum depth of each group\n    max_depths = []\n    \n    # Iterate over each group of parentheses in the list\n    for group in groups:\n        # Initialize a counter for the current depth and a variable to track the maximum depth\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current depth counter for '('\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                # Decrement the current depth counter for ')'\n                current_depth -= 1\n        \n        # After processing each group, append the maximum depth to the list of results\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for each group of parentheses\n    return max_depths\n", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into separate groups of parentheses based on spaces\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the maximum depth of each group\n    max_depths = []\n    \n    # Iterate over each group of parentheses in the list\n    for group in groups:\n        # Initialize a counter for the current depth and a variable to track the maximum depth\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current depth counter for '('\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                # Decrement the current depth counter for ')'\n                current_depth -= 1\n        \n        # Append the maximum depth to the list of results\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for each group\n    return max_depths\n", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth of each group\n    max_depths = []\n    \n    # Iterate over each group in the list of groups\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group string\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds the recorded maximum depth\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth to the list of depths\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for each group\n    return max_depths\n", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth for the current group to the list\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for all groups\n    return max_depths\n", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group of parentheses\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Traverse each character in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth for the current group to the list\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for all groups\n    return max_depths\n", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into separate groups of parentheses based on spaces\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the maximum nesting depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Traverse each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current depth counter for an opening parenthesis '('\n                current_depth += 1\n                # Update the maximum depth if needed\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                # Decrement the current depth counter for a closing parenthesis ')'\n                current_depth -= 1\n        \n        # Append the maximum depth for the current group to the results list\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for all groups\n    return max_depths\n", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group to calculate the maximum nesting depth\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Traverse the characters in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth found for this group to the result list\n        max_depths.append(max_depth)\n    \n    # Return the result list containing the maximum depths for all groups\n    return max_depths\n", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Traverse each character in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth for the current group to the list of results\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for all groups\n    return max_depths\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Split the input string into individual groups of parentheses based on spaces.\",\n      \"input\": \"A string with multiple groups of nested parentheses separated by spaces.\",\n      \"output\": \"A list of strings, each representing a group of parentheses.\"\n    },\n    {\n      \"description\": \"For each group of parentheses, calculate the deepest level of nesting.\",\n      \"input\": \"A single group of parentheses as a string.\",\n      \"output\": \"An integer representing the maximum depth of nested parentheses in the group.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input string containing multiple groups of nested parentheses.\",\n    \"Split the input string into a list of individual groups using spaces as delimiters.\",\n    \"Initialize an empty list to store the maximum depth for each group.\",\n    \"Iterate over each group in the list:\",\n    \"  - Initialize a counter for the current depth and a variable for the maximum depth.\",\n    \"  - Traverse each character in the group:\",\n    \"    - If the character is '(', increment the current depth.\",\n    \"    - If the character is ')', decrement the current depth.\",\n    \"    - Update the maximum depth if the current depth exceeds it.\",\n    \"  - Append the maximum depth for the current group to the list of results.\",\n    \"Return the list of maximum depths for all groups.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Traverse each character in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth for the current group to the list of results\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for all groups\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Split the input string into individual groups of parentheses based on spaces.\",\n      \"input\": \"A string with multiple groups of nested parentheses separated by spaces.\",\n      \"output\": \"A list of strings, each representing a group of parentheses.\"\n    },\n    {\n      \"description\": \"For each group of parentheses, calculate the deepest level of nesting.\",\n      \"input\": \"A single group of parentheses as a string.\",\n      \"output\": \"An integer representing the maximum depth of nested parentheses in the group.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Receive the input string containing multiple groups of nested parentheses.\"\n    },\n    {\n      \"step\": \"Split the input string into a list of individual groups using spaces as delimiters.\"\n    },\n    {\n      \"step\": \"Initialize an empty list to store the maximum depth for each group.\"\n    },\n    {\n      \"step\": \"Iterate over each group in the list of groups.\"\n    },\n    {\n      \"step\": \"For each group, initialize a counter for the current depth and a variable for the maximum depth.\"\n    },\n    {\n      \"step\": \"Iterate over each character in the group string.\",\n      \"substeps\": [\n        {\n          \"substep\": \"If the character is an opening parenthesis '(', increment the current depth counter.\"\n        },\n        {\n          \"substep\": \"If the character is a closing parenthesis ')', decrement the current depth counter.\"\n        },\n        {\n          \"substep\": \"Update the maximum depth if the current depth exceeds the recorded maximum depth.\"\n        }\n      ]\n    },\n    {\n      \"step\": \"After processing the group, append the maximum depth to the list of depths.\"\n    },\n    {\n      \"step\": \"Return the list of maximum depths for each group.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list of groups\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group string\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds the recorded maximum depth\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth to the list of depths\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for each group\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Split the input string into individual groups of parentheses based on spaces.\",\n      \"input\": \"A string with multiple groups of nested parentheses separated by spaces.\",\n      \"output\": \"A list of strings, each representing a group of parentheses.\"\n    },\n    {\n      \"description\": \"For each group of parentheses, calculate the deepest level of nesting.\",\n      \"input\": \"A single string representing a group of nested parentheses.\",\n      \"output\": \"An integer representing the maximum depth of nested parentheses in the group.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Split the input string into a list of groups using the space character as a delimiter.\"\n    },\n    {\n      \"step\": \"Initialize an empty list to store the maximum depth for each group.\"\n    },\n    {\n      \"step\": \"Iterate over each group in the list of groups.\"\n    },\n    {\n      \"step\": \"For each group, initialize a counter for the current depth and a variable to track the maximum depth.\"\n    },\n    {\n      \"step\": \"Iterate over each character in the group string.\",\n      \"details\": [\n        \"If the character is '(', increment the current depth counter.\",\n        \"If the character is ')', decrement the current depth counter.\",\n        \"Update the maximum depth if the current depth exceeds the previously recorded maximum depth.\"\n      ]\n    },\n    {\n      \"step\": \"After processing all characters in the group, append the maximum depth to the list of results.\"\n    },\n    {\n      \"step\": \"Return the list of maximum depths for each group.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into a list of groups using the space character as a delimiter\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list of groups\n    for group in groups:\n        # Initialize a counter for the current depth and a variable to track the maximum depth\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group string\n        for char in group:\n            if char == '(':\n                # Increment the current depth counter\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds the previously recorded maximum depth\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                # Decrement the current depth counter\n                current_depth -= 1\n        \n        # After processing all characters in the group, append the maximum depth to the list of results\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for each group\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Split the input string into separate groups of parentheses based on spaces.\",\n      \"output\": \"A list of strings, each representing a group of parentheses.\"\n    },\n    {\n      \"description\": \"For each group of parentheses, calculate the deepest level of nesting.\",\n      \"output\": \"An integer representing the maximum depth of nested parentheses for each group.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Receive the input string containing multiple groups of nested parentheses separated by spaces.\"\n    },\n    {\n      \"step\": \"Split the input string into a list of strings, where each string is a group of parentheses.\"\n    },\n    {\n      \"step\": \"Initialize an empty list to store the maximum depth of each group.\"\n    },\n    {\n      \"step\": \"Iterate over each group of parentheses in the list.\"\n    },\n    {\n      \"step\": \"For each group, initialize a counter for the current depth and a variable to track the maximum depth.\"\n    },\n    {\n      \"step\": \"Iterate over each character in the group. Increment the current depth counter for '(', and decrement it for ')'. Update the maximum depth if the current depth exceeds it.\"\n    },\n    {\n      \"step\": \"After processing each group, append the maximum depth to the list of results.\"\n    },\n    {\n      \"step\": \"Return the list of maximum depths for each group of parentheses.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into a list of strings, where each string is a group of parentheses\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the maximum depth of each group\n    max_depths = []\n    \n    # Iterate over each group of parentheses in the list\n    for group in groups:\n        # Initialize a counter for the current depth and a variable to track the maximum depth\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current depth counter for '('\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                # Decrement the current depth counter for ')'\n                current_depth -= 1\n        \n        # After processing each group, append the maximum depth to the list of results\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for each group of parentheses\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Split the input string into separate groups of parentheses based on spaces.\",\n      \"output\": \"A list of strings, each representing a group of parentheses.\"\n    },\n    {\n      \"description\": \"For each group of parentheses, calculate the deepest level of nesting.\",\n      \"output\": \"An integer representing the maximum depth of nested parentheses for each group.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Receive the input string containing multiple groups of nested parentheses separated by spaces.\"\n    },\n    {\n      \"step\": \"Split the input string into a list of strings, where each string is a group of parentheses.\"\n    },\n    {\n      \"step\": \"Initialize an empty list to store the maximum depth of each group.\"\n    },\n    {\n      \"step\": \"Iterate over each group of parentheses in the list.\"\n    },\n    {\n      \"step\": \"For each group, initialize a counter for the current depth and a variable to track the maximum depth.\"\n    },\n    {\n      \"step\": \"Iterate over each character in the group. Increment the current depth counter for '(', and decrement it for ')'. Update the maximum depth if the current depth exceeds it.\"\n    },\n    {\n      \"step\": \"After processing each group, append the maximum depth to the list of results.\"\n    },\n    {\n      \"step\": \"Return the list of maximum depths for each group.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into separate groups of parentheses based on spaces\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the maximum depth of each group\n    max_depths = []\n    \n    # Iterate over each group of parentheses in the list\n    for group in groups:\n        # Initialize a counter for the current depth and a variable to track the maximum depth\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current depth counter for '('\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                # Decrement the current depth counter for ')'\n                current_depth -= 1\n        \n        # Append the maximum depth to the list of results\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for each group\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Split the input string into individual groups of parentheses based on spaces.\",\n      \"input\": \"A string with multiple groups of nested parentheses separated by spaces.\",\n      \"output\": \"A list of strings, each representing a group of parentheses.\"\n    },\n    {\n      \"description\": \"For each group of parentheses, calculate the deepest level of nesting.\",\n      \"input\": \"A single string representing a group of nested parentheses.\",\n      \"output\": \"An integer representing the maximum depth of nested parentheses in the group.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Receive the input string containing multiple groups of nested parentheses.\"\n    },\n    {\n      \"step\": \"Split the input string into a list of individual groups using spaces as delimiters.\"\n    },\n    {\n      \"step\": \"Initialize an empty list to store the maximum depth of each group.\"\n    },\n    {\n      \"step\": \"Iterate over each group in the list of groups.\"\n    },\n    {\n      \"step\": \"For each group, initialize a counter for the current depth and a variable for the maximum depth.\"\n    },\n    {\n      \"step\": \"Iterate over each character in the group string.\",\n      \"substeps\": [\n        {\n          \"substep\": \"If the character is an opening parenthesis '(', increment the current depth counter.\"\n        },\n        {\n          \"substep\": \"If the character is a closing parenthesis ')', decrement the current depth counter.\"\n        },\n        {\n          \"substep\": \"Update the maximum depth if the current depth exceeds the recorded maximum depth.\"\n        }\n      ]\n    },\n    {\n      \"step\": \"After processing the group, append the maximum depth to the list of depths.\"\n    },\n    {\n      \"step\": \"Return the list of maximum depths for each group.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth of each group\n    max_depths = []\n    \n    # Iterate over each group in the list of groups\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group string\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds the recorded maximum depth\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth to the list of depths\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for each group\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Split the input string into individual groups of parentheses based on spaces.\",\n      \"output\": \"A list of strings, each representing a group of parentheses.\"\n    },\n    {\n      \"description\": \"For each group of parentheses, calculate the deepest level of nesting.\",\n      \"output\": \"An integer representing the maximum depth of nested parentheses for each group.\"\n    },\n    {\n      \"description\": \"Collect the maximum depth values for all groups into a list.\",\n      \"output\": \"A list of integers, each representing the maximum depth for a corresponding group.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input string containing multiple groups of nested parentheses.\",\n    \"Split the input string into a list of groups using spaces as delimiters.\",\n    \"Initialize an empty list to store the maximum depth for each group.\",\n    \"Iterate over each group in the list:\",\n    \"  - Initialize a counter for the current depth and a variable for the maximum depth.\",\n    \"  - Iterate over each character in the group:\",\n    \"    - If the character is '(', increment the current depth counter.\",\n    \"    - If the character is ')', decrement the current depth counter.\",\n    \"    - Update the maximum depth if the current depth exceeds it.\",\n    \"  - Append the maximum depth for the current group to the list.\",\n    \"Return the list of maximum depths for all groups.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth for the current group to the list\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for all groups\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Split the input string into individual groups of parentheses based on spaces.\",\n      \"input\": \"A string with multiple groups of nested parentheses separated by spaces.\",\n      \"output\": \"A list of strings, each representing a group of parentheses.\"\n    },\n    {\n      \"description\": \"For each group of parentheses, calculate the deepest level of nesting.\",\n      \"input\": \"A single string representing a group of nested parentheses.\",\n      \"output\": \"An integer representing the maximum depth of nested parentheses in the group.\"\n    },\n    {\n      \"description\": \"Collect the maximum depth values for all groups into a list.\",\n      \"input\": \"A list of integers representing the maximum depth for each group.\",\n      \"output\": \"A list of integers representing the maximum depth for each group.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input string containing multiple groups of nested parentheses.\",\n    \"Split the input string into a list of strings, each representing a group of parentheses.\",\n    \"Initialize an empty list to store the maximum depth for each group.\",\n    \"Iterate over each group of parentheses:\",\n    \"  - Initialize a counter for the current depth and a variable for the maximum depth.\",\n    \"  - Traverse each character in the group:\",\n    \"    - If the character is '(', increment the current depth.\",\n    \"    - If the character is ')', decrement the current depth.\",\n    \"    - Update the maximum depth if the current depth exceeds it.\",\n    \"  - Append the maximum depth for the current group to the list.\",\n    \"Return the list of maximum depths for all groups.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group of parentheses\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Traverse each character in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth for the current group to the list\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for all groups\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Split the input string into separate groups of parentheses based on spaces.\",\n        \"output\": \"A list of strings, each representing a group of parentheses.\"\n      },\n      {\n        \"description\": \"For each group of parentheses, calculate the deepest level of nesting.\",\n        \"output\": \"An integer representing the maximum depth of nested parentheses for each group.\"\n      },\n      {\n        \"description\": \"Compile the results into a list of integers, each corresponding to the maximum depth of a group.\",\n        \"output\": \"A list of integers representing the maximum nesting depth for each group.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Receive the input string containing multiple groups of nested parentheses.\",\n      \"Split the input string into a list of groups using spaces as delimiters.\",\n      \"Initialize an empty list to store the maximum nesting depth for each group.\",\n      \"Iterate over each group in the list:\",\n      \"  - Initialize a counter for the current depth and a variable for the maximum depth.\",\n      \"  - Traverse each character in the group:\",\n      \"    - Increment the current depth counter for an opening parenthesis '(' and update the maximum depth if needed.\",\n      \"    - Decrement the current depth counter for a closing parenthesis ')'.\",\n      \"  - Append the maximum depth for the current group to the results list.\",\n      \"Return the list of maximum depths for all groups.\"\n    ]\n  }\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into separate groups of parentheses based on spaces\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the maximum nesting depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Traverse each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current depth counter for an opening parenthesis '('\n                current_depth += 1\n                # Update the maximum depth if needed\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                # Decrement the current depth counter for a closing parenthesis ')'\n                current_depth -= 1\n        \n        # Append the maximum depth for the current group to the results list\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for all groups\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Split the input string into individual groups of parentheses based on spaces.\",\n      \"description\": \"The input string contains multiple groups of nested parentheses separated by spaces. Each group needs to be processed separately.\"\n    },\n    {\n      \"subproblem\": \"Calculate the deepest level of nesting for each group of parentheses.\",\n      \"description\": \"For each group, determine the maximum depth of nested parentheses. This involves counting the number of open parentheses and tracking the maximum depth reached.\"\n    },\n    {\n      \"subproblem\": \"Return a list of integers representing the deepest level of nesting for each group.\",\n      \"description\": \"Compile the results from each group into a list, where each integer corresponds to the maximum depth of a group.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse the input string to separate it into individual groups of parentheses.\",\n      \"description\": \"Use string manipulation techniques to split the input string by spaces, resulting in a list of parenthesis groups.\"\n    },\n    {\n      \"step\": \"Iterate over each group and calculate the maximum nesting depth.\",\n      \"description\": \"For each group, initialize a counter for the current depth and a variable for the maximum depth. Traverse the characters in the group, updating the depth counters as parentheses open and close.\"\n    },\n    {\n      \"step\": \"Store the maximum depth for each group in a result list.\",\n      \"description\": \"After processing each group, append the maximum depth found to a result list.\"\n    },\n    {\n      \"step\": \"Return the result list containing the maximum depths for all groups.\",\n      \"description\": \"Ensure the result list is returned in the order corresponding to the input groups.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group to calculate the maximum nesting depth\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Traverse the characters in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth found for this group to the result list\n        max_depths.append(max_depth)\n    \n    # Return the result list containing the maximum depths for all groups\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Split the input string into individual groups of parentheses based on spaces.\",\n      \"input\": \"A string with multiple groups of nested parentheses separated by spaces.\",\n      \"output\": \"A list of strings, each representing a group of parentheses.\"\n    },\n    {\n      \"description\": \"For each group of parentheses, calculate the deepest level of nesting.\",\n      \"input\": \"A single group of parentheses as a string.\",\n      \"output\": \"An integer representing the maximum depth of nested parentheses in the group.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Receive the input string containing multiple groups of nested parentheses.\",\n    \"Split the input string into a list of individual groups using spaces as delimiters.\",\n    \"Initialize an empty list to store the maximum depth for each group.\",\n    \"Iterate over each group in the list:\",\n    \"  - Initialize a counter for the current depth and a variable for the maximum depth.\",\n    \"  - Traverse each character in the group:\",\n    \"    - If the character is '(', increment the current depth.\",\n    \"    - If the character is ')', decrement the current depth.\",\n    \"    - Update the maximum depth if the current depth exceeds it.\",\n    \"  - Append the maximum depth for the current group to the list of results.\",\n    \"Return the list of maximum depths for all groups.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string into individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize a list to store the maximum depth for each group\n    max_depths = []\n    \n    # Iterate over each group in the list\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        \n        # Traverse each character in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth for the current group to the list of results\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths for all groups\n    return max_depths\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [99, 99, 99, 99, 99, 99, 99, 99, 99, 99], "passed": true, "pass": true, "pass_num": 10, "round": 986, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 5}
