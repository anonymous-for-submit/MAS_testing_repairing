{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": ["def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 2, 9, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, -2, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 1, -2, 2]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, -1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 5, -3, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 3, -4, 5]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 6, -7, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 6, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 1, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, 8, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 7, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 10, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 1, 8]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 7, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 7, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 5, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 5, 0]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, -4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 1, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 8, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 12]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 2, 6, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 3, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 4, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 7, 3, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 7, 8, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, -2, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, 10, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 8, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, 1, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 0, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 3, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 3, 6, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "test_case_list": ["assert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "assert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "assert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "assert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([4, 2, 9, 3]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "assert pairs_sum_to_zero([3]) == False", "assert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "assert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "assert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "assert pairs_sum_to_zero([2, 8, -2, 3]) == True", "assert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "assert pairs_sum_to_zero([3, 1, -2, 2]) == True", "assert pairs_sum_to_zero([3, 2, -1, 2]) == False", "assert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([6, 5, -3, 3]) == True", "assert pairs_sum_to_zero([4, 3, -4, 5]) == True", "assert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "assert pairs_sum_to_zero([2, 6, -4, 5]) == False", "assert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "assert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "assert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "assert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "assert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "assert pairs_sum_to_zero([6, 6, -7, 6]) == False", "assert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "assert pairs_sum_to_zero([1, 6, 1, 2]) == False", "assert pairs_sum_to_zero([5, 1, 3, 5]) == False", "assert pairs_sum_to_zero([4, 5, 8, 3]) == False", "assert pairs_sum_to_zero([6, 7, 2, 5]) == False", "assert pairs_sum_to_zero([2, 8, 10, 3]) == False", "assert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "assert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "assert pairs_sum_to_zero([2, 3, 1, 8]) == False", "assert pairs_sum_to_zero([1, 7, 4, 6]) == False", "assert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "assert pairs_sum_to_zero([4, 6, 2, 4]) == False", "assert pairs_sum_to_zero([5, 2, 1, 11]) == False", "assert pairs_sum_to_zero([5, 2, 7, 3]) == False", "assert pairs_sum_to_zero([5, 5, 2, 2]) == False", "assert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "assert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "assert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "assert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "assert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "assert pairs_sum_to_zero([2]) == False", "assert pairs_sum_to_zero([2, 3, 7, 1]) == False", "assert pairs_sum_to_zero([6, 1, -4, 6]) == False", "assert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "assert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "assert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "assert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "assert pairs_sum_to_zero([4, 1, 3, 7]) == False", "assert pairs_sum_to_zero([6, 8, 2, 5]) == False", "assert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "assert pairs_sum_to_zero([1, 5, 1, 12]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "assert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "assert pairs_sum_to_zero([2, 3, 7, 4]) == False", "assert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "assert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "assert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "assert pairs_sum_to_zero([2, 2, 6, 4]) == False", "assert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "assert pairs_sum_to_zero([3, 3, 1, 4]) == False", "assert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "assert pairs_sum_to_zero([1, 3, 4, 3]) == False", "assert pairs_sum_to_zero([5, 7, 3, 4]) == False", "assert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "assert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "assert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "assert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "assert pairs_sum_to_zero([4]) == False", "assert pairs_sum_to_zero([2, 7, 8, 5]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "assert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "assert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "assert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "assert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "assert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "assert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "assert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "assert pairs_sum_to_zero([1, 3, 3, 5]) == False", "assert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "assert pairs_sum_to_zero([2, 4, 1, 2]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "assert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "assert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "assert pairs_sum_to_zero([3, 4, 10, 1]) == False", "assert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "assert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "assert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "assert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "assert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "assert pairs_sum_to_zero([1, 5, 1, 3]) == False", "assert pairs_sum_to_zero([5, 8, -4, 5]) == False", "assert pairs_sum_to_zero([3, 2, 1, 6]) == False", "assert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "assert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "assert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "assert pairs_sum_to_zero([6, 1, 0, 3]) == False", "assert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "assert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "assert pairs_sum_to_zero([1, 2, 2, 2]) == False", "assert pairs_sum_to_zero([6]) == False", "assert pairs_sum_to_zero([2, 8, 1, 4]) == False", "assert pairs_sum_to_zero([2, 6, 2, 5]) == False", "assert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "assert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "assert pairs_sum_to_zero([6, 1, 3, 2]) == False", "assert pairs_sum_to_zero([5]) == False", "assert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "assert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "assert pairs_sum_to_zero([5, 3, 6, 7]) == False", "assert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "assert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "nl": "\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    ", "func": "def pairs_sum_to_zero(l):", "examples": ">>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    ", "completion": "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    unique_elements = set(l)\n    for element in unique_elements:\n        if -element in unique_elements:\n            return True\n    return False\n", "completions": ["def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    unique_elements = set(l)\n    for element in unique_elements:\n        if -element in unique_elements and element != 0:\n            return True\n    return False\n", "def pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero accepts a list of integers as an input. \n    It returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    \n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False\n", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero accepts a list of integers as an input. It returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Step 2: Validate the input to ensure it is a list and contains integers.\n    if not isinstance(l, list) or not all(isinstance(i, int) for i in l):\n        raise ValueError(\"Input must be a list of integers.\")\n    \n    # Step 3: Check if the list has at least two elements.\n    if len(l) < 2:\n        return False\n    \n    # Step 4: Use a nested loop to iterate through the list and form pairs of unique elements.\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            # Step 5: For each pair, calculate the sum and check if it equals zero.\n            if l[i] + l[j] == 0:\n                # Step 6: If a pair is found with a sum of zero, return True.\n                return True\n    \n    # Step 7: If no such pair is found after checking all possibilities, return False.\n    return False\n", "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero accepts a list of integers as an input. \n    It returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False\n", "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    unique_elements = set()\n    for element in l:\n        for unique in unique_elements:\n            if element + unique == 0:\n                return True\n        unique_elements.add(element)\n    return False\n", "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "def pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero accepts a list of integers as an input. \n    It returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    \n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    \n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "def pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero accepts a list of integers as an input. \n    It returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    \n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Step 1: Check if the list has fewer than two elements. If so, return False immediately.\n    if len(l) < 2:\n        return False\n    \n    # Step 2: Initialize a set to keep track of the elements seen so far.\n    seen = set()\n    \n    # Step 3: Iterate over each element in the list.\n    for num in l:\n        # Step 4: For each element, calculate its additive inverse (i.e., the negative of the element).\n        inverse = -num\n        \n        # Step 5: Check if the additive inverse is already in the set of seen elements.\n        if inverse in seen:\n            # Step 6: If the additive inverse is found, return True as a pair summing to zero exists.\n            return True\n        \n        # Step 7: If not found, add the current element to the set of seen elements.\n        seen.add(num)\n    \n    # Step 8: If the loop completes without finding any such pair, return False.\n    return False\n", "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    unique_elements = set(l)\n    for element in unique_elements:\n        if -element in unique_elements:\n            return True\n    return False\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify all unique pairs of elements in the list.\",\n      \"details\": \"Iterate through the list and generate pairs of elements, ensuring each pair consists of unique elements.\"\n    },\n    {\n      \"description\": \"Check if any pair sums to zero.\",\n      \"details\": \"For each unique pair identified, calculate the sum and check if it equals zero.\"\n    },\n    {\n      \"description\": \"Return the result based on the findings.\",\n      \"details\": \"If any pair sums to zero, return True. If no such pair is found, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a set to keep track of unique elements encountered.\",\n    \"Iterate through the list to populate the set with unique elements.\",\n    \"For each element in the set, check if its negation is also in the set.\",\n    \"If a pair is found where an element and its negation exist, return True.\",\n    \"If no such pair is found after checking all elements, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    unique_elements = set(l)\n    for element in unique_elements:\n        if -element in unique_elements:\n            return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify all unique pairs of elements in the list.\",\n      \"details\": \"Iterate through the list and generate pairs of elements, ensuring each pair consists of unique elements.\"\n    },\n    {\n      \"description\": \"Check if any pair sums to zero.\",\n      \"details\": \"For each unique pair identified, calculate the sum and check if it equals zero.\"\n    },\n    {\n      \"description\": \"Return the result based on the findings.\",\n      \"details\": \"If a pair that sums to zero is found, return True. If no such pair is found after checking all possibilities, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a set to keep track of unique elements encountered.\",\n    \"Iterate through the list to populate the set with unique elements.\",\n    \"For each element in the set, check if its negation (i.e., the element that would sum with it to zero) is also in the set.\",\n    \"If such a pair is found, return True.\",\n    \"If the loop completes without finding any such pair, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    unique_elements = set(l)\n    for element in unique_elements:\n        if -element in unique_elements and element != 0:\n            return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify the need to iterate through the list to find pairs of numbers.\",\n    \"Determine a method to check if two numbers in the list sum to zero.\",\n    \"Ensure that the two numbers are unique elements in the list.\",\n    \"Decide on a return value based on whether such a pair is found.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize a set to keep track of numbers seen so far.\",\n    \"Iterate through each number in the list.\",\n    \"For each number, calculate its negation (i.e., the number that would sum with it to zero).\",\n    \"Check if the negation of the current number exists in the set of seen numbers.\",\n    \"If it exists, return True as a valid pair is found.\",\n    \"If it does not exist, add the current number to the set of seen numbers.\",\n    \"Continue until all numbers are checked.\",\n    \"If no valid pair is found after checking all numbers, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero accepts a list of integers as an input. \n    It returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    \n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure it is a list of integers.\",\n    \"2. Check if the list has at least two elements, as a single element cannot form a pair.\",\n    \"3. Iterate through the list to find pairs of unique elements.\",\n    \"4. For each pair, check if their sum equals zero.\",\n    \"5. Return True if a pair is found that sums to zero, otherwise return False.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define the function pairs_sum_to_zero that accepts a list of integers.\",\n    \"Step 2: Validate the input to ensure it is a list and contains integers.\",\n    \"Step 3: Check if the list has at least two elements.\",\n    \"Step 4: Use a nested loop to iterate through the list and form pairs of unique elements.\",\n    \"Step 5: For each pair, calculate the sum and check if it equals zero.\",\n    \"Step 6: If a pair is found with a sum of zero, return True.\",\n    \"Step 7: If no such pair is found after checking all possibilities, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero accepts a list of integers as an input. It returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Step 2: Validate the input to ensure it is a list and contains integers.\n    if not isinstance(l, list) or not all(isinstance(i, int) for i in l):\n        raise ValueError(\"Input must be a list of integers.\")\n    \n    # Step 3: Check if the list has at least two elements.\n    if len(l) < 2:\n        return False\n    \n    # Step 4: Use a nested loop to iterate through the list and form pairs of unique elements.\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            # Step 5: For each pair, calculate the sum and check if it equals zero.\n            if l[i] + l[j] == 0:\n                # Step 6: If a pair is found with a sum of zero, return True.\n                return True\n    \n    # Step 7: If no such pair is found after checking all possibilities, return False.\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify the need to iterate over the list of integers to find pairs.\",\n    \"Determine a method to check if two unique elements in the list sum to zero.\",\n    \"Consider edge cases such as lists with fewer than two elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Check if the list has fewer than two elements. If so, return False immediately.\",\n    \"Step 2: Initialize a set to keep track of the elements seen so far.\",\n    \"Step 3: Iterate over each element in the list.\",\n    \"Step 4: For each element, calculate its negation (i.e., the value that would sum with it to zero).\",\n    \"Step 5: Check if the negation of the current element exists in the set of seen elements.\",\n    \"Step 6: If the negation is found, return True as a pair summing to zero exists.\",\n    \"Step 7: If the negation is not found, add the current element to the set of seen elements.\",\n    \"Step 8: If the loop completes without finding any such pair, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero accepts a list of integers as an input. \n    It returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify all unique pairs of elements in the list.\",\n      \"details\": \"Iterate through the list and generate pairs of elements, ensuring each pair consists of unique elements.\"\n    },\n    {\n      \"description\": \"Check if any pair sums to zero.\",\n      \"details\": \"For each unique pair identified, calculate the sum and check if it equals zero.\"\n    },\n    {\n      \"description\": \"Return the result based on the findings.\",\n      \"details\": \"If a pair that sums to zero is found, return True. If no such pair exists, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a set to keep track of unique elements encountered in the list.\",\n    \"Iterate through each element in the list:\",\n    \"  For each element, iterate through the set of unique elements:\",\n    \"    Check if the sum of the current element and the iterated element from the set is zero.\",\n    \"    If a sum of zero is found, return True.\",\n    \"  Add the current element to the set of unique elements.\",\n    \"If no pairs sum to zero after checking all possibilities, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    unique_elements = set()\n    for element in l:\n        for unique in unique_elements:\n            if element + unique == 0:\n                return True\n        unique_elements.add(element)\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify all unique pairs of elements in the list.\",\n      \"details\": \"Iterate through the list and for each element, find all other elements that form a pair with it.\"\n    },\n    {\n      \"description\": \"Check if any pair sums to zero.\",\n      \"details\": \"For each identified pair, calculate the sum and check if it equals zero.\"\n    },\n    {\n      \"description\": \"Return the result based on the findings.\",\n      \"details\": \"If a pair that sums to zero is found, return True. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a set to keep track of unique elements encountered so far.\",\n    \"Iterate through each element in the list.\",\n    \"For each element, calculate the negative of its value.\",\n    \"Check if this negative value exists in the set of unique elements.\",\n    \"If it exists, return True as a pair summing to zero is found.\",\n    \"If it does not exist, add the current element to the set.\",\n    \"Continue until all elements are processed.\",\n    \"If no pair is found after processing all elements, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the need to iterate through the list to find pairs of elements.\",\n    \"Determine a method to check if two elements in the list sum to zero.\",\n    \"Ensure that the elements forming the pair are unique.\",\n    \"Decide on a return value based on whether a valid pair is found.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize a set to keep track of elements seen so far.\",\n    \"Iterate through each element in the list.\",\n    \"For each element, calculate its additive inverse (i.e., the value that would sum with it to zero).\",\n    \"Check if the additive inverse is already in the set of seen elements.\",\n    \"If the additive inverse is found, return True as a valid pair exists.\",\n    \"If not, add the current element to the set of seen elements.\",\n    \"Continue until all elements are processed.\",\n    \"If no valid pair is found after processing all elements, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify the need to iterate through the list to find pairs of elements.\",\n    \"Determine a method to check if two unique elements sum to zero.\",\n    \"Consider edge cases such as lists with fewer than two elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Check if the list has fewer than two elements. If so, return False immediately.\",\n    \"Step 2: Use a set to track elements that have been seen so far.\",\n    \"Step 3: Iterate through each element in the list.\",\n    \"Step 4: For each element, calculate its additive inverse (i.e., the negative of the element).\",\n    \"Step 5: Check if the additive inverse is already in the set of seen elements.\",\n    \"Step 6: If the additive inverse is found, return True as a pair summing to zero exists.\",\n    \"Step 7: If not found, add the current element to the set of seen elements.\",\n    \"Step 8: If the loop completes without finding a pair, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero accepts a list of integers as an input. \n    It returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    \n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    \n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify the need to iterate over the list of integers to find pairs.\",\n    \"Determine a method to check if two unique elements in the list sum to zero.\",\n    \"Consider edge cases such as lists with fewer than two elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Check if the list has fewer than two elements. If so, return False immediately.\",\n    \"Step 2: Initialize a set to keep track of the elements seen so far.\",\n    \"Step 3: Iterate over each element in the list.\",\n    \"Step 4: For each element, calculate its additive inverse (i.e., the negative of the element).\",\n    \"Step 5: Check if the additive inverse is already in the set of seen elements.\",\n    \"Step 6: If the additive inverse is found, return True as a pair summing to zero exists.\",\n    \"Step 7: If not found, add the current element to the set of seen elements.\",\n    \"Step 8: If the loop completes without finding any such pair, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    \"\"\"pairs_sum_to_zero accepts a list of integers as an input. \n    It returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    \n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Step 1: Check if the list has fewer than two elements. If so, return False immediately.\n    if len(l) < 2:\n        return False\n    \n    # Step 2: Initialize a set to keep track of the elements seen so far.\n    seen = set()\n    \n    # Step 3: Iterate over each element in the list.\n    for num in l:\n        # Step 4: For each element, calculate its additive inverse (i.e., the negative of the element).\n        inverse = -num\n        \n        # Step 5: Check if the additive inverse is already in the set of seen elements.\n        if inverse in seen:\n            # Step 6: If the additive inverse is found, return True as a pair summing to zero exists.\n            return True\n        \n        # Step 7: If not found, add the current element to the set of seen elements.\n        seen.add(num)\n    \n    # Step 8: If the loop completes without finding any such pair, return False.\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify all unique pairs of elements in the list.\",\n      \"details\": \"Iterate through the list and generate pairs of elements, ensuring each pair consists of unique elements.\"\n    },\n    {\n      \"description\": \"Check if any pair sums to zero.\",\n      \"details\": \"For each unique pair identified, calculate the sum and check if it equals zero.\"\n    },\n    {\n      \"description\": \"Return the result based on the findings.\",\n      \"details\": \"If any pair sums to zero, return True. If no such pair is found, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a set to keep track of unique elements encountered.\",\n    \"Iterate through the list to populate the set with unique elements.\",\n    \"For each element in the set, check if its negation is also in the set.\",\n    \"If a pair is found where an element and its negation exist, return True.\",\n    \"If no such pair is found after checking all elements, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def pairs_sum_to_zero(l):\n    '''pairs_sum_to_zero accepts a list of integers as an input. it returns True if there are two unique elements in the list that add up to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''\n    unique_elements = set(l)\n    for element in unique_elements:\n        if -element in unique_elements:\n            return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.873], "pass_results": [true, true, true, true, true, true, true, true, true, false], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 110], "passed": true, "pass": true, "pass_num": 10, "round": 305, "mutate_method": "rephrase_one", "save_node": true, "parent_index": 164}
