{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''We all know that feeling when the outcome of some eagerly anticipated event is finally revealed. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "entry_point": "compare", "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n", "test": ["def check(compare):\n\tassert compare([3, 1, 5, 3, 9, 5], [6, 7, 4, 8, 4, -6]) == [3, 6, 1, 5, 5, 11]", "def check(compare):\n\tassert compare([4, 3, 1, 4, 2, 4], [2, 3, 4, 5, 3, 2]) == [2, 0, 3, 1, 1, 2]", "def check(compare):\n\tassert compare([5, 7, 3], [-6, 0, -2]) == [11, 7, 5]", "def check(compare):\n\tassert compare([4, 7, 6, 3, 7, 2], [4, 3, 7, 8, 7, -3]) == [0, 4, 1, 5, 0, 5]", "def check(compare):\n\tassert compare([5, 1, 4, 4, 2, 3], [3, 1, 3, 3, 2, 4]) == [2, 0, 1, 1, 0, 1]", "def check(compare):\n\tassert compare([4, 1, 2, 1], [0, 5, 6, 2]) == [4, 4, 4, 1]", "def check(compare):\n\tassert compare([1, 1, 3, 1, 3, 1], [5, 3, 1, 3, 2, 3]) == [4, 2, 2, 2, 1, 2]", "def check(compare):\n\tassert compare([6, 6, 8, 9], [-5, 6, 8, 7]) == [11, 0, 0, 2]", "def check(compare):\n\tassert compare([6, 3, 5, 9, 6, 1], [6, 1, 6, 4, 4, -5]) == [0, 2, 1, 5, 2, 6]", "def check(compare):\n\tassert compare([1, 3, 5, 2, 3, 4], [3, 2, 4, 3, 2, 2]) == [2, 1, 1, 1, 1, 2]", "def check(compare):\n\tassert compare([5, 3, 2, 2], [4, 1, 8, 5]) == [1, 2, 6, 3]", "def check(compare):\n\tassert compare([5, 7, 8], [2, -3, 0]) == [3, 10, 8]", "def check(compare):\n\tassert compare([1, 4, 3], [-5, 1, 2]) == [6, 3, 1]", "def check(compare):\n\tassert compare([5, 4, 3, 2, 2, 4], [3, 1, 3, 1, 5, 4]) == [2, 3, 0, 1, 3, 0]", "def check(compare):\n\tassert compare([1, 2, 3], [-1, -7, 0]) == [2, 9, 3]", "def check(compare):\n\tassert compare([6, 5, 7], [0, -3, -5]) == [6, 8, 12]", "def check(compare):\n\tassert compare([4, 5, 1, 1, 5, 3], [5, 4, 7, 2, 2, -3]) == [1, 1, 6, 1, 3, 6]", "def check(compare):\n\tassert compare([4, 4, 6], [-5, -3, 1]) == [9, 7, 5]", "def check(compare):\n\tassert compare([1, 2, 4, 2, 1, 4], [5, 4, 5, 4, 1, 2]) == [4, 2, 1, 2, 0, 2]", "def check(compare):\n\tassert compare([1, 1, 8], [-3, -6, 0]) == [4, 7, 8]", "def check(compare):\n\tassert compare([1, 3, 2, 9, 2, 4], [6, 2, 4, 3, 7, 1]) == [5, 1, 2, 6, 5, 3]", "def check(compare):\n\tassert compare([5, 1, 5], [3, 2, 0]) == [2, 1, 5]", "def check(compare):\n\tassert compare([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3]", "def check(compare):\n\tassert compare([1, 7, 2, 8], [-3, 4, 7, 7]) == [4, 3, 5, 1]", "def check(compare):\n\tassert compare([4, 1, 5, 2, 3, 3], [5, 4, 3, 5, 3, 2]) == [1, 3, 2, 3, 0, 1]", "def check(compare):\n\tassert compare([3, 2, 4, 3, 3, 1], [1, 3, 5, 4, 2, 2]) == [2, 1, 1, 1, 1, 1]", "def check(compare):\n\tassert compare([2, 4, 8, 10], [1, 4, 5, 2]) == [1, 0, 3, 8]", "def check(compare):\n\tassert compare([1, 3, 2, 2, 3, 5], [3, 4, 2, 4, 6, -5]) == [2, 1, 0, 2, 3, 10]", "def check(compare):\n\tassert compare([2, 3, 3, 5, 2, 1], [4, 2, 1, 4, 1, 4]) == [2, 1, 2, 1, 1, 3]", "def check(compare):\n\tassert compare([1, 3, 1, 2, 9, 2], [5, 2, 1, 9, 7, -7]) == [4, 1, 0, 7, 2, 9]", "def check(compare):\n\tassert compare([3, 4, 3, 3, 4, 3], [5, 4, 1, 4, 3, 1]) == [2, 0, 2, 1, 1, 2]", "def check(compare):\n\tassert compare([6, 5, 2, 9, 4, 1], [5, 4, 3, 8, 7, -3]) == [1, 1, 1, 1, 3, 4]", "def check(compare):\n\tassert compare([6, 4, 3, 3, 2, 4], [4, 7, 6, 2, 4, 3]) == [2, 3, 3, 1, 2, 1]", "def check(compare):\n\tassert compare([2, 4, 1, 2, 5, 2], [2, 1, 3, 5, 5, 3]) == [0, 3, 2, 3, 0, 1]", "def check(compare):\n\tassert compare([2, 4, 8, 2, 3, 6], [6, 7, 1, 7, 2, 3]) == [4, 3, 7, 5, 1, 3]", "def check(compare):\n\tassert compare([3, 2, 7, 3], [3, 1, 2, 4]) == [0, 1, 5, 1]", "def check(compare):\n\tassert compare([6, 1, 2, 7], [-4, 2, 5, 2]) == [10, 1, 3, 5]", "def check(compare):\n\tassert compare([1, 6, 4], [-3, -7, -6]) == [4, 13, 10]", "def check(compare):\n\tassert compare([3, 2, 1], [2, -2, -1]) == [1, 4, 2]", "def check(compare):\n\tassert compare([6, 1, 4, 3], [0, 5, 5, 3]) == [6, 4, 1, 0]", "def check(compare):\n\tassert compare([3, 7, 1], [-6, 1, 1]) == [9, 6, 0]", "def check(compare):\n\tassert compare([4, 4, 4, 4, 1, 5], [2, 1, 5, 7, 6, 2]) == [2, 3, 1, 3, 5, 3]", "def check(compare):\n\tassert compare([6, 7, 6], [4, -3, 1]) == [2, 10, 5]", "def check(compare):\n\tassert compare([5, 2, 2, 8], [4, 2, 2, 6]) == [1, 0, 0, 2]", "def check(compare):\n\tassert compare([1, 2, 7, 3], [0, 5, 3, 1]) == [1, 3, 4, 2]", "def check(compare):\n\tassert compare([3, 2, 8, 7, 5, 2], [2, 4, 8, 7, 3, 2]) == [1, 2, 0, 0, 2, 0]", "def check(compare):\n\tassert compare([3, 4, 2, 9, 4, 1], [2, 4, 5, 2, 7, 3]) == [1, 0, 3, 7, 3, 2]", "def check(compare):\n\tassert compare([2, 6, 3, 8, 4, 3], [5, 1, 6, 2, 7, -5]) == [3, 5, 3, 6, 3, 8]", "def check(compare):\n\tassert compare([5, 5, 1, 4, 4, 1], [2, 1, 3, 3, 1, 1]) == [3, 4, 2, 1, 3, 0]", "def check(compare):\n\tassert compare([2, 5, 6, 2], [-4, 5, 7, 3]) == [6, 0, 1, 1]", "def check(compare):\n\tassert compare([6, 2, 1, 1, 9, 5], [5, 7, 5, 7, 2, -6]) == [1, 5, 4, 6, 7, 11]", "def check(compare):\n\tassert compare([5, 2, 5, 2, 1, 5], [4, 5, 1, 3, 1, 2]) == [1, 3, 4, 1, 0, 3]", "def check(compare):\n\tassert compare([3, 1, 7], [-1, -2, -1]) == [4, 3, 8]", "def check(compare):\n\tassert compare([3, 5, 1, 5, 2, 3], [5, 2, 3, 3, 5, -7]) == [2, 3, 2, 2, 3, 10]", "def check(compare):\n\tassert compare([3, 3, 3], [3, -6, 2]) == [0, 9, 1]", "def check(compare):\n\tassert compare([6, 7, 6, 3], [-2, 3, 4, 6]) == [8, 4, 2, 3]", "def check(compare):\n\tassert compare([6, 2, 2, 3], [-2, 5, 1, 7]) == [8, 3, 1, 4]", "def check(compare):\n\tassert compare([1, 2, 4], [-4, 3, 2]) == [5, 1, 2]", "def check(compare):\n\tassert compare([1, 4, 6, 3, 10, 1], [6, 6, 6, 9, 5, 3]) == [5, 2, 0, 6, 5, 2]", "def check(compare):\n\tassert compare([3, 6, 7, 10], [-3, 4, 5, 7]) == [6, 2, 2, 3]", "def check(compare):\n\tassert compare([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0]", "def check(compare):\n\tassert compare([1, 5, 5], [0, 3, 0]) == [1, 2, 5]", "def check(compare):\n\tassert compare([1, 5, 2, 3, 5, 2], [4, 3, 4, 1, 1, 1]) == [3, 2, 2, 2, 4, 1]", "def check(compare):\n\tassert compare([4, 6, 7, 5, 5, 2], [2, 7, 2, 5, 2, -5]) == [2, 1, 5, 0, 3, 7]", "def check(compare):\n\tassert compare([3, 1, 4, 7], [-6, 4, 5, 7]) == [9, 3, 1, 0]", "def check(compare):\n\tassert compare([2, 7, 2], [1, 3, 2]) == [1, 4, 0]", "def check(compare):\n\tassert compare([6, 7, 2], [-6, -2, -1]) == [12, 9, 3]", "def check(compare):\n\tassert compare([1, 4, 1, 1, 1, 5], [4, 2, 1, 1, 5, 5]) == [3, 2, 0, 0, 4, 0]", "def check(compare):\n\tassert compare([2, 1, 1], [0, -5, 2]) == [2, 6, 1]", "def check(compare):\n\tassert compare([2, 5, 2, 7], [2, 5, 7, 1]) == [0, 0, 5, 6]", "def check(compare):\n\tassert compare([5, 1, 6], [1, -3, -7]) == [4, 4, 13]", "def check(compare):\n\tassert compare([6, 1, 6, 7, 9, 4], [4, 7, 7, 9, 5, 3]) == [2, 6, 1, 2, 4, 1]", "def check(compare):\n\tassert compare([6, 4, 8, 7], [3, 3, 8, 9]) == [3, 1, 0, 2]", "def check(compare):\n\tassert compare([3, 7, 4, 10], [3, 3, 7, 4]) == [0, 4, 3, 6]", "def check(compare):\n\tassert compare([4, 1, 2, 5, 2, 5], [3, 1, 1, 1, 5, 4]) == [1, 0, 1, 4, 3, 1]", "def check(compare):\n\tassert compare([1, 2, 2, 1, 5, 3], [4, 5, 1, 2, 1, 2]) == [3, 3, 1, 1, 4, 1]", "def check(compare):\n\tassert compare([2, 5, 7], [0, -2, -4]) == [2, 7, 11]", "def check(compare):\n\tassert compare([5, 5, 2, 4, 1, 1], [5, 3, 4, 5, 1, 2]) == [0, 2, 2, 1, 0, 1]", "def check(compare):\n\tassert compare([3, 4, 2, 9, 10, 4], [5, 7, 7, 5, 1, 3]) == [2, 3, 5, 4, 9, 1]", "def check(compare):\n\tassert compare([6, 5, 8, 3, 1, 1], [3, 5, 3, 4, 4, -6]) == [3, 0, 5, 1, 3, 7]", "def check(compare):\n\tassert compare([2, 4, 1], [3, 2, 2]) == [1, 2, 1]", "def check(compare):\n\tassert compare([4, 6, 3, 1], [3, 5, 8, 6]) == [1, 1, 5, 5]", "def check(compare):\n\tassert compare([1, 2, 5, 2, 4, 4], [3, 2, 1, 2, 4, 1]) == [2, 0, 4, 0, 0, 3]", "def check(compare):\n\tassert compare([6, 5, 4, 3, 5, 3], [5, 6, 7, 5, 1, 3]) == [1, 1, 3, 2, 4, 0]", "def check(compare):\n\tassert compare([1, 6, 6], [4, -1, 0]) == [3, 7, 6]", "def check(compare):\n\tassert compare([5, 3, 8, 2], [-2, 4, 6, 3]) == [7, 1, 2, 1]", "def check(compare):\n\tassert compare([1,2,3],[-1,-2,-3])==[2,4,6]", "def check(compare):\n\tassert compare([2, 1, 4, 2, 1, 1], [3, 4, 1, 4, 1, 1]) == [1, 3, 3, 2, 0, 0]", "def check(compare):\n\tassert compare([5, 4, 2, 5, 10, 4], [3, 6, 8, 9, 6, 3]) == [2, 2, 6, 4, 4, 1]", "def check(compare):\n\tassert compare([1, 3, 4, 4, 1, 1], [4, 2, 4, 3, 1, 2]) == [3, 1, 0, 1, 0, 1]", "def check(compare):\n\tassert compare([2, 2, 4, 5, 2, 3], [5, 2, 2, 3, 4, 3]) == [3, 0, 2, 2, 2, 0]", "def check(compare):\n\tassert compare([2, 3, 3, 4], [-2, 2, 4, 6]) == [4, 1, 1, 2]", "def check(compare):\n\tassert compare([5, 5, 4, 3, 4, 5], [5, 5, 5, 2, 5, 4]) == [0, 0, 1, 1, 1, 1]", "def check(compare):\n\tassert compare([2, 5, 5, 6, 6, 2], [5, 2, 2, 3, 5, -5]) == [3, 3, 3, 3, 1, 7]", "def check(compare):\n\tassert compare([3, 1, 6, 2], [-4, 7, 8, 2]) == [7, 6, 2, 0]", "def check(compare):\n\tassert compare([2, 6, 5, 6], [4, 2, 5, 5]) == [2, 4, 0, 1]", "def check(compare):\n\tassert compare([1,2,3,5],[-1,2,3,4])==[2,0,0,1]", "def check(compare):\n\tassert compare([4, 5, 2, 7, 7, 6], [1, 3, 6, 8, 2, -5]) == [3, 2, 4, 1, 5, 11]", "def check(compare):\n\tassert compare([3, 4, 3, 3, 1, 1], [3, 3, 5, 4, 3, 4]) == [0, 1, 2, 1, 2, 3]", "def check(compare):\n\tassert compare([3, 3, 8], [4, 1, -8]) == [1, 2, 16]", "def check(compare):\n\tassert compare([4, 7, 7, 6], [-1, 5, 5, 9]) == [5, 2, 2, 3]", "def check(compare):\n\tassert compare([1, 2, 1, 10], [-5, 4, 3, 6]) == [6, 2, 2, 4]", "def check(compare):\n\tassert compare([4, 4, 3, 1, 3, 1], [1, 6, 3, 9, 1, -4]) == [3, 2, 0, 8, 2, 5]", "def check(compare):\n\tassert compare([6, 7, 7, 9, 9, 4], [1, 7, 4, 9, 6, -3]) == [5, 0, 3, 0, 3, 7]", "def check(compare):\n\tassert compare([1, 1, 2, 3, 5, 2], [4, 2, 5, 4, 4, 4]) == [3, 1, 3, 1, 1, 2]", "def check(compare):\n\tassert compare([3, 1, 4, 1, 5, 3], [3, 1, 4, 4, 2, 5]) == [0, 0, 0, 3, 3, 2]", "def check(compare):\n\tassert compare([2, 3, 6, 8, 9, 4], [3, 5, 8, 1, 5, 3]) == [1, 2, 2, 7, 4, 1]", "def check(compare):\n\tassert compare([1, 4, 5, 2, 2, 3], [3, 5, 4, 2, 1, 5]) == [2, 1, 1, 0, 1, 2]", "def check(compare):\n\tassert compare([2, 3, 3, 5, 5, 4], [5, 6, 1, 3, 7, 2]) == [3, 3, 2, 2, 2, 2]", "def check(compare):\n\tassert compare([5, 1, 3, 1], [-3, 5, 4, 2]) == [8, 4, 1, 1]", "def check(compare):\n\tassert compare([1, 4, 4, 3, 1, 4], [2, 5, 5, 2, 2, 3]) == [1, 1, 1, 1, 1, 1]", "def check(compare):\n\tassert compare([5, 5, 8, 7], [-3, 6, 3, 8]) == [8, 1, 5, 1]", "def check(compare):\n\tassert compare([5, 3, 3, 8], [-4, 4, 3, 7]) == [9, 1, 0, 1]", "def check(compare):\n\tassert compare([1, 4, 3], [-3, 3, -6]) == [4, 1, 9]", "def check(compare):\n\tassert compare([4, 2, 6], [-3, -2, 2]) == [7, 4, 4]", "def check(compare):\n\tassert compare([2, 4, 5, 1], [-5, 2, 6, 5]) == [7, 2, 1, 4]", "def check(compare):\n\tassert compare([3, 2, 1, 5, 2, 4], [2, 5, 4, 2, 3, 1]) == [1, 3, 3, 3, 1, 3]", "def check(compare):\n\tassert compare([2, 1, 6, 8], [-4, 3, 6, 1]) == [6, 2, 0, 7]", "def check(compare):\n\tassert compare([2, 5, 2, 4], [-5, 7, 4, 6]) == [7, 2, 2, 2]", "def check(compare):\n\tassert compare([2, 5, 4], [1, -5, -3]) == [1, 10, 7]", "def check(compare):\n\tassert compare([1, 6, 6, 1, 4, 5], [6, 1, 5, 3, 6, 2]) == [5, 5, 1, 2, 2, 3]", "def check(compare):\n\tassert compare([1, 5, 7], [-6, 3, -7]) == [7, 2, 14]", "def check(compare):\n\tassert compare([6, 2, 2], [-3, -1, 2]) == [9, 3, 0]", "def check(compare):\n\tassert compare([1, 3, 2, 1, 5, 5], [5, 4, 1, 2, 2, 5]) == [4, 1, 1, 1, 3, 0]", "def check(compare):\n\tassert compare([3, 3, 8, 4], [-3, 7, 3, 1]) == [6, 4, 5, 3]", "def check(compare):\n\tassert compare([3, 4, 2, 3, 3, 3], [2, 4, 1, 5, 3, 1]) == [1, 0, 1, 2, 0, 2]", "def check(compare):\n\tassert compare([2, 6, 8], [3, -2, -5]) == [1, 8, 13]", "def check(compare):\n\tassert compare([3, 3, 4, 2, 1, 2], [1, 4, 2, 3, 3, 4]) == [2, 1, 2, 1, 2, 2]", "def check(compare):\n\tassert compare([6, 7, 4], [1, 0, -2]) == [5, 7, 6]", "def check(compare):\n\tassert compare([5, 2, 8], [3, 2, 0]) == [2, 0, 8]", "def check(compare):\n\tassert compare([5, 7, 5, 5, 5, 4], [2, 4, 4, 5, 3, -3]) == [3, 3, 1, 0, 2, 7]", "def check(compare):\n\tassert compare([6, 6, 7, 7, 1, 2], [1, 2, 1, 9, 4, 2]) == [5, 4, 6, 2, 3, 0]"], "test_case_list": ["assert compare([3, 1, 5, 3, 9, 5], [6, 7, 4, 8, 4, -6]) == [3, 6, 1, 5, 5, 11]", "assert compare([4, 3, 1, 4, 2, 4], [2, 3, 4, 5, 3, 2]) == [2, 0, 3, 1, 1, 2]", "assert compare([5, 7, 3], [-6, 0, -2]) == [11, 7, 5]", "assert compare([4, 7, 6, 3, 7, 2], [4, 3, 7, 8, 7, -3]) == [0, 4, 1, 5, 0, 5]", "assert compare([5, 1, 4, 4, 2, 3], [3, 1, 3, 3, 2, 4]) == [2, 0, 1, 1, 0, 1]", "assert compare([4, 1, 2, 1], [0, 5, 6, 2]) == [4, 4, 4, 1]", "assert compare([1, 1, 3, 1, 3, 1], [5, 3, 1, 3, 2, 3]) == [4, 2, 2, 2, 1, 2]", "assert compare([6, 6, 8, 9], [-5, 6, 8, 7]) == [11, 0, 0, 2]", "assert compare([6, 3, 5, 9, 6, 1], [6, 1, 6, 4, 4, -5]) == [0, 2, 1, 5, 2, 6]", "assert compare([1, 3, 5, 2, 3, 4], [3, 2, 4, 3, 2, 2]) == [2, 1, 1, 1, 1, 2]", "assert compare([5, 3, 2, 2], [4, 1, 8, 5]) == [1, 2, 6, 3]", "assert compare([5, 7, 8], [2, -3, 0]) == [3, 10, 8]", "assert compare([1, 4, 3], [-5, 1, 2]) == [6, 3, 1]", "assert compare([5, 4, 3, 2, 2, 4], [3, 1, 3, 1, 5, 4]) == [2, 3, 0, 1, 3, 0]", "assert compare([1, 2, 3], [-1, -7, 0]) == [2, 9, 3]", "assert compare([6, 5, 7], [0, -3, -5]) == [6, 8, 12]", "assert compare([4, 5, 1, 1, 5, 3], [5, 4, 7, 2, 2, -3]) == [1, 1, 6, 1, 3, 6]", "assert compare([4, 4, 6], [-5, -3, 1]) == [9, 7, 5]", "assert compare([1, 2, 4, 2, 1, 4], [5, 4, 5, 4, 1, 2]) == [4, 2, 1, 2, 0, 2]", "assert compare([1, 1, 8], [-3, -6, 0]) == [4, 7, 8]", "assert compare([1, 3, 2, 9, 2, 4], [6, 2, 4, 3, 7, 1]) == [5, 1, 2, 6, 5, 3]", "assert compare([5, 1, 5], [3, 2, 0]) == [2, 1, 5]", "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3]", "assert compare([1, 7, 2, 8], [-3, 4, 7, 7]) == [4, 3, 5, 1]", "assert compare([4, 1, 5, 2, 3, 3], [5, 4, 3, 5, 3, 2]) == [1, 3, 2, 3, 0, 1]", "assert compare([3, 2, 4, 3, 3, 1], [1, 3, 5, 4, 2, 2]) == [2, 1, 1, 1, 1, 1]", "assert compare([2, 4, 8, 10], [1, 4, 5, 2]) == [1, 0, 3, 8]", "assert compare([1, 3, 2, 2, 3, 5], [3, 4, 2, 4, 6, -5]) == [2, 1, 0, 2, 3, 10]", "assert compare([2, 3, 3, 5, 2, 1], [4, 2, 1, 4, 1, 4]) == [2, 1, 2, 1, 1, 3]", "assert compare([1, 3, 1, 2, 9, 2], [5, 2, 1, 9, 7, -7]) == [4, 1, 0, 7, 2, 9]", "assert compare([3, 4, 3, 3, 4, 3], [5, 4, 1, 4, 3, 1]) == [2, 0, 2, 1, 1, 2]", "assert compare([6, 5, 2, 9, 4, 1], [5, 4, 3, 8, 7, -3]) == [1, 1, 1, 1, 3, 4]", "assert compare([6, 4, 3, 3, 2, 4], [4, 7, 6, 2, 4, 3]) == [2, 3, 3, 1, 2, 1]", "assert compare([2, 4, 1, 2, 5, 2], [2, 1, 3, 5, 5, 3]) == [0, 3, 2, 3, 0, 1]", "assert compare([2, 4, 8, 2, 3, 6], [6, 7, 1, 7, 2, 3]) == [4, 3, 7, 5, 1, 3]", "assert compare([3, 2, 7, 3], [3, 1, 2, 4]) == [0, 1, 5, 1]", "assert compare([6, 1, 2, 7], [-4, 2, 5, 2]) == [10, 1, 3, 5]", "assert compare([1, 6, 4], [-3, -7, -6]) == [4, 13, 10]", "assert compare([3, 2, 1], [2, -2, -1]) == [1, 4, 2]", "assert compare([6, 1, 4, 3], [0, 5, 5, 3]) == [6, 4, 1, 0]", "assert compare([3, 7, 1], [-6, 1, 1]) == [9, 6, 0]", "assert compare([4, 4, 4, 4, 1, 5], [2, 1, 5, 7, 6, 2]) == [2, 3, 1, 3, 5, 3]", "assert compare([6, 7, 6], [4, -3, 1]) == [2, 10, 5]", "assert compare([5, 2, 2, 8], [4, 2, 2, 6]) == [1, 0, 0, 2]", "assert compare([1, 2, 7, 3], [0, 5, 3, 1]) == [1, 3, 4, 2]", "assert compare([3, 2, 8, 7, 5, 2], [2, 4, 8, 7, 3, 2]) == [1, 2, 0, 0, 2, 0]", "assert compare([3, 4, 2, 9, 4, 1], [2, 4, 5, 2, 7, 3]) == [1, 0, 3, 7, 3, 2]", "assert compare([2, 6, 3, 8, 4, 3], [5, 1, 6, 2, 7, -5]) == [3, 5, 3, 6, 3, 8]", "assert compare([5, 5, 1, 4, 4, 1], [2, 1, 3, 3, 1, 1]) == [3, 4, 2, 1, 3, 0]", "assert compare([2, 5, 6, 2], [-4, 5, 7, 3]) == [6, 0, 1, 1]", "assert compare([6, 2, 1, 1, 9, 5], [5, 7, 5, 7, 2, -6]) == [1, 5, 4, 6, 7, 11]", "assert compare([5, 2, 5, 2, 1, 5], [4, 5, 1, 3, 1, 2]) == [1, 3, 4, 1, 0, 3]", "assert compare([3, 1, 7], [-1, -2, -1]) == [4, 3, 8]", "assert compare([3, 5, 1, 5, 2, 3], [5, 2, 3, 3, 5, -7]) == [2, 3, 2, 2, 3, 10]", "assert compare([3, 3, 3], [3, -6, 2]) == [0, 9, 1]", "assert compare([6, 7, 6, 3], [-2, 3, 4, 6]) == [8, 4, 2, 3]", "assert compare([6, 2, 2, 3], [-2, 5, 1, 7]) == [8, 3, 1, 4]", "assert compare([1, 2, 4], [-4, 3, 2]) == [5, 1, 2]", "assert compare([1, 4, 6, 3, 10, 1], [6, 6, 6, 9, 5, 3]) == [5, 2, 0, 6, 5, 2]", "assert compare([3, 6, 7, 10], [-3, 4, 5, 7]) == [6, 2, 2, 3]", "assert compare([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0]", "assert compare([1, 5, 5], [0, 3, 0]) == [1, 2, 5]", "assert compare([1, 5, 2, 3, 5, 2], [4, 3, 4, 1, 1, 1]) == [3, 2, 2, 2, 4, 1]", "assert compare([4, 6, 7, 5, 5, 2], [2, 7, 2, 5, 2, -5]) == [2, 1, 5, 0, 3, 7]", "assert compare([3, 1, 4, 7], [-6, 4, 5, 7]) == [9, 3, 1, 0]", "assert compare([2, 7, 2], [1, 3, 2]) == [1, 4, 0]", "assert compare([6, 7, 2], [-6, -2, -1]) == [12, 9, 3]", "assert compare([1, 4, 1, 1, 1, 5], [4, 2, 1, 1, 5, 5]) == [3, 2, 0, 0, 4, 0]", "assert compare([2, 1, 1], [0, -5, 2]) == [2, 6, 1]", "assert compare([2, 5, 2, 7], [2, 5, 7, 1]) == [0, 0, 5, 6]", "assert compare([5, 1, 6], [1, -3, -7]) == [4, 4, 13]", "assert compare([6, 1, 6, 7, 9, 4], [4, 7, 7, 9, 5, 3]) == [2, 6, 1, 2, 4, 1]", "assert compare([6, 4, 8, 7], [3, 3, 8, 9]) == [3, 1, 0, 2]", "assert compare([3, 7, 4, 10], [3, 3, 7, 4]) == [0, 4, 3, 6]", "assert compare([4, 1, 2, 5, 2, 5], [3, 1, 1, 1, 5, 4]) == [1, 0, 1, 4, 3, 1]", "assert compare([1, 2, 2, 1, 5, 3], [4, 5, 1, 2, 1, 2]) == [3, 3, 1, 1, 4, 1]", "assert compare([2, 5, 7], [0, -2, -4]) == [2, 7, 11]", "assert compare([5, 5, 2, 4, 1, 1], [5, 3, 4, 5, 1, 2]) == [0, 2, 2, 1, 0, 1]", "assert compare([3, 4, 2, 9, 10, 4], [5, 7, 7, 5, 1, 3]) == [2, 3, 5, 4, 9, 1]", "assert compare([6, 5, 8, 3, 1, 1], [3, 5, 3, 4, 4, -6]) == [3, 0, 5, 1, 3, 7]", "assert compare([2, 4, 1], [3, 2, 2]) == [1, 2, 1]", "assert compare([4, 6, 3, 1], [3, 5, 8, 6]) == [1, 1, 5, 5]", "assert compare([1, 2, 5, 2, 4, 4], [3, 2, 1, 2, 4, 1]) == [2, 0, 4, 0, 0, 3]", "assert compare([6, 5, 4, 3, 5, 3], [5, 6, 7, 5, 1, 3]) == [1, 1, 3, 2, 4, 0]", "assert compare([1, 6, 6], [4, -1, 0]) == [3, 7, 6]", "assert compare([5, 3, 8, 2], [-2, 4, 6, 3]) == [7, 1, 2, 1]", "assert compare([1,2,3],[-1,-2,-3])==[2,4,6]", "assert compare([2, 1, 4, 2, 1, 1], [3, 4, 1, 4, 1, 1]) == [1, 3, 3, 2, 0, 0]", "assert compare([5, 4, 2, 5, 10, 4], [3, 6, 8, 9, 6, 3]) == [2, 2, 6, 4, 4, 1]", "assert compare([1, 3, 4, 4, 1, 1], [4, 2, 4, 3, 1, 2]) == [3, 1, 0, 1, 0, 1]", "assert compare([2, 2, 4, 5, 2, 3], [5, 2, 2, 3, 4, 3]) == [3, 0, 2, 2, 2, 0]", "assert compare([2, 3, 3, 4], [-2, 2, 4, 6]) == [4, 1, 1, 2]", "assert compare([5, 5, 4, 3, 4, 5], [5, 5, 5, 2, 5, 4]) == [0, 0, 1, 1, 1, 1]", "assert compare([2, 5, 5, 6, 6, 2], [5, 2, 2, 3, 5, -5]) == [3, 3, 3, 3, 1, 7]", "assert compare([3, 1, 6, 2], [-4, 7, 8, 2]) == [7, 6, 2, 0]", "assert compare([2, 6, 5, 6], [4, 2, 5, 5]) == [2, 4, 0, 1]", "assert compare([1,2,3,5],[-1,2,3,4])==[2,0,0,1]", "assert compare([4, 5, 2, 7, 7, 6], [1, 3, 6, 8, 2, -5]) == [3, 2, 4, 1, 5, 11]", "assert compare([3, 4, 3, 3, 1, 1], [3, 3, 5, 4, 3, 4]) == [0, 1, 2, 1, 2, 3]", "assert compare([3, 3, 8], [4, 1, -8]) == [1, 2, 16]", "assert compare([4, 7, 7, 6], [-1, 5, 5, 9]) == [5, 2, 2, 3]", "assert compare([1, 2, 1, 10], [-5, 4, 3, 6]) == [6, 2, 2, 4]", "assert compare([4, 4, 3, 1, 3, 1], [1, 6, 3, 9, 1, -4]) == [3, 2, 0, 8, 2, 5]", "assert compare([6, 7, 7, 9, 9, 4], [1, 7, 4, 9, 6, -3]) == [5, 0, 3, 0, 3, 7]", "assert compare([1, 1, 2, 3, 5, 2], [4, 2, 5, 4, 4, 4]) == [3, 1, 3, 1, 1, 2]", "assert compare([3, 1, 4, 1, 5, 3], [3, 1, 4, 4, 2, 5]) == [0, 0, 0, 3, 3, 2]", "assert compare([2, 3, 6, 8, 9, 4], [3, 5, 8, 1, 5, 3]) == [1, 2, 2, 7, 4, 1]", "assert compare([1, 4, 5, 2, 2, 3], [3, 5, 4, 2, 1, 5]) == [2, 1, 1, 0, 1, 2]", "assert compare([2, 3, 3, 5, 5, 4], [5, 6, 1, 3, 7, 2]) == [3, 3, 2, 2, 2, 2]", "assert compare([5, 1, 3, 1], [-3, 5, 4, 2]) == [8, 4, 1, 1]", "assert compare([1, 4, 4, 3, 1, 4], [2, 5, 5, 2, 2, 3]) == [1, 1, 1, 1, 1, 1]", "assert compare([5, 5, 8, 7], [-3, 6, 3, 8]) == [8, 1, 5, 1]", "assert compare([5, 3, 3, 8], [-4, 4, 3, 7]) == [9, 1, 0, 1]", "assert compare([1, 4, 3], [-3, 3, -6]) == [4, 1, 9]", "assert compare([4, 2, 6], [-3, -2, 2]) == [7, 4, 4]", "assert compare([2, 4, 5, 1], [-5, 2, 6, 5]) == [7, 2, 1, 4]", "assert compare([3, 2, 1, 5, 2, 4], [2, 5, 4, 2, 3, 1]) == [1, 3, 3, 3, 1, 3]", "assert compare([2, 1, 6, 8], [-4, 3, 6, 1]) == [6, 2, 0, 7]", "assert compare([2, 5, 2, 4], [-5, 7, 4, 6]) == [7, 2, 2, 2]", "assert compare([2, 5, 4], [1, -5, -3]) == [1, 10, 7]", "assert compare([1, 6, 6, 1, 4, 5], [6, 1, 5, 3, 6, 2]) == [5, 5, 1, 2, 2, 3]", "assert compare([1, 5, 7], [-6, 3, -7]) == [7, 2, 14]", "assert compare([6, 2, 2], [-3, -1, 2]) == [9, 3, 0]", "assert compare([1, 3, 2, 1, 5, 5], [5, 4, 1, 2, 2, 5]) == [4, 1, 1, 1, 3, 0]", "assert compare([3, 3, 8, 4], [-3, 7, 3, 1]) == [6, 4, 5, 3]", "assert compare([3, 4, 2, 3, 3, 3], [2, 4, 1, 5, 3, 1]) == [1, 0, 1, 2, 0, 2]", "assert compare([2, 6, 8], [3, -2, -5]) == [1, 8, 13]", "assert compare([3, 3, 4, 2, 1, 2], [1, 4, 2, 3, 3, 4]) == [2, 1, 2, 1, 2, 2]", "assert compare([6, 7, 4], [1, 0, -2]) == [5, 7, 6]", "assert compare([5, 2, 8], [3, 2, 0]) == [2, 0, 8]", "assert compare([5, 7, 5, 5, 5, 4], [2, 4, 4, 5, 3, -3]) == [3, 3, 1, 0, 2, 7]", "assert compare([6, 6, 7, 7, 1, 2], [1, 2, 1, 9, 4, 2]) == [5, 4, 6, 2, 3, 0]"], "nl": "I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    ", "func": "def compare(game,guess):", "examples": "example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    ", "completion": "def compare(game, guess):\n    \"\"\"\n    We all know that feeling when the outcome of some eagerly anticipated event is finally revealed. \n    The feelings and thoughts you have at that moment are definitely worth noting down and comparing. \n    Your task is to determine if a person correctly guessed the results of a number of matches. \n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. \n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    example:\n        compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n        compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    # Validate Input\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    # Initialize Output Array\n    result = []\n    \n    # Iterate and Compare\n    for g, gs in zip(game, guess):\n        if not isinstance(g, (int, float)) or not isinstance(gs, (int, float)):\n            raise ValueError(\"All elements in input arrays must be numerical values.\")\n        # Store Results\n        result.append(0 if g == gs else abs(g - gs))\n    \n    # Return Output\n    return result\n", "completions": ["def compare(game, guess):\n    # Validate Input: Check if both input arrays are of equal length\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    # Initialize Result Array: Create an empty array to store the differences\n    result = []\n    \n    # Loop Through Arrays: Use a loop to iterate over the indices of the input arrays\n    for score, prediction in zip(game, guess):\n        # Compute Differences: Calculate the absolute difference between the score and the guess\n        difference = abs(score - prediction)\n        \n        # Update Result Array: Add the computed difference to the result array\n        result.append(difference)\n    \n    # Return Result: Return the result array containing the differences\n    return result\n", "def compare(game, guess):\n    # Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    # Step 2: Initialize an empty array 'result' to store the differences.\n    result = []\n    \n    # Step 3: Loop through each index of the arrays:\n    for i in range(len(game)):\n        # Calculate the absolute difference between 'game[i]' and 'guess[i]'.\n        difference = abs(game[i] - guess[i])\n        \n        # If 'game[i]' equals 'guess[i]', the difference is 0.\n        if game[i] == guess[i]:\n            difference = 0\n        \n        # Store the calculated difference in 'result[i]'.\n        result.append(difference)\n    \n    # Step 4: Return the 'result' array.\n    return result\n", "def compare(game, guess):\n    # Input Validation\n    if not isinstance(game, list) or not isinstance(guess, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    if len(game) != len(guess):\n        raise ValueError(\"Both lists must be of the same length.\")\n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise ValueError(\"All elements in both lists must be integers.\")\n    \n    # Initialize Result Array\n    result = []\n    \n    # Iterate and Compare\n    for score, prediction in zip(game, guess):\n        # Calculate and Store Differences\n        if score == prediction:\n            result.append(0)\n        else:\n            result.append(abs(score - prediction))\n    \n    # Return Result Array\n    return result\n", "def compare(game, guess):\n    # Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise ValueError(\"Input arrays must contain only integers.\")\n\n    # Step 2: Initialize an empty array 'result' to store the differences.\n    result = []\n\n    # Step 3: Loop through each index of the input arrays.\n    for i in range(len(game)):\n        # Step 4: For each index, calculate the absolute difference between the elements of 'game' and 'guess'.\n        difference = abs(game[i] - guess[i])\n\n        # Step 5: Store the calculated difference in the 'result' array. If the difference is 0, store 0.\n        result.append(difference)\n\n    # Step 6: After processing all indices, return the 'result' array.\n    return result\n", "def compare(game, guess):\n    # Step 1: Validate that both input arrays 'game' and 'guess' are of equal length and contain valid integer scores.\n    if not isinstance(game, list) or not isinstance(guess, list):\n        raise ValueError(\"Both 'game' and 'guess' should be lists.\")\n    if len(game) != len(guess):\n        raise ValueError(\"Both 'game' and 'guess' should be of equal length.\")\n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise ValueError(\"Both 'game' and 'guess' should contain only integers.\")\n\n    # Step 2: Initialize an empty array 'result' to store the differences.\n    result = []\n\n    # Step 3: Loop through each index of the arrays:\n    for g, gs in zip(game, guess):\n        # Calculate the absolute difference between the elements at the current index of 'game' and 'guess'.\n        difference = abs(g - gs)\n        # If the difference is 0, append 0 to 'result'. Otherwise, append the absolute difference.\n        result.append(difference)\n\n    # Step 4: Return the 'result' array.\n    return result\n", "def compare(game, guess):\n    \"\"\"\n    Determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was.\n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    Example:\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    # Validate Input\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    # Initialize Result Array\n    result = []\n    \n    # Iterate and Calculate\n    for g, gs in zip(game, guess):\n        result.append(abs(g - gs))\n    \n    # Return Result\n    return result\n", "def compare(game, guess):\n    # Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise ValueError(\"Input arrays must contain only integers.\")\n    \n    # Step 2: Initialize an empty array 'result' to store the differences.\n    result = []\n    \n    # Step 3: Loop through each index of the 'game' and 'guess' arrays.\n    for g, q in zip(game, guess):\n        # Step 4: For each index, calculate the absolute difference between the elements of 'game' and 'guess'.\n        difference = abs(g - q)\n        \n        # Step 5: Store the calculated difference in the 'result' array. If the difference is 0, store 0.\n        result.append(difference)\n    \n    # Step 6: After processing all indices, return the 'result' array.\n    return result\n", "def compare(game, guess):\n    # Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\n    if len(game) != len(guess):\n        raise ValueError(\"The 'game' and 'guess' arrays must be of equal length.\")\n    \n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise ValueError(\"Both 'game' and 'guess' arrays must contain only integers.\")\n    \n    # Step 2: Initialize an empty array 'result' to store the differences.\n    result = []\n    \n    # Step 3: Loop through each index of the arrays:\n    for g, gs in zip(game, guess):\n        # Calculate the absolute difference between 'game[i]' and 'guess[i]'.\n        difference = abs(g - gs)\n        \n        # If the difference is 0, append 0 to 'result'.\n        # Otherwise, append the absolute difference to 'result'.\n        result.append(difference)\n    \n    # Step 4: Return the 'result' array.\n    return result\n", "def compare(game, guess):\n    # Validate Input\n    if len(game) != len(guess):\n        raise ValueError(\"The input arrays must be of equal length.\")\n    \n    # Initialize Result Array\n    result = []\n    \n    # Iterate and Compare\n    for score, prediction in zip(game, guess):\n        difference = abs(score - prediction)\n        result.append(difference)\n    \n    # Return Result Array\n    return result\n\n# Example usage:\n# print(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))  # Output: [0, 0, 0, 0, 3, 3]\n# print(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]))  # Output: [4, 4, 1, 0, 0, 6]\n", "def compare(game, guess):\n    \"\"\"\n    We all know that feeling when the outcome of some eagerly anticipated event is finally revealed. \n    The feelings and thoughts you have at that moment are definitely worth noting down and comparing. \n    Your task is to determine if a person correctly guessed the results of a number of matches. \n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. \n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    example:\n        compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n        compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    # Validate Input\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    # Initialize Output Array\n    result = []\n    \n    # Iterate and Compare\n    for g, gs in zip(game, guess):\n        if not isinstance(g, (int, float)) or not isinstance(gs, (int, float)):\n            raise ValueError(\"All elements in input arrays must be numerical values.\")\n        # Store Results\n        result.append(0 if g == gs else abs(g - gs))\n    \n    # Return Output\n    return result\n"], "session_history": {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Input Validation\",\n      \"description\": \"Ensure that both input arrays 'game' and 'guess' are of equal length and contain valid numerical values.\"\n    },\n    {\n      \"subproblem\": \"Comparison Logic\",\n      \"description\": \"Iterate through each index of the arrays and compare the values. Calculate the absolute difference if the values are not equal.\"\n    },\n    {\n      \"subproblem\": \"Output Construction\",\n      \"description\": \"Construct an output array that contains the results of the comparison for each index.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Receive Input\",\n      \"description\": \"Accept two arrays 'game' and 'guess' as input parameters.\"\n    },\n    {\n      \"step\": \"Validate Input\",\n      \"description\": \"Check if both arrays are of equal length and contain valid numerical values.\"\n    },\n    {\n      \"step\": \"Initialize Output Array\",\n      \"description\": \"Create an empty array to store the results of the comparison.\"\n    },\n    {\n      \"step\": \"Iterate and Compare\",\n      \"description\": \"Loop through each index of the arrays, compare the values, and calculate the absolute difference if they are not equal.\"\n    },\n    {\n      \"step\": \"Store Results\",\n      \"description\": \"Store the result (0 or absolute difference) in the output array for each index.\"\n    },\n    {\n      \"step\": \"Return Output\",\n      \"description\": \"Return the output array containing the comparison results.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    \"\"\"\n    We all know that feeling when the outcome of some eagerly anticipated event is finally revealed. \n    The feelings and thoughts you have at that moment are definitely worth noting down and comparing. \n    Your task is to determine if a person correctly guessed the results of a number of matches. \n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. \n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    example:\n        compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n        compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    # Validate Input\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    # Initialize Output Array\n    result = []\n    \n    # Iterate and Compare\n    for g, gs in zip(game, guess):\n        if not isinstance(g, (int, float)) or not isinstance(gs, (int, float)):\n            raise ValueError(\"All elements in input arrays must be numerical values.\")\n        # Store Results\n        result.append(0 if g == gs else abs(g - gs))\n    \n    # Return Output\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Input Validation\",\n      \"description\": \"Ensure that the input consists of two arrays of equal length containing integers.\"\n    },\n    {\n      \"subproblem\": \"Iterate Over Arrays\",\n      \"description\": \"Loop through each index of the arrays to compare the corresponding elements.\"\n    },\n    {\n      \"subproblem\": \"Calculate Difference\",\n      \"description\": \"For each index, calculate the absolute difference between the score and the guess.\"\n    },\n    {\n      \"subproblem\": \"Store Results\",\n      \"description\": \"Store the calculated difference in a new array at the corresponding index.\"\n    },\n    {\n      \"subproblem\": \"Return Result Array\",\n      \"description\": \"Return the array containing the differences for each match.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Validate Input\",\n      \"description\": \"Check if both input arrays are of equal length and contain valid integer values.\"\n    },\n    {\n      \"step\": \"Initialize Result Array\",\n      \"description\": \"Create an empty array to store the differences.\"\n    },\n    {\n      \"step\": \"Loop Through Arrays\",\n      \"description\": \"Use a loop to iterate over the indices of the input arrays.\"\n    },\n    {\n      \"step\": \"Compute Differences\",\n      \"description\": \"For each index, compute the absolute difference between the score and the guess.\"\n    },\n    {\n      \"step\": \"Update Result Array\",\n      \"description\": \"Add the computed difference to the result array at the current index.\"\n    },\n    {\n      \"step\": \"Return Result\",\n      \"description\": \"Return the result array containing the differences.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    # Validate Input: Check if both input arrays are of equal length\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    # Initialize Result Array: Create an empty array to store the differences\n    result = []\n    \n    # Loop Through Arrays: Use a loop to iterate over the indices of the input arrays\n    for score, prediction in zip(game, guess):\n        # Compute Differences: Calculate the absolute difference between the score and the guess\n        difference = abs(score - prediction)\n        \n        # Update Result Array: Add the computed difference to the result array\n        result.append(difference)\n    \n    # Return Result: Return the result array containing the differences\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate input arrays\",\n      \"details\": \"Ensure that both input arrays 'game' and 'guess' are of equal length and contain only integers.\"\n    },\n    {\n      \"description\": \"Initialize result array\",\n      \"details\": \"Create an empty array 'result' to store the differences between 'game' and 'guess'.\"\n    },\n    {\n      \"description\": \"Calculate differences\",\n      \"details\": \"Iterate over the indices of the arrays. For each index, calculate the absolute difference between the corresponding elements of 'game' and 'guess'. If they are equal, the difference is 0.\"\n    },\n    {\n      \"description\": \"Store results\",\n      \"details\": \"Store the calculated difference in the 'result' array at the corresponding index.\"\n    },\n    {\n      \"description\": \"Return result array\",\n      \"details\": \"Return the 'result' array containing the differences for each match.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\",\n    \"Step 2: Initialize an empty array 'result' to store the differences.\",\n    \"Step 3: Loop through each index of the arrays:\",\n    \"  - Calculate the absolute difference between 'game[i]' and 'guess[i]'.\",\n    \"  - If 'game[i]' equals 'guess[i]', the difference is 0.\",\n    \"  - Store the calculated difference in 'result[i]'.\",\n    \"Step 4: Return the 'result' array.\"\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    # Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    # Step 2: Initialize an empty array 'result' to store the differences.\n    result = []\n    \n    # Step 3: Loop through each index of the arrays:\n    for i in range(len(game)):\n        # Calculate the absolute difference between 'game[i]' and 'guess[i]'.\n        difference = abs(game[i] - guess[i])\n        \n        # If 'game[i]' equals 'guess[i]', the difference is 0.\n        if game[i] == guess[i]:\n            difference = 0\n        \n        # Store the calculated difference in 'result[i]'.\n        result.append(difference)\n    \n    # Step 4: Return the 'result' array.\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Input Validation\",\n      \"description\": \"Ensure that the input consists of two arrays of equal length containing integers.\"\n    },\n    {\n      \"subproblem\": \"Iterate Over Arrays\",\n      \"description\": \"Loop through each index of the arrays to compare the corresponding elements.\"\n    },\n    {\n      \"subproblem\": \"Calculate Difference\",\n      \"description\": \"For each pair of elements, calculate the absolute difference if they are not equal, otherwise return 0.\"\n    },\n    {\n      \"subproblem\": \"Store Results\",\n      \"description\": \"Store the calculated differences in a new array.\"\n    },\n    {\n      \"subproblem\": \"Return Result\",\n      \"description\": \"Return the array containing the differences.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Validation\",\n      \"description\": \"Check if both input arrays are of equal length and contain valid integer values.\"\n    },\n    {\n      \"step\": \"Initialize Result Array\",\n      \"description\": \"Create an empty array to store the results of the comparisons.\"\n    },\n    {\n      \"step\": \"Iterate and Compare\",\n      \"description\": \"Use a loop to iterate over the indices of the arrays, comparing each pair of elements.\"\n    },\n    {\n      \"step\": \"Calculate and Store Differences\",\n      \"description\": \"For each pair, calculate the absolute difference if they are not equal, otherwise store 0 in the result array.\"\n    },\n    {\n      \"step\": \"Return Result Array\",\n      \"description\": \"Return the result array containing the differences.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    # Input Validation\n    if not isinstance(game, list) or not isinstance(guess, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    if len(game) != len(guess):\n        raise ValueError(\"Both lists must be of the same length.\")\n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise ValueError(\"All elements in both lists must be integers.\")\n    \n    # Initialize Result Array\n    result = []\n    \n    # Iterate and Compare\n    for score, prediction in zip(game, guess):\n        # Calculate and Store Differences\n        if score == prediction:\n            result.append(0)\n        else:\n            result.append(abs(score - prediction))\n    \n    # Return Result Array\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate input arrays\",\n      \"details\": \"Ensure that both 'game' and 'guess' arrays are of equal length and contain only integers.\"\n    },\n    {\n      \"description\": \"Initialize result array\",\n      \"details\": \"Create an empty array 'result' of the same length as the input arrays to store the differences.\"\n    },\n    {\n      \"description\": \"Calculate differences\",\n      \"details\": \"Iterate over the indices of the arrays. For each index, calculate the absolute difference between the corresponding elements of 'game' and 'guess'.\"\n    },\n    {\n      \"description\": \"Store results\",\n      \"details\": \"If the guess is correct (i.e., the difference is 0), store 0 in the 'result' array at the current index. Otherwise, store the calculated absolute difference.\"\n    },\n    {\n      \"description\": \"Return result array\",\n      \"details\": \"Return the 'result' array containing the differences for each match.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\",\n    \"Step 2: Initialize an empty array 'result' to store the differences.\",\n    \"Step 3: Loop through each index of the input arrays.\",\n    \"Step 4: For each index, calculate the absolute difference between the elements of 'game' and 'guess'.\",\n    \"Step 5: Store the calculated difference in the 'result' array. If the difference is 0, store 0.\",\n    \"Step 6: After processing all indices, return the 'result' array.\"\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    # Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise ValueError(\"Input arrays must contain only integers.\")\n\n    # Step 2: Initialize an empty array 'result' to store the differences.\n    result = []\n\n    # Step 3: Loop through each index of the input arrays.\n    for i in range(len(game)):\n        # Step 4: For each index, calculate the absolute difference between the elements of 'game' and 'guess'.\n        difference = abs(game[i] - guess[i])\n\n        # Step 5: Store the calculated difference in the 'result' array. If the difference is 0, store 0.\n        result.append(difference)\n\n    # Step 6: After processing all indices, return the 'result' array.\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate input arrays\",\n      \"details\": \"Ensure that both 'game' and 'guess' are arrays of equal length and contain only integers.\"\n    },\n    {\n      \"description\": \"Initialize result array\",\n      \"details\": \"Create an empty array 'result' to store the differences between 'game' and 'guess'.\"\n    },\n    {\n      \"description\": \"Calculate differences\",\n      \"details\": \"Iterate over the indices of the arrays. For each index, calculate the absolute difference between the corresponding elements of 'game' and 'guess'.\"\n    },\n    {\n      \"description\": \"Store results\",\n      \"details\": \"If the guess is correct (i.e., the difference is 0), store 0 in the 'result' array. Otherwise, store the calculated absolute difference.\"\n    },\n    {\n      \"description\": \"Return result array\",\n      \"details\": \"Return the 'result' array containing the differences for each match.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Validate that both input arrays 'game' and 'guess' are of equal length and contain valid integer scores.\",\n    \"Step 2: Initialize an empty array 'result' to store the differences.\",\n    \"Step 3: Loop through each index of the arrays:\",\n    \"  - Calculate the absolute difference between the elements at the current index of 'game' and 'guess'.\",\n    \"  - If the difference is 0, append 0 to 'result'. Otherwise, append the absolute difference.\",\n    \"Step 4: Return the 'result' array.\"\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    # Step 1: Validate that both input arrays 'game' and 'guess' are of equal length and contain valid integer scores.\n    if not isinstance(game, list) or not isinstance(guess, list):\n        raise ValueError(\"Both 'game' and 'guess' should be lists.\")\n    if len(game) != len(guess):\n        raise ValueError(\"Both 'game' and 'guess' should be of equal length.\")\n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise ValueError(\"Both 'game' and 'guess' should contain only integers.\")\n\n    # Step 2: Initialize an empty array 'result' to store the differences.\n    result = []\n\n    # Step 3: Loop through each index of the arrays:\n    for g, gs in zip(game, guess):\n        # Calculate the absolute difference between the elements at the current index of 'game' and 'guess'.\n        difference = abs(g - gs)\n        # If the difference is 0, append 0 to 'result'. Otherwise, append the absolute difference.\n        result.append(difference)\n\n    # Step 4: Return the 'result' array.\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Input Validation\",\n      \"description\": \"Ensure that both input arrays 'game' and 'guess' are of equal length and contain valid numerical values.\"\n    },\n    {\n      \"subproblem\": \"Calculate Differences\",\n      \"description\": \"Iterate through the arrays and calculate the absolute difference between corresponding elements of 'game' and 'guess'.\"\n    },\n    {\n      \"subproblem\": \"Output Result\",\n      \"description\": \"Store the calculated differences in a new array and return this array as the output.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Receive Input\",\n      \"description\": \"Accept two arrays 'game' and 'guess' as input parameters.\"\n    },\n    {\n      \"step\": \"Validate Input\",\n      \"description\": \"Check if both arrays are of equal length and contain valid numerical values. If not, handle the error appropriately.\"\n    },\n    {\n      \"step\": \"Initialize Result Array\",\n      \"description\": \"Create an empty array to store the differences.\"\n    },\n    {\n      \"step\": \"Iterate and Calculate\",\n      \"description\": \"Loop through each index of the arrays, calculate the absolute difference between 'game[i]' and 'guess[i]', and store the result in the result array.\"\n    },\n    {\n      \"step\": \"Return Result\",\n      \"description\": \"Return the result array containing the differences.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    \"\"\"\n    Determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was.\n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    Example:\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    # Validate Input\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    # Initialize Result Array\n    result = []\n    \n    # Iterate and Calculate\n    for g, gs in zip(game, guess):\n        result.append(abs(g - gs))\n    \n    # Return Result\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate input arrays\",\n      \"details\": \"Ensure that both 'game' and 'guess' arrays are of equal length and contain only integers.\"\n    },\n    {\n      \"description\": \"Initialize result array\",\n      \"details\": \"Create an empty array 'result' of the same length as the input arrays to store the differences.\"\n    },\n    {\n      \"description\": \"Calculate differences\",\n      \"details\": \"Iterate through each index of the arrays. For each index, calculate the absolute difference between the corresponding elements of 'game' and 'guess'.\"\n    },\n    {\n      \"description\": \"Store results\",\n      \"details\": \"If the guess is correct (i.e., the difference is 0), store 0 in the 'result' array at the same index. Otherwise, store the calculated difference.\"\n    },\n    {\n      \"description\": \"Return result array\",\n      \"details\": \"Return the 'result' array containing the differences for each match.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\",\n    \"Step 2: Initialize an empty array 'result' to store the differences.\",\n    \"Step 3: Loop through each index of the 'game' and 'guess' arrays.\",\n    \"Step 4: For each index, calculate the absolute difference between the elements of 'game' and 'guess'.\",\n    \"Step 5: Store the calculated difference in the 'result' array. If the difference is 0, store 0.\",\n    \"Step 6: After processing all indices, return the 'result' array.\"\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    # Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise ValueError(\"Input arrays must contain only integers.\")\n    \n    # Step 2: Initialize an empty array 'result' to store the differences.\n    result = []\n    \n    # Step 3: Loop through each index of the 'game' and 'guess' arrays.\n    for g, q in zip(game, guess):\n        # Step 4: For each index, calculate the absolute difference between the elements of 'game' and 'guess'.\n        difference = abs(g - q)\n        \n        # Step 5: Store the calculated difference in the 'result' array. If the difference is 0, store 0.\n        result.append(difference)\n    \n    # Step 6: After processing all indices, return the 'result' array.\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate input arrays\",\n      \"details\": \"Ensure that both 'game' and 'guess' arrays are of equal length and contain only integers.\"\n    },\n    {\n      \"description\": \"Initialize result array\",\n      \"details\": \"Create an empty array 'result' to store the differences between 'game' and 'guess'.\"\n    },\n    {\n      \"description\": \"Calculate differences\",\n      \"details\": \"Iterate over the indices of the arrays. For each index, calculate the absolute difference between the corresponding elements of 'game' and 'guess'.\"\n    },\n    {\n      \"description\": \"Store results\",\n      \"details\": \"If the guess is correct (i.e., the difference is 0), store 0 in the 'result' array. Otherwise, store the calculated absolute difference.\"\n    },\n    {\n      \"description\": \"Return result array\",\n      \"details\": \"Return the 'result' array containing the differences for each match.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\",\n    \"Step 2: Initialize an empty array 'result' to store the differences.\",\n    \"Step 3: Loop through each index of the arrays:\",\n    \"  - Calculate the absolute difference between 'game[i]' and 'guess[i]'.\",\n    \"  - If the difference is 0, append 0 to 'result'.\",\n    \"  - Otherwise, append the absolute difference to 'result'.\",\n    \"Step 4: Return the 'result' array.\"\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    # Step 1: Validate that the input arrays 'game' and 'guess' are of equal length and contain valid integer values.\n    if len(game) != len(guess):\n        raise ValueError(\"The 'game' and 'guess' arrays must be of equal length.\")\n    \n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise ValueError(\"Both 'game' and 'guess' arrays must contain only integers.\")\n    \n    # Step 2: Initialize an empty array 'result' to store the differences.\n    result = []\n    \n    # Step 3: Loop through each index of the arrays:\n    for g, gs in zip(game, guess):\n        # Calculate the absolute difference between 'game[i]' and 'guess[i]'.\n        difference = abs(g - gs)\n        \n        # If the difference is 0, append 0 to 'result'.\n        # Otherwise, append the absolute difference to 'result'.\n        result.append(difference)\n    \n    # Step 4: Return the 'result' array.\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Input Validation\",\n      \"description\": \"Ensure that the input consists of two arrays of equal length containing numerical values.\"\n    },\n    {\n      \"subproblem\": \"Iterate Over Arrays\",\n      \"description\": \"Loop through each index of the arrays to compare the corresponding elements.\"\n    },\n    {\n      \"subproblem\": \"Calculate Difference\",\n      \"description\": \"For each pair of elements, calculate the absolute difference between the score and the guess.\"\n    },\n    {\n      \"subproblem\": \"Store Results\",\n      \"description\": \"Store the calculated difference in a new array at the corresponding index.\"\n    },\n    {\n      \"subproblem\": \"Return Result\",\n      \"description\": \"Return the array containing the differences.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Receive Input\",\n      \"description\": \"Receive two arrays as input parameters: 'game' and 'guess'.\"\n    },\n    {\n      \"step\": \"Validate Input\",\n      \"description\": \"Check if both arrays are of equal length and contain valid numerical values.\"\n    },\n    {\n      \"step\": \"Initialize Result Array\",\n      \"description\": \"Create an empty array to store the differences.\"\n    },\n    {\n      \"step\": \"Iterate and Compare\",\n      \"description\": \"Loop through each index of the arrays, calculate the absolute difference between the elements, and store the result in the result array.\"\n    },\n    {\n      \"step\": \"Return Result Array\",\n      \"description\": \"Return the result array containing the differences.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    # Validate Input\n    if len(game) != len(guess):\n        raise ValueError(\"The input arrays must be of equal length.\")\n    \n    # Initialize Result Array\n    result = []\n    \n    # Iterate and Compare\n    for score, prediction in zip(game, guess):\n        difference = abs(score - prediction)\n        result.append(difference)\n    \n    # Return Result Array\n    return result\n\n# Example usage:\n# print(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))  # Output: [0, 0, 0, 0, 3, 3]\n# print(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]))  # Output: [4, 4, 1, 0, 0, 6]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Input Validation\",\n      \"description\": \"Ensure that both input arrays 'game' and 'guess' are of equal length and contain valid numerical values.\"\n    },\n    {\n      \"subproblem\": \"Comparison Logic\",\n      \"description\": \"Iterate through each index of the arrays and compare the values. Calculate the absolute difference if the values are not equal.\"\n    },\n    {\n      \"subproblem\": \"Output Construction\",\n      \"description\": \"Construct an output array that contains the results of the comparison for each index.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Receive Input\",\n      \"description\": \"Accept two arrays 'game' and 'guess' as input parameters.\"\n    },\n    {\n      \"step\": \"Validate Input\",\n      \"description\": \"Check if both arrays are of equal length and contain valid numerical values.\"\n    },\n    {\n      \"step\": \"Initialize Output Array\",\n      \"description\": \"Create an empty array to store the results of the comparison.\"\n    },\n    {\n      \"step\": \"Iterate and Compare\",\n      \"description\": \"Loop through each index of the arrays, compare the values, and calculate the absolute difference if they are not equal.\"\n    },\n    {\n      \"step\": \"Store Results\",\n      \"description\": \"Store the result (0 or absolute difference) in the output array for each index.\"\n    },\n    {\n      \"step\": \"Return Output\",\n      \"description\": \"Return the output array containing the comparison results.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def compare(game, guess):\n    \"\"\"\n    We all know that feeling when the outcome of some eagerly anticipated event is finally revealed. \n    The feelings and thoughts you have at that moment are definitely worth noting down and comparing. \n    Your task is to determine if a person correctly guessed the results of a number of matches. \n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. \n    If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    example:\n        compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n        compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    # Validate Input\n    if len(game) != len(guess):\n        raise ValueError(\"Input arrays must be of equal length.\")\n    \n    # Initialize Output Array\n    result = []\n    \n    # Iterate and Compare\n    for g, gs in zip(game, guess):\n        if not isinstance(g, (int, float)) or not isinstance(gs, (int, float)):\n            raise ValueError(\"All elements in input arrays must be numerical values.\")\n        # Store Results\n        result.append(0 if g == gs else abs(g - gs))\n    \n    # Return Output\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [132, 132, 132, 132, 132, 132, 132, 132, 132, 132], "passed": true, "pass": true, "pass_num": 10, "round": 212, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 213}
