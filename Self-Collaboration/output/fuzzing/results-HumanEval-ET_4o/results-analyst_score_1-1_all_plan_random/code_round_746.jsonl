{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Provide the unique common elements from two lists in a sorted manner.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Step 3: Find the intersection of the two sets to get common elements.\n    common_elements = set1.intersection(set2)\n    \n    # Step 4: Convert the resulting set of common elements back to a list.\n    common_list = list(common_elements)\n    \n    # Step 5: Sort the list of common elements.\n    common_list.sort()\n    \n    # Step 6: Return the sorted list of unique common elements.\n    return common_list\n", "completions": ["def common(l1: list, l2: list):\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to facilitate finding common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list of common elements in ascending order\n    common_list.sort()\n    \n    # Return the sorted list of unique common elements\n    return common_list\n", "def common(l1: list, l2: list):\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to facilitate finding common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list of common elements\n    common_list.sort()\n    \n    # Return the sorted list of unique common elements\n    return common_list\n", "def common(l1: list, l2: list):\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to facilitate finding common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list to ensure the elements are unique\n    unique_common_elements = list(common_elements)\n    \n    # Sort the list of unique common elements in ascending order\n    unique_common_elements.sort()\n    \n    # Return the sorted list as the output\n    return unique_common_elements\n", "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Step 3: Find the intersection of the two sets to get common elements.\n    common_elements = set1.intersection(set2)\n    \n    # Step 4: Convert the resulting set of common elements back to a list.\n    common_list = list(common_elements)\n    \n    # Step 5: Sort the list of common elements.\n    common_list.sort()\n    \n    # Step 6: Return the sorted list of unique common elements.\n    return common_list\n", "def common(l1: list, l2: list):\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Step 3: Find the intersection of the two sets to get common elements.\n    common_elements = set1.intersection(set2)\n    \n    # Step 4: Convert the resulting set of common elements back to a list.\n    common_list = list(common_elements)\n    \n    # Step 5: Sort the list of common elements.\n    common_list.sort()\n    \n    # Step 6: Return the sorted list of unique common elements.\n    return common_list\n", "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to facilitate finding common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list to ensure the elements are unique\n    unique_common_elements = list(common_elements)\n    \n    # Sort the list of unique common elements\n    unique_common_elements.sort()\n    \n    # Return the sorted list\n    return unique_common_elements\n", "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 2: Convert both lists to sets to facilitate finding common elements.\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Step 3: Find the intersection of the two sets to get common elements.\n    common_elements = set1.intersection(set2)\n    \n    # Step 4: Convert the intersection set back to a list to ensure the result is a list.\n    common_list = list(common_elements)\n    \n    # Step 5: Sort the list of common elements.\n    common_list.sort()\n    \n    # Step 6: Return the sorted list of unique common elements.\n    return common_list\n", "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both input lists to sets\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection result to a list and sort it\n    result = sorted(list(common_elements))\n    \n    # Return the sorted list of unique common elements\n    return result\n", "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to eliminate duplicates and facilitate finding common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the resulting set of common elements back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list of common elements\n    common_list.sort()\n    \n    # Return the sorted list of unique common elements\n    return common_list\n", "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Step 3: Find the intersection of the two sets to get common elements.\n    common_elements = set1.intersection(set2)\n    \n    # Step 4: Convert the resulting set of common elements back to a list.\n    common_list = list(common_elements)\n    \n    # Step 5: Sort the list of common elements.\n    common_list.sort()\n    \n    # Step 6: Return the sorted list of unique common elements.\n    return common_list\n"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the common elements between the two lists.\",\n    \"Ensure the common elements are unique.\",\n    \"Sort the unique common elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Accept two lists as input parameters.\",\n    \"Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\",\n    \"Step 3: Find the intersection of the two sets to get common elements.\",\n    \"Step 4: Convert the resulting set of common elements back to a list.\",\n    \"Step 5: Sort the list of common elements.\",\n    \"Step 6: Return the sorted list of unique common elements.\"\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Step 3: Find the intersection of the two sets to get common elements.\n    common_elements = set1.intersection(set2)\n    \n    # Step 4: Convert the resulting set of common elements back to a list.\n    common_list = list(common_elements)\n    \n    # Step 5: Sort the list of common elements.\n    common_list.sort()\n    \n    # Step 6: Return the sorted list of unique common elements.\n    return common_list\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the common elements between the two lists.\",\n    \"Ensure the common elements are unique.\",\n    \"Sort the unique common elements in ascending order.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Accept two lists as input parameters.\",\n    \"Step 2: Convert both lists to sets to facilitate finding common elements.\",\n    \"Step 3: Find the intersection of the two sets to get common elements.\",\n    \"Step 4: Convert the intersection set back to a list to ensure the result is a list.\",\n    \"Step 5: Sort the list of common elements in ascending order.\",\n    \"Step 6: Return the sorted list of unique common elements.\"\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list):\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to facilitate finding common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list of common elements in ascending order\n    common_list.sort()\n    \n    # Return the sorted list of unique common elements\n    return common_list\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the common elements between the two lists.\",\n    \"Ensure the common elements are unique.\",\n    \"Sort the unique common elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Accept two lists as input parameters.\",\n    \"Step 2: Convert both lists to sets to facilitate finding common elements.\",\n    \"Step 3: Find the intersection of the two sets to get common elements.\",\n    \"Step 4: Convert the intersection set back to a list to ensure the result is a list.\",\n    \"Step 5: Sort the list of common elements.\",\n    \"Step 6: Return the sorted list of unique common elements.\"\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list):\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to facilitate finding common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list of common elements\n    common_list.sort()\n    \n    # Return the sorted list of unique common elements\n    return common_list\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the common elements between the two lists.\",\n    \"Ensure the common elements are unique.\",\n    \"Sort the unique common elements in ascending order.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Accept two lists as input parameters.\",\n    \"Step 2: Convert both lists to sets to facilitate finding common elements.\",\n    \"Step 3: Find the intersection of the two sets to get common elements.\",\n    \"Step 4: Convert the intersection set back to a list to ensure the elements are unique.\",\n    \"Step 5: Sort the list of unique common elements in ascending order.\",\n    \"Step 6: Return the sorted list as the output.\"\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list):\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to facilitate finding common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list to ensure the elements are unique\n    unique_common_elements = list(common_elements)\n    \n    # Sort the list of unique common elements in ascending order\n    unique_common_elements.sort()\n    \n    # Return the sorted list as the output\n    return unique_common_elements\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the common elements between the two lists.\",\n    \"Ensure the common elements are unique.\",\n    \"Sort the unique common elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Accept two lists as input parameters.\",\n    \"Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\",\n    \"Step 3: Find the intersection of the two sets to get common elements.\",\n    \"Step 4: Convert the resulting set of common elements back to a list.\",\n    \"Step 5: Sort the list of common elements.\",\n    \"Step 6: Return the sorted list of unique common elements.\"\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Step 3: Find the intersection of the two sets to get common elements.\n    common_elements = set1.intersection(set2)\n    \n    # Step 4: Convert the resulting set of common elements back to a list.\n    common_list = list(common_elements)\n    \n    # Step 5: Sort the list of common elements.\n    common_list.sort()\n    \n    # Step 6: Return the sorted list of unique common elements.\n    return common_list\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the common elements between the two lists.\",\n    \"Ensure the common elements are unique.\",\n    \"Sort the unique common elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Accept two lists as input parameters.\",\n    \"Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\",\n    \"Step 3: Find the intersection of the two sets to get common elements.\",\n    \"Step 4: Convert the resulting set of common elements back to a list.\",\n    \"Step 5: Sort the list of common elements.\",\n    \"Step 6: Return the sorted list of unique common elements.\"\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list):\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Step 3: Find the intersection of the two sets to get common elements.\n    common_elements = set1.intersection(set2)\n    \n    # Step 4: Convert the resulting set of common elements back to a list.\n    common_list = list(common_elements)\n    \n    # Step 5: Sort the list of common elements.\n    common_list.sort()\n    \n    # Step 6: Return the sorted list of unique common elements.\n    return common_list\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the common elements between the two lists.\",\n    \"Ensure the common elements are unique.\",\n    \"Sort the unique common elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Accept two lists as input parameters.\",\n    \"Step 2: Convert both lists to sets to facilitate finding common elements.\",\n    \"Step 3: Find the intersection of the two sets to get common elements.\",\n    \"Step 4: Convert the intersection set back to a list to ensure the elements are unique.\",\n    \"Step 5: Sort the list of unique common elements.\",\n    \"Step 6: Return the sorted list.\"\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to facilitate finding common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list to ensure the elements are unique\n    unique_common_elements = list(common_elements)\n    \n    # Sort the list of unique common elements\n    unique_common_elements.sort()\n    \n    # Return the sorted list\n    return unique_common_elements\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the common elements between the two lists.\",\n    \"Ensure the common elements are unique.\",\n    \"Sort the unique common elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Accept two lists as input parameters.\",\n    \"Step 2: Convert both lists to sets to facilitate finding common elements.\",\n    \"Step 3: Find the intersection of the two sets to get common elements.\",\n    \"Step 4: Convert the intersection set back to a list to ensure the result is a list.\",\n    \"Step 5: Sort the list of common elements.\",\n    \"Step 6: Return the sorted list of unique common elements.\"\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 2: Convert both lists to sets to facilitate finding common elements.\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Step 3: Find the intersection of the two sets to get common elements.\n    common_elements = set1.intersection(set2)\n    \n    # Step 4: Convert the intersection set back to a list to ensure the result is a list.\n    common_list = list(common_elements)\n    \n    # Step 5: Sort the list of common elements.\n    common_list.sort()\n    \n    # Step 6: Return the sorted list of unique common elements.\n    return common_list\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify the common elements between the two lists.\",\n      \"details\": \"Use set operations to find the intersection of the two lists.\"\n    },\n    {\n      \"description\": \"Ensure the common elements are unique.\",\n      \"details\": \"Convert the intersection result to a set to remove duplicates.\"\n    },\n    {\n      \"description\": \"Sort the unique common elements.\",\n      \"details\": \"Convert the set back to a list and sort it.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Convert both input lists to sets.\",\n      \"purpose\": \"Facilitate set operations to find common elements.\"\n    },\n    {\n      \"step\": \"Find the intersection of the two sets.\",\n      \"purpose\": \"Identify elements that are present in both lists.\"\n    },\n    {\n      \"step\": \"Convert the intersection result to a list.\",\n      \"purpose\": \"Prepare the data for sorting.\"\n    },\n    {\n      \"step\": \"Sort the list of common elements.\",\n      \"purpose\": \"Ensure the output is in a sorted manner as required.\"\n    },\n    {\n      \"step\": \"Return the sorted list of unique common elements.\",\n      \"purpose\": \"Provide the final output as specified in the requirement.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both input lists to sets\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection result to a list and sort it\n    result = sorted(list(common_elements))\n    \n    # Return the sorted list of unique common elements\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the common elements between the two lists.\",\n    \"Ensure the common elements are unique.\",\n    \"Sort the unique common elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Accept two lists as input parameters.\",\n    \"Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\",\n    \"Step 3: Find the intersection of the two sets to get common elements.\",\n    \"Step 4: Convert the resulting set of common elements back to a list.\",\n    \"Step 5: Sort the list of common elements.\",\n    \"Step 6: Return the sorted list of unique common elements.\"\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to eliminate duplicates and facilitate finding common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the resulting set of common elements back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list of common elements\n    common_list.sort()\n    \n    # Return the sorted list of unique common elements\n    return common_list\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify the common elements between the two lists.\",\n    \"Ensure the common elements are unique.\",\n    \"Sort the unique common elements.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Accept two lists as input parameters.\",\n    \"Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\",\n    \"Step 3: Find the intersection of the two sets to get common elements.\",\n    \"Step 4: Convert the resulting set of common elements back to a list.\",\n    \"Step 5: Sort the list of common elements.\",\n    \"Step 6: Return the sorted list of unique common elements.\"\n  ]\n}\n```", "Round_0": {"code": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Provide the unique common elements from two lists in a sorted manner.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Step 2: Convert both lists to sets to eliminate duplicates and facilitate finding common elements.\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Step 3: Find the intersection of the two sets to get common elements.\n    common_elements = set1.intersection(set2)\n    \n    # Step 4: Convert the resulting set of common elements back to a list.\n    common_list = list(common_elements)\n    \n    # Step 5: Sort the list of common elements.\n    common_list.sort()\n    \n    # Step 6: Return the sorted list of unique common elements.\n    return common_list\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], "passed": true, "pass": true, "pass_num": 10, "round": 746, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 450}
