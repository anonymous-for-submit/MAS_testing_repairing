{"task_id": "HumanEval/56", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a sequence composed of the characters \"<\" and \">\". \nReturn True if each \"<\" has a matching \">\" bracket.\n>>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    '''", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": ["def check(correct_bracketing):\n\tassert correct_bracketing(\"<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>>>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<>>>><<>>>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><>><>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\">\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<<<><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><><><<><>><><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<>>>>>>>><<><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<><<<\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"><<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<><><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>>>>><><>>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<><<><><><>><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<<>><<<<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<<>><<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><<<>><><><>><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><>\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>><>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><>>>>>><><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>>><<<>>>>>><><>><>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><><><<<>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<>>>><<<<<>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><<><>>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><>>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>>><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\">><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<><><<><>><><<><>>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>><<<>><><<<>>><><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<<>>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<><><<><>><>><<>\")", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<<<\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><>\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><<><>>\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"><>>><<>>><<<\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><>><<><>><><><<><>><>\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<><\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<<><\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<><><<><>><>>><>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"<>><<<<><><>><>\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"<<<><>>>>\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\">>>><><<<>>\") == False"], "test_case_list": ["assert correct_bracketing(\"<\") == False", "assert correct_bracketing(\"<>\") == True", "assert correct_bracketing(\"<><>>>><<\") == False", "assert correct_bracketing(\"<>>>>>\") == False", "assert correct_bracketing(\"<>>><<<\") == False", "assert correct_bracketing(\">><<>>>><<>>>>\") == False", "assert correct_bracketing(\">>>>><<\") == False", "assert correct_bracketing(\"<<><>><<><>>\") == True", "assert correct_bracketing(\">><>><>\") == False", "assert not correct_bracketing(\">\")", "assert correct_bracketing(\"<<><>><<><>><>\") == True", "assert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<><><>\") == True", "assert correct_bracketing(\"><<<><<<\") == False", "assert correct_bracketing(\"<><><><<><>><>\") == True", "assert correct_bracketing(\"<<<<<><>\") == False", "assert correct_bracketing(\"<><><<><>><><><><<><>><><><><<><>><>\") == True", "assert correct_bracketing(\"<>><>\") == False", "assert correct_bracketing(\"><<<>>>>>>>><<><<\") == False", "assert correct_bracketing(\">>>><<><<<\") == False", "assert not correct_bracketing(\"><<>\")", "assert correct_bracketing(\"<><<><>>\") == True", "assert correct_bracketing(\">\") == False", "assert correct_bracketing(\"<<<>\") == False", "assert correct_bracketing(\">><<<\") == False", "assert correct_bracketing(\"><<><><>\") == False", "assert correct_bracketing(\"<><>>>>><><>>><\") == False", "assert correct_bracketing(\"<<><>><<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\">>>\") == False", "assert correct_bracketing(\"<>><<><<><><><>><>>\") == False", "assert correct_bracketing(\">><<<>><<<<><\") == False", "assert correct_bracketing(\">>>><<<<\") == False", "assert correct_bracketing(\"<<<<>><<>\") == False", "assert correct_bracketing(\"<>\")", "assert correct_bracketing(\">>>><<<>><><><>><<><\") == False", "assert correct_bracketing(\"<><>\") == True", "assert not correct_bracketing(\"<\")", "assert correct_bracketing(\"\") == True", "assert correct_bracketing(\"><<<>><>\") == False", "assert correct_bracketing(\"<>>><>\") == False", "assert correct_bracketing(\"<<<>><>><\") == False", "assert correct_bracketing(\"><><>>\") == False", "assert correct_bracketing(\"<>>><>>>>>><><<\") == False", "assert correct_bracketing(\"<>>><<<>>>>>><><>><>\") == False", "assert correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")", "assert correct_bracketing(\"<><<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<<<\") == False", "assert correct_bracketing(\">>><><><<<>><\") == False", "assert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>>\") == True", "assert correct_bracketing(\"<<><>>\") == True", "assert correct_bracketing(\"<><><<><>><><><><<><>><>\") == True", "assert correct_bracketing(\"<><><<><>><>\")", "assert correct_bracketing(\"><<<><\") == False", "assert correct_bracketing(\"<><><<>>>><<<<<>\") == False", "assert correct_bracketing(\">><<><>>><><\") == False", "assert correct_bracketing(\">>><>>><\") == False", "assert correct_bracketing(\"><><<><\") == False", "assert correct_bracketing(\"><>>><<\") == False", "assert correct_bracketing(\"<><><<><>><>\") == True", "assert correct_bracketing(\"><<\") == False", "assert correct_bracketing(\"<<><>>\")", "assert correct_bracketing(\">><>><><\") == False", "assert correct_bracketing(\"><>><\") == False", "assert correct_bracketing(\">><\") == False", "assert correct_bracketing(\"<><><<><>><><<><>>\") == True", "assert correct_bracketing(\">>><<<>><><<<>>><><\") == False", "assert correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>><><><<><>><>\") == True", "assert correct_bracketing(\"<<<>>\") == False", "assert not correct_bracketing(\"<><><<><>><>><<>\")", "assert not correct_bracketing(\"<<<<\")", "assert correct_bracketing(\"<<><>><>\") == True", "assert not correct_bracketing(\"<<>\")", "assert correct_bracketing(\"><<><>>\") == False", "assert correct_bracketing(\"><>>><<>>><<<\") == False", "assert correct_bracketing(\"<<><>><<><>><><><<><>><>\") == True", "assert correct_bracketing(\"<>><<><\") == False", "assert correct_bracketing(\"<<><\") == False", "assert not correct_bracketing(\"<><><<><>><>>><>\")", "assert correct_bracketing(\"<>><<<<><><>><>\") == False", "assert not correct_bracketing(\"<<<><>>>>\")", "assert correct_bracketing(\">>>><><<<>>\") == False"], "nl": " brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    ", "func": "def correct_bracketing(brackets: str):", "examples": ">>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    ", "completion": "def correct_bracketing(brackets: str) -> bool:\n    left_count = 0\n    right_count = 0\n    \n    for char in brackets:\n        if char == '<':\n            left_count += 1\n        elif char == '>':\n            right_count += 1\n        \n        # Check for unmatched '>' brackets\n        if right_count > left_count:\n            return False\n    \n    # After iteration, compare the final counts of '<' and '>'\n    return left_count == right_count\n", "completions": ["def correct_bracketing(brackets: str) -> bool:\n    open_count = 0\n    close_count = 0\n    \n    for char in brackets:\n        if char == '<':\n            open_count += 1\n        elif char == '>':\n            close_count += 1\n        \n        # Check for premature closing brackets\n        if close_count > open_count:\n            return False\n    \n    # Verify final counts\n    return open_count == close_count\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            if counter > 0:\n                counter -= 1\n            else:\n                return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    unmatched_open = 0\n    \n    for char in brackets:\n        if char == '<':\n            unmatched_open += 1\n        elif char == '>':\n            if unmatched_open > 0:\n                unmatched_open -= 1\n            else:\n                return False\n    \n    return unmatched_open == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            if counter > 0:\n                counter -= 1\n            else:\n                return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "def correct_bracketing(brackets: str) -> bool:\n    left_count = 0\n    right_count = 0\n    \n    for char in brackets:\n        if char == '<':\n            left_count += 1\n        elif char == '>':\n            right_count += 1\n        \n        # Check for unmatched '>' brackets\n        if right_count > left_count:\n            return False\n    \n    # After iteration, compare the final counts of '<' and '>'\n    return left_count == right_count\n"], "session_history": {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Identify and count the number of '<' and '>' characters in the input string.\",\n      \"description\": \"Traverse the string and maintain a count of '<' and '>' characters.\"\n    },\n    {\n      \"subproblem\": \"Check if the sequence of brackets is correctly matched.\",\n      \"description\": \"Ensure that at no point in the traversal does the count of '>' exceed the count of '<'.\"\n    },\n    {\n      \"subproblem\": \"Verify that the total count of '<' matches the total count of '>'.\",\n      \"description\": \"After traversing the entire string, check if the counts of '<' and '>' are equal.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize counters for '<' and '>' brackets.\",\n      \"description\": \"Set up two variables to keep track of the number of '<' and '>' encountered.\"\n    },\n    {\n      \"step\": \"Iterate through each character in the input string.\",\n      \"description\": \"Use a loop to go through each character and update the counters accordingly.\"\n    },\n    {\n      \"step\": \"Check for unmatched '>' brackets during iteration.\",\n      \"description\": \"If at any point the count of '>' exceeds the count of '<', return False.\"\n    },\n    {\n      \"step\": \"After iteration, compare the final counts of '<' and '>'.\",\n      \"description\": \"If the counts are equal, return True; otherwise, return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    left_count = 0\n    right_count = 0\n    \n    for char in brackets:\n        if char == '<':\n            left_count += 1\n        elif char == '>':\n            right_count += 1\n        \n        # Check for unmatched '>' brackets\n        if right_count > left_count:\n            return False\n    \n    # After iteration, compare the final counts of '<' and '>'\n    return left_count == right_count\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Identify and count the number of '<' and '>' characters in the input string.\",\n      \"description\": \"Iterate through the string and maintain a count of '<' and '>' characters.\"\n    },\n    {\n      \"subproblem\": \"Check if the sequence of brackets is correctly matched.\",\n      \"description\": \"Ensure that at no point in the sequence does the count of '>' exceed the count of '<'.\"\n    },\n    {\n      \"subproblem\": \"Verify that the total count of '<' matches the total count of '>'.\",\n      \"description\": \"After processing the entire string, check if the counts of '<' and '>' are equal.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize counters for '<' and '>' brackets.\",\n      \"description\": \"Set up two variables to keep track of the number of '<' and '>' encountered.\"\n    },\n    {\n      \"step\": \"Iterate through each character in the input string.\",\n      \"description\": \"For each character, update the respective counter based on whether it is '<' or '>'.\"\n    },\n    {\n      \"step\": \"Check for premature closing brackets.\",\n      \"description\": \"During iteration, if the count of '>' exceeds the count of '<', return False.\"\n    },\n    {\n      \"step\": \"Verify final counts.\",\n      \"description\": \"After completing the iteration, check if the counts of '<' and '>' are equal. Return True if they are equal, otherwise return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    open_count = 0\n    close_count = 0\n    \n    for char in brackets:\n        if char == '<':\n            open_count += 1\n        elif char == '>':\n            close_count += 1\n        \n        # Check for premature closing brackets\n        if close_count > open_count:\n            return False\n    \n    # Verify final counts\n    return open_count == close_count\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify and initialize a counter to track the balance of brackets.\",\n    \"Iterate through each character in the input string.\",\n    \"For each '<' character, increment the counter.\",\n    \"For each '>' character, decrement the counter.\",\n    \"Check if the counter becomes negative at any point during iteration.\",\n    \"After iteration, check if the counter is zero.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  If the character is '<', increment the counter.\",\n    \"  If the character is '>', decrement the counter.\",\n    \"  If the counter is negative, return False immediately.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  If it is zero, return True.\",\n    \"  Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of brackets.\",\n      \"details\": \"This counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is '<' or '>'.\"\n    },\n    {\n      \"description\": \"Check for negative counter values during iteration.\",\n      \"details\": \"If the counter becomes negative, it indicates an unmatched '>' and the function should return False.\"\n    },\n    {\n      \"description\": \"Check the final value of the counter after iteration.\",\n      \"details\": \"If the counter is zero, all brackets are matched and the function should return True. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter becomes negative, return False immediately.\",\n    \"After the loop, check if the counter is zero:\",\n    \"  - If it is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Initialize a counter to track unmatched '<' brackets.\",\n      \"description\": \"Set up a variable to count the number of unmatched '<' brackets as we iterate through the string.\"\n    },\n    {\n      \"subproblem\": \"Iterate through each character in the string.\",\n      \"description\": \"Loop through each character in the input string to process the brackets.\"\n    },\n    {\n      \"subproblem\": \"Update the counter based on the current character.\",\n      \"description\": \"If the current character is '<', increment the counter. If it is '>', decrement the counter if it is greater than zero.\"\n    },\n    {\n      \"subproblem\": \"Check for unmatched brackets.\",\n      \"description\": \"After processing all characters, check if the counter is zero to determine if all '<' brackets have matching '>' brackets.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a counter to zero.\",\n      \"description\": \"This counter will keep track of unmatched '<' brackets.\"\n    },\n    {\n      \"step\": \"Loop through each character in the input string.\",\n      \"description\": \"Process each character to update the counter based on whether it is '<' or '>'.\"\n    },\n    {\n      \"step\": \"Update the counter.\",\n      \"description\": \"Increment the counter for '<' and decrement it for '>' if the counter is greater than zero.\"\n    },\n    {\n      \"step\": \"Return the result.\",\n      \"description\": \"Return True if the counter is zero, indicating all brackets are correctly matched; otherwise, return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            if counter > 0:\n                counter -= 1\n            else:\n                return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify and count the number of '<' and '>' characters in the input string.\",\n      \"description\": \"Ensure that the number of '<' matches the number of '>' to potentially satisfy correct bracketing.\"\n    },\n    {\n      \"subproblem\": \"Track the sequence of brackets to ensure correct ordering.\",\n      \"description\": \"Use a counter to track the balance of brackets as you iterate through the string, ensuring that at no point does a '>' exceed the number of preceding '<'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a counter to zero.\",\n      \"description\": \"This counter will be used to track the balance of brackets.\"\n    },\n    {\n      \"step\": \"Iterate through each character in the input string.\",\n      \"description\": \"For each '<', increment the counter. For each '>', decrement the counter.\"\n    },\n    {\n      \"step\": \"Check the counter during iteration.\",\n      \"description\": \"If the counter becomes negative at any point, return False immediately as it indicates an unmatched '>'.\"\n    },\n    {\n      \"step\": \"Check the final value of the counter after iteration.\",\n      \"description\": \"If the counter is zero, return True indicating all brackets are correctly matched. Otherwise, return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify the sequence of brackets and iterate through each character.\",\n    \"Track the count of '<' and '>' brackets to ensure they match correctly.\",\n    \"Ensure that at no point in the sequence does the count of '>' exceed the count of '<'.\",\n    \"Verify that the final counts of '<' and '>' are equal.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to track the number of unmatched '<' brackets.\",\n    \"Iterate through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', check if the counter is greater than zero:\",\n    \"    - If yes, decrement the counter.\",\n    \"    - If no, return False as it indicates an unmatched '>' bracket.\",\n    \"After iterating through the string, check if the counter is zero:\",\n    \"  - If yes, return True indicating all brackets are matched.\",\n    \"  - If no, return False indicating unmatched '<' brackets remain.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    unmatched_open = 0\n    \n    for char in brackets:\n        if char == '<':\n            unmatched_open += 1\n        elif char == '>':\n            if unmatched_open > 0:\n                unmatched_open -= 1\n            else:\n                return False\n    \n    return unmatched_open == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify and count the number of '<' and '>' characters in the input string.\",\n      \"goal\": \"Ensure that the number of '<' matches the number of '>'.\"\n    },\n    {\n      \"description\": \"Ensure that at no point in the string does the number of '>' characters exceed the number of '<' characters.\",\n      \"goal\": \"Maintain a valid sequence where each '<' has a corresponding '>' that follows it.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a counter to track the balance of brackets.\",\n      \"action\": \"Set the counter to zero at the start.\"\n    },\n    {\n      \"step\": \"Iterate through each character in the input string.\",\n      \"action\": \"For each '<', increment the counter. For each '>', decrement the counter.\"\n    },\n    {\n      \"step\": \"Check the counter during iteration.\",\n      \"action\": \"If the counter becomes negative at any point, return False immediately.\"\n    },\n    {\n      \"step\": \"Check the final value of the counter after iteration.\",\n      \"action\": \"If the counter is zero, return True. Otherwise, return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Identify the sequence of brackets\",\n      \"description\": \"Parse the input string to understand the sequence of '<' and '>' characters.\"\n    },\n    {\n      \"subproblem\": \"Track unmatched brackets\",\n      \"description\": \"Use a counter to track the number of unmatched '<' brackets as you iterate through the string.\"\n    },\n    {\n      \"subproblem\": \"Match brackets\",\n      \"description\": \"For each '>' encountered, check if there is an unmatched '<' to pair it with. If so, decrease the counter.\"\n    },\n    {\n      \"subproblem\": \"Determine correctness\",\n      \"description\": \"After processing the entire string, check if the counter is zero, indicating all '<' brackets have been matched.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a counter\",\n      \"description\": \"Set a counter to zero to keep track of unmatched '<' brackets.\"\n    },\n    {\n      \"step\": \"Iterate through the string\",\n      \"description\": \"Loop through each character in the input string.\"\n    },\n    {\n      \"step\": \"Update counter for '<'\",\n      \"description\": \"Increase the counter by one for each '<' encountered.\"\n    },\n    {\n      \"step\": \"Update counter for '>'\",\n      \"description\": \"Decrease the counter by one for each '>' encountered, if the counter is greater than zero.\"\n    },\n    {\n      \"step\": \"Check final counter value\",\n      \"description\": \"After the loop, return True if the counter is zero, otherwise return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            if counter > 0:\n                counter -= 1\n            else:\n                return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Initialize a counter to track the balance of brackets.\",\n      \"details\": \"This counter will increase for each '<' and decrease for each '>'.\"\n    },\n    {\n      \"description\": \"Iterate through each character in the input string.\",\n      \"details\": \"For each character, update the counter based on whether it is '<' or '>'.\"\n    },\n    {\n      \"description\": \"Check for negative counter values during iteration.\",\n      \"details\": \"If the counter becomes negative, it indicates an unmatched '>' and the function should return False immediately.\"\n    },\n    {\n      \"description\": \"Check the final value of the counter after iteration.\",\n      \"details\": \"If the counter is zero, all brackets are matched and the function should return True. Otherwise, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a counter to zero.\",\n    \"Loop through each character in the input string:\",\n    \"  - If the character is '<', increment the counter.\",\n    \"  - If the character is '>', decrement the counter.\",\n    \"  - If the counter becomes negative, return False immediately.\",\n    \"After the loop, check the counter:\",\n    \"  - If the counter is zero, return True.\",\n    \"  - Otherwise, return False.\"\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '<':\n            counter += 1\n        elif char == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Identify and count the number of '<' and '>' characters in the input string.\",\n      \"description\": \"Traverse the string and maintain a count of '<' and '>' characters.\"\n    },\n    {\n      \"subproblem\": \"Check if the sequence of brackets is correctly matched.\",\n      \"description\": \"Ensure that at no point in the traversal does the count of '>' exceed the count of '<'.\"\n    },\n    {\n      \"subproblem\": \"Verify that the total count of '<' matches the total count of '>'.\",\n      \"description\": \"After traversing the entire string, check if the counts of '<' and '>' are equal.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize counters for '<' and '>' brackets.\",\n      \"description\": \"Set up two variables to keep track of the number of '<' and '>' encountered.\"\n    },\n    {\n      \"step\": \"Iterate through each character in the input string.\",\n      \"description\": \"Use a loop to go through each character and update the counters accordingly.\"\n    },\n    {\n      \"step\": \"Check for unmatched '>' brackets during iteration.\",\n      \"description\": \"If at any point the count of '>' exceeds the count of '<', return False.\"\n    },\n    {\n      \"step\": \"After iteration, compare the final counts of '<' and '>'.\",\n      \"description\": \"If the counts are equal, return True; otherwise, return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def correct_bracketing(brackets: str) -> bool:\n    left_count = 0\n    right_count = 0\n    \n    for char in brackets:\n        if char == '<':\n            left_count += 1\n        elif char == '>':\n            right_count += 1\n        \n        # Check for unmatched '>' brackets\n        if right_count > left_count:\n            return False\n    \n    # After iteration, compare the final counts of '<' and '>'\n    return left_count == right_count\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [81, 81, 81, 81, 81, 81, 81, 81, 81, 81], "passed": true, "pass": true, "pass_num": 10, "round": 348, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 290}
