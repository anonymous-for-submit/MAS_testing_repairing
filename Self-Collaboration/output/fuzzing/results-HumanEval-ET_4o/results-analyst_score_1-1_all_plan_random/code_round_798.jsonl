{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n''' From a list of numbers, eliminate every item that appears repeatedly.\n    Keep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "entry_point": "remove_duplicates", "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "test": ["def check(remove_duplicates):\n\tassert remove_duplicates([3, 2, 5, 4]) == [3, 2, 5, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 4, 2, 1, 9, 6, 4]) == [2, 1, 9, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 3, 6, 1, 4, 4, 9]) == [6, 1, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 7, 4, 3]) == [7, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 1, 2, 4]) == [1, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 2, 7, 2, 1, 3, 1]) == [5, 7, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 6, 8, 3, 1, 8, 3]) == [4, 6, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 7, 6, 4, 2, 1, 7]) == [4, 2, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 2, 1, 4, 6, 4, 8]) == [5, 2, 1, 6, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 2, 8, 2]) == [3, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 7, 3, 6]) == [7, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 7, 4, 6]) == [5, 7, 4, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 6, 3, 4, 2, 6, 5]) == [3, 2, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 2, 6, 7, 4, 1, 3]) == [5, 2, 6, 7, 4, 1, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 7, 7, 8]) == [4, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 4, 1, 5]) == [1, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 7, 2, 7, 7, 5, 9]) == [6, 2, 5, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 1, 8, 6]) == [1, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 1, 1, 6, 8, 7, 3]) == [5, 6, 8, 7, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 1, 7, 6, 6, 10]) == [2, 7, 10]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 7, 4]) == [1, 2, 7, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 7, 2, 6]) == [1, 7, 2, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 3, 8, 9]) == [1, 3, 8, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 5, 6, 4, 8, 6, 6]) == [2, 5, 4, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 2, 5, 2]) == [4, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 6, 2, 7, 4, 2, 1]) == [6, 7, 4, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 2, 8, 3]) == [5, 2, 8, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 5, 5, 5, 5, 2, 2]) == []", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 7, 3, 7, 5, 2, 4]) == [5, 2, 4]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 3, 7, 2, 3, 1, 5]) == [7, 2, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 1, 1, 3, 1, 6, 8]) == [4, 3, 6, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 7, 2, 4, 2, 4, 8]) == [1, 7, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 3, 6, 1, 5, 5, 3]) == [6, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 7, 5, 5]) == [4, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 2, 8]) == [1, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 4, 4, 3, 1, 6]) == [2, 3, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 7, 3, 2]) == [7, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 3, 4, 2]) == [1, 3, 4, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 2, 5, 8]) == [4, 2, 5, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 4, 5, 4, 3, 8, 9]) == [5, 3, 8, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 1, 8, 7]) == [3, 1, 8, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 5, 6, 6]) == [3, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 1, 1, 4, 3, 6, 3]) == [4]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 1, 6, 6]) == []", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 3, 1, 5, 9, 7, 6]) == [4, 3, 1, 5, 9, 7, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 2, 2, 3]) == []", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 2, 7, 1, 2, 1, 2]) == [6, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 6, 7, 9]) == [2, 6, 7, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 3, 8, 2]) == [4, 3, 8, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 6, 4, 3, 4, 3, 2]) == [6, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 1, 5, 2, 2, 6, 7]) == [5, 6, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 6, 7, 6, 8, 1, 9]) == [4, 7, 8, 1, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 2, 8, 9]) == [1, 2, 8, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 6, 8, 1, 7, 5, 8]) == [6, 7, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 6, 2, 2, 6, 3, 7]) == [7]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 7, 1, 1, 4, 3, 7]) == [5, 4, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 6, 3, 7]) == [2, 6, 3, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 2, 1, 3, 2, 5, 2]) == [6, 1, 3, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 3, 2, 1]) == [5, 3, 2, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 6, 3, 4, 3, 1, 3]) == [4, 1]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 6, 1, 5, 4, 1, 10]) == [5, 4, 10]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 2, 4, 5]) == [4, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 7, 3, 3, 5, 4, 4]) == [7, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 6, 8, 6]) == [3, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([1, 3, 4, 8]) == [1, 3, 4, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 6, 6, 5]) == [5]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 4, 6, 1, 1, 1, 2]) == [4, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 7, 6, 2]) == [7, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 1, 2, 4, 2, 4, 8]) == [6, 1, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 1, 1, 2]) == []", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 1, 2, 3]) == [1, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([]) == []", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 2, 7, 2]) == [6, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 6, 8, 6]) == [2, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 7, 7, 3, 9, 2, 8]) == [6, 3, 9, 2, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 4, 5, 8]) == [4, 8]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 5, 2, 3]) == [2, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 2, 2, 6]) == [4, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 5, 1, 2, 3, 8, 6]) == [5, 1, 3, 8, 6]", "def check(remove_duplicates):\n\tassert remove_duplicates([3, 3, 7, 5]) == [7, 5]", "def check(remove_duplicates):\n\tassert remove_duplicates([6, 1, 7, 5, 4, 3, 9]) == [6, 1, 7, 5, 4, 3, 9]", "def check(remove_duplicates):\n\tassert remove_duplicates([2, 2, 2, 4, 5, 7, 4]) == [5, 7]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 3, 1, 2]) == [5, 3, 1, 2]", "def check(remove_duplicates):\n\tassert remove_duplicates([4, 1, 2, 6, 7, 5, 3]) == [4, 1, 2, 6, 7, 5, 3]", "def check(remove_duplicates):\n\tassert remove_duplicates([5, 4, 3, 6, 2, 8, 2]) == [5, 4, 3, 6, 8]"], "test_case_list": ["assert remove_duplicates([3, 2, 5, 4]) == [3, 2, 5, 4]", "assert remove_duplicates([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]", "assert remove_duplicates([4, 4, 2, 1, 9, 6, 4]) == [2, 1, 9, 6]", "assert remove_duplicates([3, 3, 6, 1, 4, 4, 9]) == [6, 1, 9]", "assert remove_duplicates([3, 7, 4, 3]) == [7, 4]", "assert remove_duplicates([2, 1, 2, 4]) == [1, 4]", "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([5, 2, 7, 2, 1, 3, 1]) == [5, 7, 3]", "assert remove_duplicates([4, 6, 8, 3, 1, 8, 3]) == [4, 6, 1]", "assert remove_duplicates([6, 7, 6, 4, 2, 1, 7]) == [4, 2, 1]", "assert remove_duplicates([5, 2, 1, 4, 6, 4, 8]) == [5, 2, 1, 6, 8]", "assert remove_duplicates([3, 2, 8, 2]) == [3, 8]", "assert remove_duplicates([6, 7, 3, 6]) == [7, 3]", "assert remove_duplicates([5, 7, 4, 6]) == [5, 7, 4, 6]", "assert remove_duplicates([4, 6, 3, 4, 2, 6, 5]) == [3, 2, 5]", "assert remove_duplicates([5, 2, 6, 7, 4, 1, 3]) == [5, 2, 6, 7, 4, 1, 3]", "assert remove_duplicates([4, 7, 7, 8]) == [4, 8]", "assert remove_duplicates([4, 4, 1, 5]) == [1, 5]", "assert remove_duplicates([6, 7, 2, 7, 7, 5, 9]) == [6, 2, 5, 9]", "assert remove_duplicates([6, 1, 8, 6]) == [1, 8]", "assert remove_duplicates([5, 1, 1, 6, 8, 7, 3]) == [5, 6, 8, 7, 3]", "assert remove_duplicates([1, 2, 1, 7, 6, 6, 10]) == [2, 7, 10]", "assert remove_duplicates([1, 2, 7, 4]) == [1, 2, 7, 4]", "assert remove_duplicates([1, 7, 2, 6]) == [1, 7, 2, 6]", "assert remove_duplicates([1, 3, 8, 9]) == [1, 3, 8, 9]", "assert remove_duplicates([2, 5, 6, 4, 8, 6, 6]) == [2, 5, 4, 8]", "assert remove_duplicates([4, 2, 5, 2]) == [4, 5]", "assert remove_duplicates([2, 6, 2, 7, 4, 2, 1]) == [6, 7, 4, 1]", "assert remove_duplicates([5, 2, 8, 3]) == [5, 2, 8, 3]", "assert remove_duplicates([5, 5, 5, 5, 5, 2, 2]) == []", "assert remove_duplicates([3, 7, 3, 7, 5, 2, 4]) == [5, 2, 4]", "assert remove_duplicates([5, 3, 7, 2, 3, 1, 5]) == [7, 2, 1]", "assert remove_duplicates([4, 1, 1, 3, 1, 6, 8]) == [4, 3, 6, 8]", "assert remove_duplicates([1, 7, 2, 4, 2, 4, 8]) == [1, 7, 8]", "assert remove_duplicates([5, 3, 6, 1, 5, 5, 3]) == [6, 1]", "assert remove_duplicates([4, 7, 5, 5]) == [4, 7]", "assert remove_duplicates([1, 2, 2, 8]) == [1, 8]", "assert remove_duplicates([1, 2, 4, 4, 3, 1, 6]) == [2, 3, 6]", "assert remove_duplicates([2, 7, 3, 2]) == [7, 3]", "assert remove_duplicates([1, 3, 4, 2]) == [1, 3, 4, 2]", "assert remove_duplicates([4, 2, 5, 8]) == [4, 2, 5, 8]", "assert remove_duplicates([4, 4, 5, 4, 3, 8, 9]) == [5, 3, 8, 9]", "assert remove_duplicates([3, 1, 8, 7]) == [3, 1, 8, 7]", "assert remove_duplicates([3, 5, 6, 6]) == [3, 5]", "assert remove_duplicates([6, 1, 1, 4, 3, 6, 3]) == [4]", "assert remove_duplicates([1, 1, 6, 6]) == []", "assert remove_duplicates([4, 3, 1, 5, 9, 7, 6]) == [4, 3, 1, 5, 9, 7, 6]", "assert remove_duplicates([3, 2, 2, 3]) == []", "assert remove_duplicates([6, 2, 7, 1, 2, 1, 2]) == [6, 7]", "assert remove_duplicates([2, 6, 7, 9]) == [2, 6, 7, 9]", "assert remove_duplicates([4, 3, 8, 2]) == [4, 3, 8, 2]", "assert remove_duplicates([4, 6, 4, 3, 4, 3, 2]) == [6, 2]", "assert remove_duplicates([1, 1, 5, 2, 2, 6, 7]) == [5, 6, 7]", "assert remove_duplicates([4, 6, 7, 6, 8, 1, 9]) == [4, 7, 8, 1, 9]", "assert remove_duplicates([1, 2, 8, 9]) == [1, 2, 8, 9]", "assert remove_duplicates([1, 6, 8, 1, 7, 5, 8]) == [6, 7, 5]", "assert remove_duplicates([3, 6, 2, 2, 6, 3, 7]) == [7]", "assert remove_duplicates([5, 7, 1, 1, 4, 3, 7]) == [5, 4, 3]", "assert remove_duplicates([2, 6, 3, 7]) == [2, 6, 3, 7]", "assert remove_duplicates([6, 2, 1, 3, 2, 5, 2]) == [6, 1, 3, 5]", "assert remove_duplicates([5, 3, 2, 1]) == [5, 3, 2, 1]", "assert remove_duplicates([6, 6, 3, 4, 3, 1, 3]) == [4, 1]", "assert remove_duplicates([6, 6, 1, 5, 4, 1, 10]) == [5, 4, 10]", "assert remove_duplicates([2, 2, 4, 5]) == [4, 5]", "assert remove_duplicates([3, 7, 3, 3, 5, 4, 4]) == [7, 5]", "assert remove_duplicates([3, 6, 8, 6]) == [3, 8]", "assert remove_duplicates([1, 3, 4, 8]) == [1, 3, 4, 8]", "assert remove_duplicates([6, 6, 6, 5]) == [5]", "assert remove_duplicates([2, 4, 6, 1, 1, 1, 2]) == [4, 6]", "assert remove_duplicates([6, 7, 6, 2]) == [7, 2]", "assert remove_duplicates([6, 1, 2, 4, 2, 4, 8]) == [6, 1, 8]", "assert remove_duplicates([2, 1, 1, 2]) == []", "assert remove_duplicates([3, 1, 2, 3]) == [1, 2]", "assert remove_duplicates([]) == []", "assert remove_duplicates([6, 2, 7, 2]) == [6, 7]", "assert remove_duplicates([2, 6, 8, 6]) == [2, 8]", "assert remove_duplicates([6, 7, 7, 3, 9, 2, 8]) == [6, 3, 9, 2, 8]", "assert remove_duplicates([5, 4, 5, 8]) == [4, 8]", "assert remove_duplicates([5, 5, 2, 3]) == [2, 3]", "assert remove_duplicates([4, 2, 2, 6]) == [4, 6]", "assert remove_duplicates([2, 5, 1, 2, 3, 8, 6]) == [5, 1, 3, 8, 6]", "assert remove_duplicates([3, 3, 7, 5]) == [7, 5]", "assert remove_duplicates([6, 1, 7, 5, 4, 3, 9]) == [6, 1, 7, 5, 4, 3, 9]", "assert remove_duplicates([2, 2, 2, 4, 5, 7, 4]) == [5, 7]", "assert remove_duplicates([5, 3, 1, 2]) == [5, 3, 1, 2]", "assert remove_duplicates([4, 1, 2, 6, 7, 5, 3]) == [4, 1, 2, 6, 7, 5, 3]", "assert remove_duplicates([5, 4, 3, 6, 2, 8, 2]) == [5, 4, 3, 6, 8]"], "nl": " From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    ", "func": "def remove_duplicates(numbers: List[int]) -> List[int]:", "examples": ">>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    ", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize a dictionary to track occurrences of each number\n    occurrences = {}\n    \n    # Iterate through the input list of numbers\n    for number in numbers:\n        # Increment the count of each number in the occurrences dictionary\n        if number in occurrences:\n            occurrences[number] += 1\n        else:\n            occurrences[number] = 1\n    \n    # Initialize a list to store non-duplicate numbers\n    result = []\n    \n    # Iterate through the input list again to maintain order\n    for number in numbers:\n        # Add numbers that appear only once to the result list\n        if occurrences[number] == 1:\n            result.append(number)\n    \n    # Return the filtered list while preserving the original order\n    return result\n", "completions": ["from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize an empty dictionary to track the frequency of each number\n    frequency = {}\n    \n    # Iterate through the input list and update the frequency dictionary\n    for number in numbers:\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n    \n    # Create a new list to store numbers that appear only once\n    result = []\n    \n    # Iterate through the input list again\n    for number in numbers:\n        # Check the frequency of each number in the dictionary\n        if frequency[number] == 1:\n            # If the frequency is 1, append the number to the new list\n            result.append(number)\n    \n    # Return the new list as the result\n    return result\n", "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    ''' From a list of numbers, eliminate every item that appears repeatedly.\n        Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    seen = set()\n    duplicates = set()\n    result = []\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)\n        else:\n            seen.add(number)\n\n    for number in numbers:\n        if number not in duplicates:\n            result.append(number)\n\n    return result\n", "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize a dictionary to count occurrences of each element in the input list.\n    count_dict = {}\n    \n    # Iterate through the input list and populate the dictionary with the count of each element.\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    # Create an empty list to store the result.\n    result = []\n    \n    # Iterate through the input list again, and for each element, check its count in the dictionary.\n    for number in numbers:\n        # If the count of an element is 1, append it to the result list.\n        if count_dict[number] == 1:\n            result.append(number)\n    \n    # Return the result list, which contains only the unique elements in their original order.\n    return result\n", "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store non-duplicate numbers\n    non_duplicates = []\n    \n    # Create a dictionary to track occurrences of each number\n    occurrences = {}\n    \n    # Iterate through the input list of numbers\n    for number in numbers:\n        # Check if the number has already been encountered\n        if number in occurrences:\n            # Increment the count of occurrences\n            occurrences[number] += 1\n        else:\n            # Initialize the count of occurrences\n            occurrences[number] = 1\n    \n    # Iterate through the input list again to maintain order\n    for number in numbers:\n        # If the number is encountered only once, add it to the non-duplicate list\n        if occurrences[number] == 1:\n            non_duplicates.append(number)\n    \n    # Return the list of non-duplicate numbers, preserving the original order\n    return non_duplicates\n", "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store non-duplicate numbers\n    non_duplicates = []\n    \n    # Create a dictionary to track occurrences of each number\n    occurrences = {}\n    \n    # Iterate through the input list of numbers\n    for number in numbers:\n        # Increment the count of the number in the occurrences dictionary\n        if number in occurrences:\n            occurrences[number] += 1\n        else:\n            occurrences[number] = 1\n    \n    # Iterate through the input list again to maintain order\n    for number in numbers:\n        # If the number appears only once, add it to the non-duplicate list\n        if occurrences[number] == 1:\n            non_duplicates.append(number)\n    \n    # Return the list of non-duplicate numbers, preserving the original order\n    return non_duplicates\n", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Step 1: Initialize a data structure to keep track of element counts\n    element_count = Counter(numbers)\n    \n    # Step 3: Create a new list to store unique elements\n    unique_elements = []\n    \n    # Step 4: Iterate through the input list again to build the list of unique elements\n    for number in numbers:\n        if element_count[number] == 1:\n            unique_elements.append(number)\n    \n    # Step 5: Return the list of unique elements\n    return unique_elements\n", "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store non-duplicate numbers\n    non_duplicates = []\n    \n    # Create a dictionary to track occurrences of each number\n    occurrences = {}\n    \n    # Iterate through the input list of numbers\n    for number in numbers:\n        # Check if the number has already been encountered\n        if number in occurrences:\n            # Increment the count of occurrences\n            occurrences[number] += 1\n        else:\n            # Initialize the count of occurrences\n            occurrences[number] = 1\n    \n    # Iterate through the input list again to maintain order\n    for number in numbers:\n        # If the number is encountered only once, add it to the non-duplicate list\n        if occurrences[number] == 1:\n            non_duplicates.append(number)\n    \n    # Return the list of non-duplicate numbers, preserving the original order\n    return non_duplicates\n", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Step 1: Initialize a data structure to track the frequency of each element\n    frequency = Counter(numbers)\n    \n    # Step 3: Create a new list to store unique elements\n    unique_elements = []\n    \n    # Step 4: Traverse the input list again to build the list of unique elements\n    for number in numbers:\n        if frequency[number] == 1:\n            unique_elements.append(number)\n    \n    # Step 5: Return the list of unique elements\n    return unique_elements\n\n# Example usage\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]\n", "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize a dictionary to keep track of the count of each element in the input list.\n    count_dict = {}\n    \n    # Iterate through the input list and update the count of each element in the dictionary.\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    # Create a new list to store the result.\n    result = []\n    \n    # Iterate through the input list again, and for each element, check its count in the dictionary.\n    for number in numbers:\n        # If the count is one, append the element to the result list.\n        if count_dict[number] == 1:\n            result.append(number)\n    \n    # Return the result list.\n    return result\n", "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize a dictionary to track occurrences of each number\n    occurrences = {}\n    \n    # Iterate through the input list of numbers\n    for number in numbers:\n        # Increment the count of each number in the occurrences dictionary\n        if number in occurrences:\n            occurrences[number] += 1\n        else:\n            occurrences[number] = 1\n    \n    # Initialize a list to store non-duplicate numbers\n    result = []\n    \n    # Iterate through the input list again to maintain order\n    for number in numbers:\n        # Add numbers that appear only once to the result list\n        if occurrences[number] == 1:\n            result.append(number)\n    \n    # Return the filtered list while preserving the original order\n    return result\n"], "session_history": {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify and iterate through the list of numbers.\",\n    \"Track occurrences of each number to determine duplicates.\",\n    \"Filter out numbers that appear more than once.\",\n    \"Maintain the original order of non-duplicate numbers.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store non-duplicate numbers.\",\n    \"Create a dictionary or set to track occurrences of each number.\",\n    \"Iterate through the input list of numbers.\",\n    \"For each number, check if it has already been encountered.\",\n    \"If the number is encountered for the first time, add it to the tracking structure.\",\n    \"If the number is encountered again, mark it as a duplicate.\",\n    \"After iterating, filter the list to include only numbers that are not marked as duplicates.\",\n    \"Return the filtered list while preserving the original order.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize a dictionary to track occurrences of each number\n    occurrences = {}\n    \n    # Iterate through the input list of numbers\n    for number in numbers:\n        # Increment the count of each number in the occurrences dictionary\n        if number in occurrences:\n            occurrences[number] += 1\n        else:\n            occurrences[number] = 1\n    \n    # Initialize a list to store non-duplicate numbers\n    result = []\n    \n    # Iterate through the input list again to maintain order\n    for number in numbers:\n        # Add numbers that appear only once to the result list\n        if occurrences[number] == 1:\n            result.append(number)\n    \n    # Return the filtered list while preserving the original order\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    \"Identify and iterate through the list of numbers.\",\n    \"Track the frequency of each number in the list.\",\n    \"Identify numbers that appear more than once.\",\n    \"Create a new list excluding numbers that appear more than once.\",\n    \"Maintain the original order of numbers that are not duplicates.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty dictionary to track the frequency of each number.\",\n    \"Iterate through the input list and update the frequency dictionary.\",\n    \"Create a new list to store numbers that appear only once.\",\n    \"Iterate through the input list again, and for each number, check its frequency in the dictionary.\",\n    \"If the frequency is 1, append the number to the new list.\",\n    \"Return the new list as the result.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize an empty dictionary to track the frequency of each number\n    frequency = {}\n    \n    # Iterate through the input list and update the frequency dictionary\n    for number in numbers:\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n    \n    # Create a new list to store numbers that appear only once\n    result = []\n    \n    # Iterate through the input list again\n    for number in numbers:\n        # Check the frequency of each number in the dictionary\n        if frequency[number] == 1:\n            # If the frequency is 1, append the number to the new list\n            result.append(number)\n    \n    # Return the new list as the result\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify and iterate through the list of numbers.\",\n    \"Track occurrences of each number to determine duplicates.\",\n    \"Filter out numbers that appear more than once.\",\n    \"Maintain the original order of non-duplicate numbers.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store non-duplicate numbers.\",\n    \"Create a dictionary or set to track occurrences of each number.\",\n    \"Iterate through the input list of numbers.\",\n    \"For each number, check if it has already been encountered.\",\n    \"If the number is encountered for the first time, add it to the non-duplicate list.\",\n    \"If the number is encountered again, skip adding it to the non-duplicate list.\",\n    \"Return the list of non-duplicate numbers, preserving the original order.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    ''' From a list of numbers, eliminate every item that appears repeatedly.\n        Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    '''\n    seen = set()\n    duplicates = set()\n    result = []\n\n    for number in numbers:\n        if number in seen:\n            duplicates.add(number)\n        else:\n            seen.add(number)\n\n    for number in numbers:\n        if number not in duplicates:\n            result.append(number)\n\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify all unique elements in the list.\",\n      \"details\": \"Traverse the list and count occurrences of each element to determine which elements appear only once.\"\n    },\n    {\n      \"description\": \"Maintain the order of unique elements.\",\n      \"details\": \"Ensure that the order of elements in the output list is the same as their first appearance in the input list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a dictionary to count occurrences of each element in the input list.\"\n    },\n    {\n      \"step\": \"Iterate through the input list and populate the dictionary with the count of each element.\"\n    },\n    {\n      \"step\": \"Create an empty list to store the result.\"\n    },\n    {\n      \"step\": \"Iterate through the input list again, and for each element, check its count in the dictionary.\"\n    },\n    {\n      \"step\": \"If the count of an element is 1, append it to the result list.\"\n    },\n    {\n      \"step\": \"Return the result list, which contains only the unique elements in their original order.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize a dictionary to count occurrences of each element in the input list.\n    count_dict = {}\n    \n    # Iterate through the input list and populate the dictionary with the count of each element.\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    # Create an empty list to store the result.\n    result = []\n    \n    # Iterate through the input list again, and for each element, check its count in the dictionary.\n    for number in numbers:\n        # If the count of an element is 1, append it to the result list.\n        if count_dict[number] == 1:\n            result.append(number)\n    \n    # Return the result list, which contains only the unique elements in their original order.\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify and iterate through the list of numbers.\",\n    \"Track occurrences of each number to determine duplicates.\",\n    \"Filter out numbers that appear more than once.\",\n    \"Maintain the original order of non-duplicate numbers.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store non-duplicate numbers.\",\n    \"Create a dictionary or set to track occurrences of each number.\",\n    \"Iterate through the input list of numbers.\",\n    \"For each number, check if it has already been encountered.\",\n    \"If the number is encountered for the first time, add it to the non-duplicate list.\",\n    \"If the number is encountered again, skip adding it to the non-duplicate list.\",\n    \"Return the list of non-duplicate numbers, preserving the original order.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store non-duplicate numbers\n    non_duplicates = []\n    \n    # Create a dictionary to track occurrences of each number\n    occurrences = {}\n    \n    # Iterate through the input list of numbers\n    for number in numbers:\n        # Check if the number has already been encountered\n        if number in occurrences:\n            # Increment the count of occurrences\n            occurrences[number] += 1\n        else:\n            # Initialize the count of occurrences\n            occurrences[number] = 1\n    \n    # Iterate through the input list again to maintain order\n    for number in numbers:\n        # If the number is encountered only once, add it to the non-duplicate list\n        if occurrences[number] == 1:\n            non_duplicates.append(number)\n    \n    # Return the list of non-duplicate numbers, preserving the original order\n    return non_duplicates\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify and iterate through the list of numbers.\",\n    \"Track occurrences of each number to determine duplicates.\",\n    \"Filter out numbers that appear more than once.\",\n    \"Maintain the original order of non-duplicate numbers.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store non-duplicate numbers.\",\n    \"Create a dictionary or set to track occurrences of each number.\",\n    \"Iterate through the input list of numbers.\",\n    \"For each number, check if it has already been encountered.\",\n    \"If the number is encountered for the first time, add it to the non-duplicate list.\",\n    \"If the number is encountered again, skip adding it to the non-duplicate list.\",\n    \"Return the list of non-duplicate numbers, preserving the original order.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store non-duplicate numbers\n    non_duplicates = []\n    \n    # Create a dictionary to track occurrences of each number\n    occurrences = {}\n    \n    # Iterate through the input list of numbers\n    for number in numbers:\n        # Increment the count of the number in the occurrences dictionary\n        if number in occurrences:\n            occurrences[number] += 1\n        else:\n            occurrences[number] = 1\n    \n    # Iterate through the input list again to maintain order\n    for number in numbers:\n        # If the number appears only once, add it to the non-duplicate list\n        if occurrences[number] == 1:\n            non_duplicates.append(number)\n    \n    # Return the list of non-duplicate numbers, preserving the original order\n    return non_duplicates\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify and collect all unique elements from the input list.\",\n      \"details\": \"Traverse the list and keep track of the count of each element. Identify elements that appear only once.\"\n    },\n    {\n      \"description\": \"Maintain the order of unique elements as they appear in the input list.\",\n      \"details\": \"Ensure that the order of elements in the output list matches their first appearance in the input list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a data structure to keep track of element counts.\",\n      \"details\": \"Use a dictionary or a similar structure to store the count of each element in the input list.\"\n    },\n    {\n      \"step\": \"Iterate through the input list to populate the data structure with element counts.\",\n      \"details\": \"For each element in the list, increment its count in the data structure.\"\n    },\n    {\n      \"step\": \"Create a new list to store unique elements.\",\n      \"details\": \"Initialize an empty list to store elements that appear only once.\"\n    },\n    {\n      \"step\": \"Iterate through the input list again to build the list of unique elements.\",\n      \"details\": \"For each element, check its count in the data structure. If the count is one, add it to the new list.\"\n    },\n    {\n      \"step\": \"Return the list of unique elements.\",\n      \"details\": \"Ensure the final list maintains the order of first appearance from the input list.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Step 1: Initialize a data structure to keep track of element counts\n    element_count = Counter(numbers)\n    \n    # Step 3: Create a new list to store unique elements\n    unique_elements = []\n    \n    # Step 4: Iterate through the input list again to build the list of unique elements\n    for number in numbers:\n        if element_count[number] == 1:\n            unique_elements.append(number)\n    \n    # Step 5: Return the list of unique elements\n    return unique_elements\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify and iterate through the list of numbers.\",\n    \"Track occurrences of each number to determine duplicates.\",\n    \"Filter out numbers that appear more than once.\",\n    \"Maintain the original order of non-duplicate numbers.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store non-duplicate numbers.\",\n    \"Create a dictionary or set to track occurrences of each number.\",\n    \"Iterate through the input list of numbers.\",\n    \"For each number, check if it has already been encountered.\",\n    \"If the number is encountered for the first time, add it to the non-duplicate list.\",\n    \"If the number is encountered again, skip adding it to the non-duplicate list.\",\n    \"Return the list of non-duplicate numbers, preserving the original order.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store non-duplicate numbers\n    non_duplicates = []\n    \n    # Create a dictionary to track occurrences of each number\n    occurrences = {}\n    \n    # Iterate through the input list of numbers\n    for number in numbers:\n        # Check if the number has already been encountered\n        if number in occurrences:\n            # Increment the count of occurrences\n            occurrences[number] += 1\n        else:\n            # Initialize the count of occurrences\n            occurrences[number] = 1\n    \n    # Iterate through the input list again to maintain order\n    for number in numbers:\n        # If the number is encountered only once, add it to the non-duplicate list\n        if occurrences[number] == 1:\n            non_duplicates.append(number)\n    \n    # Return the list of non-duplicate numbers, preserving the original order\n    return non_duplicates\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify and collect all unique elements from the input list.\",\n      \"details\": \"Traverse the list and keep track of the count of each element. Identify elements that appear only once.\"\n    },\n    {\n      \"description\": \"Maintain the order of unique elements as they appear in the input list.\",\n      \"details\": \"Ensure that the order of elements in the output list matches their first appearance in the input list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a data structure to track the frequency of each element in the input list.\",\n      \"details\": \"Use a dictionary or a similar structure to count occurrences of each number.\"\n    },\n    {\n      \"step\": \"Traverse the input list to populate the frequency data structure.\",\n      \"details\": \"Iterate through the list and update the count for each element.\"\n    },\n    {\n      \"step\": \"Create a new list to store unique elements.\",\n      \"details\": \"Initialize an empty list to hold elements that appear only once.\"\n    },\n    {\n      \"step\": \"Traverse the input list again to build the list of unique elements.\",\n      \"details\": \"For each element in the input list, check its count in the frequency data structure. If the count is one, add it to the new list.\"\n    },\n    {\n      \"step\": \"Return the list of unique elements.\",\n      \"details\": \"Ensure the final list maintains the order of first appearance from the input list.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Step 1: Initialize a data structure to track the frequency of each element\n    frequency = Counter(numbers)\n    \n    # Step 3: Create a new list to store unique elements\n    unique_elements = []\n    \n    # Step 4: Traverse the input list again to build the list of unique elements\n    for number in numbers:\n        if frequency[number] == 1:\n            unique_elements.append(number)\n    \n    # Step 5: Return the list of unique elements\n    return unique_elements\n\n# Example usage\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Identify and collect all unique elements from the input list.\",\n      \"details\": \"Traverse the list and keep track of the count of each element using a dictionary or similar data structure.\"\n    },\n    {\n      \"description\": \"Filter out elements that appear more than once.\",\n      \"details\": \"Use the collected counts to filter out elements that have a count greater than one.\"\n    },\n    {\n      \"description\": \"Maintain the order of the first occurrence of each unique element.\",\n      \"details\": \"Ensure that the order of elements in the output list matches the order of their first appearance in the input list.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a dictionary to keep track of the count of each element in the input list.\",\n    \"Iterate through the input list and update the count of each element in the dictionary.\",\n    \"Create a new list to store the result.\",\n    \"Iterate through the input list again, and for each element, check its count in the dictionary.\",\n    \"If the count is one, append the element to the result list.\",\n    \"Return the result list.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize a dictionary to keep track of the count of each element in the input list.\n    count_dict = {}\n    \n    # Iterate through the input list and update the count of each element in the dictionary.\n    for number in numbers:\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n    \n    # Create a new list to store the result.\n    result = []\n    \n    # Iterate through the input list again, and for each element, check its count in the dictionary.\n    for number in numbers:\n        # If the count is one, append the element to the result list.\n        if count_dict[number] == 1:\n            result.append(number)\n    \n    # Return the result list.\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"Identify and iterate through the list of numbers.\",\n    \"Track occurrences of each number to determine duplicates.\",\n    \"Filter out numbers that appear more than once.\",\n    \"Maintain the original order of non-duplicate numbers.\"\n  ],\n  \"high_level_plan\": [\n    \"Initialize an empty list to store non-duplicate numbers.\",\n    \"Create a dictionary or set to track occurrences of each number.\",\n    \"Iterate through the input list of numbers.\",\n    \"For each number, check if it has already been encountered.\",\n    \"If the number is encountered for the first time, add it to the tracking structure.\",\n    \"If the number is encountered again, mark it as a duplicate.\",\n    \"After iterating, filter the list to include only numbers that are not marked as duplicates.\",\n    \"Return the filtered list while preserving the original order.\"\n  ]\n}\n```", "Round_0": {"code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize a dictionary to track occurrences of each number\n    occurrences = {}\n    \n    # Iterate through the input list of numbers\n    for number in numbers:\n        # Increment the count of each number in the occurrences dictionary\n        if number in occurrences:\n            occurrences[number] += 1\n        else:\n            occurrences[number] = 1\n    \n    # Initialize a list to store non-duplicate numbers\n    result = []\n    \n    # Iterate through the input list again to maintain order\n    for number in numbers:\n        # Add numbers that appear only once to the result list\n        if occurrences[number] == 1:\n            result.append(number)\n    \n    # Return the filtered list while preserving the original order\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [87, 87, 87, 87, 87, 87, 87, 87, 87, 87], "passed": true, "pass": true, "pass_num": 10, "round": 798, "mutate_method": "rephrase_one", "save_node": false, "parent_index": 599}
