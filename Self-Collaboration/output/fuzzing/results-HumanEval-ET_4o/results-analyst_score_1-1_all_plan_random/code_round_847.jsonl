{"task_id": "HumanEval/126", "prompt": "def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "entry_point": "is_sorted", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": ["def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5, 6, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 4, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 7, 4, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 2, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 5, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 4, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8, 1, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 5, 6, 5, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 5, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 4, 6, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([4, 5, 8, 4, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 5, 2, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 1, 3, 6, 3, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 2, 5, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 7, 7, 6, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 2, 5, 8, 11]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 2, 9, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 5, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 1, 2, 3, 3, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 3, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 2, 2, 2, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 7, 4, 2, 2, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 4, 8, 1, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 2, 3, 5, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 4, 4, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 3, 3, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 6, 9, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 3, 3, 3, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 3, 4, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 2, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 3, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 7, 3, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 8, 4, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 3, 3, 5, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 8, 4, 7, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 4, 5, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 6, 1, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5]) == True", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 6, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 2, 2, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 6, 3, 9, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 7, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 7, 3, 4, 8, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 8, 6, 7, 8]) == False"], "test_case_list": ["assert is_sorted([1, 1, 3, 6, 7, 8]) == True", "assert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "assert is_sorted([2, 3, 3, 5]) == True", "assert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "assert is_sorted([3, 7, 5]) == False", "assert is_sorted([1, 1, 3, 5, 6, 6]) == True", "assert is_sorted([5, 6, 3]) == False", "assert is_sorted([3, 4, 4, 4, 4, 7]) == False", "assert is_sorted([1, 5, 7, 4, 4, 2]) == False", "assert is_sorted([2, 2, 6, 8]) == True", "assert is_sorted([3, 4, 6, 7, 7]) == True", "assert is_sorted([3, 3, 5, 7, 1, 5]) == False", "assert is_sorted([2, 4, 8, 9]) == True", "assert is_sorted([6, 4, 4]) == False", "assert is_sorted([8, 1, 2]) == False", "assert is_sorted([1, 3, 4, 5]) == True", "assert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "assert is_sorted([3, 2, 1]) == False", "assert is_sorted([1, 1, 3, 5]) == True", "assert is_sorted([4, 3, 5, 6, 5, 3]) == False", "assert is_sorted([1, 3, 5, 5, 7]) == True", "assert is_sorted([5, 4, 6, 7, 1, 5]) == False", "assert is_sorted([4, 5, 8, 4, 2, 7]) == False", "assert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "assert is_sorted([5, 5, 2, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([6, 1, 3, 6, 3, 7]) == False", "assert is_sorted([1, 1, 1, 2, 5, 8]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "assert is_sorted([3, 7, 7, 6, 6, 7]) == False", "assert is_sorted([10]) == True", "assert is_sorted([3, 3, 4, 6, 7, 8]) == True", "assert is_sorted([2, 2, 2, 5, 8, 11]) == False", "assert is_sorted([1, 2, 3, 3, 7, 9]) == True", "assert is_sorted([2, 4, 2, 9, 10]) == False", "assert is_sorted([3, 4, 6, 7]) == True", "assert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "assert is_sorted([1, 2, 3, 5, 5, 8]) == True", "assert is_sorted([6, 1, 2, 3, 3, 3]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "assert is_sorted([1, 3, 3, 4, 5]) == True", "assert is_sorted([1, 4, 4, 4, 5]) == False", "assert is_sorted([3, 2, 2, 2, 3]) == False", "assert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([4]) == True", "assert is_sorted([5, 7, 4, 2, 2, 4]) == False", "assert is_sorted([6]) == True", "assert is_sorted([3, 7, 4, 8, 1, 4]) == False", "assert is_sorted([1, 6, 3]) == False", "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "assert is_sorted([6, 2, 3, 5, 2, 7]) == False", "assert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "assert is_sorted([1, 5, 5, 6, 6, 9]) == True", "assert is_sorted([2, 3, 4, 4, 8, 10]) == True", "assert is_sorted([1, 5, 5, 6, 9]) == True", "assert is_sorted([1, 2, 3, 4]) == True", "assert is_sorted([2, 4, 5]) == True", "assert is_sorted([7]) == True", "assert is_sorted([2, 2, 3, 3, 6, 7]) == True", "assert is_sorted([3, 3, 6, 9, 9]) == True", "assert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "assert is_sorted([5, 3, 3, 3, 10]) == False", "assert is_sorted([1, 5, 3, 4, 3]) == False", "assert is_sorted([2, 4, 4]) == True", "assert is_sorted([1, 1, 2, 4, 5, 5]) == True", "assert is_sorted([2, 5, 4]) == False", "assert is_sorted([1, 2, 2, 3, 3, 4]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "assert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "assert is_sorted([1, 2, 3, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 7, 8]) == True", "assert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "assert is_sorted([1, 2, 3, 4, 5, 6]) == True", "assert is_sorted([1, 1, 1, 7, 3, 8]) == False", "assert is_sorted([3, 8, 4, 4, 10]) == False", "assert is_sorted([]) == True", "assert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "assert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "assert is_sorted([2, 5, 6, 8]) == True", "assert is_sorted([4, 5, 7, 8]) == True", "assert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "assert is_sorted([3]) == True", "assert is_sorted([3, 3, 3, 3, 5, 6]) == False", "assert is_sorted([3, 6, 3]) == False", "assert is_sorted([1, 3, 4, 4, 5, 5]) == True", "assert is_sorted([3, 1, 8, 4, 7, 4]) == False", "assert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "assert is_sorted([1, 4, 5, 5, 7, 8]) == True", "assert is_sorted([1, 4, 6, 1, 6, 7]) == False", "assert is_sorted([2, 3, 6, 7, 7]) == True", "assert is_sorted([5]) == True", "assert is_sorted([]) == True", "assert is_sorted([3, 2, 6, 3, 6, 4]) == False", "assert is_sorted([2, 5, 2, 2, 2, 7]) == False", "assert is_sorted([2, 6, 3, 9, 1]) == False", "assert is_sorted([1, 1, 1, 3, 4]) == False", "assert is_sorted([8]) == True", "assert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "assert is_sorted([2, 4, 5, 7]) == True", "assert is_sorted([3, 1, 3, 2, 1]) == False", "assert is_sorted([3, 3, 4, 7, 8, 9]) == True", "assert is_sorted([1, 5, 6, 6, 7, 7]) == True", "assert is_sorted([6, 7, 3, 4, 8, 6]) == False", "assert is_sorted([1, 8, 6, 7, 8]) == False"], "nl": "\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    ", "func": "def is_sorted(lst):", "examples": "Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    ", "completion": "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n\n    count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n\n    for count in count_dict.values():\n        if count > 2:\n            return False\n\n    return True\n", "completions": ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Check for duplicates in the list\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n\n    return True\n", "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.\"\"\"\n    \n    if len(lst) <= 1:\n        return True\n    \n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        \n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n        if count_dict[lst[i]] > 2:\n            return False\n    \n    # Check the count of the last element\n    count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n    if count_dict[lst[-1]] > 2:\n        return False\n    \n    return True\n", "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    # Initialize a variable to track if the list is sorted\n    is_sorted = True\n    \n    # Iterate through the list to check for ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_sorted = False\n            break\n    \n    # Check for duplicates in the list\n    from collections import Counter\n    count = Counter(lst)\n    for value in count.values():\n        if value > 2:\n            is_sorted = False\n            break\n    \n    # Return the result\n    return is_sorted\n", "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Count occurrences of each number\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Check for more than one duplicate of the same number\n    for num in count:\n        if count[num] > 2:\n            return False\n\n    return True\n", "def is_sorted(lst):\n    # Initialize a variable to track the previous number in the list\n    previous_number = None\n    \n    # Use a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Iterate through the list\n    for number in lst:\n        # Check if the list is sorted in ascending order\n        if previous_number is not None and number < previous_number:\n            return False\n        previous_number = number\n        \n        # Update the count for each number in the dictionary\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n        \n        # Check for more than one duplicate of the same number\n        if count_dict[number] > 2:\n            return False\n    \n    # Return True if all checks are passed\n    return True\n", "def is_sorted(lst):\n    # Initialize a variable to track the previous number in the list\n    previous_number = None\n    # Dictionary to count occurrences of each number\n    count_dict = {}\n\n    # Iterate through the list of numbers\n    for number in lst:\n        # Check if the list is sorted in ascending order\n        if previous_number is not None and number < previous_number:\n            return False\n        previous_number = number\n\n        # Count occurrences of each number\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n\n        # Check for any number appearing more than twice\n        if count_dict[number] > 2:\n            return False\n\n    # If all checks pass, return True\n    return True\n", "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        \n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n        if count_dict[lst[i]] > 2:\n            return False\n\n    # Check the last element count\n    count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n    if count_dict[lst[-1]] > 2:\n        return False\n\n    return True\n", "def is_sorted(lst):\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Check for duplicates in the list\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # If any number appears more than twice, return False\n    for num in count:\n        if count[num] > 2:\n            return False\n\n    return True\n", "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        \n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n        if count_dict[lst[i]] > 2:\n            return False\n\n    # Check the last element count\n    count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n    if count_dict[lst[-1]] > 2:\n        return False\n\n    return True\n", "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n\n    count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n\n    for count in count_dict.values():\n        if count > 2:\n            return False\n\n    return True\n"], "session_history": {"plan": "```json\n{\n  \"decomposition\": [\n    \"Check if the list is empty or has only one element. If so, return True as it is trivially sorted.\",\n    \"Iterate through the list to check if each element is less than or equal to the next element. If any element is greater than the next, return False.\",\n    \"While iterating, keep track of the count of each number using a dictionary or similar data structure.\",\n    \"After the iteration, check the counts of each number. If any number appears more than twice, return False.\",\n    \"If all checks pass, return True.\"\n  ],\n  \"high_level_plan\": [\n    \"Define the function is_sorted(lst).\",\n    \"Check if the list is empty or has only one element. If so, return True.\",\n    \"Initialize a dictionary to keep track of the count of each number.\",\n    \"Iterate through the list from the first to the second-to-last element:\",\n    \"  - Compare each element with the next one. If the current element is greater than the next, return False.\",\n    \"  - Update the count of the current element in the dictionary.\",\n    \"After the loop, update the count for the last element in the list.\",\n    \"Check the dictionary for any number with a count greater than two. If found, return False.\",\n    \"If all checks are passed, return True.\"\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n\n    count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n\n    for count in count_dict.values():\n        if count > 2:\n            return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"description\": \"Check for duplicates in the list.\",\n      \"details\": \"Iterate through the list and count occurrences of each number. If any number appears more than twice, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define the function is_sorted(lst) that takes a list of integers as input.\",\n    \"Implement a loop to check if the list is sorted in ascending order. If any element is greater than the next, return False.\",\n    \"Implement a mechanism to count occurrences of each number in the list.\",\n    \"If any number appears more than twice, return False.\",\n    \"If the list passes both checks, return True.\"\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Check for duplicates in the list\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Check if the list is empty or has only one element, return True if so.\",\n    \"Iterate through the list to check if each element is less than or equal to the next element.\",\n    \"During the iteration, keep track of the count of each number.\",\n    \"If any number appears more than twice, return False.\",\n    \"If the list is in ascending order and no number appears more than twice, return True.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function is_sorted(lst) that takes a list of integers as input.\",\n    \"Check if the list is empty or has only one element. If true, return True.\",\n    \"Initialize a dictionary to keep track of the count of each number in the list.\",\n    \"Iterate through the list from the first to the second-to-last element:\",\n    \"  - Check if the current element is greater than the next element. If true, return False.\",\n    \"  - Update the count of the current element in the dictionary.\",\n    \"  - If the count of any element exceeds 2, return False.\",\n    \"After the loop, check the count of the last element in the list.\",\n    \"If all checks pass, return True.\"\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.\"\"\"\n    \n    if len(lst) <= 1:\n        return True\n    \n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        \n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n        if count_dict[lst[i]] > 2:\n            return False\n    \n    # Check the count of the last element\n    count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n    if count_dict[lst[-1]] > 2:\n        return False\n    \n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"description\": \"Check for duplicates in the list.\",\n      \"details\": \"Iterate through the list and count occurrences of each number. If any number appears more than twice, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to track if the list is sorted.\",\n      \"details\": \"Set a boolean variable, is_sorted, to True initially.\"\n    },\n    {\n      \"step\": \"Iterate through the list to check for ascending order.\",\n      \"details\": \"For each element, compare it with the next element. If any element is greater than the next, set is_sorted to False and break the loop.\"\n    },\n    {\n      \"step\": \"Check for duplicates in the list.\",\n      \"details\": \"Use a dictionary or a counter to count occurrences of each number. If any number appears more than twice, set is_sorted to False.\"\n    },\n    {\n      \"step\": \"Return the result.\",\n      \"details\": \"Return the value of is_sorted.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    # Initialize a variable to track if the list is sorted\n    is_sorted = True\n    \n    # Iterate through the list to check for ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_sorted = False\n            break\n    \n    # Check for duplicates in the list\n    from collections import Counter\n    count = Counter(lst)\n    for value in count.values():\n        if value > 2:\n            is_sorted = False\n            break\n    \n    # Return the result\n    return is_sorted\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"description\": \"Check for more than one duplicate of the same number.\",\n      \"details\": \"Count occurrences of each number in the list and ensure no number appears more than twice.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function is_sorted(lst) that takes a list of integers as input.\",\n    \"If the list has only one element, return True.\",\n    \"Iterate through the list to check if it is sorted in ascending order:\",\n    \"  - For each element, compare it with the next element.\",\n    \"  - If any element is greater than the next, return False.\",\n    \"Create a dictionary to count occurrences of each number in the list.\",\n    \"Iterate through the dictionary to check for duplicates:\",\n    \"  - If any number appears more than twice, return False.\",\n    \"If all checks pass, return True.\"\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Count occurrences of each number\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Check for more than one duplicate of the same number\n    for num in count:\n        if count[num] > 2:\n            return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"description\": \"Check for more than one duplicate of the same number.\",\n      \"details\": \"Count occurrences of each number in the list and ensure no number appears more than twice.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to track the previous number in the list.\",\n      \"details\": \"Set this variable to None initially.\"\n    },\n    {\n      \"step\": \"Iterate through the list to check for ascending order.\",\n      \"details\": \"For each number, compare it with the previous number. If it is smaller, return False.\"\n    },\n    {\n      \"step\": \"Use a dictionary to count occurrences of each number.\",\n      \"details\": \"Iterate through the list and update the count for each number in the dictionary.\"\n    },\n    {\n      \"step\": \"Check the counts of each number.\",\n      \"details\": \"If any number has a count greater than 2, return False.\"\n    },\n    {\n      \"step\": \"Return True if all checks are passed.\",\n      \"details\": \"If the list is sorted and no number appears more than twice, return True.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    # Initialize a variable to track the previous number in the list\n    previous_number = None\n    \n    # Use a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Iterate through the list\n    for number in lst:\n        # Check if the list is sorted in ascending order\n        if previous_number is not None and number < previous_number:\n            return False\n        previous_number = number\n        \n        # Update the count for each number in the dictionary\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n        \n        # Check for more than one duplicate of the same number\n        if count_dict[number] > 2:\n            return False\n    \n    # Return True if all checks are passed\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"description\": \"Check for duplicates in the list.\",\n      \"details\": \"Iterate through the list and count occurrences of each number. If any number appears more than twice, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a variable to track the previous number in the list.\",\n      \"details\": \"Set this variable to None initially.\"\n    },\n    {\n      \"step\": \"Iterate through the list of numbers.\",\n      \"details\": \"For each number, compare it with the previous number to check for ascending order.\"\n    },\n    {\n      \"step\": \"Check if the current number is less than the previous number.\",\n      \"details\": \"If true, return False as the list is not sorted.\"\n    },\n    {\n      \"step\": \"Count occurrences of each number.\",\n      \"details\": \"Use a dictionary to keep track of how many times each number appears.\"\n    },\n    {\n      \"step\": \"Check for any number appearing more than twice.\",\n      \"details\": \"If any number has a count greater than 2, return False.\"\n    },\n    {\n      \"step\": \"If all checks pass, return True.\",\n      \"details\": \"The list is sorted in ascending order and no number appears more than twice.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    # Initialize a variable to track the previous number in the list\n    previous_number = None\n    # Dictionary to count occurrences of each number\n    count_dict = {}\n\n    # Iterate through the list of numbers\n    for number in lst:\n        # Check if the list is sorted in ascending order\n        if previous_number is not None and number < previous_number:\n            return False\n        previous_number = number\n\n        # Count occurrences of each number\n        if number in count_dict:\n            count_dict[number] += 1\n        else:\n            count_dict[number] = 1\n\n        # Check for any number appearing more than twice\n        if count_dict[number] > 2:\n            return False\n\n    # If all checks pass, return True\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Check if the list is empty or has only one element, return True as it is trivially sorted.\",\n    \"Iterate through the list to check if each element is less than or equal to the next element.\",\n    \"During the iteration, keep track of the count of each number to detect duplicates.\",\n    \"If any number appears more than twice, return False.\",\n    \"If the list is not in ascending order at any point, return False.\",\n    \"If the iteration completes without returning False, return True.\"\n  ],\n  \"high_level_plan\": [\n    \"Define the function is_sorted(lst).\",\n    \"Check if the list is empty or has only one element, return True.\",\n    \"Initialize a dictionary to keep track of the count of each number.\",\n    \"Iterate through the list using a loop.\",\n    \"For each element, check if it is greater than the next element, if so, return False.\",\n    \"Update the count of the current element in the dictionary.\",\n    \"If any element's count exceeds 2, return False.\",\n    \"If the loop completes without returning False, return True.\"\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        \n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n        if count_dict[lst[i]] > 2:\n            return False\n\n    # Check the last element count\n    count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n    if count_dict[lst[-1]] > 2:\n        return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is sorted in ascending order.\",\n      \"details\": \"Iterate through the list and ensure each element is less than or equal to the next element.\"\n    },\n    {\n      \"description\": \"Check for duplicates in the list.\",\n      \"details\": \"Iterate through the list and count occurrences of each number. If any number appears more than twice, return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Initialize a loop to iterate through the list from the first element to the second-to-last element.\"\n    },\n    {\n      \"step\": \"For each element, compare it with the next element to ensure the list is sorted in ascending order. If any element is greater than the next, return False.\"\n    },\n    {\n      \"step\": \"Initialize a dictionary or use a counter to track occurrences of each number in the list.\"\n    },\n    {\n      \"step\": \"Iterate through the list and update the count of each number in the dictionary or counter.\"\n    },\n    {\n      \"step\": \"Check the dictionary or counter for any number with a count greater than 2. If found, return False.\"\n    },\n    {\n      \"step\": \"If the list passes both checks, return True.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Check for duplicates in the list\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # If any number appears more than twice, return False\n    for num in count:\n        if count[num] > 2:\n            return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Check if the list is empty or has only one element, return True as it is trivially sorted.\",\n    \"Iterate through the list to check if each element is less than or equal to the next element.\",\n    \"During the iteration, keep track of the count of each number to detect duplicates.\",\n    \"If any number appears more than twice, return False.\",\n    \"If any element is greater than the next element, return False.\",\n    \"If the iteration completes without returning False, return True.\"\n  ],\n  \"high_level_plan\": [\n    \"Define the function is_sorted(lst).\",\n    \"Check if the list is empty or has only one element, return True.\",\n    \"Initialize a dictionary to keep track of the count of each number.\",\n    \"Iterate through the list using a loop.\",\n    \"For each element, check if it is greater than the next element, if so, return False.\",\n    \"Update the count of each number in the dictionary.\",\n    \"If any number's count exceeds two, return False.\",\n    \"If the loop completes without returning False, return True.\"\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        \n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n        if count_dict[lst[i]] > 2:\n            return False\n\n    # Check the last element count\n    count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n    if count_dict[lst[-1]] > 2:\n        return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Check if the list is empty or has only one element. If so, return True as it is trivially sorted.\",\n    \"Iterate through the list to check if each element is less than or equal to the next element. If any element is greater than the next, return False.\",\n    \"While iterating, keep track of the count of each number using a dictionary or similar data structure.\",\n    \"After the iteration, check the counts of each number. If any number appears more than twice, return False.\",\n    \"If all checks pass, return True.\"\n  ],\n  \"high_level_plan\": [\n    \"Define the function is_sorted(lst).\",\n    \"Check if the list is empty or has only one element. If so, return True.\",\n    \"Initialize a dictionary to keep track of the count of each number.\",\n    \"Iterate through the list from the first to the second-to-last element:\",\n    \"  - Compare each element with the next one. If the current element is greater than the next, return False.\",\n    \"  - Update the count of the current element in the dictionary.\",\n    \"After the loop, update the count for the last element in the list.\",\n    \"Check the dictionary for any number with a count greater than two. If found, return False.\",\n    \"If all checks are passed, return True.\"\n  ]\n}\n```", "Round_0": {"code": "def is_sorted(lst):\n    \"\"\"Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume no negative numbers and only integers.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    count_dict = {}\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        count_dict[lst[i]] = count_dict.get(lst[i], 0) + 1\n\n    count_dict[lst[-1]] = count_dict.get(lst[-1], 0) + 1\n\n    for count in count_dict.values():\n        if count > 2:\n            return False\n\n    return True\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [110, 110, 110, 110, 110, 110, 110, 110, 110, 110], "passed": true, "pass": true, "pass_num": 10, "round": 847, "mutate_method": "condense_two2one", "save_node": false, "parent_index": 625}
