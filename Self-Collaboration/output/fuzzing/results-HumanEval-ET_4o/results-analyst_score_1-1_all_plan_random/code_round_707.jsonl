{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if the list elements are monotonically increasing or decreasing. A list is considered to be monotonically increasing if each element is greater than or equal to the one before it. Similarly, it is monotonically decreasing if each element is less than or equal to the one before it.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completion": "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing. \n    A list is considered to be monotonically increasing if each element is greater \n    than or equal to the one before it. Similarly, it is monotonically decreasing \n    if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "completions": ["def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing. \n    A list is considered to be monotonically increasing if each element is greater \n    than or equal to the one before it. Similarly, it is monotonically decreasing \n    if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    \n    if not l:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "def monotonic(l: list) -> bool:\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    A list is considered to be monotonically increasing if each element is greater than or equal to the one before it.\n    Similarly, it is monotonically decreasing if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    A list is considered to be monotonically increasing if each element is greater than or equal to the one before it.\n    Similarly, it is monotonically decreasing if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "def monotonic(l: list) -> bool:\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "def monotonic(l: list) -> bool:\n    \"\"\"Return True if the list elements are monotonically increasing or decreasing.\n    A list is considered to be monotonically increasing if each element is greater than or equal to the one before it.\n    Similarly, it is monotonically decreasing if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "def monotonic(l: list) -> bool:\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    A list is considered to be monotonically increasing if each element is greater than or equal to the one before it.\n    Similarly, it is monotonically decreasing if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.'''\n    \n    if not l:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing. \n    A list is considered to be monotonically increasing if each element is greater \n    than or equal to the one before it. Similarly, it is monotonically decreasing \n    if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n"], "session_history": {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify the definition of a monotonically increasing list.\",\n    \"Identify the definition of a monotonically decreasing list.\",\n    \"Determine how to check if a list is monotonically increasing.\",\n    \"Determine how to check if a list is monotonically decreasing.\",\n    \"Decide how to return True if either condition is met, otherwise return False.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'monotonic' that takes a list 'l' as input.\",\n    \"Check if the list is monotonically increasing by iterating through the list and comparing each element with the previous one.\",\n    \"Check if the list is monotonically decreasing by iterating through the list and comparing each element with the previous one.\",\n    \"Return True if the list is either monotonically increasing or monotonically decreasing.\",\n    \"Return False if neither condition is met.\"\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing. \n    A list is considered to be monotonically increasing if each element is greater \n    than or equal to the one before it. Similarly, it is monotonically decreasing \n    if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is monotonically increasing.\",\n      \"steps\": [\n        \"Iterate through the list from the first element to the second-to-last element.\",\n        \"For each element, compare it with the next element.\",\n        \"If any element is greater than the next element, the list is not monotonically increasing.\"\n      ]\n    },\n    {\n      \"description\": \"Check if the list is monotonically decreasing.\",\n      \"steps\": [\n        \"Iterate through the list from the first element to the second-to-last element.\",\n        \"For each element, compare it with the next element.\",\n        \"If any element is less than the next element, the list is not monotonically decreasing.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'monotonic' that takes a list 'l' as an argument.\",\n    \"Implement the subproblem to check if the list is monotonically increasing.\",\n    \"Implement the subproblem to check if the list is monotonically decreasing.\",\n    \"Return True if the list is either monotonically increasing or monotonically decreasing.\",\n    \"Return False if the list is neither monotonically increasing nor monotonically decreasing.\"\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing. \n    A list is considered to be monotonically increasing if each element is greater \n    than or equal to the one before it. Similarly, it is monotonically decreasing \n    if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    \n    if not l:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify the definition of a monotonically increasing list: each element is greater than or equal to the one before it.\",\n    \"Identify the definition of a monotonically decreasing list: each element is less than or equal to the one before it.\",\n    \"Determine how to check if a list is monotonically increasing.\",\n    \"Determine how to check if a list is monotonically decreasing.\",\n    \"Decide how to return True if either condition is met, otherwise return False.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'monotonic' that takes a list 'l' as input.\",\n    \"Check if the list is monotonically increasing by iterating through the list and comparing each element with the previous one.\",\n    \"Check if the list is monotonically decreasing by iterating through the list and comparing each element with the previous one.\",\n    \"Return True if the list is either monotonically increasing or monotonically decreasing.\",\n    \"Return False if neither condition is met.\"\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify the conditions for a list to be monotonically increasing.\",\n    \"Identify the conditions for a list to be monotonically decreasing.\",\n    \"Determine how to check if a list satisfies either of the monotonic conditions.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'monotonic' that takes a list 'l' as an argument.\",\n    \"Check if the list is monotonically increasing by iterating through the list and ensuring each element is greater than or equal to the previous element.\",\n    \"Check if the list is monotonically decreasing by iterating through the list and ensuring each element is less than or equal to the previous element.\",\n    \"Return True if the list is either monotonically increasing or monotonically decreasing.\",\n    \"Return False if the list does not satisfy either condition.\"\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    A list is considered to be monotonically increasing if each element is greater than or equal to the one before it.\n    Similarly, it is monotonically decreasing if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Check if the list is monotonically increasing\",\n      \"description\": \"Iterate through the list and verify that each element is greater than or equal to the previous element.\"\n    },\n    {\n      \"subproblem\": \"Check if the list is monotonically decreasing\",\n      \"description\": \"Iterate through the list and verify that each element is less than or equal to the previous element.\"\n    },\n    {\n      \"subproblem\": \"Combine results\",\n      \"description\": \"Return True if either the increasing or decreasing check is True, otherwise return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function monotonic\",\n      \"description\": \"Create a function that takes a list as input.\"\n    },\n    {\n      \"step\": \"Implement increasing check\",\n      \"description\": \"Write logic to iterate through the list and check for monotonically increasing order.\"\n    },\n    {\n      \"step\": \"Implement decreasing check\",\n      \"description\": \"Write logic to iterate through the list and check for monotonically decreasing order.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"Return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    A list is considered to be monotonically increasing if each element is greater than or equal to the one before it.\n    Similarly, it is monotonically decreasing if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Check if the list is monotonically increasing\",\n      \"description\": \"Iterate through the list and verify that each element is greater than or equal to the previous element.\"\n    },\n    {\n      \"subproblem\": \"Check if the list is monotonically decreasing\",\n      \"description\": \"Iterate through the list and verify that each element is less than or equal to the previous element.\"\n    },\n    {\n      \"subproblem\": \"Combine results\",\n      \"description\": \"Return True if either the increasing or decreasing check is True, otherwise return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function monotonic(l: list)\",\n      \"description\": \"Create a function that takes a list as input.\"\n    },\n    {\n      \"step\": \"Implement increasing check\",\n      \"description\": \"Write logic to iterate through the list and check for monotonically increasing order.\"\n    },\n    {\n      \"step\": \"Implement decreasing check\",\n      \"description\": \"Write logic to iterate through the list and check for monotonically decreasing order.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"Return True if either check is True, otherwise return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Check if the list is monotonically increasing.\",\n      \"steps\": [\n        \"Iterate through the list from the first element to the second-to-last element.\",\n        \"For each element, compare it with the next element.\",\n        \"If any element is greater than the next element, the list is not monotonically increasing.\"\n      ]\n    },\n    {\n      \"description\": \"Check if the list is monotonically decreasing.\",\n      \"steps\": [\n        \"Iterate through the list from the first element to the second-to-last element.\",\n        \"For each element, compare it with the next element.\",\n        \"If any element is less than the next element, the list is not monotonically decreasing.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'monotonic' that takes a list 'l' as input.\",\n    \"Implement the subproblem to check if the list is monotonically increasing.\",\n    \"Implement the subproblem to check if the list is monotonically decreasing.\",\n    \"Return True if either the list is monotonically increasing or monotonically decreasing.\",\n    \"Return False if neither condition is met.\"\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if the list elements are monotonically increasing or decreasing.\n    A list is considered to be monotonically increasing if each element is greater than or equal to the one before it.\n    Similarly, it is monotonically decreasing if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Check if the list is monotonically increasing\",\n      \"description\": \"Iterate through the list and verify that each element is greater than or equal to the previous element.\"\n    },\n    {\n      \"subproblem\": \"Check if the list is monotonically decreasing\",\n      \"description\": \"Iterate through the list and verify that each element is less than or equal to the previous element.\"\n    },\n    {\n      \"subproblem\": \"Combine results\",\n      \"description\": \"Return True if either the monotonically increasing or monotonically decreasing condition is satisfied, otherwise return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'monotonic' that takes a list 'l' as input.\",\n    \"Implement a loop to check if the list is monotonically increasing.\",\n    \"Implement a loop to check if the list is monotonically decreasing.\",\n    \"Return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify if the list is monotonically increasing.\",\n    \"Identify if the list is monotonically decreasing.\",\n    \"Return True if either condition is met, otherwise return False.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'monotonic' that takes a list 'l' as an argument.\",\n    \"Check if the list is monotonically increasing by iterating through the list and comparing each element with the previous one.\",\n    \"Check if the list is monotonically decreasing by iterating through the list and comparing each element with the previous one.\",\n    \"Return True if the list is either monotonically increasing or monotonically decreasing.\",\n    \"Return False if neither condition is met.\"\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    A list is considered to be monotonically increasing if each element is greater than or equal to the one before it.\n    Similarly, it is monotonically decreasing if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Check if the list is monotonically increasing\",\n      \"description\": \"Iterate through the list and verify that each element is greater than or equal to the previous element.\"\n    },\n    {\n      \"subproblem\": \"Check if the list is monotonically decreasing\",\n      \"description\": \"Iterate through the list and verify that each element is less than or equal to the previous element.\"\n    },\n    {\n      \"subproblem\": \"Combine results\",\n      \"description\": \"Return True if either the increasing or decreasing check is True, otherwise return False.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define the function signature\",\n      \"description\": \"Create a function named 'monotonic' that takes a list as an argument.\"\n    },\n    {\n      \"step\": \"Implement increasing check\",\n      \"description\": \"Write logic to iterate through the list and check for monotonically increasing order.\"\n    },\n    {\n      \"step\": \"Implement decreasing check\",\n      \"description\": \"Write logic to iterate through the list and check for monotonically decreasing order.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"Return True if either check is True, otherwise return False.\"\n    }\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing.'''\n    \n    if not l:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    \"Identify the definition of a monotonically increasing list.\",\n    \"Identify the definition of a monotonically decreasing list.\",\n    \"Determine how to check if a list is monotonically increasing.\",\n    \"Determine how to check if a list is monotonically decreasing.\",\n    \"Decide how to return True if either condition is met, otherwise return False.\"\n  ],\n  \"high_level_plan\": [\n    \"Define a function named 'monotonic' that takes a list 'l' as input.\",\n    \"Check if the list is monotonically increasing by iterating through the list and comparing each element with the previous one.\",\n    \"Check if the list is monotonically decreasing by iterating through the list and comparing each element with the previous one.\",\n    \"Return True if the list is either monotonically increasing or monotonically decreasing.\",\n    \"Return False if neither condition is met.\"\n  ]\n}\n```", "Round_0": {"code": "def monotonic(l: list) -> bool:\n    '''Return True if the list elements are monotonically increasing or decreasing. \n    A list is considered to be monotonically increasing if each element is greater \n    than or equal to the one before it. Similarly, it is monotonically decreasing \n    if each element is less than or equal to the one before it.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if not l:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "passed": true, "pass": true, "pass_num": 10, "round": 707, "mutate_method": "expand_one2two", "save_node": false, "parent_index": 516}
