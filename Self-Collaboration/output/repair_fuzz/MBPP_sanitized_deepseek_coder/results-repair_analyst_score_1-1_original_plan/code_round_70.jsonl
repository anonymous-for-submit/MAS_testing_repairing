{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 223, "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.) Ensure that your solution efficiently handles large arrays.", "code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "test_imports": [], "test_list": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "assert is_majority([6, 2, 3, 8, 1, 4, 11], 7, 8) == False", "assert is_majority([4, 6, 3, 2, 6, 3, 11], 9, 5) == False", "assert is_majority([4, 4, 4, 6, 6, 7, 12], 7, 4) == False", "assert is_majority([6, 3, 2, 1, 8, 7, 13], 12, 7) == False", "assert is_majority([1, 1, 5, 8, 6, 5, 9], 4, 6) == False", "assert is_majority([3, 4, 8, 6, 6, 8, 8], 11, 2) == False", "assert is_majority([1, 5, 4, 1, 2, 5, 12], 4, 7) == False", "assert is_majority([1, 3, 1, 4, 1, 4, 14], 7, 8) == False", "assert is_majority([2, 7, 3, 4, 1, 4, 12], 4, 7) == False", "assert is_majority([1, 1, 1, 7, 5, 1, 15], 3, 6) == False", "assert is_majority([4, 4, 7, 4, 3, 3, 7], 3, 1) == False", "assert is_majority([4, 3, 7, 1, 7, 4, 12], 8, 8) == False", "assert is_majority([3, 5, 2, 4, 8, 1, 11], 3, 4) == False", "assert is_majority([1, 2, 7, 5, 4, 6, 15], 5, 5) == False", "assert is_majority([3, 4, 4, 5, 8, 3, 7], 6, 7) == False", "assert is_majority([3, 3, 8, 6, 3, 7, 13], 9, 7) == False", "assert is_majority([3, 1, 1, 6, 6, 6, 5], 3, 1) == False", "assert is_majority([6, 2, 3, 4, 7, 2, 9], 2, 5) == False", "assert is_majority([6, 4, 6, 7, 3, 8, 10], 5, 3) == False", "assert is_majority([4, 5, 2, 7, 2, 8, 12], 4, 3) == False", "assert is_majority([3, 4, 1, 1, 6, 5, 13], 4, 2) == False", "assert is_majority([3, 4, 8, 4, 4, 1, 9], 3, 3) == False", "assert is_majority([2, 2, 1, 5, 4, 7, 8], 7, 2) == False", "assert is_majority([2, 3, 1, 4, 1, 4, 10], 4, 2) == False", "assert is_majority([2, 1, 8, 2, 2, 8, 5], 7, 7) == False", "assert is_majority([4, 4, 2, 3, 4, 1, 9], 3, 4) == True", "assert is_majority([4, 3, 7, 3, 1, 4, 5], 11, 1) == False", "assert is_majority([2, 7, 3, 6, 2, 6, 11], 9, 1) == False", "assert is_majority([5, 2, 1, 6, 3, 6, 6], 9, 6) == False", "assert is_majority([2, 2, 6, 7, 2, 3, 8], 2, 7) == False", "assert is_majority([3, 1, 6, 3, 5, 1, 9], 8, 7) == False", "assert is_majority([4, 5, 7, 5, 1, 3, 14], 9, 1) == False", "assert is_majority([4, 3, 3, 2, 6, 1, 6], 10, 2) == False", "assert is_majority([2, 3, 5, 5, 4, 2, 11, 7], 5, 6) == False", "assert is_majority([2, 1, 7, 7, 4, 1, 5, 10], 3, 8) == False", "assert is_majority([2, 6, 6, 2, 9, 3, 7, 9], 3, 7) == False", "assert is_majority([2, 1, 1, 6, 6, 5, 7, 3], 7, 4) == False", "assert is_majority([6, 4, 4, 6, 9, 4, 2, 7], 7, 3) == False", "assert is_majority([3, 1, 4, 4, 1, 9, 7, 1], 11, 3) == False", "assert is_majority([5, 6, 7, 5, 3, 9, 9, 3], 8, 2) == False", "assert is_majority([3, 6, 6, 6, 3, 3, 3, 6], 10, 3) == True", "assert is_majority([6, 4, 1, 3, 6, 5, 7, 7], 6, 9) == False", "assert is_majority([4, 6, 1, 8, 5, 8, 6, 11], 7, 1) == False", "assert is_majority([5, 6, 7, 4, 7, 4, 8, 10], 6, 8) == False", "assert is_majority([5, 3, 4, 8, 2, 7, 6, 6], 13, 6) == False", "assert is_majority([4, 5, 5, 7, 5, 3, 8, 9], 7, 2) == False", "assert is_majority([3, 5, 3, 1, 1, 9, 1, 2], 3, 9) == False", "assert is_majority([2, 5, 6, 8, 6, 9, 1, 4], 7, 7) == False", "assert is_majority([4, 3, 2, 6, 8, 8, 9, 2], 7, 8) == False", "assert is_majority([5, 1, 6, 4, 4, 5, 5, 9], 3, 3) == False", "assert is_majority([6, 2, 5, 5, 2, 2, 2, 9], 7, 4) == False", "assert is_majority([2, 3, 6, 3, 4, 3, 10, 9], 6, 3) == False", "assert is_majority([5, 2, 4, 5, 9, 4, 2, 10], 3, 4) == False", "assert is_majority([2, 3, 4, 5, 5, 9, 8, 10], 4, 1) == False", "assert is_majority([3, 1, 7, 6, 5, 2, 2, 10], 5, 8) == False", "assert is_majority([1, 2, 3, 6, 6, 8, 7, 2], 7, 6) == False", "assert is_majority([5, 2, 6, 3, 3, 2, 3, 11], 8, 2) == False", "assert is_majority([4, 3, 5, 6, 2, 8, 5, 10], 5, 8) == False", "assert is_majority([3, 5, 4, 1, 1, 1, 9, 4], 5, 5) == False", "assert is_majority([1, 1, 2, 3, 2, 8, 8, 8], 11, 2) == False", "assert is_majority([2, 5, 2, 7, 9, 3, 6, 5], 8, 1) == False", "assert is_majority([3, 2, 3, 2, 5, 8, 11, 11], 9, 7) == False", "assert is_majority([4, 4, 1, 8, 2, 6, 1, 10], 9, 2) == False", "assert is_majority([4, 2, 6, 8, 9, 4, 4, 4], 13, 1) == False", "assert is_majority([1, 3, 7, 3, 1, 7, 10, 7], 4, 8) == False", "assert is_majority([6, 1, 7, 8, 4, 1, 3, 9], 7, 3) == False", "assert is_majority([1, 6, 2, 6, 3], 7, 2) == False", "assert is_majority([2, 1, 1, 7, 2], 2, 5) == False", "assert is_majority([5, 1, 6, 5, 7], 5, 5) == False", "assert is_majority([2, 1, 1, 6, 6], 5, 4) == False", "assert is_majority([2, 2, 2, 4, 6], 3, 6) == False", "assert is_majority([2, 1, 6, 3, 1], 6, 3) == False", "assert is_majority([3, 5, 5, 6, 5], 3, 6) == False", "assert is_majority([1, 1, 3, 5, 4], 5, 6) == False", "assert is_majority([1, 6, 4, 3, 1], 6, 2) == False", "assert is_majority([6, 3, 4, 4, 2], 9, 2) == False", "assert is_majority([3, 4, 4, 7, 7], 3, 2) == False", "assert is_majority([5, 3, 4, 6, 3], 1, 2) == False", "assert is_majority([6, 5, 5, 1, 1], 4, 2) == False", "assert is_majority([1, 4, 1, 6, 4], 2, 1) == False", "assert is_majority([2, 5, 2, 2, 7], 6, 5) == False", "assert is_majority([5, 5, 1, 3, 3], 4, 5) == False", "assert is_majority([5, 6, 1, 5, 6], 2, 2) == False", "assert is_majority([4, 2, 5, 3, 5], 6, 1) == False", "assert is_majority([6, 2, 6, 6, 7], 9, 1) == False", "assert is_majority([6, 5, 1, 3, 5], 10, 4) == False", "assert is_majority([6, 5, 6, 6, 3], 3, 3) == False", "assert is_majority([6, 6, 5, 3, 7], 3, 4) == False", "assert is_majority([1, 3, 4, 7, 7], 4, 6) == False", "assert is_majority([2, 2, 6, 7, 6], 9, 1) == False", "assert is_majority([1, 3, 2, 7, 6], 3, 2) == False", "assert is_majority([3, 2, 4, 2, 4], 2, 2) == False", "assert is_majority([1, 4, 4, 1, 4], 2, 6) == False", "assert is_majority([3, 4, 3, 1, 4], 2, 6) == False", "assert is_majority([4, 1, 4, 2, 2], 2, 2) == False", "assert is_majority([1, 3, 3, 3, 7], 5, 2) == False", "assert is_majority([6, 6, 1, 3, 1], 7, 1) == False", "assert is_majority([1, 5, 2, 2, 2], 2, 6) == False", "assert is_majority([2, 2, 4, 6, 5], 2, 4) == False"], "entry_point": "is_majority", "repair_prompt": ["Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.) Ensure that your solution efficiently handles large arrays.\nexample:\nis_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n", " Write a function that, given a sorted array, its length (n), and an element, determines whether the element is the majority element in the array. The majority element is defined as the one that appears more than n/2 times in the array. The solution should be efficient, capable of handling large arrays effectively.\nexample:\nis_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n", " Write a function that, given a sorted array of length n and an element, determines if the element is the majority element in the array. The majority element occurs more than n/2 times. Ensure the solution is efficient for large arrays.\nexample:\nis_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n"], "completion": "from typing import *\ndef is_majority(arr, n, x):\n    def first(arr, x, n):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    def last(arr, x, n):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif x < arr[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n\n    i = first(arr, x, n)\n    if i == -1:\n        return False\n    j = last(arr, x, n)\n    return (j - i + 1) > n // 2", "completions": ["from typing import *\ndef is_majority(arr, n, x):\n    # Step 1: Verify the input array is sorted\n    if not all(arr[i] <= arr[i + 1] for i in range(n - 1)):\n        return \"Error: The input array is not sorted.\"\n\n    # Step 2: Find the first occurrence of the element\n    def first(arr, low, high, x, n):\n        if high >= low:\n            mid = low + (high - low) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return first(arr, mid + 1, high, x, n)\n            else:\n                return first(arr, low, mid - 1, x, n)\n        return -1\n\n    # Step 3: Find the last occurrence of the element\n    def last(arr, low, high, x, n):\n        if high >= low:\n            mid = low + (high - low) // 2\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif x < arr[mid]:\n                return last(arr, low, mid - 1, x, n)\n            else:\n                return last(arr, mid + 1, high, x, n)\n        return -1\n\n    # Step 4: Calculate the count of the element\n    i = first(arr, 0, n - 1, x, n)\n    if i == -1:\n        return False\n    j = last(arr, 0, n - 1, x, n)\n\n    # Step 5: Determine if the element is the majority element\n    if j - i + 1 > n // 2:\n        return True\n    else:\n        return False", "from typing import *\ndef is_majority(sorted_array, n, element):\n    # Step 1: Verify Input\n    if not sorted_array or n <= 0:\n        raise ValueError(\"Input array must be non-empty and length must be positive.\")\n    \n    # Step 2: Find the Middle Index\n    middle_index = n // 2\n    \n    # Step 3: Count Occurrences\n    count = 0\n    for i in range(n):\n        if sorted_array[i] == element:\n            count += 1\n    \n    # Step 4: Determine Majority\n    if count > n // 2:\n        return True\n    else:\n        return False", "from typing import *\ndef is_majority(array, n, element):\n    if n == 0:\n        return False\n    \n    # Find the first occurrence of the element\n    first_occurrence = find_first_occurrence(array, n, element)\n    \n    if first_occurrence == -1:\n        return False\n    \n    # Find the last occurrence of the element\n    last_occurrence = find_last_occurrence(array, n, element)\n    \n    # Calculate the count of the element\n    count = last_occurrence - first_occurrence + 1\n    \n    # Check if the count is more than n/2\n    return count > n // 2\n\ndef find_first_occurrence(array, n, element):\n    left, right = 0, n - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == element:\n            result = mid\n            right = mid - 1\n        elif array[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n\ndef find_last_occurrence(array, n, element):\n    left, right = 0, n - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == element:\n            result = mid\n            left = mid + 1\n        elif array[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result", "from typing import *\ndef find_first(arr, x, n):\n    low, high, res = 0, n - 1, -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res\n\ndef find_last(arr, x, n):\n    low, high, res = 0, n - 1, -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\n\ndef is_majority(arr, n, x):\n    i = find_first(arr, x, n)\n    if i == -1:\n        return False\n    if (i + n // 2) <= (n - 1) and arr[i + n // 2] == x:\n        return True\n    else:\n        return False", "from typing import *\ndef is_majority(arr, n, x):\n    # Step 1: Find a candidate for the majority element using Moore's Voting Algorithm\n    candidate = find_candidate(arr, n)\n    \n    # Step 2: Verify if the candidate found is indeed the majority element by counting its occurrences in the array\n    if is_majority_element(arr, n, candidate):\n        return True\n    else:\n        return False\n\ndef find_candidate(arr, n):\n    majority_index = 0\n    count = 1\n    for i in range(1, n):\n        if arr[majority_index] == arr[i]:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            majority_index = i\n            count = 1\n    return arr[majority_index]\n\ndef is_majority_element(arr, n, candidate):\n    count = 0\n    for i in range(n):\n        if arr[i] == candidate:\n            count += 1\n    return count > n // 2", "from typing import *\ndef is_majority(arr, n, x):\n    def find_first(arr, n, x):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    def find_last(arr, n, x):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif x < arr[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n\n    first_index = find_first(arr, n, x)\n    last_index = find_last(arr, n, x)\n\n    if first_index == -1 or last_index == -1:\n        return False\n\n    return (last_index - first_index + 1) > (n // 2)", "from typing import *\ndef is_majority(arr, n, x):\n    # Step 1: Implement a binary search to find the first occurrence of the element.\n    def first_occurrence(arr, x):\n        low, high = 0, len(arr) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    # Step 2: Count the occurrences of the element within the range found in the previous step.\n    first_index = first_occurrence(arr, x)\n    if first_index == -1:\n        return False\n    count = 1\n    for i in range(first_index + 1, len(arr)):\n        if arr[i] == x:\n            count += 1\n\n    # Step 3: Determine if the element is the majority.\n    return count > len(arr) // 2", "from typing import *\ndef is_majority(arr, n, x):\n    # Step 1: Input Validation\n    if not arr or n <= 0:\n        return False\n\n    # Step 2: Initialize Variables\n    count = 0\n    candidate = None\n\n    # Step 3: Find the potential candidate for majority element\n    for num in arr:\n        if count == 0:\n            candidate = num\n            count = 1\n        elif candidate == num:\n            count += 1\n        else:\n            count -= 1\n\n    # Step 4: Verify if the candidate is the majority element\n    count = sum(1 for num in arr if num == candidate)\n    return count > n // 2", "from typing import *\ndef is_majority(arr, n, x):\n    # Step 1: Input Validation\n    if not arr or n <= 0:\n        return False\n\n    # Step 2: Initialize Variables\n    count = 0\n    candidate = None\n\n    # Step 3: Linear Scan to Find Candidate\n    for num in arr:\n        if count == 0:\n            candidate = num\n        if num == candidate:\n            count += 1\n        else:\n            count -= 1\n\n    # Step 4: Verify if Candidate is Majority Element\n    count = sum(1 for num in arr if num == candidate)\n    return count > n // 2", "from typing import *\ndef is_majority(arr, n, x):\n    def first(arr, x, n):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    def last(arr, x, n):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif x < arr[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n\n    i = first(arr, x, n)\n    if i == -1:\n        return False\n    j = last(arr, x, n)\n    return (j - i + 1) > n // 2"], "session_history": {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Identify the majority element\",\n      \"Description\": \"Determine if there is an element in the array that occurs more than n/2 times.\"\n    },\n    {\n      \"Subproblem\": \"Binary Search for Majority Element\",\n      \"Description\": \"Use binary search to efficiently find the candidate for the majority element. This involves finding the first and last occurrence of the candidate in the array.\"\n    },\n    {\n      \"Subproblem\": \"Verify the Majority Element\",\n      \"Description\": \"Check if the candidate found in the previous step actually occurs more than n/2 times in the array.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"1. Identify the candidate for the majority element\",\n      \"Details\": \"Use binary search to find the first occurrence of the potential majority element.\"\n    },\n    {\n      \"Step\": \"2. Verify the candidate's count\",\n      \"Details\": \"Check the count of the candidate element in the array to ensure it occurs more than n/2 times.\"\n    },\n    {\n      \"Step\": \"3. Return the result\",\n      \"Details\": \"Return True if the candidate is the majority element, otherwise return False.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than n/2 times in a sorted array.\n    Explanation: In the context of the requirement, the majority element is the element that occurs more frequently than half the length of the array. This is crucial for efficiently determining if the given element is the majority element.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': This phrase indicates that the frequency of the element must be greater than half the length of the array.\n    Explanation: For example, in an array of length 7, an element", "Round_0": {"code": "def is_majority(arr, n, x):\n    def first(arr, x, n):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    def last(arr, x, n):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif x < arr[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n\n    i = first(arr, x, n)\n    if i == -1:\n        return False\n    j = last(arr, x, n)\n    return (j - i + 1) > n // 2", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Identify the majority element\",\n      \"Description\": \"Determine if the given element appears more than n/2 times in the array.\"\n    },\n    {\n      \"Subproblem\": \"Check if the array is sorted\",\n      \"Description\": \"Ensure the input array is sorted as the algorithm relies on this property for efficiency.\"\n    },\n    {\n      \"Subproblem\": \"Implement a binary search-like approach\",\n      \"Description\": \"Use a binary search method to efficiently find the first and last occurrence of the element to determine its count.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Verify the input array is sorted\",\n      \"Action\": \"Check if the input array is sorted. If not, return an error or message indicating the array needs to be sorted.\"\n    },\n    {\n      \"Step\": \"Find the first occurrence of the element\",\n      \"Action\": \"Use a binary search to find the first index where the element appears in the array.\"\n    },\n    {\n      \"Step\": \"Find the last occurrence of the element\",\n      \"Action\": \"Use a binary search to find the last index where the element appears in the array.\"\n    },\n    {\n      \"Step\": \"Calculate the count of the element\",\n      \"Action\": \"Calculate the count of the element by subtracting the index of the last occurrence from the index of the first occurrence and adding one.\"\n    },\n    {\n      \"Step\": \"Determine if the element is the majority element\",\n      \"Action\": \"Check if the count of the element is greater than n/2. If so, return True; otherwise, return False.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than n/2 times in the array.\n    Explanation: The core concept here is identifying an element that has a higher frequency than half of the array's length. This is crucial for the efficiency of the solution.\n\n# [phrase showing quantity relationship]\n    'more than': means that the frequency of the element must be greater than half of the array's length.\n    Explanation: This phrase indicates that we need to check if the count of the element is strictly greater than n/2, where n is the length", "Round_0": {"code": "def is_majority(arr, n, x):\n    # Step 1: Verify the input array is sorted\n    if not all(arr[i] <= arr[i + 1] for i in range(n - 1)):\n        return \"Error: The input array is not sorted.\"\n\n    # Step 2: Find the first occurrence of the element\n    def first(arr, low, high, x, n):\n        if high >= low:\n            mid = low + (high - low) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return first(arr, mid + 1, high, x, n)\n            else:\n                return first(arr, low, mid - 1, x, n)\n        return -1\n\n    # Step 3: Find the last occurrence of the element\n    def last(arr, low, high, x, n):\n        if high >= low:\n            mid = low + (high - low) // 2\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif x < arr[mid]:\n                return last(arr, low, mid - 1, x, n)\n            else:\n                return last(arr, mid + 1, high, x, n)\n        return -1\n\n    # Step 4: Calculate the count of the element\n    i = first(arr, 0, n - 1, x, n)\n    if i == -1:\n        return False\n    j = last(arr, 0, n - 1, x, n)\n\n    # Step 5: Determine if the element is the majority element\n    if j - i + 1 > n // 2:\n        return True\n    else:\n        return False", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Identify the majority element\",\n      \"Description\": \"Determine if the given element appears more than n/2 times in the array.\"\n    },\n    {\n      \"Subproblem\": \"Check if the array is sorted\",\n      \"Description\": \"Ensure the input array is sorted as the algorithm relies on this property for efficiency.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Verify Input\",\n      \"Description\": \"Check if the input array is sorted and confirm the element to be checked.\"\n    },\n    {\n      \"Step\": \"Find the Middle Index\",\n      \"Description\": \"Calculate the middle index of the array to use as a reference point for determining the majority element.\"\n    },\n    {\n      \"Step\": \"Count Occurrences\",\n      \"Description\": \"Count the occurrences of the given element from the middle index to both ends of the array.\"\n    },\n    {\n      \"Step\": \"Determine Majority\",\n      \"Description\": \"Compare the counted occurrences with n/2 to determine if the element is the majority element.\"\n    },\n    {\n      \"Step\": \"Return Result\",\n      \"Description\": \"Return True if the element is the majority element, otherwise return False.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than n/2 times in the array.\n    Explanation: The core concept here is identifying an element that has a higher frequency than half the length of the array. This is crucial for the efficiency and correctness of the solution.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': means the element should appear more than half the length of the array.\n    Explanation: This phrase indicates that we need to check if the frequency of the element is greater than half the length of the array.\n\n#", "Round_0": {"code": "def is_majority(sorted_array, n, element):\n    # Step 1: Verify Input\n    if not sorted_array or n <= 0:\n        raise ValueError(\"Input array must be non-empty and length must be positive.\")\n    \n    # Step 2: Find the Middle Index\n    middle_index = n // 2\n    \n    # Step 3: Count Occurrences\n    count = 0\n    for i in range(n):\n        if sorted_array[i] == element:\n            count += 1\n    \n    # Step 4: Determine Majority\n    if count > n // 2:\n        return True\n    else:\n        return False", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"The function should take a sorted array, its length, and the element to check as parameters.\"\n      },\n      {\n        \"subproblem\": \"Implement a method to determine if the element is a majority element.\",\n        \"details\": \"The majority element is defined as one that appears more than n/2 times in the array. We need to count the occurrences of the element in the array and compare it to n/2.\"\n      },\n      {\n        \"subproblem\": \"Handle edge cases.\",\n        \"details\": \"Consider cases where the array is empty, the element is not in the array, or the array does not contain a majority element.\"\n      },\n      {\n        \"subproblem\": \"Ensure the solution is efficient.\",\n        \"details\": \"The solution should be efficient, capable of handling large arrays effectively. This implies using an efficient search algorithm.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature and parameters.\",\n        \"details\": \"Define the function is_majority with parameters: array (sorted), n (length of the array), and element.\"\n      },\n      {\n        \"step\": \"Check for edge cases.\",\n        \"details\": \"Check if the array is empty, if the element is not in the array, or if the array does not contain a majority element.\"\n      },\n      {\n        \"step\": \"Count the occurrences of the element.\",\n        \"details\": \"Use a binary search to efficiently find the first and last occurrence of the element in the array. Calculate the count based on these positions.\"\n      },\n      {\n        \"step\": \"Determine if the element is a majority.\",\n        \"details\": \"Compare the count of the element to n/2 to determine if it is a majority element.\"\n      },\n      {\n        \"step\": \"Return the result.\",\n        \"details\": \"Return True if the element is a majority, otherwise return False.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than n/2 times in a sorted array.\n    Explanation: In the requirement, the majority element is defined as the one that appears more than n/2 times in the array. This means that if the element is present in the array, it should appear in more than half of the positions.\n\n# [phrase showing quantity relationship]\n    'more than': means that the element must appear in a count greater than n/2.\n    'n/2': this refers to half the length of the array.\n\n#", "Round_0": {"code": "def is_majority(array, n, element):\n    if n == 0:\n        return False\n    \n    # Find the first occurrence of the element\n    first_occurrence = find_first_occurrence(array, n, element)\n    \n    if first_occurrence == -1:\n        return False\n    \n    # Find the last occurrence of the element\n    last_occurrence = find_last_occurrence(array, n, element)\n    \n    # Calculate the count of the element\n    count = last_occurrence - first_occurrence + 1\n    \n    # Check if the count is more than n/2\n    return count > n // 2\n\ndef find_first_occurrence(array, n, element):\n    left, right = 0, n - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == element:\n            result = mid\n            right = mid - 1\n        elif array[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n\ndef find_last_occurrence(array, n, element):\n    left, right = 0, n - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == element:\n            result = mid\n            left = mid + 1\n        elif array[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Identify the majority element\",\n      \"Description\": \"Determine if there is an element in the array that occurs more than n/2 times.\"\n    },\n    {\n      \"Subproblem\": \"Binary Search for Majority Element\",\n      \"Description\": \"Use binary search to efficiently find the candidate for the majority element. This involves finding the first and last occurrence of the candidate in the array.\"\n    },\n    {\n      \"Subproblem\": \"Verify the Majority Element\",\n      \"Description\": \"Check if the candidate found in the previous step actually occurs more than n/2 times in the array.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"1\",\n      \"Task\": \"Implement a function to find the first occurrence of a given element in the sorted array using binary search.\"\n    },\n    {\n      \"Step\": \"2\",\n      \"Task\": \"Implement a function to find the last occurrence of the same given element in the sorted array using binary search.\"\n    },\n    {\n      \"Step\": \"3\",\n      \"Task\": \"Calculate the potential majority element by dividing the array length by 2 and using the first and last occurrence functions to determine if the element occurs more than n/2 times.\"\n    },\n    {\n      \"Step\": \"4\",\n      \"Task\": \"Check if the calculated potential majority element is indeed the majority element by counting its occurrences in the array.\"\n    },\n    {\n      \"Step\": \"5\",\n      \"Task\": \"Return True if the element is the majority element, otherwise return False.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than n/2 times in a sorted array.\n    Explanation: The majority element is a key concept in this requirement as it determines if an element is present in the array more than half the time.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': This phrase indicates that the frequency of the element must be greater than half the length of the array.\n    Explanation: This means we need to find an element whose count is greater than n/2, where n is the length of the array.", "Round_0": {"code": "def find_first(arr, x, n):\n    low, high, res = 0, n - 1, -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res\n\ndef find_last(arr, x, n):\n    low, high, res = 0, n - 1, -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\n\ndef is_majority(arr, n, x):\n    i = find_first(arr, x, n)\n    if i == -1:\n        return False\n    if (i + n // 2) <= (n - 1) and arr[i + n // 2] == x:\n        return True\n    else:\n        return False", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Identify the majority element\",\n      \"Description\": \"Determine if there is an element in the array that occurs more than n/2 times.\"\n    },\n    {\n      \"Subproblem\": \"Check the candidate element\",\n      \"Description\": \"Given a candidate element, verify if it occurs more than n/2 times in the array.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"1\",\n      \"Action\": \"Find a candidate for the majority element using Moore's Voting Algorithm.\"\n    },\n    {\n      \"Step\": \"2\",\n      \"Action\": \"Verify if the candidate found in step 1 is indeed the majority element by counting its occurrences in the array.\"\n    },\n    {\n      \"Step\": \"3\",\n      \"Action\": \"Return the result indicating whether the element is the majority element or not.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than n/2 times in the array.\n    Explanation: In the requirement, the majority element is defined as the element that occurs more than half the length of the array.\n\n# [phrase showing quantity relationship]\n    'more than': indicates that the frequency of the element must be greater than half the length of the array.\n    Explanation: The phrase \"more than n/2 times\" means that the element must appear more than half the number of elements in the array.\n\n# [degree adverb] \n   ", "Round_0": {"code": "def is_majority(arr, n, x):\n    # Step 1: Find a candidate for the majority element using Moore's Voting Algorithm\n    candidate = find_candidate(arr, n)\n    \n    # Step 2: Verify if the candidate found is indeed the majority element by counting its occurrences in the array\n    if is_majority_element(arr, n, candidate):\n        return True\n    else:\n        return False\n\ndef find_candidate(arr, n):\n    majority_index = 0\n    count = 1\n    for i in range(1, n):\n        if arr[majority_index] == arr[i]:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            majority_index = i\n            count = 1\n    return arr[majority_index]\n\ndef is_majority_element(arr, n, candidate):\n    count = 0\n    for i in range(n):\n        if arr[i] == candidate:\n            count += 1\n    return count > n // 2", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Identify the majority element\",\n      \"Description\": \"Determine if the given element appears more than n/2 times in the sorted array.\"\n    },\n    {\n      \"Subproblem\": \"Binary Search for the element\",\n      \"Description\": \"Use binary search to efficiently find the first and last occurrence of the element in the sorted array.\"\n    },\n    {\n      \"Subproblem\": \"Calculate the count of the element\",\n      \"Description\": \"Once the first and last occurrence are found, calculate the total count of the element.\"\n    },\n    {\n      \"Subproblem\": \"Compare the count with n/2\",\n      \"Description\": \"Check if the count of the element is greater than n/2 to determine if it is the majority element.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Initialize the function with the sorted array, its length, and the element to be checked.\",\n      \"Action\": \"Define the function is_majority(arr, n, x).\"\n    },\n    {\n      \"Step\": \"Use binary search to find the first occurrence of the element.\",\n      \"Action\": \"Implement a helper function to find the first occurrence of x in arr using binary search.\"\n    },\n    {\n      \"Step\": \"Use binary search to find the last occurrence of the element.\",\n      \"Action\": \"Implement a helper function to find the last occurrence of x in arr using binary search.\"\n    },\n    {\n      \"Step\": \"Calculate the count of the element.\",\n      \"Action\": \"Calculate the count of x between its first and last occurrence found in the previous steps.\"\n    },\n    {\n      \"Step\": \"Determine if the count is greater than n/2.\",\n      \"Action\": \"Check if the count is greater than n/2. If yes, return True; otherwise, return False.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than n/2 times in a sorted array.\n    Explanation: In the requirement, the majority element is defined as the element that occurs more than half the length of the array.\n\n# [phrase showing quantity relationship]\n    'more than': means that the element must appear more than n/2 times in the array.\n    Explanation: The phrase \"more than n/2 times\" indicates that we need to check if the frequency of the element is greater than half the length of the array.\n\n# [degree adverb", "Round_0": {"code": "def is_majority(arr, n, x):\n    def find_first(arr, n, x):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    def find_last(arr, n, x):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif x < arr[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n\n    first_index = find_first(arr, n, x)\n    last_index = find_last(arr, n, x)\n\n    if first_index == -1 or last_index == -1:\n        return False\n\n    return (last_index - first_index + 1) > (n // 2)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"The function should take a sorted array and an element as inputs.\"\n      },\n      {\n        \"subproblem\": \"Check if the element is a majority element.\",\n        \"details\": \"Determine if the given element occurs more than n/2 times in the array.\"\n      },\n      {\n        \"subproblem\": \"Implement a binary search to find the first occurrence of the element.\",\n        \"details\": \"This will help in determining the range where the element might be the majority.\"\n      },\n      {\n        \"subproblem\": \"Count the occurrences of the element within the range found in the previous step.\",\n        \"details\": \"Ensure the count is more than n/2 to confirm the element is the majority.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function and its parameters.\",\n        \"details\": \"Create a function named is_majority that takes a sorted array and an element as arguments.\"\n      },\n      {\n        \"step\": \"Implement binary search to find the first occurrence of the element.\",\n        \"details\": \"Use a binary search algorithm to find the first index of the element in the array.\"\n      },\n      {\n        \"step\": \"Count the occurrences of the element.\",\n        \"details\": \"Starting from the first occurrence found, count how many times the element appears in the array.\"\n      },\n      {\n        \"step\": \"Determine if the element is the majority.\",\n        \"details\": \"Check if the count of the element is more than half the length of the array.\"\n      },\n      {\n        \"step\": \"Return the result.\",\n        \"details\": \"Return True if the element is the majority, otherwise return False.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than n/2 times in a sorted array.\n    Explanation: In the context of the requirement, a majority element is an element that occurs more frequently than half the length of the array.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': This phrase indicates that the element must appear more than half the number of elements in the array.\n    Explanation: For example, in an array of length 7, an element must appear more than 3 times to be considered the majority element.\n\n", "Round_0": {"code": "def is_majority(arr, n, x):\n    # Step 1: Implement a binary search to find the first occurrence of the element.\n    def first_occurrence(arr, x):\n        low, high = 0, len(arr) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    # Step 2: Count the occurrences of the element within the range found in the previous step.\n    first_index = first_occurrence(arr, x)\n    if first_index == -1:\n        return False\n    count = 1\n    for i in range(first_index + 1, len(arr)):\n        if arr[i] == x:\n            count += 1\n\n    # Step 3: Determine if the element is the majority.\n    return count > len(arr) // 2", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Identify the majority element\",\n      \"Description\": \"Determine if the given element is the majority element in the array. This requires checking if the element appears more than n/2 times in the array.\"\n    },\n    {\n      \"Subproblem\": \"Efficiently find the majority element\",\n      \"Description\": \"Implement a method to find the majority element in a sorted array efficiently. Since the array is sorted, we can use a linear scan to find the element that appears more than n/2 times.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Input Validation\",\n      \"Description\": \"Ensure the input array is sorted and the element to be checked is provided.\"\n    },\n    {\n      \"Step\": \"Initialize Variables\",\n      \"Description\": \"Set up counters and other necessary variables to track the occurrences of the element.\"\n    },\n    {\n      \"Step\": \"Linear Scan\",\n      \"Description\": \"Iterate through the array and count the occurrences of the given element. Stop when the count exceeds n/2.\"\n    },\n    {\n      \"Step\": \"Return Result\",\n      \"Description\": \"Return True if the element's count is more than n/2, otherwise return False.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than n/2 times in the array.\n    Explanation: In the requirement, the majority element is the one that occurs more than half the length of the array.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': means the element should appear more than half the length of the array.\n    Explanation: This phrase indicates that the element must appear in more than half of the positions in the array to be considered the majority element.\n\n# [degree adverb] \n    No degree adverb specifically", "Round_0": {"code": "def is_majority(arr, n, x):\n    # Step 1: Input Validation\n    if not arr or n <= 0:\n        return False\n\n    # Step 2: Initialize Variables\n    count = 0\n    candidate = None\n\n    # Step 3: Find the potential candidate for majority element\n    for num in arr:\n        if count == 0:\n            candidate = num\n            count = 1\n        elif candidate == num:\n            count += 1\n        else:\n            count -= 1\n\n    # Step 4: Verify if the candidate is the majority element\n    count = sum(1 for num in arr if num == candidate)\n    return count > n // 2", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Identify the majority element\",\n      \"Description\": \"Determine if the given element is the majority element in the array. This requires checking if the element appears more than n/2 times in the array.\"\n    },\n    {\n      \"Subproblem\": \"Efficiently find the majority element\",\n      \"Description\": \"Implement a method to find the majority element in a sorted array efficiently. Since the array is sorted, we can use a linear scan to find the element that appears more than n/2 times.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"Input Validation\",\n      \"Description\": \"Ensure the input array is sorted and the element to be checked is provided.\"\n    },\n    {\n      \"Step\": \"Initialize Variables\",\n      \"Description\": \"Set up counters and other necessary variables to track the occurrences of the element.\"\n    },\n    {\n      \"Step\": \"Linear Scan\",\n      \"Description\": \"Iterate through the array and count the occurrences of the given element. Stop when the count exceeds n/2.\"\n    },\n    {\n      \"Step\": \"Return Result\",\n      \"Description\": \"Return True if the element count exceeds n/2, otherwise return False.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than n/2 times in an array.\n    Explanation: In the context of the requirement, the majority element is the one that occurs more frequently than any other element in the array. This is crucial because the solution needs to be efficient, especially for large arrays.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': means that the element should appear in the array more than half the length of the array.\n    Explanation: This phrase indicates that the element we are looking for should appear in the array", "Round_0": {"code": "def is_majority(arr, n, x):\n    # Step 1: Input Validation\n    if not arr or n <= 0:\n        return False\n\n    # Step 2: Initialize Variables\n    count = 0\n    candidate = None\n\n    # Step 3: Linear Scan to Find Candidate\n    for num in arr:\n        if count == 0:\n            candidate = num\n        if num == candidate:\n            count += 1\n        else:\n            count -= 1\n\n    # Step 4: Verify if Candidate is Majority Element\n    count = sum(1 for num in arr if num == candidate)\n    return count > n // 2", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": [\n    {\n      \"Subproblem\": \"Identify the majority element\",\n      \"Description\": \"Determine if there is an element in the array that occurs more than n/2 times.\"\n    },\n    {\n      \"Subproblem\": \"Binary Search for Majority Element\",\n      \"Description\": \"Use binary search to efficiently find the candidate for the majority element. This involves finding the first and last occurrence of the candidate in the array.\"\n    },\n    {\n      \"Subproblem\": \"Verify the Majority Element\",\n      \"Description\": \"Check if the candidate found in the previous step actually occurs more than n/2 times in the array.\"\n    }\n  ],\n  \"High-Level Plan\": [\n    {\n      \"Step\": \"1. Identify the candidate for the majority element\",\n      \"Details\": \"Use binary search to find the first occurrence of the potential majority element.\"\n    },\n    {\n      \"Step\": \"2. Verify the candidate's count\",\n      \"Details\": \"Check the count of the candidate element in the array to ensure it occurs more than n/2 times.\"\n    },\n    {\n      \"Step\": \"3. Return the result\",\n      \"Details\": \"Return True if the candidate is the majority element, otherwise return False.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than n/2 times in a sorted array.\n    Explanation: In the context of the requirement, the majority element is the element that occurs more frequently than half the length of the array. This is crucial for efficiently determining if the given element is the majority element.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': This phrase indicates that the frequency of the element must be greater than half the length of the array.\n    Explanation: For example, in an array of length 7, an element", "Round_0": {"code": "def is_majority(arr, n, x):\n    def first(arr, x, n):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n\n    def last(arr, x, n):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif x < arr[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n\n    i = first(arr, x, n)\n    if i == -1:\n        return False\n    j = last(arr, x, n)\n    return (j - i + 1) > n // 2", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(is_majority):\n\tassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "def check(is_majority):\n\tassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "def check(is_majority):\n\tassert is_majority([6, 2, 3, 8, 1, 4, 11], 7, 8) == False", "def check(is_majority):\n\tassert is_majority([4, 6, 3, 2, 6, 3, 11], 9, 5) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 4, 6, 6, 7, 12], 7, 4) == False", "def check(is_majority):\n\tassert is_majority([6, 3, 2, 1, 8, 7, 13], 12, 7) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 5, 8, 6, 5, 9], 4, 6) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 8, 6, 6, 8, 8], 11, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 5, 4, 1, 2, 5, 12], 4, 7) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 1, 4, 1, 4, 14], 7, 8) == False", "def check(is_majority):\n\tassert is_majority([2, 7, 3, 4, 1, 4, 12], 4, 7) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 1, 7, 5, 1, 15], 3, 6) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 7, 4, 3, 3, 7], 3, 1) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 7, 1, 7, 4, 12], 8, 8) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 2, 4, 8, 1, 11], 3, 4) == False", "def check(is_majority):\n\tassert is_majority([1, 2, 7, 5, 4, 6, 15], 5, 5) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 4, 5, 8, 3, 7], 6, 7) == False", "def check(is_majority):\n\tassert is_majority([3, 3, 8, 6, 3, 7, 13], 9, 7) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 1, 6, 6, 6, 5], 3, 1) == False", "def check(is_majority):\n\tassert is_majority([6, 2, 3, 4, 7, 2, 9], 2, 5) == False", "def check(is_majority):\n\tassert is_majority([6, 4, 6, 7, 3, 8, 10], 5, 3) == False", "def check(is_majority):\n\tassert is_majority([4, 5, 2, 7, 2, 8, 12], 4, 3) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 1, 1, 6, 5, 13], 4, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 8, 4, 4, 1, 9], 3, 3) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 1, 5, 4, 7, 8], 7, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 1, 4, 1, 4, 10], 4, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 8, 2, 2, 8, 5], 7, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 2, 3, 4, 1, 9], 3, 4) == True", "def check(is_majority):\n\tassert is_majority([4, 3, 7, 3, 1, 4, 5], 11, 1) == False", "def check(is_majority):\n\tassert is_majority([2, 7, 3, 6, 2, 6, 11], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([5, 2, 1, 6, 3, 6, 6], 9, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 6, 7, 2, 3, 8], 2, 7) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 6, 3, 5, 1, 9], 8, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 5, 7, 5, 1, 3, 14], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 3, 2, 6, 1, 6], 10, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 5, 5, 4, 2, 11, 7], 5, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 7, 7, 4, 1, 5, 10], 3, 8) == False", "def check(is_majority):\n\tassert is_majority([2, 6, 6, 2, 9, 3, 7, 9], 3, 7) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 1, 6, 6, 5, 7, 3], 7, 4) == False", "def check(is_majority):\n\tassert is_majority([6, 4, 4, 6, 9, 4, 2, 7], 7, 3) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 4, 4, 1, 9, 7, 1], 11, 3) == False", "def check(is_majority):\n\tassert is_majority([5, 6, 7, 5, 3, 9, 9, 3], 8, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 6, 6, 6, 3, 3, 3, 6], 10, 3) == True", "def check(is_majority):\n\tassert is_majority([6, 4, 1, 3, 6, 5, 7, 7], 6, 9) == False", "def check(is_majority):\n\tassert is_majority([4, 6, 1, 8, 5, 8, 6, 11], 7, 1) == False", "def check(is_majority):\n\tassert is_majority([5, 6, 7, 4, 7, 4, 8, 10], 6, 8) == False", "def check(is_majority):\n\tassert is_majority([5, 3, 4, 8, 2, 7, 6, 6], 13, 6) == False", "def check(is_majority):\n\tassert is_majority([4, 5, 5, 7, 5, 3, 8, 9], 7, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 3, 1, 1, 9, 1, 2], 3, 9) == False", "def check(is_majority):\n\tassert is_majority([2, 5, 6, 8, 6, 9, 1, 4], 7, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 2, 6, 8, 8, 9, 2], 7, 8) == False", "def check(is_majority):\n\tassert is_majority([5, 1, 6, 4, 4, 5, 5, 9], 3, 3) == False", "def check(is_majority):\n\tassert is_majority([6, 2, 5, 5, 2, 2, 2, 9], 7, 4) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 6, 3, 4, 3, 10, 9], 6, 3) == False", "def check(is_majority):\n\tassert is_majority([5, 2, 4, 5, 9, 4, 2, 10], 3, 4) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 4, 5, 5, 9, 8, 10], 4, 1) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 7, 6, 5, 2, 2, 10], 5, 8) == False", "def check(is_majority):\n\tassert is_majority([1, 2, 3, 6, 6, 8, 7, 2], 7, 6) == False", "def check(is_majority):\n\tassert is_majority([5, 2, 6, 3, 3, 2, 3, 11], 8, 2) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 5, 6, 2, 8, 5, 10], 5, 8) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 4, 1, 1, 1, 9, 4], 5, 5) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 2, 3, 2, 8, 8, 8], 11, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 5, 2, 7, 9, 3, 6, 5], 8, 1) == False", "def check(is_majority):\n\tassert is_majority([3, 2, 3, 2, 5, 8, 11, 11], 9, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 1, 8, 2, 6, 1, 10], 9, 2) == False", "def check(is_majority):\n\tassert is_majority([4, 2, 6, 8, 9, 4, 4, 4], 13, 1) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 7, 3, 1, 7, 10, 7], 4, 8) == False", "def check(is_majority):\n\tassert is_majority([6, 1, 7, 8, 4, 1, 3, 9], 7, 3) == False", "def check(is_majority):\n\tassert is_majority([1, 6, 2, 6, 3], 7, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 1, 7, 2], 2, 5) == False", "def check(is_majority):\n\tassert is_majority([5, 1, 6, 5, 7], 5, 5) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 1, 6, 6], 5, 4) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 2, 4, 6], 3, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 6, 3, 1], 6, 3) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 5, 6, 5], 3, 6) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 3, 5, 4], 5, 6) == False", "def check(is_majority):\n\tassert is_majority([1, 6, 4, 3, 1], 6, 2) == False", "def check(is_majority):\n\tassert is_majority([6, 3, 4, 4, 2], 9, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 4, 7, 7], 3, 2) == False", "def check(is_majority):\n\tassert is_majority([5, 3, 4, 6, 3], 1, 2) == False", "def check(is_majority):\n\tassert is_majority([6, 5, 5, 1, 1], 4, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 4, 1, 6, 4], 2, 1) == False", "def check(is_majority):\n\tassert is_majority([2, 5, 2, 2, 7], 6, 5) == False", "def check(is_majority):\n\tassert is_majority([5, 5, 1, 3, 3], 4, 5) == False", "def check(is_majority):\n\tassert is_majority([5, 6, 1, 5, 6], 2, 2) == False", "def check(is_majority):\n\tassert is_majority([4, 2, 5, 3, 5], 6, 1) == False", "def check(is_majority):\n\tassert is_majority([6, 2, 6, 6, 7], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([6, 5, 1, 3, 5], 10, 4) == False", "def check(is_majority):\n\tassert is_majority([6, 5, 6, 6, 3], 3, 3) == False", "def check(is_majority):\n\tassert is_majority([6, 6, 5, 3, 7], 3, 4) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 4, 7, 7], 4, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 6, 7, 6], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 2, 7, 6], 3, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 2, 4, 2, 4], 2, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 4, 4, 1, 4], 2, 6) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 3, 1, 4], 2, 6) == False", "def check(is_majority):\n\tassert is_majority([4, 1, 4, 2, 2], 2, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 3, 3, 7], 5, 2) == False", "def check(is_majority):\n\tassert is_majority([6, 6, 1, 3, 1], 7, 1) == False", "def check(is_majority):\n\tassert is_majority([1, 5, 2, 2, 2], 2, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 4, 6, 5], 2, 4) == False"], "scores": [0.2255, 0.7157, 0.951, 0.9314, 0.5784, 0.8824, 0.9804, 0.7647, 0.7647, 0.9608], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [23, 73, 97, 95, 59, 90, 100, 78, 78, 98], "passed": false, "pass": false, "pass_num": 1, "round": 70, "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 70}
