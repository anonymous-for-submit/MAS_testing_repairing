{"task_id": 3, "prompt": "Write a python function to identify non-prime numbers.", "pass@10": 0, "passes": 10}
{"task_id": 6, "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.", "pass@10": 0, "passes": 8}
{"task_id": 7, "prompt": "Write a function to find all words which are at least 4 characters long in a string.", "pass@10": 0, "passes": 10}
{"task_id": 8, "prompt": "Write a function to find squares of individual elements in a list.", "pass@10": 0, "passes": 10}
{"task_id": 11, "prompt": "Write a python function to remove first and last occurrence of a given character from the string.", "pass@10": 0, "passes": 10}
{"task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "pass@10": 0, "passes": 6}
{"task_id": 14, "prompt": "Write a python function to find the volume of a triangular prism.", "pass@10": 0, "passes": 10}
{"task_id": 17, "prompt": "Write a function that returns the perimeter of a square given its side length as input.", "pass@10": 0, "passes": 10}
{"task_id": 18, "prompt": "Write a function to remove characters from the first string which are present in the second string.", "pass@10": 0, "passes": 10}
{"task_id": 19, "prompt": "Write a function to find whether a given array of integers contains any duplicate element.", "pass@10": 0, "passes": 10}
{"task_id": 58, "prompt": "Write a python function to check whether the given two integers have opposite sign or not.", "pass@10": 0, "passes": 9}
{"task_id": 59, "prompt": "Write a function to find the nth octagonal number.", "pass@10": 0, "passes": 10}
{"task_id": 62, "prompt": "Write a python function to find smallest number in a list.", "pass@10": 0, "passes": 10}
{"task_id": 63, "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.", "pass@10": 0, "passes": 10}
{"task_id": 64, "prompt": "Write a function to sort a list of tuples using the second value of each tuple.", "pass@10": 0, "passes": 9}
{"task_id": 65, "prompt": "Write a function to flatten a list and sum all of its elements.", "pass@10": 0, "passes": 10}
{"task_id": 67, "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.", "pass@10": 0, "passes": 9}
{"task_id": 68, "prompt": "Write a python function to check whether the given array is monotonic or not.", "pass@10": 0, "passes": 10}
{"task_id": 69, "prompt": "Write a function to check whether a list contains the given sublist or not.", "pass@10": 0, "passes": 10}
{"task_id": 71, "prompt": "Write a function to sort a list of elements.", "pass@10": 0, "passes": 10}
{"task_id": 79, "prompt": "Write a python function to check whether the length of the word is odd or not.", "pass@10": 0, "passes": 10}
{"task_id": 80, "prompt": "Write a function to find the nth tetrahedral number.", "pass@10": 0, "passes": 10}
{"task_id": 84, "prompt": "Write a function to find the nth number in the newman conway sequence.", "pass@10": 0, "passes": 2}
{"task_id": 88, "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.", "pass@10": 0, "passes": 10}
{"task_id": 89, "prompt": "Write a function to find the closest smaller number than n.", "pass@10": 0, "passes": 10}
{"task_id": 90, "prompt": "Write a python function to find the length of the longest word.", "pass@10": 0, "passes": 10}
{"task_id": 91, "prompt": "Write a function to check if a string is present as a substring in a given list of string values.", "pass@10": 0, "passes": 10}
{"task_id": 93, "prompt": "Write a function to calculate the value of 'a' to the power 'b'.", "pass@10": 0, "passes": 10}
{"task_id": 94, "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.", "pass@10": 0, "passes": 9}
{"task_id": 95, "prompt": "Write a python function to find the length of the smallest list in a list of lists.", "pass@10": 0, "passes": 9}
{"task_id": 96, "prompt": "Write a python function to find the number of divisors of a given integer.", "pass@10": 0, "passes": 10}
{"task_id": 97, "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.", "pass@10": 0, "passes": 10}
{"task_id": 98, "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "pass@10": 0, "passes": 9}
{"task_id": 100, "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.", "pass@10": 0, "passes": 10}
{"task_id": 106, "prompt": "Write a function to append the given list to the given tuples.", "pass@10": 0, "passes": 10}
{"task_id": 108, "prompt": "Write a function to merge three lists into a single sorted list.", "pass@10": 0, "passes": 10}
{"task_id": 111, "prompt": "Write a function to find the common elements in given nested lists.", "pass@10": 0, "passes": 2}
{"task_id": 113, "prompt": "Write a function to check if a string represents an integer or not.", "pass@10": 0, "passes": 5}
{"task_id": 115, "prompt": "Write a function to check whether all dictionaries in a list are empty or not.", "pass@10": 0, "passes": 2}
{"task_id": 116, "prompt": "Write a function to convert a given tuple of positive integers into a single integer.", "pass@10": 0, "passes": 10}
{"task_id": 120, "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "pass@10": 0, "passes": 9}
{"task_id": 123, "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.", "pass@10": 0, "passes": 7}
{"task_id": 125, "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "pass@10": 0, "passes": 5}
{"task_id": 127, "prompt": "Write a function to multiply two integers.", "pass@10": 0, "passes": 10}
{"task_id": 128, "prompt": "Write a function to find words that are longer than n characters from a given list of words.", "pass@10": 0, "passes": 10}
{"task_id": 129, "prompt": "Write a function to calculate whether the matrix is a magic square.", "pass@10": 0, "passes": 4}
{"task_id": 130, "prompt": "Write a function to find the item with maximum frequency in a given list.", "pass@10": 0, "passes": 1}
{"task_id": 131, "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).", "pass@10": 0, "passes": 10}
{"task_id": 132, "prompt": "Write a function to convert a tuple to a string.", "pass@10": 0, "passes": 10}
{"task_id": 133, "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.", "pass@10": 0, "passes": 10}
{"task_id": 135, "prompt": "Write a function to find the nth hexagonal number.", "pass@10": 0, "passes": 10}
{"task_id": 138, "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "pass@10": 0, "passes": 4}
{"task_id": 141, "prompt": "Write a function to sort a list of elements.", "pass@10": 0, "passes": 10}
{"task_id": 142, "prompt": "Write a function to count number items that are identical in the same position of three given lists.", "pass@10": 0, "passes": 10}
{"task_id": 161, "prompt": "Write a function to remove all elements from a given list present in another list.", "pass@10": 0, "passes": 8}
{"task_id": 162, "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).", "pass@10": 0, "passes": 10}
{"task_id": 165, "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).", "pass@10": 0, "passes": 10}
{"task_id": 167, "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.", "pass@10": 0, "passes": 4}
{"task_id": 168, "prompt": "Write a function to count the number of occurrences of a number in a given list.", "pass@10": 0, "passes": 10}
{"task_id": 170, "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.", "pass@10": 0, "passes": 10}
{"task_id": 171, "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.", "pass@10": 0, "passes": 10}
{"task_id": 222, "prompt": "Write a function to check if all the elements in tuple have same data type or not.", "pass@10": 0, "passes": 10}
{"task_id": 224, "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.", "pass@10": 0, "passes": 10}
{"task_id": 226, "prompt": "Write a python function to remove the characters which have odd index values of a given string.", "pass@10": 0, "passes": 10}
{"task_id": 227, "prompt": "Write a function to find minimum of three numbers.", "pass@10": 0, "passes": 10}
{"task_id": 230, "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.", "pass@10": 0, "passes": 10}
{"task_id": 232, "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.", "pass@10": 0, "passes": 10}
{"task_id": 234, "prompt": "Write a function to find the volume of a cube given its side length.", "pass@10": 0, "passes": 10}
{"task_id": 238, "prompt": "Write a python function to count the number of non-empty substrings of a given string.", "pass@10": 0, "passes": 10}
{"task_id": 239, "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.", "pass@10": 0, "passes": 10}
{"task_id": 240, "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.", "pass@10": 0, "passes": 10}
{"task_id": 242, "prompt": "Write a function to count the total number of characters in a string.", "pass@10": 0, "passes": 10}
{"task_id": 246, "prompt": "Write a function for computing square roots using the babylonian method.", "pass@10": 0, "passes": 1}
{"task_id": 250, "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.", "pass@10": 0, "passes": 10}
{"task_id": 251, "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.", "pass@10": 0, "passes": 10}
{"task_id": 252, "prompt": "Write a python function to convert complex numbers to polar coordinates.", "pass@10": 0, "passes": 10}
{"task_id": 253, "prompt": "Write a python function that returns the number of integer elements in a given list.", "pass@10": 0, "passes": 10}
{"task_id": 256, "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.", "pass@10": 0, "passes": 10}
{"task_id": 257, "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.", "pass@10": 0, "passes": 10}
{"task_id": 259, "prompt": "Write a function to maximize the given two tuples.", "pass@10": 0, "passes": 1}
{"task_id": 261, "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.", "pass@10": 0, "passes": 7}
{"task_id": 262, "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.", "pass@10": 0, "passes": 8}
{"task_id": 264, "prompt": "Write a function to calculate a dog's age in dog's years.", "pass@10": 0, "passes": 7}
{"task_id": 265, "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.", "pass@10": 0, "passes": 10}
{"task_id": 266, "prompt": "Write a function to find the lateral surface area of a cube given its side length.", "pass@10": 0, "passes": 10}
{"task_id": 267, "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.", "pass@10": 0, "passes": 10}
{"task_id": 268, "prompt": "Write a function to find the n'th star number.", "pass@10": 0, "passes": 8}
{"task_id": 269, "prompt": "Write a function to find the ascii value of a character.", "pass@10": 0, "passes": 10}
{"task_id": 271, "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.", "pass@10": 0, "passes": 10}
{"task_id": 272, "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.", "pass@10": 0, "passes": 10}
{"task_id": 274, "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.", "pass@10": 0, "passes": 7}
{"task_id": 277, "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.", "pass@10": 0, "passes": 10}
{"task_id": 278, "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.", "pass@10": 0, "passes": 2}
{"task_id": 281, "prompt": "Write a python function to check if the elements of a given list are unique or not.", "pass@10": 0, "passes": 10}
{"task_id": 282, "prompt": "Write a function to subtract two lists element-wise.", "pass@10": 0, "passes": 10}
{"task_id": 283, "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.", "pass@10": 0, "passes": 10}
{"task_id": 284, "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.", "pass@10": 0, "passes": 10}
{"task_id": 287, "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.", "pass@10": 0, "passes": 9}
{"task_id": 292, "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).", "pass@10": 0, "passes": 10}
{"task_id": 293, "prompt": "Write a function to find the third side of a right angled triangle.", "pass@10": 0, "passes": 8}
{"task_id": 294, "prompt": "Write a function to find the maximum value in a given heterogeneous list.", "pass@10": 0, "passes": 10}
{"task_id": 295, "prompt": "Write a function to return the sum of all divisors of a number.", "pass@10": 0, "passes": 1}
{"task_id": 296, "prompt": "Write a python function to count inversions in an array.", "pass@10": 0, "passes": 4}
{"task_id": 297, "prompt": "Write a function to flatten a given nested list structure.", "pass@10": 0, "passes": 10}
{"task_id": 299, "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.", "pass@10": 0, "passes": 10}
{"task_id": 300, "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "pass@10": 0, "passes": 10}
{"task_id": 307, "prompt": "Write a function to get a colon of a tuple.", "pass@10": 0, "passes": 10}
{"task_id": 308, "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.", "pass@10": 0, "passes": 10}
{"task_id": 309, "prompt": "Write a python function to find the maximum of two numbers.", "pass@10": 0, "passes": 10}
{"task_id": 311, "prompt": "Write a python function to set the left most unset bit.", "pass@10": 0, "passes": 10}
{"task_id": 388, "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.", "pass@10": 0, "passes": 10}
{"task_id": 389, "prompt": "Write a function to find the n'th lucas number.", "pass@10": 0, "passes": 10}
{"task_id": 390, "prompt": "Write a function to apply a given format string to all of the elements in a list.", "pass@10": 0, "passes": 10}
{"task_id": 391, "prompt": "Write a function to convert more than one list to nested dictionary.", "pass@10": 0, "passes": 10}
{"task_id": 392, "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "pass@10": 0, "passes": 10}
{"task_id": 393, "prompt": "Write a function to find the list with maximum length.", "pass@10": 0, "passes": 7}
{"task_id": 394, "prompt": "Write a function to check if given tuple contains no duplicates.", "pass@10": 0, "passes": 10}
{"task_id": 396, "prompt": "Write a function to check whether the given string starts and ends with the same character or not.", "pass@10": 0, "passes": 10}
{"task_id": 397, "prompt": "Write a function to find the median of three numbers.", "pass@10": 0, "passes": 10}
{"task_id": 399, "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "pass@10": 0, "passes": 10}
{"task_id": 404, "prompt": "Write a python function to find the minimum of two numbers.", "pass@10": 0, "passes": 10}
{"task_id": 405, "prompt": "Write a function to check whether an element exists within a tuple.", "pass@10": 0, "passes": 10}
{"task_id": 409, "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.", "pass@10": 0, "passes": 2}
{"task_id": 410, "prompt": "Write a function to find the minimum value in a given heterogeneous list.", "pass@10": 0, "passes": 10}
{"task_id": 413, "prompt": "Write a function to extract the nth element from a given list of tuples.", "pass@10": 0, "passes": 10}
{"task_id": 414, "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.", "pass@10": 0, "passes": 10}
{"task_id": 415, "prompt": "Write a python function to find a pair with highest product from a given array of integers.", "pass@10": 0, "passes": 10}
{"task_id": 420, "prompt": "Write a python function to find the cube sum of first n even natural numbers.", "pass@10": 0, "passes": 10}
{"task_id": 421, "prompt": "Write a function to concatenate each element of tuple by the delimiter.", "pass@10": 0, "passes": 10}
{"task_id": 422, "prompt": "Write a python function to find the average of cubes of first n natural numbers.", "pass@10": 0, "passes": 10}
{"task_id": 424, "prompt": "Write a function to extract only the rear index element of each string in the given tuple.", "pass@10": 0, "passes": 10}
{"task_id": 425, "prompt": "Write a function to count the number of sublists containing a particular element.", "pass@10": 0, "passes": 10}
{"task_id": 426, "prompt": "Write a function to filter odd numbers.", "pass@10": 0, "passes": 10}
{"task_id": 428, "prompt": "Write a function to sort the given array by using shell sort.", "pass@10": 0, "passes": 10}
{"task_id": 429, "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.", "pass@10": 0, "passes": 3}
{"task_id": 432, "prompt": "Write a function to find the median length of a trapezium.", "pass@10": 0, "passes": 6}
{"task_id": 439, "prompt": "Write a function to join a list of multiple integers into a single integer.", "pass@10": 0, "passes": 10}
{"task_id": 441, "prompt": "Write a function to find the surface area of a cube of a given size.", "pass@10": 0, "passes": 10}
{"task_id": 442, "prompt": "Write a function to find the ration of positive numbers in an array of integers.", "pass@10": 0, "passes": 10}
{"task_id": 445, "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "pass@10": 0, "passes": 9}
{"task_id": 447, "prompt": "Write a function to find cubes of individual elements in a list.", "pass@10": 0, "passes": 10}
{"task_id": 450, "prompt": "Write a function to extract specified size of strings from a given list of string values.", "pass@10": 0, "passes": 8}
{"task_id": 451, "prompt": "Write a function to remove all whitespaces from the given string.", "pass@10": 0, "passes": 10}
{"task_id": 455, "prompt": "Write a function to check whether the given month number contains 31 days or not.", "pass@10": 0, "passes": 10}
{"task_id": 456, "prompt": "Write a function to reverse each string in a given list of string values.", "pass@10": 0, "passes": 10}
{"task_id": 458, "prompt": "Write a function to find the area of a rectangle.", "pass@10": 0, "passes": 10}
{"task_id": 459, "prompt": "Write a function to remove uppercase substrings from a given string.", "pass@10": 0, "passes": 10}
{"task_id": 460, "prompt": "Write a python function to get the first element of each sublist.", "pass@10": 0, "passes": 4}
{"task_id": 463, "prompt": "Write a function to find the maximum product subarray of the given array.", "pass@10": 0, "passes": 10}
{"task_id": 465, "prompt": "Write a function to drop empty items from a given dictionary.", "pass@10": 0, "passes": 10}
{"task_id": 468, "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "pass@10": 0, "passes": 10}
{"task_id": 470, "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.", "pass@10": 0, "passes": 10}
{"task_id": 472, "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.", "pass@10": 0, "passes": 10}
{"task_id": 474, "prompt": "Write a function to replace characters in a string.", "pass@10": 0, "passes": 10}
{"task_id": 475, "prompt": "Write a function to sort a dictionary by value.", "pass@10": 0, "passes": 10}
{"task_id": 476, "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.", "pass@10": 0, "passes": 10}
{"task_id": 477, "prompt": "Write a python function to convert the given string to lower case.", "pass@10": 0, "passes": 10}
{"task_id": 478, "prompt": "Write a function to remove lowercase substrings from a given string.", "pass@10": 0, "passes": 8}
{"task_id": 604, "prompt": "Write a function to reverse words seperated by spaces in a given string.", "pass@10": 0, "passes": 10}
{"task_id": 606, "prompt": "Write a function to convert degrees to radians.", "pass@10": 0, "passes": 10}
{"task_id": 607, "prompt": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.", "pass@10": 0, "passes": 10}
{"task_id": 608, "prompt": "Write a python function to find nth bell number.", "pass@10": 0, "passes": 6}
{"task_id": 610, "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.", "pass@10": 0, "passes": 10}
{"task_id": 611, "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.", "pass@10": 0, "passes": 10}
{"task_id": 616, "prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo.", "pass@10": 0, "passes": 10}
{"task_id": 618, "prompt": "Write a function to divide two lists element wise.", "pass@10": 0, "passes": 10}
{"task_id": 619, "prompt": "Write a function to move all the numbers to the end of the given string.", "pass@10": 0, "passes": 10}
{"task_id": 623, "prompt": "Write a function to compute the n-th power of each number in a list.", "pass@10": 0, "passes": 10}
{"task_id": 624, "prompt": "Write a python function to convert a given string to uppercase.", "pass@10": 0, "passes": 10}
{"task_id": 625, "prompt": "Write a python function to interchange the first and last element in a given list.", "pass@10": 0, "passes": 10}
{"task_id": 629, "prompt": "Write a python function to find even numbers from a list of numbers.", "pass@10": 0, "passes": 9}
{"task_id": 630, "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "pass@10": 0, "passes": 7}
{"task_id": 631, "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string.", "pass@10": 0, "passes": 10}
{"task_id": 632, "prompt": "Write a python function to move all zeroes to the end of the given list.", "pass@10": 0, "passes": 10}
{"task_id": 635, "prompt": "Write a function to sort the given list.", "pass@10": 0, "passes": 10}
{"task_id": 637, "prompt": "Write a function to check whether the given amount has no profit and no loss", "pass@10": 0, "passes": 9}
{"task_id": 641, "prompt": "Write a function to find the nth nonagonal number.", "pass@10": 0, "passes": 10}
{"task_id": 721, "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.", "pass@10": 0, "passes": 10}
{"task_id": 722, "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.", "pass@10": 0, "passes": 1}
{"task_id": 723, "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.", "pass@10": 0, "passes": 4}
{"task_id": 724, "prompt": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.", "pass@10": 0, "passes": 10}
{"task_id": 725, "prompt": "Write a function to extract values between quotation marks \" \" of the given string.", "pass@10": 0, "passes": 10}
{"task_id": 726, "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.", "pass@10": 0, "passes": 10}
{"task_id": 728, "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "pass@10": 0, "passes": 10}
{"task_id": 730, "prompt": "Write a function to remove consecutive duplicates of a given list.", "pass@10": 0, "passes": 10}
{"task_id": 731, "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "pass@10": 0, "passes": 10}
{"task_id": 732, "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "pass@10": 0, "passes": 10}
{"task_id": 733, "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "pass@10": 0, "passes": 7}
{"task_id": 735, "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "pass@10": 0, "passes": 2}
{"task_id": 736, "prompt": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php", "pass@10": 0, "passes": 1}
{"task_id": 737, "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.", "pass@10": 0, "passes": 10}
{"task_id": 738, "prompt": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php", "pass@10": 0, "passes": 1}
{"task_id": 739, "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "pass@10": 0, "passes": 5}
{"task_id": 740, "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/", "pass@10": 0, "passes": 10}
{"task_id": 741, "prompt": "Write a python function to check whether all the characters are same or not.", "pass@10": 0, "passes": 10}
{"task_id": 744, "prompt": "Write a function to check if the given tuple has any none value or not.", "pass@10": 0, "passes": 10}
{"task_id": 745, "prompt": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "pass@10": 0, "passes": 10}
{"task_id": 747, "prompt": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "pass@10": 0, "passes": 6}
{"task_id": 749, "prompt": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/", "pass@10": 0, "passes": 10}
{"task_id": 750, "prompt": "Write a function to add the given tuple to the given list.", "pass@10": 0, "passes": 10}
{"task_id": 751, "prompt": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "pass@10": 0, "passes": 8}
{"task_id": 752, "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...", "pass@10": 0, "passes": 10}
{"task_id": 753, "prompt": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases", "pass@10": 0, "passes": 10}
{"task_id": 754, "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.", "pass@10": 0, "passes": 10}
{"task_id": 758, "prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.", "pass@10": 0, "passes": 10}
{"task_id": 762, "prompt": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.", "pass@10": 0, "passes": 10}
{"task_id": 764, "prompt": "Write a python function to count number of digits in a given string.", "pass@10": 0, "passes": 10}
{"task_id": 766, "prompt": "Write a function to return a list of all pairs of consecutive items in a given list.", "pass@10": 0, "passes": 10}
{"task_id": 770, "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "pass@10": 0, "passes": 10}
{"task_id": 772, "prompt": "Write a function to remove all the words with k length in the given string.", "pass@10": 0, "passes": 10}
{"task_id": 773, "prompt": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.", "pass@10": 0, "passes": 10}
{"task_id": 778, "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "pass@10": 0, "passes": 10}
{"task_id": 779, "prompt": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "pass@10": 0, "passes": 10}
{"task_id": 780, "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/", "pass@10": 0, "passes": 1}
{"task_id": 781, "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php", "pass@10": 0, "passes": 10}
{"task_id": 782, "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "pass@10": 0, "passes": 10}
{"task_id": 788, "prompt": "Write a function to create a new tuple from the given string and list.", "pass@10": 0, "passes": 10}
{"task_id": 791, "prompt": "Write a function to remove tuples from the given tuple.", "pass@10": 0, "passes": 10}
{"task_id": 792, "prompt": "Write a python function to count the number of lists in a given number of lists.", "pass@10": 0, "passes": 10}
{"task_id": 793, "prompt": "Write a python function to find the last position of an element in a sorted array.", "pass@10": 0, "passes": 2}
{"task_id": 796, "prompt": "Write function to find the sum of all items in the given dictionary.", "pass@10": 0, "passes": 10}
{"task_id": 798, "prompt": "Write a python function to find the sum of an array.", "pass@10": 0, "passes": 10}
{"task_id": 800, "prompt": "Write a function to remove all whitespaces from a string.", "pass@10": 0, "passes": 10}
{"task_id": 801, "prompt": "Write a python function to count the number of equal numbers from three given integers.", "pass@10": 0, "passes": 8}
{"task_id": 803, "prompt": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/", "pass@10": 0, "passes": 10}
{"task_id": 805, "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest.", "pass@10": 0, "passes": 10}
{"task_id": 808, "prompt": "Write a function to check if the given tuples contain the k or not.", "pass@10": 0, "passes": 10}
{"task_id": 809, "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.", "pass@10": 0, "passes": 10}
{"task_id": 554, "prompt": "Write a python function which takes a list of integers and only returns the odd ones.", "pass@10": 0, "passes": 5}
{"task_id": 555, "prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.", "pass@10": 0, "passes": 10}
{"task_id": 556, "prompt": "Write a python function to count the number of pairs whose xor value is odd.", "pass@10": 0, "passes": 4}
{"task_id": 557, "prompt": "Write a function to toggle the case of all characters in a string.", "pass@10": 0, "passes": 10}
{"task_id": 559, "prompt": "Write a function to find the sum of the largest contiguous sublist in the given list.", "pass@10": 0, "passes": 10}
{"task_id": 562, "prompt": "Write a python function to find the length of the longest sublists.", "pass@10": 0, "passes": 10}
{"task_id": 563, "prompt": "Write a function to extract values between quotation marks from a string.", "pass@10": 0, "passes": 10}
{"task_id": 565, "prompt": "Write a python function to split a string into characters.", "pass@10": 0, "passes": 10}
{"task_id": 566, "prompt": "Write a function to get the sum of the digits of a non-negative integer.", "pass@10": 0, "passes": 10}
{"task_id": 567, "prompt": "Write a function to check whether a specified list is sorted or not.", "pass@10": 0, "passes": 10}
{"task_id": 568, "prompt": "Write a function to create a list of N empty dictionaries.", "pass@10": 0, "passes": 10}
{"task_id": 569, "prompt": "Write a function to sort each sublist of strings in a given list of lists.", "pass@10": 0, "passes": 10}
{"task_id": 572, "prompt": "Write a python function to remove duplicate numbers from a given number of lists.", "pass@10": 0, "passes": 1}
{"task_id": 573, "prompt": "Write a python function to calculate the product of the unique numbers in a given list.", "pass@10": 0, "passes": 10}
{"task_id": 577, "prompt": "Write a python function to find the last digit in factorial of a given number.", "pass@10": 0, "passes": 10}
{"task_id": 578, "prompt": "Write a function to interleave 3 lists of the same length into a single flat list.", "pass@10": 0, "passes": 10}
{"task_id": 579, "prompt": "Write a function to find the dissimilar elements in the given two tuples.", "pass@10": 0, "passes": 3}
{"task_id": 580, "prompt": "Write a function to remove uneven elements in the nested mixed tuple.", "pass@10": 0, "passes": 8}
{"task_id": 583, "prompt": "Write a function which returns nth catalan number.", "pass@10": 0, "passes": 10}
{"task_id": 585, "prompt": "Write a function to find the n most expensive items in a given dataset.", "pass@10": 0, "passes": 10}
{"task_id": 587, "prompt": "Write a function to convert a list to a tuple.", "pass@10": 0, "passes": 10}
{"task_id": 588, "prompt": "Write a python function to find the difference between largest and smallest value in a given list.", "pass@10": 0, "passes": 10}
{"task_id": 589, "prompt": "Write a function to find perfect squares between two given numbers.", "pass@10": 0, "passes": 10}
{"task_id": 591, "prompt": "Write a python function to interchange the first and last elements in a list.", "pass@10": 0, "passes": 10}
{"task_id": 596, "prompt": "Write a function to find the size in bytes of the given tuple.", "pass@10": 0, "passes": 1}
{"task_id": 598, "prompt": "Write a function to check whether the given number is armstrong or not.", "pass@10": 0, "passes": 10}
{"task_id": 599, "prompt": "Write a function to find sum and average of first n natural numbers.", "pass@10": 0, "passes": 10}
{"task_id": 600, "prompt": "Write a python function to check whether the given number is even or not.", "pass@10": 0, "passes": 10}
{"task_id": 3, "prompt": "Write a python function. The function should be designed to identify non-prime numbers.", "pass@10": true, "passes": 6}
{"task_id": 6, "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not. Consider edge cases where numbers could be zero or negative.", "pass@10": true, "passes": 4}
{"task_id": 7, "prompt": "Write a function to find all words which are at least 4 characters long in a string.", "pass@10": true, "passes": 10}
{"task_id": 11, "prompt": "Write a python function to remove the first occurrence of a given character from the string. You also need to remove the last occurrence of that character from the same string.", "pass@10": true, "passes": 8}
{"task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order. The sorting will be done according to the sum of its rows.", "pass@10": true, "passes": 10}
{"task_id": 17, "prompt": "Write a function that returns the perimeter of a square given its side length as input. Ensure that the input is a positive number.", "pass@10": true, "passes": 10}
{"task_id": 19, "prompt": "Write a function to find whether a given array of integers contains any duplicate element. Ensure that your solution is optimized for large input sizes.", "pass@10": true, "passes": 10}
{"task_id": 58, "prompt": "Write a python function to check whether the given two integers have opposite sign or not.", "pass@10": true, "passes": 9}
{"task_id": 59, "prompt": "Write a function to find the nth octagonal number. An octagonal number is a figurate number that represents an octagon, and can be calculated using the formula: n(3n - 2).", "pass@10": true, "passes": 10}
{"task_id": 63, "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.", "pass@10": true, "passes": 6}
{"task_id": 64, "prompt": "Write a function to sort a list of tuples using the second value of each tuple.", "pass@10": true, "passes": 2}
{"task_id": 65, "prompt": "Write a function to flatten a list and sum all of its elements.", "pass@10": true, "passes": 10}
{"task_id": 67, "prompt": "Write a function to determine the quantity of methods to divide a collection of Bell numbers.", "pass@10": true, "passes": 10}
{"task_id": 69, "prompt": "Write a function to check whether a list contains the given sublist or not. A sublist should be represented as a sequence of elements found within the larger list. It is important that the sequence matches exactly in order to be considered a sublist.", "pass@10": true, "passes": 10}
{"task_id": 71, "prompt": "Write a function to sort a list. The list will contain elements.", "pass@10": true, "passes": 10}
{"task_id": 79, "prompt": "Write a python function to check whether the length of the word is odd or not.", "pass@10": true, "passes": 10}
{"task_id": 84, "prompt": "Develop a function to identify the nth term in the Newman-Conway sequence.", "pass@10": true, "passes": 5}
{"task_id": 89, "prompt": "Write a function to find the closest smaller number than n. Make sure your function handles edge cases where no smaller number might exist efficiently.", "pass@10": true, "passes": 10}
{"task_id": 90, "prompt": "Write a python function to find the length of the longest word. The function should take a list of words as input. It will iterate through each word in the list. The function is expected to compare the length of each word with the length of the current longest word. After checking all the words, it should return the length of the longest word found.", "pass@10": true, "passes": 10}
{"task_id": 94, "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value. Ensure to handle cases where the list may have tuples with the same second value.", "pass@10": true, "passes": 9}
{"task_id": 95, "prompt": "Write a python function to find the length of the smallest list in a list of lists. Consider edge cases such as empty lists or lists containing non-list elements.", "pass@10": false, "passes": 0}
{"task_id": 96, "prompt": "Write a python function to find the number of divisors. You need to determine the divisors as they relate to a provided integer.", "pass@10": true, "passes": 10}
{"task_id": 97, "prompt": "Create a function to determine the count of every element in a single-level list of lists, delivered in a dictionary.", "pass@10": true, "passes": 10}
{"task_id": 106, "prompt": "Formulate a function to add the provided list to the specified tuples.", "pass@10": true, "passes": 10}
{"task_id": 111, "prompt": "Write a function to find the common elements in given nested lists. Ensure that your solution efficiently handles cases with multiple nested lists of varying lengths.", "pass@10": true, "passes": 10}
{"task_id": 113, "prompt": "Write a function to check if a string represents an integer or not. Ensure your solution handles both positive and negative integers, as well as strings with leading and trailing spaces.", "pass@10": true, "passes": 10}
{"task_id": 120, "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list. Ensure your solution is optimized for performance with large datasets.", "pass@10": true, "passes": 10}
{"task_id": 123, "prompt": "Write a function to sum all numbers that are amicable from 1 to a specified number. Amicable numbers are two numbers for which the sum of proper divisors of each is equal to the other number. More formally, if the sum of the proper divisors of number A equals number B, and the sum of proper divisors of number B equals number A, then A and B are amicable numbers. Your function should take one parameter, which is the upper limit of numbers to check for being part of an amicable pair. The function should return the sum of all unique amicable numbers less than or equal to this upper limit. Be sure to consider both numbers in each amicable pair but do not count any number multiple times in your return value. Aim for an efficient solution to handle larger numbers within a reasonable time frame.", "pass@10": false, "passes": 0}
{"task_id": 125, "prompt": "Write a function to determine the greatest disparity between the count of 0s and the count of 1s in any sub-string of the specified binary string.", "pass@10": false, "passes": 0}
{"task_id": 127, "prompt": "Write a function to multiply two integers. Ensure that the function handles both positive and negative integers correctly.", "pass@10": true, "passes": 10}
{"task_id": 128, "prompt": "Write a function to find words that are longer than n characters from a given list of words.", "pass@10": true, "passes": 10}
{"task_id": 129, "prompt": "Write a function to calculate whether the matrix is a magic square. A magic square is a square matrix where the sums of the numbers in each row, each column, and both main diagonals are the same. To determine if a matrix is a magic square, all these sums must be equal.", "pass@10": true, "passes": 6}
{"task_id": 130, "prompt": "Develop a function to identify the element with the highest occurrence in a specified list.", "pass@10": true, "passes": 1}
{"task_id": 131, "prompt": "Write a python function to reverse only the vowels of a given string. The definition of vowels in this context does not include the letter 'y.' In this scenario, 'y' is not considered a vowel.", "pass@10": true, "passes": 10}
{"task_id": 132, "prompt": "Write a function to convert a tuple to a string. You are given a tuple that consists of various elements. Your function should convert this tuple into a string format.", "pass@10": true, "passes": 10}
{"task_id": 133, "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.", "pass@10": true, "passes": 10}
{"task_id": 138, "prompt": "Write a python function to verify if the given number can be expressed as the sum of non-zero powers of 2 or not.", "pass@10": true, "passes": 1}
{"task_id": 141, "prompt": "Write a function to sort a list. A list comprises multiple elements that need to be arranged. Sort a list of elements.", "pass@10": true, "passes": 7}
{"task_id": 142, "prompt": "Write a function to count number items that are identical in the same position of three given lists. Consider edge cases where the lists may be of different lengths.", "pass@10": true, "passes": 10}
{"task_id": 161, "prompt": "Write a function to remove all elements from a given list present in another list. Ensure the function works efficiently even for large lists.", "pass@10": true, "passes": 10}
{"task_id": 162, "prompt": "Write a function to compute the sum (n - 2*i) from i=0 to n // 2, for example n + (n-2) + (n-4)... (until n-x =< 0).", "pass@10": true, "passes": 9}
{"task_id": 165, "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive). For example, the character 'A' is in the first position of the English alphabet, and should be counted if it appears as the first character in the string.", "pass@10": true, "passes": 10}
{"task_id": 167, "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n. Ensure that your solution efficiently handles large values of n.", "pass@10": true, "passes": 6}
{"task_id": 168, "prompt": "Write a function to count how many times a number appears in a given list. Make sure to iterate through the list to check each element.", "pass@10": true, "passes": 10}
{"task_id": 170, "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices. Ensure that the function handles cases where the indices are out of bounds.", "pass@10": true, "passes": 10}
{"task_id": 171, "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.", "pass@10": true, "passes": 10}
{"task_id": 224, "prompt": "Write a python function to count the number of set bits in a given number. The set bits refer to binary digits with value 1.", "pass@10": true, "passes": 10}
{"task_id": 227, "prompt": "Write a function to find minimum of three numbers. Ensure that the function handles both positive and negative numbers correctly.", "pass@10": true, "passes": 10}
{"task_id": 230, "prompt": "Write a function that takes in a string and character. Your function should replace blank spaces in the string with the given character, and return the modified string.", "pass@10": true, "passes": 10}
{"task_id": 232, "prompt": "Write a function that receives a list and an integer n and returns a list containing the n largest items from the list.", "pass@10": true, "passes": 10}
{"task_id": 234, "prompt": "Write a function to find the volume of a cube given its side length. Assume the input is always a positive number.", "pass@10": true, "passes": 10}
{"task_id": 239, "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. Ensure your solution handles edge cases efficiently for larger values of n.", "pass@10": true, "passes": 7}
{"task_id": 240, "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.", "pass@10": true, "passes": 10}
{"task_id": 246, "prompt": "Write a function for computing square roots using the Babylonian method. Ensure your implementation handles both positive and negative inputs gracefully.", "pass@10": true, "passes": 1}
{"task_id": 253, "prompt": "Design a Python function that outputs the count of integer items in a specified list.", "pass@10": true, "passes": 10}
{"task_id": 256, "prompt": "Write a python function that takes in a non-negative number. The function should process this input effectively and accurately. It should return the number of prime numbers less than the given non-negative number.", "pass@10": true, "passes": 10}
{"task_id": 257, "prompt": "Create a function that accepts two integers and produces a tuple featuring the second integer first followed by the first integer.", "pass@10": true, "passes": 10}
{"task_id": 259, "prompt": "Write a function to maximize the given two tuples. You are required to determine the greater of two tuples. To achieve this, compare the tuples element-wise from the first element to the last.", "pass@10": false, "passes": 0}
{"task_id": 261, "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.", "pass@10": true, "passes": 3}
{"task_id": 262, "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, returning the resulting lists in a tuple.", "pass@10": true, "passes": 9}
{"task_id": 264, "prompt": "Write a function to calculate a dog's age in dog's years.", "pass@10": true, "passes": 2}
{"task_id": 265, "prompt": "Create a function that receives a list and a number n and divides the list at every nth element, providing a list of the resulting sublists.", "pass@10": true, "passes": 1}
{"task_id": 268, "prompt": "Write a function to find the n'th star number. Star numbers are a centered figurate number representing a centered hexagram.", "pass@10": true, "passes": 4}
{"task_id": 271, "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers. The even numbers should be raised to the fifth power.", "pass@10": true, "passes": 10}
{"task_id": 272, "prompt": "Write a function that takes in a list of tuples and returns a list. The list should contain the rear element of each tuple.", "pass@10": true, "passes": 10}
{"task_id": 274, "prompt": "Write a python function that takes in a positive integer n. The function should then find the sum of even index binomial coefficients.", "pass@10": true, "passes": 10}
{"task_id": 278, "prompt": "Create a function to determine the count of elements that appear prior to the tuple element in the given tuple.", "pass@10": true, "passes": 7}
{"task_id": 282, "prompt": "Write a function to subtract two lists element-wise. Ensure that both lists are of the same length before performing the subtraction.", "pass@10": true, "passes": 10}
{"task_id": 287, "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers. Ensure that your solution handles large values of n efficiently.", "pass@10": true, "passes": 8}
{"task_id": 292, "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer). Ensure to handle division by zero gracefully in your implementation.", "pass@10": true, "passes": 10}
{"task_id": 293, "prompt": "Write a function to find the third side of a right angled triangle. Make sure to consider the use of the Pythagorean theorem in your calculations.", "pass@10": true, "passes": 8}
{"task_id": 294, "prompt": "Write a function to find the maximum value in a given heterogeneous list. Ensure the function handles nested lists and various data types gracefully.", "pass@10": true, "passes": 10}
{"task_id": 295, "prompt": "Create a function that calculates the total of all factors of a given number.", "pass@10": true, "passes": 6}
{"task_id": 296, "prompt": "Write a python function to count inversions in an array. An inversion is a pair of elements in an array where the first element is greater than the second element. The task is to compute the total number of such inversions.", "pass@10": true, "passes": 3}
{"task_id": 297, "prompt": "Create a function to transform a provided multi-layered list structure into a single layer.", "pass@10": true, "passes": 9}
{"task_id": 299, "prompt": "Write a function to calculate the maximum aggregate from the list of tuples. You need to ensure your function is capable of handling various types of data within the tuples. Make sure the function iterates through each element of the list accurately.", "pass@10": true, "passes": 5}
{"task_id": 300, "prompt": "Create a function to determine the number of all binary sequences of length 2n where the total of the initial n bits equals the total of the final n bits.", "pass@10": true, "passes": 7}
{"task_id": 307, "prompt": "Write a function to obtain a segment of data from a tuple. This segment is denoted by a colon, which is used to separate specific parts within the tuple.", "pass@10": false, "passes": 0}
{"task_id": 308, "prompt": "Write a function to find the specified number of largest products from two given lists. You need to select one factor from each list to compute the product.", "pass@10": true, "passes": 9}
{"task_id": 309, "prompt": "Write a python function to find the maximum of two numbers.", "pass@10": true, "passes": 10}
{"task_id": 311, "prompt": "Write a python function to set the left most unset bit. This function should efficiently locate the first unset bit from the left and change it to a set bit.", "pass@10": true, "passes": 2}
{"task_id": 389, "prompt": "Write a function to find the n'th lucas number.", "pass@10": true, "passes": 7}
{"task_id": 391, "prompt": "Write a function to convert more than one list to nested dictionary. Ensure that the function handles cases where the lists have different lengths gracefully.", "pass@10": true, "passes": 6}
{"task_id": 393, "prompt": "Write a function to identify the list in a collection that has the maximum length. You need to determine which list among the given lists has the greatest number of elements.", "pass@10": true, "passes": 2}
{"task_id": 394, "prompt": "Write a function to check if given tuple contains no duplicates. Given a tuple as input, your task is to determine if it has any repeated elements. If the tuple does not contain any duplicate entries, the function should return True. If there are any duplicate elements in the tuple, the function should return False.", "pass@10": true, "passes": 10}
{"task_id": 396, "prompt": "Write a function to check whether the given string starts and ends with the same character or not. Optimize the function for performance when dealing with long strings.", "pass@10": true, "passes": 10}
{"task_id": 397, "prompt": "Write a function to determine the median of three numbers. The function should take three numbers as input. These numbers will be used to find the median.", "pass@10": true, "passes": 10}
{"task_id": 399, "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples. Ensure that the function can handle tuples of any length and datatype that supports the xor operation.", "pass@10": true, "passes": 9}
{"task_id": 404, "prompt": "Develop a Python function to determine the smaller of two values.", "pass@10": true, "passes": 10}
{"task_id": 405, "prompt": "Write a function to check whether an element exists within a tuple. The function should return a boolean indicating the presence or absence of the element.", "pass@10": true, "passes": 10}
{"task_id": 410, "prompt": "Write a function to find the minimum value in a given heterogeneous list. Your task is to identify and return the smallest item from the list. The list may contain a combination of integers, floats, and possibly other types, and you need to handle this appropriately.", "pass@10": true, "passes": 10}
{"task_id": 413, "prompt": "Write a function to extract the nth element from a given list of tuples.", "pass@10": true, "passes": 10}
{"task_id": 414, "prompt": "Create a Python function to determine if any value in one sequence is present in another sequence.", "pass@10": true, "passes": 10}
{"task_id": 415, "prompt": "Develop a Python function to identify a couple with the largest product from a specified list of whole numbers.", "pass@10": true, "passes": 9}
{"task_id": 421, "prompt": "Develop a function that concatenates every element of a tuple using the specified delimiter.", "pass@10": true, "passes": 1}
{"task_id": 425, "prompt": "Write a function to count the number of sublists containing a particular element. Ensure the function handles both nested and non-nested lists efficiently.", "pass@10": true, "passes": 3}
{"task_id": 426, "prompt": "Write a function to filter odd numbers. This function's main purpose is to take a list of integers. It should then identify the odd numbers within that list.", "pass@10": true, "passes": 10}
{"task_id": 428, "prompt": "Write a function to sort the given array by using shell sort. Ensure your function handles both positive and negative integers efficiently.", "pass@10": true, "passes": 10}
{"task_id": 429, "prompt": "Write a function to extract the elementwise and tuples from the given two tuples. Make sure your solution handles tuples of varying lengths correctly.", "pass@10": false, "passes": 0}
{"task_id": 432, "prompt": "Write a function to find the median length of a trapezium. The median of a trapezium is the line segment that joins the midpoints of its non-parallel sides. It will be parallel to the two bases of the trapezium.", "pass@10": true, "passes": 2}
{"task_id": 442, "prompt": "Write a function to find the ratio of positive numbers in an array of integers. Ensure that your solution handles edge cases such as an empty array or all negative numbers.", "pass@10": true, "passes": 7}
{"task_id": 445, "prompt": "Create a function that multiplies elements of two tuples together based on their corresponding indices.", "pass@10": true, "passes": 2}
{"task_id": 450, "prompt": "Write a function to extract specified size of strings from a given list of string values. Ensure that the function handles cases where the specified size is greater than the length of individual strings in the list.", "pass@10": true, "passes": 1}
{"task_id": 459, "prompt": "Write a function to remove uppercase substrings from a given string. Ensure the solution handles edge cases such as empty strings and strings with no uppercase characters.", "pass@10": true, "passes": 1}
{"task_id": 463, "prompt": "Write a function to find the maximum product subarray of the given array. Consider edge cases where the array might contain negative numbers or zero, which could affect the product calculation.", "pass@10": true, "passes": 8}
{"task_id": 465, "prompt": "Write a function to drop empty items from a given dictionary. Ensure that the function preserves the order of the remaining items in the dictionary.", "pass@10": true, "passes": 10}
{"task_id": 468, "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. Consider edge cases where the array might contain negative numbers or have a small size.", "pass@10": false, "passes": 0}
{"task_id": 472, "prompt": "Write a python function to check whether the given list contains consecutive numbers or not. Assess whether the list provided has numbers in sequence. Determine if they are consecutive numbers.", "pass@10": true, "passes": 7}
{"task_id": 474, "prompt": "Write a function to replace characters. You are required to implement the function by using a string as input.", "pass@10": true, "passes": 6}
{"task_id": 476, "prompt": "Create a Python function that calculates the sum of the maximum and minimum numbers in a specified array.", "pass@10": true, "passes": 10}
{"task_id": 477, "prompt": "Make a Python function that changes the provided string to lowercase.", "pass@10": true, "passes": 10}
{"task_id": 604, "prompt": "Write a function to reverse words separated by spaces in a given string. Ensure the function handles multiple spaces between words correctly.", "pass@10": true, "passes": 9}
{"task_id": 606, "prompt": "Write a function to convert degrees to radians. Ensure that your function handles negative values correctly and returns accurate results for all inputs.", "pass@10": true, "passes": 10}
{"task_id": 607, "prompt": "Write a function to search a string for a regex pattern. The function should return the substring that matches, an initial index, and a concluding index.", "pass@10": false, "passes": 0}
{"task_id": 608, "prompt": "Write a python function to find nth bell number. The Bell numbers are a sequence of numbers that count the number of ways a set can be partitioned into nonempty subsets. Specifically, the nth Bell number is the number of ways to partition a set of n elements into non-empty subsets.", "pass@10": true, "passes": 6}
{"task_id": 610, "prompt": "Write a python function which takes a list as an input parameter. The function should return a list with the same elements, but the k'th element removed.", "pass@10": false, "passes": 0}
{"task_id": 611, "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column. Ensure that the function handles cases where the n'th column might not exist gracefully.", "pass@10": true, "passes": 8}
{"task_id": 616, "prompt": "Write a function which takes two tuples of the same length and performs the element-wise modulo.", "pass@10": true, "passes": 9}
{"task_id": 619, "prompt": "Write a function to shift every numeral to the tail of the provided string.", "pass@10": true, "passes": 6}
{"task_id": 623, "prompt": "Write a function to compute the n-th power. Do this for each number in a list.", "pass@10": true, "passes": 10}
{"task_id": 624, "prompt": "Write a python function to convert a given string to uppercase. Ensure that the function is built to handle different types of input data gracefully.", "pass@10": true, "passes": 10}
{"task_id": 629, "prompt": "Write a python function to find even numbers from a list of numbers. Make sure your solution handles empty lists gracefully.", "pass@10": false, "passes": 0}
{"task_id": 630, "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple. Consider edge cases such as coordinates on the boundary of a grid.", "pass@10": false, "passes": 0}
{"task_id": 631, "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string. Ensure that the function handles both leading and trailing whitespaces correctly.", "pass@10": false, "passes": 0}
{"task_id": 632, "prompt": "Write a python function to move all zeroes to the end of the given list. Ensure the relative order of the non-zero elements is maintained.", "pass@10": true, "passes": 10}
{"task_id": 635, "prompt": "Write a function to sort the given list. Ensure that the function can handle both numerical and string data types within the list.", "pass@10": true, "passes": 8}
{"task_id": 637, "prompt": "Write a function to check whether the given amount has no profit and no loss. Ensure that the function accepts numerical input and handles potential edge cases gracefully.", "pass@10": true, "passes": 10}
{"task_id": 641, "prompt": "Write a function to find the nth nonagonal number. Consider potential edge cases and handle invalid input gracefully.", "pass@10": true, "passes": 10}
{"task_id": 721, "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell, moves only right or down, and ends on the bottom right cell. We want to find a path with the maximum average over all existing paths, where the average is computed as total cost divided by the number of cells visited in the path.", "pass@10": true, "passes": 9}
{"task_id": 722, "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum. Make sure to handle edge cases where the dictionary might be empty, or where all values are below the minimum criteria.", "pass@10": true, "passes": 10}
{"task_id": 723, "prompt": "The input is described as two lists of equal length. Write a function to count indices where the lists have the same values.", "pass@10": true, "passes": 2}
{"task_id": 725, "prompt": "Write a function to extract values between quotation marks \" \" of the given string. You need to focus on locating the areas within the string where text is enclosed by quotation marks. It is crucial to capture and extract those text segments accurately.", "pass@10": true, "passes": 10}
{"task_id": 726, "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}. Ensure that you handle any potential edge cases, such as an empty tuple or tuples with non-numeric elements, gracefully.", "pass@10": true, "passes": 10}
{"task_id": 728, "prompt": "Write a function that accepts as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "pass@10": true, "passes": 10}
{"task_id": 730, "prompt": "Write a function to remove consecutive duplicates of a given list. This list can contain several consecutive elements that are the same. You need to ensure that these consecutive duplicates are removed.", "pass@10": true, "passes": 10}
{"task_id": 732, "prompt": "Write a function to replace all occurrences of spaces, commas, or dots. These should be replaced with a colon.", "pass@10": true, "passes": 10}
{"task_id": 733, "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array. Ensure your solution efficiently handles large inputs and optimizes for performance.", "pass@10": true, "passes": 1}
{"task_id": 735, "prompt": "Write a python function to toggle bits of the number except the first and the last bit. Refer to the link for more details: https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "pass@10": true, "passes": 2}
{"task_id": 736, "prompt": "Write a function to locate the left insertion point for a specified value in sorted order. Ensure that the function handles edge cases where the list could be empty or the specified value is smaller than all existing elements. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php", "pass@10": false, "passes": 0}
{"task_id": 738, "prompt": "Write a function to calculate the geometric sum of n-1. For this problem, you can assume that n is a non-negative integer and use recursion to solve it.", "pass@10": true, "passes": 3}
{"task_id": 739, "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/ Ensure that your function handles large values of n efficiently.", "pass@10": true, "passes": 9}
{"task_id": 747, "prompt": "Write a function to determine the longest common subsequence for the given three string sequence. You need to identify and find the length of the subsequence that is common among all three strings. The task is to ensure that this subsequence is the longest possible. Consider edge cases where the strings are of varying lengths, including possible empty strings. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "pass@10": true, "passes": 3}
{"task_id": 750, "prompt": "Write a function to add the given tuple to the given list.", "pass@10": true, "passes": 10}
{"task_id": 751, "prompt": "Create a function that determines whether the provided array illustrates a min heap. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "pass@10": true, "passes": 6}
{"task_id": 752, "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ... The nth Jacobsthal number can be calculated using the formula J(n) = J(n-1) + 2 * J(n-2).", "pass@10": true, "passes": 10}
{"task_id": 754, "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list. Ensure your solution efficiently handles lists of varying lengths.", "pass@10": true, "passes": 10}
{"task_id": 766, "prompt": "Write a function to give back a list of every pair of successive items in a specified list.", "pass@10": true, "passes": 10}
{"task_id": 770, "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers. Ensure that the function handles edge cases such as n being zero or negative gracefully.", "pass@10": true, "passes": 10}
{"task_id": 772, "prompt": "Write a function to remove all the words with k length in the given string. Ensure your solution efficiently handles edge cases, such as strings with varying delimiters or punctuation marks.", "pass@10": true, "passes": 10}
{"task_id": 773, "prompt": "Write a function to find the occurrence and position of the substrings within a string, returning None if there is no match.", "pass@10": false, "passes": 0}
{"task_id": 778, "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "pass@10": true, "passes": 10}
{"task_id": 779, "prompt": "Write a function to count how many lists are inside a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "pass@10": true, "passes": 10}
{"task_id": 780, "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list. You need to iterate through the list and consider each tuple as a possible summand in the combinations. If a tuple is selected, its sum will be added to a running total.", "pass@10": false, "passes": 0}
{"task_id": 782, "prompt": "Create a Python function that calculates the total of all subarrays with an odd length. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "pass@10": true, "passes": 10}
{"task_id": 791, "prompt": "Develop a function that eliminates tuples from the specified tuple.", "pass@10": true, "passes": 9}
{"task_id": 792, "prompt": "Write a python function to count the number of lists in a given number of lists. Make sure to handle nested lists as well when counting the total number of lists.", "pass@10": true, "passes": 10}
{"task_id": 793, "prompt": "Write a python function to locate the last occurrence of an element in a sorted array.", "pass@10": false, "passes": 0}
{"task_id": 796, "prompt": "Write function to find the sum of all items in the given dictionary.", "pass@10": true, "passes": 10}
{"task_id": 801, "prompt": "Write a python function to count the number of equal numbers from three given integers. Consider edge cases where the integers may have the same values or be completely distinct.", "pass@10": true, "passes": 10}
{"task_id": 803, "prompt": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/ Make sure your solution is optimal in terms of time complexity.", "pass@10": true, "passes": 10}
{"task_id": 805, "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest.", "pass@10": true, "passes": 10}
{"task_id": 809, "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple. You will compare each element from the second tuple to the corresponding element in the first tuple. Your function should return a boolean indicating whether this condition holds true for all pairs of elements.", "pass@10": true, "passes": 9}
{"task_id": 554, "prompt": "Create a Python function that accepts a list of integers and returns solely the odd numbers.", "pass@10": false, "passes": 0}
{"task_id": 556, "prompt": "Write a python function to count the number of pairs between integers in a list. The function should return the total count of such pairs whose xor value is odd.", "pass@10": true, "passes": 2}
{"task_id": 559, "prompt": "Create a function that calculates the sum of the largest connected sublist within the provided list.", "pass@10": true, "passes": 10}
{"task_id": 562, "prompt": "Write a python function to find the length of the longest sublists.", "pass@10": true, "passes": 8}
{"task_id": 563, "prompt": "Write a function to extract values between quotation marks from a string.", "pass@10": true, "passes": 8}
{"task_id": 565, "prompt": "Create a Python function that divides a string into its individual characters.", "pass@10": true, "passes": 10}
{"task_id": 566, "prompt": "Write a function to get the sum of the digits of a non-negative integer.", "pass@10": true, "passes": 10}
{"task_id": 569, "prompt": "Write a function to sort each sublist of strings in a given list of lists. Ensure that the sorting is performed in ascending order for each sublist.", "pass@10": true, "passes": 10}
{"task_id": 572, "prompt": "Create a Python function to eliminate repeated numbers from several provided lists.", "pass@10": true, "passes": 1}
{"task_id": 573, "prompt": "Write a python function to calculate the product of the unique numbers in a given list. Ensure that the function efficiently handles large lists with many elements.", "pass@10": true, "passes": 4}
{"task_id": 578, "prompt": "Create a function that merges 3 lists of equal length into one single continuous list.", "pass@10": true, "passes": 10}
{"task_id": 580, "prompt": "Write a function to remove uneven elements in the nested mixed tuple. Make sure to maintain the order of the even elements in the resulting data structure.", "pass@10": true, "passes": 3}
{"task_id": 583, "prompt": "Write a function that gives back the nth catalan number.", "pass@10": true, "passes": 10}
{"task_id": 585, "prompt": "Write a function to find the n most expensive items in a given dataset. Ensure that your function accounts for scenarios where the dataset has fewer than n items by returning the entire sorted list in such cases.", "pass@10": true, "passes": 10}
{"task_id": 587, "prompt": "Write a function to convert a list to a tuple. Ensure that the function handles lists containing various types of elements smoothly and efficiently.", "pass@10": true, "passes": 10}
{"task_id": 589, "prompt": "Write a function to find perfect squares between two given numbers. Ensure that your solution handles edge cases where the input numbers themselves could be perfect squares.", "pass@10": true, "passes": 9}
{"task_id": 596, "prompt": "Write a function to find the size in memory of the given tuple. Memory allocation for tuples involves overhead beyond the numerical data. Make sure your function correctly calculates the overall memory footprint, including metadata.", "pass@10": true, "passes": 5}
{"task_id": 598, "prompt": "Write a function to check whether the given number is armstrong or not. You need to determine if this number is an armstrong number. If it is, you might want to take appropriate actions.", "pass@10": true, "passes": 9}
{"task_id": 600, "prompt": "Write a python function to check whether the given number is even or not.", "pass@10": true, "passes": 10}
{"task_id": 459, "prompt": "Create a function that deletes uppercase subsections from a specified string. Ensure the solution handles edge cases such as empty strings and strings with no uppercase characters.", "pass@10": true, "passes": 3}
{"task_id": 421, "prompt": "Develop a function that concatenates every element of a tuple using the specified delimiter. Ensure that the function can handle tuples containing various data types by converting all elements to strings before concatenation.", "pass@10": true, "passes": 10}
{"task_id": 445, "prompt": "Create a function that takes two tuples as inputs. Then proceed to multiply elements of these tuples together based on their corresponding indices.", "pass@10": true, "passes": 5}
{"task_id": 573, "prompt": "Write a python function to calculate the product of the unique numbers in a given list. Ensure that the function efficiently handles large lists with many elements. Consider edge cases such as lists with all identical elements or empty lists.", "pass@10": true, "passes": 2}
{"task_id": 733, "prompt": "Create a function to determine the position of the initial appearance of a specific number in a sorted list. Ensure your solution efficiently handles large inputs and optimizes for performance.", "pass@10": true, "passes": 2}
{"task_id": 425, "prompt": "Create a function that counts how many sublists include a specified element. Guarantee the function manages nested and flat lists effectively.", "pass@10": true, "passes": 7}
{"task_id": 450, "prompt": "Write a function to extract specified size of strings from a given list of string values. Ensure that the function handles cases where the specified size is greater than the length of individual strings in the list. The function should also efficiently handle an empty list as input, returning an appropriate result without errors.", "pass@10": true, "passes": 1}
{"task_id": 580, "prompt": "Write a function to remove uneven elements in the nested mixed tuple. Make sure to keep all even elements in the same order as in the original structure. The order must be maintained accurately in the resulting data structure.", "pass@10": true, "passes": 6}
{"task_id": 264, "prompt": "Write a function to calculate a dog's age in dog's years. Assume that the first two years of a dog's life count as 10.5 human years each, and each year following equates to 4 human years.", "pass@10": true, "passes": 10}
{"task_id": 299, "prompt": "Write a function to compute the maximum total from the list of tuples. You need to ensure your function is capable of handling various types of data within the tuples. Ensure the function goes through each component of the list precisely.", "pass@10": true, "passes": 9}
{"task_id": 393, "prompt": "Write a function to identify the list in a collection that has the maximum length. You need to determine which list among the given lists has the greatest number of elements. Your task is to examine each list thoroughly to ascertain its length. Then, you must verify which list contains the most elements overall.", "pass@10": true, "passes": 10}
{"task_id": 619, "prompt": "Write a function to shift every numeral. Move each numeral that is in the provided string to the tail of the provided string.", "pass@10": true, "passes": 10}
{"task_id": 6, "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not. Consider edge cases where numbers could be zero. Additionally, handle cases where the numbers are negative.", "pass@10": true, "passes": 3}
{"task_id": 268, "prompt": "Write a function to find the n'th star number. Star numbers are a centered figurate number representing a centered hexagram. Your task is to implement an efficient algorithm to compute the n'th star number based on its mathematical properties.", "pass@10": true, "passes": 5}
{"task_id": 432, "prompt": "Write a function to find the median length of a trapezium. The median of a trapezium is the line segment that joins the midpoints of its non-parallel sides. It will be parallel to the two bases of the trapezium. Ensure your implementation efficiently handles trapeziums of varying dimensions.", "pass@10": true, "passes": 1}
{"task_id": 391, "prompt": "Write a function to convert more than one list to nested dictionary. Make sure that the function manages situations where the lists differ in length politely.", "pass@10": true, "passes": 3}
{"task_id": 635, "prompt": "Write a function to sort the given list, ensuring that the function can handle both numerical and string data types within the list.", "pass@10": true, "passes": 8}
{"task_id": 141, "prompt": "Write a function to sort a list. A list comprises multiple elements that need to be arranged. Sort a list of elements. Ensure the function handles edge cases, such as an empty list or a list with a single element.", "pass@10": true, "passes": 10}
{"task_id": 239, "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, where each element is a positive integer that is greater than or equal to twice the previous element but less than or equal to m. Ensure your solution handles edge cases efficiently for larger values of n.", "pass@10": true, "passes": 3}
{"task_id": 127, "prompt": "Write a function to multiply two integers. Ensure that the function handles both positive and negative integers correctly. Consider edge cases and try to write an efficient solution.", "pass@10": true, "passes": 9}
{"task_id": 300, "prompt": "Create a function to determine the number of all binary sequences of length 2n where the total of the initial n bits equals the total of the final n bits. Consider optimizing the algorithm using dynamic programming to handle large values of n efficiently.", "pass@10": false, "passes": 0}
{"task_id": 747, "prompt": "Write a function to determine the longest common subsequence for the given three string sequence. You need to identify and find the length of the subsequence that is common among all three strings. The task is to ensure that this subsequence is the longest possible. Consider edge cases where the strings are of varying lengths, including possible empty strings. Ensure to optimize the function for efficiency. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "pass@10": true, "passes": 7}
{"task_id": 442, "prompt": "Create a function to calculate the proportion of positive integers in a list of numbers. Make sure your method addresses special situations like an empty list or all negative values.", "pass@10": true, "passes": 10}
{"task_id": 3, "prompt": "Write a python function. The function should be specifically designed to identify non-prime numbers. It should take into account various methods for effective identification.", "pass@10": true, "passes": 2}
{"task_id": 261, "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples. Ensure that both tuples are of the same length to avoid index errors during the operation.", "pass@10": true, "passes": 3}
{"task_id": 751, "prompt": "Create a function that determines whether the provided array illustrates a min heap. Check if each parent node is less than or equal to its child nodes for all nodes in the array. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "pass@10": true, "passes": 4}
{"task_id": 295, "prompt": "Create a function that calculates the total of all factors of a given number. Ensure your solution handles both positive and negative integers effectively.", "pass@10": false, "passes": 0}
{"task_id": 17, "prompt": "Write a function that returns the perimeter of a square given its side length as input. Ensure that the input is a positive number. Consider edge cases where the input may be a non-integer or a very large floating-point number.", "pass@10": true, "passes": 10}
{"task_id": 637, "prompt": "Create a function to determine if the specified sum results in neither profit nor loss. Ensure that the function accepts numerical input and manages potential edge cases smoothly.", "pass@10": true, "passes": 3}
{"task_id": 611, "prompt": "Create a function that, when given a matrix depicted as a list of lists, returns the maximum value of the n'th column. Ensure that the function handles cases where the n'th column might not exist without errors.", "pass@10": true, "passes": 10}
{"task_id": 410, "prompt": "Write a function to find the minimum value in a given heterogeneous list. Your task is to identify and return the smallest item from the list, which may contain a combination of integers, floats, and possibly other types, and you need to handle this appropriately.", "pass@10": true, "passes": 10}
{"task_id": 170, "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices. Make sure that the function deals with scenarios where the indices fall outside the range.", "pass@10": true, "passes": 10}
{"task_id": 138, "prompt": "Write a python function to verify if the given number can be expressed as the sum of non-zero powers of 2 or not. For clarity, ensure that each power of 2 is used at most once in the summation.", "pass@10": true, "passes": 3}
{"task_id": 97, "prompt": "Create a function to determine the count of every element in a single-level list of lists, delivered in a dictionary. Ensure that the function handles cases with nested lists accurately by processing only one level of list depth.", "pass@10": true, "passes": 10}
{"task_id": 616, "prompt": "Write a function which takes two tuples of the same length and performs the element-wise modulo.", "pass@10": true, "passes": 9}
{"task_id": 167, "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.", "pass@10": true, "passes": 2}
{"task_id": 294, "prompt": "Write a function to find the maximum value in a given heterogeneous list. It is important to ensure the function handles nested lists. The function should also handle various data types gracefully.", "pass@10": true, "passes": 9}
{"task_id": 162, "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, as illustrated by n + (n-2) + (n-4)... (until n-x =< 0).", "pass@10": true, "passes": 10}
{"task_id": 477, "prompt": "Make a Python function that changes the provided string to lowercase. Ensure that your function handles edge cases such as null inputs or non-string values gracefully.", "pass@10": true, "passes": 10}
{"task_id": 587, "prompt": "Write a function to convert a list to a tuple, ensuring that the function handles lists containing various types of elements smoothly and efficiently.", "pass@10": true, "passes": 10}
{"task_id": 606, "prompt": "Write a function to convert degrees to radians. Ensure that your function handles negative values correctly and returns accurate results for all inputs. Consider edge cases where the degree input is zero or a full circle (360 degrees), as they should return zero and two pi radians, respectively.", "pass@10": true, "passes": 3}
{"task_id": 782, "prompt": "Create a Python function that computes the sum of all subarrays that have an odd number of elements. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "pass@10": true, "passes": 10}
{"task_id": 791, "prompt": "Develop a function that eliminates tuples from the specified tuple.", "pass@10": true, "passes": 8}
{"task_id": 257, "prompt": "Build a function that takes two integer inputs and generates a tuple with the second integer appearing before the initial integer.", "pass@10": true, "passes": 10}
{"task_id": 598, "prompt": "Write a function to check whether the given number is armstrong or not. You need to determine if this number is an armstrong number and take appropriate actions if it is.", "pass@10": true, "passes": 10}
{"task_id": 399, "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples. Ensure that the function can handle tuples of any length and datatype that supports the xor operation. Your implementation should also take into account edge cases such as empty tuples or tuples with non-supporting data types.", "pass@10": true, "passes": 10}
{"task_id": 726, "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}. Ensure that you handle any potential edge cases, such as an empty tuple or tuples with non-numeric elements, gracefully. Additionally, the function should be optimized for performance with large tuples.", "pass@10": true, "passes": 9}
{"task_id": 292, "prompt": "Create a Python function to calculate the quotient of two numbers, with the result rounded down to the nearest whole number. Make sure to manage division by zero smoothly in your code.", "pass@10": true, "passes": 10}
{"task_id": 608, "prompt": "Write a python function to find nth bell number. The Bell numbers are a sequence of numbers that count the number of ways a set can be partitioned into nonempty subsets, and specifically, the nth Bell number is the number of ways to partition a set of n elements into non-empty subsets.", "pass@10": true, "passes": 7}
{"task_id": 779, "prompt": "Create a function to determine the quantity of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "pass@10": true, "passes": 10}
{"task_id": 415, "prompt": "Create a Python function to find a pair with the highest product from a given list of integers.", "pass@10": true, "passes": 10}
{"task_id": 752, "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ... The formula J(n) = J(n-1) + 2 * J(n-2) can be used to compute the nth Jacobsthal number.", "pass@10": true, "passes": 9}
{"task_id": 721, "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells, starts from the top-left cell, moves only right or down, and ends on the bottom right cell. We want to find a path with the maximum average over all existing paths, where the average is computed as total cost divided by the number of cells visited in the path.", "pass@10": true, "passes": 9}
{"task_id": 596, "prompt": "Develop a function to determine the memory size of the provided tuple. Memory allocation for tuples involves overhead beyond the numerical data. Ensure your function accurately determines the total memory consumption, including metadata.", "pass@10": true, "passes": 2}
{"task_id": 230, "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string. The function should handle empty strings and consider consecutive spaces in the input string carefully.", "pass@10": false, "passes": 0}
{"task_id": 723, "prompt": "The input is described as two lists of equal length, and you need to write a function to count indices where the lists have the same values.", "pass@10": false, "passes": 0}
{"task_id": 556, "prompt": "Write a python function to count the number of pairs between integers in a list; the function should return the total count of such pairs whose xor value is odd.", "pass@10": false, "passes": 0}
{"task_id": 722, "prompt": "The input is presented as - a dictionary with a student's name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight exceeding the minimum.", "pass@10": true, "passes": 2}
{"task_id": 572, "prompt": "Create a Python function to eliminate repeated numbers from several provided lists. Ensure that your solution efficiently handles lists with large numbers of elements.", "pass@10": true, "passes": 7}
{"task_id": 89, "prompt": "Write a function to determine the nearest smaller number that is less than n. Ensure your function efficiently manages edge cases where there might be no smaller number.", "pass@10": true, "passes": 10}
{"task_id": 113, "prompt": "Develop a function that determines if a string symbolizes an integer or not.", "pass@10": true, "passes": 10}
{"task_id": 165, "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive). For example, the character 'A' is in the first position of the English alphabet, and should be counted if it appears as the first character in the string. Consider edge cases such as strings with special characters or numbers which should be ignored.", "pass@10": true, "passes": 5}
{"task_id": 803, "prompt": "Write a function to check whether the given number is a perfect square or not. There is a useful resource available at the following link: https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/ You can check it out for further reference and better understanding. Make sure your solution is optimal in terms of time complexity.", "pass@10": true, "passes": 10}
{"task_id": 600, "prompt": "Write a python function to check whether the given number is even or not.", "pass@10": true, "passes": 10}
{"task_id": 750, "prompt": "Create a method to insert the specified tuple into the provided list.", "pass@10": true, "passes": 9}
{"task_id": 293, "prompt": "Write a function to find the third side of a right angled triangle. Make sure to consider the use of the Pythagorean theorem during your calculations. It is crucial to utilize this theorem accurately in order to compute the third side correctly.", "pass@10": true, "passes": 1}
{"task_id": 232, "prompt": "Write a function that receives a list and an integer n and returns a list containing the n largest items from the list. Ensure your solution efficiently handles cases where the list is large or when n is a significant portion of the list size.", "pass@10": true, "passes": 10}
{"task_id": 94, "prompt": "Given a list of tuples, craft a function that provides the first element of the tuple with the least second element. Ensure to handle cases where the list may have tuples with the same second value.", "pass@10": true, "passes": 8}
{"task_id": 739, "prompt": "Write a python function to find the index of smallest triangular number with n digits. This problem can be approached by generating triangular numbers and checking their digit count until the desired length is found. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "pass@10": true, "passes": 10}
{"task_id": 253, "prompt": "Design a Python function that outputs the count. The count should reflect the number of integer items in a specified list.", "pass@10": true, "passes": 10}
{"task_id": 274, "prompt": "Write a python function that takes in a positive integer n. The function should then find the sum of even index binomial coefficients. Consider edge cases and ensure the function handles large values of n efficiently.", "pass@10": true, "passes": 10}
{"task_id": 805, "prompt": "Define a function that retrieves the sublist within a list of lists where the total of the elements is the greatest.", "pass@10": true, "passes": 10}
{"task_id": 559, "prompt": "Create a function that calculates the sum of the largest connected sublist within the provided list. Ensure your code efficiently handles cases where the list contains both positive and negative numbers.", "pass@10": true, "passes": 9}
{"task_id": 256, "prompt": "Write a python function that accepts a non-negative number as its input. The function should process this input effectively and accurately. It should return the number of prime numbers less than the given non-negative number.", "pass@10": true, "passes": 10}
{"task_id": 725, "prompt": "Write a function to extract values between quotation marks \" \" of the given string. You need to concentrate on identifying the portions within the string where text is surrounded by quotation marks. It is crucial to capture and extract those text segments accurately.", "pass@10": true, "passes": 10}
{"task_id": 71, "prompt": "Write a function to sort a list. The list will contain elements, which can vary in type and size. It is important to accommodate these variations when sorting.", "pass@10": true, "passes": 10}
{"task_id": 772, "prompt": "Write a function to remove all the words with k length in the given string. Ensure your solution efficiently handles edge cases, such as strings with varying delimiters or punctuation marks. Pay attention to maintain the original sequence of the remaining words in the string.", "pass@10": true, "passes": 10}
{"task_id": 130, "prompt": "Develop a function to identify the element with the highest occurrence in a specified list.", "pass@10": false, "passes": 0}
{"task_id": 106, "prompt": "Formulate a function to add the provided list to the specified tuples. Ensure the function handles cases where the tuples and list may be of different lengths.", "pass@10": true, "passes": 1}
{"task_id": 792, "prompt": "Write a python function to count the number of lists in a given number of lists. Make sure to handle nested lists as well when counting the total number of lists. The function should be able to accurately identify and count lists within multiple levels of nesting.", "pass@10": true, "passes": 8}
{"task_id": 413, "prompt": "\nWrite a function to extract the nth element from a given list of tuples. Ensure your solution handles cases where the input list is empty or contains fewer elements than the specified index.", "pass@10": true, "passes": 10}
{"task_id": 396, "prompt": "Write a function to determine if the specified string begins and concludes with the identical character or not.", "pass@10": true, "passes": 7}
{"task_id": 414, "prompt": "Create a Python function to determine if any value in one sequence is present in another sequence. This function should check for the presence of any element from the first sequence in the second sequence. The existence of even a single matching element would determine the outcome.", "pass@10": true, "passes": 10}
{"task_id": 271, "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers raised to the fifth power.", "pass@10": true, "passes": 7}
{"task_id": 133, "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers. Be sure to handle the case where the list is empty or contains no negative numbers.", "pass@10": true, "passes": 10}
{"task_id": 735, "prompt": "Develop a python function to invert bits of the number, except for the first and last bits. Refer to the link for more details: https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "pass@10": true, "passes": 2}
{"task_id": 128, "prompt": "Write a function to find words that are longer than n characters from a given list of words. Ensure that your solution handles edge cases, such as an empty list or words with special characters.", "pass@10": true, "passes": 10}
{"task_id": 569, "prompt": "Write a function to sort each sublist of strings in a given list of lists. Ensure that the sorting is case-insensitive.", "pass@10": true, "passes": 10}
{"task_id": 801, "prompt": "Write a python function to count the number of equal numbers from three given integers. Consider edge cases where the integers may have the same values. Also, consider cases where they may be completely distinct.", "pass@10": true, "passes": 10}
{"task_id": 754, "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list. Ensure your solution efficiently handles lists of varying lengths. Consider edge cases where the lists could be empty or contain differing data types.", "pass@10": true, "passes": 10}
{"task_id": 578, "prompt": "Create a function that merges 3 lists of equal length into one list that is continuous. The three lists should have exactly the same number of elements, meaning each list has the same length.", "pass@10": true, "passes": 10}
{"task_id": 58, "prompt": "Write a python function to check whether the given two integers have opposite sign or not. Be sure to account for zero, which is neither positive nor negative.", "pass@10": false, "passes": 0}
{"task_id": 278, "prompt": "Create a function to determine the count of elements that appear prior to the tuple element in the given tuple. Ensure that the function handles edge cases, such as an empty tuple or when the tuple element is at the start of the tuple.", "pass@10": false, "passes": 0}
{"task_id": 7, "prompt": "Write a function to find all words which are at least 4 characters long in a string. Ensure that the function handles edge cases, such as punctuation and varying whitespace, correctly.", "pass@10": true, "passes": 10}
{"task_id": 19, "prompt": "Write a function to find whether a given array of integers contains any duplicate element. Ensure your solution is optimized for large input sizes.", "pass@10": true, "passes": 10}
{"task_id": 67, "prompt": "Write a function to determine the quantity of methods to divide a collection of Bell numbers. Consider edge cases where the collection might be empty or contain only one Bell number.", "pass@10": true, "passes": 3}
{"task_id": 120, "prompt": "Write a function to find the highest absolute product among numbers in pairs of tuples within a given list. Ensure your solution is optimized for performance with large datasets.", "pass@10": true, "passes": 6}
{"task_id": 623, "prompt": "Write a function to compute the n-th power. Do this for each number in a list. Consider edge cases such as an empty list or when n is zero.", "pass@10": true, "passes": 10}
{"task_id": 96, "prompt": "Write a python function to find the number of divisors of a given integer. Ensure that your solution is optimized for large integers.", "pass@10": true, "passes": 10}
{"task_id": 262, "prompt": "Write a function that takes in a list and an integer L and divides the provided list into two segments where the size of the first segment of the list is L, returning the resulting lists in a tuple.", "pass@10": true, "passes": 7}
{"task_id": 171, "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides. Ensure that the function handles edge cases, such as non-positive side lengths, appropriately.", "pass@10": true, "passes": 10}
{"task_id": 297, "prompt": "Formulate a function to convert a supplied multi-layered list arrangement into a flat, single-layer list.", "pass@10": true, "passes": 7}
{"task_id": 809, "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple. You will compare each element from the second tuple. It should be compared to the corresponding element in the first tuple. Your function should return a boolean indicating whether this condition holds true for all pairs of elements.", "pass@10": true, "passes": 8}
{"task_id": 14, "prompt": "Create a Python function to calculate the volume of a triangular prism.", "pass@10": true, "passes": 10}
{"task_id": 18, "prompt": "Write a function. The function should remove characters from the first string which are present in the second string.", "pass@10": true, "passes": 10}
{"task_id": 62, "prompt": "Write a python function to find smallest number in a list. Ensure that your code handles both positive and negative numbers and can efficiently handle large inputs.", "pass@10": true, "passes": 10}
{"task_id": 80, "prompt": "Write a function to find the nth tetrahedral number. The function should handle cases where n is zero or negative appropriately.", "pass@10": true, "passes": 10}
{"task_id": 88, "prompt": "Write a function to get the frequency of all the elements in a list. The frequency should be returned as a dictionary.", "pass@10": true, "passes": 10}
{"task_id": 91, "prompt": "Construct a function to verify whether a string exists as a substring within a specified list of string values.", "pass@10": true, "passes": 10}
{"task_id": 93, "prompt": "Write a function to calculate the value of 'a' to the power 'b'. Ensure you handle both positive and negative values for 'b'.", "pass@10": true, "passes": 10}
{"task_id": 98, "prompt": "Create a function to compute the product of all the numbers in a list and divide by the list's length.", "pass@10": true, "passes": 10}
{"task_id": 108, "prompt": "Write a function to merge three lists into one cohesive unit. Arrange the merged elements in a single sorted list.", "pass@10": true, "passes": 10}
{"task_id": 242, "prompt": "Create a function to calculate the overall quantity of characters within a string.", "pass@10": true, "passes": 10}
{"task_id": 252, "prompt": "Write a python function to convert complex numbers to polar coordinates. Ensure your function handles both positive and negative values correctly.", "pass@10": true, "passes": 10}
{"task_id": 267, "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers. Ensure that the function handles edge cases where n is zero or negative gracefully.", "pass@10": true, "passes": 10}
{"task_id": 284, "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.", "pass@10": true, "passes": 10}
{"task_id": 388, "prompt": "Create a Python function to determine the largest power of 2 that does not exceed n.", "pass@10": true, "passes": 10}
{"task_id": 390, "prompt": "Write a function to apply a given format string to all of the elements in a list. Ensure that the function handles edge cases such as empty lists or lists containing non-string elements gracefully.", "pass@10": true, "passes": 7}
{"task_id": 392, "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "pass@10": true, "passes": 8}
{"task_id": 422, "prompt": "Create a Python function to calculate the mean of the cubes of the initial n natural numbers.", "pass@10": true, "passes": 10}
{"task_id": 424, "prompt": "Create a function that captures solely the last index element of every string within the provided tuple.", "pass@10": true, "passes": 10}
{"task_id": 441, "prompt": "Write a function to find the surface area of a cube of a given size. Ensure your solution efficiently calculates the area considering potential edge cases.", "pass@10": true, "passes": 10}
{"task_id": 456, "prompt": "Write a function to reverse each string in a given list of string values. Ensure that your function handles empty strings and returns a list of reversed strings in the same order as they were received.", "pass@10": true, "passes": 10}
{"task_id": 460, "prompt": "Write a python function to get the first element of each sublist. Ensure your solution handles lists of varying lengths efficiently.", "pass@10": true, "passes": 4}
{"task_id": 470, "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple. The core task is to sum each element with its successive neighbor. This should be done for every consecutive pair in the sequence.", "pass@10": true, "passes": 10}
{"task_id": 475, "prompt": "Develop a function to organize a dictionary based on its values.", "pass@10": true, "passes": 8}
{"task_id": 478, "prompt": "Create a function to eliminate lowercase substrings from a specified string.", "pass@10": true, "passes": 9}
{"task_id": 618, "prompt": "Write a function to divide two lists element wise. You need to perform a division operation between corresponding elements in the lists. This process involves taking one element from the first list and dividing it by the matching element in the second list.", "pass@10": true, "passes": 10}
{"task_id": 737, "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.", "pass@10": true, "passes": 9}
{"task_id": 741, "prompt": "Write a python function to check whether all the characters are same or not. You will need to ensure that the function examines every character. It should compare them to determine if they match or not.", "pass@10": true, "passes": 10}
{"task_id": 745, "prompt": "Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "pass@10": true, "passes": 9}
{"task_id": 749, "prompt": "Write a function to sort a provided list of number strings by their numeric values. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/", "pass@10": true, "passes": 5}
{"task_id": 753, "prompt": "Write a function to find minimum k records from tuple list. In this case a verbatim copy of test cases https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/", "pass@10": true, "passes": 10}
{"task_id": 762, "prompt": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12. Remember to consider edge cases, such as invalid month numbers, in your implementation.", "pass@10": true, "passes": 1}
{"task_id": 764, "prompt": "Write a python function to count the quantity of digits that appear in a given string. This involves examining each character within the string to determine if it is a digit or not.", "pass@10": true, "passes": 10}
{"task_id": 568, "prompt": "Write a function to create a list of N empty dictionaries. Ensure that your implementation efficiently uses memory if N becomes very large.", "pass@10": true, "passes": 10}
{"task_id": 577, "prompt": "Write a python function to find the last digit in the factorial of a given number. Factorials can be large numbers, so it is important to consider efficient methods for computation.", "pass@10": true, "passes": 9}
{"task_id": 588, "prompt": "Write a python function to find the difference between largest and smallest value in a given list. Ensure the function handles cases where the list is empty by returning None or an appropriate message.", "pass@10": true, "passes": 10}
{"task_id": 591, "prompt": "Write a python function to interchange the first and last elements in a list. Consider edge cases such as when the list is empty or contains only one element.", "pass@10": true, "passes": 10}
{"task_id": 459, "prompt": "Create a function that removes uppercase subsections from a specified string. Ensure the solution handles edge cases such as empty strings and strings with no uppercase characters.", "pass@10": true, "passes": 3}
{"task_id": 106, "prompt": "Formulate a function to add the provided list to the specified tuples. Make sure to pay attention to the details of how the elements are combined. Ensure the function handles cases where the tuples and list may be of different lengths.", "pass@10": true, "passes": 6}
{"task_id": 606, "prompt": "Write a function to convert degrees to radians. Ensure that your function handles negative values correctly. It should return accurate results for all inputs. Consider edge cases where the degree input is zero or a full circle (360 degrees), as they should return zero and two pi radians, respectively.", "pass@10": true, "passes": 7}
{"task_id": 421, "prompt": "Develop a function that concatenates every element of a tuple using the specified delimiter. Make sure that the function is robust enough to handle tuples containing various data types. It should achieve this by converting all elements to strings before concatenation.", "pass@10": true, "passes": 4}
{"task_id": 239, "prompt": "Create a function that accepts positive integers m and n and determines how many possible sequences of length n can be formed, where each number is a positive integer that is at least twice the size of the preceding number but does not exceed m. Make sure your solution addresses edge cases effectively for larger values of n.", "pass@10": true, "passes": 5}
{"task_id": 573, "prompt": "Write a python function to calculate the product of the unique numbers in a given list. Ensure that the function efficiently handles large lists with many elements, and consider edge cases such as lists with all identical elements or empty lists.", "pass@10": false, "passes": 0}
{"task_id": 293, "prompt": "Write a function to find the third side of a right angled triangle. Make sure to consider the use of the Pythagorean theorem during your calculations. It is crucial to utilize this theorem accurately in order to compute the third side correctly. Remember to validate the inputs to ensure they form a valid right angled triangle.", "pass@10": true, "passes": 7}
{"task_id": 733, "prompt": "Create a function to determine the position of the initial appearance of a specific number in a sorted list. Ensure your solution is capable of efficiently handling large inputs. It should also optimize for performance.", "pass@10": true, "passes": 9}
{"task_id": 67, "prompt": "Write a function to determine the quantity of methods to divide a collection of Bell numbers and consider edge cases where the collection might be empty or contain only one Bell number.", "pass@10": false, "passes": 0}
{"task_id": 311, "prompt": "Write a python function to set the left most unset bit. This function must effectively find the first unset bit starting from the left, and modify it to a set bit.", "pass@10": false, "passes": 0}
{"task_id": 3, "prompt": "Write a python function. The purpose of the function is to identify numbers that are not prime. The function should be specifically designed to identify non-prime numbers. It should take into account various methods for effective identification.", "pass@10": false, "passes": 0}
{"task_id": 445, "prompt": "Write a function to carry out index-by-index multiplication of the elements in the given two tuples.", "pass@10": true, "passes": 3}
{"task_id": 391, "prompt": "Write a function to convert more than one list to nested dictionary. Make sure that the function manages situations where the lists differ in length politely. Consider using default values or placeholders for missing elements to handle such discrepancies gracefully.", "pass@10": true, "passes": 8}
{"task_id": 265, "prompt": "Create a function that receives a list and a number n and divides the list at every nth element, providing a list of the resulting sublists. Ensure that the function handles empty lists and cases where n is greater than the length of the list gracefully.", "pass@10": false, "passes": 0}
{"task_id": 450, "prompt": "Write a function to extract specified size of strings from a given list of string values, ensuring that the function handles cases where the specified size is greater than the length of individual strings in the list.", "pass@10": false, "passes": 0}
{"task_id": 425, "prompt": "Create a function that counts how many sublists include a specified element. Guarantee the function manages nested and flat lists effectively. Ensure that your function handles different data types within lists correctly.", "pass@10": true, "passes": 5}
{"task_id": 751, "prompt": "Create a function that determines whether the provided array illustrates a min heap by checking if each parent node is less than or equal to its child nodes for all nodes in the array. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "pass@10": true, "passes": 3}
{"task_id": 165, "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive). For example, the character 'A' is in the first position of the English alphabet. It should be counted if it appears as the first character in the string. Consider edge cases such as strings with special characters or numbers which should be ignored.", "pass@10": true, "passes": 9}
{"task_id": 580, "prompt": "Write a function to remove uneven elements in the nested mixed tuple. Make sure to maintain the order of the even elements in the resulting data structure. Ensure that your solution handles tuples nested at multiple levels.", "pass@10": true, "passes": 3}
{"task_id": 299, "prompt": "Write a function to calculate the maximum sum from the list of tuples. You need to ensure your function is capable of handling various types of data within the tuples. Ensure the function goes through each component of the list precisely.", "pass@10": true, "passes": 6}
{"task_id": 432, "prompt": "Write a function to find the median length of a trapezium.", "pass@10": true, "passes": 4}
{"task_id": 619, "prompt": "Create a function that shifts all digits to the conclusion of the provided text.", "pass@10": true, "passes": 10}
{"task_id": 141, "prompt": "Write a function to sort a list. A list comprises multiple elements that need to be arranged. Sort a list of elements. Ensure the function handles edge cases, such as an empty list or a list with a single element. Pay attention to the time complexity of your approach for larger lists.", "pass@10": true, "passes": 10}
{"task_id": 127, "prompt": "Create a function that multiplies two integers. Ensure that the function handles both positive and negative integers correctly. Take edge cases into account and aim to develop an efficient solution.", "pass@10": true, "passes": 10}
{"task_id": 268, "prompt": "Write a function to find the n'th star number. Star numbers are a centered figurate number representing a centered hexagram, and your task is to implement an efficient algorithm to compute the n'th star number based on its mathematical properties.", "pass@10": true, "passes": 2}
{"task_id": 442, "prompt": "Create a function to calculate the proportion of positive integers in a list of numbers. Make sure your method addresses special situations like an empty list or all negative values. Pay attention to the efficiency of your solution for larger lists to ensure swift calculations.", "pass@10": true, "passes": 9}
{"task_id": 390, "prompt": "Write a function to apply a given format string to all of the elements in a list. Ensure that the function handles edge cases gracefully. It should be able to handle cases such as empty lists. It should also manage lists containing non-string elements.", "pass@10": true, "passes": 10}
{"task_id": 396, "prompt": "Write a function to determine if the provided string begins and concludes with the same character.", "pass@10": true, "passes": 10}
{"task_id": 747, "prompt": "Write a function to determine the longest common subsequence for the given three string sequence. You need to identify and find the length of the subsequence that is common among all three strings while ensuring that this subsequence is the longest possible. Consider edge cases where the strings are of varying lengths, including possible empty strings. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "pass@10": true, "passes": 9}
{"task_id": 261, "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples. Make sure that each element from the first tuple is divided by the corresponding element of the second tuple. Ensure that both tuples are of the same length to avoid index errors during the operation.", "pass@10": true, "passes": 1}
{"task_id": 170, "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices, ensuring that the function deals with scenarios where the indices fall outside the range.", "pass@10": true, "passes": 9}
{"task_id": 167, "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n. Ensure that your solution is efficient and can quickly handle cases. It should be able to efficiently deal with large values of n.", "pass@10": true, "passes": 2}
{"task_id": 17, "prompt": "Write a function that returns the perimeter of a square given its side length as input. Ensure the function handles both integer and floating-point inputs gracefully.", "pass@10": true, "passes": 10}
{"task_id": 611, "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column. Ensure that the function handles matrices of varying dimensions gracefully.", "pass@10": true, "passes": 10}
{"task_id": 726, "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}. Ensure that you handle any potential edge cases, such as an empty tuple or tuples with non-numeric elements, gracefully, and that the function is optimized for performance with large tuples.", "pass@10": true, "passes": 6}
{"task_id": 445, "prompt": "Write a function to carry out index-by-index multiplication of the elements in the given two tuples. Ensure the function handles tuples of different lengths by multiplying up to the length of the shorter tuple.", "pass@10": true, "passes": 8}
{"task_id": 410, "prompt": "Write a function to find the minimum value in a given heterogeneous list. Your task is to locate and return the least item from the list, which may contain a combination of integers, floats, and possibly other types, and you need to handle this appropriately.", "pass@10": true, "passes": 10}
{"task_id": 782, "prompt": "Create a Python function that computes the sum of all subarrays. Consider only those subarrays that have an odd number of elements. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "pass@10": true, "passes": 5}
{"task_id": 750, "prompt": "Create a method to insert the specified tuple into the provided list.", "pass@10": true, "passes": 7}
{"task_id": 752, "prompt": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ... The formula J(n) = J(n-1) + 2 * J(n-2) can be used to compute the nth Jacobsthal number. Ensure the function handles large inputs efficiently.", "pass@10": false, "passes": 0}
{"task_id": 792, "prompt": "Write a python function to count the number of lists in a given number of lists, ensuring to handle nested lists as well when counting the total number of lists. The function should be able to accurately identify and count lists within multiple levels of nesting.", "pass@10": true, "passes": 5}
{"task_id": 421, "prompt": "Develop a function that concatenates every element of a tuple using the specified delimiter. Make sure that the function is robust enough to handle tuples containing various data types. It should achieve this by converting all elements to strings before concatenation. Ensure that the function handles empty tuples gracefully without errors.", "pass@10": true, "passes": 7}
{"task_id": 616, "prompt": "Write a function which takes two tuples of the same length. The function should then perform the element-wise modulo operation on these tuples.", "pass@10": true, "passes": 10}
{"task_id": 97, "prompt": "Create a function to determine the count of every element in a single-level list of lists, delivered in a dictionary, ensuring that the function handles cases with nested lists accurately by processing only one level of list depth.", "pass@10": true, "passes": 10}
{"task_id": 274, "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients. Consider edge cases and ensure the function handles large values of n efficiently.", "pass@10": true, "passes": 8}
{"task_id": 63, "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list. Make sure to handle cases where there are no pairs by returning an appropriate value.", "pass@10": true, "passes": 10}
{"task_id": 474, "prompt": "Write a function to replace characters. You are required to implement the function by using a string as input. The function should handle edge cases where the input string may be empty or contain special characters.", "pass@10": true, "passes": 10}
{"task_id": 271, "prompt": "Create a Python function that accepts an integer n and calculates the sum of the first n even natural numbers raised to the fifth power.", "pass@10": true, "passes": 10}
{"task_id": 162, "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, as illustrated by n + (n-2) + (n-4)... (until n-x =< 0).", "pass@10": true, "passes": 10}
{"task_id": 262, "prompt": "Write a function that takes in a list and an integer L and divides the provided list into two segments. The size of the first segment of the list is L. The function should return the resulting lists in a tuple.", "pass@10": true, "passes": 10}
{"task_id": 779, "prompt": "Create a function to determine the quantity of lists within a list, and the function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "pass@10": true, "passes": 10}
{"task_id": 94, "prompt": "Given a list of tuples, craft a function that provides the first element of the tuple with the least second element, ensuring to handle cases where the list may have tuples with the same second value.", "pass@10": true, "passes": 10}
{"task_id": 722, "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. You need to write a function to filter students. This function should filter students that have height and weight above the minimum. Make sure to handle edge cases where the dictionary might be empty, or where all values are below the minimum criteria.", "pass@10": true, "passes": 10}
{"task_id": 608, "prompt": "Write a python function to find nth bell number. The Bell numbers are a sequence of numbers that count the number of ways a set can be partitioned into nonempty subsets, specifically, the nth Bell number is the number of ways to partition a set of n elements into non-empty subsets.", "pass@10": true, "passes": 7}
{"task_id": 257, "prompt": "Construct a method that accepts two numerical inputs and produces a pair with the second number appearing prior to the first number.", "pass@10": true, "passes": 10}
{"task_id": 805, "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest. Ensure that your solution handles negative numbers and zero correctly.", "pass@10": true, "passes": 10}
{"task_id": 572, "prompt": "Create a Python function to eliminate repeated numbers from several provided lists. Ensure that your solution efficiently handles lists with large numbers of elements. The function should return a new list containing unique numbers present in all the input lists while preserving their original order.", "pass@10": true, "passes": 1}
{"task_id": 604, "prompt": "Write a function to reverse words. The words are separated by spaces in a given string.", "pass@10": true, "passes": 10}
{"task_id": 415, "prompt": "Create a Python function to find a pair with the highest product from a given list of integers. Make sure to consider edge cases, such as lists with fewer than two elements, and handle them appropriately.", "pass@10": true, "passes": 10}
{"task_id": 721, "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells, starting from the top-left cell and moving only right or down to end on the bottom right cell. We want to find a path with the maximum average over all existing paths, where the average is computed as total cost divided by the number of cells visited in the path.", "pass@10": true, "passes": 8}
{"task_id": 472, "prompt": "Write a python function to check whether the given list contains consecutive numbers or not. Assess whether the list provided has numbers in sequence. Determine if they are consecutive numbers. Consider edge cases where the list may be empty or contain only one element.", "pass@10": true, "passes": 9}
{"task_id": 739, "prompt": "Write a python function to find the index of smallest triangular number with n digits. You need to solve the problem described in the link: https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/. Ensure that your function handles large values of n efficiently.", "pass@10": true, "passes": 10}
{"task_id": 113, "prompt": "Write a function to check if a string represents an integer or not. Ensure your solution handles both positive and negative integers, as well as strings with leading and trailing spaces. Consider edge cases where the string might be empty or consist only of whitespace.", "pass@10": true, "passes": 10}
{"task_id": 803, "prompt": "Write a function to check whether the given number is a perfect square or not. There is a useful resource available at the following link: https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/ You can check it out for further reference and better understanding. Make sure your solution is optimal in terms of time complexity. Consider edge cases such as negative numbers and zero when implementing your function.", "pass@10": true, "passes": 10}
{"task_id": 297, "prompt": "Create a function to transform a given multi-tiered list structure into a flattened, single-level list.", "pass@10": true, "passes": 10}
{"task_id": 71, "prompt": "Write a function to sort a list. The list will be composed of items, which may differ in type and size. It is important to accommodate these variations when sorting.", "pass@10": true, "passes": 9}
{"task_id": 600, "prompt": "Write a python function to check whether the given number is even or not. Ensure that your function handles all integer inputs, including negative numbers and zero.", "pass@10": true, "passes": 10}
{"task_id": 232, "prompt": "Create a function that accepts a list and an integer n, then outputs a list with the n largest elements from the original list.", "pass@10": true, "passes": 10}
{"task_id": 735, "prompt": "Develop a python function to invert bits of the number, except for the first and last bits. Refer to the link for more details: https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/ Ensure your solution efficiently handles various input sizes beyond typical constraints.", "pass@10": true, "passes": 3}
{"task_id": 459, "prompt": "Create a function that removes uppercase subsections from a specified string. Ensure the solution handles edge cases. Such cases include empty strings and strings with no uppercase characters.", "pass@10": true, "passes": 4}
{"task_id": 106, "prompt": "Create a function to concatenate the given list to the indicated tuples. Make sure to focus on the specifics of how the items are merged. Ensure the function can manage scenarios where the tuples and list might have differing lengths.", "pass@10": true, "passes": 8}
{"task_id": 96, "prompt": "Write a python function to find the number of divisors of a given integer. Ensure your solution efficiently handles very large integers.", "pass@10": true, "passes": 10}
{"task_id": 253, "prompt": "Design a Python function that outputs the count. The count needs to give you a numerical figure. It should reflect the number of integer items in a specified list.", "pass@10": true, "passes": 10}
{"task_id": 754, "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. It's considered a common element when it occupies the same position in each of the lists. Write a function to find common elements from three lists. The function should return a list.", "pass@10": true, "passes": 10}
{"task_id": 725, "prompt": "Write a function to extract values between quotation marks \" \" of the given string. You need to concentrate on identifying the portions within the string. These are the portions where text is surrounded by quotation marks. It is crucial to capture and extract those text segments accurately.", "pass@10": true, "passes": 9}
{"task_id": 559, "prompt": "Create a function that calculates the sum of the largest connected sublist within the provided list. Ensure the function efficiently handles lists with negative and positive integers.", "pass@10": true, "passes": 9}
{"task_id": 133, "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers. Be sure to handle the case where the list is empty or contains no negative numbers. Consider edge cases such as lists with large numbers or all zeroes.", "pass@10": true, "passes": 10}
{"task_id": 282, "prompt": "Write a function to subtract two lists element-wise. Ensure that the lists are of the same length before performing the subtraction.", "pass@10": true, "passes": 10}
{"task_id": 128, "prompt": "Write a function to identify words exceeding n characters in length from a provided list of words. Ensure that your solution handles edge cases, such as an empty list or words with special characters.", "pass@10": true, "passes": 10}
{"task_id": 19, "prompt": "Write a function to determine if a specified array of integers has any repeated element. Ensure your solution is optimized for large input sizes.", "pass@10": true, "passes": 10}
{"task_id": 624, "prompt": "Write a python function to convert a given string to uppercase. Ensure that the function is built to handle different types of input data gracefully. The solution should be efficient and concise, utilizing Python's built-in string methods where appropriate.", "pass@10": true, "passes": 10}
{"task_id": 589, "prompt": "Write a function to find perfect squares between two given numbers. Ensure that your solution handles edge cases. Make sure to account for scenarios where the input numbers themselves could be perfect squares.", "pass@10": true, "passes": 4}
{"task_id": 801, "prompt": "Write a python function to count the number of equal numbers from three given integers. Consider edge cases where the integers may have the same values. There may be scenarios where two or three numbers are the same. Also, consider cases where they may be completely distinct.", "pass@10": true, "passes": 9}
{"task_id": 224, "prompt": "Write a python function to count the number of set bits in a given number. The set bits pertain to binary digits that have a value of 1.", "pass@10": true, "passes": 10}
{"task_id": 476, "prompt": "Create a Python function that calculates the sum of the maximum and minimum numbers in a specified array. Ensure that the array contains at least one element.", "pass@10": true, "passes": 10}
{"task_id": 129, "prompt": "Write a function to calculate whether the matrix is a magic square. A magic square is a square matrix. In this matrix, the sums of the numbers in each row, each column, and both main diagonals are the same. To determine if a matrix is a magic square, all these sums must be equal.", "pass@10": true, "passes": 7}
{"task_id": 80, "prompt": "Write a function to find the nth tetrahedral number. The function should handle cases where n is zero or negative appropriately. Consider using input validation to ensure that the function behaves predictably for all possible inputs.", "pass@10": true, "passes": 10}
{"task_id": 397, "prompt": "Write a function to determine the median of three numbers. The function should take three numbers as input. These numbers will be used to find the median. Ensure your function handles both positive and negative numbers correctly.", "pass@10": true, "passes": 10}
{"task_id": 132, "prompt": "Write a function to convert a tuple. Your task is to transform the provided tuple into a string.", "pass@10": true, "passes": 10}
{"task_id": 741, "prompt": "Write a python function to check whether all the characters are same or not. You will need to ensure that the function examines every character to determine if they match or not.", "pass@10": true, "passes": 10}
{"task_id": 422, "prompt": "Write a python function to find the average of cubes of first n natural numbers. These cubes are obtained by raising each natural number to the power of three. You should then calculate the sum of these cubes and divide by n.", "pass@10": true, "passes": 10}
{"task_id": 239, "prompt": "Write a function that accepts positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.", "pass@10": true, "passes": 1}
{"task_id": 239, "prompt": "Write a function that accepts positive integers m and n and finds the number of possible sequences of length n. Each element in the sequence is a positive integer. It is greater than or equal to twice the previous element but less than or equal to m.", "pass@10": true, "passes": 1}
{"task_id": 69, "prompt": "Write a function to determine whether a list includes the given sublist. The sublist is the sequence of elements that need to be checked within the list. The task is to decide if all elements of the sublist appear in the same order in the list or not.", "pass@10": true, "passes": 2}
{"task_id": 252, "prompt": "Write a python function to convert complex numbers to polar coordinates. Ensure your function handles both positive and negative values correctly. Your function should also be efficient in terms of time and space complexity.", "pass@10": true, "passes": 9}
{"task_id": 456, "prompt": "Create a function that inverts each string in a provided list of string entries. Guarantee that your function deals with empty strings and outputs a list of reversed strings, maintaining the original sequence.", "pass@10": true, "passes": 10}
{"task_id": 460, "prompt": "Create a Python function to retrieve the initial item of each sublist. Ensure your solution efficiently manages lists of different sizes.", "pass@10": true, "passes": 8}
{"task_id": 14, "prompt": "Create a Python function to calculate the volume of a triangular prism. Ensure that your function can handle various units of measurement and give output in cubic meters.", "pass@10": true, "passes": 7}
{"task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order. The sorting will be done according to the sum of its rows. You need to calculate the sum of each row in the matrix. Use these calculated sums to order the rows in ascending order.", "pass@10": true, "passes": 3}
{"task_id": 738, "prompt": "Write a function to calculate the geometric sum of n-1. In this problem, you are given that n is a non-negative integer. You can use recursion to effectively solve this problem.", "pass@10": true, "passes": 2}
{"task_id": 108, "prompt": "Write a function to merge three lists into one cohesive unit. Arrange the merged elements in a single sorted list. Ensure to handle any potential duplicate values within the lists during the merge.", "pass@10": false, "passes": 0}
{"task_id": 272, "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple. Ensure the function efficiently handles tuples of varying lengths and accounts for edge cases such as empty tuples or an empty list.", "pass@10": true, "passes": 10}
{"task_id": 606, "prompt": "Create a function that translates degrees into radians. Ensure that your function correctly processes negative values. It ought to deliver precise results for every input. Take into account special scenarios where the degree input is zero or a complete circle (360 degrees), since they should yield zero and two pi radians, respectively.", "pass@10": true, "passes": 10}
{"task_id": 465, "prompt": "Compose a function to remove empty entries from a specified dictionary.", "pass@10": true, "passes": 10}
{"task_id": 240, "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list. Ensure that the function maintains the order of elements from both lists.", "pass@10": true, "passes": 10}
{"task_id": 227, "prompt": "Write a function to find minimum of three numbers. Ensure that the function handles both positive and negative numbers correctly. It should return the smallest number among all three inputs. Make sure that the functionality doesn't break with negative inputs.", "pass@10": true, "passes": 10}
{"task_id": 425, "prompt": "Create a function that counts how many sublists include a specified element. Guarantee the function manages nested lists effectively. It should also handle flat lists effectively. Ensure that your function handles different data types within lists correctly.", "pass@10": true, "passes": 4}
{"task_id": 405, "prompt": "Write a function to check whether an element exists within a tuple, and it should return a boolean indicating the presence or absence of the element.", "pass@10": true, "passes": 10}
{"task_id": 79, "prompt": "Create a Python function that determines if a word's length is odd.", "pass@10": true, "passes": 10}
{"task_id": 632, "prompt": "Write a python function to move all zeroes to the end of the given list. Ensure the relative order of the non-zero elements is maintained. The function should aim for optimal time complexity while maintaining a clear and concise implementation.", "pass@10": true, "passes": 10}
{"task_id": 98, "prompt": "Create a function to compute the product of all the numbers in a list and divide by the list's length. Ensure the function handles edge cases, such as empty lists, gracefully.", "pass@10": true, "passes": 7}
{"task_id": 566, "prompt": "Create a function to calculate the sum of the digits in a non-negative integer.", "pass@10": true, "passes": 10}
{"task_id": 267, "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers. You should ensure that the function handles edge cases where n is zero appropriately. Also, consider scenarios where n is negative and handle them gracefully.", "pass@10": true, "passes": 10}
{"task_id": 88, "prompt": "Write a function to get the frequency of all the elements in a list. Each element's frequency count should be computed. The frequency should be returned as a dictionary.", "pass@10": true, "passes": 10}
{"task_id": 242, "prompt": "Create a function to calculate the overall quantity of characters within a string.", "pass@10": true, "passes": 10}
{"task_id": 111, "prompt": "Write a function to find the common elements in given nested lists. Ensure that your solution efficiently processes the cases where there are multiple nested lists. It should also handle lists of varying lengths.", "pass@10": true, "passes": 10}
{"task_id": 588, "prompt": "Write a python function to determine the difference between the maximum and minimum values in a specified list. Ensure the function handles cases where the list is empty by returning None or an appropriate message.", "pass@10": true, "passes": 10}
{"task_id": 424, "prompt": "Create a function that captures solely the last index element of every string within the provided tuple. The function should be efficient and handle edge cases such as empty strings or single-character strings.", "pass@10": true, "passes": 10}
{"task_id": 388, "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n. Ensure that your solution is efficient and handles large values of n gracefully.", "pass@10": true, "passes": 10}
{"task_id": 728, "prompt": "Create a function that takes two series of numbers [a_1,...,a_n], [b_1,...,b_n] as inputs and outputs [a_1+b_1,...,a_n+b_n].", "pass@10": true, "passes": 10}
{"task_id": 246, "prompt": "Create a function to find square roots by utilizing the Babylonian technique.", "pass@10": false, "passes": 0}
{"task_id": 284, "prompt": "Write a function that takes in a list and element. It should then check each item in the list to verify if all are equal to the given element.", "pass@10": true, "passes": 10}
{"task_id": 59, "prompt": "Write a function to find the nth octagonal number. An octagonal number is a figurate number that represents an octagon, and can be calculated using the formula: n(3n - 2). Make sure to handle inputs efficiently to accommodate large values of n.", "pass@10": true, "passes": 10}
{"task_id": 65, "prompt": "Create a function to collapse a list and add up all of its elements.", "pass@10": true, "passes": 10}
{"task_id": 733, "prompt": "Design a function to locate the index of the initial occurrence of a specified number in a sorted array.", "pass@10": false, "passes": 0}
{"task_id": 287, "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers. Make sure to handle the case where n is zero by returning zero as the result.", "pass@10": true, "passes": 10}
{"task_id": 296, "prompt": "Write a python function to count inversions in an array. An inversion is a pair of elements in an array where the first element is greater than the second element. The task is to compute the total number of such inversions. Consider optimizing the solution for large arrays to improve efficiency.", "pass@10": true, "passes": 2}
{"task_id": 167, "prompt": "Write a python function to find the smallest power of 2, which is greater than or equal to n. This means you should identify the power of 2 that is the least, yet still as significant as or greater than n.", "pass@10": true, "passes": 1}
{"task_id": 268, "prompt": "Write a function to find the n'th star number. Star numbers are a centered figurate number. They represent a centered hexagram, and your task is to implement an efficient algorithm to compute the n'th star number based on its mathematical properties.", "pass@10": true, "passes": 5}
{"task_id": 391, "prompt": "Write a function to convert more than one list to nested dictionary. Make sure that the function manages situations where the lists differ in length politely using default values or placeholders for missing elements to handle such discrepancies gracefully.", "pass@10": true, "passes": 10}
{"task_id": 299, "prompt": "Write a function to calculate the maximum sum from the list of tuples. You need to ensure your function is capable of handling various types of data. The data may be strings, numbers, or other lists within the tuples. Ensure the function goes through each component of the list precisely.", "pass@10": true, "passes": 5}
{"task_id": 69, "prompt": "Write a function to determine whether a list includes the given sublist. The sublist is the sequence of elements that need to be checked within the list, and the task is to decide if all elements of the sublist appear in the same order in the list or not.", "pass@10": false, "passes": 0}
{"task_id": 782, "prompt": "Create a Python function that computes the sum of all subarrays, considering only those subarrays that have an odd number of elements. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "pass@10": true, "passes": 8}
{"task_id": 115, "prompt": "Write a function to check whether all dictionaries in a list are empty or not. You will receive a list of dictionaries as input. Your task is to iterate over each dictionary in the list. For each dictionary, check if it is empty. If all dictionaries are empty, return True. If at least one dictionary is not empty, return False.", "pass@10": true, "passes": 10}
{"task_id": 222, "prompt": "Write a function to determine whether every item in a tuple has an identical data type or not.", "pass@10": true, "passes": 10}
{"task_id": 250, "prompt": "Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple. Ensure the function handles empty tuples appropriately.", "pass@10": true, "passes": 10}
{"task_id": 269, "prompt": "Create a function that determines the ascii value of a given character.", "pass@10": true, "passes": 10}
{"task_id": 451, "prompt": "Create a function that eliminates all spaces from the specified string.", "pass@10": true, "passes": 10}
{"task_id": 458, "prompt": "Write a function to find the area of a rectangle. Assume the length and width are given as non-negative integers.", "pass@10": true, "passes": 10}
{"task_id": 731, "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h. Assume that the values of r and h are positive numbers.", "pass@10": true, "passes": 10}
{"task_id": 740, "prompt": "Create a method that transforms the provided tuple into a dictionary with key-value pairs using elements that are next to each other. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/", "pass@10": true, "passes": 6}
{"task_id": 758, "prompt": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple, and its value is the number of its occurencies in the original list.", "pass@10": true, "passes": 10}
{"task_id": 788, "prompt": "Write a function to create a new tuple from the given string and list. Ensure that the function handles edge cases such as empty strings and lists gracefully.", "pass@10": true, "passes": 5}
{"task_id": 808, "prompt": "Write a function to check if the given tuples contain the k or not. Ensure that the function efficiently handles edge cases such as empty tuples and varying data types within the tuples.", "pass@10": true, "passes": 10}
{"task_id": 432, "prompt": "Write a function to find the median length of a trapezium. Ensure your solution handles both integer and floating-point dimensions efficiently.", "pass@10": true, "passes": 7}
{"task_id": 580, "prompt": "Write a function to remove uneven elements in the nested mixed tuple, ensuring that all even elements remain in the same order as in the original structure. The order must be maintained accurately in the resulting data structure.", "pass@10": true, "passes": 1}
{"task_id": 442, "prompt": "Create a function to calculate the proportion of positive integers in a list of numbers. Make sure your method addresses special situations like an empty list or all negative values. Pay attention to the efficiency of your solution for larger lists to ensure swift calculations. Consider adding thorough unit tests to validate the function's performance across different input scenarios.", "pass@10": true, "passes": 10}
{"task_id": 726, "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}. Ensure that you handle any potential edge cases, such as an empty tuple or tuples with non-numeric elements, gracefully, and that the function is optimized for performance with large tuples. Additionally, make sure that the function does not modify the input tuple in any way.", "pass@10": true, "passes": 10}
{"task_id": 261, "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples, ensuring that each element from the first tuple is divided by the corresponding element of the second tuple. Ensure that both tuples are of the same length to avoid index errors during the operation.", "pass@10": false, "passes": 0}
{"task_id": 6, "prompt": "Compose a Python function to determine if two numerals diverge by just a single bit standing. Consider edge cases where numbers could be zero. Additionally, handle cases where the numbers are negative.", "pass@10": true, "passes": 7}
{"task_id": 127, "prompt": "Create a function that multiplies two integers. Make sure that the function properly handles integers that are both positive and negative. Take edge cases into account and aim to develop an efficient solution.", "pass@10": true, "passes": 10}
{"task_id": 264, "prompt": "Create a function that computes the age of a dog in canine years. Presume that the initial pair of a dog's years are equivalent to 10.5 human years apiece, and every year thereafter corresponds to 4 human years.", "pass@10": true, "passes": 8}
{"task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "pass@10": true, "passes": 9}
{"task_id": 274, "prompt": "Write a python function that accepts a positive integer n and calculates the sum of binomial coefficients at even indices. Consider edge cases and ensure the function handles large values of n efficiently.", "pass@10": true, "passes": 10}
{"task_id": 17, "prompt": "Write a function that returns the perimeter of a square given its side length as input. Ensure the function handles both integer and floating-point inputs gracefully. Make sure to validate that the input is a non-negative number to avoid erroneous results.", "pass@10": true, "passes": 10}
{"task_id": 64, "prompt": "Write a function to sort a list of tuples using the second value of each tuple. Ensure that your solution handles both integer and floating-point numbers appropriately.", "pass@10": true, "passes": 6}
{"task_id": 396, "prompt": "Write a function to check whether the given string starts and ends with the same character or not. Optimize it for performance with long strings.", "pass@10": true, "passes": 10}
{"task_id": 421, "prompt": "Write a function to concatenate each element of tuple. Use the delimiter to join each element of the tuple.", "pass@10": true, "passes": 3}
{"task_id": 390, "prompt": "Write a function to apply a given format string. This format string needs to be applied to all of the elements in a list.", "pass@10": true, "passes": 10}
{"task_id": 170, "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices. Make sure that the function deals with scenarios where the indices fall outside the range. Consider edge cases when the list is empty or the indices are equal.", "pass@10": true, "passes": 7}
{"task_id": 747, "prompt": "Write a function to determine the longest common subsequence for the given three string sequence. You need to identify and find the length of the longest possible subsequence that is common among all three strings. Consider edge cases where the strings are of varying lengths, including possible empty strings. Ensure to optimize the function for efficiency. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "pass@10": true, "passes": 8}
{"task_id": 635, "prompt": "Write a function to sort the given list, ensuring that the function can handle both numerical and string data types within the list. Your solution should allow for a custom sorting order by providing an optional comparison function.", "pass@10": true, "passes": 6}
{"task_id": 239, "prompt": "Write a function that takes in positive integers m and n and determines the count of possible sequences of length n, where each element is a positive integer and is at least double the preceding element but is also no greater than m.", "pass@10": false, "passes": 0}
{"task_id": 410, "prompt": "Write a function to find the minimum value in a given heterogeneous list. Your task is to locate and return the least item from the list. The list may contain a combination of integers, floats, and possibly other types, and you need to handle this appropriately.", "pass@10": true, "passes": 10}
{"task_id": 596, "prompt": "Develop a function to determine the memory size of the provided tuple. When allocating memory for tuples, there is overhead that goes beyond the numerical data stored in the tuple. Tuples include additional information in memory, not just the numerical values. Ensure your function accurately determines the total memory consumption, including metadata.", "pass@10": true, "passes": 6}
{"task_id": 580, "prompt": "Write a function to remove uneven elements in the nested mixed tuple. Make sure to maintain the order of the even elements in the resulting data structure. The function you write must be able to effectively deal with tuples nested at multiple levels. It is important to ensure that your solution handles these varied nesting levels appropriately.", "pass@10": true, "passes": 3}
{"task_id": 474, "prompt": "Write a function to replace characters. You need to design the function using a string as an input parameter. The function should handle edge cases where the input string may be empty or contain special characters.", "pass@10": true, "passes": 10}
{"task_id": 120, "prompt": "Write a function to find the highest absolute product among numbers in pairs of tuples within a given list, ensuring your solution is optimized for performance with large datasets.", "pass@10": true, "passes": 5}
{"task_id": 421, "prompt": "Write a function to concatenate each element of tuple. Use the delimiter to join each element of the tuple. Ensure that the function handles tuples containing non-string elements by converting them to strings before concatenation.", "pass@10": true, "passes": 8}
{"task_id": 96, "prompt": "Write a python function to find the number of divisors as they relate to a provided integer.", "pass@10": true, "passes": 10}
{"task_id": 271, "prompt": "Design a Python function that receives an integer n and computes the sum of the first n even natural numbers each raised to the fifth power.", "pass@10": true, "passes": 10}
{"task_id": 14, "prompt": "Create a Python function to calculate the volume of a triangular prism. Ensure that your function can handle various units of measurement and give output in cubic meters. Include appropriate error handling for invalid inputs or unsupported units of measurement.", "pass@10": true, "passes": 6}
{"task_id": 63, "prompt": "Write a function to find the greatest difference among the available pairs in the given tuple list. Make sure to handle cases where there are no pairs by returning an appropriate value.", "pass@10": true, "passes": 10}
{"task_id": 459, "prompt": "Create a function that removes uppercase subsections from a specified string. Ensure the solution handles edge cases. Such cases include empty strings and strings with no uppercase characters. Test the function with varying string lengths to confirm its efficiency.", "pass@10": true, "passes": 6}
{"task_id": 616, "prompt": "Write a function which takes two tuples of the same length and performs the element wise modulo. Ensure the function handles cases where the second tuple contains zeros gracefully.", "pass@10": true, "passes": 10}
{"task_id": 98, "prompt": "Create a function to compute the product of all the numbers in a list and divide by the list's length, ensuring the function handles edge cases, such as empty lists, gracefully.", "pass@10": true, "passes": 6}
{"task_id": 97, "prompt": "Create a function to determine the count of every element in a single-level list of lists, delivered in a dictionary, ensuring that the function handles cases with nested lists accurately by processing only one level of list depth. Make sure to consider empty lists and non-integer elements in your implementation.", "pass@10": true, "passes": 10}
{"task_id": 94, "prompt": "Given a list of tuples, design a function that returns the first element of the tuple with the smallest second element, ensuring to handle cases where the list may have tuples with the same second value.", "pass@10": true, "passes": 9}
{"task_id": 262, "prompt": "Write a function that takes in a list and an integer L and splits the given list into two sections. The size of the first segment of the list is L. The function should return the resulting lists in a tuple.", "pass@10": true, "passes": 10}
{"task_id": 739, "prompt": "Write a python function to find the index of smallest triangular number with n digits. This issue can be solved by producing triangular numbers and verifying their digit count until the required length is achieved. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "pass@10": true, "passes": 10}
{"task_id": 162, "prompt": "Write a function to compute the total of (n - 2*i) from i=0 to n // 2, as demonstrated by n + (n-2) + (n-4)... (until n-x =< 0).", "pass@10": true, "passes": 10}
{"task_id": 779, "prompt": "Create a function to determine the quantity of lists within a list, and it should return a dictionary where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "pass@10": true, "passes": 10}
{"task_id": 71, "prompt": "Create a function that sorts a list. The list will be composed of items, which may differ in type and size. It is important to accommodate these variations when sorting.", "pass@10": true, "passes": 8}
{"task_id": 722, "prompt": "The input is presented as - a dictionary with a student's name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight exceeding the minimum. Ensure that your solution efficiently handles dictionaries with a large number of student records.", "pass@10": true, "passes": 2}
{"task_id": 472, "prompt": "Write a python function to check whether the given list contains consecutive numbers or not. Assess whether the list provided has numbers in sequence. Check to see if the numbers follow one after the other in order. Determine if they are consecutive numbers. Consider edge cases where the list may be empty or contain only one element.", "pass@10": true, "passes": 10}
{"task_id": 294, "prompt": "Write a function to find the maximum value in a given heterogeneous list. It is important to ensure the function handles nested lists. The function should also handle various data types gracefully. Make sure the function has comprehensive test cases for different scenarios.", "pass@10": true, "passes": 9}
{"task_id": 600, "prompt": "Write a python function to check whether the given number is even or not. Ensure the function handles edge cases such as negative numbers and zero appropriately.", "pass@10": true, "passes": 10}
{"task_id": 113, "prompt": "Develop a function that determines if a string symbolizes an integer or not.", "pass@10": true, "passes": 10}
{"task_id": 608, "prompt": "Write a python function to find nth bell number. The Bell numbers are a sequence of numbers that count the number of ways a set can be partitioned into nonempty subsets. Specifically, the nth Bell number is the number of ways to partition a set of n elements into non-empty subsets.", "pass@10": true, "passes": 4}
{"task_id": 604, "prompt": "Write a function to reverse words. The words are separated by spaces in a given string. Ensure your solution handles multiple consecutive spaces correctly by treating them as a single space.", "pass@10": true, "passes": 10}
{"task_id": 735, "prompt": "Develop a python function to invert bits of the number. You should not invert the first and last bits of the number. Refer to the link for more details: https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/ Ensure your solution efficiently handles various input sizes beyond typical constraints.", "pass@10": true, "passes": 5}
{"task_id": 138, "prompt": "Write a python function to check if the given number can be written as the sum of non-zero powers of 2 or not. For clarity, ensure that each power of 2 is used at most once in the summation.", "pass@10": true, "passes": 1}
{"task_id": 425, "prompt": "Create a function that counts the number of sublists containing a given element. Guarantee the function manages nested and flat lists effectively.", "pass@10": true, "passes": 7}
{"task_id": 606, "prompt": "Write a function to convert degrees to radians. Remember, the conversion is crucial for mathematical calculations. To achieve this, you need to multiply the degree value by \u03c0/180.", "pass@10": false, "passes": 0}
{"task_id": 801, "prompt": "Write a python function to count the number of equal numbers from three given integers. Consider cases where the numbers might share identical values. There may be scenarios where two or three numbers are the same. Also, consider cases where they may be completely distinct.", "pass@10": true, "passes": 2}
{"task_id": 292, "prompt": "Create a Python function to calculate the quotient of two numbers, with the result rounded down to the nearest whole number. Make sure to manage division by zero smoothly in your code. Consider edge cases where inputs may be negative, zero, or extremely large.", "pass@10": true, "passes": 8}
{"task_id": 19, "prompt": "Write a function to check if a given array of integers contains any duplicate element. Ensure your solution is optimized for large input sizes.", "pass@10": true, "passes": 10}
{"task_id": 637, "prompt": "Write a function to check whether the given amount has no profit and no loss.", "pass@10": true, "passes": 1}
{"task_id": 637, "prompt": "Create a function to determine if the specified amount neither gains nor loses.", "pass@10": true, "passes": 10}
{"task_id": 65, "prompt": "Develop a function to flatten a list and sum all of its items.", "pass@10": true, "passes": 10}
{"task_id": 252, "prompt": "Write a python function to convert complex numbers to polar coordinates. Ensure your function handles both positive and negative values correctly. It should be able to process complex numbers regardless of the sign of their real and imaginary parts. Your function should also be efficient in terms of time and space complexity.", "pass@10": true, "passes": 10}
{"task_id": 624, "prompt": "Write a python function to convert a specified string to uppercase. Ensure that the function is built to handle different types of input data gracefully. The solution should be efficient and concise, utilizing Python's built-in string methods where appropriate.", "pass@10": true, "passes": 10}
{"task_id": 598, "prompt": "Write a function to check whether the given number is armstrong or not. You need to determine if this number is an armstrong number and take appropriate actions if it is. An armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.", "pass@10": true, "passes": 10}
{"task_id": 587, "prompt": "Write a function to convert a list to a tuple, ensuring that the function handles lists containing various types of elements smoothly and efficiently. Make sure to consider edge cases such as empty lists and lists with nested collections.", "pass@10": true, "passes": 10}
{"task_id": 399, "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples. Ensure that the function can handle tuples of any length and datatype that supports the xor operation. Your implementation should also take into account edge cases such as empty tuples or tuples with non-supporting data types. Make sure to include appropriate error handling for unsupported scenarios.", "pass@10": true, "passes": 10}
{"task_id": 132, "prompt": "Write a function to convert a tuple into a string.", "pass@10": true, "passes": 10}
{"task_id": 133, "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers. Ensure to manage the scenario where the list is empty or contains no negative numbers. Consider edge cases such as lists with large numbers or all zeroes.", "pass@10": true, "passes": 10}
{"task_id": 128, "prompt": "Write a function to identify words exceeding n characters in length from a provided list of words. Ensure that your solution handles edge cases, such as an empty list or words with special characters. Consider optimizing your function for cases where the input list is exceptionally large.", "pass@10": true, "passes": 9}
{"task_id": 93, "prompt": "Write a function to calculate the value of 'a' to the power 'b'. Ensure you handle both positive and negative values for 'b'. You should also consider edge cases such as when 'a' or 'b' is zero.", "pass@10": true, "passes": 10}
{"task_id": 559, "prompt": "Create a function that calculates the sum of the largest contiguous subarray in the provided list.", "pass@10": true, "passes": 10}
{"task_id": 791, "prompt": "Write a function to remove tuples from the given tuple. Ensure that your function efficiently handles tuples of varying lengths.", "pass@10": true, "passes": 8}
{"task_id": 268, "prompt": "Write a function to find the n'th star number.", "pass@10": true, "passes": 2}
{"task_id": 170, "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices. Ensure that the function deals with scenarios where the indices fall outside the range.", "pass@10": true, "passes": 5}
{"task_id": 465, "prompt": "Compose a function to remove entries from a specified dictionary that are empty. These entries should be identified and removed accordingly.", "pass@10": true, "passes": 10}
{"task_id": 224, "prompt": "Write a python function to count the number of set bits in a given number. The set bits pertain to binary digits that have a value of 1. Consider edge cases where the number is zero or negative.", "pass@10": true, "passes": 10}
{"task_id": 391, "prompt": "Write a function to convert more than one list to nested dictionary. Make sure that the function manages situations where the lists differ in length politely using default values or placeholders for missing elements to handle such discrepancies gracefully. Consider optimizing for cases with very large lists to ensure the solution remains efficient.", "pass@10": true, "passes": 9}
{"task_id": 397, "prompt": "Write a function to determine the median of three numbers. The function should take three numbers as input. These numbers will be used to find the median. Ensure your function handles both positive and negative numbers correctly. Pay attention to validate that the input consists of numerical values only before processing.", "pass@10": true, "passes": 10}
{"task_id": 89, "prompt": "Write a function to determine the nearest smaller number that is less than n. Ensure your function efficiently manages edge cases where there might be no smaller number. Consider adding thorough tests to verify the function\u2019s correctness under various scenarios.", "pass@10": true, "passes": 8}
{"task_id": 414, "prompt": "Create a Python function to determine if any value in one sequence is present in another sequence. This function should check for the presence of any element from the first sequence in the second sequence. The existence of even a single matching element would determine the outcome. Ensure that the function is efficient in terms of time complexity.", "pass@10": true, "passes": 10}
{"task_id": 129, "prompt": "Create a function to determine if the matrix qualifies as a magic square.", "pass@10": true, "passes": 1}
{"task_id": 227, "prompt": "Write a function to determine the smallest of three numbers.", "pass@10": true, "passes": 10}
{"task_id": 782, "prompt": "Design a Python function that calculates the sum of all subarrays, focusing exclusively on subarrays that possess an odd count of elements. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "pass@10": true, "passes": 7}
{"task_id": 432, "prompt": "Write a function to find the median length of a trapezium. The median of a trapezium is the segment that connects the middle points of its non-parallel sides. It will be parallel to the two bases of the trapezium. Ensure your implementation efficiently handles trapeziums of varying dimensions.", "pass@10": true, "passes": 1}
{"task_id": 287, "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers. Ensure that your solution handles large values of n efficiently. Consider edge cases like n being zero or negative and ensure your code handles these gracefully.", "pass@10": true, "passes": 4}
{"task_id": 272, "prompt": "Write a function that takes in a list of tuples and returns a list that includes the rear element of each tuple. The function should go through the list and extract the last element from each tuple.", "pass@10": true, "passes": 9}
{"task_id": 641, "prompt": "Write a function to find the nth nonagonal number. It is important to consider potential edge cases. Also, handle invalid input gracefully.", "pass@10": true, "passes": 10}
{"task_id": 741, "prompt": "Write a python function to check whether all the characters are same or not by examining every character to determine if they match or not.", "pass@10": true, "passes": 10}
{"task_id": 284, "prompt": "Write a function that takes in a list and element. It should then examine every item in the list to confirm if they all match the specified element.", "pass@10": true, "passes": 10}
{"task_id": 79, "prompt": "Create a Python function that checks if the length of a word is odd.", "pass@10": true, "passes": 10}
{"task_id": 299, "prompt": "Write a function to calculate the maximum sum from the list of tuples. You need to ensure your function is capable of handling various types of data, which may be strings, numbers, or other lists within the tuples. Ensure the function goes through each component of the list precisely.", "pass@10": true, "passes": 2}
{"task_id": 456, "prompt": "Create a function that inverts each string in a provided list of string entries. Guarantee that your function deals with empty strings and outputs a list of reversed strings, maintaining the original sequence. Ensure your solution is efficient in terms of time complexity for large lists of strings.", "pass@10": true, "passes": 10}
{"task_id": 240, "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list. Ensure that the function maintains the order of elements from both lists. The function should handle cases where the first list is empty or has only one element.", "pass@10": true, "passes": 10}
{"task_id": 623, "prompt": "Write a function to compute the n-th power. Do this for each number in a list. Consider edge cases such as an empty list or when n is zero. Ensure the function handles both integer and floating-point numbers correctly.", "pass@10": true, "passes": 10}
{"task_id": 632, "prompt": "Write a python function to move all zeroes to the end of the given list. Ensure the relative sequence of the non-zero elements is preserved. The function should aim for optimal time complexity while maintaining a clear and concise implementation.", "pass@10": true, "passes": 10}
{"task_id": 7, "prompt": "Write a function to find all words which are at least 4 characters long in a string, ensuring that the function handles edge cases, such as punctuation and varying whitespace, correctly.", "pass@10": true, "passes": 9}
{"task_id": 442, "prompt": "Create a function to calculate the proportion of positive integers in a list of numbers. Ensure your function handles edge cases such as an empty list or lists with only negative numbers. Bear in mind the performance of your solution with larger lists to guarantee fast computations. Consider adding thorough unit tests to validate the function's performance across different input scenarios.", "pass@10": true, "passes": 9}
{"task_id": 731, "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h. Assume that the values of r and h are positive numbers. Consider using the formula \\( A = \\pi r l \\), where \\( l \\) is the slant height calculated as \\( \\sqrt{r^2 + h^2} \\).", "pass@10": true, "passes": 10}
{"task_id": 88, "prompt": "Write a function to get the frequency of all the elements in a list. The frequency count of each element should be computed and returned as a dictionary.", "pass@10": true, "passes": 10}
{"task_id": 772, "prompt": "Write a function to remove all the words with k length in the given string. Ensure your solution efficiently handles edge cases, such as strings with varying delimiters or punctuation marks, while maintaining the original sequence of the remaining words in the string.", "pass@10": true, "passes": 10}
{"task_id": 64, "prompt": "Write a function to arrange a list of tuples based on the second element of each tuple. Ensure that your solution handles both integer and floating-point numbers appropriately.", "pass@10": true, "passes": 7}
{"task_id": 738, "prompt": "Write a function to calculate the geometric sum of n-1. The geometric sum formula involves a series of terms with a constant ratio between successive terms. You need to evaluate this sum up to the specified number of terms, n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php", "pass@10": true, "passes": 1}
{"task_id": 572, "prompt": "Create a Python function to eliminate repeated numbers from several provided lists while efficiently handling lists with large numbers of elements. The function should return a new list containing unique numbers present in all the input lists while preserving their original order.", "pass@10": false, "passes": 0}
{"task_id": 405, "prompt": "Write a function to check whether an element exists within a tuple, and it should return a boolean indicating the presence or absence of the element. The function should be efficient and handle edge cases like empty tuples gracefully.", "pass@10": true, "passes": 10}
{"task_id": 566, "prompt": "Develop a function to compute the total of the digits in a non-negative integer.", "pass@10": true, "passes": 10}
{"task_id": 801, "prompt": "Write a python function to count the number of equal numbers from three given integers. Consider cases where the numbers might share identical values. These situations arise when there are repeated values among the numbers. In other words, identify these repeats when they occur. There may be scenarios where two or three numbers are the same. Also, consider cases where they may be completely distinct.", "pass@10": true, "passes": 10}
{"task_id": 242, "prompt": "Create a function to calculate the overall quantity of characters within a string.", "pass@10": true, "passes": 9}
{"task_id": 578, "prompt": "Create a function that merges 3 lists of equal length into one list that is continuous. The three lists should have exactly the same number of elements, meaning each list has the same length. Ensure that the function handles all edge cases, such as when the lists contain special types of values like None or nested lists.", "pass@10": true, "passes": 10}
{"task_id": 796, "prompt": "Write a function to calculate the total of all elements in the provided dictionary.", "pass@10": true, "passes": 10}
{"task_id": 11, "prompt": "Write a python function to eliminate the first appearance of a specified character from the string. You also need to remove the last occurrence of that character from the same string.", "pass@10": true, "passes": 10}
{"task_id": 562, "prompt": "Write a python function to find the length of the longest sublists. Consider edge cases where the input list might be empty and handle them appropriately.", "pass@10": true, "passes": 10}
{"task_id": 563, "prompt": "Create a function that retrieves values located within quotation marks from a text.", "pass@10": true, "passes": 10}
{"task_id": 583, "prompt": "Write a function that gives back the nth catalan number.", "pass@10": true, "passes": 10}
{"task_id": 809, "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple. You will evaluate every element from the second tuple. It should be compared to the corresponding element in the first tuple. Your function should return a boolean indicating whether this condition holds true for all pairs of elements.", "pass@10": true, "passes": 7}
{"task_id": 264, "prompt": "Create a function that computes the age of a dog in canine years. Presume that the initial pair of a dog's years are equivalent to 10.5 human years apiece, with every subsequent year corresponding to 4 human years.", "pass@10": true, "passes": 6}
{"task_id": 6, "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.", "pass@10": true, "passes": 6}
{"task_id": 764, "prompt": "Write a python function to count the quantity of digits that appear in a given string. This involves examining each character within the string to determine if it is a digit or not. Make sure to consider different possible edge cases, such as empty strings or strings without any digits.", "pass@10": true, "passes": 10}
{"task_id": 250, "prompt": "Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple. Ensure the function handles empty tuples appropriately.", "pass@10": true, "passes": 10}
{"task_id": 222, "prompt": "Create a function to check if each element in a tuple possesses the same type or not.", "pass@10": true, "passes": 10}
{"task_id": 726, "prompt": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}. Ensure that you handle any potential edge cases, such as an empty tuple or tuples with non-numeric elements, gracefully and that the function is optimized for performance with large tuples. Additionally, make sure that the function does not modify the input tuple in any way.", "pass@10": true, "passes": 9}
{"task_id": 127, "prompt": "Create a function that multiplies two integers. Ensure the function correctly processes integers whether they are positive or negative. Consider edge cases and strive for an effective solution.", "pass@10": true, "passes": 10}
{"task_id": 165, "prompt": "Write a function to count the number of characters in a string that happen at the identical position in the string as in the English alphabet (case insensitive). For example, the character 'A' is in the first position of the English alphabet. It should be counted if it appears as the first character in the string. Consider edge cases such as strings with special characters or numbers which should be ignored.", "pass@10": true, "passes": 9}
{"task_id": 635, "prompt": "Write a function to sort the given list, ensuring that the function can handle both numerical and string data types within the list. Your solution should allow for a custom sorting order by providing an optional comparison function.", "pass@10": true, "passes": 5}
{"task_id": 585, "prompt": "Write a function to find the n most expensive items in a given dataset. Ensure that your function accounts for scenarios where the dataset has fewer than n items by returning the entire sorted list in such cases. Consider edge cases such as datasets with items having the same price.", "pass@10": true, "passes": 9}
{"task_id": 84, "prompt": "Develop a function to identify the nth term in the Newman-Conway sequence. Ensure your solution is efficient and can handle large values of n.", "pass@10": true, "passes": 9}
{"task_id": 445, "prompt": "Create a function that accepts two tuples as inputs. Then proceed to multiply elements of these tuples together based on their corresponding indices.", "pass@10": true, "passes": 2}
{"task_id": 309, "prompt": "Create a Python function to determine which of two numbers is the largest.", "pass@10": true, "passes": 10}
{"task_id": 753, "prompt": "Write a function to find minimum k records from tuple list, in this case a verbatim copy of test cases https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/.", "pass@10": true, "passes": 10}
{"task_id": 766, "prompt": "Write a function to return a list. The list should contain all pairs of consecutive items in a given list.", "pass@10": true, "passes": 10}
{"task_id": 428, "prompt": "Write a function to sort the given array by using shell sort. Ensure your function handles both positive and negative integers efficiently. Pay attention to optimizing the gap sequence used for sorting to achieve better average-case performance.", "pass@10": true, "passes": 10}
{"task_id": 478, "prompt": "Create a function to eliminate lowercase substrings from a specified string. Ensure the function efficiently handles strings of varying lengths.", "pass@10": true, "passes": 5}
{"task_id": 269, "prompt": "Write a function to find the ascii value of a character. This function should take a single character as its input. It should then determine the ASCII value of that character.", "pass@10": true, "passes": 10}
{"task_id": 568, "prompt": "Write a function to create a list of N empty dictionaries. Ensure that your implementation makes efficient use of system resources. It should use memory effectively if N becomes very large.", "pass@10": true, "passes": 10}
{"task_id": 18, "prompt": "Write a function. The function needs to eliminate characters from the first string that appear in the second string.", "pass@10": true, "passes": 10}
{"task_id": 308, "prompt": "Write a function to find the specified number of largest products from two given lists. You can choose one factor from each list for the computation. To compute the product, you need to select one factor from each list.", "pass@10": true, "passes": 7}
{"task_id": 421, "prompt": "Write a function to concatenate each element of tuple. Use a delimiter to join the elements together.", "pass@10": true, "passes": 6}
{"task_id": 580, "prompt": "Write a function to remove uneven elements in the nested mixed tuple. Make sure to keep all even elements in the same order as in the original structure. The order must be maintained accurately in the resulting data structure. Assume that all numbers are integers for the purpose of determining evenness.", "pass@10": true, "passes": 2}
{"task_id": 274, "prompt": "Write a python function that accepts a positive integer n. The function should then find the sum of even index binomial coefficients. Consider edge cases and ensure the function handles large values of n efficiently.", "pass@10": true, "passes": 9}
{"task_id": 390, "prompt": "Write a function to apply a given format string. Each element in the list should be transformed using the format string. The format string needs to be applied to all of the elements in a list.", "pass@10": true, "passes": 10}
{"task_id": 608, "prompt": "Write a python function to find nth bell number. The Bell numbers are a sequence of numbers counting the ways a set can be partitioned into nonempty subsets; specifically, the nth Bell number is the number of ways to partition a set of n elements into non-empty subsets.", "pass@10": true, "passes": 7}
{"task_id": 788, "prompt": "Write a function to create a new tuple from the given string and list.", "pass@10": true, "passes": 9}
{"task_id": 170, "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices. Ensure that the function handles situations where the indices are beyond the list boundaries. Consider edge cases when the list is empty or the indices are equal.", "pass@10": true, "passes": 9}
{"task_id": 747, "prompt": "Write a function to determine the longest common subsequence for the given three string sequence. You need to identify and find the length of the subsequence that is common among all three strings. At the same time, you must ensure that this subsequence is the longest possible. Consider edge cases where the strings are of varying lengths, including possible empty strings. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "pass@10": true, "passes": 4}
{"task_id": 14, "prompt": "Create a Python function to calculate the volume of a triangular prism. Ensure that your function can handle various units of measurement and give output in cubic meters, including appropriate error handling for invalid inputs or unsupported units of measurement.", "pass@10": true, "passes": 10}
{"task_id": 8, "prompt": "Write a function to find squares of individual elements in a list. Ensure that the function handles both positive and negative integers correctly.", "pass@10": true, "passes": 10}
{"task_id": 100, "prompt": "Write a function to find the next smallest palindrome of a specified integer. The result should be returned as an integer.", "pass@10": true, "passes": 9}
{"task_id": 116, "prompt": "Write a function to convert a given tuple of positive integers into a single integer. Ensure the function handles cases where the tuple is empty by returning zero.", "pass@10": true, "passes": 10}
{"task_id": 266, "prompt": "Write a function to find the lateral surface area of a cube. You are given the side length of the cube as input.", "pass@10": true, "passes": 10}
{"task_id": 455, "prompt": "Create a function to determine if the specified month number has 31 days.", "pass@10": true, "passes": 8}
{"task_id": 625, "prompt": "Write a python function to interchange the first and last element in a given list. Ensure that the list contains at least two elements before attempting the swap.", "pass@10": true, "passes": 10}
{"task_id": 781, "prompt": "Write a python function to check whether the count of divisors is even. You need to determine if a number has an even number of divisors. This involves iterating over each possible divisor and checking its remainder when divided by the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php", "pass@10": true, "passes": 10}
{"task_id": 579, "prompt": "Write a function to find the dissimilar elements in the given two tuples. The function should compare the elements of the two tuples to identify which ones are not shared between them. It should return a list or set of elements that are unique to each tuple.", "pass@10": true, "passes": 2}
