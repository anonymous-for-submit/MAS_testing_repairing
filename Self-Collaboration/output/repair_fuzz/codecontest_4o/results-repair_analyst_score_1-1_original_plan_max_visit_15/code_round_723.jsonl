{"name": "1620_B. Triangles on a Rectangle", "description": "A rectangle with its opposite corners in (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\n\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "tags": ["geometry", "greedy", "math"], "difficulty": 8, "id": 1620, "sample_io": [{"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}], "test_list": [{"input": "1\n99 99\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["99\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["25\n70\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n78\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n77\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "1\n99 164\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["164\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n49\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 7\n2 2 4\n", "output": ["25\n42\n88\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["20\n70\n44\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n112\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 4\n", "output": ["25\n42\n210\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n49\n66\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["25\n42\n66\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n91\n42\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n77\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n18 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n126\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n63\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n72\n"]}, {"input": "3\n5 8\n2 1 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n70\n"]}, {"input": "1\n198 164\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["198\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n63\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 8\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n48\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 3 5 6\n25 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n75\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n70\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 1 10\n3 0 3 7\n2 2 4\n", "output": ["30\n42\n77\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 1\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n33\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n117\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n22 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n49\n132\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["45\n42\n66\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["45\n63\n66\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n182\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["32\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n17 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n51\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 8 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 7\n", "output": ["25\n70\n55\n"]}, {"input": "3\n4 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 4 4\n", "output": ["24\n117\n77\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["25\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n20 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 1 5 6\n11 5\n3 1 2 8\n3 2 1 10\n3 0 3 7\n2 2 4\n", "output": ["30\n50\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n56\n210\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 5 5\n20 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n84\n60\n"]}, {"input": "3\n2 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["24\n56\n210\n"]}, {"input": "1\n99 99\n2 1 2\n2 0 4\n2 5 6\n2 7 8\n", "output": ["396\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 7\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["40\n42\n77\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n20 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n60\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["75\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 13\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n156\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["24\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 9\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n54\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 16\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n60\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 6\n", "output": ["32\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 2\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n49\n33\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 1 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 7\n2 2 4\n", "output": ["25\n56\n88\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 11\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["50\n42\n77\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 2\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["24\n42\n77\n"]}, {"input": "3\n5 24\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 4\n", "output": ["48\n42\n210\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["25\n49\n66\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 7\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n33\n"]}, {"input": "3\n5 8\n2 1 5\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["32\n91\n42\n"]}, {"input": "3\n5 8\n2 1 4\n3 1 3 4\n3 0 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["30\n42\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["24\n70\n44\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n18 7\n2 5 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n54\n35\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n21 1\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n63\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 8\n2 2 4\n", "output": ["45\n42\n77\n"]}, {"input": "3\n10 8\n2 1 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 2 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["50\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 0\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 3\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n63\n33\n"]}, {"input": "3\n5 12\n2 2 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 16\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n84\n77\n"]}, {"input": "3\n5 8\n2 1 7\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["48\n42\n35\n"]}, {"input": "3\n5 9\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 3 5 6\n25 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["27\n42\n75\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 2\n3 7 5 6\n9 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n42\n90\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 10\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n60\n182\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 4\n2 4 4\n", "output": ["40\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 8\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 8 3\n20 5\n3 1 12 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["35\n84\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 16\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["20\n42\n75\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 6\n3 1 4 6\n2 4 5\n0 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["32\n42\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n42\n121\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 12\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n72\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 0 4\n", "output": ["20\n70\n77\n"]}, {"input": "3\n5 8\n2 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n78\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["25\n70\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 8\n2 4 2\n10 7\n2 0 4\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["35\n42\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 15\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n84\n72\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 4\n2 2 4\n", "output": ["24\n70\n55\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 4 9\n2 2 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n35\n77\n"]}, {"input": "3\n5 12\n2 2 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 4 16\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["45\n84\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 5\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 8 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 4 4\n2 2 4\n", "output": ["20\n70\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 0\n1 7\n2 3 9\n2 1 14\n3 1 3 5\n3 4 5 11\n16 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n112\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 10\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["30\n70\n182\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 2 7\n3 1 3 1\n3 4 5 5\n17 5\n3 1 6 8\n3 4 6 8\n3 1 3 3\n2 2 4\n", "output": ["25\n35\n35\n"]}, {"input": "3\n1 12\n2 1 6\n3 2 4 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 8\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 1\n", "output": ["60\n42\n112\n"]}, {"input": "3\n3 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 20\n2 2 3\n", "output": ["24\n56\n420\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 0 4 6\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 5 5\n20 5\n3 2 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n84\n60\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 0 6 8\n3 3 6 8\n3 2 4 4\n2 4 4\n", "output": ["40\n49\n80\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 8 3\n20 5\n3 1 12 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["75\n84\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 3 17\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 10 8\n3 1 3 4\n2 2 4\n", "output": ["75\n98\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n108\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n56\n33\n"]}, {"input": "3\n5 17\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 15\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["68\n84\n72\n"]}, {"input": "3\n9 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 4 9\n2 2 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["45\n35\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 9\n2 8 5\n10 7\n2 3 3\n2 1 11\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["40\n70\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 6 5 6\n11 6\n3 1 6 8\n3 3 6 8\n3 2 2 2\n2 2 4\n", "output": ["32\n42\n42\n"]}, {"input": "3\n5 8\n2 1 1\n3 1 3 4\n3 1 4 6\n2 4 0\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 7 8\n3 1 3 4\n2 2 7\n", "output": ["25\n63\n55\n"]}, {"input": "1\n53 164\n2 1 2\n2 0 4\n2 5 6\n2 9 8\n", "output": ["656\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n1 8\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 3 5\n3 0 3 3\n2 2 4\n", "output": ["24\n48\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 0 6\n2 4 5\n18 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n54\n121\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 2 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n108\n30\n"]}, {"input": "3\n5 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n13 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n56\n39\n"]}, {"input": "3\n5 17\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 28\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["68\n175\n72\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 9\n2 8 5\n10 7\n2 3 3\n2 1 15\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["40\n98\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 0 3 4\n3 1 4 3\n2 4 7\n10 7\n2 3 4\n2 1 7\n3 1 0 4\n3 1 5 6\n11 5\n3 1 6 8\n3 3 2 8\n3 0 3 3\n2 2 5\n", "output": ["32\n50\n35\n"]}, {"input": "3\n1 12\n2 1 6\n3 2 4 4\n3 1 4 7\n2 4 5\n10 7\n2 3 1\n2 1 7\n3 1 3 4\n3 7 5 6\n16 8\n3 1 6 8\n3 3 11 8\n3 0 3 13\n2 2 1\n", "output": ["60\n42\n208\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n19 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 6 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 7\n2 4 4\n", "output": ["25\n76\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 0 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 2 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 14\n3 4 6 1\n3 0 3 3\n2 2 4\n", "output": ["32\n42\n65\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 0\n3 1 4 6\n2 4 1\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n8 4\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 0 4\n", "output": ["25\n42\n32\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 0 6\n2 4 5\n18 7\n2 3 15\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n84\n121\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 7\n3 4 5 6\n11 5\n3 1 6 0\n3 3 10 8\n3 2 5 4\n2 2 6\n", "output": ["32\n60\n44\n"]}, {"input": "3\n10 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n13 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["50\n56\n39\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 10\n3 0 3 8\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 5\n3 1 3 7\n2 2 4\n", "output": ["25\n80\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 11\n2 8 5\n10 7\n2 3 3\n2 1 15\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["50\n98\n35\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n19 7\n2 3 10\n2 1 7\n3 -1 3 4\n3 4 6 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 7\n2 4 4\n", "output": ["25\n95\n70\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n20 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 0 6 8\n3 3 6 8\n3 2 4 4\n2 4 1\n", "output": ["40\n80\n80\n"]}, {"input": "1\n53 202\n2 1 2\n2 0 4\n2 3 6\n2 9 8\n", "output": ["808\n"]}, {"input": "3\n5 4\n2 1 4\n3 0 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 2 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 14\n3 4 6 1\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n65\n"]}, {"input": "3\n5 13\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n4 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 2 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["39\n108\n30\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 1 4\n3 7 5 6\n16 6\n3 2 6 0\n3 3 11 8\n3 0 3 6\n2 2 1\n", "output": ["36\n42\n96\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 10\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 8\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n77\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 0\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 3\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 3 5 6\n14 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 8\n2 1 1\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 1 10\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n78\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 0 4\n3 4 5 6\n11 5\n3 1 6 12\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 6\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n2 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 6 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 8 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 3\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 0 6 8\n3 0 3 4\n2 2 0\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 5\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["20\n70\n44\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 3\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n112\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n42\n210\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n12 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 6\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 0 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 11 8\n3 1 6 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 0 4\n3 1 8 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 5\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n77\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 6 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n18 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n126\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 0 2\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n63\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["32\n42\n70\n"]}], "task_id": "codecontest/148", "repair_prompt": ["A rectangle with its opposing corners situated at (0, 0) and (w, h) and edges aligned with the axes is illustrated on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner, and none of the listed points are located at the rectangle's corners with at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "A rectangle with its opposing corners situated at (0, 0) and (w, h) and edges aligned with the axes is illustrated on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. However, none of the listed points are located at the rectangle's corners with at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "A rectangle with its opposing corners situated at (0, 0) and (w, h) and edges aligned with the axes is illustrated on a plane. You are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner, with at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum distance on each side\n        max_horizontal_bottom = horizontal_bottom[-1] - horizontal_bottom[0]\n        max_horizontal_top = horizontal_top[-1] - horizontal_top[0]\n        max_vertical_left = vertical_left[-1] - vertical_left[0]\n        max_vertical_right = vertical_right[-1] - vertical_right[0]\n\n        # Calculate maximum doubled area using the maximum distances\n        max_area = max(\n            max_horizontal_bottom * h,\n            max_horizontal_top * h,\n            max_vertical_left * w,\n            max_vertical_right * w\n        )\n        \n        results.append(max_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k1 = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        k3 = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return test_cases\n\ndef main():\n    test_cases = parse_input()\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, bottom_points, top_points, left_points, right_points = case\n        \n        # Calculate maximum distance on horizontal sides\n        max_bottom_distance = bottom_points[-1] - bottom_points[0]\n        max_top_distance = top_points[-1] - top_points[0]\n        \n        # Calculate maximum distance on vertical sides\n        max_left_distance = left_points[-1] - left_points[0]\n        max_right_distance = right_points[-1] - right_points[0]\n        \n        # Calculate doubled area for horizontal sides\n        max_horizontal_area = max(max_bottom_distance * h, max_top_distance * h)\n        \n        # Calculate doubled area for vertical sides\n        max_vertical_area = max(max_left_distance * w, max_right_distance * w)\n        \n        # The maximum doubled area for the test case\n        max_area = max(max_horizontal_area, max_vertical_area)\n        \n        results.append(max_area)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        bottom_points = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        top_points = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        left_points = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        right_points = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, bottom_points, top_points, left_points, right_points))\n    \n    results = max_doubled_area(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Horizontal sides\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Vertical sides\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area\n        max_area = 0\n        \n        # Check horizontal sides\n        max_area = max(max_area, (x1[-1] - x1[0]) * h)\n        max_area = max(max_area, (x2[-1] - x2[0]) * h)\n        \n        # Check vertical sides\n        max_area = max(max_area, (y1[-1] - y1[0]) * w)\n        max_area = max(max_area, (y2[-1] - y2[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read horizontal sides\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read vertical sides\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum base lengths\n        max_base1 = x1[-1] - x1[0]  # Bottom side\n        max_base2 = x2[-1] - x2[0]  # Top side\n        max_base3 = y1[-1] - y1[0]  # Left side\n        max_base4 = y2[-1] - y2[0]  # Right side\n        \n        # Calculate maximum doubled area\n        max_doubled_area = 0\n        max_doubled_area = max(max_doubled_area, max_base1 * h)\n        max_doubled_area = max(max_doubled_area, max_base2 * h)\n        max_doubled_area = max(max_doubled_area, max_base3 * w)\n        max_doubled_area = max(max_doubled_area, max_base4 * w)\n        \n        results.append(max_doubled_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read horizontal sides\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read vertical sides\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area\n        max_area = 0\n        \n        # Check horizontal sides\n        max_area = max(max_area, (x1[-1] - x1[0]) * h)\n        max_area = max(max_area, (x2[-1] - x2[0]) * h)\n        \n        # Check vertical sides\n        max_area = max(max_area, (y1[-1] - y1[0]) * w)\n        max_area = max(max_area, (y2[-1] - y2[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Bottom side (y = 0)\n        k_bottom = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        # Top side (y = h)\n        k_top = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        # Left side (x = 0)\n        k_left = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        # Right side (x = w)\n        k_right = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        # Calculate maximum distances\n        max_dist_bottom = x_bottom[-1] - x_bottom[0]\n        max_dist_top = x_top[-1] - x_top[0]\n        max_dist_left = y_left[-1] - y_left[0]\n        max_dist_right = y_right[-1] - y_right[0]\n        \n        # Calculate maximum doubled area\n        max_area = max(max_dist_bottom * h, max_dist_top * h, max_dist_left * w, max_dist_right * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right = case\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (horizontal_bottom[-1] - horizontal_bottom[0]) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (horizontal_top[-1] - horizontal_top[0]) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (vertical_left[-1] - vertical_left[0]) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (vertical_right[-1] - vertical_right[0]) * w)\n        \n        results.append(max_area)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nindex = 0\nt = int(data[index])\nindex += 1\n\ntest_cases = []\nfor _ in range(t):\n    w = int(data[index])\n    h = int(data[index + 1])\n    index += 2\n    \n    k1 = int(data[index])\n    horizontal_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n    index += 1 + k1\n    \n    k2 = int(data[index])\n    horizontal_top = list(map(int, data[index + 1:index + 1 + k2]))\n    index += 1 + k2\n    \n    k3 = int(data[index])\n    vertical_left = list(map(int, data[index + 1:index + 1 + k3]))\n    index += 1 + k3\n    \n    k4 = int(data[index])\n    vertical_right = list(map(int, data[index + 1:index + 1 + k4]))\n    index += 1 + k4\n    \n    test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n\nresults = max_doubled_area(t, test_cases)\nfor result in results:\n    print(result)\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area\n        max_area = 0\n        \n        # Horizontal sides\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Vertical sides\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_0, horizontal_h, vertical_0, vertical_w = case\n        \n        # Calculate maximum distance on each side\n        max_horizontal_0 = horizontal_0[-1] - horizontal_0[0]\n        max_horizontal_h = horizontal_h[-1] - horizontal_h[0]\n        max_vertical_0 = vertical_0[-1] - vertical_0[0]\n        max_vertical_w = vertical_w[-1] - vertical_w[0]\n        \n        # Calculate maximum doubled area for each side\n        max_area_horizontal_0 = max_horizontal_0 * h\n        max_area_horizontal_h = max_horizontal_h * h\n        max_area_vertical_0 = max_vertical_0 * w\n        max_area_vertical_w = max_vertical_w * w\n        \n        # Find the maximum doubled area\n        max_doubled_area = max(max_area_horizontal_0, max_area_horizontal_h, max_area_vertical_0, max_area_vertical_w)\n        \n        results.append(max_doubled_area)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nindex = 0\nt = int(data[index])\nindex += 1\n\ntest_cases = []\nfor _ in range(t):\n    w = int(data[index])\n    h = int(data[index + 1])\n    index += 2\n    \n    k1 = int(data[index])\n    horizontal_0 = list(map(int, data[index + 1:index + 1 + k1]))\n    index += 1 + k1\n    \n    k2 = int(data[index])\n    horizontal_h = list(map(int, data[index + 1:index + 1 + k2]))\n    index += 1 + k2\n    \n    k3 = int(data[index])\n    vertical_0 = list(map(int, data[index + 1:index + 1 + k3]))\n    index += 1 + k3\n    \n    k4 = int(data[index])\n    vertical_w = list(map(int, data[index + 1:index + 1 + k4]))\n    index += 1 + k4\n    \n    test_cases.append((w, h, horizontal_0, horizontal_h, vertical_0, vertical_w))\n\nresults = max_doubled_area(t, test_cases)\nfor result in results:\n    print(result)\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side of the rectangle that are farthest apart.\",\n      \"output\": \"The maximum distance between two points on the same side for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from an adjacent side.\",\n      \"output\": \"The maximum doubled area of the triangle for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"For each test case, iterate over each side of the rectangle and find the two points that are farthest apart.\",\n    \"Calculate the maximum possible area of a triangle by considering combinations of two points from the same side and one point from an adjacent side.\",\n    \"For each test case, determine the maximum doubled area of the triangle and store the result.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle and then doubling it. This is because the doubled area of any triangle formed by lattice points is always an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that a triangle can be formed by selecting points from different sides.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n    The steps to find the two farthest points on the same side and calculate the maximum area should be considered simultaneously. Specifically, for each side, the maximum distance between two points can be calculated in one step, and then the area can be calculated using these distances.\n\n# [edge case]\n    1. Test case with minimum dimensions and points:\n       Input: \n       ```\n       1\n       3 3\n       2 1 2\n       2 1 2\n       2 1 2\n       2 1 2\n       ```\n       Expected Output: 4\n       Explanation: The maximum triangle is formed by points (1, 0), (2, 0), and (3, 1) with a doubled area of 4.\n\n    2. Test case with points only on one side:\n       Input:\n       ```\n       1\n       5 5\n       2 1 4\n       2 1 4\n       2 1 4\n       2 1 4\n       ```\n       Expected Output: 15\n       Explanation: The maximum triangle is formed by points (1, 0), (4, 0), and (5, 4) with a doubled area of 15.\n\n    3. Test case with maximum possible points:\n       Input:\n       ```\n       1\n       1000000 1000000\n       2 1 999999\n       2 1 999999\n       2 1 999999\n       2 1 999999\n       ```\n      ", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side of the rectangle that are farthest apart.\",\n      \"output\": \"The maximum distance between two points on the same side for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from an adjacent side.\",\n      \"output\": \"The maximum doubled area of the triangle for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"For each test case, iterate over each side of the rectangle and find the two points that are farthest apart.\",\n    \"Calculate the maximum possible area of a triangle by considering combinations of two points from the same side and one point from an adjacent side.\",\n    \"For each test case, determine the maximum doubled area of the triangle and store the result.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle and then doubling it. This is because the doubled area of any triangle formed by lattice points is always an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that a triangle can be formed by selecting points from different sides.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n    The steps to find the two farthest points on the same side and calculate the maximum area should be considered simultaneously. Specifically, for each side, the maximum distance between two points can be calculated in one step, and then the area can be calculated by considering these maximum distances with points from adjacent sides.\n\n# [edge case]\n    1. Test case with minimum dimensions and points:\n       Input: 1 3 3 2 1 2 2 1 2 2 1 2 2 1 2\n       Expected Output: 4\n       Explanation: The smallest possible rectangle with minimum points on each side, forming a triangle with maximum area.\n\n    2. Test case with all points on one side:\n       Input: 1 5 5 5 1 2 3 4 5 2 1 2 2 1 2\n       Expected Output: 0\n       Explanation: All points on one side cannot form a triangle with points from another side.\n\n    3. Test case with maximum distance between points on one side:\n       Input: 1 10 10 2 1 9 2 1 9 2 1 9 2 1 9\n       Expected Output: 80\n       Explanation: The maximum distance between points on one side is used to form the largest possible triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of finding the maximum distance between points on the same side and calculating the area using these distances will naturally handle these cases.\n\nNO", "Round_0": {"code": "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum distance on each side\n        max_horizontal_bottom = horizontal_bottom[-1] - horizontal_bottom[0]\n        max_horizontal_top = horizontal_top[-1] - horizontal_top[0]\n        max_vertical_left = vertical_left[-1] - vertical_left[0]\n        max_vertical_right = vertical_right[-1] - vertical_right[0]\n\n        # Calculate maximum doubled area using the maximum distances\n        max_area = max(\n            max_horizontal_bottom * h,\n            max_horizontal_top * h,\n            max_vertical_left * w,\n            max_vertical_right * w\n        )\n        \n        results.append(max_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k1 = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        k3 = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return test_cases\n\ndef main():\n    test_cases = parse_input()\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: parse_input() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum distance on each side\n        max_horizontal_bottom = horizontal_bottom[-1] - horizontal_bottom[0]\n        max_horizontal_top = horizontal_top[-1] - horizontal_top[0]\n        max_vertical_left = vertical_left[-1] - vertical_left[0]\n        max_vertical_right = vertical_right[-1] - vertical_right[0]\n\n        # Calculate maximum doubled area using the maximum distances\n        max_area = max(\n            max_horizontal_bottom * h,\n            max_horizontal_top * h,\n            max_vertical_left * w,\n            max_vertical_right * w\n        )\n        \n        results.append(max_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k1 = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        k3 = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return test_cases\n\ndef main():\n    test_cases = parse_input()\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the dimensions w and h of the rectangle.\",\n        \"Read the number of points and their coordinates for the bottom side (y=0).\",\n        \"Read the number of points and their coordinates for the top side (y=h).\",\n        \"Read the number of points and their coordinates for the left side (x=0).\",\n        \"Read the number of points and their coordinates for the right side (x=w).\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum possible doubled area of a triangle for each test case.\",\n      \"steps\": [\n        \"For each horizontal side (bottom and top), calculate the maximum distance between any two points and multiply by the height of the rectangle.\",\n        \"For each vertical side (left and right), calculate the maximum distance between any two points and multiply by the width of the rectangle.\",\n        \"The maximum doubled area for the test case is the maximum value obtained from the above calculations.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, print the maximum doubled area calculated.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract all necessary data for each test case.\",\n    \"For each test case, compute the maximum possible doubled area of a triangle by considering the maximum distance between points on the same side and multiplying by the perpendicular dimension.\",\n    \"Output the computed maximum doubled area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a four-sided polygon with opposite sides equal and all angles right angles. In this problem, the rectangle is defined by its opposing corners at (0, 0) and (w, h).\n\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of the rectangle but not at the corners.\n\n    'doubled area of a triangle'\n    Explanation: The area of a triangle formed by three points is calculated, and then this area is doubled. This is a common technique in computational geometry to avoid dealing with fractions.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points. In code, this ensures that there are always enough points to form a triangle.\n\n    'maximum possible'\n    Explanation: This indicates that we need to find the largest possible value for the doubled area of the triangle. In code, this involves comparing calculated areas and keeping track of the largest one.\n\n# [degree adverb]\n    'maximum'\n    Explanation: Refers to the largest possible value. In this context, it means finding the largest doubled area of a triangle that can be formed by the given points.\n\n# [code logic]\n    The steps in the plan for calculating the maximum possible doubled area of a triangle should be implemented simultaneously for each test case. Specifically, the calculations for the maximum distance on horizontal and vertical sides can be done in parallel, as they are independent of each other. This can be implemented using separate calculations for horizontal and vertical sides, and then taking the maximum of these results.\n\n# [edge case]\n    1. w = 3, h = 3, points on bottom side = [1, 2], points on top side = [1, 2], points on left side = [1, 2], points on right side = [1, 2]\n       Expected output: 6\n       Explanation: The largest triangle can be formed by points (0, 1), (0, 2), and (3, 1) with a doubled area of 6.\n\n    2. w = 4, h = 4, points on bottom side = [1, 3], points on top side = [1, 3], points on left side = [1, 3], points on right side", "Round_0": {"code": "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, bottom_points, top_points, left_points, right_points = case\n        \n        # Calculate maximum distance on horizontal sides\n        max_bottom_distance = bottom_points[-1] - bottom_points[0]\n        max_top_distance = top_points[-1] - top_points[0]\n        \n        # Calculate maximum distance on vertical sides\n        max_left_distance = left_points[-1] - left_points[0]\n        max_right_distance = right_points[-1] - right_points[0]\n        \n        # Calculate doubled area for horizontal sides\n        max_horizontal_area = max(max_bottom_distance * h, max_top_distance * h)\n        \n        # Calculate doubled area for vertical sides\n        max_vertical_area = max(max_left_distance * w, max_right_distance * w)\n        \n        # The maximum doubled area for the test case\n        max_area = max(max_horizontal_area, max_vertical_area)\n        \n        results.append(max_area)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        bottom_points = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        top_points = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        left_points = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        right_points = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, bottom_points, top_points, left_points, right_points))\n    \n    results = max_doubled_area(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side of the rectangle that are farthest apart.\",\n      \"output\": \"The maximum distance between two points on the same side for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from an adjacent side.\",\n      \"output\": \"The maximum area of such a triangle for each test case.\"\n    },\n    {\n      \"description\": \"Double the maximum area calculated in the previous step to meet the requirement of outputting the doubled area.\",\n      \"output\": \"The doubled maximum area for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"For each test case, iterate over each side of the rectangle and find the two points that are farthest apart.\",\n    \"Calculate the maximum possible area of a triangle by considering combinations of two points from the same side and one point from an adjacent side.\",\n    \"Double the calculated maximum area for each test case.\",\n    \"Output the doubled maximum area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle': A four-sided polygon with opposite sides equal and parallel, and all angles are right angles.\n    'lattice points': Points with integer coordinates.\n    'triangle': A polygon with three edges and three vertices.\n    Explanation: The requirement involves finding a triangle formed by lattice points on the sides of a rectangle, with specific conditions on the selection of points.\n\n# [phrase showing quantity relationship]\n    'maximum possible': Refers to the largest area that can be achieved by the triangle formed under the given conditions.\n    Explanation: The task is to find the triangle with the largest area possible given the constraints.\n\n# [degree adverb]\n    'maximum': Refers to the largest area achievable for the triangle.\n    Explanation: The requirement is to find the triangle with the largest area possible under the given conditions.\n\n# [code logic]\n    The steps to find the two points farthest apart on the same side and calculate the area should be considered simultaneously.\n    Explanation: To maximize the area, the two points on the same side should be the farthest apart, and the third point should be chosen to maximize the height or base of the triangle.\n\n# [edge case]\n    Case 1: When all points on one side are equidistant, e.g., (0, 1), (0, 2), (0, 3) and (5, 1), (5, 2), (5, 3)\n    Expected output: The doubled area will be calculated based on the farthest points on one side and the farthest point on the adjacent side.\n    Explanation: The farthest points on one side will form the base, and the farthest point on the adjacent side will form the height.\n\n    Case 2: When the rectangle is a square, e.g., w = h = 5, and points are evenly distributed.\n    Expected output: The doubled area will be calculated similarly, considering the symmetry.\n    Explanation: The symmetry of the square might lead to multiple triangles with the same maximum area.\n\n    Case 3: When there are only two points on each side, e.g., (0, 1), (0, 4) and (5, 1), (5, 4)\n    Expected output: The doubled area will be calculated based on these points.\n    Explanation: The limited number of points restricts the choice, but the farthest points will still be used to maximize the area.\n\n# [extra code for edge", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Horizontal sides\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Vertical sides\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area\n        max_area = 0\n        \n        # Check horizontal sides\n        max_area = max(max_area, (x1[-1] - x1[0]) * h)\n        max_area = max(max_area, (x2[-1] - x2[0]) * h)\n        \n        # Check vertical sides\n        max_area = max(max_area, (y1[-1] - y1[0]) * w)\n        max_area = max(max_area, (y2[-1] - y2[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 133)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Horizontal sides\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Vertical sides\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area\n        max_area = 0\n        \n        # Check horizontal sides\n        max_area = max(max_area, (x1[-1] - x1[0]) * h)\n        max_area = max(max_area, (x2[-1] - x2[0]) * h)\n        \n        # Check vertical sides\n        max_area = max(max_area, (y1[-1] - y1[0]) * w)\n        max_area = max(max_area, (y2[-1] - y2[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers w and h representing the rectangle's width and height.\",\n        \"For each test case, read the lattice points on the two horizontal sides and two vertical sides.\"\n      ]\n    },\n    {\n      \"description\": \"Identify the two points on the same side that can form the largest base of a triangle.\",\n      \"steps\": [\n        \"For each side of the rectangle, calculate the maximum possible base length by finding the difference between the largest and smallest x or y coordinates.\",\n        \"Store the maximum base length for each side.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle using the identified base and a point from another side.\",\n      \"steps\": [\n        \"For each test case, calculate the area of the triangle using the formula: area = 0.5 * base * height.\",\n        \"Double the area to meet the requirement of printing the doubled area.\",\n        \"Compare areas from different combinations of sides to find the maximum doubled area.\"\n      ]\n    },\n    {\n      \"description\": \"Output the maximum doubled area for each test case.\",\n      \"steps\": [\n        \"For each test case, print the maximum doubled area calculated.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input data to extract necessary information for each test case.\",\n    \"For each test case, determine the maximum base length possible on each side of the rectangle.\",\n    \"Calculate the maximum possible area of a triangle using the identified base and a point from another side.\",\n    \"Output the maximum doubled area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle and then doubling it. This is because the area of any triangle formed by lattice points is always an integer when doubled.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that a base can always be formed on any side.\n\n    'maximum possible'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [degree adverb]\n    'maximum'\n    Explanation: The goal is to find the largest area of a triangle that can be formed by the given points. This involves selecting the longest possible base and the greatest possible height.\n\n# [code logic]\n    The steps to calculate the maximum base length and the maximum area should be considered simultaneously for efficiency. Specifically, calculating the base length and then immediately using it to compute the area for each side can be done in a single loop over the sides.\n\n# [edge case]\n    1. Test case with minimum dimensions and points:\n       Input: \n       ```\n       1\n       3 3\n       2 1 2\n       2 1 2\n       2 1 2\n       2 1 2\n       ```\n       Expected Output: 4\n       Explanation: The largest triangle is formed by points (1, 0), (2, 0), and (0, 2) with a doubled area of 4.\n\n    2. Test case with points only on one side:\n       Input:\n       ```\n       1\n       5 5\n       2 1 4\n       2 1 4\n       2 1 4\n       2 1 4\n       ```\n       Expected Output: 15\n       Explanation: The largest triangle is formed by points (1, 0), (4, 0), and (0, 4) with a doubled area of 15.\n\n    3. Test case with maximum possible dimensions:\n       Input:\n       ```\n       1\n       1000000 1000000\n       2 1", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read horizontal sides\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read vertical sides\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum base lengths\n        max_base1 = x1[-1] - x1[0]  # Bottom side\n        max_base2 = x2[-1] - x2[0]  # Top side\n        max_base3 = y1[-1] - y1[0]  # Left side\n        max_base4 = y2[-1] - y2[0]  # Right side\n        \n        # Calculate maximum doubled area\n        max_doubled_area = 0\n        max_doubled_area = max(max_doubled_area, max_base1 * h)\n        max_doubled_area = max(max_doubled_area, max_base2 * h)\n        max_doubled_area = max(max_doubled_area, max_base3 * w)\n        max_doubled_area = max(max_doubled_area, max_base4 * w)\n        \n        results.append(max_doubled_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 139)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read horizontal sides\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read vertical sides\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum base lengths\n        max_base1 = x1[-1] - x1[0]  # Bottom side\n        max_base2 = x2[-1] - x2[0]  # Top side\n        max_base3 = y1[-1] - y1[0]  # Left side\n        max_base4 = y2[-1] - y2[0]  # Right side\n        \n        # Calculate maximum doubled area\n        max_doubled_area = 0\n        max_doubled_area = max(max_doubled_area, max_base1 * h)\n        max_doubled_area = max(max_doubled_area, max_base2 * h)\n        max_doubled_area = max(max_doubled_area, max_base3 * w)\n        max_doubled_area = max(max_doubled_area, max_base4 * w)\n        \n        results.append(max_doubled_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, rectangle dimensions, and lattice points for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the dimensions of the rectangle (w, h).\",\n        \"Read the lattice points on the two horizontal sides.\",\n        \"Read the lattice points on the two vertical sides.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum possible doubled area of a triangle for each test case.\",\n      \"steps\": [\n        \"For each test case, identify pairs of points on the same side of the rectangle.\",\n        \"Calculate the area of triangles formed by these pairs and a point from another side.\",\n        \"Determine the maximum area among all possible triangles.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, print the maximum doubled area calculated.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a list to store the results for each test case.\",\n    \"Iterate over each test case and perform the following:\",\n    \"Parse the input to extract rectangle dimensions and lattice points.\",\n    \"For each side of the rectangle, find the pair of points that maximizes the distance between them.\",\n    \"Calculate the area of triangles formed by these pairs and a point from another side.\",\n    \"Store the maximum doubled area in the results list.\",\n    \"After processing all test cases, print the results.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle', 'lattice points', 'triangle', 'doubled area'\n    Explanation: \n    - 'rectangle': A four-sided polygon with opposite sides equal and angles of 90 degrees.\n    - 'lattice points': Points with integer coordinates that lie on the sides of the rectangle.\n    - 'triangle': A polygon with three edges and three vertices.\n    - 'doubled area': The area of the triangle multiplied by two, which is always an integer for lattice points.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side': Each side of the rectangle has a minimum of two points.\n    'maximum possible': We need to find the largest possible area of the triangle.\n    Implementation: Use max function to find the maximum area.\n\n# [degree adverb] \n    'maximum': Refers to the largest possible area of the triangle.\n    Implementation: Use a variable to track the maximum area found during calculations.\n\n# [code logic]\n    The steps to calculate the maximum possible doubled area of a triangle should be implemented simultaneously:\n    - Identify pairs of points on the same side of the rectangle.\n    - Calculate the area of triangles formed by these pairs and a point from another side.\n    - Determine the maximum area among all possible triangles.\n    This can be done in a single loop iterating over the sides and calculating areas.\n\n# [edge case] \n    Edge Case 1: Minimum rectangle size with minimum points\n    Input: 3 3\n           2 1 2\n           2 1 2\n           2 1 2\n           2 1 2\n    Expected Output: 6\n    Explanation: The largest triangle is formed by points (0, 1), (0, 2), and (3, 2).\n\n    Edge Case 2: All points on one side\n    Input: 5 5\n           5 1 2 3 4\n           2 1 2\n           2 1 2\n           2 1 2\n    Expected Output: 0\n    Explanation: No valid triangle can be formed as all points are on one side.\n\n    Edge Case 3: Maximum distance on one side\n    Input: 10 10\n           2 1 9\n           2 1 9\n           2 1 9\n           2 1 9", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read horizontal sides\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read vertical sides\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area\n        max_area = 0\n        \n        # Check horizontal sides\n        max_area = max(max_area, (x1[-1] - x1[0]) * h)\n        max_area = max(max_area, (x2[-1] - x2[0]) * h)\n        \n        # Check vertical sides\n        max_area = max(max_area, (y1[-1] - y1[0]) * w)\n        max_area = max(max_area, (y2[-1] - y2[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the rectangle dimensions and the lattice points on each side.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the rectangle dimensions w and h.\",\n        \"Read the number of points and their coordinates for the bottom side (y=0).\",\n        \"Read the number of points and their coordinates for the top side (y=h).\",\n        \"Read the number of points and their coordinates for the left side (x=0).\",\n        \"Read the number of points and their coordinates for the right side (x=w).\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum possible doubled area of a triangle for each test case.\",\n      \"steps\": [\n        \"For each horizontal side (bottom and top), calculate the maximum distance between any two points on that side.\",\n        \"For each vertical side (left and right), calculate the maximum distance between any two points on that side.\",\n        \"For each test case, determine the maximum doubled area of a triangle by considering the maximum horizontal distance multiplied by the height of the rectangle and the maximum vertical distance multiplied by the width of the rectangle.\",\n        \"Select the maximum value from the above calculations as the result for the test case.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, print the maximum doubled area of the triangle.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, calculate the maximum possible doubled area of a triangle by considering the maximum distances on each side of the rectangle.\",\n    \"Output the results for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle with opposing corners at (0, 0) and (w, h)'\n    Explanation: This defines a rectangle aligned with the coordinate axes, with one corner at the origin and the opposite corner at (w, h).\n\n    'lattice points on a side of a rectangle'\n    Explanation: These are points with integer coordinates that lie on the sides of the rectangle but not at the corners.\n\n    'doubled area of a triangle'\n    Explanation: The area of a triangle formed by lattice points is doubled to ensure it is an integer, as lattice points can only form triangles with integer or half-integer areas.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: Each side of the rectangle must have a minimum of two lattice points. This ensures that there are enough points to form a triangle with the required properties.\n\n    'maximum possible'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [degree adverb]\n    'maximum'\n    Explanation: Refers to the largest possible area of a triangle that can be formed by the given points. In code, this involves finding the maximum value from calculated areas.\n\n# [code logic]\n    The steps for calculating the maximum possible doubled area of a triangle should be considered simultaneously:\n    - Calculate the maximum distance between any two points on each horizontal side.\n    - Calculate the maximum distance between any two points on each vertical side.\n    - Determine the maximum doubled area by considering these distances with the rectangle's dimensions.\n    This can be implemented in a single function that processes each test case and computes the required maximum area.\n\n# [edge case]\n    1. A rectangle with minimum dimensions (w=3, h=3) and exactly two points on each side.\n       Explanation: This tests the lower bounds of the input constraints.\n       Expected output: The doubled area will be determined by the maximum possible triangle that can be formed, which might be small due to limited points.\n       \n    2. A rectangle with maximum dimensions (w=10^6, h=10^6) and points distributed such that the maximum distance is at the extreme ends.\n       Explanation: This tests the upper bounds of the input constraints.\n       Expected output: The doubled area will be large, as the maximum distance between points will be close to the rectangle's dimensions.\n\n    3. A rectangle where all points on one side are clustered", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Bottom side (y = 0)\n        k_bottom = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        # Top side (y = h)\n        k_top = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        # Left side (x = 0)\n        k_left = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        # Right side (x = w)\n        k_right = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        # Calculate maximum distances\n        max_dist_bottom = x_bottom[-1] - x_bottom[0]\n        max_dist_top = x_top[-1] - x_top[0]\n        max_dist_left = y_left[-1] - y_left[0]\n        max_dist_right = y_right[-1] - y_right[0]\n        \n        # Calculate maximum doubled area\n        max_area = max(max_dist_bottom * h, max_dist_top * h, max_dist_left * w, max_dist_right * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 91)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Bottom side (y = 0)\n        k_bottom = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        # Top side (y = h)\n        k_top = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        # Left side (x = 0)\n        k_left = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        # Right side (x = w)\n        k_right = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        # Calculate maximum distances\n        max_dist_bottom = x_bottom[-1] - x_bottom[0]\n        max_dist_top = x_top[-1] - x_top[0]\n        max_dist_left = y_left[-1] - y_left[0]\n        max_dist_right = y_right[-1] - y_right[0]\n        \n        # Calculate maximum doubled area\n        max_area = max(max_dist_bottom * h, max_dist_top * h, max_dist_left * w, max_dist_right * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, rectangle dimensions, and the list of lattice points for each test case.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers w and h representing the rectangle's dimensions.\",\n        \"For each side of the rectangle, read the number of points k and the list of coordinates.\"\n      ]\n    },\n    {\n      \"description\": \"Identify potential triangles that can be formed by selecting three points such that two points are on the same side.\",\n      \"steps\": [\n        \"For each test case, iterate over each side of the rectangle.\",\n        \"Select two points from the current side and one point from another side to form a triangle.\",\n        \"Calculate the area of the triangle formed by these points.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum doubled area of the triangle for each test case.\",\n      \"steps\": [\n        \"For each triangle formed, calculate the doubled area using the formula for the area of a triangle given its vertices.\",\n        \"Track the maximum doubled area encountered for each test case.\"\n      ]\n    },\n    {\n      \"description\": \"Output the maximum doubled area for each test case.\",\n      \"steps\": [\n        \"For each test case, print the maximum doubled area calculated.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data for each test case.\",\n    \"For each test case, iterate over each side of the rectangle to form potential triangles.\",\n    \"Calculate the doubled area for each triangle and track the maximum value.\",\n    \"Output the maximum doubled area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle formed by three points and then doubling it. This is because the area of a triangle with integer coordinates is always an integer when doubled.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, which ensures that a triangle can be formed by selecting two points from one side and one from another.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the triangle with the largest possible area. This involves selecting points that maximize the base and height of the triangle.\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but within the step of forming triangles, the selection of two points from one side and one from another can be done simultaneously for efficiency.\n\n# [edge case]\n    1. Test case with minimum dimensions and points:\n       Input: \n       ```\n       1\n       3 3\n       2 1 2\n       2 1 2\n       2 1 2\n       2 1 2\n       ```\n       Expected Output: 6\n       Explanation: The largest triangle is formed by points (1, 0), (2, 0), and (3, 3) with a doubled area of 6.\n\n    2. Test case with points only on two sides:\n       Input:\n       ```\n       1\n       5 5\n       2 1 4\n       2 1 4\n       0\n       0\n       ```\n       Expected Output: 15\n       Explanation: The largest triangle is formed by points (1, 0), (4, 0), and (5, 5) with a doubled area of 15.\n\n    3. Test case with maximum number of points on one side:\n       Input:\n       ```\n       1\n       5 5\n       200000 1 2 3 ... 200000\n       2 1 4\n       2 1 4\n       2 1 4\n       ```\n       Expected Output: ", "Round_0": {"code": "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right = case\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (horizontal_bottom[-1] - horizontal_bottom[0]) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (horizontal_top[-1] - horizontal_top[0]) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (vertical_left[-1] - vertical_left[0]) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (vertical_right[-1] - vertical_right[0]) * w)\n        \n        results.append(max_area)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nindex = 0\nt = int(data[index])\nindex += 1\n\ntest_cases = []\nfor _ in range(t):\n    w = int(data[index])\n    h = int(data[index + 1])\n    index += 2\n    \n    k1 = int(data[index])\n    horizontal_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n    index += 1 + k1\n    \n    k2 = int(data[index])\n    horizontal_top = list(map(int, data[index + 1:index + 1 + k2]))\n    index += 1 + k2\n    \n    k3 = int(data[index])\n    vertical_left = list(map(int, data[index + 1:index + 1 + k3]))\n    index += 1 + k3\n    \n    k4 = int(data[index])\n    vertical_right = list(map(int, data[index + 1:index + 1 + k4]))\n    index += 1 + k4\n    \n    test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n\nresults = max_doubled_area(t, test_cases)\nfor result in results:\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right = case\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (horizontal_bottom[-1] - horizontal_bottom[0]) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (horizontal_top[-1] - horizontal_top[0]) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (vertical_left[-1] - vertical_left[0]) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (vertical_right[-1] - vertical_right[0]) * w)\n        \n        results.append(max_area)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nindex = 0\nt = int(data[index])\nindex += 1\n\ntest_cases = []\nfor _ in range(t):\n    w = int(data[index])\n    h = int(data[index + 1])\n    index += 2\n    \n    k1 = int(data[index])\n    horizontal_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n    index += 1 + k1\n    \n    k2 = int(data[index])\n    horizontal_top = list(map(int, data[index + 1:index + 1 + k2]))\n    index += 1 + k2\n    \n    k3 = int(data[index])\n    vertical_left = list(map(int, data[index + 1:index + 1 + k3]))\n    index += 1 + k3\n    \n    k4 = int(data[index])\n    vertical_right = list(map(int, data[index + 1:index + 1 + k4]))\n    index += 1 + k4\n    \n    test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n\nresults = max_doubled_area(t, test_cases)\nfor result in results:\n    print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases, t.\",\n        \"For each test case, read the dimensions w and h of the rectangle.\",\n        \"Read the number of points and their x-coordinates for the bottom side (y=0).\",\n        \"Read the number of points and their x-coordinates for the top side (y=h).\",\n        \"Read the number of points and their y-coordinates for the left side (x=0).\",\n        \"Read the number of points and their y-coordinates for the right side (x=w).\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum possible doubled area of a triangle for each test case.\",\n      \"steps\": [\n        \"For each horizontal side, calculate the maximum distance between any two points and multiply by h to get the doubled area.\",\n        \"For each vertical side, calculate the maximum distance between any two points and multiply by w to get the doubled area.\",\n        \"Compare the doubled areas obtained from horizontal and vertical sides to find the maximum doubled area for the test case.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, print the maximum doubled area calculated.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data for each test case.\",\n    \"For each test case, calculate the maximum possible doubled area of a triangle using the given points.\",\n    \"Output the maximum doubled area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle': A four-sided polygon with opposite sides equal and parallel, and all angles are right angles.\n    'lattice points': Points with integer coordinates.\n    'triangle': A polygon with three edges and three vertices.\n    'doubled area': The area of the triangle multiplied by two, which is always an integer for lattice points.\n\n# [phrase showing quantity relationship]\n    'maximum possible': Refers to finding the largest possible value, in this case, the largest area of a triangle.\n    'at least two points on every side': Ensures that there are enough points to form a triangle.\n\n# [degree adverb]\n    'maximum': Refers to the largest possible area of the triangle that can be formed.\n\n# [code logic]\n    The steps for calculating the maximum possible doubled area of a triangle should be considered simultaneously:\n    - Calculate the maximum distance between any two points on each horizontal side and multiply by h.\n    - Calculate the maximum distance between any two points on each vertical side and multiply by w.\n    These calculations can be done in parallel for efficiency.\n\n# [edge case]\n    Case 1: Minimum dimensions and points\n    Input: 3 3\n           2 1 2\n           2 1 2\n           2 1 2\n           2 1 2\n    Expected Output: 6\n    Explanation: The maximum triangle is formed by points (1, 0), (1, 3), and (3, 2) with a doubled area of 6.\n\n    Case 2: All points on one side\n    Input: 5 5\n           5 1 2 3 4 5\n           2 1 2\n           2 1 2\n           2 1 2\n    Expected Output: 20\n    Explanation: The maximum triangle is formed by points (1, 0), (5, 0), and (5, 5) with a doubled area of 20.\n\n    Case 3: Large dimensions with few points\n    Input: 1000000 1000000\n           2 1 999999\n           2 1 999999\n           2 1 999999\n           2 1 999999\n    Expected Output: 999999000000\n    Explanation: The maximum triangle is formed by points (1, 0),", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area\n        max_area = 0\n        \n        # Horizontal sides\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Vertical sides\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side of the rectangle that are farthest apart.\",\n      \"output\": \"The maximum distance between two points on the same side for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from an adjacent side.\",\n      \"output\": \"The maximum area of such a triangle for each test case.\"\n    },\n    {\n      \"description\": \"Double the maximum area calculated in the previous step to get the required output.\",\n      \"output\": \"The doubled maximum area for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"For each test case, iterate over each side of the rectangle and find the two points that are farthest apart.\",\n    \"Calculate the maximum possible area of a triangle by considering combinations of two points from the same side and one point from an adjacent side.\",\n    \"Double the calculated maximum area to get the final result for each test case.\",\n    \"Output the doubled maximum area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle and then doubling it. This is because the area of a triangle formed by lattice points is always an integer when doubled.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that a triangle can be formed.\n\n    'maximum possible'\n    Explanation: We need to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [degree adverb]\n    'maximum'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed by the given points.\n\n# [code logic]\n    The steps to find the two farthest points on the same side and calculate the area should be considered simultaneously. Specifically, for each side, the maximum distance between two points should be calculated, and then the area should be computed using these points and a point from an adjacent side.\n\n# [edge case]\n    1. Test case with minimum dimensions and points:\n       Input: 3 3\n              2 1 2\n              2 1 2\n              2 1 2\n              2 1 2\n       Expected Output: 4\n       Explanation: The smallest rectangle with minimum points on each side, forming a triangle with maximum area.\n\n    2. Test case with all points on one side:\n       Input: 5 5\n              5 1 2 3 4 5\n              2 1 2\n              2 1 2\n              2 1 2\n       Expected Output: 16\n       Explanation: The maximum area is formed by the farthest points on the longest side and one point from an adjacent side.\n\n    3. Test case with points forming a straight line:\n       Input: 4 4\n              2 1 3\n              2 1 3\n              2 1 3\n              2 1 3\n       Expected Output: 8\n       Explanation: Points form a straight line, and the maximum area is formed by the farthest points on one side and a point", "Round_0": {"code": "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_0, horizontal_h, vertical_0, vertical_w = case\n        \n        # Calculate maximum distance on each side\n        max_horizontal_0 = horizontal_0[-1] - horizontal_0[0]\n        max_horizontal_h = horizontal_h[-1] - horizontal_h[0]\n        max_vertical_0 = vertical_0[-1] - vertical_0[0]\n        max_vertical_w = vertical_w[-1] - vertical_w[0]\n        \n        # Calculate maximum doubled area for each side\n        max_area_horizontal_0 = max_horizontal_0 * h\n        max_area_horizontal_h = max_horizontal_h * h\n        max_area_vertical_0 = max_vertical_0 * w\n        max_area_vertical_w = max_vertical_w * w\n        \n        # Find the maximum doubled area\n        max_doubled_area = max(max_area_horizontal_0, max_area_horizontal_h, max_area_vertical_0, max_area_vertical_w)\n        \n        results.append(max_doubled_area)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nindex = 0\nt = int(data[index])\nindex += 1\n\ntest_cases = []\nfor _ in range(t):\n    w = int(data[index])\n    h = int(data[index + 1])\n    index += 2\n    \n    k1 = int(data[index])\n    horizontal_0 = list(map(int, data[index + 1:index + 1 + k1]))\n    index += 1 + k1\n    \n    k2 = int(data[index])\n    horizontal_h = list(map(int, data[index + 1:index + 1 + k2]))\n    index += 1 + k2\n    \n    k3 = int(data[index])\n    vertical_0 = list(map(int, data[index + 1:index + 1 + k3]))\n    index += 1 + k3\n    \n    k4 = int(data[index])\n    vertical_w = list(map(int, data[index + 1:index + 1 + k4]))\n    index += 1 + k4\n    \n    test_cases.append((w, h, horizontal_0, horizontal_h, vertical_0, vertical_w))\n\nresults = max_doubled_area(t, test_cases)\nfor result in results:\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 87)"}, "Round_1": {"code": "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_0, horizontal_h, vertical_0, vertical_w = case\n        \n        # Calculate maximum distance on each side\n        max_horizontal_0 = horizontal_0[-1] - horizontal_0[0]\n        max_horizontal_h = horizontal_h[-1] - horizontal_h[0]\n        max_vertical_0 = vertical_0[-1] - vertical_0[0]\n        max_vertical_w = vertical_w[-1] - vertical_w[0]\n        \n        # Calculate maximum doubled area for each side\n        max_area_horizontal_0 = max_horizontal_0 * h\n        max_area_horizontal_h = max_horizontal_h * h\n        max_area_vertical_0 = max_vertical_0 * w\n        max_area_vertical_w = max_vertical_w * w\n        \n        # Find the maximum doubled area\n        max_doubled_area = max(max_area_horizontal_0, max_area_horizontal_h, max_area_vertical_0, max_area_vertical_w)\n        \n        results.append(max_doubled_area)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nindex = 0\nt = int(data[index])\nindex += 1\n\ntest_cases = []\nfor _ in range(t):\n    w = int(data[index])\n    h = int(data[index + 1])\n    index += 2\n    \n    k1 = int(data[index])\n    horizontal_0 = list(map(int, data[index + 1:index + 1 + k1]))\n    index += 1 + k1\n    \n    k2 = int(data[index])\n    horizontal_h = list(map(int, data[index + 1:index + 1 + k2]))\n    index += 1 + k2\n    \n    k3 = int(data[index])\n    vertical_0 = list(map(int, data[index + 1:index + 1 + k3]))\n    index += 1 + k3\n    \n    k4 = int(data[index])\n    vertical_w = list(map(int, data[index + 1:index + 1 + k4]))\n    index += 1 + k4\n    \n    test_cases.append((w, h, horizontal_0, horizontal_h, vertical_0, vertical_w))\n\nresults = max_doubled_area(t, test_cases)\nfor result in results:\n    print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side of the rectangle that are farthest apart.\",\n      \"output\": \"The maximum distance between two points on the same side for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from an adjacent side.\",\n      \"output\": \"The maximum doubled area of the triangle for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"For each test case, iterate over each side of the rectangle and find the two points that are farthest apart.\",\n    \"Calculate the maximum possible area of a triangle by considering combinations of two points from the same side and one point from an adjacent side.\",\n    \"For each test case, determine the maximum doubled area of the triangle and store the result.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle and then doubling it. This is because the doubled area of any triangle formed by lattice points is always an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that a triangle can be formed by selecting points from different sides.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n    The steps to find the two farthest points on the same side and calculate the maximum area should be considered simultaneously. Specifically, for each side, the maximum distance between two points can be calculated in one step, and then the area can be calculated using these distances.\n\n# [edge case]\n    1. Test case with minimum dimensions and points:\n       Input: \n       ```\n       1\n       3 3\n       2 1 2\n       2 1 2\n       2 1 2\n       2 1 2\n       ```\n       Expected Output: 4\n       Explanation: The maximum triangle is formed by points (1, 0), (2, 0), and (3, 1) with a doubled area of 4.\n\n    2. Test case with points only on one side:\n       Input:\n       ```\n       1\n       5 5\n       2 1 4\n       2 1 4\n       2 1 4\n       2 1 4\n       ```\n       Expected Output: 15\n       Explanation: The maximum triangle is formed by points (1, 0), (4, 0), and (5, 4) with a doubled area of 15.\n\n    3. Test case with maximum possible points:\n       Input:\n       ```\n       1\n       1000000 1000000\n       2 1 999999\n       2 1 999999\n       2 1 999999\n       2 1 999999\n       ```\n      ", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 723, "prompt": "A rectangle with its opposing corners situated at (0, 0) and (w, h) and edges aligned with the axes is illustrated on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner, and none of the listed points are located at the rectangle's corners with at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 333}
