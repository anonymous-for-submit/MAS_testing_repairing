{"name": "1622_A. Construct a Rectangle", "description": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "tags": ["geometry", "math"], "difficulty": 7, "id": 1622, "sample_io": [{"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["YES\nNO\nYES\nYES\n"]}], "test_list": [{"input": "2\n1 2 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 99\n", "output": ["YES\n"]}, {"input": "3\n1 1 1\n2 1 3\n5 6 7\n", "output": ["NO\nYES\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 10 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n7 101 108\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n12344 1 1\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 5 6\n", "output": ["YES\nNO\n"]}, {"input": "2\n1 3 3\n2 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n1 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100100\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 1 3\n4 5 6\n", "output": ["NO\nNO\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n2 1 3\n1 5 6\n", "output": ["YES\nYES\n"]}, {"input": "4\n6 1 10\n2 6 2\n2 4 2\n7 101 144\n", "output": ["NO\nYES\nYES\nNO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 8 6\n", "output": ["YES\nNO\n"]}, {"input": "3\n1 1 1\n1 1 2\n5 6 12\n", "output": ["NO\nYES\nNO\n"]}, {"input": "4\n6 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["NO\nYES\nNO\nNO\n"]}, {"input": "3\n2 1 1\n1 1 2\n5 6 12\n", "output": ["YES\nYES\nNO\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n2 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 9\n", "output": ["NO\nNO\nYES\n"]}, {"input": "6\n2 2 4\n1 1 1\n3 5 18\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n1 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["YES\nYES\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 2 2\n1 8 9\n", "output": ["NO\nYES\nYES\n"]}, {"input": "1\n12344 2 1\n", "output": ["NO\n"]}, {"input": "1\n2 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "1\n100010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n1 5 6\n", "output": ["NO\nYES\n"]}, {"input": "1\n2 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n100110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 4 1\n", "output": ["NO\n"]}, {"input": "1\n1 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n3 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100110 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 3 1\n", "output": ["NO\n"]}, {"input": "1\n100111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n1 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n100011 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 2\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111001\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011100\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011000\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 100011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 000011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 100011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n110101 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101100 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n011111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101100 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 111110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n100111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011111 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011101 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100011\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 011010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n001111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111001\n", "output": ["NO\n"]}, {"input": "2\n1 4 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 108\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100010 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n2465 1 1\n", "output": ["NO\n"]}, {"input": "4\n6 2 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "2\n1 3 3\n4 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n3 98 186\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n5 6 7\n", "output": ["YES\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 10\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 3 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100010 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n19251 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n4 5 1\n", "output": ["NO\nYES\n"]}, {"input": "4\n9 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n10 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n110010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n8323 2 1\n", "output": ["NO\n"]}, {"input": "1\n3 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 9\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n101110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n21283 4 1\n", "output": ["NO\n"]}, {"input": "2\n2 1 3\n1 5 5\n", "output": ["YES\nNO\n"]}, {"input": "1\n1 98 468\n", "output": ["NO\n"]}, {"input": "1\n110110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n35510 2 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 17\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n110111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n12451 3 1\n", "output": ["NO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100001 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 2 2\n", "output": ["NO\n"]}, {"input": "1\n100010 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100010\n", "output": ["NO\n"]}, {"input": "1\n110011 000001 110000\n", "output": ["NO\n"]}, {"input": "1\n101011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n101011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 011101 111001\n", "output": ["NO\n"]}, {"input": "1\n100001 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 011011\n", "output": ["NO\n"]}, {"input": "1\n101011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 110011\n", "output": ["YES\n"]}, {"input": "1\n110111 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n010011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110111 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011111\n", "output": ["NO\n"]}, {"input": "1\n010011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011101\n", "output": ["NO\n"]}, {"input": "1\n110010 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011110\n", "output": ["NO\n"]}, {"input": "1\n111011 100011 011000\n", "output": ["YES\n"]}, {"input": "1\n110011 000011 001100\n", "output": ["NO\n"]}, {"input": "1\n010110 100011 001100\n", "output": ["NO\n"]}], "task_id": "codecontest/154", "repair_prompt": ["There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYour task is to split exactly one of them into two parts in such a way that each part must have a positive integer length, and this can be done by cutting one stick into two smaller sticks, with each resulting piece having a length that is greater than zero.\n\n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that. Think about different cases where cutting a stick may lead to forming the sides of a rectangle successfully.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYour task is to split exactly one of them into two parts in such a way that each part must have a positive integer length. This can be done by cutting one stick into two smaller sticks, with each resulting piece having a length that is greater than zero.\n\n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that. Think about different cases where cutting a stick may lead to forming the sides of a rectangle successfully.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2 and l_3. Your task is to split exactly one of them into two parts in such a way that each part must have a positive integer length, and this can be done by cutting one stick into two smaller sticks, with each resulting piece having a length that is greater than zero. The total length of the pieces should equal the original length of the stick, allowing for the construction of a rectangle from the resulting four sticks with each stick used as one of its sides. A square is also considered a rectangle. Determine if it's possible to do that. Think about different cases where cutting a stick may lead to forming the sides of a rectangle successfully.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split into two parts such that the resulting four sticks can form a rectangle\n    # A rectangle can be formed if there are two pairs of equal lengths among the four sticks\n    # Try splitting each stick and check the condition\n    if (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3) or (l2 == l3):\n        return True\n    if (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3) or (l1 == l3):\n        return True\n    if (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2) or (l1 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_form_rectangle(l1, l2, l3):\n    # Check if we can split one stick to form a rectangle\n    # Case 1: Split l1 into two parts\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3):\n        return True\n    # Case 2: Split l2 into two parts\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3):\n        return True\n    # Case 3: Split l3 into two parts\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if we can split one stick to form a rectangle\n    # Case 1: Split l1 into two parts\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3):\n        return True\n    # Case 2: Split l2 into two parts\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3):\n        return True\n    # Case 3: Split l3 into two parts\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have equal lengths and the third stick is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if the two smaller sticks are equal and the largest stick can be split into two equal parts\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have the same length and the third stick is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # and the other two sticks are equal\n    if lengths[0] == lengths[1] or lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    # Check if the largest stick can be split into two parts\n    # such that the resulting four sticks can form a rectangle\n    if lengths[2] % 2 == 0 and lengths[0] == lengths[2] // 2:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the stick lengths to simplify comparison\n    sticks = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two parts such that the resulting four sticks can form a rectangle\n    if sticks[0] + sticks[1] == sticks[2]:\n        return \"YES\"\n    if sticks[0] == sticks[1] and sticks[2] % 2 == 0:\n        return \"YES\"\n    \n    return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        result = can_form_rectangle(l1, l2, l3)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    # Case 1: Split l1 into two parts\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3):\n        return True\n    # Case 2: Split l2 into two parts\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3):\n        return True\n    # Case 3: Split l3 into two parts\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal and the third is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of any two sticks equals the third\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split into two parts such that the resulting four sticks can form a rectangle\n    # A rectangle can be formed if there are two pairs of equal lengths among the four sticks\n    # Try splitting each stick and check the condition\n    if (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3) or (l2 == l3):\n        return True\n    if (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3) or (l1 == l3):\n        return True\n    if (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2) or (l1 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts such that the resulting four sticks can form a rectangle.\",\n      \"details\": [\n        \"Check if any stick can be split into two parts with positive integer lengths.\",\n        \"Verify if the resulting four sticks can form a rectangle by checking if there are two pairs of equal lengths.\"\n      ]\n    },\n    {\n      \"description\": \"Process multiple test cases efficiently.\",\n      \"details\": [\n        \"Read the number of test cases.\",\n        \"Iterate through each test case and apply the rectangle formation logic.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each stick, attempt to split it into two parts and check if the resulting four sticks can form a rectangle:\",\n    \"  - If a stick of length l can be split into two parts of lengths a and b, then check if the four sticks (a, b, l2, l3) or (a, b, l1, l3) or (a, b, l1, l2) can form a rectangle.\",\n    \"  - A rectangle can be formed if there are two pairs of equal lengths among the four sticks.\",\n    \"Output 'YES' if a rectangle can be formed, otherwise output 'NO'.\",\n    \"Repeat the process for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split one stick into two parts'\n    Explanation: This means that one of the three sticks can be divided into two smaller sticks, and both resulting pieces must have a positive integer length.\n\n    'form a rectangle'\n    Explanation: This means that the four resulting sticks (after splitting one) should be able to form a rectangle, which requires two pairs of equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means that each part of the stick after splitting must have a length that is more than zero.\n    Implementation: Ensure that when splitting a stick, both resulting parts are positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if a stick can be split and form a rectangle should be implemented simultaneously. Specifically, when checking if a stick can be split, you should immediately verify if the resulting four sticks can form a rectangle. This can be done using a loop to iterate over each stick, attempt to split it, and check the rectangle condition in one block of code.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The stick of length 2 can be split into two sticks of length 1 each, forming a rectangle with sides 1, 1, 1, 1.\n    2. (1, 1, 1) = NO\n       Explanation: No stick can be split to form a rectangle since all are of length 1.\n    3. (100000000, 1, 1) = YES\n       Explanation: The stick of length 100000000 can be split into two sticks of length 50000000 each, forming a rectangle with sides 50000000, 50000000, 1, 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if a stick can be split and form a rectangle will naturally handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split into two parts such that the resulting four sticks can form a rectangle\n    # A rectangle can be formed if there are two pairs of equal lengths among the four sticks\n    # Try splitting each stick and check the condition\n    if (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3) or (l2 == l3):\n        return True\n    if (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3) or (l1 == l3):\n        return True\n    if (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2) or (l1 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are greater than zero and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After splitting one stick, verify if the four sticks can be paired into two sets of equal lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases.\",\n      \"details\": \"Parse the integer t from the input.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, read the lengths of the three sticks.\"\n    },\n    {\n      \"step\": \"For each test case, attempt to split each stick.\",\n      \"details\": \"For each stick, try splitting it into two parts and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Check rectangle formation.\",\n      \"details\": \"For each possible split, check if the four sticks can be paired into two sets of equal lengths.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'split into two parts'\n    Explanation: This means dividing one stick into two smaller sticks such that both have positive integer lengths and their sum equals the original stick length.\n\n# [phrase showing quantity relationship]\n    'greater than zero'\n    Explanation: Each part of the split stick must have a length greater than zero. In code, this can be checked by ensuring both parts are positive integers.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"For each test case, attempt to split each stick\" and \"Check rectangle formation\" should be considered simultaneously.\n    Explanation: For each stick, after attempting a split, immediately check if the resulting four sticks can form a rectangle. This can be implemented using nested loops or conditional checks within the same iteration.\n\n# [edge case] \n    Edge Case 1: (1, 1, 1) = NO\n    Explanation: No matter how you split one of the sticks, you cannot form a rectangle with equal opposite sides.\n    \n    Edge Case 2: (2, 2, 4) = YES\n    Explanation: Split the stick of length 4 into two sticks of length 2 each. The resulting sticks (2, 2, 2, 2) can form a square, which is a rectangle.\n    \n    Edge Case 3: (3, 3, 6) = YES\n    Explanation: Split the stick of length 6 into two sticks of length 3 each. The resulting sticks (3, 3, 3, 3) can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each possible split and verifying rectangle formation will cover these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if we can split one stick to form a rectangle\n    # Case 1: Split l1 into two parts\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3):\n        return True\n    # Case 2: Split l2 into two parts\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3):\n        return True\n    # Case 3: Split l3 into two parts\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are greater than zero and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After splitting one stick, check if the four sticks can be paired into two pairs of equal lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases.\",\n      \"details\": \"Parse the integer t from the input.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, read the three stick lengths l_1, l_2, and l_3.\"\n    },\n    {\n      \"step\": \"For each test case, attempt to split each stick.\",\n      \"details\": \"For each stick, try splitting it into two parts and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Check rectangle formation.\",\n      \"details\": \"For each possible split, verify if the four sticks can be paired into two pairs of equal lengths.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'split into two parts'\n    Explanation: This means dividing one stick into two smaller sticks such that both have positive integer lengths and their sum equals the original stick length.\n\n# [phrase showing quantity relationship]\n    'greater than zero'\n    Explanation: Each part of the split stick must have a length greater than zero. In code, this can be checked by ensuring both parts are positive integers.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"For each test case, attempt to split each stick\" and \"Check rectangle formation\" should be implemented simultaneously.\n    Explanation: For each stick, after attempting a split, immediately check if the resulting four sticks can form a rectangle. This can be done using nested loops or conditional checks within the same iteration.\n\n# [edge case] \n    Case 1: (1, 1, 1) = NO\n    Explanation: No matter how you split one of the sticks, you cannot form a rectangle because you need two pairs of equal lengths.\n    \n    Case 2: (2, 2, 4) = YES\n    Explanation: Split the stick of length 4 into two sticks of length 2 each. You can form a rectangle with sides 2, 2, 2, and 2 (a square).\n    \n    Case 3: (3, 3, 6) = YES\n    Explanation: Split the stick of length 6 into two sticks of length 3 each. You can form a rectangle with sides 3, 3, 3, and 3 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each possible split and verifying rectangle formation will cover these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if we can split one stick to form a rectangle\n    # Case 1: Split l1 into two parts\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3):\n        return True\n    # Case 2: Split l2 into two parts\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3):\n        return True\n    # Case 3: Split l3 into two parts\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers l_1, l_2, and l_3.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to split one stick and form a rectangle.\",\n      \"details\": \"For each test case, check if any of the following conditions are met: (1) Two sticks have equal lengths, and the third stick is even (can be split into two equal parts). (2) The sum of the lengths of any two sticks equals the length of the third stick (can be split into two parts that match the other two sticks).\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"Check if any two sticks have equal lengths and the third stick is even.\",\n    \"Check if the sum of the lengths of any two sticks equals the length of the third stick.\",\n    \"If either condition is met, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Print each result from the results list.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'split one stick'\n    Explanation: This means cutting one stick into two smaller sticks, ensuring each resulting piece has a positive integer length.\n\n# [phrase showing quantity relationship]\n    'greater than zero'\n    Explanation: Each part of the split stick must have a length greater than zero, meaning they must be positive integers.\n    Implementation: Ensure that when splitting a stick, both resulting lengths are positive integers.\n\n    'equal to'\n    Explanation: The total length of the pieces after splitting must equal the original length of the stick.\n    Implementation: When splitting a stick, the sum of the two parts must equal the original stick length.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The conditions for forming a rectangle should be checked simultaneously for each test case:\n    \"Check if any two sticks have equal lengths and the third stick is even.\"\n    \"Check if the sum of the lengths of any two sticks equals the length of the third stick.\"\n    These checks can be implemented using if-else statements within a loop iterating over test cases.\n\n# [edge case]\n    Test case: 1 1 2 = YES\n    Explanation: The stick of length 2 can be split into two sticks of length 1 each, forming a rectangle with sides 1, 1, 1, 1 (a square).\n\n    Test case: 1 2 3 = NO\n    Explanation: No matter how the sticks are split, they cannot form a rectangle with equal opposite sides.\n\n    Test case: 2 2 4 = YES\n    Explanation: The stick of length 4 can be split into two sticks of length 2 each, forming a rectangle with sides 2, 2, 2, 2 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions for forming a rectangle will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have equal lengths and the third stick is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts such that the sum of the parts equals the original length.\",\n      \"details\": \"For each stick, check if it can be split into two positive integer lengths.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"Verify if two pairs of sticks have equal lengths to form opposite sides of a rectangle.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Parse the input to get the number of test cases and the lengths of the three sticks for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, perform the following operations.\"\n    },\n    {\n      \"step\": \"For each stick, attempt to split it into two parts.\",\n      \"details\": \"For each stick, calculate possible splits and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"Verify if any split results in two pairs of equal lengths among the four sticks.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split one stick into two parts'\n    Explanation: This means that one of the three sticks must be divided into two smaller sticks, and both resulting pieces must have positive integer lengths.\n\n    'construct a rectangle'\n    Explanation: This means that after splitting one stick, the four resulting sticks must be able to form a rectangle, which requires two pairs of sticks with equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means that each part of the split stick must have a length that is more than zero.\n    Implementation: Ensure that when splitting a stick, both resulting parts are positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, attempt to split it into two parts\" and \"Check if the resulting four sticks can form a rectangle\" should be implemented simultaneously. This can be done by iterating over each stick, attempting all possible splits, and immediately checking if the resulting configuration can form a rectangle.\n\n# [edge case]\n    1. (1, 1, 1) = NO\n       Explanation: No matter how you split any stick, you cannot form a rectangle with four sticks of these lengths.\n    2. (2, 2, 4) = YES\n       Explanation: Split the stick of length 4 into two sticks of length 2, resulting in four sticks of lengths 2, 2, 2, 2, which can form a square.\n    3. (3, 3, 6) = YES\n       Explanation: Split the stick of length 6 into two sticks of length 3, resulting in four sticks of lengths 3, 3, 3, 3, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of attempting all possible splits and checking for rectangle formation will naturally handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    if lengths[2] == lengths[0] + lengths[1]:\n        return True\n    \n    # Check if the two smaller sticks are equal and the largest stick can be split into two equal parts\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to form a rectangle by splitting one of the sticks.\",\n      \"details\": \"For each test case, check if any of the following conditions are met: (1) Two sticks have the same length, and the third stick is even (can be split into two equal parts). (2) The sum of the lengths of any two sticks equals the length of the third stick (indicating a possible split).\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the lengths of the three sticks, l1, l2, l3.\",\n    \"  - Check if any two sticks have the same length and the third stick is even.\",\n    \"  - Check if the sum of the lengths of any two sticks equals the length of the third stick.\",\n    \"  - If either condition is satisfied, append 'YES' to the results list.\",\n    \"  - Otherwise, append 'NO' to the results list.\",\n    \"Output all results, one per line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after splitting one stick, the resulting four sticks should be able to form a rectangle, which includes a square as a special case.\n\n    'split one stick'\n    Explanation: This means taking one of the three sticks and dividing it into two smaller sticks, ensuring that both parts have positive integer lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means that when a stick is split, each resulting piece must have a length that is more than zero. In code, this can be ensured by checking that the split results in positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Check if any two sticks have the same length and the third stick is even\" and \"Check if the sum of the lengths of any two sticks equals the length of the third stick\" should be considered simultaneously. This can be implemented using an if-else statement to check both conditions for each test case.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The first two sticks are of equal length, and the third stick is even, allowing it to be split into two equal parts (1, 1), forming a rectangle.\n    2. (1, 2, 3) = NO\n       Explanation: No two sticks are of equal length, and the sum of any two sticks does not equal the third stick, so a rectangle cannot be formed.\n    3. (2, 2, 4) = YES\n       Explanation: The first two sticks are of equal length, and the third stick can be split into two equal parts (2, 2), forming a rectangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking for equal lengths and even third stick or sum of two sticks equaling the third stick covers these scenarios.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have the same length and the third stick is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts are greater than zero and their sum equals the original stick length.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After splitting one stick, verify if the four sticks can be paired into two sets of equal lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases.\",\n      \"details\": \"Parse the input to get the integer t, which represents the number of test cases.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, read the lengths of the three sticks l_1, l_2, and l_3.\"\n    },\n    {\n      \"step\": \"Evaluate each stick for possible splitting.\",\n      \"details\": \"For each stick, attempt to split it into two parts and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Check rectangle formation.\",\n      \"details\": \"For each possible split, check if the four sticks can be paired into two sets of equal lengths, indicating a rectangle can be formed.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split one stick into two parts'\n    Explanation: This means that for each test case, you need to consider splitting one of the three sticks into two smaller sticks, ensuring that both resulting pieces have positive integer lengths.\n\n    'form a rectangle'\n    Explanation: After splitting one stick, the goal is to determine if the four resulting sticks can be arranged to form a rectangle, which requires two pairs of sticks with equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means that when splitting a stick, each resulting piece must have a length that is more than zero.\n    Implementation: Ensure that when splitting a stick, both parts are positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Evaluate each stick for possible splitting\" and \"Check rectangle formation\" should be implemented simultaneously.\n    Implementation: For each stick, attempt to split it and immediately check if the resulting four sticks can form a rectangle. This can be done using a loop to iterate over each stick and nested conditions to check the rectangle formation.\n\n# [edge case]\n    1. (1, 1, 1) = NO\n       Explanation: No matter how you split any stick, you cannot form a rectangle with four sticks of these lengths.\n    2. (2, 2, 4) = YES\n       Explanation: Split the stick of length 4 into two sticks of length 2, resulting in four sticks of lengths 2, 2, 2, and 2, which can form a square.\n    3. (3, 3, 6) = YES\n       Explanation: Split the stick of length 6 into two sticks of length 3, resulting in four sticks of lengths 3, 3, 3, and 3, which can form a square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each possible split and verifying rectangle formation will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # and the other two sticks are equal\n    if lengths[0] == lengths[1] or lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    # Check if the largest stick can be split into two parts\n    # such that the resulting four sticks can form a rectangle\n    if lengths[2] % 2 == 0 and lengths[0] == lengths[2] // 2:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts such that the resulting four sticks can form a rectangle.\",\n      \"details\": [\n        \"Check if any stick can be split into two parts with positive integer lengths.\",\n        \"Verify if the resulting four sticks can form a rectangle by checking if there are two pairs of equal lengths.\"\n      ]\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": [\n        \"Read the number of test cases.\",\n        \"Iterate through each test case and apply the solution for the rectangle formation problem.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"Sort the stick lengths to simplify comparison.\",\n    \"Check if the largest stick can be split into two parts such that the resulting four sticks can form a rectangle:\",\n    \"  - If the sum of the two smaller sticks equals the largest stick, print 'YES'.\",\n    \"  - If the two smaller sticks are equal and the largest stick is even, print 'YES'.\",\n    \"  - Otherwise, print 'NO'.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle': A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n    'split into two parts': This means dividing one stick into two smaller sticks, both having positive integer lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means each part after splitting must have a length > 0.\n    'equal': This refers to the condition where two pairs of sticks must have equal lengths to form a rectangle.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to checking if the largest stick can be split should be considered simultaneously:\n    \"Check if the largest stick can be split into two parts such that the resulting four sticks can form a rectangle\":\n    - This involves checking both conditions: if the sum of the two smaller sticks equals the largest stick, or if the two smaller sticks are equal and the largest stick is even.\n\n# [edge case]\n    1 1 2 = YES\n    Explanation: The stick of length 2 can be split into two sticks of length 1 each, forming a rectangle with sides 1, 1, 1, 1 (a square).\n    \n    1 1 3 = NO\n    Explanation: No matter how the stick of length 3 is split, it cannot form a rectangle with the other sticks.\n    \n    2 2 4 = YES\n    Explanation: The stick of length 4 can be split into two sticks of length 2 each, forming a rectangle with sides 2, 2, 2, 2 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions for forming a rectangle will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the stick lengths to simplify comparison\n    sticks = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two parts such that the resulting four sticks can form a rectangle\n    if sticks[0] + sticks[1] == sticks[2]:\n        return \"YES\"\n    if sticks[0] == sticks[1] and sticks[2] % 2 == 0:\n        return \"YES\"\n    \n    return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        result = can_form_rectangle(l1, l2, l3)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts such that the sum of the parts equals the original length.\",\n      \"details\": \"For each stick, check if it can be split into two positive integer lengths.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"Verify if two pairs of sticks can be formed with equal lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Parse the input to get the number of test cases and the stick lengths for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"For each stick, attempt to split it into two parts.\",\n      \"details\": \"For each stick, check all possible ways to split it into two positive integer lengths.\"\n    },\n    {\n      \"step\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"For each possible split, check if two pairs of sticks can be formed with equal lengths.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split one stick into two parts'\n    Explanation: This means that one of the three sticks must be divided into two smaller sticks, and both resulting pieces must have a positive integer length.\n\n    'construct a rectangle'\n    Explanation: This means that after splitting one stick, the four resulting sticks (including the two other original sticks) must be able to form a rectangle, which requires two pairs of equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means that each resulting piece from the split must have a length that is more than zero.\n    Implementation: Ensure that when splitting a stick, both parts are positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, attempt to split it into two parts\" and \"Check if the resulting four sticks can form a rectangle\" should be implemented simultaneously. This can be done by iterating over each stick, attempting all possible splits, and immediately checking if the resulting four sticks can form a rectangle.\n\n# [edge case]\n    1. (1, 1, 1) = NO\n       Explanation: No matter how you split any stick, you cannot form a rectangle with four sticks of equal lengths.\n    2. (2, 2, 4) = YES\n       Explanation: Split the stick of length 4 into two sticks of length 2, forming a rectangle with sides 2, 2, 2, 2.\n    3. (3, 3, 6) = YES\n       Explanation: Split the stick of length 6 into two sticks of length 3, forming a rectangle with sides 3, 3, 3, 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of attempting all possible splits and checking for rectangle formation will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form a rectangle\n    # Case 1: Split l1 into two parts\n    if (l2 == l3) or (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3):\n        return True\n    # Case 2: Split l2 into two parts\n    if (l1 == l3) or (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3):\n        return True\n    # Case 3: Split l3 into two parts\n    if (l1 == l2) or (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers l_1, l_2, and l_3.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to split one stick and form a rectangle.\",\n      \"details\": \"For each test case, check if any of the following conditions are met: (1) Two sticks have equal lengths, and the third stick is even (can be split into two equal parts). (2) The sum of the lengths of any two sticks equals the length of the third stick (can be split into two parts that match the other two sticks).\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the lengths of the three sticks, l_1, l_2, and l_3.\",\n    \"  - Check if any two sticks have equal lengths and the third stick is even.\",\n    \"  - Check if the sum of the lengths of any two sticks equals the length of the third stick.\",\n    \"  - If either condition is satisfied, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Output all results, one per line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split one stick into two parts'\n    Explanation: This means that one of the sticks can be divided into two smaller sticks, and both resulting pieces must have a positive integer length.\n\n    'construct a rectangle'\n    Explanation: This means using the four resulting sticks (after splitting one) to form a rectangle, where opposite sides are equal in length.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means each part of the split stick must have a length > 0.\n    'equal to the original length': This means the sum of the two parts after splitting must be equal to the original stick's length.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to check if two sticks have equal lengths and the third stick is even, and to check if the sum of the lengths of any two sticks equals the length of the third stick, should be considered simultaneously. This can be done using an if-else statement to check both conditions for each test case.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The third stick can be split into two parts of length 1 each, forming a rectangle with sides 1, 1, 1, 1 (a square).\n    2. (1, 2, 3) = NO\n       Explanation: No possible split can form a rectangle as no two sides can be equal.\n    3. (2, 2, 4) = YES\n       Explanation: The third stick can be split into two parts of length 2 each, forming a rectangle with sides 2, 2, 2, 2 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the two conditions (equal lengths with an even third stick, or sum of two equals the third) will handle these cases correctly.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal and the third is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of any two sticks equals the third\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts such that the resulting four sticks can form a rectangle.\",\n      \"details\": [\n        \"Check if any stick can be split into two parts with positive integer lengths.\",\n        \"Verify if the resulting four sticks can form a rectangle by checking if there are two pairs of equal lengths.\"\n      ]\n    },\n    {\n      \"description\": \"Process multiple test cases efficiently.\",\n      \"details\": [\n        \"Read the number of test cases.\",\n        \"Iterate through each test case and apply the rectangle formation logic.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each stick, attempt to split it into two parts and check if the resulting four sticks can form a rectangle:\",\n    \"  - If a stick of length l can be split into two parts of lengths a and b, then check if the four sticks (a, b, l2, l3) or (a, b, l1, l3) or (a, b, l1, l2) can form a rectangle.\",\n    \"  - A rectangle can be formed if there are two pairs of equal lengths among the four sticks.\",\n    \"Output 'YES' if a rectangle can be formed, otherwise output 'NO'.\",\n    \"Repeat the process for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split one stick into two parts'\n    Explanation: This means that one of the three sticks can be divided into two smaller sticks, and both resulting pieces must have a positive integer length.\n\n    'form a rectangle'\n    Explanation: This means that the four resulting sticks (after splitting one) should be able to form a rectangle, which requires two pairs of equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means that each part of the stick after splitting must have a length that is more than zero.\n    Implementation: Ensure that when splitting a stick, both resulting parts are positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if a stick can be split and form a rectangle should be implemented simultaneously. Specifically, when checking if a stick can be split, you should immediately verify if the resulting four sticks can form a rectangle. This can be done using a loop to iterate over each stick, attempt to split it, and check the rectangle condition in one block of code.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The stick of length 2 can be split into two sticks of length 1 each, forming a rectangle with sides 1, 1, 1, 1.\n    2. (1, 1, 1) = NO\n       Explanation: No stick can be split to form a rectangle since all are of length 1.\n    3. (100000000, 1, 1) = YES\n       Explanation: The stick of length 100000000 can be split into two sticks of length 50000000 each, forming a rectangle with sides 50000000, 50000000, 1, 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if a stick can be split and form a rectangle will naturally handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split into two parts such that the resulting four sticks can form a rectangle\n    # A rectangle can be formed if there are two pairs of equal lengths among the four sticks\n    # Try splitting each stick and check the condition\n    if (l1 % 2 == 0 and l1 // 2 == l2) or (l1 % 2 == 0 and l1 // 2 == l3) or (l2 == l3):\n        return True\n    if (l2 % 2 == 0 and l2 // 2 == l1) or (l2 % 2 == 0 and l2 // 2 == l3) or (l1 == l3):\n        return True\n    if (l3 % 2 == 0 and l3 // 2 == l1) or (l3 % 2 == 0 and l3 // 2 == l2) or (l1 == l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, false, true, false, false, true, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 290, "prompt": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYour task is to split exactly one of them into two parts in such a way that each part must have a positive integer length, and this can be done by cutting one stick into two smaller sticks, with each resulting piece having a length that is greater than zero.\n\n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that. Think about different cases where cutting a stick may lead to forming the sides of a rectangle successfully.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 176}
