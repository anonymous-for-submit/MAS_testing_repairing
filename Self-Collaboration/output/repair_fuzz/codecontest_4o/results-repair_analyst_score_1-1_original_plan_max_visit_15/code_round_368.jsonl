{"name": "1622_A. Construct a Rectangle", "description": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "tags": ["geometry", "math"], "difficulty": 7, "id": 1622, "sample_io": [{"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["YES\nNO\nYES\nYES\n"]}], "test_list": [{"input": "2\n1 2 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 99\n", "output": ["YES\n"]}, {"input": "3\n1 1 1\n2 1 3\n5 6 7\n", "output": ["NO\nYES\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 10 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n7 101 108\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n12344 1 1\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 5 6\n", "output": ["YES\nNO\n"]}, {"input": "2\n1 3 3\n2 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n1 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100100\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 1 3\n4 5 6\n", "output": ["NO\nNO\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n2 1 3\n1 5 6\n", "output": ["YES\nYES\n"]}, {"input": "4\n6 1 10\n2 6 2\n2 4 2\n7 101 144\n", "output": ["NO\nYES\nYES\nNO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 8 6\n", "output": ["YES\nNO\n"]}, {"input": "3\n1 1 1\n1 1 2\n5 6 12\n", "output": ["NO\nYES\nNO\n"]}, {"input": "4\n6 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["NO\nYES\nNO\nNO\n"]}, {"input": "3\n2 1 1\n1 1 2\n5 6 12\n", "output": ["YES\nYES\nNO\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n2 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 9\n", "output": ["NO\nNO\nYES\n"]}, {"input": "6\n2 2 4\n1 1 1\n3 5 18\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n1 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["YES\nYES\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 2 2\n1 8 9\n", "output": ["NO\nYES\nYES\n"]}, {"input": "1\n12344 2 1\n", "output": ["NO\n"]}, {"input": "1\n2 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "1\n100010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n1 5 6\n", "output": ["NO\nYES\n"]}, {"input": "1\n2 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n100110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 4 1\n", "output": ["NO\n"]}, {"input": "1\n1 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n3 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100110 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 3 1\n", "output": ["NO\n"]}, {"input": "1\n100111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n1 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n100011 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 2\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111001\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011100\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011000\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 100011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 000011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 100011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n110101 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101100 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n011111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101100 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 111110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n100111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011111 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011101 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100011\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 011010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n001111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111001\n", "output": ["NO\n"]}, {"input": "2\n1 4 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 108\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100010 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n2465 1 1\n", "output": ["NO\n"]}, {"input": "4\n6 2 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "2\n1 3 3\n4 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n3 98 186\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n5 6 7\n", "output": ["YES\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 10\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 3 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100010 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n19251 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n4 5 1\n", "output": ["NO\nYES\n"]}, {"input": "4\n9 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n10 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n110010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n8323 2 1\n", "output": ["NO\n"]}, {"input": "1\n3 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 9\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n101110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n21283 4 1\n", "output": ["NO\n"]}, {"input": "2\n2 1 3\n1 5 5\n", "output": ["YES\nNO\n"]}, {"input": "1\n1 98 468\n", "output": ["NO\n"]}, {"input": "1\n110110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n35510 2 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 17\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n110111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n12451 3 1\n", "output": ["NO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100001 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 2 2\n", "output": ["NO\n"]}, {"input": "1\n100010 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100010\n", "output": ["NO\n"]}, {"input": "1\n110011 000001 110000\n", "output": ["NO\n"]}, {"input": "1\n101011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n101011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 011101 111001\n", "output": ["NO\n"]}, {"input": "1\n100001 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 011011\n", "output": ["NO\n"]}, {"input": "1\n101011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 110011\n", "output": ["YES\n"]}, {"input": "1\n110111 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n010011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110111 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011111\n", "output": ["NO\n"]}, {"input": "1\n010011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011101\n", "output": ["NO\n"]}, {"input": "1\n110010 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011110\n", "output": ["NO\n"]}, {"input": "1\n111011 100011 011000\n", "output": ["YES\n"]}, {"input": "1\n110011 000011 001100\n", "output": ["NO\n"]}, {"input": "1\n010110 100011 001100\n", "output": ["NO\n"]}], "task_id": "codecontest/154", "repair_prompt": ["There are three sticks with integer lengths l_1, l_2, and l_3. Your task is to split exactly one of them into two parts in such a way that each part must have a positive integer length, and this can be done by cutting one stick into two smaller sticks, with each resulting piece having a length that is greater than zero, and it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. Determine if it's possible to do that. Think about different cases where cutting a stick may lead to forming the sides of a rectangle successfully.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2, and l_3. Your task is to split exactly one of them into two parts in such a way that each part must have a positive integer length. This can be done by cutting one stick into two smaller sticks. Each resulting piece must have a length that is greater than zero. It's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. Determine if it's possible to do that. Think about different cases where cutting a stick may lead to forming the sides of a rectangle successfully.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2, and l_3. Your task is to split exactly one of them into two parts in such a way that each part must have a positive integer length, and it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. Determine if it's possible to do that. Think about different cases where cutting a stick may lead to forming the sides of a rectangle successfully.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_form_rectangle(l1, l2, l3):\n    # Check if we can split l1\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Check if we can split l2\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Check if we can split l3\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if we can split the largest stick into two equal parts\n    # and form a rectangle with the other two sticks\n    if lengths[0] == lengths[1] or lengths[0] + lengths[1] == lengths[2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        result = can_form_rectangle(l1, l2, l3)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have the same length and the third stick is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal and the third can be split into two equal parts\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    \n    # Check if one stick can be split into two parts such that the resulting four sticks can form two pairs of equal lengths\n    if l1 + l2 == l3:\n        return True\n    if l1 + l3 == l2:\n        return True\n    if l2 + l3 == l1:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # that match the other two sticks\n    if lengths[0] == lengths[1] or lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    # Check if the two smaller sticks can be combined to match the largest stick\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal and the third can be split into two equal parts\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    \n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3:\n        return True\n    if l1 + l3 == l2:\n        return True\n    if l2 + l3 == l1:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the stick lengths\n    sticks = sorted([l1, l2, l3])\n    # Check if the largest stick can be split into two parts\n    # such that the resulting four sticks can form two pairs of equal lengths\n    return sticks[0] + sticks[1] == sticks[2] or sticks[0] == sticks[1]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have the same length and the third is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the sticks to simplify the logic\n    sticks = sorted([l1, l2, l3])\n    # Check if the largest stick can be split into two equal parts\n    if sticks[2] == sticks[0] + sticks[1]:\n        return \"YES\"\n    # Check if any two sticks are equal and the third can be split into two equal parts\n    if sticks[0] == sticks[1] or sticks[1] == sticks[2]:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        result = can_form_rectangle(l1, l2, l3)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if two sticks have equal lengths and the third can be split into two equal parts\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if one stick can be split such that the resulting two parts match the lengths of the other two sticks\n    if (l1 + l2 == l3) or (l1 + l3 == l2) or (l2 + l3 == l1):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if we can split l1\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Check if we can split l2\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Check if we can split l3\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Determine if a stick can be split into two parts with positive integer lengths.\",\n      \"description\": \"For each stick, check if it can be split into two parts such that both parts have positive integer lengths.\"\n    },\n    {\n      \"subproblem\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"description\": \"After splitting one stick, check if the four sticks can be paired into two pairs of equal lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"description\": \"Read the number of test cases and the lengths of the sticks for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case\",\n      \"description\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Check each stick for possible splitting\",\n      \"description\": \"For each stick, attempt to split it into two parts and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Determine rectangle formation\",\n      \"description\": \"Check if the four sticks can be paired into two pairs of equal lengths to form a rectangle.\"\n    },\n    {\n      \"step\": \"Output result\",\n      \"description\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split one stick into two parts'\n    Explanation: This means that one of the three given sticks can be divided into two smaller sticks, both having positive integer lengths.\n\n    'form a rectangle'\n    Explanation: After splitting one stick, the resulting four sticks should be able to form a rectangle, which requires two pairs of sticks with equal lengths.\n\n# [phrase showing quantity relationship]\n    'exactly one': This means only one stick can be split, not more than one.\n    'positive integer length': This means each part of the split stick must be greater than zero.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Check each stick for possible splitting\" and \"Determine rectangle formation\" should be implemented simultaneously. \n    Explanation: For each stick, attempt to split it and immediately check if the resulting four sticks can form a rectangle. This can be done in a loop where each iteration checks a different stick for splitting and rectangle formation.\n\n# [edge case]\n    1. (1, 1, 1) = NO\n       Explanation: No matter how you split any stick, you cannot form a rectangle because you cannot have two pairs of equal lengths.\n    2. (2, 2, 4) = YES\n       Explanation: Split the stick of length 4 into two sticks of length 2, resulting in four sticks of lengths 2, 2, 2, 2, which can form a square.\n    3. (1, 2, 3) = NO\n       Explanation: Any split will result in lengths that cannot form two pairs of equal lengths.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each stick for possible splitting and rectangle formation will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if we can split l1\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Check if we can split l2\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Check if we can split l3\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts have lengths greater than zero.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After splitting one stick, verify if the four sticks can be paired into two sets of equal lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases.\",\n      \"details\": \"Parse the integer t from the input.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, read the lengths of the three sticks.\"\n    },\n    {\n      \"step\": \"For each stick, attempt to split it into two parts.\",\n      \"details\": \"For each stick length l_i, consider splitting it into two parts a and b such that a + b = l_i and both a and b are positive integers.\"\n    },\n    {\n      \"step\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"Verify if the four sticks can be grouped into two pairs of equal lengths.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split one stick into two parts'\n    Explanation: This means that one of the three sticks can be divided into two smaller sticks, and both resulting pieces must have a positive integer length.\n\n    'form a rectangle'\n    Explanation: After splitting one stick, the four resulting sticks should be able to form a rectangle, meaning they can be paired into two sets of equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': This means that when a stick is split, both resulting parts must have lengths greater than zero. In code, this can be checked by ensuring both parts are positive integers.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, attempt to split it into two parts\" and \"Check if the resulting four sticks can form a rectangle\" should be considered simultaneously. This can be implemented by iterating over each stick, attempting to split it, and immediately checking if the resulting four sticks can form a rectangle.\n\n# [edge case] \n    1. (1, 1, 1) = NO\n       Explanation: No matter how you split any stick, you cannot form a rectangle with sides of equal length.\n    2. (2, 2, 2) = YES\n       Explanation: Split one stick into two parts of length 1 and 1, resulting in four sticks of lengths 2, 2, 1, 1, which can form a rectangle.\n    3. (3, 3, 6) = YES\n       Explanation: Split the stick of length 6 into two parts of length 3 and 3, resulting in four sticks of lengths 3, 3, 3, 3, which can form a rectangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of attempting to split each stick and checking if a rectangle can be formed will naturally handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if we can split the largest stick into two equal parts\n    # and form a rectangle with the other two sticks\n    if lengths[0] == lengths[1] or lengths[0] + lengths[1] == lengths[2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        result = can_form_rectangle(l1, l2, l3)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the integer t, which represents the number of test cases. For each test case, read three integers l_1, l_2, and l_3, which represent the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to form a rectangle by splitting one of the sticks.\",\n      \"details\": \"For each test case, check if any of the following conditions are met: (1) Two sticks have the same length, and the third stick is even, allowing it to be split into two equal parts. (2) The sum of the lengths of any two sticks equals the length of the third stick, allowing the third stick to be split into two parts that match the lengths of the other two sticks.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle by splitting one of the sticks, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the lengths of the three sticks, l_1, l_2, and l_3.\",\n    \"  - Check if any two sticks have the same length and the third stick is even.\",\n    \"  - Check if the sum of the lengths of any two sticks equals the length of the third stick.\",\n    \"  - If either condition is met, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means we need to form four sides from the sticks such that opposite sides are equal.\n\n    'split one stick'\n    Explanation: This means taking one of the three sticks and dividing it into two smaller sticks, both of which must have positive integer lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': Each part of the split stick must have a length greater than zero, meaning no part can be zero or negative.\n    'even': A stick is even if it can be divided into two equal integer parts.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to check if two sticks have the same length and the third stick is even, and to check if the sum of the lengths of any two sticks equals the length of the third stick, should be considered simultaneously. This can be done using an if-else statement to check both conditions for each test case.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The third stick can be split into two parts of length 1 each, forming a rectangle with sides 1, 1, 1, 1.\n    2. (1, 2, 3) = NO\n       Explanation: No possible split can form a rectangle as no two sides can be made equal.\n    3. (2, 2, 4) = YES\n       Explanation: The third stick can be split into two parts of length 2 each, forming a rectangle with sides 2, 2, 2, 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the two conditions (equal lengths and even third stick, or sum of two equals the third) will handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have the same length and the third stick is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to split one stick and form a rectangle.\",\n      \"details\": \"For each test case, check if any of the three sticks can be split into two parts such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the lengths of the three sticks, l1, l2, l3.\",\n    \"  b. Check if any of the following conditions are true:\",\n    \"     i. Two sticks have equal lengths and the third stick can be split into two equal parts.\",\n    \"     ii. One stick can be split into two parts such that the resulting four sticks can form two pairs of equal lengths.\",\n    \"  c. If any condition is satisfied, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. To form a rectangle from four sticks, we need two pairs of equal lengths.\n\n    'split one stick'\n    Explanation: This means we can take one of the three sticks and divide it into two parts, both of which must be positive integers.\n\n# [phrase showing quantity relationship]\n    'exactly one'\n    Explanation: Only one of the three sticks can be split, not more than one.\n\n    'positive integer length'\n    Explanation: The parts resulting from the split must be greater than zero.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps 2b.i and 2b.ii should be considered simultaneously as they both check conditions for forming a rectangle. They can be implemented in a single if-else block to determine if a rectangle can be formed.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The third stick can be split into two parts of length 1 each, forming a rectangle with sides 1, 1, 1, 1.\n    2. (1, 1, 1) = NO\n       Explanation: No stick can be split to form a rectangle since all are of length 1.\n    3. (100000000, 100000000, 1) = YES\n       Explanation: The third stick can be split into two parts of length 0.5 each, but since it must be a positive integer, it can be split into 1 and 0, which is not possible. However, the first two sticks can be used as opposite sides, and the third stick can be split into two parts of length 0.5 each, forming a rectangle with sides 100000000, 100000000, 0.5, 0.5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def can_form_rectangle(l1, l2, l3):\n        # Check if any two sticks are equal and the third can be split into two equal parts\n        if l1 == l2 and l3 % 2 == 0:\n            return True\n        if l1 == l3 and l2 % 2 == 0:\n            return True\n        if l2 == l3 and l1 %", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal and the third can be split into two equal parts\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    \n    # Check if one stick can be split into two parts such that the resulting four sticks can form two pairs of equal lengths\n    if l1 + l2 == l3:\n        return True\n    if l1 + l3 == l2:\n        return True\n    if l2 + l3 == l1:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts with positive integer lengths.\",\n      \"details\": \"For each stick, check if it can be split into two parts such that both parts have lengths greater than zero.\"\n    },\n    {\n      \"description\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"details\": \"After splitting one stick, verify if the four sticks can be paired into two sets of equal lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases.\",\n      \"details\": \"Parse the input to get the integer t, which represents the number of test cases.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, read the lengths of the three sticks.\"\n    },\n    {\n      \"step\": \"For each test case, attempt to split each stick.\",\n      \"details\": \"For each stick, consider splitting it into two parts and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Check rectangle formation.\",\n      \"details\": \"Verify if the four sticks can be paired into two sets of equal lengths, which is necessary to form a rectangle.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, after splitting one stick, the resulting four sticks should be able to form two pairs of equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero'\n    Explanation: Each part of the split stick must have a length greater than zero, meaning it must be a positive integer. This ensures that the resulting pieces are valid sticks.\n    Implementation: Ensure that when splitting a stick, both resulting lengths are positive integers.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"For each test case, attempt to split each stick\" and \"Check rectangle formation\" should be considered simultaneously.\n    Explanation: When attempting to split a stick, immediately check if the resulting four sticks can form a rectangle. This can be implemented using nested loops or conditional checks within the same code block.\n\n# [edge case] \n    Case 1: (1, 1, 1) = NO\n    Explanation: No matter how you split one of the sticks, you cannot form a rectangle because you cannot create two pairs of equal lengths.\n    \n    Case 2: (2, 2, 4) = YES\n    Explanation: Split the stick of length 4 into two sticks of length 2 each. The resulting sticks (2, 2, 2, 2) can form a rectangle (a square in this case).\n    \n    Case 3: (3, 3, 6) = YES\n    Explanation: Split the stick of length 6 into two sticks of length 3 each. The resulting sticks (3, 3, 3, 3) can form a rectangle (a square in this case).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the resulting four sticks can form two pairs of equal lengths will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # that match the other two sticks\n    if lengths[0] == lengths[1] or lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    # Check if the two smaller sticks can be combined to match the largest stick\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the integer t, which represents the number of test cases. For each subsequent line, read three integers l_1, l_2, and l_3, which represent the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to split one stick and form a rectangle for each test case.\",\n      \"details\": \"For each set of stick lengths (l_1, l_2, l_3), check if splitting one stick into two parts allows forming a rectangle with the resulting four sticks.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the lengths of the three sticks: l_1, l_2, l_3.\",\n    \"  b. Check the following conditions to determine if a rectangle can be formed:\",\n    \"     i. Check if any two sticks have equal lengths and the third stick can be split into two equal parts.\",\n    \"     ii. Check if the sum of any two sticks equals the third stick, allowing the third stick to be split into two parts.\",\n    \"  c. If any of the above conditions are met, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after splitting one stick, the resulting four sticks should be able to form a rectangle.\n\n# [phrase showing quantity relationship]\n    'exactly one': This means only one stick can be split, not more than one.\n    'positive integer length': This means each part after splitting must be greater than zero.\n    'each stick is used as exactly one of its sides': This means each stick must contribute to one side of the rectangle.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The conditions in step b.i and b.ii should be considered simultaneously within an if-else statement to determine if a rectangle can be formed. This can be implemented by checking both conditions in a single code block for each test case.\n\n# [edge case] \n    1 1 2 = YES\n    Explanation: The third stick can be split into two parts of length 1 each, forming a rectangle with sides 1, 1, 1, 1.\n    1 2 3 = NO\n    Explanation: No matter how the sticks are split, they cannot form a rectangle.\n    2 2 4 = YES\n    Explanation: The third stick can be split into two parts of length 2 each, forming a rectangle with sides 2, 2, 2, 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions for forming a rectangle will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal and the third can be split into two equal parts\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    \n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3:\n        return True\n    if l1 + l3 == l2:\n        return True\n    if l2 + l3 == l1:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two parts such that the resulting four sticks can form a rectangle.\",\n      \"details\": [\n        \"A rectangle requires two pairs of equal-length sides.\",\n        \"Check if any stick can be split into two parts where the lengths of the resulting four sticks can form two pairs of equal lengths.\"\n      ]\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": [\n        \"Read the number of test cases.\",\n        \"Iterate through each test case and apply the solution for the rectangle formation problem.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Handling\",\n      \"details\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the lengths of the three sticks.\"\n      ]\n    },\n    {\n      \"step\": \"Rectangle Formation Check\",\n      \"details\": [\n        \"For each test case, sort the stick lengths.\",\n        \"Check if the largest stick can be split into two parts such that the resulting four sticks can form two pairs of equal lengths.\",\n        \"Specifically, check if the sum of the two smaller sticks equals the largest stick, or if the largest stick can be split into two equal parts.\"\n      ]\n    },\n    {\n      \"step\": \"Output Results\",\n      \"details\": [\n        \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n      ]\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal in length. To form a rectangle from four sticks, two pairs of sticks must have equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': Each part of the split stick must have a positive integer length, meaning it must be at least 1.\n    Implementation: Ensure that when splitting a stick, both resulting parts are greater than zero.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in \"Rectangle Formation Check\" should be considered simultaneously. Sorting the stick lengths and checking the conditions for forming a rectangle should be done in one logical block to ensure efficiency and clarity.\n\n# [edge case]\n    Case 1: (1, 1, 2) = YES\n    Explanation: The stick of length 2 can be split into two sticks of length 1, forming a rectangle with sides 1, 1, 1, 1.\n    \n    Case 2: (1, 2, 3) = NO\n    Explanation: No matter how the stick of length 3 is split, it cannot form two pairs of equal lengths with the other sticks.\n    \n    Case 3: (5, 5, 10) = YES\n    Explanation: The stick of length 10 can be split into two sticks of length 5, forming a rectangle with sides 5, 5, 5, 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the sum of the two smaller sticks equals the largest stick or if the largest stick can be split into two equal parts will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the stick lengths\n    sticks = sorted([l1, l2, l3])\n    # Check if the largest stick can be split into two parts\n    # such that the resulting four sticks can form two pairs of equal lengths\n    return sticks[0] + sticks[1] == sticks[2] or sticks[0] == sticks[1]\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the integer t, which represents the number of test cases. For each test case, read three integers l_1, l_2, and l_3, which represent the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to split one stick and form a rectangle.\",\n      \"details\": \"For each test case, check if any of the following conditions are met: (1) Two sticks have the same length, and the third stick is even, allowing it to be split into two equal parts. (2) The sum of the lengths of any two sticks equals the length of the third stick, allowing the third stick to be split into two parts that match the lengths of the other two sticks.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle by splitting one stick, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the lengths of the three sticks, l_1, l_2, and l_3.\",\n    \"  - Check if any two sticks have the same length and the third stick is even.\",\n    \"  - Check if the sum of the lengths of any two sticks equals the length of the third stick.\",\n    \"  - If either condition is met, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split one stick into two parts'\n    Explanation: This means that one of the sticks can be divided into two smaller sticks, each with a positive integer length, to form four sticks in total.\n\n    'construct a rectangle'\n    Explanation: A rectangle requires two pairs of equal-length sides. The task is to determine if the resulting four sticks can form such a rectangle.\n\n# [phrase showing quantity relationship]\n    'greater than zero'\n    Explanation: Each resulting piece from the split must have a length greater than zero, meaning they must be positive integers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to check if two sticks have the same length and the third stick is even, and to check if the sum of the lengths of any two sticks equals the length of the third stick, should be implemented simultaneously. This can be done using an if-else statement to check both conditions for each test case.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The third stick can be split into two sticks of length 1, forming a rectangle with sides 1, 1, 1, 1.\n    2. (1, 2, 3) = NO\n       Explanation: No possible split can form a rectangle as no two sides can be made equal.\n    3. (2, 2, 4) = YES\n       Explanation: The third stick can be split into two sticks of length 2, forming a rectangle with sides 2, 2, 2, 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the two conditions (two sticks of the same length with the third being even, or the sum of two sticks equaling the third) will naturally handle these cases.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have the same length and the third is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the integer t from the first line, then read the subsequent lines to get the three integers l_1, l_2, l_3 for each test case.\"\n    },\n    {\n      \"description\": \"Determine if a rectangle can be formed by breaking one stick into two parts.\",\n      \"details\": \"For each test case, check if any stick can be split into two parts such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"action\": \"Read the number of test cases and the lengths of the sticks for each test case.\"\n    },\n    {\n      \"step\": \"Rectangle Formation Check\",\n      \"action\": \"For each test case, iterate over the sticks and check if splitting one stick can result in four sticks that form a rectangle.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"action\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. To form a rectangle from four sticks, two pairs of sticks must have equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': Each part of the stick after splitting must have a positive integer length, meaning it must be greater than zero.\n    Implementation: Ensure that when splitting a stick, both resulting parts are greater than zero.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for checking if a rectangle can be formed should be implemented simultaneously. Specifically, when iterating over the sticks, the logic to check if splitting one stick can result in four sticks that form a rectangle should be handled in one code block.\n\n# [edge case] \n    Case 1: (1, 1, 1) = NO\n    Explanation: No matter how you split one of the sticks, you cannot form a rectangle because you need two pairs of equal lengths.\n    \n    Case 2: (2, 2, 4) = YES\n    Explanation: Split the stick of length 4 into two sticks of length 2, resulting in four sticks of lengths 2, 2, 2, 2, which can form a square (a special type of rectangle).\n    \n    Case 3: (3, 3, 6) = YES\n    Explanation: Split the stick of length 6 into two sticks of length 3, resulting in four sticks of lengths 3, 3, 3, 3, which can form a square.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    def can_form_rectangle(l1, l2, l3):\n        # Check if any stick can be split to form a rectangle\n        sticks = sorted([l1, l2, l3])\n        # Check if the largest stick can be split into two equal parts\n        if sticks[2] == sticks[0] + sticks[1]:\n            return \"YES\"\n        # Check if any two sticks are equal and the third can be split into two equal parts\n        if sticks[0] == sticks[1] or sticks[1] == sticks[2]:\n            return \"YES\"\n        return \"NO\"\n    ```\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the sticks to simplify the logic\n    sticks = sorted([l1, l2, l3])\n    # Check if the largest stick can be split into two equal parts\n    if sticks[2] == sticks[0] + sticks[1]:\n        return \"YES\"\n    # Check if any two sticks are equal and the third can be split into two equal parts\n    if sticks[0] == sticks[1] or sticks[1] == sticks[2]:\n        return \"YES\"\n    return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        result = can_form_rectangle(l1, l2, l3)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to form a rectangle by splitting one of the sticks.\",\n      \"details\": \"For each test case, check if any of the three sticks can be split into two parts such that the resulting four sticks can form a rectangle. This involves checking if two of the sticks have equal lengths and the third stick can be split into two equal parts, or if one stick can be split such that the resulting two parts match the lengths of the other two sticks.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the lengths of the three sticks, l1, l2, and l3.\",\n    \"  - Check if any of the following conditions are true:\",\n    \"    - Two sticks have equal lengths and the third stick can be split into two equal parts.\",\n    \"    - One stick can be split such that the resulting two parts match the lengths of the other two sticks.\",\n    \"  - If any condition is satisfied, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Print each result from the results list.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after splitting one stick, the resulting four sticks should be able to form a rectangle with two pairs of equal lengths.\n\n# [phrase showing quantity relationship]\n    'greater than zero': Each part after splitting a stick must have a length greater than zero, meaning the split must result in two positive integer lengths.\n    Implementation: Ensure that when splitting a stick, both resulting parts are positive integers.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps to check the conditions for forming a rectangle should be implemented simultaneously for each test case. Specifically, the conditions:\n    - Two sticks have equal lengths and the third stick can be split into two equal parts.\n    - One stick can be split such that the resulting two parts match the lengths of the other two sticks.\n    These checks can be done in a single conditional block for each test case.\n\n# [edge case] \n    Case 1: (1, 1, 2) = YES\n    Explanation: The third stick can be split into two parts of length 1 each, forming a rectangle with sides 1, 1, 1, 1.\n    \n    Case 2: (1, 2, 3) = NO\n    Explanation: No matter how you split any stick, you cannot form a rectangle with the given lengths.\n    \n    Case 3: (2, 2, 4) = YES\n    Explanation: The third stick can be split into two parts of length 2 each, forming a rectangle with sides 2, 2, 2, 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions for forming a rectangle will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if two sticks have equal lengths and the third can be split into two equal parts\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if one stick can be split such that the resulting two parts match the lengths of the other two sticks\n    if (l1 + l2 == l3) or (l1 + l3 == l2) or (l2 + l3 == l1):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Determine if a stick can be split into two parts with positive integer lengths.\",\n      \"description\": \"For each stick, check if it can be split into two parts such that both parts have positive integer lengths.\"\n    },\n    {\n      \"subproblem\": \"Check if the resulting four sticks can form a rectangle.\",\n      \"description\": \"After splitting one stick, check if the four sticks can be paired into two pairs of equal lengths.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"description\": \"Read the number of test cases and the lengths of the sticks for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case\",\n      \"description\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Check each stick for possible splitting\",\n      \"description\": \"For each stick, attempt to split it into two parts and check if the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"step\": \"Determine rectangle formation\",\n      \"description\": \"Check if the four sticks can be paired into two pairs of equal lengths to form a rectangle.\"\n    },\n    {\n      \"step\": \"Output result\",\n      \"description\": \"For each test case, output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split one stick into two parts'\n    Explanation: This means that one of the three given sticks can be divided into two smaller sticks, both having positive integer lengths.\n\n    'form a rectangle'\n    Explanation: After splitting one stick, the resulting four sticks should be able to form a rectangle, which requires two pairs of sticks with equal lengths.\n\n# [phrase showing quantity relationship]\n    'exactly one': This means only one stick can be split, not more than one.\n    'positive integer length': This means each part of the split stick must be greater than zero.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Check each stick for possible splitting\" and \"Determine rectangle formation\" should be implemented simultaneously. \n    Explanation: For each stick, attempt to split it and immediately check if the resulting four sticks can form a rectangle. This can be done in a loop where each iteration checks a different stick for splitting and rectangle formation.\n\n# [edge case]\n    1. (1, 1, 1) = NO\n       Explanation: No matter how you split any stick, you cannot form a rectangle because you cannot have two pairs of equal lengths.\n    2. (2, 2, 4) = YES\n       Explanation: Split the stick of length 4 into two sticks of length 2, resulting in four sticks of lengths 2, 2, 2, 2, which can form a square.\n    3. (1, 2, 3) = NO\n       Explanation: Any split will result in lengths that cannot form two pairs of equal lengths.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each stick for possible splitting and rectangle formation will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if we can split l1\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Check if we can split l2\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Check if we can split l3\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, true, true, true, true, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 368, "prompt": "There are three sticks with integer lengths l_1, l_2, and l_3. Your task is to split exactly one of them into two parts in such a way that each part must have a positive integer length, and this can be done by cutting one stick into two smaller sticks, with each resulting piece having a length that is greater than zero, and it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. Determine if it's possible to do that. Think about different cases where cutting a stick may lead to forming the sides of a rectangle successfully.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 211}
