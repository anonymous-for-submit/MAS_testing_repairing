{"name": "1598_C. Delete Two Elements", "description": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "tags": ["data structures", "dp", "implementation", "math", "two pointers"], "difficulty": 9, "id": 1598, "sample_io": [{"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}], "test_list": [{"input": "1\n3\n228 1337 228\n", "output": ["0\n"]}, {"input": "1\n3\n228 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n2\n3\n"]}, {"input": "4\n4\n8 9 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n34 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 7\n", "output": ["6\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 1\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["0\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 9\n", "output": ["6\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 10\n5\n1 2 7 0 5\n7\n2 2 3 7 1 4 9\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 6\n5\n1 2 7 0 5\n7\n0 2 3 7 1 4 9\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 28 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n4\n8 8 5 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["0\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n4 2 3 7 1 4 7\n", "output": ["6\n0\n1\n3\n"]}, {"input": "4\n4\n5 8 11 8\n3\n9 24 10\n5\n1 4 2 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["2\n0\n2\n0\n"]}, {"input": "4\n4\n5 8 5 8\n3\n9 34 10\n5\n1 4 4 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["4\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 18 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 8 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 127\n", "output": ["0\n"]}, {"input": "1\n3\n40 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 9\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 0 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 -1 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n342 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 0 4 5 6 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 9\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 0\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 -1 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 8 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 3 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 14 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 103\n", "output": ["0\n"]}, {"input": "1\n3\n40 270 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 44\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 37 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 3\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n382 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 8\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 74\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n298 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n93 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 15\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 11\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 5\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 29 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n141 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 10 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 0\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 20\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 16\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 11 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n148 141 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 5\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n233 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 16\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 0\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 6 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 6 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n0 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 24 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 7 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 461 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 1 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 4 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 28\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 12\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}], "task_id": "codecontest/60", "repair_prompt": ["Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e. sum divided by n), and Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure that the solutions are derived efficiently considering large inputs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements. Note that it\u2019s possible that k is not an integer. The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e. sum divided by n), and Monocarp wants to delete exactly two elements from a. The aim is to ensure that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure that the solutions are derived efficiently considering large inputs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements, which is the sum of elements divided by the number of these elements, and Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure that the solutions are derived efficiently considering large inputs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2)  # This is the sum we want after removing two elements\n        \n        # Dictionary to count occurrences of each number\n        count = {}\n        for num in a:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        \n        valid_pairs = 0\n        \n        for num in a:\n            count[num] -= 1  # Consider this number as removed\n            needed_sum = target_sum - (total_sum - num)  # Calculate the needed second number\n            \n            if needed_sum % (n - 2) == 0:  # Check if needed_sum is divisible by (n - 2)\n                needed_num = needed_sum // (n - 2)\n                if needed_num in count and count[needed_num] > 0:\n                    valid_pairs += count[needed_num]\n            \n            count[num] += 1  # Restore the count for this number\n        \n        # Each pair is counted twice, so divide by 2\n        results.append(valid_pairs // 2)\n    \n    for result in results:\n        print(result)\n\n\nmain()", "completions": ["def count_valid_pairs(n, a):\n    total_sum = sum(a)\n    mean = total_sum / n\n    target_sum = mean * (n - 2)\n    count = 0\n    value_count = {}\n\n    for value in a:\n        if value in value_count:\n            value_count[value] += 1\n        else:\n            value_count[value] = 1\n\n    for i in range(n):\n        value_count[a[i]] -= 1\n        for j in range(i + 1, n):\n            value_count[a[j]] -= 1\n            if (total_sum - a[i] - a[j]) == target_sum:\n                count += 1\n            value_count[a[j]] += 1\n        value_count[a[i]] += 1\n\n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        results.append(count_valid_pairs(n, a))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        if total_sum * (n - 2) % n != 0:\n            results.append(0)\n            continue\n        \n        target_sum = total_sum * (n - 2) // n\n        count = 0\n        freq = {}\n        \n        for num in a:\n            complement = target_sum - (total_sum - num)\n            if complement in freq:\n                count += freq[complement]\n            \n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        \n        # Check if all elements are the same\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # Calculate the target sum for the remaining elements\n        target_sum = total_sum * (n - 2) / n\n        \n        # Use a hashmap to count occurrences\n        count_map = {}\n        pair_count = 0\n        \n        for num in a:\n            complement = target_sum - num\n            if complement in count_map:\n                pair_count += count_map[complement]\n            \n            if num in count_map:\n                count_map[num] += 1\n            else:\n                count_map[num] = 1\n        \n        results.append(pair_count)\n    \n    for result in results:\n        print(result)\n\n\nmain()", "def count_valid_pairs(n, a):\n    total_sum = sum(a)\n    mean = total_sum / n\n    target_sum = mean * (n - 2)\n    \n    # We need to find pairs (i, j) such that a[i] + a[j] = total_sum - target_sum\n    required_sum = total_sum - target_sum\n    \n    from collections import defaultdict\n    freq = defaultdict(int)\n    valid_pairs = 0\n    \n    for num in a:\n        # Check how many times (required_sum - num) has appeared before\n        complement = required_sum - num\n        if complement in freq:\n            valid_pairs += freq[complement]\n        \n        # Record the occurrence of the current number\n        freq[num] += 1\n    \n    return valid_pairs\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        result = count_valid_pairs(n, a)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_valid_pairs(n, arr):\n    from collections import defaultdict\n    \n    total_sum = sum(arr)\n    mean = total_sum / n\n    \n    # We need to find pairs (i, j) such that:\n    # (total_sum - arr[i] - arr[j]) / (n - 2) = mean\n    # Simplifying, we get:\n    # arr[i] + arr[j] = 2 * mean\n    \n    target_sum = 2 * mean\n    freq = defaultdict(int)\n    valid_pairs = 0\n    \n    for num in arr:\n        freq[num] += 1\n    \n    for num in arr:\n        target = target_sum - num\n        if target in freq:\n            valid_pairs += freq[target]\n        freq[num] -= 1  # Avoid counting the same pair twice\n    \n    return valid_pairs // 2  # Each pair is counted twice\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        arr = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n < 3:\n            results.append(0)\n            continue\n        \n        results.append(find_valid_pairs(n, arr))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "from collections import Counter\nimport sys\ninput = sys.stdin.read\n\ndef count_valid_pairs(a, total_sum, n):\n    count = 0\n    freq = Counter(a)\n    for x in a:\n        target = 2 * total_sum / n - x\n        if target in freq:\n            count += freq[target]\n            if target == x:\n                count -= 1\n    return count // 2\n\ndef main():\n    data = input().strip().split()\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        if total_sum * (n - 2) % n != 0:\n            results.append(0)\n            continue\n        \n        results.append(count_valid_pairs(a, total_sum, n))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_valid_pairs(t, test_cases):\n    results = []\n    for n, a in test_cases:\n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        # Use a hashmap to count occurrences of each element\n        count_map = {}\n        for num in a:\n            if num in count_map:\n                count_map[num] += 1\n            else:\n                count_map[num] = 1\n        \n        pair_count = 0\n        for i in range(n):\n            # Calculate the required sum of the two elements to be removed\n            required_sum = total_sum - target_sum\n            \n            # Check if there exists a pair (a[i], a[j]) such that a[i] + a[j] = required_sum\n            count_map[a[i]] -= 1\n            complement = required_sum - a[i]\n            if complement in count_map:\n                pair_count += count_map[complement]\n        \n        # Since each pair is counted twice, divide by 2\n        results.append(pair_count // 2)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\ntest_cases = []\n\nfor _ in range(t):\n    n = int(data[index])\n    index += 1\n    a = list(map(int, data[index:index + n]))\n    index += n\n    test_cases.append((n, a))\n\nresults = find_valid_pairs(t, test_cases)\n\nfor result in results:\n    print(result)\n\nmain()", "def find_valid_pairs(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, a = case\n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean_k\n        # Simplifying, we get:\n        # total_sum - a[i] - a[j] == mean_k * (n - 2)\n        # a[i] + a[j] == total_sum - mean_k * (n - 2)\n        \n        target_sum = total_sum - mean_k * (n - 2)\n        \n        # Use a hashmap to count occurrences of elements\n        count_map = {}\n        valid_pairs = 0\n        \n        for num in a:\n            # Check if the complement to form the target_sum exists\n            complement = target_sum - num\n            if complement in count_map:\n                valid_pairs += count_map[complement]\n            \n            # Update the count_map for the current number\n            if num in count_map:\n                count_map[num] += 1\n            else:\n                count_map[num] = 1\n        \n        results.append(valid_pairs)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = find_valid_pairs(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) // n\n        \n        if total_sum * (n - 2) % n != 0:\n            results.append(0)\n            continue\n        \n        count = 0\n        freq = {}\n        \n        for num in a:\n            if target_sum - num in freq:\n                count += freq[target_sum - num]\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2)  # This is the sum we want after removing two elements\n        \n        # Dictionary to count occurrences of each number\n        count = {}\n        for num in a:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        \n        valid_pairs = 0\n        \n        for num in a:\n            count[num] -= 1  # Consider this number as removed\n            needed_sum = target_sum - (total_sum - num)  # Calculate the needed second number\n            \n            if needed_sum % (n - 2) == 0:  # Check if needed_sum is divisible by (n - 2)\n                needed_num = needed_sum // (n - 2)\n                if needed_num in count and count[needed_num] > 0:\n                    valid_pairs += count[needed_num]\n            \n            count[num] += 1  # Restore the count for this number\n        \n        # Each pair is counted twice, so divide by 2\n        results.append(valid_pairs // 2)\n    \n    for result in results:\n        print(result)\n\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Compute the sum of all elements in the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal maintains the mean k.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Efficiently count valid pairs.\",\n      \"details\": \"Use a hashmap or similar data structure to efficiently count and check pairs that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases t and for each test case, read n and the array a.\"\n    },\n    {\n      \"step\": \"Calculate the total sum and mean k of the array a\",\n      \"details\": \"For each test case, compute the sum of the array and derive the mean k.\"\n    },\n    {\n      \"step\": \"Iterate over all possible pairs (i, j) to check the condition\",\n      \"details\": \"For each pair (i, j) where i < j, calculate the sum of the remaining elements and check if the mean remains k.\"\n    },\n    {\n      \"step\": \"Use a hashmap to optimize pair checking\",\n      \"details\": \"Store and check necessary values in a hashmap to reduce time complexity when checking pairs.\"\n    },\n    {\n      \"step\": \"Output the result for each test case\",\n      \"details\": \"For each test case, output the number of valid pairs found.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean of an array is the sum of its elements divided by the number of elements. In this problem, the mean of the array should remain the same even after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'equal to': This indicates that the mean of the remaining elements should be exactly the same as the original mean.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the total sum and mean k of the array a\" and \"Iterate over all possible pairs (i, j) to check the condition\" should be considered simultaneously. \n    This can be done by calculating the mean once and then iterating over pairs to check the condition without recalculating the mean each time.\n\n# [edge case] \n    Test case with all elements the same: [5, 5, 5, 5] = 6\n    Explanation: Any pair of elements can be removed since all elements are the same, maintaining the mean.\n    \n    Test case with minimum elements: [1, 2, 3] = 0\n    Explanation: With only three elements, removing any two will not maintain the mean of the original array.\n    \n    Test case with large numbers: [1000000000, 1000000000, 1000000000, 1000000000] = 6\n    Explanation: Similar to the first edge case, any pair can be removed since all elements are the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking pairs and maintaining the mean will naturally handle these cases.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2)  # This is the sum we want after removing two elements\n        \n        # Dictionary to count occurrences of each number\n        count = {}\n        for num in a:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        \n        valid_pairs = 0\n        \n        for num in a:\n            count[num] -= 1  # Consider this number as removed\n            needed_sum = target_sum - (total_sum - num)  # Calculate the needed second number\n            \n            if needed_sum % (n - 2) == 0:  # Check if needed_sum is divisible by (n - 2)\n                needed_num = needed_sum // (n - 2)\n                if needed_num in count and count[needed_num] > 0:\n                    valid_pairs += count[needed_num]\n            \n            count[num] += 1  # Restore the count for this number\n        \n        # Each pair is counted twice, so divide by 2\n        results.append(valid_pairs // 2)\n    \n    for result in results:\n        print(result)\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean of the array.\",\n      \"steps\": [\n        \"Sum all elements of the array.\",\n        \"Divide the sum by the number of elements to get the mean.\"\n      ]\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"steps\": [\n        \"For each pair of elements (i, j), calculate the sum of the remaining elements after removing i and j.\",\n        \"Check if the mean of the remaining elements equals the initial mean.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize the search for valid pairs.\",\n      \"steps\": [\n        \"Use mathematical properties to reduce the number of pairs to check.\",\n        \"Consider using a hashmap or other data structure to efficiently find pairs.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following:\",\n    \"Read the number of elements and the array.\",\n    \"Calculate the initial mean of the array.\",\n    \"Iterate over all pairs of elements in the array.\",\n    \"For each pair, check if their removal keeps the mean unchanged.\",\n    \"Count and store the number of valid pairs for each test case.\",\n    \"Output the count for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mean of a set of numbers is the sum of the numbers divided by the count of numbers. In this problem, it refers to the mean of the array before and after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'number of pairs of positions [i, j] (i < j)': This indicates that we need to find all unique pairs of indices where the first index is less than the second.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the initial mean of the array\" and \"Iterate over all pairs of elements in the array\" should be considered simultaneously in terms of optimization. Instead of recalculating the mean for each pair, use the initial mean to derive conditions for valid pairs.\n\n# [edge case] \n    1. Input: [3, 3, 3, 3] = 6\n       Explanation: All elements are the same, so any pair of elements can be removed without changing the mean.\n    2. Input: [1, 2, 3] = 0\n       Explanation: With only three elements, removing any two will leave one element, which cannot maintain the original mean.\n    3. Input: [1, 1, 1, 2, 2, 2] = 3\n       Explanation: The mean is 1.5, and pairs like (1, 2) or (4, 5) can be removed to maintain the mean.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that the sum of the remaining elements after removing two elements equals the original sum minus twice the mean times the number of elements removed.\n    ```python\n    def count_valid_pairs(n, a):\n        total_sum = sum(a)\n        mean = total_sum / n\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (total_sum - a[i] - a[j]) == mean * (n - 2):\n                    count += 1\n        return count\n    ```\n\nYES", "Round_0": {"code": "def count_valid_pairs(n, a):\n    total_sum = sum(a)\n    mean = total_sum / n\n    target_sum = mean * (n - 2)\n    count = 0\n    value_count = {}\n\n    for value in a:\n        if value in value_count:\n            value_count[value] += 1\n        else:\n            value_count[value] = 1\n\n    for i in range(n):\n        value_count[a[i]] -= 1\n        for j in range(i + 1, n):\n            value_count[a[j]] -= 1\n            if (total_sum - a[i] - a[j]) == target_sum:\n                count += 1\n            value_count[a[j]] += 1\n        value_count[a[i]] += 1\n\n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        results.append(count_valid_pairs(n, a))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Sum all elements of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Efficiently count valid pairs.\",\n      \"details\": \"Use a hashmap or dictionary to track occurrences of elements and their complements needed to maintain the mean.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  1. Read the integer n and the array a of n integers.\",\n    \"  2. Calculate the sum of the array a and derive the mean k.\",\n    \"  3. Initialize a counter to zero for counting valid pairs.\",\n    \"  4. Use a hashmap to store the frequency of each element in the array.\",\n    \"  5. Iterate over each element a[i] in the array:\",\n    \"     a. Calculate the required complement for a[i] to maintain the mean.\",\n    \"     b. Check if this complement exists in the hashmap and update the counter accordingly.\",\n    \"     c. Update the hashmap with the current element a[i].\",\n    \"  6. Output the counter value for the current test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean, often referred to as the average, is calculated by summing all elements in a set and dividing by the number of elements. In this requirement, the mean of the array should remain unchanged even after removing two elements.\n\n# [phrase showing quantity relationship]\n    'sum of elements divided by the number of these elements'\n    Explanation: This phrase describes the calculation of the mean, which is the total sum of the array elements divided by the number of elements. In code, this is implemented as `mean = sum(a) / n`.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially, but step 5a and 5b can be considered simultaneously. When iterating over each element, calculating the complement and checking its existence in the hashmap can be done in one code block.\n\n# [edge case]\n    Test case with all elements equal: [8, 8, 8, 8] = 6\n    Explanation: Any pair of elements can be removed since all elements are equal, resulting in the same mean.\n    \n    Test case with no valid pairs: [50, 20, 10] = 0\n    Explanation: No pair of elements can be removed to maintain the mean, as removing any pair changes the mean.\n    \n    Test case with minimum elements: [1, 1, 1] = 0\n    Explanation: With only three elements, removing two will leave one element, which cannot maintain the original mean.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that the logic for checking valid pairs accounts for cases where all elements are equal or where no valid pairs exist. This can be handled by the hashmap logic, ensuring it correctly tracks and checks complements.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        if total_sum * (n - 2) % n != 0:\n            results.append(0)\n            continue\n        \n        target_sum = total_sum * (n - 2) // n\n        count = 0\n        freq = {}\n        \n        for num in a:\n            complement = target_sum - (total_sum - num)\n            if complement in freq:\n                count += freq[complement]\n            \n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Sum all elements of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Efficiently count valid pairs.\",\n      \"details\": \"Use a hashmap or dictionary to store and count occurrences of elements to efficiently find pairs that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data.\",\n      \"details\": \"Parse the number of test cases t and for each test case, read n and the array a.\"\n    },\n    {\n      \"step\": \"Calculate the total sum of the array a.\",\n      \"details\": \"Compute the sum of all elements in a to determine the initial mean k.\"\n    },\n    {\n      \"step\": \"Iterate over each element to find valid pairs.\",\n      \"details\": \"For each element a[i], calculate the required complement that would keep the mean unchanged if a[i] and a[j] are removed.\"\n    },\n    {\n      \"step\": \"Use a hashmap to track potential pairs.\",\n      \"details\": \"Store the count of each element in a hashmap to quickly find and count valid pairs.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print the number of valid pairs found.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is the sum of its elements divided by the number of elements. The task requires maintaining this mean after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'sum divided by n': This is the formula for calculating the mean, where 'sum' is the total of all elements and 'n' is the number of elements.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the total sum of the array a\" and \"Iterate over each element to find valid pairs\" should be considered simultaneously. This can be done by calculating the sum first and then using it to find pairs in a single loop.\n\n# [edge case]\n    Input: 3\n           3\n           1 1 1\n    Output: 3\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n    \n    Input: 3\n           4\n           1 2 3 4\n    Output: 0\n    Explanation: No pair can be removed to keep the mean unchanged.\n    \n    Input: 3\n           5\n           5 5 5 5 5\n    Output: 10\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where all elements are the same.\n    if all(x == a[0] for x in a):\n        return comb(n, 2)  # Calculate combinations of n elements taken 2 at a time\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        \n        # Check if all elements are the same\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # Calculate the target sum for the remaining elements\n        target_sum = total_sum * (n - 2) / n\n        \n        # Use a hashmap to count occurrences\n        count_map = {}\n        pair_count = 0\n        \n        for num in a:\n            complement = target_sum - num\n            if complement in count_map:\n                pair_count += count_map[complement]\n            \n            if num in count_map:\n                count_map[num] += 1\n            else:\n                count_map[num] = 1\n        \n        results.append(pair_count)\n    \n    for result in results:\n        print(result)\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean of the array.\",\n      \"steps\": [\n        \"Sum all elements of the array.\",\n        \"Divide the sum by the number of elements to get the mean.\"\n      ]\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"steps\": [\n        \"For each pair of elements (i, j), calculate the sum of the remaining elements after removing i and j.\",\n        \"Check if the mean of the remaining elements equals the initial mean.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize the search for valid pairs.\",\n      \"steps\": [\n        \"Use mathematical properties to reduce the number of pairs to check.\",\n        \"Consider using hash maps or other data structures to efficiently track sums and pairs.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following:\",\n    \"Read the number of elements and the array.\",\n    \"Calculate the initial mean of the array.\",\n    \"Iterate over all pairs of elements in the array.\",\n    \"For each pair, calculate the sum of the remaining elements and check if the mean remains unchanged.\",\n    \"Count and store the number of valid pairs for each test case.\",\n    \"Output the count of valid pairs for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is the sum of its elements divided by the number of elements. The task requires maintaining this mean after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This indicates that we need to remove precisely two elements from the array.\n    'sum divided by n': This is the formula for calculating the mean, where 'sum' is the total of all elements and 'n' is the number of elements.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for calculating the initial mean and iterating over pairs to check the mean should be considered simultaneously. Specifically, the calculation of the sum of remaining elements and checking the mean should be done in one code block to optimize performance.\n\n# [edge case]\n    Test case with all elements equal: If all elements are the same, any pair can be removed without changing the mean.\n    Example: [4, 4, 4, 4] = 6 pairs\n    Explanation: Removing any two elements from an array where all elements are equal will not change the mean.\n\n    Test case with minimum elements: If n = 3, only one pair can be removed.\n    Example: [1, 2, 3] = 0 pairs\n    Explanation: Removing any two elements will leave only one element, which cannot maintain the original mean.\n\n    Test case with large numbers: If the array contains very large numbers, ensure the mean calculation handles large sums correctly.\n    Example: [10^9, 10^9, 10^9] = 3 pairs\n    Explanation: Similar to the first edge case, all elements are equal, so any pair can be removed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently, especially for large inputs.\n    Consider using a hashmap to store the frequency of each element and calculate potential pairs based on mathematical properties.\n    Example code snippet:\n    ```python\n    from collections import defaultdict\n\n    def count_valid_pairs(arr):\n        n = len(arr)\n        total_sum = sum(arr)\n        mean = total_sum / n\n        freq = defaultdict(int)\n        for num in arr:\n            freq[num] += 1\n\n        valid_pairs = 0\n        for num in arr:\n            needed_sum = total_sum - num * 2\n            if needed_sum / (n -", "Round_0": {"code": "def count_valid_pairs(n, a):\n    total_sum = sum(a)\n    mean = total_sum / n\n    target_sum = mean * (n - 2)\n    \n    # We need to find pairs (i, j) such that a[i] + a[j] = total_sum - target_sum\n    required_sum = total_sum - target_sum\n    \n    from collections import defaultdict\n    freq = defaultdict(int)\n    valid_pairs = 0\n    \n    for num in a:\n        # Check how many times (required_sum - num) has appeared before\n        complement = required_sum - num\n        if complement in freq:\n            valid_pairs += freq[complement]\n        \n        # Record the occurrence of the current number\n        freq[num] += 1\n    \n    return valid_pairs\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        result = count_valid_pairs(n, a)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean of the array.\",\n      \"details\": \"Compute the sum of the array and divide by the number of elements to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal maintains the mean.\",\n      \"details\": \"For each pair of elements (i, j), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Optimize the search for valid pairs.\",\n      \"details\": \"Use mathematical properties and efficient data structures to reduce the complexity of finding valid pairs.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Parsing\",\n      \"action\": \"Read the number of test cases and for each test case, read the number of elements and the array itself.\"\n    },\n    {\n      \"step\": \"Initial Mean Calculation\",\n      \"action\": \"For each test case, calculate the sum of the array and determine the mean k.\"\n    },\n    {\n      \"step\": \"Pair Identification\",\n      \"action\": \"Iterate over all pairs of elements (i, j) in the array and check if their removal keeps the mean unchanged.\"\n    },\n    {\n      \"step\": \"Efficient Pair Search\",\n      \"action\": \"Implement an efficient algorithm to find valid pairs, possibly using hash maps or prefix sums to speed up the process.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"action\": \"For each test case, output the number of valid pairs found.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is calculated by dividing the sum of its elements by the number of elements. The requirement is to maintain this mean after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This indicates that we need to remove precisely two elements from the array.\n    'sum divided by n': This is the formula for calculating the mean, where 'sum' is the total of all elements and 'n' is the number of elements.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Initial Mean Calculation\" and \"Pair Identification\" should be considered simultaneously. After calculating the mean, we need to immediately check pairs to see if their removal maintains the mean. This can be done efficiently by iterating through pairs and checking the condition in one code block.\n\n# [edge case] \n    Test case with all elements equal: [5, 5, 5, 5] = 6\n    Explanation: Any pair of elements can be removed since all elements are equal, maintaining the mean.\n    \n    Test case with no valid pairs: [1, 2, 3] = 0\n    Explanation: No pair of elements can be removed to maintain the mean because the array is too small to have any valid pairs.\n    \n    Test case with large numbers: [1000000000, 1000000000, 1000000000, 1000000000] = 6\n    Explanation: Similar to the first edge case, any pair can be removed since all elements are equal.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently.\n    Implement a hash map to store the frequency of elements and use it to quickly find pairs that maintain the mean.\n    ```python\n    def find_valid_pairs(arr, mean):\n        from collections import defaultdict\n        freq = defaultdict(int)\n        for num in arr:\n            freq[num] += 1\n        \n        valid_pairs = 0\n        for num in arr:\n            target = 2 * mean - num\n            if target in freq:\n                valid_pairs += freq[target]\n            freq[num] -= 1  # Avoid counting the same pair twice\n        return valid_pairs // 2  # Each pair is counted twice\n    ```\n\nYES", "Round_0": {"code": "def find_valid_pairs(n, arr):\n    from collections import defaultdict\n    \n    total_sum = sum(arr)\n    mean = total_sum / n\n    \n    # We need to find pairs (i, j) such that:\n    # (total_sum - arr[i] - arr[j]) / (n - 2) = mean\n    # Simplifying, we get:\n    # arr[i] + arr[j] = 2 * mean\n    \n    target_sum = 2 * mean\n    freq = defaultdict(int)\n    valid_pairs = 0\n    \n    for num in arr:\n        freq[num] += 1\n    \n    for num in arr:\n        target = target_sum - num\n        if target in freq:\n            valid_pairs += freq[target]\n        freq[num] -= 1  # Avoid counting the same pair twice\n    \n    return valid_pairs // 2  # Each pair is counted twice\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        arr = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n < 3:\n            results.append(0)\n            continue\n        \n        results.append(find_valid_pairs(n, arr))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"steps\": [\n        \"Sum all elements of the array a.\",\n        \"Divide the sum by the number of elements n to get the mean k.\"\n      ]\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"steps\": [\n        \"For each pair of elements (a[i], a[j]), calculate the sum of the remaining elements after removing a[i] and a[j].\",\n        \"Check if the mean of the remaining elements equals the initial mean k.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize the search for valid pairs to handle large inputs efficiently.\",\n      \"steps\": [\n        \"Use mathematical properties to simplify the condition for mean equality.\",\n        \"Implement efficient data structures or algorithms to reduce the number of pair checks.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following:\",\n    \"  Read the number of elements n and the array a.\",\n    \"  Calculate the initial mean k of the array a.\",\n    \"  Initialize a counter for valid pairs.\",\n    \"  Iterate over all pairs of elements (i, j) with i < j:\",\n    \"    Calculate the sum of the remaining elements after removing a[i] and a[j].\",\n    \"    Check if the mean of the remaining elements equals k.\",\n    \"    If yes, increment the counter.\",\n    \"  Output the counter for the current test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is the sum of its elements divided by the number of elements. It represents the average value of the array.\n\n    'delete exactly two elements'\n    Explanation: The task requires removing two elements from the array such that the mean of the remaining elements is unchanged.\n\n# [phrase showing quantity relationship]\n    'exactly two'\n    Explanation: This indicates that precisely two elements must be removed from the array, not more or less. In code, this means iterating over pairs of elements.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for calculating the mean and checking pairs should be considered simultaneously for efficiency. Specifically, the calculation of the sum of remaining elements and checking the mean condition should be done in one loop to avoid redundant calculations.\n\n# [edge case] \n    Test case with all identical elements: [5, 5, 5, 5] = 6\n    Explanation: Any pair of elements can be removed since all elements are equal, and the mean remains unchanged.\n\n    Test case with minimum elements: [1, 2, 3] = 0\n    Explanation: With only three elements, removing any two will always change the mean unless all elements are identical.\n\n    Test case with large numbers: [1000000000, 1000000000, 1000000000, 1000000000] = 6\n    Explanation: Similar to the first edge case, any pair can be removed since all elements are equal.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently.\n    Implement a mathematical check to determine if removing two elements keeps the mean unchanged without iterating over all pairs:\n    ```python\n    from collections import Counter\n\n    def count_valid_pairs(a, mean):\n        count = 0\n        freq = Counter(a)\n        for x in a:\n            target = 2 * mean - x\n            if target in freq:\n                count += freq[target]\n                if target == x:\n                    count -= 1\n        return count // 2\n    ```\n\nYES", "Round_0": {"code": "from collections import Counter\nimport sys\ninput = sys.stdin.read\n\ndef count_valid_pairs(a, total_sum, n):\n    count = 0\n    freq = Counter(a)\n    for x in a:\n        target = 2 * total_sum / n - x\n        if target in freq:\n            count += freq[target]\n            if target == x:\n                count -= 1\n    return count // 2\n\ndef main():\n    data = input().strip().split()\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        if total_sum * (n - 2) % n != 0:\n            results.append(0)\n            continue\n        \n        results.append(count_valid_pairs(a, total_sum, n))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from collections import Counter\nimport sys\ninput = sys.stdin.read\n\ndef count_valid_pairs(a, total_sum, n):\n    count = 0\n    freq = Counter(a)\n    for x in a:\n        target = 2 * total_sum / n - x\n        if target in freq:\n            count += freq[target]\n            if target == x:\n                count -= 1\n    return count // 2\n\ndef main():\n    data = input().strip().split()\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        if total_sum * (n - 2) % n != 0:\n            results.append(0)\n            continue\n        \n        results.append(count_valid_pairs(a, total_sum, n))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean of the array.\",\n      \"details\": \"Compute the sum of the array and divide by the number of elements to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal maintains the mean.\",\n      \"details\": \"For each pair of elements (i, j), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Efficiently count valid pairs.\",\n      \"details\": \"Use mathematical properties and efficient data structures to count pairs without checking each pair explicitly.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases and for each test case, read the number of elements and the array itself.\"\n    },\n    {\n      \"step\": \"Calculate initial mean\",\n      \"details\": \"For each test case, compute the sum of the array and calculate the mean k.\"\n    },\n    {\n      \"step\": \"Find valid pairs\",\n      \"details\": \"For each test case, iterate over pairs of elements and check if their removal maintains the mean. Use efficient methods to avoid checking all pairs explicitly.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"details\": \"For each test case, output the number of valid pairs found.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is calculated by dividing the sum of its elements by the number of elements. The task requires maintaining this mean after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This indicates that we need to remove precisely two elements from the array.\n    'number of pairs of positions [i, j] (i < j)': This means we need to find pairs of indices where the first index is less than the second.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate initial mean\" and \"Find valid pairs\" should be considered simultaneously. After calculating the mean, we need to efficiently find pairs that maintain this mean using mathematical properties, possibly involving hash maps or other data structures to avoid checking all pairs explicitly.\n\n# [edge case] \n    Input: 3\n           3\n           1 1 1\n    Output: 3\n    Explanation: All elements are the same, so any pair can be removed.\n    \n    Input: 3\n           3\n           1 2 3\n    Output: 0\n    Explanation: No pair can be removed to maintain the mean.\n    \n    Input: 4\n           4\n           5 5 5 5\n    Output: 6\n    Explanation: All elements are the same, so any pair can be removed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently.\n    Consider using a hashmap to store the frequency of each element and calculate potential pairs based on the difference needed to maintain the mean.\n\nYES", "Round_0": {"code": "def find_valid_pairs(t, test_cases):\n    results = []\n    for n, a in test_cases:\n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        # Use a hashmap to count occurrences of each element\n        count_map = {}\n        for num in a:\n            if num in count_map:\n                count_map[num] += 1\n            else:\n                count_map[num] = 1\n        \n        pair_count = 0\n        for i in range(n):\n            # Calculate the required sum of the two elements to be removed\n            required_sum = total_sum - target_sum\n            \n            # Check if there exists a pair (a[i], a[j]) such that a[i] + a[j] = required_sum\n            count_map[a[i]] -= 1\n            complement = required_sum - a[i]\n            if complement in count_map:\n                pair_count += count_map[complement]\n        \n        # Since each pair is counted twice, divide by 2\n        results.append(pair_count // 2)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\ntest_cases = []\n\nfor _ in range(t):\n    n = int(data[index])\n    index += 1\n    a = list(map(int, data[index:index + n]))\n    index += n\n    test_cases.append((n, a))\n\nresults = find_valid_pairs(t, test_cases)\n\nfor result in results:\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def find_valid_pairs(t, test_cases):\n    results = []\n    for n, a in test_cases:\n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        # Use a hashmap to count occurrences of each element\n        count_map = {}\n        for num in a:\n            if num in count_map:\n                count_map[num] += 1\n            else:\n                count_map[num] = 1\n        \n        pair_count = 0\n        for i in range(n):\n            # Calculate the required sum of the two elements to be removed\n            required_sum = total_sum - target_sum\n            \n            # Check if there exists a pair (a[i], a[j]) such that a[i] + a[j] = required_sum\n            count_map[a[i]] -= 1\n            complement = required_sum - a[i]\n            if complement in count_map:\n                pair_count += count_map[complement]\n        \n        # Since each pair is counted twice, divide by 2\n        results.append(pair_count // 2)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\ntest_cases = []\n\nfor _ in range(t):\n    n = int(data[index])\n    index += 1\n    a = list(map(int, data[index:index + n]))\n    index += n\n    test_cases.append((n, a))\n\nresults = find_valid_pairs(t, test_cases)\n\nfor result in results:\n    print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Compute the sum of all elements in the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Efficiently count valid pairs.\",\n      \"details\": \"Use a hashmap or dictionary to store and count occurrences of elements to efficiently find pairs that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data.\",\n      \"details\": \"Parse the number of test cases t, and for each test case, read n and the array a.\"\n    },\n    {\n      \"step\": \"Calculate the total sum and mean k of the array a.\",\n      \"details\": \"For each test case, compute the sum of the array and derive the mean k.\"\n    },\n    {\n      \"step\": \"Iterate over each element to find valid pairs.\",\n      \"details\": \"For each element a[i], calculate the required value that a[j] must have to maintain the mean. Use a hashmap to track occurrences and find valid pairs efficiently.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output the number of valid pairs found.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean of an array is the sum of its elements divided by the number of elements. In this problem, the mean must remain unchanged after removing two elements.\n\n    'pairs of positions [i, j] (i < j)'\n    Explanation: This refers to selecting two distinct positions in the array such that the first position is less than the second.\n\n# [phrase showing quantity relationship]\n    'exactly two elements'\n    Explanation: This means that precisely two elements must be removed from the array to check if the mean remains unchanged.\n\n    'sum of n over all testcases doesn't exceed 2 \u22c5 10^5'\n    Explanation: This indicates a constraint on the total number of elements across all test cases, which affects the efficiency of the solution.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to calculate the total sum and mean, and then iterate over each element to find valid pairs, should be considered simultaneously. Specifically, while iterating over elements, the logic to calculate the required value for a[j] and checking it using a hashmap should be done in a single loop to ensure efficiency.\n\n# [edge case]\n    1. Input: 3\n       3\n       1 1 1\n       Explanation: All elements are the same, so any pair can be removed. Expected output is 3.\n       \n    2. Input: 3\n       3\n       1 2 3\n       Explanation: No pair can be removed to keep the mean unchanged. Expected output is 0.\n       \n    3. Input: 4\n       4\n       2 2 2 2\n       Explanation: All elements are the same, so any pair can be removed. Expected output is 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of using a hashmap to track occurrences and find valid pairs efficiently will handle these cases.\n\nNO", "Round_0": {"code": "def find_valid_pairs(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, a = case\n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean_k\n        # Simplifying, we get:\n        # total_sum - a[i] - a[j] == mean_k * (n - 2)\n        # a[i] + a[j] == total_sum - mean_k * (n - 2)\n        \n        target_sum = total_sum - mean_k * (n - 2)\n        \n        # Use a hashmap to count occurrences of elements\n        count_map = {}\n        valid_pairs = 0\n        \n        for num in a:\n            # Check if the complement to form the target_sum exists\n            complement = target_sum - num\n            if complement in count_map:\n                valid_pairs += count_map[complement]\n            \n            # Update the count_map for the current number\n            if num in count_map:\n                count_map[num] += 1\n            else:\n                count_map[num] = 1\n        \n        results.append(valid_pairs)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = find_valid_pairs(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Sum all elements of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Determine the target sum for the remaining elements after removing two elements.\",\n      \"details\": \"Calculate the target sum as (n - 2) * k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if the sum of the remaining elements equals the target sum.\"\n    },\n    {\n      \"description\": \"Count the number of valid pairs (i, j) that satisfy the condition.\",\n      \"details\": \"Iterate through all possible pairs and count those that meet the criteria.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  Read the integer n and the array a of n integers.\",\n    \"  Calculate the initial mean k of the array a.\",\n    \"  Calculate the target sum for the remaining elements after removing two elements.\",\n    \"  Initialize a counter to zero for counting valid pairs.\",\n    \"  Use a nested loop to iterate over all pairs (i, j) with i < j.\",\n    \"  For each pair, calculate the sum of the remaining elements after removing a[i] and a[j].\",\n    \"  Check if this sum equals the target sum.\",\n    \"  If it does, increment the counter.\",\n    \"  After checking all pairs, store the counter value as the result for the current test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean, often referred to as the average, is calculated by summing all elements in a set and dividing by the number of elements. In this requirement, it is crucial to maintain the mean after removing two elements from the array.\n\n# [phrase showing quantity relationship]\n    'sum of elements divided by the number of these elements'\n    Explanation: This phrase describes the calculation of the mean, which is the total sum of the array elements divided by the number of elements. In code, this is implemented as `mean = sum(a) / n`.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to calculating the mean and checking pairs should be considered simultaneously:\n    - Calculate the initial mean k.\n    - Calculate the target sum for the remaining elements.\n    - Use a nested loop to iterate over all pairs (i, j) with i < j.\n    These steps are interconnected as they all contribute to determining valid pairs that maintain the mean.\n\n# [edge case]\n    Test case with all elements equal: [8, 8, 8, 8] = 6\n    Explanation: Any pair of elements can be removed since all elements are equal, maintaining the mean.\n    \n    Test case with no valid pairs: [50, 20, 10] = 0\n    Explanation: No pair of elements can be removed to maintain the mean, as the mean changes with any removal.\n    \n    Test case with multiple valid pairs: [1, 4, 7, 3, 5] = 2\n    Explanation: Removing elements at positions 1 and 3 or 4 and 5 maintains the mean.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently.\n    - Use a hashmap to store the frequency of each element and check pairs efficiently.\n    - Consider edge cases where all elements are equal or where no valid pairs exist.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) // n\n        \n        if total_sum * (n - 2) % n != 0:\n            results.append(0)\n            continue\n        \n        count = 0\n        freq = {}\n        \n        for num in a:\n            if target_sum - num in freq:\n                count += freq[target_sum - num]\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Compute the sum of all elements in the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal maintains the mean k.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Efficiently count valid pairs.\",\n      \"details\": \"Use a hashmap or similar data structure to efficiently count and check pairs that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases t and for each test case, read n and the array a.\"\n    },\n    {\n      \"step\": \"Calculate the total sum and mean k of the array a\",\n      \"details\": \"For each test case, compute the sum of the array and derive the mean k.\"\n    },\n    {\n      \"step\": \"Iterate over all possible pairs (i, j) to check the condition\",\n      \"details\": \"For each pair (i, j) where i < j, calculate the sum of the remaining elements and check if the mean remains k.\"\n    },\n    {\n      \"step\": \"Use a hashmap to optimize pair checking\",\n      \"details\": \"Store and check necessary values in a hashmap to reduce time complexity when checking pairs.\"\n    },\n    {\n      \"step\": \"Output the result for each test case\",\n      \"details\": \"For each test case, output the number of valid pairs found.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean of an array is the sum of its elements divided by the number of elements. In this problem, the mean of the array should remain the same even after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'equal to': This indicates that the mean of the remaining elements should be exactly the same as the original mean.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the total sum and mean k of the array a\" and \"Iterate over all possible pairs (i, j) to check the condition\" should be considered simultaneously. \n    This can be done by calculating the mean once and then iterating over pairs to check the condition without recalculating the mean each time.\n\n# [edge case] \n    Test case with all elements the same: [5, 5, 5, 5] = 6\n    Explanation: Any pair of elements can be removed since all elements are the same, maintaining the mean.\n    \n    Test case with minimum elements: [1, 2, 3] = 0\n    Explanation: With only three elements, removing any two will not maintain the mean of the original array.\n    \n    Test case with large numbers: [1000000000, 1000000000, 1000000000, 1000000000] = 6\n    Explanation: Similar to the first edge case, any pair can be removed since all elements are the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking pairs and maintaining the mean will naturally handle these cases.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2)  # This is the sum we want after removing two elements\n        \n        # Dictionary to count occurrences of each number\n        count = {}\n        for num in a:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        \n        valid_pairs = 0\n        \n        for num in a:\n            count[num] -= 1  # Consider this number as removed\n            needed_sum = target_sum - (total_sum - num)  # Calculate the needed second number\n            \n            if needed_sum % (n - 2) == 0:  # Check if needed_sum is divisible by (n - 2)\n                needed_num = needed_sum // (n - 2)\n                if needed_num in count and count[needed_num] > 0:\n                    valid_pairs += count[needed_num]\n            \n            count[num] += 1  # Restore the count for this number\n        \n        # Each pair is counted twice, so divide by 2\n        results.append(valid_pairs // 2)\n    \n    for result in results:\n        print(result)\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, false, true, false, true, false, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 347, "prompt": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e. sum divided by n), and Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure that the solutions are derived efficiently considering large inputs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 71}
