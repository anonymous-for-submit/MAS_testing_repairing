{"name": "1622_A. Construct a Rectangle", "description": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "tags": ["geometry", "math"], "difficulty": 7, "id": 1622, "sample_io": [{"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["YES\nNO\nYES\nYES\n"]}], "test_list": [{"input": "2\n1 2 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 99\n", "output": ["YES\n"]}, {"input": "3\n1 1 1\n2 1 3\n5 6 7\n", "output": ["NO\nYES\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 10 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n7 101 108\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n12344 1 1\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 5 6\n", "output": ["YES\nNO\n"]}, {"input": "2\n1 3 3\n2 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n1 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100100\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 1 3\n4 5 6\n", "output": ["NO\nNO\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n2 1 3\n1 5 6\n", "output": ["YES\nYES\n"]}, {"input": "4\n6 1 10\n2 6 2\n2 4 2\n7 101 144\n", "output": ["NO\nYES\nYES\nNO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 8 6\n", "output": ["YES\nNO\n"]}, {"input": "3\n1 1 1\n1 1 2\n5 6 12\n", "output": ["NO\nYES\nNO\n"]}, {"input": "4\n6 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["NO\nYES\nNO\nNO\n"]}, {"input": "3\n2 1 1\n1 1 2\n5 6 12\n", "output": ["YES\nYES\nNO\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n2 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 9\n", "output": ["NO\nNO\nYES\n"]}, {"input": "6\n2 2 4\n1 1 1\n3 5 18\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n1 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["YES\nYES\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 2 2\n1 8 9\n", "output": ["NO\nYES\nYES\n"]}, {"input": "1\n12344 2 1\n", "output": ["NO\n"]}, {"input": "1\n2 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "1\n100010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n1 5 6\n", "output": ["NO\nYES\n"]}, {"input": "1\n2 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n100110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 4 1\n", "output": ["NO\n"]}, {"input": "1\n1 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n3 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100110 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 3 1\n", "output": ["NO\n"]}, {"input": "1\n100111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n1 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n100011 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 2\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111001\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011100\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011000\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 100011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 000011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 100011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n110101 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101100 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n011111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101100 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 111110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n100111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011111 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011101 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100011\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 011010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n001111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111001\n", "output": ["NO\n"]}, {"input": "2\n1 4 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 108\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100010 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n2465 1 1\n", "output": ["NO\n"]}, {"input": "4\n6 2 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "2\n1 3 3\n4 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n3 98 186\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n5 6 7\n", "output": ["YES\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 10\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 3 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100010 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n19251 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n4 5 1\n", "output": ["NO\nYES\n"]}, {"input": "4\n9 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n10 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n110010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n8323 2 1\n", "output": ["NO\n"]}, {"input": "1\n3 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 9\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n101110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n21283 4 1\n", "output": ["NO\n"]}, {"input": "2\n2 1 3\n1 5 5\n", "output": ["YES\nNO\n"]}, {"input": "1\n1 98 468\n", "output": ["NO\n"]}, {"input": "1\n110110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n35510 2 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 17\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n110111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n12451 3 1\n", "output": ["NO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100001 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 2 2\n", "output": ["NO\n"]}, {"input": "1\n100010 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100010\n", "output": ["NO\n"]}, {"input": "1\n110011 000001 110000\n", "output": ["NO\n"]}, {"input": "1\n101011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n101011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 011101 111001\n", "output": ["NO\n"]}, {"input": "1\n100001 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 011011\n", "output": ["NO\n"]}, {"input": "1\n101011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 110011\n", "output": ["YES\n"]}, {"input": "1\n110111 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n010011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110111 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011111\n", "output": ["NO\n"]}, {"input": "1\n010011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011101\n", "output": ["NO\n"]}, {"input": "1\n110010 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011110\n", "output": ["NO\n"]}, {"input": "1\n111011 100011 011000\n", "output": ["YES\n"]}, {"input": "1\n110011 000011 001100\n", "output": ["NO\n"]}, {"input": "1\n010110 100011 001100\n", "output": ["NO\n"]}], "task_id": "codecontest/154", "repair_prompt": ["There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYour task is to divide precisely one of them into two sections such that each section must have a positive integer length.\n\n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYour task is to divide precisely one of them into two sections. You need to ensure that each section must have a positive integer length.\n\n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "There are three sticks with integer lengths l_1, l_2 and l_3. Your task is to divide precisely one of them into two sections such that each section must have a positive integer length, and the total length of the pieces is equal to the original length of the stick; it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. A square is also considered a rectangle. Determine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal\n    if l1 == l2 or l2 == l3 or l1 == l3:\n        return True\n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3 or l2 + l3 == l1 or l1 + l3 == l2:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form two pairs of equal lengths\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # and the other two sticks are equal\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if the sum of the two smallest sticks equals the largest stick\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have equal lengths and the third stick is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the stick lengths\n    sticks = sorted([l1, l2, l3])\n    # Check the conditions for forming a rectangle\n    if sticks[0] + sticks[1] == sticks[2] or sticks[0] == sticks[1] or sticks[1] == sticks[2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        result = can_form_rectangle(l1, l2, l3)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if two sticks are equal and the third is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if two sticks have equal lengths and the third stick is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal and the third can be split into two equal parts\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    \n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3:\n        return True\n    if l1 + l3 == l2:\n        return True\n    if l2 + l3 == l1:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Sort the stick lengths\n    sticks = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two parts such that\n    # the resulting four sticks can form a rectangle\n    # Condition 1: Two smaller sticks sum to the largest stick\n    if sticks[0] + sticks[1] == sticks[2]:\n        return True\n    # Condition 2: The largest stick can be split into two equal parts\n    if sticks[2] % 2 == 0 and sticks[2] // 2 == sticks[0]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal and the third can be split into two equal parts\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each subsequent line, read three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces to form a rectangle.\",\n      \"details\": \"For each test case, check if any of the three sticks can be split into two parts such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Check the conditions for forming a rectangle.\",\n      \"details\": \"A rectangle can be formed if there are two pairs of equal lengths among the four sticks.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each stick, consider breaking it into two parts and check if the resulting four sticks can form a rectangle.\",\n    \"To form a rectangle, ensure there are two pairs of equal lengths among the four sticks.\",\n    \"If a rectangle can be formed, store 'YES' for that test case, otherwise store 'NO'.\",\n    \"After processing all test cases, output the results for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after breaking one stick into two, the resulting four sticks should form two pairs of equal lengths.\n\n    'positive integer length'\n    Explanation: Each section of the broken stick must have a length greater than zero.\n\n# [phrase showing quantity relationship]\n    'precisely one'\n    Explanation: Only one of the three sticks can be divided into two sections.\n\n    'equal to'\n    Explanation: The total length of the pieces after breaking a stick must be equal to the original length of the stick.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, consider breaking it into two parts and check if the resulting four sticks can form a rectangle\" and \"To form a rectangle, ensure there are two pairs of equal lengths among the four sticks\" should be implemented simultaneously. This can be done by iterating over each stick, breaking it into two possible parts, and checking if the resulting lengths can form two pairs of equal lengths.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: Break the stick of length 2 into two sticks of length 1 each. The resulting lengths are 1, 1, 1, 1, which can form a rectangle (a square in this case).\n    \n    2. (1, 1, 1) = NO\n       Explanation: No matter how you break any stick, you cannot form two pairs of equal lengths with the resulting sticks.\n    \n    3. (10^8, 10^8, 1) = YES\n       Explanation: Break one of the sticks of length 10^8 into two sticks of length 5*10^7 each. The resulting lengths are 5*10^7, 5*10^7, 10^8, 1, which can form a rectangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if two pairs of equal lengths can be formed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases 't'. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces to form a rectangle.\",\n      \"details\": \"For each test case, check if any stick can be split into two parts such that the resulting four sticks can form a rectangle. This involves checking if two of the sticks have equal lengths or if the sum of two sticks equals the third stick.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases 't'.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the lengths of the three sticks.\",\n    \"  - Check if any stick can be split into two parts such that the resulting four sticks can form a rectangle.\",\n    \"    - Check if two sticks have equal lengths or if the sum of two sticks equals the third stick.\",\n    \"  - Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick into two pieces'\n    Explanation: This means dividing one stick into two parts such that the sum of the lengths of the two parts equals the original length of the stick.\n\n# [phrase showing quantity relationship]\n    'equal to': The total length of the pieces must be equal to the original length of the stick. This means if a stick of length l is broken into two parts, the sum of the lengths of the two parts must be l.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps to check if a rectangle can be formed should be implemented simultaneously. Specifically, checking if two sticks have equal lengths or if the sum of two sticks equals the third stick can be done in a single conditional block.\n\n# [edge case] \n    Test case: 1 1 2 = YES\n    Explanation: The stick of length 2 can be broken into two sticks of length 1 each, forming a rectangle with sides 1, 1, 1, 1 (a square).\n\n    Test case: 1 2 3 = NO\n    Explanation: No matter how the sticks are broken, it's impossible to form a rectangle with the given lengths.\n\n    Test case: 10 10 20 = YES\n    Explanation: The stick of length 20 can be broken into two sticks of length 10 each, forming a rectangle with sides 10, 10, 10, 10 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if two sticks have equal lengths or if the sum of two sticks equals the third stick will cover these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal\n    if l1 == l2 or l2 == l3 or l1 == l3:\n        return True\n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3 or l2 + l3 == l1 or l1 + l3 == l2:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the integer t from the first line, then read the subsequent lines to get the three integers l_1, l_2, l_3 for each test case.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces such that a rectangle can be formed.\",\n      \"details\": \"For each test case, check if any of the sticks can be split into two parts that, along with the other two sticks, can form a rectangle.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"Print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each stick, check if it can be split into two parts such that the resulting four sticks can form a rectangle.\",\n    \"To form a rectangle, two pairs of sticks must have equal lengths.\",\n    \"If any stick can be split to satisfy the rectangle condition, output 'YES'. Otherwise, output 'NO'.\",\n    \"Repeat the process for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after breaking one stick into two parts, the resulting four sticks should be able to form a rectangle, i.e., two pairs of equal lengths.\n\n    'positive integer length'\n    Explanation: Each section of the stick after breaking must have a length greater than zero.\n\n# [phrase showing quantity relationship]\n    'equal to': The total length of the pieces after breaking a stick must be equal to the original length of the stick. This means if a stick of length `l` is broken into two parts `a` and `b`, then `a + b = l`.\n    \n    'four sticks': After breaking one stick, there should be four sticks in total to form a rectangle.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, check if it can be split into two parts such that the resulting four sticks can form a rectangle\" and \"To form a rectangle, two pairs of sticks must have equal lengths\" should be implemented simultaneously. This can be done by iterating over each stick, attempting to split it, and checking if the resulting lengths can form two pairs of equal lengths.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The stick of length 2 can be split into two sticks of length 1 each, forming a rectangle with sides 1, 1, 1, 1 (a square).\n    \n    2. (1, 1, 1) = NO\n       Explanation: No stick can be split to form a rectangle since all are of length 1, and splitting any would result in a zero-length stick.\n    \n    3. (2, 2, 4) = YES\n       Explanation: The stick of length 4 can be split into two sticks of length 2 each, forming a rectangle with sides 2, 2, 2, 2 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if any stick can be split to form two pairs of equal lengths will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any stick can be split to form two pairs of equal lengths\n    # Sort the lengths to simplify the logic\n    lengths = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two equal parts\n    # and the other two sticks are equal\n    if lengths[0] == lengths[1] and lengths[2] % 2 == 0:\n        return True\n    \n    # Check if the sum of the two smallest sticks equals the largest stick\n    if lengths[0] + lengths[1] == lengths[2]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each of the next t lines, read three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one of the sticks into two pieces such that a rectangle can be formed.\",\n      \"details\": \"For each test case, check if any of the following conditions hold: (1) Two sticks have equal lengths, and the third stick is even (can be split into two equal parts). (2) The sum of the lengths of any two sticks equals the length of the third stick.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each test case, check the conditions to determine if a rectangle can be formed:\",\n    \"  - Check if any two sticks have equal lengths and the third stick is even.\",\n    \"  - Check if the sum of the lengths of any two sticks equals the length of the third stick.\",\n    \"Output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after breaking one stick into two parts, the resulting four sticks should be able to form a rectangle.\n\n    'positive integer length'\n    Explanation: Each section of the broken stick must have a length greater than zero.\n\n# [phrase showing quantity relationship]\n    'precisely one': means that only one stick can be divided into two sections.\n    'equal to': means the total length of the two sections must be the same as the original stick length.\n    'each section must have a positive integer length': means each part of the broken stick must be greater than zero.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to check if a rectangle can be formed should be implemented simultaneously. Specifically, the conditions:\n    - Check if any two sticks have equal lengths and the third stick is even.\n    - Check if the sum of the lengths of any two sticks equals the length of the third stick.\n    These checks can be done in a single if-else block for each test case.\n\n# [edge case]\n    (1, 1, 2) = YES\n    Explanation: The first two sticks are equal, and the third stick is even, allowing it to be split into two equal parts of length 1.\n\n    (1, 2, 3) = NO\n    Explanation: No two sticks are equal, and the sum of any two sticks does not equal the third stick.\n\n    (2, 2, 4) = YES\n    Explanation: The first two sticks are equal, and the third stick is even, allowing it to be split into two equal parts of length 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions for forming a rectangle will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks have equal lengths and the third stick is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of the lengths of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the first line, which represents the number of test cases.\",\n        \"For each test case, read three integers l_1, l_2, and l_3 from the input.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces to form a rectangle.\",\n      \"steps\": [\n        \"For each test case, sort the stick lengths l_1, l_2, and l_3.\",\n        \"Check if any of the following conditions are true:\",\n        \"Condition 1: l_1 + l_2 == l_3 (break the stick of length l_3 into two pieces of lengths l_1 and l_2).\",\n        \"Condition 2: l_1 + l_3 == l_2 (break the stick of length l_2 into two pieces of lengths l_1 and l_3).\",\n        \"Condition 3: l_2 + l_3 == l_1 (break the stick of length l_1 into two pieces of lengths l_2 and l_3).\",\n        \"If any condition is true, print 'YES'. Otherwise, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data to get the number of test cases and the stick lengths for each test case.\",\n    \"For each test case, sort the stick lengths.\",\n    \"Check the conditions to determine if a rectangle can be formed by breaking one stick.\",\n    \"Output 'YES' if a rectangle can be formed, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'break one stick into two pieces'\n    Explanation: This means dividing one of the given stick lengths into two smaller positive integer lengths such that the total length remains the same.\n\n# [phrase showing quantity relationship]\n    'equal to': This phrase is used in the conditions to check if the sum of two stick lengths is equal to the third stick length, which is necessary to form a rectangle.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps to check the conditions (Condition 1, Condition 2, Condition 3) should be implemented simultaneously in a single if-else block. This is because they are mutually exclusive conditions that determine the same outcome (whether a rectangle can be formed).\n\n# [edge case] \n    1 1 2 = YES\n    Explanation: The stick of length 2 can be broken into two sticks of length 1 each, forming a rectangle with sides 1, 1, 1, 1 (a square).\n\n    1 1 1 = NO\n    Explanation: No stick can be broken to form a rectangle since all sticks are of the same length and breaking any would result in non-positive lengths.\n\n    10^8 10^8 10^8 = YES\n    Explanation: Any stick can be broken into two equal halves, forming a rectangle with sides 10^8, 10^8, 10^8/2, 10^8/2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions covers these scenarios.\n\nYES", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the stick lengths\n    sticks = sorted([l1, l2, l3])\n    # Check the conditions for forming a rectangle\n    if sticks[0] + sticks[1] == sticks[2] or sticks[0] == sticks[1] or sticks[1] == sticks[2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        result = can_form_rectangle(l1, l2, l3)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers l_1, l_2, and l_3.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one of the sticks into two pieces to form a rectangle.\",\n      \"details\": \"For each test case, check if any of the following conditions are met: (1) Two sticks have equal lengths, and the third stick is even (can be split into two equal parts). (2) The sum of the lengths of any two sticks equals the length of the third stick (indicating a possible split).\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if it's possible to form a rectangle, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks, l_1, l_2, and l_3.\",\n    \"Check if any two sticks have equal lengths and the third stick is even, or if the sum of any two sticks equals the third stick.\",\n    \"If either condition is met, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Print each result from the results list.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after breaking one stick into two parts, the resulting four sticks should be able to form a rectangle.\n\n    'positive integer length'\n    Explanation: Each section of the broken stick must have a length greater than zero.\n\n# [phrase showing quantity relationship]\n    'precisely one': This means only one stick can be divided, not more than one.\n    'equal to': The total length of the pieces after breaking a stick must be equal to the original length of the stick.\n    'each section must have a positive integer length': This means each part after breaking must be greater than zero.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan can be implemented simultaneously in the following way:\n    - For each test case, check both conditions in one code block:\n      1. If two sticks have equal lengths and the third stick is even.\n      2. If the sum of the lengths of any two sticks equals the length of the third stick.\n    This can be done using a single if-else statement for each test case.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: The third stick can be split into two sticks of length 1 each, forming a rectangle with sides 1, 1, 1, 1 (a square).\n    2. (1, 2, 3) = NO\n       Explanation: No possible way to split any stick to form a rectangle.\n    3. (2, 2, 4) = YES\n       Explanation: The third stick can be split into two sticks of length 2 each, forming a rectangle with sides 2, 2, 2, 2 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the two conditions is sufficient to handle all edge cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if two sticks are equal and the third is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one of the sticks into two pieces such that a rectangle can be formed.\",\n      \"details\": \"For each test case, check if any of the following conditions are met: (1) Two sticks have equal lengths, and the third stick is even (can be split into two equal parts). (2) The sum of the lengths of any two sticks equals the length of the third stick.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"Check if any two sticks have equal lengths and the third stick is even, or if the sum of any two sticks equals the third stick.\",\n    \"If either condition is met, append 'YES' to the results list; otherwise, append 'NO'.\",\n    \"Output each result from the results list.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'positive integer length'\n    Explanation: Each section of the stick after breaking must have a length greater than zero.\n\n# [phrase showing quantity relationship]\n    'equal to': The total length of the pieces after breaking a stick must be equal to the original length of the stick.\n    Implementation: Ensure the sum of the two new sections equals the original stick length.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The conditions for forming a rectangle should be checked simultaneously for each test case:\n    - Check if two sticks have equal lengths and the third stick is even.\n    - Check if the sum of any two sticks equals the length of the third stick.\n    These checks can be implemented using if-else statements within a loop iterating over test cases.\n\n# [edge case]\n    Test case: 1 1 2 = YES\n    Explanation: The third stick can be split into two sections of length 1 each, forming a square.\n    \n    Test case: 1 2 3 = NO\n    Explanation: No possible way to split any stick to form a rectangle.\n    \n    Test case: 2 2 4 = YES\n    Explanation: The third stick can be split into two sections of length 2 each, forming a rectangle with opposite sides of length 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if two sticks have equal lengths and the third stick is even\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of any two sticks equals the length of the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each test case, read the line containing three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two parts to form a rectangle with the other sticks.\",\n      \"details\": \"For each test case, check if any of the three sticks can be split into two parts such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Check the conditions for forming a rectangle.\",\n      \"details\": \"A rectangle can be formed if there are two pairs of equal lengths among the four sticks. This can be achieved by either splitting one stick into two equal parts or by ensuring the sum of two sticks equals the third stick.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each set of stick lengths, check the following conditions:\",\n    \"  - If any two sticks are equal, check if the third stick can be split into two equal parts.\",\n    \"  - If the sum of any two sticks equals the third stick, a rectangle can be formed.\",\n    \"Output 'YES' if any of the above conditions are met, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'equal to': The total length of the pieces after breaking a stick must be equal to the original length of the stick. This means if a stick of length l is broken into two parts, the sum of the lengths of the two parts must be l.\n    Implementation: Ensure that when a stick is broken into two parts, the sum of the two parts equals the original length.\n\n# [degree adverb] \n    'precisely': This indicates that exactly one stick must be broken into two sections.\n    Implementation: Ensure that only one stick is broken in each test case.\n\n# [code logic]\n    The conditions for forming a rectangle should be checked simultaneously:\n    - If any two sticks are equal, check if the third stick can be split into two equal parts.\n    - If the sum of any two sticks equals the third stick, a rectangle can be formed.\n    These checks can be implemented in a single if-else block for each test case.\n\n# [edge case] \n    Test case: 1 1 2 = YES\n    Explanation: The stick of length 2 can be broken into two sticks of length 1 each, forming a rectangle with the other two sticks.\n    \n    Test case: 1 2 3 = NO\n    Explanation: No matter how the sticks are broken, they cannot form a rectangle as no two pairs of equal lengths can be formed.\n    \n    Test case: 5 5 10 = YES\n    Explanation: The stick of length 10 can be broken into two sticks of length 5 each, forming a rectangle with the other two sticks.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking the conditions for forming a rectangle will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal and the third can be split into two equal parts\n    if l1 == l2 and l3 % 2 == 0:\n        return True\n    if l1 == l3 and l2 % 2 == 0:\n        return True\n    if l2 == l3 and l1 % 2 == 0:\n        return True\n    \n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3:\n        return True\n    if l1 + l3 == l2:\n        return True\n    if l2 + l3 == l1:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Determine if a stick can be split into two sections such that the resulting four sticks can form a rectangle.\",\n      \"details\": [\n        \"Check if any stick can be split into two parts where the sum of the two parts equals the original stick length.\",\n        \"Verify if the resulting four sticks can form a rectangle by checking if there are two pairs of equal lengths.\"\n      ]\n    },\n    {\n      \"description\": \"Process multiple test cases efficiently.\",\n      \"details\": [\n        \"Read the number of test cases.\",\n        \"Iterate through each test case and apply the rectangle formation logic.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input values: number of test cases and the lengths of the sticks for each test case.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Sort the stick lengths to simplify the logic for checking rectangle formation.\",\n    \"  - Check if the largest stick can be split into two parts such that the resulting four sticks can form a rectangle.\",\n    \"  - Specifically, check if the sum of the two smaller sticks equals the largest stick, or if the largest stick can be split into two equal parts.\",\n    \"  - If either condition is met, output 'YES'. Otherwise, output 'NO'.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n# [phrase showing quantity relationship]\n    'equal to': means that the sum of the two sections must be equal to the original length of the stick.\n    'two pairs of equal lengths': means that the resulting four sticks must be able to form two pairs of equal lengths to form a rectangle.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Sort the stick lengths\" and \"Check if the largest stick can be split into two parts such that the resulting four sticks can form a rectangle\" should be considered simultaneously. Sorting helps simplify the logic for checking rectangle formation by ensuring the largest stick is last, making it easier to check the conditions.\n\n# [edge case] \n    1 1 2 = YES\n    Explanation: The stick of length 2 can be split into two sticks of length 1 each, forming a rectangle with sides 1, 1, 1, 1 (a square).\n    \n    1 2 3 = NO\n    Explanation: No matter how the stick of length 3 is split, it cannot form a rectangle with the other sticks.\n    \n    10 10 20 = YES\n    Explanation: The stick of length 20 can be split into two sticks of length 10 each, forming a rectangle with sides 10, 10, 10, 10 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the largest stick can be split into two parts such that the resulting four sticks can form a rectangle will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Sort the stick lengths\n    sticks = sorted([l1, l2, l3])\n    \n    # Check if the largest stick can be split into two parts such that\n    # the resulting four sticks can form a rectangle\n    # Condition 1: Two smaller sticks sum to the largest stick\n    if sticks[0] + sticks[1] == sticks[2]:\n        return True\n    # Condition 2: The largest stick can be split into two equal parts\n    if sticks[2] % 2 == 0 and sticks[2] // 2 == sticks[0]:\n        return True\n    \n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"input\": \"A single integer t followed by t lines, each containing three integers l_1, l_2, l_3.\",\n      \"output\": \"A list of tuples, each containing three integers representing the lengths of the sticks for each test case.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one of the sticks into two pieces such that a rectangle can be formed.\",\n      \"input\": \"A tuple of three integers representing the lengths of the sticks.\",\n      \"output\": \"A boolean value indicating whether a rectangle can be formed.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"input\": \"A list of boolean values indicating the possibility of forming a rectangle for each test case.\",\n      \"output\": \"Print 'YES' or 'NO' for each test case based on the boolean value.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the lengths of the sticks for each test case.\",\n    \"For each test case, check the following conditions to determine if a rectangle can be formed:\",\n    \"  a. Check if any two sticks have equal lengths and the third stick can be split into two equal parts.\",\n    \"  b. Check if the sum of the lengths of any two sticks equals the length of the third stick.\",\n    \"Store the result ('YES' or 'NO') for each test case based on the above conditions.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. A square is a special type of rectangle where all sides are equal.\n\n    'divide precisely one of them into two sections'\n    Explanation: This means that only one of the three sticks can be split into two parts, and the sum of the two parts must equal the original stick length.\n\n# [phrase showing quantity relationship]\n    'equal to the original length'\n    Explanation: The sum of the two sections after dividing a stick must be equal to the original length of the stick. This can be implemented by ensuring the sum of the two new lengths equals the original stick length.\n\n# [degree adverb]\n    'precisely'\n    Explanation: This indicates that only one stick can be divided, not more than one.\n\n# [code logic]\n    The conditions in step 2a and 2b should be checked simultaneously for each test case. This can be done using an if-else statement to check both conditions for forming a rectangle.\n\n# [edge case]\n    (1, 1, 2) = YES\n    Explanation: The third stick can be split into two parts of length 1 each, forming a rectangle with sides 1, 1, 1, 1 (a square).\n\n    (1, 2, 3) = NO\n    Explanation: No stick can be split to form a rectangle with the given lengths.\n\n    (2, 2, 4) = YES\n    Explanation: The third stick can be split into two parts of length 2 each, forming a rectangle with sides 2, 2, 2, 2 (a square).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if any two sticks are equal and the third can be split into two equal parts, or if the sum of any two sticks equals the third, will handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if any two sticks are equal and the third can be split into two equal parts\n    if (l1 == l2 and l3 % 2 == 0) or (l1 == l3 and l2 % 2 == 0) or (l2 == l3 and l1 % 2 == 0):\n        return True\n    # Check if the sum of any two sticks equals the third stick\n    if l1 + l2 == l3 or l1 + l3 == l2 or l2 + l3 == l1:\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the lengths of the sticks for each test case.\",\n      \"details\": \"Read the first line to get the number of test cases, t. For each subsequent line, read three integers representing the lengths of the sticks.\"\n    },\n    {\n      \"description\": \"Determine if it's possible to break one stick into two pieces to form a rectangle.\",\n      \"details\": \"For each test case, check if any of the three sticks can be split into two parts such that the resulting four sticks can form a rectangle.\"\n    },\n    {\n      \"description\": \"Check the conditions for forming a rectangle.\",\n      \"details\": \"A rectangle can be formed if there are two pairs of equal lengths among the four sticks.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, print 'YES' if a rectangle can be formed, otherwise print 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases, t.\",\n    \"For each test case, read the lengths of the three sticks.\",\n    \"For each stick, consider breaking it into two parts and check if the resulting four sticks can form a rectangle.\",\n    \"To form a rectangle, ensure there are two pairs of equal lengths among the four sticks.\",\n    \"If a rectangle can be formed, store 'YES' for that test case, otherwise store 'NO'.\",\n    \"After processing all test cases, output the results for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle'\n    Explanation: A rectangle is a quadrilateral with opposite sides equal. In this context, it means that after breaking one stick into two, the resulting four sticks should form two pairs of equal lengths.\n\n    'positive integer length'\n    Explanation: Each section of the broken stick must have a length greater than zero.\n\n# [phrase showing quantity relationship]\n    'precisely one'\n    Explanation: Only one of the three sticks can be divided into two sections.\n\n    'equal to'\n    Explanation: The total length of the pieces after breaking a stick must be equal to the original length of the stick.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"For each stick, consider breaking it into two parts and check if the resulting four sticks can form a rectangle\" and \"To form a rectangle, ensure there are two pairs of equal lengths among the four sticks\" should be implemented simultaneously. This can be done by iterating over each stick, breaking it into two possible parts, and checking if the resulting lengths can form two pairs of equal lengths.\n\n# [edge case]\n    1. (1, 1, 2) = YES\n       Explanation: Break the stick of length 2 into two sticks of length 1 each. The resulting lengths are 1, 1, 1, 1, which can form a rectangle (a square in this case).\n    \n    2. (1, 1, 1) = NO\n       Explanation: No matter how you break any stick, you cannot form two pairs of equal lengths with the resulting sticks.\n    \n    3. (10^8, 10^8, 1) = YES\n       Explanation: Break one of the sticks of length 10^8 into two sticks of length 5*10^7 each. The resulting lengths are 5*10^7, 5*10^7, 10^8, 1, which can form a rectangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if two pairs of equal lengths can be formed will naturally handle these cases.\n\nNO", "Round_0": {"code": "def can_form_rectangle(l1, l2, l3):\n    # Check if breaking any stick can form a rectangle\n    # Break l1 into two parts\n    if (l2 == l3 and l1 % 2 == 0) or (l1 == l2 + l3):\n        return True\n    # Break l2 into two parts\n    if (l1 == l3 and l2 % 2 == 0) or (l2 == l1 + l3):\n        return True\n    # Break l3 into two parts\n    if (l1 == l2 and l3 % 2 == 0) or (l3 == l1 + l2):\n        return True\n    return False\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        l1 = int(data[index])\n        l2 = int(data[index + 1])\n        l3 = int(data[index + 2])\n        index += 3\n        \n        if can_form_rectangle(l1, l2, l3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, true, false, false, false, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 111, "prompt": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYour task is to divide precisely one of them into two sections such that each section must have a positive integer length.\n\n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides.\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 90}
