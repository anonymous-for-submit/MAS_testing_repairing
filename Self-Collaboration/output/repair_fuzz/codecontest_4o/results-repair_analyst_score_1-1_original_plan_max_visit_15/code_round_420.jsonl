{"name": "1598_C. Delete Two Elements", "description": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "tags": ["data structures", "dp", "implementation", "math", "two pointers"], "difficulty": 9, "id": 1598, "sample_io": [{"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}], "test_list": [{"input": "1\n3\n228 1337 228\n", "output": ["0\n"]}, {"input": "1\n3\n228 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n2\n3\n"]}, {"input": "4\n4\n8 9 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n34 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 7\n", "output": ["6\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 1\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["0\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 9\n", "output": ["6\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 10\n5\n1 2 7 0 5\n7\n2 2 3 7 1 4 9\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 6\n5\n1 2 7 0 5\n7\n0 2 3 7 1 4 9\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 28 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n4\n8 8 5 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["0\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n4 2 3 7 1 4 7\n", "output": ["6\n0\n1\n3\n"]}, {"input": "4\n4\n5 8 11 8\n3\n9 24 10\n5\n1 4 2 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["2\n0\n2\n0\n"]}, {"input": "4\n4\n5 8 5 8\n3\n9 34 10\n5\n1 4 4 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["4\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 18 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 8 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 127\n", "output": ["0\n"]}, {"input": "1\n3\n40 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 9\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 0 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 -1 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n342 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 0 4 5 6 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 9\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 0\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 -1 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 8 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 3 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 14 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 103\n", "output": ["0\n"]}, {"input": "1\n3\n40 270 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 44\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 37 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 3\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n382 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 8\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 74\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n298 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n93 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 15\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 11\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 5\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 29 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n141 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 10 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 0\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 20\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 16\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 11 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n148 141 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 5\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n233 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 16\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 0\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 6 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 6 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n0 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 24 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 7 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 461 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 1 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 4 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 28\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 12\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}], "task_id": "codecontest/60", "repair_prompt": ["Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e. sum divided by n), and Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure that the solutions are derived efficiently considering large inputs. Consider optimizing the algorithm to ensure it runs within a reasonable time frame for the maximum constraints. Consider edge cases such as arrays with repetitive elements and verify your solution's correctness under these conditions.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e. sum divided by n). Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure that the solutions are derived efficiently considering large inputs. Consider optimizing the algorithm to ensure it runs within a reasonable time frame for the maximum constraints. Consider edge cases such as arrays with repetitive elements. Verify your solution's correctness under these conditions.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer), and Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure that the solutions are derived efficiently considering large inputs. Consider optimizing the algorithm to ensure it runs within a reasonable time frame for the maximum constraints. Consider edge cases such as arrays with repetitive elements and verify your solution's correctness under these conditions.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        count = 0\n        value_count = {}\n        \n        for value in a:\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        for value in a:\n            value_count[value] -= 1\n            needed_value = target_sum - value\n            if needed_value in value_count:\n                count += value_count[needed_value]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "completions": ["def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        from collections import defaultdict\n        count = defaultdict(int)\n        pairs = 0\n        \n        for num in a:\n            pairs += count[target_sum - num]\n            count[num] += 1\n        \n        results.append(pairs)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        if n == 3:\n            results.append(0)\n            continue\n        \n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        count = 0\n        freq = {}\n        \n        for num in a:\n            freq[num] = freq.get(num, 0) + 1\n        \n        for i in range(n):\n            freq[a[i]] -= 1\n            for j in range(i + 1, n):\n                freq[a[j]] -= 1\n                if total_sum - a[i] - a[j] == target_sum:\n                    count += 1\n                freq[a[j]] += 1\n            freq[a[i]] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "def find_valid_pairs(test_cases):\n    results = []\n    for n, array in test_cases:\n        total_sum = sum(array)\n        target_sum = total_sum * (n - 2) / n\n        \n        count = 0\n        freq = {}\n        \n        for num in array:\n            freq[num] = freq.get(num, 0) + 1\n        \n        for num in array:\n            freq[num] -= 1\n            needed = target_sum - (total_sum - num)\n            if needed in freq:\n                count += freq[needed]\n            freq[num] += 1\n        \n        results.append(count // 2)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = find_valid_pairs(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        mean = total_sum / n\n        \n        # If all elements are the same, any pair can be removed\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean\n        # Simplifying gives: a[i] + a[j] == 2 * mean\n        \n        target_sum = 2 * mean\n        count = 0\n        freq = defaultdict(int)\n        \n        for num in a:\n            # Check how many pairs can be formed with the current number\n            count += freq[target_sum - num]\n            # Update frequency map\n            freq[num] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "def find_valid_pairs(t, test_cases):\n    results = []\n    for n, a in test_cases:\n        if n <= 2:\n            results.append(0)\n            continue\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        pair_count = 0\n        value_count = {}\n        \n        for value in a:\n            value_count[value] = value_count.get(value, 0) + 1\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                if (total_sum - a[i] - a[j]) / (n - 2) == mean_k:\n                    pair_count += 1\n        \n        results.append(pair_count)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\ntest_cases = []\n\nfor _ in range(t):\n    n = int(data[index])\n    index += 1\n    a = list(map(int, data[index:index + n]))\n    index += n\n    test_cases.append((n, a))\n\nresults = find_valid_pairs(t, test_cases)\n\nfor result in results:\n    print(result)\n\nmain()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        \n        # Edge case: if all elements are the same\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # Calculate the target sum for the remaining elements\n        target_sum = total_sum * (n - 2) / n\n        \n        # Use a hashmap to count occurrences of elements\n        count = defaultdict(int)\n        for num in a:\n            count[num] += 1\n        \n        pair_count = 0\n        \n        # Iterate over each element and calculate the required pair\n        for num in a:\n            count[num] -= 1\n            required = target_sum - (total_sum - num)\n            if required in count:\n                pair_count += count[required]\n        \n        results.append(pair_count // 2)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    solve()\n\nmain()", "from collections import defaultdict\nimport sys\ninput = sys.stdin.read\n\ndef find_pairs(a, n, total_sum):\n    target_sum = 2 * total_sum / n\n    if target_sum != int(target_sum):\n        return 0\n    target_sum = int(target_sum)\n    \n    freq = defaultdict(int)\n    count = 0\n\n    for num in a:\n        complement = target_sum - num\n        if complement in freq:\n            count += freq[complement]\n        freq[num] += 1\n\n    return count\n\ndef main():\n    data = input().strip().split()\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        result = find_pairs(a, n, total_sum)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        \n        # Edge case: all elements are the same\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # To find pairs (i, j) such that removing them keeps the mean unchanged\n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == total_sum / n\n        # Simplifying gives: a[i] + a[j] == 2 * total_sum / n\n        \n        if total_sum * 2 % n != 0:\n            results.append(0)\n            continue\n        \n        target_sum = 2 * total_sum // n\n        count = 0\n        value_count = {}\n        \n        for value in a:\n            if target_sum - value in value_count:\n                count += value_count[target_sum - value]\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "def find_valid_pairs(t, test_cases):\n    results = []\n    for n, a in test_cases:\n        total_sum = sum(a)\n        mean = total_sum / n\n        target_sum = mean * (n - 2)\n\n        # Dictionary to count occurrences of each element\n        count_map = {}\n        for num in a:\n            if num in count_map:\n                count_map[num] += 1\n            else:\n                count_map[num] = 1\n\n        valid_pairs = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                # Calculate the sum of the remaining elements after removing a[i] and a[j]\n                remaining_sum = total_sum - a[i] - a[j]\n                if remaining_sum == target_sum:\n                    valid_pairs += 1\n\n        results.append(valid_pairs)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = find_valid_pairs(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        count = 0\n        value_count = {}\n        \n        for value in a:\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        for value in a:\n            value_count[value] -= 1\n            needed_value = target_sum - value\n            if needed_value in value_count:\n                count += value_count[needed_value]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"steps\": [\n        \"Sum all elements of the array a.\",\n        \"Divide the sum by n to get the mean k.\"\n      ]\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"steps\": [\n        \"For each pair of elements (a[i], a[j]), calculate the sum of the remaining elements after removing a[i] and a[j].\",\n        \"Check if the mean of the remaining elements equals k.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize the search for valid pairs.\",\n      \"steps\": [\n        \"Use mathematical properties to simplify the condition for mean equality.\",\n        \"Implement efficient search techniques to reduce time complexity, such as using hash maps or prefix sums.\"\n      ]\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"steps\": [\n        \"Iterate over each test case and apply the above logic.\",\n        \"Ensure the solution scales well with the constraints provided.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following:\",\n    \"Read the integer n and the array a.\",\n    \"Calculate the initial mean k of the array a.\",\n    \"Initialize a counter for valid pairs.\",\n    \"Iterate over all pairs of elements (i, j) with i < j:\",\n    \"Check if removing a[i] and a[j] keeps the mean unchanged using optimized conditions.\",\n    \"If valid, increment the counter.\",\n    \"Output the counter for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean (or average) of a set of numbers is the sum of the numbers divided by the count of numbers. In this requirement, it refers to the mean of the array elements before and after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This indicates that we need to remove precisely two elements from the array.\n    'equal to': This means the mean of the remaining elements should be the same as the original mean.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for calculating the mean and checking pairs should be considered simultaneously. Specifically, when iterating over pairs, the check for mean equality should be integrated within the loop to ensure efficiency.\n\n# [edge case] \n    Test case with all identical elements: [8, 8, 8, 8] = 6\n    Explanation: Any pair of elements can be removed since all elements are equal, resulting in the same mean.\n    \n    Test case with minimum elements: [50, 20, 10] = 0\n    Explanation: No pair can be removed to maintain the mean since the array is too small and diverse.\n    \n    Test case with sequential elements: [1, 2, 3, 4, 5, 6, 7] = 3\n    Explanation: Several pairs can be removed to maintain the mean, such as (1, 7), (2, 6), and (3, 5).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently.\n    Consider using a hashmap to store the frequency of elements and their contributions to the mean, allowing quick lookup and validation of pairs.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        count = 0\n        value_count = {}\n        \n        for value in a:\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        for value in a:\n            value_count[value] -= 1\n            needed_value = target_sum - value\n            if needed_value in value_count:\n                count += value_count[needed_value]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        count = 0\n        value_count = {}\n        \n        for value in a:\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        for value in a:\n            value_count[value] -= 1\n            needed_value = target_sum - value\n            if needed_value in value_count:\n                count += value_count[needed_value]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"steps\": [\n        \"Sum all elements of the array a.\",\n        \"Divide the sum by n to get the mean k.\"\n      ]\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"steps\": [\n        \"For each pair of elements (a[i], a[j]), calculate the sum of the remaining elements after removing a[i] and a[j].\",\n        \"Check if the mean of the remaining elements equals k.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize the search for valid pairs.\",\n      \"steps\": [\n        \"Use mathematical properties to simplify the condition for mean equality.\",\n        \"Implement efficient data structures or algorithms to reduce the complexity of finding valid pairs.\"\n      ]\n    },\n    {\n      \"description\": \"Handle edge cases and large inputs efficiently.\",\n      \"steps\": [\n        \"Consider arrays with repetitive elements and ensure the solution handles them correctly.\",\n        \"Ensure the solution runs efficiently for the maximum constraints.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following:\",\n    \"Read the integer n and the array a.\",\n    \"Calculate the initial mean k of the array a.\",\n    \"Initialize a counter for valid pairs.\",\n    \"Iterate over all pairs of elements (i, j) with i < j:\",\n    \"Calculate the sum of the remaining elements after removing a[i] and a[j].\",\n    \"Check if the mean of the remaining elements equals k.\",\n    \"If valid, increment the counter.\",\n    \"Output the counter for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean (or average) of a set of numbers is the sum of the numbers divided by the count of numbers. In this requirement, it refers to the mean of the array elements before and after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'number of pairs of positions [i, j] (i < j)': This indicates that we need to count all unique pairs of indices where the first index is less than the second.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for calculating the initial mean and identifying pairs should be considered simultaneously. Specifically, the calculation of the sum of the remaining elements and checking if the mean remains unchanged should be done in a single loop to optimize performance.\n\n# [edge case]\n    1. Input: [4, 4, 4, 4] = 6\n       Explanation: All elements are the same, so any pair of elements can be removed without changing the mean.\n    2. Input: [1, 1, 1, 1, 1] = 10\n       Explanation: Similar to the first case, all elements are identical, allowing any pair to be removed.\n    3. Input: [1, 2, 3, 4, 5] = 0\n       Explanation: No pair of elements can be removed to keep the mean unchanged because the elements are distinct and the mean changes with any removal.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently, especially for arrays with repetitive elements. This can be done by using a hashmap to count occurrences of each element and using mathematical properties to determine valid pairs without explicitly checking each pair.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        from collections import defaultdict\n        count = defaultdict(int)\n        pairs = 0\n        \n        for num in a:\n            pairs += count[target_sum - num]\n            count[num] += 1\n        \n        results.append(pairs)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 81)"}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        from collections import defaultdict\n        count = defaultdict(int)\n        pairs = 0\n        \n        for num in a:\n            pairs += count[target_sum - num]\n            count[num] += 1\n        \n        results.append(pairs)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Compute the sum of all elements in the array and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Determine the condition for maintaining the mean after removing two elements.\",\n      \"details\": \"For two elements a[i] and a[j] to be removed, the sum of the remaining elements must be equal to (n-2) * k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements that can be removed while maintaining the mean.\",\n      \"details\": \"For each pair (i, j), check if the sum of the remaining elements equals (n-2) * k. Use efficient data structures to optimize this check.\"\n    },\n    {\n      \"description\": \"Optimize the solution for large inputs.\",\n      \"details\": \"Consider using hash maps or other data structures to efficiently find pairs that satisfy the condition, especially for arrays with repetitive elements.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider cases where all elements are the same, or where no valid pairs exist.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"1. Read the integer n and the array a of n integers.\",\n    \"2. Calculate the sum of the array and derive the mean k.\",\n    \"3. Calculate the target sum for the remaining elements after removing two elements: target_sum = (n-2) * k.\",\n    \"4. Use a hash map to store the frequency of each element in the array.\",\n    \"5. Iterate over each element a[i] and for each a[i], iterate over each a[j] (j > i) to check if removing a[i] and a[j] results in the target_sum.\",\n    \"6. For each valid pair (i, j), increment the count of valid pairs.\",\n    \"7. Output the count of valid pairs for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean of an array is the sum of its elements divided by the number of elements. In this problem, it is used to determine if removing two elements from the array keeps the mean of the remaining elements the same as the original mean.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'number of pairs of positions [i, j] (i < j)': This indicates that we need to count all unique pairs of indices where the first index is less than the second.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Steps 2 and 3 should be considered simultaneously. \n    \"Calculate the target sum for the remaining elements after removing two elements: target_sum = (n-2) * k.\"\n    \"Use a hash map to store the frequency of each element in the array.\"\n    These steps can be combined by calculating the target sum and then using the hash map to efficiently find pairs that satisfy the condition.\n\n# [edge case] \n    Test case: [8, 8, 8, 8] = 6\n    Explanation: Any pair of elements can be removed since all of them are equal, resulting in 6 possible pairs.\n    \n    Test case: [50, 20, 10] = 0\n    Explanation: There is no way to delete two elements so the mathematical mean doesn't change.\n    \n    Test case: [1, 1, 1, 1, 1] = 10\n    Explanation: All elements are the same, so any pair can be removed, resulting in 10 possible pairs.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that the calculation of the target sum and the checking of pairs are done efficiently, especially for arrays with repetitive elements.\n    ```python\n    # Example code to handle edge cases\n    if n == 3:\n        return 0  # Cannot remove two elements from an array of size 3 and maintain the mean\n    if all(x == a[0] for x in a):\n        return (n * (n - 1)) // 2  # All elements are the same, so all pairs are valid\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        if n == 3:\n            results.append(0)\n            continue\n        \n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        count = 0\n        freq = {}\n        \n        for num in a:\n            freq[num] = freq.get(num, 0) + 1\n        \n        for i in range(n):\n            freq[a[i]] -= 1\n            for j in range(i + 1, n):\n                freq[a[j]] -= 1\n                if total_sum - a[i] - a[j] == target_sum:\n                    count += 1\n                freq[a[j]] += 1\n            freq[a[i]] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 97)"}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        if n == 3:\n            results.append(0)\n            continue\n        \n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        count = 0\n        freq = {}\n        \n        for num in a:\n            freq[num] = freq.get(num, 0) + 1\n        \n        for i in range(n):\n            freq[a[i]] -= 1\n            for j in range(i + 1, n):\n                freq[a[j]] -= 1\n                if total_sum - a[i] - a[j] == target_sum:\n                    count += 1\n                freq[a[j]] += 1\n            freq[a[i]] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"decomposition\": [\n    {\n      \"subproblem\": \"Calculate the initial mean of the array.\",\n      \"description\": \"Compute the sum of all elements in the array and divide by the number of elements to get the initial mean.\"\n    },\n    {\n      \"subproblem\": \"Identify pairs of elements whose removal maintains the mean.\",\n      \"description\": \"For each pair of elements, check if their removal results in the same mean for the remaining elements.\"\n    },\n    {\n      \"subproblem\": \"Optimize the search for valid pairs.\",\n      \"description\": \"Use mathematical properties and efficient data structures to reduce the number of checks needed for large arrays.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data.\",\n      \"description\": \"Parse the number of test cases and the arrays for each test case.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"description\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Calculate the initial mean of the array.\",\n      \"description\": \"Compute the sum of the array and divide by the number of elements to get the mean.\"\n    },\n    {\n      \"step\": \"Find pairs of elements to remove.\",\n      \"description\": \"Iterate over pairs of elements and check if their removal maintains the mean using efficient calculations.\"\n    },\n    {\n      \"step\": \"Count valid pairs.\",\n      \"description\": \"Keep a count of pairs that satisfy the condition and store the result for each test case.\"\n    },\n    {\n      \"step\": \"Output results.\",\n      \"description\": \"Print the number of valid pairs for each test case.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is the sum of its elements divided by the number of elements. The task requires maintaining this mean after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'number of pairs of positions [i, j] (i < j)': This indicates that we need to find pairs of indices where the first index is less than the second.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the initial mean of the array\" and \"Find pairs of elements to remove\" should be considered simultaneously. This can be done by calculating the mean once and then iterating over pairs to check the condition using the precomputed mean.\n\n# [edge case] \n    Input: 3\n           3\n           1 1 1\n    Output: 3\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n    \n    Input: 3\n           3\n           1 2 3\n    Output: 0\n    Explanation: No pair can be removed to maintain the mean because the elements are distinct and the mean changes with any removal.\n    \n    Input: 4\n           4\n           5 5 5 5\n    Output: 6\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently.\n    - Use a hashmap to store the frequency of each element.\n    - Calculate the required sum for pairs to maintain the mean.\n    - Iterate over elements and use the hashmap to find valid pairs efficiently.\n\nYES", "Round_0": {"code": "def find_valid_pairs(test_cases):\n    results = []\n    for n, array in test_cases:\n        total_sum = sum(array)\n        target_sum = total_sum * (n - 2) / n\n        \n        count = 0\n        freq = {}\n        \n        for num in array:\n            freq[num] = freq.get(num, 0) + 1\n        \n        for num in array:\n            freq[num] -= 1\n            needed = target_sum - (total_sum - num)\n            if needed in freq:\n                count += freq[needed]\n            freq[num] += 1\n        \n        results.append(count // 2)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = find_valid_pairs(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Calculate the initial mean of the array.\",\n        \"details\": \"Compute the sum of the array and divide by the number of elements to get the mean k.\"\n      },\n      {\n        \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n        \"details\": \"For each pair of elements (i, j), check if removing them keeps the mean of the remaining elements equal to k.\"\n      },\n      {\n        \"description\": \"Optimize the search for valid pairs.\",\n        \"details\": \"Use mathematical properties and efficient data structures to reduce the complexity of finding valid pairs.\"\n      },\n      {\n        \"description\": \"Handle edge cases.\",\n        \"details\": \"Consider arrays with repetitive elements and ensure the solution works for large inputs within constraints.\"\n      }\n    ]\n  },\n  \"high_level_plan\": {\n    \"steps\": [\n      {\n        \"step\": \"Read input data.\",\n        \"details\": \"Parse the number of test cases and the arrays for each test case.\"\n      },\n      {\n        \"step\": \"Calculate the mean of the array.\",\n        \"details\": \"For each test case, compute the sum of the array and divide by n to get the mean k.\"\n      },\n      {\n        \"step\": \"Find pairs of elements to remove.\",\n        \"details\": \"Iterate over pairs of elements and check if their removal keeps the mean unchanged using efficient methods.\"\n      },\n      {\n        \"step\": \"Count valid pairs.\",\n        \"details\": \"For each test case, count the number of valid pairs and store the result.\"\n      },\n      {\n        \"step\": \"Output results.\",\n        \"details\": \"Print the number of valid pairs for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is calculated by dividing the sum of its elements by the number of elements. The requirement is to maintain this mean after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This indicates that precisely two elements must be removed from the array.\n    'sum divided by n': This is the formula for calculating the mean, where 'sum' is the total of all elements and 'n' is the number of elements.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the mean of the array\" and \"Find pairs of elements to remove\" should be considered simultaneously. This can be done by calculating the mean once and then using it to efficiently check pairs of elements.\n\n# [edge case]\n    Input: [3, 3, 3, 3] = 6\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n    \n    Input: [1, 1, 1, 1, 1] = 10\n    Explanation: Similar to the first case, all elements are the same, allowing any pair to be removed.\n    \n    Input: [1000000000, 1000000000, 1000000000] = 0\n    Explanation: With only three elements, removing any two will leave one element, which cannot maintain the original mean.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, when all elements are the same, any pair can be removed. This can be optimized by checking if all elements are equal initially.\n\n    ```python\n    if all(x == array[0] for x in array):\n        return comb(n, 2)  # Combination formula to count pairs\n    ```\n\nYES", "Round_0": {"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        mean = total_sum / n\n        \n        # If all elements are the same, any pair can be removed\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean\n        # Simplifying gives: a[i] + a[j] == 2 * mean\n        \n        target_sum = 2 * mean\n        count = 0\n        freq = defaultdict(int)\n        \n        for num in a:\n            # Check how many pairs can be formed with the current number\n            count += freq[target_sum - num]\n            # Update frequency map\n            freq[num] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        mean = total_sum / n\n        \n        # If all elements are the same, any pair can be removed\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean\n        # Simplifying gives: a[i] + a[j] == 2 * mean\n        \n        target_sum = 2 * mean\n        count = 0\n        freq = defaultdict(int)\n        \n        for num in a:\n            # Check how many pairs can be formed with the current number\n            count += freq[target_sum - num]\n            # Update frequency map\n            freq[num] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean of the array.\",\n      \"details\": \"Compute the sum of the array and divide by the number of elements to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal maintains the mean.\",\n      \"details\": \"For each pair of elements (i, j), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Optimize the search for valid pairs.\",\n      \"details\": \"Use mathematical properties and efficient data structures to reduce the number of checks needed for large arrays.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider arrays with repetitive elements and ensure the solution works for all possible input sizes and values.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data.\",\n      \"details\": \"Parse the number of test cases and the arrays for each test case.\"\n    },\n    {\n      \"step\": \"Calculate the mean for each test case.\",\n      \"details\": \"Compute the sum of the array and divide by n to get the mean k.\"\n    },\n    {\n      \"step\": \"Iterate over pairs of elements.\",\n      \"details\": \"For each pair (i, j), calculate the sum of the remaining elements and check if the mean remains k.\"\n    },\n    {\n      \"step\": \"Optimize pair checking.\",\n      \"details\": \"Use hash maps or other data structures to efficiently find pairs that satisfy the condition.\"\n    },\n    {\n      \"step\": \"Output the result for each test case.\",\n      \"details\": \"Print the number of valid pairs for each test case.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is calculated by dividing the sum of its elements by the number of elements. The requirement is to maintain this mean after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This indicates that precisely two elements must be removed from the array.\n    'sum divided by n': This is the formula for calculating the mean, where 'sum' is the total of all elements and 'n' is the number of elements.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the mean for each test case\" and \"Iterate over pairs of elements\" should be considered simultaneously. This can be done by calculating the mean once and then iterating over pairs to check the condition without recalculating the mean each time.\n\n# [edge case]\n    Input: [3, 3, 3, 3] = 6\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n    \n    Input: [1, 1, 1, 1, 1] = 10\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n    \n    Input: [1000000000, 1000000000, 1000000000] = 0\n    Explanation: The array is too small to remove two elements and maintain the mean, so the output is 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where all elements are the same or the array is too small to remove two elements.\n    ```python\n    if n <= 2:\n        print(0)\n        continue\n    if all(x == a[0] for x in a):\n        print((n * (n - 1)) // 2)\n        continue\n    ```\n\nYES", "Round_0": {"code": "def find_valid_pairs(t, test_cases):\n    results = []\n    for n, a in test_cases:\n        if n <= 2:\n            results.append(0)\n            continue\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        pair_count = 0\n        value_count = {}\n        \n        for value in a:\n            value_count[value] = value_count.get(value, 0) + 1\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                if (total_sum - a[i] - a[j]) / (n - 2) == mean_k:\n                    pair_count += 1\n        \n        results.append(pair_count)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\ntest_cases = []\n\nfor _ in range(t):\n    n = int(data[index])\n    index += 1\n    a = list(map(int, data[index:index + n]))\n    index += n\n    test_cases.append((n, a))\n\nresults = find_valid_pairs(t, test_cases)\n\nfor result in results:\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def find_valid_pairs(t, test_cases):\n    results = []\n    for n, a in test_cases:\n        if n <= 2:\n            results.append(0)\n            continue\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        pair_count = 0\n        value_count = {}\n        \n        for value in a:\n            value_count[value] = value_count.get(value, 0) + 1\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                if (total_sum - a[i] - a[j]) / (n - 2) == mean_k:\n                    pair_count += 1\n        \n        results.append(pair_count)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\ntest_cases = []\n\nfor _ in range(t):\n    n = int(data[index])\n    index += 1\n    a = list(map(int, data[index:index + n]))\n    index += n\n    test_cases.append((n, a))\n\nresults = find_valid_pairs(t, test_cases)\n\nfor result in results:\n    print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Sum all elements of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Optimize the search for valid pairs.\",\n      \"details\": \"Use mathematical properties and efficient data structures to reduce the time complexity of finding valid pairs.\"\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"details\": \"Ensure the solution can handle up to 10,000 test cases with a total of 200,000 elements efficiently.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases and for each test case, read the number of elements n and the array a.\"\n    },\n    {\n      \"step\": \"Calculate the total sum and mean k for each test case\",\n      \"details\": \"Compute the sum of the array and divide by n to get the mean k.\"\n    },\n    {\n      \"step\": \"Iterate over all possible pairs of elements\",\n      \"details\": \"For each pair (i, j) with i < j, calculate the sum of the remaining elements and check if their mean equals k.\"\n    },\n    {\n      \"step\": \"Use a hashmap or similar data structure to optimize pair checking\",\n      \"details\": \"Store and retrieve necessary information to quickly determine if a pair can be removed without changing the mean.\"\n    },\n    {\n      \"step\": \"Count and output the number of valid pairs for each test case\",\n      \"details\": \"For each test case, output the count of pairs that satisfy the condition.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean (or average) of a set of numbers is the sum of the numbers divided by the count of numbers. In this requirement, it refers to the mean of the array elements before and after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that precisely two elements must be removed from the array.\n    'number of pairs of positions [i, j] (i < j)': This indicates that we need to find all unique pairs of indices where the first index is less than the second.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the total sum and mean k for each test case\" and \"Iterate over all possible pairs of elements\" should be considered simultaneously. \n    Explanation: While iterating over pairs, we can use the pre-calculated sum to check if removing a pair keeps the mean unchanged. This can be done in a single loop with efficient checks.\n\n# [edge case]\n    1. Input: 3 0 0 0\n       Output: 1\n       Explanation: With all elements being zero, any pair removal will keep the mean unchanged.\n    2. Input: 3 1 1 1\n       Output: 1\n       Explanation: All elements are the same, so any pair removal will keep the mean unchanged.\n    3. Input: 4 1 2 3 4\n       Output: 0\n       Explanation: No pair of elements can be removed to keep the mean unchanged.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Explanation: Specifically, we need to handle cases where all elements are the same or zero, as these can be optimized to return the number of combinations directly.\n    ```python\n    if all(x == a[0] for x in a):\n        return comb(n, 2)  # Return the number of ways to choose 2 elements from n\n    ```\n\nYES", "Round_0": {"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        \n        # Edge case: if all elements are the same\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # Calculate the target sum for the remaining elements\n        target_sum = total_sum * (n - 2) / n\n        \n        # Use a hashmap to count occurrences of elements\n        count = defaultdict(int)\n        for num in a:\n            count[num] += 1\n        \n        pair_count = 0\n        \n        # Iterate over each element and calculate the required pair\n        for num in a:\n            count[num] -= 1\n            required = target_sum - (total_sum - num)\n            if required in count:\n                pair_count += count[required]\n        \n        results.append(pair_count // 2)\n    \n    for result in results:\n        print(result)\n\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 91)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        \n        # Edge case: if all elements are the same\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # Calculate the target sum for the remaining elements\n        target_sum = total_sum * (n - 2) / n\n        \n        # Use a hashmap to count occurrences of elements\n        count = defaultdict(int)\n        for num in a:\n            count[num] += 1\n        \n        pair_count = 0\n        \n        # Iterate over each element and calculate the required pair\n        for num in a:\n            count[num] -= 1\n            required = target_sum - (total_sum - num)\n            if required in count:\n                pair_count += count[required]\n        \n        results.append(pair_count // 2)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    solve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Compute the sum of the array and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Determine the condition for maintaining the mean after removing two elements.\",\n      \"details\": \"For the mean to remain the same after removing two elements, the sum of the removed elements must equal 2 * k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose sum equals 2 * k.\",\n      \"details\": \"Iterate through the array to find all pairs (i, j) such that a[i] + a[j] = 2 * k.\"\n    },\n    {\n      \"description\": \"Optimize the search for pairs using a hashmap or similar data structure.\",\n      \"details\": \"Use a hashmap to store the frequency of each element and efficiently find pairs that satisfy the condition.\"\n    },\n    {\n      \"description\": \"Handle edge cases such as arrays with repetitive elements.\",\n      \"details\": \"Ensure that the solution accounts for duplicate elements and correctly counts valid pairs.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"1. Read the integer n and the array a of n elements.\",\n    \"2. Calculate the sum of the array and determine the mean k.\",\n    \"3. Calculate the target sum for pairs, which is 2 * k.\",\n    \"4. Initialize a hashmap to store the frequency of each element in the array.\",\n    \"5. Iterate through the array to find pairs (i, j) such that a[i] + a[j] = 2 * k using the hashmap for efficient lookup.\",\n    \"6. Count the number of valid pairs and store the result.\",\n    \"7. Output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is the sum of its elements divided by the number of elements. In this problem, the mean must remain unchanged after removing two elements.\n\n# [phrase showing quantity relationship]\n    'sum divided by n': This indicates the calculation of the mean, which is the total sum of elements divided by the number of elements.\n    '2 * k': This means that the sum of the two elements removed must equal twice the mean of the original array.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to calculating the mean and finding pairs should be considered simultaneously:\n    \"Calculate the sum of the array and determine the mean k.\"\n    \"Calculate the target sum for pairs, which is 2 * k.\"\n    \"Iterate through the array to find pairs (i, j) such that a[i] + a[j] = 2 * k using the hashmap for efficient lookup.\"\n    These steps can be implemented in a single loop where the mean is calculated, and pairs are checked using a hashmap.\n\n# [edge case]\n    Test case with all elements equal: [8, 8, 8, 8] = 6\n    Explanation: Any pair of elements can be removed since all are equal, maintaining the mean.\n    \n    Test case with no valid pairs: [50, 20, 10] = 0\n    Explanation: No two elements can be removed to maintain the mean.\n    \n    Test case with repetitive elements: [1, 1, 1, 1, 1] = 10\n    Explanation: All pairs of elements can be removed since they are equal, maintaining the mean.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases involving repetitive elements.\n    Use a hashmap to count occurrences and efficiently find pairs:\n    ```python\n    from collections import defaultdict\n\n    def find_pairs(a, k):\n        target_sum = 2 * k\n        freq = defaultdict(int)\n        count = 0\n\n        for num in a:\n            complement = target_sum - num\n            if complement in freq:\n                count += freq[complement]\n            freq[num] += 1\n\n        return count\n    ```\n\nYES", "Round_0": {"code": "from collections import defaultdict\nimport sys\ninput = sys.stdin.read\n\ndef find_pairs(a, n, total_sum):\n    target_sum = 2 * total_sum / n\n    if target_sum != int(target_sum):\n        return 0\n    target_sum = int(target_sum)\n    \n    freq = defaultdict(int)\n    count = 0\n\n    for num in a:\n        complement = target_sum - num\n        if complement in freq:\n            count += freq[complement]\n        freq[num] += 1\n\n    return count\n\ndef main():\n    data = input().strip().split()\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        result = find_pairs(a, n, total_sum)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the mathematical mean k of the original array a.\",\n      \"details\": \"Sum all elements of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Optimize the search for valid pairs.\",\n      \"details\": \"Use a hashmap or similar data structure to efficiently find pairs that satisfy the condition, especially for large inputs.\"\n    },\n    {\n      \"description\": \"Handle edge cases.\",\n      \"details\": \"Consider cases with repetitive elements and ensure the solution is efficient for maximum constraints.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data.\",\n      \"details\": \"Parse the number of test cases and for each test case, read n and the array a.\"\n    },\n    {\n      \"step\": \"Calculate the mean k for each test case.\",\n      \"details\": \"Compute the sum of the array and divide by n to get k.\"\n    },\n    {\n      \"step\": \"Find valid pairs of indices (i, j) for each test case.\",\n      \"details\": \"Iterate over all pairs of indices (i, j) and check if removing these elements keeps the mean unchanged. Use a hashmap to store and check necessary conditions efficiently.\"\n    },\n    {\n      \"step\": \"Count and store the number of valid pairs for each test case.\",\n      \"details\": \"For each test case, count the number of valid pairs and store the result.\"\n    },\n    {\n      \"step\": \"Output the results.\",\n      \"details\": \"Print the number of valid pairs for each test case.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean of an array is the sum of its elements divided by the number of elements. It represents the average value of the array.\n\n    'delete exactly two elements'\n    Explanation: The task requires removing two elements from the array such that the mean of the remaining elements is unchanged.\n\n# [phrase showing quantity relationship]\n    'exactly two'\n    Explanation: This indicates that precisely two elements must be removed, not more or less, to achieve the desired condition.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the mean k for each test case\" and \"Find valid pairs of indices (i, j) for each test case\" should be considered simultaneously. \n    Explanation: While iterating over pairs, the mean calculation can be used to check the condition for each pair efficiently.\n\n# [edge case] \n    Input: 3\n    3\n    1 1 1\n    Expected Output: 3\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n\n    Input: 4\n    5\n    10 10 10 10 10\n    Expected Output: 10\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n\n    Input: 5\n    3\n    1000000000 1000000000 1000000000\n    Expected Output: 3\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where all elements are the same.\n    Explanation: If all elements are the same, the number of valid pairs is given by the combination formula C(n, 2) = n * (n - 1) / 2, where n is the number of elements.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        # Edge case: all elements are the same\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # To find pairs (i, j) such that removing them keeps the mean unchanged\n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean_k\n        # Simplifying gives: a[i] + a[j] == 2 * mean_k\n        \n        target_sum = 2 * mean_k\n        count = 0\n        value_count = {}\n        \n        for value in a:\n            if target_sum - value in value_count:\n                count += value_count[target_sum - value]\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        \n        # Edge case: all elements are the same\n        if all(x == a[0] for x in a):\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # To find pairs (i, j) such that removing them keeps the mean unchanged\n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == total_sum / n\n        # Simplifying gives: a[i] + a[j] == 2 * total_sum / n\n        \n        if total_sum * 2 % n != 0:\n            results.append(0)\n            continue\n        \n        target_sum = 2 * total_sum // n\n        count = 0\n        value_count = {}\n        \n        for value in a:\n            if target_sum - value in value_count:\n                count += value_count[target_sum - value]\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Calculate the initial mean of the array.\",\n        \"details\": \"Compute the sum of the array and divide by the number of elements to get the mean k.\"\n      },\n      {\n        \"description\": \"Identify pairs of elements whose removal maintains the mean.\",\n        \"details\": \"For each pair of elements (i, j), check if removing them keeps the mean of the remaining elements equal to k.\"\n      },\n      {\n        \"description\": \"Optimize the search for valid pairs.\",\n        \"details\": \"Use mathematical properties and efficient data structures to reduce the number of checks needed for large arrays.\"\n      },\n      {\n        \"description\": \"Handle edge cases.\",\n        \"details\": \"Consider arrays with repetitive elements and ensure the solution works for all possible input sizes and values.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read input data.\",\n        \"details\": \"Parse the number of test cases and the arrays for each test case.\"\n      },\n      {\n        \"step\": \"Compute the mean for each test case.\",\n        \"details\": \"Calculate the sum of the array and divide by the number of elements to find the mean k.\"\n      },\n      {\n        \"step\": \"Find valid pairs of elements to remove.\",\n        \"details\": \"Iterate over pairs of elements and check if their removal maintains the mean using efficient checks.\"\n      },\n      {\n        \"step\": \"Optimize pair search.\",\n        \"details\": \"Implement a strategy to efficiently find pairs using mathematical insights and data structures like hash maps.\"\n      },\n      {\n        \"step\": \"Output results.\",\n        \"details\": \"For each test case, output the number of valid pairs found.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean of an array is the sum of its elements divided by the number of elements. The task is to find pairs of elements whose removal keeps the mean unchanged.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This indicates that we need to remove precisely two elements from the array.\n    'number of pairs': We need to count the pairs of positions (i, j) that satisfy the condition.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Compute the mean for each test case\" and \"Find valid pairs of elements to remove\" should be considered simultaneously. This can be done by calculating the mean once and then iterating over pairs to check the condition in a single loop.\n\n# [edge case] \n    Input: [3, 3, 3, 3] = 6\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n    Input: [1, 1, 1, 1, 1] = 10\n    Explanation: Similar to the first case, all elements are identical, allowing any pair to be removed.\n    Input: [10, 20, 30] = 0\n    Explanation: No pair can be removed to maintain the mean because the elements are distinct.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Implement a check for arrays with identical elements to quickly determine the number of valid pairs without iterating over all possibilities.\n\nYES", "Round_0": {"code": "def find_valid_pairs(t, test_cases):\n    results = []\n    for n, a in test_cases:\n        total_sum = sum(a)\n        mean = total_sum / n\n        target_sum = mean * (n - 2)\n\n        # Dictionary to count occurrences of each element\n        count_map = {}\n        for num in a:\n            if num in count_map:\n                count_map[num] += 1\n            else:\n                count_map[num] = 1\n\n        valid_pairs = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                # Calculate the sum of the remaining elements after removing a[i] and a[j]\n                remaining_sum = total_sum - a[i] - a[j]\n                if remaining_sum == target_sum:\n                    valid_pairs += 1\n\n        results.append(valid_pairs)\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = find_valid_pairs(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"steps\": [\n        \"Sum all elements of the array a.\",\n        \"Divide the sum by n to get the mean k.\"\n      ]\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"steps\": [\n        \"For each pair of elements (a[i], a[j]), calculate the sum of the remaining elements after removing a[i] and a[j].\",\n        \"Check if the mean of the remaining elements equals k.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize the search for valid pairs.\",\n      \"steps\": [\n        \"Use mathematical properties to simplify the condition for mean equality.\",\n        \"Implement efficient search techniques to reduce time complexity, such as using hash maps or prefix sums.\"\n      ]\n    },\n    {\n      \"description\": \"Handle multiple test cases efficiently.\",\n      \"steps\": [\n        \"Iterate over each test case and apply the above logic.\",\n        \"Ensure the solution scales well with the constraints provided.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following:\",\n    \"Read the integer n and the array a.\",\n    \"Calculate the initial mean k of the array a.\",\n    \"Initialize a counter for valid pairs.\",\n    \"Iterate over all pairs of elements (i, j) with i < j:\",\n    \"Check if removing a[i] and a[j] keeps the mean unchanged using optimized conditions.\",\n    \"If valid, increment the counter.\",\n    \"Output the counter for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean (or average) of a set of numbers is the sum of the numbers divided by the count of numbers. In this requirement, it refers to the mean of the array elements before and after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This indicates that we need to remove precisely two elements from the array.\n    'equal to': This means the mean of the remaining elements should be the same as the original mean.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for calculating the mean and checking pairs should be considered simultaneously. Specifically, when iterating over pairs, the check for mean equality should be integrated within the loop to ensure efficiency.\n\n# [edge case] \n    Test case with all identical elements: [8, 8, 8, 8] = 6\n    Explanation: Any pair of elements can be removed since all elements are equal, resulting in the same mean.\n    \n    Test case with minimum elements: [50, 20, 10] = 0\n    Explanation: No pair can be removed to maintain the mean since the array is too small and diverse.\n    \n    Test case with sequential elements: [1, 2, 3, 4, 5, 6, 7] = 3\n    Explanation: Several pairs can be removed to maintain the mean, such as (1, 7), (2, 6), and (3, 5).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently.\n    Consider using a hashmap to store the frequency of elements and their contributions to the mean, allowing quick lookup and validation of pairs.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        count = 0\n        value_count = {}\n        \n        for value in a:\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        for value in a:\n            value_count[value] -= 1\n            needed_value = target_sum - value\n            if needed_value in value_count:\n                count += value_count[needed_value]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2) / n\n        \n        count = 0\n        value_count = {}\n        \n        for value in a:\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        for value in a:\n            value_count[value] -= 1\n            needed_value = target_sum - value\n            if needed_value in value_count:\n                count += value_count[needed_value]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}], "scores": [], "pass_results": [false, false, true, true, false, true, true, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 420, "prompt": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e. sum divided by n), and Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure that the solutions are derived efficiently considering large inputs. Consider optimizing the algorithm to ensure it runs within a reasonable time frame for the maximum constraints. Consider edge cases such as arrays with repetitive elements and verify your solution's correctness under these conditions.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 241}
