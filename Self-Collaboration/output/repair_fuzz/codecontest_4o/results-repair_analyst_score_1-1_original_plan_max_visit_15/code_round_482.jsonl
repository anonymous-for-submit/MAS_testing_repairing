{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "repair_prompt": ["The robot is situated on a checkered rectangular board of dimensions n \u00d7 m (with n rows and m columns). The rows are numbered from 1 to n starting from the top to the bottom, and the columns are numbered from 1 to m starting from the left to the right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is represented by one of the symbols 'L', 'R', 'D', or 'U'. These symbol commands are responsible for triggering movement to the left, right, down, or up, respectively.\n\nThe robot can commence its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's objective is to carry out the maximum number of commands possible without falling off the board. For instance, on a 3 \u00d7 3 board, if the robot begins a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nAscertain the cell from which the robot ought to begin its movement in order to carry out as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The robot is situated on a checkered rectangular board of dimensions n \u00d7 m (with n rows and m columns). The rows are numbered from 1 to n starting from the top to the bottom, and the columns are numbered from 1 to m starting from the left to the right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is represented by one of the symbols 'L', 'R', 'D', or 'U'. These symbol commands are responsible for triggering movement to the left or right. They can also trigger movement down or up, respectively.\n\nThe robot can commence its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's objective is to carry out the maximum number of commands possible without falling off the board. For instance, on a 3 \u00d7 3 board, if the robot begins a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nAscertain the cell from which the robot ought to begin its movement in order to carry out as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The robot is situated on a checkered rectangular board of dimensions n \u00d7 m (with n rows and m columns). The rows are numbered from 1 to n starting from the top to the bottom, and the columns are numbered from 1 to m starting from the left to the right. The robot is able to move from the current cell to one of the four cells adjacent by side. The sequence of commands s executed by the robot is given, and each command is represented by one of the symbols 'L', 'R', 'D', or 'U' which are responsible for triggering movement to the left, right, down, or up, respectively. The robot can commence its movement in any cell and executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks, and a command that causes the robot to break is not considered successfully executed. The robot's objective is to carry out the maximum number of commands possible without falling off the board. For instance, on a 3 \u00d7 3 board, if the robot begins a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column). Ascertain the cell from which the robot ought to begin its movement in order to carry out as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def find_starting_position(n, m, commands):\n    # Initialize variables to track the best starting position\n    max_commands_executed = 0\n    best_starting_position = (1, 1)\n\n    # Iterate over all possible starting positions\n    for start_row in range(1, n + 1):\n        for start_col in range(1, m + 1):\n            current_row, current_col = start_row, start_col\n            commands_executed = 0\n\n            # Simulate the robot's movement\n            for command in commands:\n                if command == 'L':\n                    current_col -= 1\n                elif command == 'R':\n                    current_col += 1\n                elif command == 'U':\n                    current_row -= 1\n                elif command == 'D':\n                    current_row += 1\n\n                # Check if the robot falls off the board\n                if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                    break\n\n                commands_executed += 1\n\n            # Update the best starting position if this one is better\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_starting_position = (start_row, start_col)\n\n    return best_starting_position\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n\n        result = find_starting_position(n, m, commands)\n        results.append(f\"{result[0]} {result[1]}\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def find_starting_position(n, m, commands):\n    # Initialize variables to track the boundaries of the movement\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position of the robot\n    current_row, current_col = 0, 0\n    \n    # Iterate over each command to determine the movement boundaries\n    for command in commands:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update the boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the starting position based on the boundaries\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n    \n    # Ensure the starting position is within the board limits\n    if start_row + max_row <= n and start_col + max_col <= m:\n        return start_row, start_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n        \n        result = find_starting_position(n, m, commands)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        # Initialize the best starting position\n        best_r, best_c = 1, 1\n        max_commands = 0\n        \n        # Try all possible starting positions\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n                    \n                    # Check if the robot falls off the board\n                    if r < 1 or r > n or c < 1 or c > m:\n                        break\n                    commands_executed += 1\n                \n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_r, best_c = start_r, start_c\n        \n        results.append(f\"{best_r} {best_c}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize the best starting position and max commands executed\n        best_r, best_c = 1, 1\n        max_commands = 0\n        \n        # Try all possible starting positions\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n                \n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n                    \n                    # Check if the robot falls off the board\n                    if r < 1 or r > n or c < 1 or c > m:\n                        break\n                    \n                    commands_executed += 1\n                \n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_r, best_c = start_r, start_c\n        \n        results.append(f\"{best_r} {best_c}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def simulate_robot_movement(n, m, commands):\n    # Initialize variables to track the best starting position\n    max_commands_executed = 0\n    best_start_position = (1, 1)\n    \n    # Iterate over all possible starting positions\n    for start_row in range(1, n + 1):\n        for start_col in range(1, m + 1):\n            current_row, current_col = start_row, start_col\n            commands_executed = 0\n            \n            # Simulate the robot's movement\n            for command in commands:\n                if command == 'L':\n                    current_col -= 1\n                elif command == 'R':\n                    current_col += 1\n                elif command == 'U':\n                    current_row -= 1\n                elif command == 'D':\n                    current_row += 1\n                \n                # Check if the robot is still on the board\n                if 1 <= current_row <= n and 1 <= current_col <= m:\n                    commands_executed += 1\n                else:\n                    break\n            \n            # Update the best starting position if this one is better\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_start_position = (start_row, start_col)\n    \n    return best_start_position\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        commands = data[index + 2]\n        index += 3\n        \n        # Get the best starting position for this test case\n        best_start_position = simulate_robot_movement(n, m, commands)\n        results.append(best_start_position)\n    \n    # Output the results\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_optimal_starting_position(n, m, commands):\n    # Initialize variables to track the boundaries of the movement\n    min_row, max_row, min_col, max_col = 0, 0, 0, 0\n    current_row, current_col = 0, 0\n\n    # Simulate the movement to find the boundaries\n    for command in commands:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n\n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n\n    # Calculate the optimal starting position\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n\n    # Ensure the starting position is within the board\n    if start_row + max_row <= n and start_col + max_col <= m:\n        return start_row, start_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n\n        result = find_optimal_starting_position(n, m, commands)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n        else:\n            results.append(\"1 1\")  # Fallback for edge cases\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_optimal_starting_position(t, test_cases):\n    results = []\n    for n, m, s in test_cases:\n        # Initialize variables to track the best starting position\n        max_commands = 0\n        best_start = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                # Simulate the robot's movement\n                row, col = start_row, start_col\n                commands_executed = 0\n\n                for command in s:\n                    if command == 'L':\n                        col -= 1\n                    elif command == 'R':\n                        col += 1\n                    elif command == 'U':\n                        row -= 1\n                    elif command == 'D':\n                        row += 1\n\n                    # Check if the robot falls off the board\n                    if row < 1 or row > n or col < 1 or col > m:\n                        break\n\n                    commands_executed += 1\n\n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_start = (start_row, start_col)\n\n        results.append(best_start)\n\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    t = int(data[0])\n    index = 1\n    test_cases = []\n\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        test_cases.append((n, m, s))\n        index += 3\n\n    results = find_optimal_starting_position(t, test_cases)\n\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def simulate_robot_movement(n, m, commands):\n    # Initialize the best starting position and the maximum number of commands executed\n    max_executed = 0\n    best_start = (1, 1)\n    \n    # Iterate over all possible starting positions\n    for start_row in range(1, n + 1):\n        for start_col in range(1, m + 1):\n            # Initialize the current position\n            current_row, current_col = start_row, start_col\n            executed_commands = 0\n            \n            # Simulate the movement of the robot\n            for command in commands:\n                if command == 'L':\n                    current_col -= 1\n                elif command == 'R':\n                    current_col += 1\n                elif command == 'U':\n                    current_row -= 1\n                elif command == 'D':\n                    current_row += 1\n                \n                # Check if the robot is still on the board\n                if 1 <= current_row <= n and 1 <= current_col <= m:\n                    executed_commands += 1\n                else:\n                    break\n            \n            # Update the best starting position if this one is better\n            if executed_commands > max_executed:\n                max_executed = executed_commands\n                best_start = (start_row, start_col)\n    \n    return best_start\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n        \n        # Get the best starting position for this test case\n        best_start = simulate_robot_movement(n, m, commands)\n        results.append(f\"{best_start[0]} {best_start[1]}\")\n    \n    # Print all results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize variables to track the best starting position\n        max_commands = 0\n        best_start = (1, 1)\n        \n        # Try each possible starting position\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                row, col = start_row, start_col\n                commands_executed = 0\n                \n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        col -= 1\n                    elif command == 'R':\n                        col += 1\n                    elif command == 'U':\n                        row -= 1\n                    elif command == 'D':\n                        row += 1\n                    \n                    # Check if the robot is still on the board\n                    if 1 <= row <= n and 1 <= col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n                \n                # Update the best starting position if this one is better\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_start = (start_row, start_col)\n        \n        # Store the result for this test case\n        results.append(f\"{best_start[0]} {best_start[1]}\")\n    \n    # Output all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize variables to track the best starting position\n        max_commands = 0\n        best_r, best_c = 1, 1\n        \n        # Try all possible starting positions\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n                \n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n                    \n                    # Check if the robot falls off the board\n                    if r < 1 or r > n or c < 1 or c > m:\n                        break\n                    commands_executed += 1\n                \n                # Update the best starting position if this one is better\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_r, best_c = start_r, start_c\n        \n        results.append(f\"{best_r} {best_c}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_starting_position(n, m, commands):\n    # Initialize variables to track the best starting position\n    max_commands_executed = 0\n    best_starting_position = (1, 1)\n\n    # Iterate over all possible starting positions\n    for start_row in range(1, n + 1):\n        for start_col in range(1, m + 1):\n            current_row, current_col = start_row, start_col\n            commands_executed = 0\n\n            # Simulate the robot's movement\n            for command in commands:\n                if command == 'L':\n                    current_col -= 1\n                elif command == 'R':\n                    current_col += 1\n                elif command == 'U':\n                    current_row -= 1\n                elif command == 'D':\n                    current_row += 1\n\n                # Check if the robot falls off the board\n                if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                    break\n\n                commands_executed += 1\n\n            # Update the best starting position if this one is better\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_starting_position = (start_row, start_col)\n\n    return best_starting_position\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n\n        result = find_starting_position(n, m, commands)\n        results.append(f\"{result[0]} {result[1]}\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"details\": \"Read the input data and split it into individual test cases. For each test case, extract the values of n, m, and the command sequence s.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case.\",\n      \"details\": \"For each test case, iterate over all possible starting positions on the board. For each starting position, simulate the execution of the command sequence s and track the number of successfully executed commands.\"\n    },\n    {\n      \"description\": \"Determine the starting position that allows the maximum number of commands to be executed.\",\n      \"details\": \"For each test case, compare the results of the simulations for all starting positions and identify the position that allows the maximum number of commands to be executed without the robot falling off the board.\"\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"details\": \"For each test case, output the row and column of the starting position that allows the maximum number of commands to be executed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, read the board dimensions and command sequence.\",\n    \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n    \"Iterate over all possible starting positions on the board.\",\n    \"For each starting position, simulate the robot's movement according to the command sequence.\",\n    \"Check if the robot falls off the board during the simulation. If not, update the maximum commands executed and starting position if this position allows more commands.\",\n    \"After evaluating all starting positions, store the optimal starting position for the test case.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: This refers to the grid-like structure of the board where the robot can move. Each cell is a square on the board.\n\n    'sequence of commands'\n    Explanation: This is the list of movements ('L', 'R', 'D', 'U') that the robot will execute in order.\n\n    'maximum number of commands'\n    Explanation: The goal is to execute as many commands as possible without the robot falling off the board.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands': This means the highest possible count of commands executed without the robot falling off the board. In code, this can be implemented by tracking the number of commands executed successfully and comparing it across different starting positions.\n\n# [degree adverb]\n    'maximum': This indicates the need to find the starting position that allows the most commands to be executed. In code, this involves iterating over all possible starting positions and keeping track of the one that results in the highest number of successful commands.\n\n# [code logic]\n    The steps related to simulating the robot's movement and checking if it falls off the board should be implemented simultaneously. Specifically:\n    - \"Iterate over all possible starting positions on the board.\"\n    - \"For each starting position, simulate the robot's movement according to the command sequence.\"\n    - \"Check if the robot falls off the board during the simulation.\"\n    These can be implemented in a loop where each starting position is tested, and the robot's movement is simulated until it either completes the sequence or falls off the board.\n\n# [edge case]\n    1 1\n    L = 1 1\n    Explanation: On a 1x1 board, any movement will cause the robot to fall off immediately. The only starting position is (1, 1), and no commands can be executed successfully.\n\n    2 2\n    LR = 1 1\n    Explanation: On a 2x2 board, starting at (1, 1) allows the robot to execute the 'L' command without falling off, but the 'R' command will cause it to fall off. Starting at (1, 1) allows the maximum number of commands (1) to be executed.\n\n    3 3\n    UUU = 3 1\n    Explanation: Starting at (3, 1) allows the robot to execute all 'U' commands without falling off, ending at (1,", "Round_0": {"code": "def find_starting_position(n, m, commands):\n    # Initialize variables to track the best starting position\n    max_commands_executed = 0\n    best_starting_position = (1, 1)\n\n    # Iterate over all possible starting positions\n    for start_row in range(1, n + 1):\n        for start_col in range(1, m + 1):\n            current_row, current_col = start_row, start_col\n            commands_executed = 0\n\n            # Simulate the robot's movement\n            for command in commands:\n                if command == 'L':\n                    current_col -= 1\n                elif command == 'R':\n                    current_col += 1\n                elif command == 'U':\n                    current_row -= 1\n                elif command == 'D':\n                    current_row += 1\n\n                # Check if the robot falls off the board\n                if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                    break\n\n                commands_executed += 1\n\n            # Update the best starting position if this one is better\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_starting_position = (start_row, start_col)\n\n    return best_starting_position\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n\n        result = find_starting_position(n, m, commands)\n        results.append(f\"{result[0]} {result[1]}\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the board dimensions and the sequence of commands.\",\n      \"output\": \"A list of test cases, each containing the board dimensions and the command sequence.\"\n    },\n    {\n      \"description\": \"For each test case, determine the starting cell that allows the robot to execute the maximum number of commands without falling off the board.\",\n      \"output\": \"The optimal starting cell coordinates for each test case.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each possible starting cell to determine the number of commands that can be executed without falling off.\",\n      \"output\": \"The number of successfully executed commands for each starting cell.\"\n    },\n    {\n      \"description\": \"Identify the starting cell that results in the maximum number of successfully executed commands.\",\n      \"output\": \"The coordinates of the starting cell that allows the maximum number of commands to be executed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data to extract the number of test cases and the details for each test case.\",\n    \"For each test case, iterate over all possible starting cells on the board.\",\n    \"For each starting cell, simulate the robot's movement according to the command sequence.\",\n    \"Track the number of commands executed before the robot falls off the board for each starting cell.\",\n    \"Compare the results for all starting cells and select the one with the maximum number of executed commands.\",\n    \"Output the coordinates of the optimal starting cell for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a grid based on a sequence of commands ('L', 'R', 'D', 'U') and determining the starting position that allows the maximum number of commands to be executed without the robot falling off the grid.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands': This means we need to find the starting position that allows the robot to execute the highest possible number of commands without falling off the board.\n    Implementation: Track the number of commands executed for each starting position and compare to find the maximum.\n\n# [degree adverb]\n    'maximum': This indicates the need to find the starting position that allows the robot to execute the most commands.\n    Implementation: Use a variable to keep track of the maximum number of commands executed and update it as necessary.\n\n# [code logic]\n    The steps \"Simulate the robot's movement on the board for each possible starting cell\" and \"Track the number of commands executed before the robot falls off the board for each starting cell\" should be implemented simultaneously. This can be done by iterating over each possible starting cell and simulating the movement while counting the commands executed.\n\n# [edge case]\n    1 1\n    L\n    = 1 1\n    Explanation: On a 1x1 board, any command will cause the robot to fall off immediately, so the starting position doesn't matter.\n\n    2 2\n    RR\n    = 1 1\n    Explanation: On a 2x2 board, starting from (1,1) allows the robot to execute the first 'R' command, but the second 'R' will cause it to fall off.\n\n    3 3\n    UUU\n    = 3 1\n    Explanation: Starting from the bottom row (3,1) allows the robot to execute all 'U' commands without falling off.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the board dimensions are minimal (e.g., 1x1) or where the command sequence is such that no commands can be executed without falling off.\n    ```python\n    if n == 1 and m == 1:\n        print(1, 1)\n        continue\n    ```\n\nYES", "Round_0": {"code": "def find_starting_position(n, m, commands):\n    # Initialize variables to track the boundaries of the movement\n    min_row, max_row = 0, 0\n    min_col, max_col = 0, 0\n    \n    # Current position of the robot\n    current_row, current_col = 0, 0\n    \n    # Iterate over each command to determine the movement boundaries\n    for command in commands:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n        \n        # Update the boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n    \n    # Calculate the starting position based on the boundaries\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n    \n    # Ensure the starting position is within the board limits\n    if start_row + max_row <= n and start_col + max_col <= m:\n        return start_row, start_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n        \n        result = find_starting_position(n, m, commands)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers n and m representing the board dimensions.\",\n        \"Read the string s representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the optimal starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the robot's position and the maximum number of commands executed.\",\n        \"Iterate over all possible starting positions on the board.\",\n        \"For each starting position, simulate the execution of the command sequence.\",\n        \"Check if the robot falls off the board during the simulation.\",\n        \"Track the starting position that allows the maximum number of commands to be executed without falling.\"\n      ]\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"steps\": [\n        \"For each test case, print the row and column of the optimal starting position.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases, board dimensions, and command sequences.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement for each starting position and track the maximum number of commands executed.\",\n    \"Output the starting position that allows the maximum number of commands to be executed without falling off the board.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a board based on a sequence of commands. The goal is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands': This means we need to find the starting position that allows the robot to execute the highest possible number of commands without falling off the board. In code, this involves tracking the number of commands executed for each starting position and comparing them to find the maximum.\n\n# [degree adverb] \n    'maximum': This indicates that we are interested in the highest number of commands that can be executed. In code, this can be implemented by maintaining a variable to store the maximum number of commands executed and updating it whenever a higher number is found.\n\n# [code logic]\n    The steps in the plan related to simulating the robot's movement and checking if it falls off the board should be implemented simultaneously. Specifically, the steps:\n    - \"For each starting position, simulate the execution of the command sequence.\"\n    - \"Check if the robot falls off the board during the simulation.\"\n    These can be implemented in a single loop that iterates over each command and checks the robot's position after each move.\n\n# [edge case] \n    1 1\n    Explanation: With a 1x1 board, any command will cause the robot to fall off immediately, so the starting position doesn't matter, and the output should be 1 1.\n    \n    1 2\n    Explanation: On a 1x2 board with a command 'L', starting at position 1 2 will allow the robot to execute the command without falling, so the output should be 1 2.\n    \n    3 3\n    Explanation: On a 3x3 board with commands 'RRDLUU', starting at position 2 1 allows all commands to be executed without falling, so the output should be 2 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the board dimensions are minimal (e.g., 1x1 or 1x2). This can be handled by checking the board dimensions before simulating the robot's movement and directly returning the starting position if the board is too small for any movement.\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        s = data[index]\n        index += 1\n        \n        # Initialize the best starting position\n        best_r, best_c = 1, 1\n        max_commands = 0\n        \n        # Try all possible starting positions\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n                    \n                    # Check if the robot falls off the board\n                    if r < 1 or r > n or c < 1 or c > m:\n                        break\n                    commands_executed += 1\n                \n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_r, best_c = start_r, start_c\n        \n        results.append(f\"{best_r} {best_c}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t from the input, representing the number of test cases.\",\n        \"For each test case, read the integers n and m, representing the board dimensions.\",\n        \"Read the string s, representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the optimal starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n        \"Iterate over all possible starting positions on the board.\",\n        \"For each starting position, simulate the robot's movement according to the command sequence s.\",\n        \"Check if the robot falls off the board during the simulation. If it does, stop the simulation for that starting position.\",\n        \"Track the number of successfully executed commands for each starting position.\",\n        \"Update the maximum number of commands executed and the corresponding starting position if a better result is found.\"\n      ]\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"steps\": [\n        \"For each test case, output the row and column of the starting position that allows the maximum number of commands to be executed.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement for each starting position and track the number of successfully executed commands.\",\n    \"Determine the starting position that allows the maximum number of commands to be executed without the robot falling off the board.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    This refers to the grid-like structure of the board where the robot can move. Each cell is a square on the board.\n\n    'sequence of commands'\n    This refers to the list of movements ('L', 'R', 'D', 'U') that the robot will execute.\n\n    'maximum number of commands'\n    This means the robot should execute as many commands as possible without falling off the board.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands': The robot should execute the highest possible number of commands without falling off the board. This can be implemented by simulating the robot's movement and counting the number of commands executed before falling off.\n\n# [degree adverb]\n    'maximum': This indicates the need to find the starting position that allows the robot to execute the most commands without falling off the board. This can be implemented by iterating over all possible starting positions and tracking the number of commands executed.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially. However, the simulation of the robot's movement for each starting position (steps 2-5 in the second subproblem) can be done in a single loop that checks each position and updates the maximum number of commands executed.\n\n# [edge case]\n    1 1\n    L = 1 1\n    Explanation: On a 1x1 board, any command will cause the robot to fall off immediately, so the starting position doesn't matter.\n\n    1 2\n    L = 1 2\n    Explanation: On a 1x2 board, starting at position (1, 2) allows the robot to execute the 'L' command without falling off.\n\n    3 3\n    RRR = 1 1\n    Explanation: On a 3x3 board, starting at position (1, 1) allows the robot to execute the 'RRR' commands without falling off.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the board dimensions are minimal (e.g., 1x1 or 1x2). This can be handled by checking the board dimensions before simulating the robot's movement and returning the starting position directly if the board is too small for any movement.\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize the best starting position and max commands executed\n        best_r, best_c = 1, 1\n        max_commands = 0\n        \n        # Try all possible starting positions\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n                \n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n                    \n                    # Check if the robot falls off the board\n                    if r < 1 or r > n or c < 1 or c > m:\n                        break\n                    \n                    commands_executed += 1\n                \n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_r, best_c = start_r, start_c\n        \n        results.append(f\"{best_r} {best_c}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: list index out of range"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize the best starting position and max commands executed\n        best_r, best_c = 1, 1\n        max_commands = 0\n        \n        # Try all possible starting positions\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n                \n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n                    \n                    # Check if the robot falls off the board\n                    if r < 1 or r > n or c < 1 or c > m:\n                        break\n                    \n                    commands_executed += 1\n                \n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_r, best_c = start_r, start_c\n        \n        results.append(f\"{best_r} {best_c}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"details\": \"Read the first integer as the number of test cases. For each test case, read two integers representing the board dimensions (n and m) and a string representing the sequence of commands.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case.\",\n      \"details\": \"For each test case, iterate over possible starting positions on the board. For each starting position, simulate the execution of the command sequence and track the number of successfully executed commands.\"\n    },\n    {\n      \"description\": \"Determine the starting position that allows the maximum number of commands to be executed without the robot falling off the board.\",\n      \"details\": \"Compare the number of successfully executed commands for each starting position and select the position with the maximum count.\"\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"details\": \"For each test case, print the row and column of the starting position that allows the maximum number of commands to be executed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the board dimensions and command sequence.\",\n    \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n    \"Iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement from each starting position, counting the number of commands executed before falling off the board.\",\n    \"Update the maximum count and starting position if a better option is found.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    The requirement involves simulating the movement of a robot on a board based on a sequence of commands ('L', 'R', 'D', 'U').\n\n    'maximum commands'\n    The goal is to execute the maximum number of commands without the robot falling off the board.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands'\n    This means the robot should execute as many commands as possible without falling off the board. In code, this involves tracking the number of commands executed successfully from each starting position.\n\n# [degree adverb]\n    'maximum'\n    Refers to the highest number of commands that can be executed without the robot falling off the board. In code, this involves comparing counts of executed commands from different starting positions.\n\n# [code logic]\n    The steps of simulating the robot's movement and counting the number of commands executed should be implemented simultaneously for each starting position. This can be done using a loop that iterates over possible starting positions and simulates the command sequence in one block.\n\n# [edge case]\n    Test case with a 1x1 board and a command sequence that immediately causes the robot to fall:\n    1 1\n    R\n    Expected output: 1 1\n    Explanation: The robot starts at the only cell available and falls immediately, so the starting position is the only valid one.\n\n    Test case with a command sequence longer than the board dimensions:\n    2 2\n    RRRR\n    Expected output: 1 1\n    Explanation: The robot can only execute one command before falling off the board, starting from any position.\n\n    Test case with a command sequence that allows full traversal of the board:\n    3 3\n    RRDLLUU\n    Expected output: 2 1\n    Explanation: Starting from (2, 1), the robot can execute all commands without falling off the board.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the robot might fall immediately or the command sequence is longer than the board dimensions.\n    ```python\n    def simulate_robot_movement(n, m, commands):\n        max_commands_executed = 0\n        best_start_position = (1, 1)\n        \n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start", "Round_0": {"code": "def simulate_robot_movement(n, m, commands):\n    # Initialize variables to track the best starting position\n    max_commands_executed = 0\n    best_start_position = (1, 1)\n    \n    # Iterate over all possible starting positions\n    for start_row in range(1, n + 1):\n        for start_col in range(1, m + 1):\n            current_row, current_col = start_row, start_col\n            commands_executed = 0\n            \n            # Simulate the robot's movement\n            for command in commands:\n                if command == 'L':\n                    current_col -= 1\n                elif command == 'R':\n                    current_col += 1\n                elif command == 'U':\n                    current_row -= 1\n                elif command == 'D':\n                    current_row += 1\n                \n                # Check if the robot is still on the board\n                if 1 <= current_row <= n and 1 <= current_col <= m:\n                    commands_executed += 1\n                else:\n                    break\n            \n            # Update the best starting position if this one is better\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_start_position = (start_row, start_col)\n    \n    return best_start_position\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        commands = data[index + 2]\n        index += 3\n        \n        # Get the best starting position for this test case\n        best_start_position = simulate_robot_movement(n, m, commands)\n        results.append(best_start_position)\n    \n    # Output the results\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers n and m representing the board dimensions.\",\n        \"Read the string s representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the optimal starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n        \"Iterate over all possible starting positions on the board.\",\n        \"For each starting position, simulate the robot's movement according to the command sequence.\",\n        \"Check if the robot falls off the board during the simulation.\",\n        \"Update the maximum number of commands executed and the starting position if the current simulation results in more commands executed.\"\n      ]\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"steps\": [\n        \"For each test case, print the row and column of the optimal starting position.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement from each starting position according to the command sequence.\",\n    \"Track the maximum number of commands executed without the robot falling off the board.\",\n    \"Output the starting position that allows the maximum number of commands to be executed for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a board based on a sequence of commands. The robot can move left, right, up, or down, and the goal is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands': This means we need to find the starting position that allows the robot to execute the most commands possible without falling off the board. In code, this involves tracking the number of commands executed from each starting position and updating the maximum count.\n\n# [degree adverb]\n    'maximum': This indicates that we are looking for the highest possible number of commands executed. In code, this involves comparing the number of commands executed from different starting positions and keeping track of the highest count.\n\n# [code logic]\n    The steps in the plan should be implemented in a nested manner. Specifically, the simulation of the robot's movement should be done for each possible starting position on the board. This means that the steps involving iterating over starting positions and simulating movement should be nested within each other.\n\n# [edge case]\n    1 1\n    L\n    = 1 1\n    Explanation: On a 1x1 board, any command will cause the robot to fall off immediately, so the starting position doesn't matter; the robot will execute 0 commands successfully.\n\n    2 2\n    RR\n    = 1 1\n    Explanation: On a 2x2 board, starting from (1,1) allows the robot to execute 1 command before falling off, which is the maximum possible.\n\n    3 3\n    UUU\n    = 3 1\n    Explanation: Starting from the bottom row allows the robot to execute all 'U' commands without falling off.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the board is very small (e.g., 1x1) or the command sequence is very short. This can be handled by checking the board dimensions and command sequence length before simulating movements.\n    \n    ```python\n    if n == 1 and m == 1:\n        print(1, 1)\n        continue\n    ```\n\nYES", "Round_0": {"code": "def find_optimal_starting_position(n, m, commands):\n    # Initialize variables to track the boundaries of the movement\n    min_row, max_row, min_col, max_col = 0, 0, 0, 0\n    current_row, current_col = 0, 0\n\n    # Simulate the movement to find the boundaries\n    for command in commands:\n        if command == 'L':\n            current_col -= 1\n        elif command == 'R':\n            current_col += 1\n        elif command == 'U':\n            current_row -= 1\n        elif command == 'D':\n            current_row += 1\n\n        # Update boundaries\n        min_row = min(min_row, current_row)\n        max_row = max(max_row, current_row)\n        min_col = min(min_col, current_col)\n        max_col = max(max_col, current_col)\n\n    # Calculate the optimal starting position\n    start_row = 1 - min_row\n    start_col = 1 - min_col\n\n    # Ensure the starting position is within the board\n    if start_row + max_row <= n and start_col + max_col <= m:\n        return start_row, start_col\n    else:\n        return None\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n\n        result = find_optimal_starting_position(n, m, commands)\n        if result:\n            results.append(f\"{result[0]} {result[1]}\")\n        else:\n            results.append(\"1 1\")  # Fallback for edge cases\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers n and m representing the board dimensions.\",\n        \"Read the string s representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the optimal starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n        \"Iterate over all possible starting positions on the board.\",\n        \"For each starting position, simulate the robot's movement according to the command sequence.\",\n        \"Check if the robot falls off the board during the simulation.\",\n        \"Update the maximum number of commands executed and the starting position if the current simulation results in more commands executed.\"\n      ]\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"steps\": [\n        \"For each test case, print the row and column of the optimal starting position.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement from each starting position according to the command sequence.\",\n    \"Track the maximum number of commands executed without falling off the board and the corresponding starting position.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a board based on a sequence of commands. The robot can move left, right, up, or down, and the goal is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands': This means we need to find the starting position that allows the robot to execute the greatest number of commands without falling off the board. In code, this involves tracking the number of commands executed and updating the maximum when a new starting position results in more commands being executed.\n\n# [degree adverb]\n    'maximum': This indicates that we are looking for the highest possible number of commands that can be executed from a starting position without the robot falling off the board. In code, this involves comparing the number of commands executed from different starting positions and keeping track of the highest number.\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but the simulation of the robot's movement for each starting position (subproblem 2) involves iterating over all possible starting positions and simulating the movement for each. This can be done in a nested loop where the outer loop iterates over possible starting positions and the inner loop simulates the movement.\n\n# [edge case]\n    1. A board of size 1x1 with any command sequence: The robot will always fall off after the first command, so the expected output is the only cell (1, 1).\n       Explanation: Since the board is only 1x1, any movement will cause the robot to fall off immediately.\n    2. A command sequence that only moves in one direction (e.g., \"RRRR\") on a board of size 1x5: The robot should start at the leftmost column to execute the maximum number of commands.\n       Explanation: Starting at the leftmost column allows the robot to execute all commands without falling off.\n    3. A board of size 3x3 with a command sequence \"UUU\": The robot should start at the bottom row to execute the maximum number of commands.\n       Explanation: Starting at the bottom row allows the robot to execute all upward commands without falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating the robot's movement from each possible starting position and tracking", "Round_0": {"code": "def find_optimal_starting_position(t, test_cases):\n    results = []\n    for n, m, s in test_cases:\n        # Initialize variables to track the best starting position\n        max_commands = 0\n        best_start = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                # Simulate the robot's movement\n                row, col = start_row, start_col\n                commands_executed = 0\n\n                for command in s:\n                    if command == 'L':\n                        col -= 1\n                    elif command == 'R':\n                        col += 1\n                    elif command == 'U':\n                        row -= 1\n                    elif command == 'D':\n                        row += 1\n\n                    # Check if the robot falls off the board\n                    if row < 1 or row > n or col < 1 or col > m:\n                        break\n\n                    commands_executed += 1\n\n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_start = (start_row, start_col)\n\n        results.append(best_start)\n\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    t = int(data[0])\n    index = 1\n    test_cases = []\n\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        test_cases.append((n, m, s))\n        index += 3\n\n    results = find_optimal_starting_position(t, test_cases)\n\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the board dimensions and the sequence of commands.\",\n      \"output\": \"A list of test cases, each containing the board dimensions and the command sequence.\"\n    },\n    {\n      \"description\": \"For each test case, determine the starting cell that allows the robot to execute the maximum number of commands without falling off the board.\",\n      \"output\": \"The coordinates of the optimal starting cell for each test case.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each possible starting cell, tracking the number of successfully executed commands.\",\n      \"output\": \"The number of commands executed for each starting cell.\"\n    },\n    {\n      \"description\": \"Identify the starting cell that results in the maximum number of executed commands for each test case.\",\n      \"output\": \"The coordinates of the starting cell with the maximum executed commands.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input to get the number of test cases and the details for each test case.\",\n    \"For each test case, initialize variables to track the maximum number of commands executed and the corresponding starting cell.\",\n    \"Iterate over all possible starting cells on the board.\",\n    \"For each starting cell, simulate the robot's movement according to the command sequence.\",\n    \"Check if the robot stays within the board boundaries after each command.\",\n    \"Count the number of commands executed before the robot falls off the board.\",\n    \"Update the maximum commands executed and the starting cell if the current cell allows more commands.\",\n    \"After evaluating all starting cells, store the coordinates of the optimal starting cell for the test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a grid based on a sequence of commands ('L', 'R', 'D', 'U') and determining the optimal starting position to maximize the number of commands executed without the robot falling off the grid.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands': This means we need to find the starting position that allows the robot to execute the highest possible number of commands without falling off the board.\n    Implementation: Track the number of commands executed for each starting position and update the maximum if a new starting position allows more commands.\n\n# [degree adverb]\n    'maximum': This indicates the need to find the starting position that results in the highest number of executed commands.\n    Implementation: Use a variable to keep track of the maximum number of commands executed and update it as necessary.\n\n# [code logic]\n    The steps \"Iterate over all possible starting cells on the board\" and \"Simulate the robot's movement according to the command sequence\" should be implemented simultaneously. This can be done by using nested loops to iterate over each cell and simulate the movement for each starting position.\n\n# [edge case]\n    1 1\n    L\n    = 1 1\n    Explanation: On a 1x1 board, any command will cause the robot to fall off immediately, so the starting position is the only cell available.\n\n    2 2\n    U\n    = 2 1\n    Explanation: On a 2x2 board, starting from (2, 1) allows the robot to execute the 'U' command without falling off.\n\n    3 3\n    RRR\n    = 1 1\n    Explanation: On a 3x3 board, starting from (1, 1) allows the robot to execute the maximum number of 'R' commands without falling off.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    The code should ensure that the robot's position is always checked against the board boundaries after each command. If a command would cause the robot to fall off, it should stop executing further commands from that starting position.\n\n```python\ndef simulate_robot_movement(n, m, commands):\n    max_executed = 0\n    best_start = (1, 1)\n    \n    for start_row in range(1, n + 1):\n        for start", "Round_0": {"code": "def simulate_robot_movement(n, m, commands):\n    # Initialize the best starting position and the maximum number of commands executed\n    max_executed = 0\n    best_start = (1, 1)\n    \n    # Iterate over all possible starting positions\n    for start_row in range(1, n + 1):\n        for start_col in range(1, m + 1):\n            # Initialize the current position\n            current_row, current_col = start_row, start_col\n            executed_commands = 0\n            \n            # Simulate the movement of the robot\n            for command in commands:\n                if command == 'L':\n                    current_col -= 1\n                elif command == 'R':\n                    current_col += 1\n                elif command == 'U':\n                    current_row -= 1\n                elif command == 'D':\n                    current_row += 1\n                \n                # Check if the robot is still on the board\n                if 1 <= current_row <= n and 1 <= current_col <= m:\n                    executed_commands += 1\n                else:\n                    break\n            \n            # Update the best starting position if this one is better\n            if executed_commands > max_executed:\n                max_executed = executed_commands\n                best_start = (start_row, start_col)\n    \n    return best_start\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n        \n        # Get the best starting position for this test case\n        best_start = simulate_robot_movement(n, m, commands)\n        results.append(f\"{best_start[0]} {best_start[1]}\")\n    \n    # Print all results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"details\": \"Read the first integer as the number of test cases. For each test case, read two integers representing the board dimensions (n and m) and a string representing the sequence of commands.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case.\",\n      \"details\": \"For each test case, iterate over possible starting positions on the board. For each starting position, simulate the execution of the command sequence and track the number of successfully executed commands before the robot falls off the board.\"\n    },\n    {\n      \"description\": \"Determine the starting position that allows the maximum number of commands to be executed.\",\n      \"details\": \"For each test case, compare the number of successfully executed commands for each starting position and select the position with the maximum count.\"\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"details\": \"For each test case, output the row and column of the starting position that allows the maximum number of commands to be executed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, read the board dimensions and command sequence.\",\n    \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n    \"Iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement from each starting position, counting the number of commands executed before falling off the board.\",\n    \"Update the maximum count and starting position if a better option is found.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot can move in four directions: left (L), right (R), down (D), and up (U). The goal is to execute the maximum number of commands without falling off the board.\n\n    'starting position'\n    Explanation: The robot can start from any cell on the board, and the task is to find the optimal starting position that allows the maximum number of commands to be executed.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands'\n    Explanation: The requirement is to execute as many commands as possible without the robot falling off the board. This means finding a starting position that allows the longest sequence of commands to be executed successfully.\n\n# [degree adverb]\n    'maximum'\n    Explanation: The requirement is to find the starting position that allows the maximum number of commands to be executed. This involves simulating the robot's movement from each possible starting position and tracking the number of commands executed.\n\n# [code logic]\n    The steps related to simulating the robot's movement and determining the optimal starting position should be considered simultaneously. Specifically, the simulation of movement and tracking of executed commands should be done in a single loop for each starting position.\n\n# [edge case]\n    1 1\n    L = 1 1\n    Explanation: On a 1x1 board, any command will cause the robot to fall off immediately. The only starting position is (1, 1), and no commands can be executed successfully.\n\n    2 2\n    LR = 1 1\n    Explanation: On a 2x2 board, starting at (1, 1) allows the robot to execute the command 'L' without falling off, but 'R' will cause it to fall off. The optimal starting position is (1, 1).\n\n    3 3\n    UUU = 3 1\n    Explanation: On a 3x3 board, starting at (3, 1) allows the robot to execute the command 'U' three times without falling off. Starting at any other position will result in fewer commands being executed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    The code should include checks to ensure the robot does not move beyond the board's boundaries during simulation. This can be done by checking the robot's position after each command and stopping the simulation if the position is invalid.\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize variables to track the best starting position\n        max_commands = 0\n        best_start = (1, 1)\n        \n        # Try each possible starting position\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                row, col = start_row, start_col\n                commands_executed = 0\n                \n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        col -= 1\n                    elif command == 'R':\n                        col += 1\n                    elif command == 'U':\n                        row -= 1\n                    elif command == 'D':\n                        row += 1\n                    \n                    # Check if the robot is still on the board\n                    if 1 <= row <= n and 1 <= col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n                \n                # Update the best starting position if this one is better\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_start = (start_row, start_col)\n        \n        # Store the result for this test case\n        results.append(f\"{best_start[0]} {best_start[1]}\")\n    \n    # Output all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers n and m representing the board dimensions.\",\n        \"Read the string s representing the sequence of commands.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case to determine the optimal starting position.\",\n      \"steps\": [\n        \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n        \"Iterate over all possible starting positions on the board.\",\n        \"For each starting position, simulate the robot's movement according to the command sequence s.\",\n        \"Check if the robot falls off the board during the simulation and count the number of successfully executed commands.\",\n        \"Update the maximum number of commands executed and the starting position if the current simulation results in more commands executed.\"\n      ]\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"steps\": [\n        \"For each test case, print the row and column of the optimal starting position that allows the maximum number of commands to be executed.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n    \"For each test case, iterate over all possible starting positions on the board.\",\n    \"Simulate the robot's movement from each starting position according to the command sequence.\",\n    \"Track the maximum number of commands executed and the corresponding starting position.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The requirement involves simulating the movement of a robot on a board based on a sequence of commands. The robot can move left, right, up, or down, and the goal is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the board.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands': This means we need to find the starting position that allows the robot to execute the highest possible number of commands without falling off the board. In code, this involves tracking the number of commands executed from each starting position and updating the maximum count.\n\n# [degree adverb]\n    'maximum': This indicates that we are interested in the highest number of commands that can be executed. In code, this involves comparing the number of commands executed from different starting positions and keeping track of the highest count.\n\n# [code logic]\n    The steps in the plan related to simulating the robot's movement and checking if it falls off the board should be implemented simultaneously. Specifically, the steps:\n    - \"For each starting position, simulate the robot's movement according to the command sequence s.\"\n    - \"Check if the robot falls off the board during the simulation and count the number of successfully executed commands.\"\n    These can be implemented in a single loop that iterates over the command sequence and updates the robot's position, checking for boundary conditions.\n\n# [edge case]\n    1. n = 1, m = 1, s = \"L\" = 1 1\n       Explanation: On a 1x1 board, any movement will cause the robot to fall off immediately. The only starting position is (1, 1), and no commands can be executed.\n    2. n = 2, m = 2, s = \"RR\" = 1 1\n       Explanation: On a 2x2 board, starting from (1, 1), the robot can execute the first \"R\" command but will fall off on the second \"R\". The maximum commands executed is 1.\n    3. n = 3, m = 3, s = \"UUU\" = 3 1\n       Explanation: Starting from (3, 1), the robot can execute all \"U\" commands without falling off, as it moves to (2, 1), then (1, 1), and stops.\n\n# [extra code for edge case]\n", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        s = data[index + 2]\n        index += 3\n        \n        # Initialize variables to track the best starting position\n        max_commands = 0\n        best_r, best_c = 1, 1\n        \n        # Try all possible starting positions\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n                \n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n                    \n                    # Check if the robot falls off the board\n                    if r < 1 or r > n or c < 1 or c > m:\n                        break\n                    commands_executed += 1\n                \n                # Update the best starting position if this one is better\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_r, best_c = start_r, start_c\n        \n        results.append(f\"{best_r} {best_c}\")\n    \n    # Print all results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences.\",\n      \"details\": \"Read the input data and split it into individual test cases. For each test case, extract the values of n, m, and the command sequence s.\"\n    },\n    {\n      \"description\": \"Simulate the robot's movement on the board for each test case.\",\n      \"details\": \"For each test case, iterate over all possible starting positions on the board. For each starting position, simulate the execution of the command sequence s and track the number of successfully executed commands.\"\n    },\n    {\n      \"description\": \"Determine the starting position that allows the maximum number of commands to be executed.\",\n      \"details\": \"For each test case, compare the results of the simulations for all starting positions and identify the position that allows the maximum number of commands to be executed without the robot falling off the board.\"\n    },\n    {\n      \"description\": \"Output the optimal starting position for each test case.\",\n      \"details\": \"For each test case, output the row and column of the starting position that allows the maximum number of commands to be executed.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, read the board dimensions and command sequence.\",\n    \"Initialize variables to track the maximum number of commands executed and the corresponding starting position.\",\n    \"Iterate over all possible starting positions on the board.\",\n    \"For each starting position, simulate the robot's movement according to the command sequence.\",\n    \"Check if the robot falls off the board during the simulation. If not, update the maximum commands executed and starting position if this position allows more commands.\",\n    \"After evaluating all starting positions, store the optimal starting position for the test case.\",\n    \"Output the optimal starting position for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: This refers to the grid-like structure of the board where the robot can move. Each cell is a square on the board.\n\n    'sequence of commands'\n    Explanation: This is the list of movements ('L', 'R', 'D', 'U') that the robot will execute in order.\n\n    'maximum number of commands'\n    Explanation: The goal is to execute as many commands as possible without the robot falling off the board.\n\n# [phrase showing quantity relationship]\n    'maximum number of commands': This means the highest possible count of commands executed without the robot falling off the board. In code, this can be implemented by tracking the number of commands executed successfully and comparing it across different starting positions.\n\n# [degree adverb]\n    'maximum': This indicates the need to find the starting position that allows the most commands to be executed. In code, this involves iterating over all possible starting positions and keeping track of the one that results in the highest number of successful commands.\n\n# [code logic]\n    The steps related to simulating the robot's movement and checking if it falls off the board should be implemented simultaneously. Specifically:\n    - \"Iterate over all possible starting positions on the board.\"\n    - \"For each starting position, simulate the robot's movement according to the command sequence.\"\n    - \"Check if the robot falls off the board during the simulation.\"\n    These can be implemented in a loop where each starting position is tested, and the robot's movement is simulated until it either completes the sequence or falls off the board.\n\n# [edge case]\n    1 1\n    L = 1 1\n    Explanation: On a 1x1 board, any movement will cause the robot to fall off immediately. The only starting position is (1, 1), and no commands can be executed successfully.\n\n    2 2\n    LR = 1 1\n    Explanation: On a 2x2 board, starting at (1, 1) allows the robot to execute the 'L' command without falling off, but the 'R' command will cause it to fall off. Starting at (1, 1) allows the maximum number of commands (1) to be executed.\n\n    3 3\n    UUU = 3 1\n    Explanation: Starting at (3, 1) allows the robot to execute all 'U' commands without falling off, ending at (1,", "Round_0": {"code": "def find_starting_position(n, m, commands):\n    # Initialize variables to track the best starting position\n    max_commands_executed = 0\n    best_starting_position = (1, 1)\n\n    # Iterate over all possible starting positions\n    for start_row in range(1, n + 1):\n        for start_col in range(1, m + 1):\n            current_row, current_col = start_row, start_col\n            commands_executed = 0\n\n            # Simulate the robot's movement\n            for command in commands:\n                if command == 'L':\n                    current_col -= 1\n                elif command == 'R':\n                    current_col += 1\n                elif command == 'U':\n                    current_row -= 1\n                elif command == 'D':\n                    current_row += 1\n\n                # Check if the robot falls off the board\n                if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                    break\n\n                commands_executed += 1\n\n            # Update the best starting position if this one is better\n            if commands_executed > max_commands_executed:\n                max_commands_executed = commands_executed\n                best_starting_position = (start_row, start_col)\n\n    return best_starting_position\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        commands = data[index]\n        index += 1\n\n        result = find_starting_position(n, m, commands)\n        results.append(f\"{result[0]} {result[1]}\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, false, false, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 482, "prompt": "The robot is situated on a checkered rectangular board of dimensions n \u00d7 m (with n rows and m columns). The rows are numbered from 1 to n starting from the top to the bottom, and the columns are numbered from 1 to m starting from the left to the right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is represented by one of the symbols 'L', 'R', 'D', or 'U'. These symbol commands are responsible for triggering movement to the left, right, down, or up, respectively.\n\nThe robot can commence its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's objective is to carry out the maximum number of commands possible without falling off the board. For instance, on a 3 \u00d7 3 board, if the robot begins a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nAscertain the cell from which the robot ought to begin its movement in order to carry out as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 163}
