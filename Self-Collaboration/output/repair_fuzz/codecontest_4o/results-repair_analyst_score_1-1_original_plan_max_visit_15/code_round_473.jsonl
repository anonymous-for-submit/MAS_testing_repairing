{"name": "1600_F. Party Organization", "description": "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people. The party is considered to be successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "tags": ["brute force", "math", "probabilities"], "difficulty": 12, "id": 1600, "sample_io": [{"input": "5 4\n1 2\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 4\n", "output": ["1 2 3 5 6\n"]}], "test_list": [{"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "10 8\n5 2\n1 8\n5 7\n1 9\n6 4\n2 7\n8 9\n3 10\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 9\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 0\n", "output": ["1 2 3 4 5\n"]}, {"input": "10 8\n2 7\n2 9\n7 9\n8 10\n5 3\n1 4\n10 6\n6 8\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 2\n4 5\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "6 3\n1 4\n1 3\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "6 3\n1 2\n4 2\n5 2\n", "output": ["1 3 4 5 6\n"]}, {"input": "6 4\n1 4\n4 1\n2 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "7 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["1 2 4 6 7\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n2 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n5 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 3\n6 4\n3 1\n1 6\n1 5\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n2 4\n1 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "8 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n1 6\n1 3\n2 4\n4 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n6 1\n1 6\n1 4\n2 6\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 1\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n1 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 5\n4 2\n5 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n6 2\n3 5\n4 5\n6 4\n3 1\n2 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 1\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n2 4\n2 1\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n1 6\n5 1\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 3\n3 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 5\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n1 3\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n3 5\n2 5\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n4 2\n5 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 6\n4 1\n2 4\n4 5\n", "output": ["-1\n"]}, {"input": "20 57\n13 14\n12 20\n18 3\n17 20\n15 2\n18 13\n12 19\n2 4\n9 2\n12 11\n14 1\n16 11\n11 14\n16 4\n16 15\n11 19\n15 4\n10 15\n12 5\n9 3\n10 2\n10 4\n20 19\n14 7\n19 2\n5 8\n6 14\n4 17\n2 17\n17 9\n13 9\n19 9\n18 8\n12 16\n18 5\n7 1\n8 3\n11 20\n6 13\n20 5\n13 8\n17 19\n7 6\n9 11\n18 9\n13 1\n12 14\n7 3\n10 16\n20 2\n5 3\n10 17\n6 1\n8 9\n7 5\n12 15\n15 11\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 1\n3 2\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n1 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n4 3\n", "output": ["-1\n"]}, {"input": "6 3\n1 2\n5 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n2 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n1 5\n6 4\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n2 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 4\n5 2\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 2\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n5 4\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 4\n1 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n4 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 3\n3 4\n3 5\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n1 5\n1 4\n1 2\n3 5\n4 5\n6 4\n3 2\n1 6\n1 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n2 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 1\n4 2\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n5 3\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n1 3\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n2 1\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n1 3\n2 3\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n2 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 1\n3 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n1 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 5\n1 3\n3 4\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 3\n4 3\n3 4\n3 2\n", "output": ["1 2 4 5 6\n"]}, {"input": "5 4\n1 4\n2 5\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n4 3\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n4 1\n4 2\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n1 4\n1 5\n", "output": ["2 3 4 5 6\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n2 1\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n2 3\n2 4\n3 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 4\n3 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n4 1\n3 4\n1 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 4\n3 1\n3 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n2 1\n3 4\n2 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 1\n1 4\n4 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n2 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "6 4\n1 2\n3 2\n3 4\n4 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "6 4\n1 4\n4 1\n3 4\n4 5\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n1 3\n4 1\n3 2\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n5 4\n3 2\n", "output": ["-1\n"]}, {"input": "6 3\n1 4\n4 3\n4 1\n", "output": ["1 2 3 5 6\n"]}, {"input": "5 4\n2 4\n4 3\n3 2\n3 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 2\n3 2\n3 1\n4 2\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n3 1\n1 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n2 3\n1 3\n3 4\n3 1\n", "output": ["-1\n"]}, {"input": "6 13\n5 6\n2 5\n1 4\n1 2\n3 5\n4 5\n6 2\n3 1\n1 6\n4 3\n2 4\n6 3\n1 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n2 3\n3 4\n5 2\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 4\n1 3\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n2 4\n3 2\n2 4\n1 3\n", "output": ["-1\n"]}, {"input": "5 4\n1 5\n4 1\n3 2\n5 1\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n3 2\n3 4\n4 5\n", "output": ["-1\n"]}, {"input": "5 4\n1 4\n3 1\n2 4\n2 4\n", "output": ["-1\n"]}, {"input": "5 4\n1 3\n4 1\n3 1\n4 5\n", "output": ["-1\n"]}], "task_id": "codecontest/76", "repair_prompt": ["On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people, and it is considered successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people, and it is considered successful if either all the people at the party are friends with each other. There won't be any concerns about talking to someone they are not friends with, so that they can all talk to each other freely. Or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, with very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people, and it is considered successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Edge cases\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    if M == (N * (N - 1)) // 2:\n        print(\"1 2 3 4 5\")\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["from itertools import combinations\nimport sys\n\ndef find_successful_party(N, M, friendships):\n    # Create adjacency matrix\n    adj = [[False] * (N + 1) for _ in range(N + 1)]\n    for u, v in friendships:\n        adj[u][v] = True\n        adj[v][u] = True\n\n    # Check all combinations of 5 people\n    for comb in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if adj[comb[i]][comb[j]]:\n                    no_friends = False\n                else:\n                    all_friends = False\n        if all_friends or no_friends:\n            print(\" \".join(map(str, comb)))\n            return\n\n    print(-1)\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    friendships = []\n    \n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.append((u, v))\n        index += 2\n    \n    find_successful_party(N, M, friendships)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Edge case: No friendships\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    \n    # Edge case: All possible pairs are friends\n    if M == N * (N - 1) // 2:\n        print(\"-1\")\n        return\n    \n    # Check for successful party\n    people = list(range(1, N + 1))\n    \n    for combo in combinations(people, 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    print(\"-1\")\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def find_successful_party(N, M, friendships):\n    from collections import defaultdict\n    \n    # Create adjacency list for friendships\n    adj_list = defaultdict(set)\n    for u, v in friendships:\n        adj_list[u].add(v)\n        adj_list[v].add(u)\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(adj_list[person]) >= 4:\n                friends = list(adj_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in adj_list[friends[j]] and\n                                    friends[i] in adj_list[friends[k]] and\n                                    friends[i] in adj_list[friends[l]] and\n                                    friends[j] in adj_list[friends[k]] and\n                                    friends[j] in adj_list[friends[l]] and\n                                    friends[k] in adj_list[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) >= 5:\n                independent_set = list(non_friends)[:5]\n                return independent_set\n            non_friends -= adj_list[person]\n        return None\n    \n    # Try to find a clique or independent set\n    clique = find_clique()\n    if clique:\n        return clique\n    \n    independent_set = find_independent_set()\n    if independent_set:\n        return independent_set\n    \n    return -1\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    friendships = []\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.append((u, v))\n        index += 2\n    \n    result = find_successful_party(N, M, friendships)\n    if result == -1:\n        print(result)\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list for the graph\n    graph = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        graph[U].add(V)\n        graph[V].add(U)\n    \n    # Check for a clique of 5 people\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of 5 people\n    def find_independent_set():\n        if N >= 5:\n            return [1, 2, 3, 4, 5]\n        return None\n    \n    # Determine if a successful party is possible\n    clique = find_clique()\n    independent_set = find_independent_set()\n    \n    if clique:\n        print(' '.join(map(str, clique)))\n    elif independent_set:\n        print(' '.join(map(str, independent_set)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Edge cases\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    elif M >= (N * (N - 1)) // 2:\n        print(\"1 2 3 4 5\")\n        return\n    \n    # Check combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Edge case handling\n    if M == 0:\n        print(' '.join(map(str, range(1, 6))))\n        return\n    if M >= (N * (N - 1)) // 2:\n        print(-1)\n        return\n    \n    # Parse friendships\n    friendships = set()\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.add((u, v))\n        friendships.add((v, u))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Edge cases\n    if M == 0:\n        print(' '.join(map(str, range(1, 6))))\n        return\n    if M >= (N * (N - 1)) // 2:\n        print(-1)\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U_i = int(data[index])\n        V_i = int(data[index + 1])\n        index += 2\n        friendships.add((U_i, V_i))\n        friendships.add((V_i, U_i))\n    \n    # Generate all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check for the edge case where there are no friendships\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    \n    # Check for the edge case where all possible pairs are friends\n    if M == N * (N - 1) // 2:\n        print(\"-1\")\n        return\n    \n    # Generate all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        # Check if all are friends or none are friends\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    # If no successful party is found\n    print(\"-1\")\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Edge cases\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    if M == (N * (N - 1)) // 2:\n        print(\"1 2 3 4 5\")\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N people.\",\n      \"output\": \"List of all possible 5-person combinations.\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if all are friends with each other or if none are friends with each other.\",\n      \"output\": \"Boolean indicating if a successful party configuration is found.\"\n    },\n    {\n      \"description\": \"If a successful party configuration is found, output the 5 people. If none is found after checking all combinations, output -1.\",\n      \"output\": \"5-person list or -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to get N, M, and the list of friendships.\",\n    \"Construct a graph to represent the friendships using an adjacency list or matrix.\",\n    \"Generate all possible combinations of 5 people from the N people.\",\n    \"For each combination, check if it satisfies the successful party conditions: either all are friends or none are friends.\",\n    \"If a valid combination is found, print the 5 people. If no valid combination is found after checking all, print -1.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'successful party'\n    Explanation: A successful party is defined as a gathering of exactly 5 people where either all are friends with each other or none are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5 people': This means the party must consist of precisely 5 individuals.\n    Implementation: Ensure that any combination of people selected for the party has a length of 5.\n\n# [degree adverb]\n    'successful': This indicates the condition that must be met for the party to be considered successful.\n    Implementation: Check if all 5 people are friends or none are friends to determine success.\n\n# [code logic]\n    The steps for generating combinations and checking conditions should be implemented simultaneously.\n    Explanation: When generating combinations of 5 people, immediately check if they meet the successful party conditions to avoid unnecessary computations.\n\n# [edge case]\n    Input: 5 0\n    Output: 1 2 3 4 5\n    Explanation: With no friendships, any group of 5 people will have no friends among them, satisfying the condition for a successful party.\n    \n    Input: 6 15\n    Output: 1 2 3 4 5\n    Explanation: If all possible pairs are friends, any group of 5 people will be friends with each other, satisfying the condition for a successful party.\n    \n    Input: 5 4\n    Output: -1\n    Explanation: If the friendships form a chain (e.g., 1-2, 2-3, 3-4, 4-5), no group of 5 can satisfy either condition, resulting in -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    if M == (N * (N - 1)) // 2:\n        print(\"1 2 3 4 5\")\n        return\n    ```\n\nNO", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Edge cases\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    if M == (N * (N - 1)) // 2:\n        print(\"1 2 3 4 5\")\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs (U_i, V_i).\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized.\",\n      \"steps\": [\n        \"Check if there exists a group of 5 people where all are friends with each other.\",\n        \"Check if there exists a group of 5 people where no two are friends with each other.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party is possible, output the 5 people.\",\n        \"If no successful party is possible, output -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Create a data structure to represent the friendships (e.g., adjacency list or matrix).\",\n    \"Iterate over all possible combinations of 5 people.\",\n    \"For each combination, check if all 5 are friends with each other or if none are friends with each other.\",\n    \"If a valid combination is found, print the 5 people.\",\n    \"If no valid combination is found after checking all possibilities, print -1.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'successful party'\n    Explanation: A successful party is defined as a gathering of exactly 5 people where either all are friends with each other or none are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5 people': This means the party must consist of precisely 5 individuals.\n    'all are friends with each other': This implies a complete subgraph of 5 nodes in graph terms.\n    'no two are friends with each other': This implies an independent set of 5 nodes in graph terms.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to check if a group of 5 people are all friends or none are friends should be implemented simultaneously. This can be done by iterating over all combinations of 5 people and checking both conditions in a single loop.\n\n# [edge case]\n    1. Input: 5 0\n       Output: 1 2 3 4 5\n       Explanation: With no friendships, any group of 5 people will have no two friends, making it a successful party.\n    2. Input: 5 10\n       Output: 1 2 3 4 5\n       Explanation: With all possible friendships, any group of 5 people will all be friends, making it a successful party.\n    3. Input: 6 15\n       Output: -1\n       Explanation: If every possible pair among 6 people is a friendship, it's impossible to find a group of 5 where no two are friends.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    The code should efficiently check combinations of 5 people and verify the friendship conditions using the adjacency list or matrix.\n    ```python\n    from itertools import combinations\n\n    def find_successful_party(N, M, friendships):\n        # Create adjacency matrix\n        adj = [[False] * (N + 1) for _ in range(N + 1)]\n        for u, v in friendships:\n            adj[u][v] = True\n            adj[v][u] = True\n\n        # Check all combinations of 5 people\n        for comb in combinations(range(1, N + 1), 5):\n            all_friends = True\n            no_friends = True\n            for i in range(5):\n                for j in range(i + 1, 5):\n                   ", "Round_0": {"code": "from itertools import combinations\nimport sys\n\ndef find_successful_party(N, M, friendships):\n    # Create adjacency matrix\n    adj = [[False] * (N + 1) for _ in range(N + 1)]\n    for u, v in friendships:\n        adj[u][v] = True\n        adj[v][u] = True\n\n    # Check all combinations of 5 people\n    for comb in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if adj[comb[i]][comb[j]]:\n                    no_friends = False\n                else:\n                    all_friends = False\n        if all_friends or no_friends:\n            print(\" \".join(map(str, comb)))\n            return\n\n    print(-1)\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    friendships = []\n    \n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.append((u, v))\n        index += 2\n    \n    find_successful_party(N, M, friendships)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: find_successful_party() missing 3 required positional arguments: 'N', 'M', and 'friendships'"}, "Round_1": {"code": "from itertools import combinations\nimport sys\n\ndef find_successful_party(N, M, friendships):\n    # Create adjacency matrix\n    adj = [[False] * (N + 1) for _ in range(N + 1)]\n    for u, v in friendships:\n        adj[u][v] = True\n        adj[v][u] = True\n\n    # Check all combinations of 5 people\n    for comb in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if adj[comb[i]][comb[j]]:\n                    no_friends = False\n                else:\n                    all_friends = False\n        if all_friends or no_friends:\n            print(\" \".join(map(str, comb)))\n            return\n\n    print(-1)\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    friendships = []\n    \n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.append((u, v))\n        index += 2\n    \n    find_successful_party(N, M, friendships)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"steps\": [\n        \"Read the first line to get N and M.\",\n        \"Read the next M lines to get the friendship pairs (U_i, V_i).\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a successful party can be organized.\",\n      \"steps\": [\n        \"Check if there exists a group of 5 people where all are friends with each other.\",\n        \"Check if there exists a group of 5 people where no two are friends with each other.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"steps\": [\n        \"If a successful party configuration is found, output the 5 people.\",\n        \"If no successful party configuration is found, output -1.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the friendship pairs.\",\n    \"Create a data structure to represent the friendships (e.g., adjacency list or matrix).\",\n    \"Implement a function to check for a clique of 5 people (all friends with each other).\",\n    \"Implement a function to check for an independent set of 5 people (no two are friends).\",\n    \"Iterate over possible combinations of 5 people to check for successful party conditions.\",\n    \"Output the result based on whether a successful party configuration is found.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'successful party'\n    Explanation: A successful party is defined as a gathering of exactly 5 people where either all are friends with each other or none are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5 people': This means the party must consist of precisely 5 individuals.\n    'no two people': This means that in one scenario, none of the 5 people should have a friendship connection with each other.\n\n# [degree adverb] \n    'successful': This indicates the condition that must be met for the party to be considered successful, either all are friends or none are friends.\n\n# [code logic]\n    The steps to check for a clique of 5 people and an independent set of 5 people should be considered simultaneously. This can be done by iterating over combinations of 5 people and checking both conditions in the same loop.\n\n# [edge case] \n    Input: 5 0\n    Output: 1 2 3 4 5\n    Explanation: With no friendships, any group of 5 people will satisfy the condition of no two being friends.\n    \n    Input: 5 10\n    Output: -1\n    Explanation: If all possible pairs are friends, it is impossible to have a group of 5 where no two are friends.\n    \n    Input: 6 15\n    Output: 1 2 3 4 5\n    Explanation: If all 6 people are friends with each other, any subset of 5 will satisfy the condition of all being friends.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Implement logic to check for the absence of friendships (M=0) and handle it by returning any 5 people.\n    - Implement logic to handle the case where all possible pairs are friends (M = N*(N-1)/2 for N=5) and return -1.\n\nYES", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Edge case: No friendships\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    \n    # Edge case: All possible pairs are friends\n    if M == N * (N - 1) // 2:\n        print(\"-1\")\n        return\n    \n    # Check for successful party\n    people = list(range(1, N + 1))\n    \n    for combo in combinations(people, 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    print(\"-1\")\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 100)"}, "Round_1": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Edge case: No friendships\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    \n    # Edge case: All possible pairs are friends\n    if M == N * (N - 1) // 2:\n        print(\"-1\")\n        return\n    \n    # Check for successful party\n    people = list(range(1, N + 1))\n    \n    for combo in combinations(people, 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    print(\"-1\")\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"details\": \"Read the first line to get N and M. Then read the next M lines to get the pairs of friends.\"\n    },\n    {\n      \"description\": \"Represent the friendships in a suitable data structure.\",\n      \"details\": \"Use an adjacency list or adjacency matrix to represent the friendships between people.\"\n    },\n    {\n      \"description\": \"Check for a successful party where all 5 people are friends with each other.\",\n      \"details\": \"Find a complete subgraph (clique) of size 5 in the friendship graph.\"\n    },\n    {\n      \"description\": \"Check for a successful party where no two people are friends with each other.\",\n      \"details\": \"Find an independent set of size 5 in the friendship graph.\"\n    },\n    {\n      \"description\": \"Output the result based on the findings.\",\n      \"details\": \"If a successful party is found, output the 5 people. Otherwise, output -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendship pairs.\",\n    \"Represent the friendships using an adjacency list or matrix.\",\n    \"Implement a function to find a clique of size 5 in the graph.\",\n    \"Implement a function to find an independent set of size 5 in the graph.\",\n    \"Check if either a clique or an independent set of size 5 exists.\",\n    \"Output the 5 people if a successful party is possible, otherwise output -1.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'successful party'\n    Explanation: A successful party is defined as a gathering of exactly 5 people where either all are friends with each other or none are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5': This means the party must consist of precisely 5 people, no more, no less.\n    'no two': This means that in one scenario, none of the pairs of people at the party should be friends.\n\n# [degree adverb]\n    'successful': This indicates the condition that must be met for the party to be considered successful, either all are friends or none are friends.\n\n# [code logic]\n    The steps for checking a clique and an independent set should be considered simultaneously. Both checks can be done in parallel or within the same function to determine if either condition is met.\n\n# [edge case]\n    Input: 5 0\n    Output: 1 2 3 4 5\n    Explanation: With no friendships, any 5 people form an independent set.\n    \n    Input: 5 10\n    Output: -1\n    Explanation: If all possible pairs are friends, a clique of size 5 is possible, but if the graph is not complete, it might not be possible to form a clique or independent set.\n    \n    Input: 6 15\n    Output: 1 2 3 4 5\n    Explanation: If the graph is complete, any 5 people form a clique.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Implement checks for both clique and independent set conditions.\n    - Use graph traversal algorithms to efficiently find cliques and independent sets.\n\nYES", "Round_0": {"code": "def find_successful_party(N, M, friendships):\n    from collections import defaultdict\n    \n    # Create adjacency list for friendships\n    adj_list = defaultdict(set)\n    for u, v in friendships:\n        adj_list[u].add(v)\n        adj_list[v].add(u)\n    \n    # Check for a clique of size 5\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(adj_list[person]) >= 4:\n                friends = list(adj_list[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in adj_list[friends[j]] and\n                                    friends[i] in adj_list[friends[k]] and\n                                    friends[i] in adj_list[friends[l]] and\n                                    friends[j] in adj_list[friends[k]] and\n                                    friends[j] in adj_list[friends[l]] and\n                                    friends[k] in adj_list[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of size 5\n    def find_independent_set():\n        non_friends = set(range(1, N + 1))\n        for person in range(1, N + 1):\n            if len(non_friends) >= 5:\n                independent_set = list(non_friends)[:5]\n                return independent_set\n            non_friends -= adj_list[person]\n        return None\n    \n    # Try to find a clique or independent set\n    clique = find_clique()\n    if clique:\n        return clique\n    \n    independent_set = find_independent_set()\n    if independent_set:\n        return independent_set\n    \n    return -1\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    friendships = []\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.append((u, v))\n        index += 2\n    \n    result = find_successful_party(N, M, friendships)\n    if result == -1:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"input\": \"Raw input data\",\n      \"output\": \"N, M, and a list of tuples representing friendships\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"input\": \"List of friendships\",\n      \"output\": \"Graph data structure representing friendships\"\n    },\n    {\n      \"description\": \"Check for a clique of 5 people where all are friends with each other.\",\n      \"input\": \"Graph data structure\",\n      \"output\": \"List of 5 people if such a clique exists, otherwise null\"\n    },\n    {\n      \"description\": \"Check for a set of 5 people where no two are friends with each other.\",\n      \"input\": \"Graph data structure\",\n      \"output\": \"List of 5 people if such a set exists, otherwise null\"\n    },\n    {\n      \"description\": \"Determine if a successful party is possible and output the result.\",\n      \"input\": \"Results from the clique and independent set checks\",\n      \"output\": \"List of 5 people for a successful party or -1 if not possible\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendships.\",\n    \"Construct a graph representation of the friendships.\",\n    \"Implement a function to search for a clique of 5 people in the graph.\",\n    \"Implement a function to search for an independent set of 5 people in the graph.\",\n    \"Check the results of the clique and independent set functions.\",\n    \"If a successful party configuration is found, print the list of 5 people.\",\n    \"If no successful configuration is found, print -1.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'party': A gathering of exactly 5 people.\n    'successful party': A party where either all 5 people are friends with each other or no two people are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5 people': The party must consist of precisely 5 individuals.\n    'all the people': All 5 people must be friends with each other.\n    'no two people': None of the 5 people should be friends with each other.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to check for a clique of 5 people and a set of 5 people where no two are friends should be considered simultaneously. This can be done by implementing two separate functions that are called one after the other, and the results are checked in a single decision-making block to determine the output.\n\n# [edge case]\n    1. Input: 5 0\n       Output: 1 2 3 4 5\n       Explanation: With no friendships, any 5 people can form a successful party where no two are friends.\n    2. Input: 5 10\n       Output: 1 2 3 4 5\n       Explanation: With all possible friendships, any 5 people can form a successful party where all are friends.\n    3. Input: 6 0\n       Output: 1 2 3 4 5\n       Explanation: With no friendships, any 5 people can form a successful party where no two are friends.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking for a clique or an independent set will naturally handle these scenarios.\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = []\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.append((U, V))\n        index += 2\n    \n    # Create adjacency list for the graph\n    graph = {i: set() for i in range(1, N + 1)}\n    for U, V in friendships:\n        graph[U].add(V)\n        graph[V].add(U)\n    \n    # Check for a clique of 5 people\n    def find_clique():\n        for person in range(1, N + 1):\n            if len(graph[person]) >= 4:\n                friends = list(graph[person])\n                for i in range(len(friends)):\n                    for j in range(i + 1, len(friends)):\n                        for k in range(j + 1, len(friends)):\n                            for l in range(k + 1, len(friends)):\n                                if (friends[i] in graph[friends[j]] and\n                                    friends[i] in graph[friends[k]] and\n                                    friends[i] in graph[friends[l]] and\n                                    friends[j] in graph[friends[k]] and\n                                    friends[j] in graph[friends[l]] and\n                                    friends[k] in graph[friends[l]]):\n                                    return [person, friends[i], friends[j], friends[k], friends[l]]\n        return None\n    \n    # Check for an independent set of 5 people\n    def find_independent_set():\n        if N >= 5:\n            return [1, 2, 3, 4, 5]\n        return None\n    \n    # Determine if a successful party is possible\n    clique = find_clique()\n    independent_set = find_independent_set()\n    \n    if clique:\n        print(' '.join(map(str, clique)))\n    elif independent_set:\n        print(' '.join(map(str, independent_set)))\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"A graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N people.\",\n      \"output\": \"A list of all possible 5-person combinations.\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if all are friends with each other or if none are friends with each other.\",\n      \"output\": \"A boolean indicating whether a successful party configuration is found.\"\n    },\n    {\n      \"description\": \"If a successful party configuration is found, output the 5 people. If none is found after checking all combinations, output -1.\",\n      \"output\": \"The indices of the 5 people for a successful party or -1 if impossible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to get N, M, and the list of friendships.\",\n    \"Construct a graph to represent the friendships using an adjacency list or matrix.\",\n    \"Generate all possible combinations of 5 people from the N people.\",\n    \"For each combination, check if it satisfies the successful party conditions: either all are friends or none are friends.\",\n    \"If a valid combination is found, print the indices of the 5 people. If no valid combination is found, print -1.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'successful party'\n    Explanation: A successful party is defined as a gathering of exactly 5 people where either all are friends with each other or none are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5 people': This means the party must consist of precisely 5 individuals.\n    Implementation: Ensure that any combination of people selected for the party has exactly 5 members.\n\n# [degree adverb]\n    'successful': This indicates the condition that must be met for the party to be considered successful.\n    Implementation: Check if all 5 people are friends or if none are friends to determine success.\n\n# [code logic]\n    The steps for generating combinations and checking conditions should be implemented simultaneously.\n    Explanation: When generating combinations of 5 people, immediately check if they meet the successful party conditions to optimize the process.\n\n# [edge case]\n    Input: 5 0\n    Output: 1 2 3 4 5\n    Explanation: With no friendships, any group of 5 people will have no friends among them, satisfying the condition for a successful party.\n    \n    Input: 6 15\n    Output: 1 2 3 4 5\n    Explanation: If every possible pair among 6 people is a friendship, any group of 5 will all be friends, satisfying the condition for a successful party.\n    \n    Input: 5 4\n    Output: -1\n    Explanation: If the friendships form a chain (e.g., 1-2, 2-3, 3-4, 4-5), no group of 5 can be all friends or none friends, so the output is -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking combinations will naturally handle these scenarios.\n\nNO", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"A graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N people.\",\n      \"output\": \"A list of all possible 5-person combinations.\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if all are friends with each other or if none are friends with each other.\",\n      \"output\": \"A boolean indicating whether a successful party configuration is found.\"\n    },\n    {\n      \"description\": \"If a successful party configuration is found, output the 5 people. If none is found after checking all combinations, output -1.\",\n      \"output\": \"The indices of the 5 people for a successful party or -1 if impossible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get N, M, and the list of friendships.\",\n    \"Construct a graph to represent the friendships using an adjacency list or matrix.\",\n    \"Generate all possible combinations of 5 people from the N people.\",\n    \"For each combination, check if it satisfies the conditions for a successful party: either all are friends or none are friends.\",\n    \"If a valid combination is found, print the indices of the 5 people. If no valid combination is found, print -1.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'successful party'\n    Explanation: A successful party is defined as a gathering of exactly 5 people where either all are friends with each other or none are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5 people': This means the party must consist of precisely 5 individuals, no more, no less.\n    Implementation: Ensure that any combination of people selected for the party has exactly 5 members.\n\n# [degree adverb]\n    'successful': This indicates the condition that must be met for the party to be considered successful.\n    Implementation: Check if the selected group of 5 people either all know each other or none know each other.\n\n# [code logic]\n    The steps \"Generate all possible combinations of 5 people from the N people\" and \"For each combination, check if it satisfies the conditions for a successful party\" should be implemented simultaneously.\n    Explanation: As you generate each combination, immediately check if it meets the criteria for a successful party to avoid unnecessary computations.\n\n# [edge case]\n    Input: 5 0\n    Output: 1 2 3 4 5\n    Explanation: With no friendships, any group of 5 people will satisfy the condition of none being friends with each other.\n    \n    Input: 5 10\n    Output: 1 2 3 4 5\n    Explanation: If all possible pairs are friends, any group of 5 people will satisfy the condition of all being friends with each other.\n    \n    Input: 6 15\n    Output: -1\n    Explanation: If there are more than 5 people and all are friends with each other, selecting any 5 will satisfy the condition, but if the friendships are such that no group of 5 can be formed with all or none being friends, the output should be -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    if M == 0:\n        print(\"1 2 3 4 5\")\n    elif M >= (N * (N - 1)) // 2:\n        print(\"1 2 3 4 5\")\n    else:\n        # Original logic to find a valid combination\n    ```\n\nNO", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Edge cases\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    elif M >= (N * (N - 1)) // 2:\n        print(\"1 2 3 4 5\")\n        return\n    \n    # Check combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendships.\",\n      \"input\": \"Raw input data\",\n      \"output\": \"N, M, and a list of tuples representing friendships\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"input\": \"List of friendships\",\n      \"output\": \"Graph data structure representing friendships\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N people.\",\n      \"input\": \"Number of people N\",\n      \"output\": \"List of all possible 5-person combinations\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if all are friends or none are friends.\",\n      \"input\": \"Graph data structure and 5-person combination\",\n      \"output\": \"Boolean indicating if the combination is a successful party\"\n    },\n    {\n      \"description\": \"Determine if there is at least one successful party combination.\",\n      \"input\": \"Results from checking all 5-person combinations\",\n      \"output\": \"A successful 5-person combination or -1 if none exist\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract N, M, and the list of friendships.\",\n    \"Construct a graph representation of the friendships.\",\n    \"Generate all possible combinations of 5 people from the N people.\",\n    \"For each combination, check if it forms a successful party by verifying if all are friends or none are friends.\",\n    \"If a successful party is found, output the combination. If no successful party is found after checking all combinations, output -1.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'successful party'\n    Explanation: A successful party is defined as a gathering of exactly 5 people where either all are friends with each other or none are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5 people': This means the party must consist of precisely 5 individuals.\n    Implementation: Ensure that any combination of people selected for the party has a length of 5.\n\n# [degree adverb]\n    'successful': This indicates the condition that must be met for the party to be considered successful.\n    Implementation: Check if all 5 people are friends or none are friends in the selected combination.\n\n# [code logic]\n    The steps \"Generate all possible combinations of 5 people from the N people\" and \"For each combination, check if it forms a successful party\" should be implemented simultaneously.\n    Explanation: As you generate each combination, immediately check if it meets the criteria for a successful party to avoid unnecessary computations.\n\n# [edge case]\n    Input: 5 0\n    Output: 1 2 3 4 5\n    Explanation: With no friendships, any combination of 5 people will have no friends among them, thus forming a successful party.\n    \n    Input: 5 10\n    Output: -1\n    Explanation: If all possible pairs are friends, then no combination of 5 people can have none as friends, thus failing the criteria for a successful party.\n    \n    Input: 6 15\n    Output: 1 2 3 4 5\n    Explanation: If all 6 people are friends with each other, any subset of 5 will be a successful party.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    if M == 0:\n        print(' '.join(map(str, range(1, 6))))\n        return\n    if M >= (N * (N - 1)) // 2:\n        print(-1)\n        return\n    ```\n\nYES", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Edge case handling\n    if M == 0:\n        print(' '.join(map(str, range(1, 6))))\n        return\n    if M >= (N * (N - 1)) // 2:\n        print(-1)\n        return\n    \n    # Parse friendships\n    friendships = set()\n    index = 2\n    for _ in range(M):\n        u = int(data[index])\n        v = int(data[index + 1])\n        friendships.add((u, v))\n        friendships.add((v, u))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N people.\",\n      \"output\": \"List of all possible 5-person combinations.\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if all are friends with each other or if none are friends with each other.\",\n      \"output\": \"Boolean indicating if a successful party configuration is found.\"\n    },\n    {\n      \"description\": \"If a successful party configuration is found, output the 5 people. If none is found after checking all combinations, output -1.\",\n      \"output\": \"5-person list or -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to get N, M, and the list of friendships.\",\n    \"Construct a graph to represent the friendships using an adjacency list or matrix.\",\n    \"Generate all possible combinations of 5 people from the N people.\",\n    \"For each combination, check if it satisfies the successful party conditions: either all are friends or none are friends.\",\n    \"If a valid combination is found, print the 5 people. If no valid combination is found after checking all, print -1.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'successful party'\n    Explanation: A successful party is defined as a gathering of exactly 5 people where either all are friends with each other or none are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5 people': This means the party must consist of precisely 5 individuals.\n    Implementation: Ensure that any combination of people selected for the party has a length of 5.\n\n# [degree adverb]\n    'successful': This indicates the condition for the party to be considered successful, which is either all attendees are friends or none are friends.\n    Implementation: Check the friendship status among the selected 5 people to determine if the party is successful.\n\n# [code logic]\n    The steps \"Generate all possible combinations of 5 people from the N people\" and \"For each combination, check if it satisfies the successful party conditions\" should be implemented simultaneously.\n    Explanation: As you generate each combination, immediately check if it meets the conditions for a successful party to avoid unnecessary computations.\n\n# [edge case]\n    Input: 5 0\n    Output: 1 2 3 4 5\n    Explanation: With no friendships, any group of 5 people will have no friends among them, satisfying the condition for a successful party.\n    \n    Input: 5 10\n    Output: -1\n    Explanation: If all possible pairs are friends, then no group of 5 can have none as friends, failing the condition for a successful party.\n    \n    Input: 6 15\n    Output: 1 2 3 4 5\n    Explanation: If all people are friends with each other, any group of 5 will satisfy the condition for a successful party.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    if M == 0:\n        print(' '.join(map(str, range(1, 6))))\n        return\n    if M >= (N * (N - 1)) // 2:\n        print(-1)\n        return\n    ```\n\nYES", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Edge cases\n    if M == 0:\n        print(' '.join(map(str, range(1, 6))))\n        return\n    if M >= (N * (N - 1)) // 2:\n        print(-1)\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U_i = int(data[index])\n        V_i = int(data[index + 1])\n        index += 2\n        friendships.add((U_i, V_i))\n        friendships.add((V_i, U_i))\n    \n    # Generate all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(' '.join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), the number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a data structure to represent the friendships, such as an adjacency list or adjacency matrix.\",\n      \"output\": \"A graph representation of friendships among people.\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N people.\",\n      \"output\": \"A list of all possible 5-person combinations.\"\n    },\n    {\n      \"description\": \"For each combination of 5 people, check if they form a successful party by verifying the two conditions: all are friends or none are friends.\",\n      \"output\": \"A boolean indicating whether a successful party is possible for each combination.\"\n    },\n    {\n      \"description\": \"If a successful party is found, output the combination of 5 people. If no successful party is found after checking all combinations, output -1.\",\n      \"output\": \"The indices of 5 people forming a successful party or -1 if impossible.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to get N, M, and the list of friendships.\",\n    \"Construct a graph representation of the friendships using an adjacency list.\",\n    \"Generate all possible combinations of 5 people from the N people.\",\n    \"For each combination, check if all 5 people are friends with each other or if none of them are friends with each other.\",\n    \"If a valid combination is found, print the indices of the 5 people. If no valid combination is found, print -1.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'successful party'\n    Explanation: A successful party is defined as a gathering of exactly 5 people where either all are friends with each other or none are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5 people': This means the party must consist of precisely 5 individuals, no more, no less.\n    'no two people': This means that in one scenario, none of the 5 people should have a friendship connection with each other.\n\n# [degree adverb]\n    'successful': This indicates the condition that must be met for the party to be considered successful, either all are friends or none are friends.\n\n# [code logic]\n    The steps related to checking combinations of 5 people should be implemented simultaneously:\n    \"Generate all possible combinations of 5 people from the N people.\"\n    \"For each combination, check if all 5 people are friends with each other or if none of them are friends with each other.\"\n    This can be done using a loop to iterate over combinations and a nested check for friendship conditions.\n\n# [edge case]\n    Input: 5 0\n    Output: 1 2 3 4 5\n    Explanation: With 0 friendships, any combination of 5 people will satisfy the condition of no two people being friends.\n    \n    Input: 5 10\n    Output: -1\n    Explanation: If all possible pairs are friends, then no combination of 5 people can satisfy the condition of none being friends.\n    \n    Input: 6 15\n    Output: -1\n    Explanation: If the number of friendships is such that all people are interconnected, it is impossible to find a group of 5 where none are friends.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where either all friendships are present or none are present.\n    This can be handled by checking the total number of friendships and comparing it to possible combinations.\n\nYES", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check for the edge case where there are no friendships\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    \n    # Check for the edge case where all possible pairs are friends\n    if M == N * (N - 1) // 2:\n        print(\"-1\")\n        return\n    \n    # Generate all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        # Check if all are friends or none are friends\n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    # If no successful party is found\n    print(\"-1\")\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of people (N), number of friendships (M), and the list of friendship pairs.\",\n      \"output\": \"N, M, and a list of tuples representing friendships.\"\n    },\n    {\n      \"description\": \"Create a graph representation of the friendships using an adjacency list or adjacency matrix.\",\n      \"output\": \"Graph data structure representing friendships.\"\n    },\n    {\n      \"description\": \"Identify all possible combinations of 5 people from the N people.\",\n      \"output\": \"List of all possible 5-person combinations.\"\n    },\n    {\n      \"description\": \"For each 5-person combination, check if all are friends with each other or if none are friends with each other.\",\n      \"output\": \"Boolean indicating if a successful party configuration is found.\"\n    },\n    {\n      \"description\": \"If a successful party configuration is found, output the 5 people. If none is found after checking all combinations, output -1.\",\n      \"output\": \"5-person list or -1.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to get N, M, and the list of friendships.\",\n    \"Construct a graph to represent the friendships using an adjacency list or matrix.\",\n    \"Generate all possible combinations of 5 people from the N people.\",\n    \"For each combination, check if it satisfies the successful party conditions: either all are friends or none are friends.\",\n    \"If a valid combination is found, print the 5 people. If no valid combination is found after checking all, print -1.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'successful party'\n    Explanation: A successful party is defined as a gathering of exactly 5 people where either all are friends with each other or none are friends with each other.\n\n# [phrase showing quantity relationship]\n    'exactly 5 people': This means the party must consist of precisely 5 individuals.\n    Implementation: Ensure that any combination of people selected for the party has a length of 5.\n\n# [degree adverb]\n    'successful': This indicates the condition that must be met for the party to be considered successful.\n    Implementation: Check if all 5 people are friends or none are friends to determine success.\n\n# [code logic]\n    The steps for generating combinations and checking conditions should be implemented simultaneously.\n    Explanation: When generating combinations of 5 people, immediately check if they meet the successful party conditions to avoid unnecessary computations.\n\n# [edge case]\n    Input: 5 0\n    Output: 1 2 3 4 5\n    Explanation: With no friendships, any group of 5 people will have no friends among them, satisfying the condition for a successful party.\n    \n    Input: 6 15\n    Output: 1 2 3 4 5\n    Explanation: If all possible pairs are friends, any group of 5 people will be friends with each other, satisfying the condition for a successful party.\n    \n    Input: 5 4\n    Output: -1\n    Explanation: If the friendships form a chain (e.g., 1-2, 2-3, 3-4, 4-5), no group of 5 can satisfy either condition, resulting in -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    if M == (N * (N - 1)) // 2:\n        print(\"1 2 3 4 5\")\n        return\n    ```\n\nNO", "Round_0": {"code": "import sys\nfrom itertools import combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    # Edge cases\n    if M == 0:\n        print(\"1 2 3 4 5\")\n        return\n    if M == (N * (N - 1)) // 2:\n        print(\"1 2 3 4 5\")\n        return\n    \n    friendships = set()\n    index = 2\n    for _ in range(M):\n        U = int(data[index])\n        V = int(data[index + 1])\n        friendships.add((U, V))\n        friendships.add((V, U))\n        index += 2\n    \n    # Check all combinations of 5 people\n    for combo in combinations(range(1, N + 1), 5):\n        all_friends = True\n        no_friends = True\n        \n        for i in range(5):\n            for j in range(i + 1, 5):\n                if (combo[i], combo[j]) in friendships:\n                    no_friends = False\n                else:\n                    all_friends = False\n        \n        if all_friends or no_friends:\n            print(\" \".join(map(str, combo)))\n            return\n    \n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 473, "prompt": "On the great island of Baltia, there live N people, numbered from 1 to N. There are exactly M pairs of people that are friends with each other. The people of Baltia want to organize a successful party, but they have very strict rules on what a party is and when the party is successful. On the island of Baltia, a party is a gathering of exactly 5 people, and it is considered successful if either all the people at the party are friends with each other (so that they can all talk to each other without having to worry about talking to someone they are not friends with) or no two people at the party are friends with each other (so that everyone can just be on their phones without anyone else bothering them). Please help the people of Baltia organize a successful party or tell them that it's impossible to do so.\n\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "examples": "\nInput\n\nThe first line contains two integer numbers, N (5 \u2264 N \u2264 2*10^5) and M (0 \u2264 M \u2264 2*10^5) \u2013 the number of people that live in Baltia, and the number of friendships. The next M lines each contains two integers U_i and V_i (1 \u2264 U_i,V_i \u2264 N) \u2013 meaning that person U_i is friends with person V_i. Two friends can not be in the list of friends twice (no pairs are repeated) and a person can be friends with themselves (U_i \u2260 V_i).\n\nOutput\n\nIf it's possible to organize a successful party, print 5 numbers indicating which 5 people should be invited to the party. If it's not possible to organize a successful party, print -1 instead. If there are multiple successful parties possible, print any.\n\nExamples\n\nInput\n\n\n6 3\n1 4\n4 2\n5 4\n\n\nOutput\n\n\n1 2 3 5 6\n\n\nInput\n\n\n5 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n-1", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 29}
