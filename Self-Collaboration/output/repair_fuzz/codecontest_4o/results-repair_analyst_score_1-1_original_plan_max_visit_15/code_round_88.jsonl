{"name": "1575_I. Illusions of the Desert", "description": "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions.\n\nThe map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them such that it is possible to travel between each pair of rooms through several tunnels.\n\nThe i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z.\n\nTo prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries.\n\nThere are two types of queries to be done:\n\n  * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). \n  * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). \n\n\n\nHelp them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "tags": ["data structures", "trees"], "difficulty": 15, "id": 1575, "sample_io": [{"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["39\n32\n0\n"]}], "test_list": [{"input": "2 1\n-1000000000 1000000000\n2 1\n2 1 2\n", "output": ["2000000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000000003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["19\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n30\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n"]}, {"input": "2 1\n-1000000000 1010000000\n2 1\n2 1 2\n", "output": ["2010000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000002003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["39\n33\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n32\n23\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n32\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["9\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["35\n29\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["9\n32\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["31\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["3\n26\n22\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n40\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n38\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n29\n0\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["17\n0\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["16\n0\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n19\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n22\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n34\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n8\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["9\n13\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 2 3\n", "output": ["8\n11\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000002003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n22\n15\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["1\n4\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["21\n32\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 6 3\n", "output": ["9\n30\n5\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 0\n2 1 2\n2 5 2\n", "output": ["3\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n45\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n24\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n7\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n21\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n15\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["19\n32\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["21\n0\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["1\n14\n21\n"]}, {"input": "6 4\n0 -9 2 -1 3 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["19\n30\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["38\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["3\n24\n22\n"]}, {"input": "6 3\n0 0 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 4\n1 2 3\n", "output": ["19\n12\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["28\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n4\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 5 2\n", "output": ["1\n5\n9\n"]}, {"input": "6 4\n10 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["26\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["0\n5\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["5\n5\n0\n"]}, {"input": "2 1\n-1000000000 1000000010\n2 1\n2 1 2\n", "output": ["2000000010\n"]}, {"input": "6 4\n0 -9 2 -1 4 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n22\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["9\n12\n21\n"]}, {"input": "2 1\n-651044801 1010000000\n2 1\n2 1 2\n", "output": ["1661044801\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["10\n0\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n2 3 3\n", "output": ["9\n15\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["35\n35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -2\n2 1 2\n1 3 2\n", "output": ["9\n31\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n30\n0\n"]}, {"input": "6 4\n10 -13 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["0\n26\n22\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n35\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n23\n"]}, {"input": "6 4\n-1 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["17\n0\n13\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n13\n"]}, {"input": "6 4\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 2 3\n", "output": ["8\n12\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["39\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n31\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 5\n", "output": ["0\n7\n4\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["37\n0\n0\n"]}, {"input": "4 4\n2 -1000 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n21\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n43\n15\n"]}, {"input": "6 4\n3 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["19\n0\n"]}, {"input": "2 1\n-651044801 1010000100\n2 1\n2 1 2\n", "output": ["1661044901\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["28\n30\n14\n"]}, {"input": "6 4\n0 -6 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n20\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["9\n0\n13\n"]}, {"input": "6 3\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 5\n2 2 3\n", "output": ["8\n8\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["37\n0\n"]}, {"input": "4 4\n2 -1000 110 4\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000004\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n13\n51\n"]}, {"input": "6 4\n0 -9 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["27\n30\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["51\n25\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n10\n48\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["57\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n55\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 6\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n24\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["37\n40\n"]}, {"input": "2 1\n-1000000000 1010001000\n2 1\n2 1 2\n", "output": ["2010001000\n"]}, {"input": "6 4\n0 -9 2 -1 4 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n26\n17\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["5\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["1\n34\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["17\n35\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n38\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n8\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 6\n", "output": ["16\n0\n10\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n"]}, {"input": "6 4\n0 -12 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n16\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["29\n8\n0\n"]}, {"input": "6 4\n10 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n27\n0\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["49\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 1\n", "output": ["9\n0\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 6\n", "output": ["9\n13\n7\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 1 3\n", "output": ["17\n45\n35\n"]}, {"input": "6 4\n0 -3 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n23\n0\n"]}, {"input": "6 4\n10 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["11\n24\n"]}, {"input": "6 4\n10 -9 2 -1 6 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["42\n0\n"]}, {"input": "6 4\n1 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["4\n24\n22\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["0\n4\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 6\n", "output": ["0\n5\n2\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 4 3\n", "output": ["9\n13\n21\n"]}, {"input": "6 4\n10 -9 2 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["31\n31\n0\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 6\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n22\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["47\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n28\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n23\n"]}, {"input": "6 4\n0 -9 4 1 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["1\n0\n13\n"]}, {"input": "6 4\n0 -9 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["8\n12\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n25\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 1 5\n", "output": ["0\n7\n2\n"]}, {"input": "4 4\n2 -1350 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1460\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 7 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n24\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -4\n2 1 2\n2 2 3\n", "output": ["28\n34\n10\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n3 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["23\n29\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 4 2\n2 2 3\n", "output": ["9\n9\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n5 2\n2 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n20\n13\n"]}, {"input": "6 4\n3 -2 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 4\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["21\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["28\n15\n"]}, {"input": "6 4\n0 -8 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["26\n29\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 2\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n67\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 3\n", "output": ["37\n23\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 6\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["30\n10\n20\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 2 4\n1 2 3\n", "output": ["9\n44\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 4\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n33\n"]}, {"input": "6 3\n10 -21 2 -1 8 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n63\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 5\n0 2 3\n", "output": ["9\n7\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 3 3\n", "output": ["10\n35\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -4\n2 1 2\n1 3 3\n", "output": ["31\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["2\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n9\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 6\n", "output": ["16\n0\n15\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["33\n27\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 3 2\n2 3 1\n", "output": ["9\n23\n25\n"]}, {"input": "6 4\n0 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n15\n14\n"]}, {"input": "6 4\n19 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["20\n24\n"]}, {"input": "6 4\n0 -9 2 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 5 3\n", "output": ["9\n13\n16\n"]}, {"input": "6 4\n-1 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["5\n0\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -11\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["57\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -4\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["33\n0\n19\n"]}, {"input": "6 4\n0 -9 4 1 -1 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["3\n0\n13\n"]}, {"input": "4 4\n2 -2609 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2719\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["9\n26\n15\n"]}, {"input": "6 4\n13 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 3 -3\n2 1 2\n2 2 3\n", "output": ["31\n24\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 2 3\n", "output": ["10\n35\n25\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n31\n9\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["13\n37\n0\n"]}, {"input": "6 4\n1 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["17\n15\n14\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["21\n12\n0\n"]}, {"input": "6 4\n0 -17 2 -1 4 -16\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["42\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["27\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["21\n30\n20\n"]}, {"input": "6 3\n0 -7 4 -1 10 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n42\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -2\n2 1 3\n2 3 3\n", "output": ["13\n36\n0\n"]}, {"input": "6 4\n19 -3 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 1 3\n", "output": ["20\n18\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 1 3\n", "output": ["21\n12\n25\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["13\n27\n0\n"]}, {"input": "6 3\n0 -7 4 -1 10 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n36\n"]}, {"input": "6 4\n0 -16 2 -1 4 -23\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["56\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 2 2\n2 4 4\n", "output": ["13\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n1 2 2\n2 4 4\n", "output": ["13\n0\n"]}, {"input": "4 4\n3 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2103\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 2\n", "output": ["9\n12\n23\n"]}, {"input": "6 3\n0 -5 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n1 1 4\n2 2 3\n", "output": ["9\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -5\n2 1 2\n2 3 3\n", "output": ["0\n31\n0\n"]}, {"input": "6 4\n0 -9 4 0 11 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["22\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -5\n2 1 2\n2 3 3\n", "output": ["0\n36\n0\n"]}, {"input": "6 4\n10 -1 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 4\n", "output": ["9\n0\n23\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["4\n13\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 2 -1000000000\n2 1 4\n", "output": ["1100\n0\n2000000005\n"]}, {"input": "6 4\n0 -4 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n19\n0\n"]}], "task_id": "codecontest/8", "repair_prompt": ["Chanek Jones is back, aiding his long-lost relative Indiana Jones in locating a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, making it possible to travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate, requiring max(|a_x + a_y|, |a_x - a_y|) energy to travel. |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Chanek Jones is back, aiding his long-lost relative Indiana Jones in locating a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n. There are n - 1 tunnels connecting them, making it possible to travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate, requiring max(|a_x + a_y|, |a_x - a_y|) energy to travel. |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Chanek Jones is back, aiding his long-lost relative Indiana Jones in locating a secret treasure in a maze buried below a desert full of illusions, and the map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, making it possible to travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate, requiring max(|a_x + a_y|, |a_x - a_y|) energy to travel; |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    def calculate_energy(a, b):\n        return max(abs(a + b), abs(a - b))\n    \n    def bfs_find_path_energy(start, end):\n        queue = deque([(start, -1, 0)])  # (current_node, parent, current_energy)\n        visited = set()\n        \n        while queue:\n            current, parent, current_energy = queue.popleft()\n            if current == end:\n                return current_energy\n            \n            visited.add(current)\n            \n            for neighbor in tree[current]:\n                if neighbor != parent and neighbor not in visited:\n                    energy = calculate_energy(illusion_rates[current], illusion_rates[neighbor])\n                    queue.append((neighbor, current, current_energy + energy))\n        \n        return -1  # Should never reach here if the input is valid\n    \n    results = []\n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            illusion_rates[u] = c\n        elif query[0] == 2:\n            _, u, v = query\n            energy = bfs_find_path_energy(u, v)\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse n and q\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Parse tree connections\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Function to calculate energy cost between two rooms\n    def energy_cost(a, b):\n        return max(abs(a + b), abs(a - b))\n    \n    # Function to find the path and calculate the minimum energy using BFS\n    def bfs_min_energy(start, end):\n        queue = deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == end:\n                return energy\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    new_energy = energy + energy_cost(illusion_rates[current], illusion_rates[neighbor])\n                    queue.append((neighbor, new_energy))\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 1 else int(data[index + 2]) - 1\n        index += 3\n        \n        if query_type == 1:\n            # Update illusion rate\n            illusion_rates[u] = v\n        elif query_type == 2:\n            # Calculate minimum energy\n            min_energy = bfs_min_energy(u, v)\n            results.append(min_energy)\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    def bfs_min_energy(u, v):\n        queue = deque([(u, 0)])\n        visited = set()\n        visited.add(u)\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == v:\n                return energy\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy_cost = max(abs(illusion_rates[current] + illusion_rates[neighbor]), \n                                      abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy + energy_cost))\n    \n    results = []\n    \n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        \n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index]) - 1\n            index += 1\n            results.append(bfs_min_energy(u, v))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Read initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Read tunnel connections and build the tree\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate energy between two rooms\n    def calculate_energy(a_x, a_y):\n        return max(abs(a_x + a_y), abs(a_x - a_y))\n    \n    # Function to find the path and calculate energy using BFS\n    def bfs_energy(u, v):\n        queue = deque([(u, 0)])\n        visited = set()\n        parent = {u: None}\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == v:\n                return energy\n            \n            visited.add(current)\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    parent[neighbor] = current\n                    queue.append((neighbor, energy + calculate_energy(illusion_rates[current], illusion_rates[neighbor])))\n        \n        return -1  # Should not reach here if the tree is valid\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update illusion rate\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate minimum energy\n            v = int(data[index]) - 1\n            index += 1\n            results.append(bfs_energy(u, v))\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, lca_node, illusion_rates, parent_list):\n    energy = 0\n    while u != lca_node:\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_list[u]]), abs(illusion_rates[u] - illusion_rates[parent_list[u]]))\n        u = parent_list[u]\n    while v != lca_node:\n        energy += max(abs(illusion_rates[v] + illusion_rates[parent_list[v]]), abs(illusion_rates[v] - illusion_rates[parent_list[v]]))\n        v = parent_list[v]\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Read initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Read tree structure\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to find path and calculate energy\n    def find_energy(u, v):\n        # BFS to find path from u to v\n        queue = deque([u])\n        parent = {u: None}\n        \n        while queue:\n            node = queue.popleft()\n            if node == v:\n                break\n            for neighbor in tree[node]:\n                if neighbor not in parent:\n                    parent[neighbor] = node\n                    queue.append(neighbor)\n        \n        # Calculate energy along the path\n        energy = 0\n        current = v\n        while parent[current] is not None:\n            prev = parent[current]\n            energy += max(abs(illusion_rates[current] + illusion_rates[prev]), abs(illusion_rates[current] - illusion_rates[prev]))\n            current = prev\n        \n        return energy\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            illusion_rates[u] = c\n            index += 3\n        elif query_type == 2:\n            v = int(data[index + 2]) - 1\n            results.append(find_energy(u, v))\n            index += 3\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nimport collections\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    def dfs_find_path(start, end):\n        stack = [(start, -1)]\n        path = []\n        found = False\n        \n        while stack:\n            node, par = stack.pop()\n            path.append(node)\n            if node == end:\n                found = True\n                break\n            for neighbor in tree[node]:\n                if neighbor != par:\n                    stack.append((neighbor, node))\n            if not found:\n                path.pop()\n        \n        return path\n    \n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            illusion_rates[u] = c\n        else:\n            _, u, v = query\n            if u == v:\n                print(0)\n                continue\n            \n            path = dfs_find_path(u, v)\n            total_energy = 0\n            for i in range(len(path) - 1):\n                x = path[i]\n                y = path[i + 1]\n                energy = max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n                total_energy += energy\n            \n            print(total_energy)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    def bfs_path(start, end):\n        queue = deque([start])\n        parent = {start: None}\n        \n        while queue:\n            node = queue.popleft()\n            if node == end:\n                break\n            for neighbor in tree[node]:\n                if neighbor not in parent:\n                    parent[neighbor] = node\n                    queue.append(neighbor)\n        \n        path = []\n        while end is not None:\n            path.append(end)\n            end = parent[end]\n        \n        return path[::-1]\n    \n    results = []\n    \n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        \n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index]) - 1\n            path = bfs_path(u, v)\n            energy = 0\n            for i in range(len(path) - 1):\n                x = path[i]\n                y = path[i + 1]\n                energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 2 else int(data[index + 2])\n        queries.append((query_type, u, v))\n        index += 3\n    \n    return n, q, illusion_rates, tree, queries\n\ndef update_illusion_rate(illusion_rates, room, new_rate):\n    illusion_rates[room] = new_rate\n\ndef calculate_energy(illusion_rates, tree, start, end):\n    def bfs(start, end):\n        queue = deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            if current == end:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]), \n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n        return float('inf')\n    \n    return bfs(start, end)\n\ndef main():\n    n, q, illusion_rates, tree, queries = parse_input()\n    \n    results = []\n    for query in queries:\n        query_type, u, v = query\n        if query_type == 1:\n            update_illusion_rate(illusion_rates, u, v)\n        elif query_type == 2:\n            energy = calculate_energy(illusion_rates, tree, u, v)\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def dfs(node, parent, depth, tree, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in tree[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, tree, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list, depth_list):\n    ancestor = lca(u, v, parent_list, depth_list)\n    energy = 0\n    while u != ancestor:\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_list[u]]), abs(illusion_rates[u] - illusion_rates[parent_list[u]]))\n        u = parent_list[u]\n    while v != ancestor:\n        energy += max(abs(illusion_rates[v] + illusion_rates[parent_list[v]]), abs(illusion_rates[v] - illusion_rates[parent_list[v]]))\n        v = parent_list[v]\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    dfs(1, 0, 0, tree, parent_list, depth_list)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        if query_type == 1:\nmain()", "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    def calculate_energy(a, b):\n        return max(abs(a + b), abs(a - b))\n    \n    def bfs_find_path_energy(start, end):\n        queue = deque([(start, -1, 0)])  # (current_node, parent, current_energy)\n        visited = set()\n        \n        while queue:\n            current, parent, current_energy = queue.popleft()\n            if current == end:\n                return current_energy\n            \n            visited.add(current)\n            \n            for neighbor in tree[current]:\n                if neighbor != parent and neighbor not in visited:\n                    energy = calculate_energy(illusion_rates[current], illusion_rates[neighbor])\n                    queue.append((neighbor, current, current_energy + energy))\n        \n        return -1  # Should never reach here if the input is valid\n    \n    results = []\n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            illusion_rates[u] = c\n        elif query[0] == 2:\n            _, u, v = query\n            energy = bfs_find_path_energy(u, v)\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure of the maze.\",\n      \"steps\": [\n        \"Read the first line to get the number of rooms (n) and the number of queries (q).\",\n        \"Read the second line to get the initial illusion rates for each room.\",\n        \"Read the next n-1 lines to construct the tree structure using adjacency lists or another suitable data structure.\",\n        \"Read the next q lines to store the queries.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a function to update the illusion rate of a specific room based on type 1 queries.\",\n      \"steps\": [\n        \"For a type 1 query, update the illusion rate of the specified room to the new value.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a function to calculate the minimum sum of energy required to travel between two rooms based on type 2 queries.\",\n      \"steps\": [\n        \"Use a tree traversal algorithm (e.g., DFS or BFS) to find the path between the two specified rooms.\",\n        \"Calculate the energy required for each segment of the path using the formula max(|a_x + a_y|, |a_x - a_y|).\",\n        \"Sum the energy values for the entire path and return the result.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data structures for rooms, illusion rates, and tree connections.\",\n    \"Iterate over each query and determine its type.\",\n    \"For type 1 queries, update the illusion rate of the specified room.\",\n    \"For type 2 queries, calculate the minimum energy required to travel between the specified rooms using the current illusion rates.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree': A tree is a connected graph with no cycles, which means there is exactly one path between any two nodes (rooms in this case).\n    'illusion rate': This is a value associated with each room that affects the energy required to travel between rooms.\n    'energy calculation': The energy required to travel between rooms is calculated using the formula max(|a_x + a_y|, |a_x - a_y|).\n\n# [phrase showing quantity relationship]\n    'max': This indicates that for each segment of the path, the energy is the maximum of the two calculated values, |a_x + a_y| and |a_x - a_y|. In code, this can be implemented using the `max()` function.\n\n# [degree adverb]\n    'minimum': For type 2 queries, the task is to find the minimum sum of energy needed to travel from one room to another. This involves calculating the energy for each path segment and summing them up.\n\n# [code logic]\n    The steps for handling type 2 queries should be implemented simultaneously:\n    - \"Use a tree traversal algorithm (e.g., DFS or BFS) to find the path between the two specified rooms.\"\n    - \"Calculate the energy required for each segment of the path using the formula max(|a_x + a_y|, |a_x - a_y|).\"\n    These can be combined into a single traversal function that calculates the energy as it finds the path.\n\n# [edge case]\n    1. Input: 2 1\n       0 0\n       1 2\n       2 1 2\n       Output: 0\n       Explanation: Both rooms have an illusion rate of 0, so the energy required is max(|0 + 0|, |0 - 0|) = 0.\n\n    2. Input: 3 1\n       1 1 1\n       1 2\n       2 3\n       2 1 3\n       Output: 2\n       Explanation: The path is 1 -> 2 -> 3, with energy calculations max(|1 + 1|, |1 - 1|) = 2 and max(|1 + 1|, |1 - 1|) = 2, totaling 4.\n\n    3. Input: 4 1\n       10 -10 10 -10\n       1", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    def calculate_energy(a, b):\n        return max(abs(a + b), abs(a - b))\n    \n    def bfs_find_path_energy(start, end):\n        queue = deque([(start, -1, 0)])  # (current_node, parent, current_energy)\n        visited = set()\n        \n        while queue:\n            current, parent, current_energy = queue.popleft()\n            if current == end:\n                return current_energy\n            \n            visited.add(current)\n            \n            for neighbor in tree[current]:\n                if neighbor != parent and neighbor not in visited:\n                    energy = calculate_energy(illusion_rates[current], illusion_rates[neighbor])\n                    queue.append((neighbor, current, current_energy + energy))\n        \n        return -1  # Should never reach here if the input is valid\n    \n    results = []\n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            illusion_rates[u] = c\n        elif query[0] == 2:\n            _, u, v = query\n            energy = bfs_find_path_energy(u, v)\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms (n), number of queries (q), initial illusion rates (a), and the tree structure of the maze.\"\n    },\n    {\n      \"description\": \"Construct the tree representation of the maze using the room connections.\",\n      \"output\": \"A tree data structure that allows traversal between rooms.\"\n    },\n    {\n      \"description\": \"Implement a function to update the illusion rate of a specific room based on type 1 queries.\",\n      \"output\": \"Updated illusion rates for the specified room.\"\n    },\n    {\n      \"description\": \"Implement a function to calculate the minimum energy required to travel from room u to room v based on type 2 queries.\",\n      \"output\": \"The minimum energy required for each type 2 query.\"\n    },\n    {\n      \"description\": \"Efficiently handle multiple queries, ensuring that updates and calculations are performed in a time-efficient manner.\",\n      \"output\": \"Optimized query handling to ensure performance within constraints.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct the tree representation of the maze using adjacency lists or another suitable data structure.\",\n    \"For each query, determine the type of query (type 1 or type 2).\",\n    \"If the query is type 1, update the illusion rate of the specified room.\",\n    \"If the query is type 2, calculate the minimum energy required to travel from room u to room v using a tree traversal algorithm (e.g., DFS or BFS) and considering the illusion rates.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: The maze is structured as a tree, meaning it is a connected graph with no cycles. This is important for traversal and pathfinding algorithms.\n\n    'illusion rate'\n    Explanation: Each room has an associated illusion rate, which affects the energy cost of traveling between rooms. The energy cost is calculated using the formula max(|a_x + a_y|, |a_x - a_y|).\n\n    'queries'\n    Explanation: There are two types of queries: one to update the illusion rate of a room and another to calculate the minimum energy required to travel between two rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)': This phrase indicates that the energy cost is the maximum of the absolute sum and the absolute difference of the illusion rates of two connected rooms. In code, this can be implemented using the `max` and `abs` functions.\n\n# [degree adverb]\n    'minimum': This indicates that for type 2 queries, we need to find the path with the least energy cost between two rooms. This can be implemented using a pathfinding algorithm that minimizes the energy cost, such as Dijkstra's algorithm.\n\n# [code logic]\n    The steps for handling type 1 and type 2 queries should be implemented in separate code blocks, as they involve different operations (updating a value vs. calculating a path cost). However, the parsing of input and construction of the tree can be done simultaneously as they are part of the setup phase.\n\n# [edge case]\n    1. Minimum number of rooms and queries: n = 2, q = 1\n       Input: \n       ```\n       2 1\n       0 0\n       1 2\n       2 1 2\n       ```\n       Expected Output: 0\n       Explanation: With both rooms having an illusion rate of 0, the energy cost is 0.\n\n    2. All rooms have the same illusion rate:\n       Input:\n       ```\n       3 1\n       5 5 5\n       1 2\n       2 3\n       2 1 3\n       ```\n       Expected Output: 10\n       Explanation: The energy cost between any two rooms is max(|5 + 5|, |5 - 5|) = 10.\n\n    3. Maximum illusion rate change:\n       Input:\n", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse n and q\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Parse tree connections\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Function to calculate energy cost between two rooms\n    def energy_cost(a, b):\n        return max(abs(a + b), abs(a - b))\n    \n    # Function to find the path and calculate the minimum energy using BFS\n    def bfs_min_energy(start, end):\n        queue = deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == end:\n                return energy\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    new_energy = energy + energy_cost(illusion_rates[current], illusion_rates[neighbor])\n                    queue.append((neighbor, new_energy))\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 1 else int(data[index + 2]) - 1\n        index += 3\n        \n        if query_type == 1:\n            # Update illusion rate\n            illusion_rates[u] = v\n        elif query_type == 2:\n            # Calculate minimum energy\n            min_energy = bfs_min_energy(u, v)\n            results.append(min_energy)\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 155)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Parse n and q\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Parse initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Parse tree connections\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    # Function to calculate energy cost between two rooms\n    def energy_cost(a, b):\n        return max(abs(a + b), abs(a - b))\n    \n    # Function to find the path and calculate the minimum energy using BFS\n    def bfs_min_energy(start, end):\n        queue = deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == end:\n                return energy\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    new_energy = energy + energy_cost(illusion_rates[current], illusion_rates[neighbor])\n                    queue.append((neighbor, new_energy))\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 1 else int(data[index + 2]) - 1\n        index += 3\n        \n        if query_type == 1:\n            # Update illusion rate\n            illusion_rates[u] = v\n        elif query_type == 2:\n            # Calculate minimum energy\n            min_energy = bfs_min_energy(u, v)\n            results.append(min_energy)\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms (n), number of queries (q), list of illusion rates (a), and adjacency list for the tree structure.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates to the illusion rates and queries for minimum energy path calculations.\",\n      \"output\": \"A segment tree or similar data structure to manage updates and queries efficiently.\"\n    },\n    {\n      \"description\": \"Develop a function to handle type 1 queries, which update the illusion rate of a specific room.\",\n      \"output\": \"Function that updates the data structure with the new illusion rate for the specified room.\"\n    },\n    {\n      \"description\": \"Develop a function to handle type 2 queries, which calculate the minimum energy required to travel from room u to room v.\",\n      \"output\": \"Function that computes the minimum energy path using the current illusion rates and the tree structure.\"\n    },\n    {\n      \"description\": \"Implement a mechanism to output the results of type 2 queries.\",\n      \"output\": \"Output the calculated minimum energy for each type 2 query.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct an adjacency list to represent the tree structure of the maze.\",\n    \"Initialize a data structure to manage illusion rate updates and energy calculations efficiently.\",\n    \"For each query, determine the type and execute the corresponding function:\",\n    \"  - If the query is type 1, update the illusion rate of the specified room.\",\n    \"  - If the query is type 2, calculate the minimum energy required to travel from room u to room v and store the result.\",\n    \"Output the results of all type 2 queries in the order they were received.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree': A tree is a connected graph with no cycles, which means there is exactly one path between any two nodes (rooms in this case).\n    'illusion rate': This is a value associated with each room that affects the energy required to travel between rooms.\n    'energy': The energy required to travel between rooms is calculated using the formula max(|a_x + a_y|, |a_x - a_y|), where a_x and a_y are the illusion rates of the rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)': This phrase indicates that the energy required to travel between two rooms is the maximum of the absolute sum or absolute difference of their illusion rates. In code, this can be implemented using the `max` function and `abs` function: `max(abs(a_x + a_y), abs(a_x - a_y))`.\n\n# [degree adverb] \n    'minimum': In the context of type 2 queries, it refers to finding the path with the least energy cost from room u to room v. This can be implemented using algorithms like Dijkstra's or BFS/DFS with priority queues to find the minimum path cost.\n\n# [code logic]\n    The steps for handling type 1 and type 2 queries should be implemented separately, as they involve different operations (updating a value vs. calculating a path cost). However, within the type 2 query handling, the calculation of energy for each path segment should be done simultaneously as part of the path traversal.\n\n# [edge case] \n    1. Input: 2 1\n       0 0\n       1 2\n       2 1 2\n       Expected Output: 0\n       Explanation: Both rooms have an illusion rate of 0, so the energy required is max(|0 + 0|, |0 - 0|) = 0.\n\n    2. Input: 3 1\n       10 10 10\n       1 2\n       2 3\n       2 1 3\n       Expected Output: 20\n       Explanation: The path from room 1 to room 3 is 1 -> 2 -> 3, with energy costs max(|10 + 10|, |10 - 10|) = 20 for each segment.\n\n    3. Input: 4 2\n", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ninput = sys.stdin.read\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    def bfs_min_energy(u, v):\n        queue = deque([(u, 0)])\n        visited = set()\n        visited.add(u)\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == v:\n                return energy\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy_cost = max(abs(illusion_rates[current] + illusion_rates[neighbor]), \n                                      abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy + energy_cost))\n    \n    results = []\n    \n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        \n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index]) - 1\n            index += 1\n            results.append(bfs_min_energy(u, v))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 154)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    def bfs_min_energy(u, v):\n        queue = deque([(u, 0)])\n        visited = set()\n        visited.add(u)\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == v:\n                return energy\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy_cost = max(abs(illusion_rates[current] + illusion_rates[neighbor]), \n                                      abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy + energy_cost))\n    \n    results = []\n    \n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        \n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index]) - 1\n            index += 1\n            results.append(bfs_min_energy(u, v))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, tunnel connections, and queries.\",\n      \"steps\": [\n        \"Read the first line to get the number of rooms (n) and number of queries (q).\",\n        \"Read the second line to get the initial illusion rates for each room.\",\n        \"Read the next n-1 lines to get the tunnel connections between rooms.\",\n        \"Read the next q lines to get the queries.\"\n      ]\n    },\n    {\n      \"description\": \"Represent the maze as a tree structure to facilitate traversal and updates.\",\n      \"steps\": [\n        \"Use adjacency lists to represent the tree structure of the maze based on the tunnel connections.\",\n        \"Ensure the tree is correctly formed with n-1 edges.\"\n      ]\n    },\n    {\n      \"description\": \"Implement functionality to update the illusion rate of a room.\",\n      \"steps\": [\n        \"For query type 1, update the illusion rate of the specified room.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimum sum of energy required to travel between two rooms.\",\n      \"steps\": [\n        \"For query type 2, perform a tree traversal (e.g., DFS or BFS) from the starting room to the target room.\",\n        \"Calculate the energy required for each step using the formula max(|a_x + a_y|, |a_x - a_y|).\",\n        \"Sum the energy values for the path and return the result.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Construct the tree representation of the maze using adjacency lists.\",\n    \"Implement a function to update the illusion rate of a room based on query type 1.\",\n    \"Implement a function to calculate the minimum energy required to travel between two rooms based on query type 2.\",\n    \"For each query, execute the corresponding function and output the result for type 2 queries.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: In the context of this problem, a tree is a connected graph with no cycles, consisting of nodes (rooms) and edges (tunnels). The tree structure allows traversal between any two nodes through a unique path.\n\n    'illusion rate'\n    Explanation: The illusion rate is a numerical value associated with each room, affecting the energy required to travel between rooms. It is used in the energy calculation formula.\n\n    'energy calculation'\n    Explanation: The energy required to travel between two rooms is calculated using the formula max(|a_x + a_y|, |a_x - a_y|), where a_x and a_y are the illusion rates of the two rooms.\n\n# [phrase showing quantity relationship]\n    'n - 1 tunnels': Indicates that the number of tunnels is one less than the number of rooms, which is a characteristic of a tree structure.\n    \n    'max(|a_x + a_y|, |a_x - a_y|)': This phrase describes the calculation of energy, where the maximum of the absolute sum and absolute difference of illusion rates is taken.\n\n# [degree adverb] \n    'minimum sum': Refers to the smallest possible total energy required to travel from one room to another, considering all possible paths.\n\n# [code logic]\n    The steps for handling query type 2 should be implemented simultaneously:\n    - \"Perform a tree traversal (e.g., DFS or BFS) from the starting room to the target room.\"\n    - \"Calculate the energy required for each step using the formula max(|a_x + a_y|, |a_x - a_y|).\"\n    - \"Sum the energy values for the path and return the result.\"\n    These steps can be combined in a single traversal function that calculates and accumulates the energy as it traverses the path.\n\n# [edge case] \n    1. Minimum number of rooms and queries:\n       Input: \n       ```\n       2 1\n       0 0\n       1 2\n       2 1 2\n       ```\n       Expected Output: 0\n       Explanation: With both rooms having an illusion rate of 0, the energy required is max(|0 + 0|, |0 - 0|) = 0.\n\n    2. All rooms have the same illusion rate:\n       Input:\n       ```\n       3 1\n       5 5 5\n       1 2\n       2", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Read initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Read tunnel connections and build the tree\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate energy between two rooms\n    def calculate_energy(a_x, a_y):\n        return max(abs(a_x + a_y), abs(a_x - a_y))\n    \n    # Function to find the path and calculate energy using BFS\n    def bfs_energy(u, v):\n        queue = deque([(u, 0)])\n        visited = set()\n        parent = {u: None}\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == v:\n                return energy\n            \n            visited.add(current)\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    parent[neighbor] = current\n                    queue.append((neighbor, energy + calculate_energy(illusion_rates[current], illusion_rates[neighbor])))\n        \n        return -1  # Should not reach here if the tree is valid\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update illusion rate\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate minimum energy\n            v = int(data[index]) - 1\n            index += 1\n            results.append(bfs_energy(u, v))\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 159)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Read initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Read tunnel connections and build the tree\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to calculate energy between two rooms\n    def calculate_energy(a_x, a_y):\n        return max(abs(a_x + a_y), abs(a_x - a_y))\n    \n    # Function to find the path and calculate energy using BFS\n    def bfs_energy(u, v):\n        queue = deque([(u, 0)])\n        visited = set()\n        parent = {u: None}\n        \n        while queue:\n            current, energy = queue.popleft()\n            if current == v:\n                return energy\n            \n            visited.add(current)\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    parent[neighbor] = current\n                    queue.append((neighbor, energy + calculate_energy(illusion_rates[current], illusion_rates[neighbor])))\n        \n        return -1  # Should not reach here if the tree is valid\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        index += 2\n        \n        if query_type == 1:\n            # Update illusion rate\n            c = int(data[index])\n            illusion_rates[u] = c\n            index += 1\n        elif query_type == 2:\n            # Calculate minimum energy\n            v = int(data[index]) - 1\n            index += 1\n            results.append(bfs_energy(u, v))\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms (n), number of queries (q), initial illusion rates (a), and adjacency list for the tree structure.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently handle updates to the illusion rates and queries for minimum energy path calculations.\",\n      \"output\": \"A segment tree or similar data structure to manage updates and queries efficiently.\"\n    },\n    {\n      \"description\": \"Develop a function to handle type 1 queries, which update the illusion rate of a specific room.\",\n      \"output\": \"Updated data structure reflecting the new illusion rate for the specified room.\"\n    },\n    {\n      \"description\": \"Develop a function to handle type 2 queries, which calculate the minimum energy required to travel from room u to room v.\",\n      \"output\": \"The minimum energy required for the specified path, considering the current illusion rates.\"\n    },\n    {\n      \"description\": \"Implement a traversal algorithm (e.g., Depth First Search) to find the path between two rooms in the tree structure.\",\n      \"output\": \"The path between the specified rooms as a list of room indices.\"\n    },\n    {\n      \"description\": \"Calculate the energy required for a given path using the current illusion rates.\",\n      \"output\": \"The total energy required for the path based on the current illusion rates.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct an adjacency list to represent the tree structure of the maze.\",\n    \"Initialize a data structure to manage the illusion rates and support efficient updates and queries.\",\n    \"For each query, determine its type and execute the corresponding function:\",\n    \"  - For type 1 queries, update the illusion rate of the specified room.\",\n    \"  - For type 2 queries, find the path between the specified rooms and calculate the minimum energy required.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected graph with no cycles, which means there is exactly one path between any two nodes (rooms in this case).\n\n    'illusion rate'\n    Explanation: This is a value associated with each room that affects the energy required to travel between rooms.\n\n    'energy calculation'\n    Explanation: The energy required to travel between two rooms is determined by the formula max(|a_x + a_y|, |a_x - a_y|), where a_x and a_y are the illusion rates of the two rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)': This phrase indicates that the energy required is the maximum of the absolute sum or absolute difference of the illusion rates of two connected rooms. In code, this can be implemented using the `max` function and `abs` for absolute values.\n\n# [degree adverb]\n    'minimum': In the context of the requirement, it refers to finding the path with the least energy cost between two rooms. This can be implemented by calculating the energy for all possible paths and selecting the smallest one.\n\n# [code logic]\n    The steps for handling type 2 queries (finding the path and calculating energy) should be implemented simultaneously. This involves finding the path using a traversal algorithm and then calculating the energy for that path in one cohesive block of code.\n\n# [edge case]\n    1. Query with the same start and end room, e.g., `2 1 1` = 0\n       Explanation: If the start and end room are the same, no travel is needed, so the energy required is 0.\n    \n    2. Query with maximum possible illusion rates, e.g., `2 1 2` with all rates at 10^9 = calculated energy\n       Explanation: This tests the handling of large numbers and ensures the calculation does not overflow.\n    \n    3. Query with minimum possible illusion rates, e.g., `2 1 2` with all rates at 0 = 0\n       Explanation: If all illusion rates are zero, the energy required for any path should be zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the start and end room are the same.\n    ```python\n    if u == v:\n        print(0)\n        continue\n    ```\n    This handles the case where no travel is needed", "Round_0": {"code": "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, lca_node, illusion_rates, parent_list):\n    energy = 0\n    while u != lca_node:\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_list[u]]), abs(illusion_rates[u] - illusion_rates[parent_list[u]]))\n        u = parent_list[u]\n    while v != lca_node:\n        energy += max(abs(illusion_rates[v] + illusion_rates[parent_list[v]]), abs(illusion_rates[v] - illusion_rates[parent_list[v]]))\n        v = parent_list[v]\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth", "report": "The compilation output of the preceding code is: name 'sys' is not defined"}, "Round_1": {"code": "def dfs(node, parent, depth, adj, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in adj[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, lca_node, illusion_rates, parent_list):\n    energy = 0\n    while u != lca_node:\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_list[u]]), abs(illusion_rates[u] - illusion_rates[parent_list[u]]))\n        u = parent_list[u]\n    while v != lca_node:\n        energy += max(abs(illusion_rates[v] + illusion_rates[parent_list[v]]), abs(illusion_rates[v] - illusion_rates[parent_list[v]]))\n        v = parent_list[v]\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    adj = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure of the maze.\",\n      \"steps\": [\n        \"Read the first line to get the number of rooms (n) and number of queries (q).\",\n        \"Read the second line to get the initial illusion rates for each room.\",\n        \"Read the next n-1 lines to construct the tree structure using adjacency lists or another suitable data structure.\",\n        \"Read the next q lines to store the queries.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a mechanism to update the illusion rate of a room based on type 1 queries.\",\n      \"steps\": [\n        \"For each type 1 query, update the illusion rate of the specified room.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimum sum of energy required to travel between two rooms based on type 2 queries.\",\n      \"steps\": [\n        \"For each type 2 query, find the path between the specified rooms using a tree traversal algorithm (e.g., DFS or BFS).\",\n        \"Calculate the energy required for each segment of the path using the formula max(|a_x + a_y|, |a_x - a_y|).\",\n        \"Sum the energy values for the entire path and store the result.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data including the number of rooms, queries, initial illusion rates, and tree structure.\",\n    \"Initialize data structures to store the tree and illusion rates.\",\n    \"Process each query sequentially:\",\n    \"  - If the query is type 1, update the illusion rate of the specified room.\",\n    \"  - If the query is type 2, calculate the minimum energy required to travel between the specified rooms and output the result.\",\n    \"Ensure efficient handling of queries to meet performance requirements given the constraints.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'illusion rate'\n    Explanation: The illusion rate is a property of each room that affects the energy required to travel between rooms. It is used in the formula to calculate the energy needed for movement.\n\n    'tree structure'\n    Explanation: The maze is structured as a tree, meaning there are n rooms and n-1 tunnels, allowing travel between any pair of rooms. This structure ensures there is a unique path between any two rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)'\n    Explanation: This phrase describes the calculation of energy required to travel between two rooms. It involves finding the maximum of the absolute values of the sum and difference of the illusion rates of two connected rooms. In code, this can be implemented using the `max` function and `abs` function in Python.\n\n# [degree adverb]\n    'minimum'\n    Explanation: In the context of type 2 queries, it refers to finding the path between two rooms that requires the least amount of energy. This involves calculating the energy for all possible paths and selecting the one with the lowest total energy.\n\n# [code logic]\n    The steps for handling type 2 queries should be implemented simultaneously:\n    \"Find the path between the specified rooms using a tree traversal algorithm (e.g., DFS or BFS)\",\n    \"Calculate the energy required for each segment of the path using the formula max(|a_x + a_y|, |a_x - a_y|)\",\n    \"Sum the energy values for the entire path and store the result\"\n    These steps can be combined into a single function that performs the traversal and energy calculation in one go.\n\n# [edge case]\n    1. Input: 2 1\n       1 1\n       1 2\n       2 1 2\n       Expected Output: 2\n       Explanation: With only two rooms and identical illusion rates, the energy required is max(|1 + 1|, |1 - 1|) = 2.\n\n    2. Input: 3 1\n       0 0 0\n       1 2\n       2 3\n       2 1 3\n       Expected Output: 0\n       Explanation: All rooms have an illusion rate of 0, so the energy required is max(|0 + 0|, |0 - 0|) = 0.\n\n    3", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Read initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Read tree structure\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to find path and calculate energy\n    def find_energy(u, v):\n        # BFS to find path from u to v\n        queue = deque([u])\n        parent = {u: None}\n        \n        while queue:\n            node = queue.popleft()\n            if node == v:\n                break\n            for neighbor in tree[node]:\n                if neighbor not in parent:\n                    parent[neighbor] = node\n                    queue.append(neighbor)\n        \n        # Calculate energy along the path\n        energy = 0\n        current = v\n        while parent[current] is not None:\n            prev = parent[current]\n            energy += max(abs(illusion_rates[current] + illusion_rates[prev]), abs(illusion_rates[current] - illusion_rates[prev]))\n            current = prev\n        \n        return energy\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 2 else int(data[index + 2])\n        index += 3\n        \n        if query_type == 1:\n            # Update illusion rate\n            illusion_rates[u] = v\n        elif query_type == 2:\n            # Calculate minimum energy\n            results.append(find_energy(u, v - 1))\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 160)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    \n    # Read number of rooms and queries\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    # Read initial illusion rates\n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    # Read tree structure\n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    # Function to find path and calculate energy\n    def find_energy(u, v):\n        # BFS to find path from u to v\n        queue = deque([u])\n        parent = {u: None}\n        \n        while queue:\n            node = queue.popleft()\n            if node == v:\n                break\n            for neighbor in tree[node]:\n                if neighbor not in parent:\n                    parent[neighbor] = node\n                    queue.append(neighbor)\n        \n        # Calculate energy along the path\n        energy = 0\n        current = v\n        while parent[current] is not None:\n            prev = parent[current]\n            energy += max(abs(illusion_rates[current] + illusion_rates[prev]), abs(illusion_rates[current] - illusion_rates[prev]))\n            current = prev\n        \n        return energy\n    \n    # Process queries\n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            illusion_rates[u] = c\n            index += 3\n        elif query_type == 2:\n            v = int(data[index + 2]) - 1\n            results.append(find_energy(u, v))\n            index += 3\n    \n    # Output results for type 2 queries\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure of the maze.\",\n      \"steps\": [\n        \"Read the first line to get the number of rooms (n) and number of queries (q).\",\n        \"Read the second line to get the initial illusion rates for each room.\",\n        \"Read the next n-1 lines to construct the tree structure using adjacency lists or another suitable data structure.\",\n        \"Read the next q lines to store the queries.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a mechanism to update the illusion rate of a room based on type 1 queries.\",\n      \"steps\": [\n        \"For each type 1 query, update the illusion rate of the specified room.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the minimum sum of energy required to travel between two rooms based on type 2 queries.\",\n      \"steps\": [\n        \"For each type 2 query, find the path between the specified rooms using a tree traversal algorithm (e.g., DFS or BFS).\",\n        \"Calculate the energy required for each segment of the path using the formula max(|a_x + a_y|, |a_x - a_y|).\",\n        \"Sum the energy values for the entire path and store the result.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each type 2 query.\",\n      \"steps\": [\n        \"For each type 2 query, output the calculated minimum sum of energy.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data structures for rooms, illusion rates, and queries.\",\n    \"Implement a function to update the illusion rate of a room for type 1 queries.\",\n    \"Implement a function to calculate the minimum energy required for type 2 queries using tree traversal.\",\n    \"Output the results for each type 2 query.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'illusion rate'\n    Explanation: The illusion rate is a property of each room that affects the energy required to travel between rooms. It can be changed by type 1 queries.\n\n    'tree structure'\n    Explanation: The maze is structured as a tree, meaning there are n rooms and n-1 tunnels, allowing travel between any pair of rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)'\n    Explanation: This phrase describes the energy calculation formula for traveling between two rooms. It requires finding the maximum of the absolute values of the sum and difference of the illusion rates of two connected rooms. In code, this can be implemented using the `max` function and `abs` function in Python.\n\n# [degree adverb]\n    'minimum'\n    Explanation: In type 2 queries, the goal is to find the minimum sum of energy required to travel from one room to another. This involves calculating the energy for all possible paths and selecting the path with the least energy.\n\n# [code logic]\n    The steps for parsing input data and storing queries can be implemented simultaneously as they involve reading and organizing data. However, updating illusion rates and calculating energy for type 2 queries should be handled separately due to their distinct operations.\n\n# [edge case]\n    1 1 -3\n    Explanation: This query changes the illusion rate of the first room to -3, which affects subsequent energy calculations.\n    \n    2 1 1 = 0\n    Explanation: When the start and end rooms are the same, no energy is required, so the expected output is 0.\n    \n    2 1 6 = 39\n    Explanation: This query calculates the energy required to travel from room 1 to room 6, following the path and energy calculations as described in the example.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the start and end rooms are the same.\n        if u == v:\n            print(0)\n            continue\n        (other code for handling type 2 queries)\n\nYES", "Round_0": {"code": "import sys\nimport collections\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    def dfs_find_path(start, end, parent):\n        stack = [(start, -1)]\n        path = []\n        found = False\n        \n        while stack:\n            node, par = stack.pop()\n            path.append(node)\n            if node == end:\n                found = True\n                break\n            for neighbor in tree[node]:\n                if neighbor != par:\n                    stack.append((neighbor, node))\n            if not found:\n                path.pop()\n        \n        return path\n    \n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            illusion_rates[u] = c\n        else:\n            _, u, v = query\n            if u == v:\n                print(0)\n                continue\n            \n            path = dfs_find_path(u, v, -1)\n            total_energy = 0\n            for i in range(len(path) - 1):\n                x = path[i]\n                y = path[i + 1]\n                energy = max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n                total_energy += energy\n            \n            print(total_energy)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 154)"}, "Round_1": {"code": "import sys\nimport collections\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    def dfs_find_path(start, end):\n        stack = [(start, -1)]\n        path = []\n        found = False\n        \n        while stack:\n            node, par = stack.pop()\n            path.append(node)\n            if node == end:\n                found = True\n                break\n            for neighbor in tree[node]:\n                if neighbor != par:\n                    stack.append((neighbor, node))\n            if not found:\n                path.pop()\n        \n        return path\n    \n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            illusion_rates[u] = c\n        else:\n            _, u, v = query\n            if u == v:\n                print(0)\n                continue\n            \n            path = dfs_find_path(u, v)\n            total_energy = 0\n            for i in range(len(path) - 1):\n                x = path[i]\n                y = path[i + 1]\n                energy = max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n                total_energy += energy\n            \n            print(total_energy)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms (n), number of queries (q), initial illusion rates (a), and the tree structure of the maze.\"\n    },\n    {\n      \"description\": \"Implement a data structure to represent the tree and support efficient updates and queries.\",\n      \"output\": \"A tree data structure that allows for efficient traversal and updates, such as a segment tree or a binary indexed tree.\"\n    },\n    {\n      \"description\": \"Handle the first type of query which updates the illusion rate of a specific room.\",\n      \"output\": \"Update the data structure to reflect the new illusion rate for the specified room.\"\n    },\n    {\n      \"description\": \"Handle the second type of query which calculates the minimum energy required to travel from room u to room v.\",\n      \"output\": \"Calculate and return the minimum energy required using the current illusion rates and the tree structure.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct a tree data structure to represent the maze using the room connections.\",\n    \"Initialize the tree with the initial illusion rates for each room.\",\n    \"For each query, determine the type of query:\",\n    \"  - If it is a type 1 query, update the illusion rate of the specified room in the data structure.\",\n    \"  - If it is a type 2 query, calculate the minimum energy required to travel from room u to room v using the current illusion rates and the tree structure.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree': A tree is a data structure consisting of nodes, where each node has zero or more child nodes. In this context, the maze is represented as a tree with rooms as nodes and tunnels as edges.\n    'illusion rate': This is a value associated with each room that affects the energy required to travel between rooms. It can be updated through queries.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)': This phrase indicates the calculation of energy required to travel between two rooms. It involves finding the maximum of the absolute values of the sum and difference of the illusion rates of two rooms. In code, this can be implemented using the `max` function and `abs` function in Python.\n\n# [degree adverb]\n    'minimum': In the context of the second type of query, it refers to finding the least amount of energy required to travel from one room to another. This can be implemented using algorithms that find the shortest path or minimum cost in a graph, such as Dijkstra's algorithm.\n\n# [code logic]\n    The steps for handling type 1 and type 2 queries should be implemented separately, as they involve different operations (updating a value vs. calculating a path cost). However, within the handling of type 2 queries, the calculation of energy for each segment of the path should be done simultaneously as part of the path traversal.\n\n# [edge case]\n    1. Input: 2 1\n       0 0\n       1 2\n       2 1 2\n       Expected Output: 0\n       Explanation: Both rooms have an illusion rate of 0, so the energy required to travel between them is 0.\n\n    2. Input: 3 2\n       1 1 1\n       1 2\n       2 3\n       2 1 3\n       Expected Output: 2\n       Explanation: The path from room 1 to room 3 involves rooms 1 -> 2 -> 3, with each segment requiring 1 energy, totaling 2.\n\n    3. Input: 4 3\n       5 -5 5 -5\n       1 2\n       2 3\n       3 4\n       2 1 4\n       Expected Output: 20\n       Explanation: The path from room 1 to room", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ninput = sys.stdin.read\ndef main():\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    def bfs_path(start, end):\n        queue = deque([start])\n        parent = {start: None}\n        \n        while queue:\n            node = queue.popleft()\n            if node == end:\n                break\n            for neighbor in tree[node]:\n                if neighbor not in parent:\n                    parent[neighbor] = node\n                    queue.append(neighbor)\n        \n        path = []\n        while end is not None:\n            path.append(end)\n            end = parent[end]\n        \n        return path[::-1]\n    \n    results = []\n    \n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        \n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index]) - 1\n            path = bfs_path(u, v)\n            energy = 0\n            for i in range(len(path) - 1):\n                x = path[i]\n                y = path[i + 1]\n                energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 151)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    \n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        index += 1\n        v = int(data[index]) - 1\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    def bfs_path(start, end):\n        queue = deque([start])\n        parent = {start: None}\n        \n        while queue:\n            node = queue.popleft()\n            if node == end:\n                break\n            for neighbor in tree[node]:\n                if neighbor not in parent:\n                    parent[neighbor] = node\n                    queue.append(neighbor)\n        \n        path = []\n        while end is not None:\n            path.append(end)\n            end = parent[end]\n        \n        return path[::-1]\n    \n    results = []\n    \n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        u = int(data[index]) - 1\n        index += 1\n        \n        if query_type == 1:\n            c = int(data[index])\n            index += 1\n            illusion_rates[u] = c\n        elif query_type == 2:\n            v = int(data[index]) - 1\n            path = bfs_path(u, v)\n            energy = 0\n            for i in range(len(path) - 1):\n                x = path[i]\n                y = path[i + 1]\n                energy += max(abs(illusion_rates[x] + illusion_rates[y]), abs(illusion_rates[x] - illusion_rates[y]))\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n      \"output\": \"Data structures to store the number of rooms (n), number of queries (q), initial illusion rates (a), and the tree structure of the maze.\"\n    },\n    {\n      \"description\": \"Construct the tree representation of the maze using the given room connections.\",\n      \"output\": \"A tree data structure that allows traversal between rooms.\"\n    },\n    {\n      \"description\": \"Implement a function to update the illusion rate of a specific room based on type 1 queries.\",\n      \"output\": \"Updated illusion rates for the specified room.\"\n    },\n    {\n      \"description\": \"Implement a function to calculate the minimum energy required to travel from room u to room v based on type 2 queries.\",\n      \"output\": \"The minimum energy required for each type 2 query.\"\n    },\n    {\n      \"description\": \"Efficiently handle multiple queries, ensuring that updates and calculations are performed optimally given the constraints.\",\n      \"output\": \"Correct results for all queries within the time limits.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the connections between rooms.\",\n    \"Construct the tree representation of the maze using adjacency lists or another suitable data structure.\",\n    \"For each query, determine its type:\",\n    \"  - If it's a type 1 query, update the illusion rate of the specified room.\",\n    \"  - If it's a type 2 query, calculate the minimum energy required to travel from room u to room v using a tree traversal algorithm (e.g., DFS or BFS) and considering the illusion rates.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree': A tree is a connected graph with no cycles, which means there is exactly one path between any two nodes (rooms in this case).\n    'illusion rate': This is a value associated with each room that affects the energy required to travel between rooms.\n    'energy calculation': The energy required to travel between rooms is determined by the formula max(|a_x + a_y|, |a_x - a_y|), where a_x and a_y are the illusion rates of the rooms.\n\n# [phrase showing quantity relationship]\n    'max': This indicates that for each tunnel, the energy required is the maximum of the two calculated values, |a_x + a_y| and |a_x - a_y|. In code, this can be implemented using the `max()` function.\n\n# [degree adverb]\n    'minimum': This indicates that for type 2 queries, we need to find the path that requires the least amount of energy to travel from room u to room v. This can be implemented using a pathfinding algorithm that minimizes the energy cost, such as Dijkstra's algorithm.\n\n# [code logic]\n    The steps for handling type 1 and type 2 queries should be considered separately, as they involve different operations. Type 1 queries involve updating a value, while type 2 queries involve calculating a path cost.\n\n# [edge case]\n    1. When the maze has only two rooms connected by one tunnel, e.g., n = 2, q = 1, a = [5, -5], queries = [(2, 1, 2)] = 10\n    Explanation: The only path is between room 1 and room 2, and the energy required is max(|5 + (-5)|, |5 - (-5)|) = 10.\n\n    2. When all rooms have an illusion rate of zero, e.g., n = 3, q = 1, a = [0, 0, 0], queries = [(2, 1, 3)] = 0\n    Explanation: Since all illusion rates are zero, the energy required for any path is zero.\n\n    3. When a type 1 query sets the illusion rate to the maximum possible value, e.g., n = 3, q = 2, a = [1, 2, 3], queries = [(1, 2, 10^9), (2, 1, ", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 2 else int(data[index + 2])\n        queries.append((query_type, u, v))\n        index += 3\n    \n    return n, q, illusion_rates, tree, queries\n\ndef update_illusion_rate(illusion_rates, room, new_rate):\n    illusion_rates[room] = new_rate\n\ndef calculate_energy(illusion_rates, tree, start, end):\n    def bfs(start, end):\n        queue = deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            if current == end:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]), \n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n        return float('inf')\n    \n    return bfs(start, end)\n\ndef main():\n    n, q, illusion_rates, tree, queries = parse_input()\n    \n    results = []\n    for query in queries:\n        query_type, u, v = query\n        if query_type == 1:\n            update_illusion_rate(illusion_rates, u, v)\n        elif query_type == 2:\n            energy = calculate_energy(illusion_rates, tree, u, v)\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 156)"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef parse_input():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        s = int(data[index]) - 1\n        t = int(data[index + 1]) - 1\n        tree[s].append(t)\n        tree[t].append(s)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        v = int(data[index + 2]) if query_type == 2 else int(data[index + 2])\n        queries.append((query_type, u, v))\n        index += 3\n    \n    return n, q, illusion_rates, tree, queries\n\ndef update_illusion_rate(illusion_rates, room, new_rate):\n    illusion_rates[room] = new_rate\n\ndef calculate_energy(illusion_rates, tree, start, end):\n    def bfs(start, end):\n        queue = deque([(start, 0)])\n        visited = set()\n        visited.add(start)\n        \n        while queue:\n            current, energy_sum = queue.popleft()\n            if current == end:\n                return energy_sum\n            \n            for neighbor in tree[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    energy = max(abs(illusion_rates[current] + illusion_rates[neighbor]), \n                                 abs(illusion_rates[current] - illusion_rates[neighbor]))\n                    queue.append((neighbor, energy_sum + energy))\n        return float('inf')\n    \n    return bfs(start, end)\n\ndef main():\n    n, q, illusion_rates, tree, queries = parse_input()\n    \n    results = []\n    for query in queries:\n        query_type, u, v = query\n        if query_type == 1:\n            update_illusion_rate(illusion_rates, u, v)\n        elif query_type == 2:\n            energy = calculate_energy(illusion_rates, tree, u, v)\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms (n), number of queries (q), initial illusion rates for each room, and the connections between rooms forming a tree structure.\",\n      \"output\": \"Data structures representing rooms, their illusion rates, and the tree connections.\"\n    },\n    {\n      \"description\": \"Implement a data structure to efficiently update the illusion rate of a room and to handle queries about the minimum energy required to travel between two rooms.\",\n      \"output\": \"A data structure that supports efficient updates and queries, such as a segment tree or a binary indexed tree.\"\n    },\n    {\n      \"description\": \"Develop a function to calculate the energy required to travel between two connected rooms based on their illusion rates.\",\n      \"output\": \"A function that computes max(|a_x + a_y|, |a_x - a_y|) for two given rooms.\"\n    },\n    {\n      \"description\": \"Implement a method to find the path between any two rooms in the tree and calculate the total energy required for that path.\",\n      \"output\": \"A function that finds the path using tree traversal techniques like DFS or BFS and calculates the total energy.\"\n    },\n    {\n      \"description\": \"Handle the two types of queries: updating the illusion rate of a room and calculating the minimum energy required to travel between two rooms.\",\n      \"output\": \"Functions that process each query type and produce the required output.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure.\",\n    \"Initialize a data structure to store and update the illusion rates of rooms efficiently.\",\n    \"For each query, determine its type and perform the corresponding operation:\",\n    \"  - If it's a type 1 query, update the illusion rate of the specified room.\",\n    \"  - If it's a type 2 query, find the path between the specified rooms and calculate the total energy required using the pre-defined function.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected graph with no cycles, which means there is exactly one path between any two nodes. In this problem, the rooms and tunnels form a tree structure.\n\n    'illusion rate'\n    Explanation: This is a value associated with each room that affects the energy required to travel between rooms. The energy is calculated using the formula max(|a_x + a_y|, |a_x - a_y|).\n\n    'query'\n    Explanation: There are two types of queries: one to update the illusion rate of a room and another to calculate the minimum energy required to travel between two rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)'\n    Explanation: This phrase describes the energy calculation between two rooms. It means you take the maximum of the absolute sum and the absolute difference of the illusion rates of two rooms.\n\n# [degree adverb]\n    'minimum'\n    Explanation: In the context of the second type of query, it refers to finding the least amount of energy required to travel from one room to another.\n\n# [code logic]\n    The steps for handling queries should be considered simultaneously:\n    - For each query, determine its type and perform the corresponding operation:\n      - If it's a type 1 query, update the illusion rate of the specified room.\n      - If it's a type 2 query, find the path between the specified rooms and calculate the total energy required using the pre-defined function.\n    This can be implemented using an if-else statement to handle the two types of queries.\n\n# [edge case]\n    1. Minimum number of rooms and queries: \n       Input: \n       ```\n       2 1\n       0 0\n       1 2\n       2 1 2\n       ```\n       Expected Output: 0\n       Explanation: With both rooms having an illusion rate of 0, the energy required is 0.\n\n    2. Maximum illusion rate change:\n       Input:\n       ```\n       3 2\n       0 0 0\n       1 2\n       2 3\n       1 1 1000000000\n       2 1 3\n       ```\n       Expected Output: 2000000000\n       Explanation: After changing the illusion rate of room 1 to 10^9, the energy required to travel from room 1 to", "Round_0": {"code": "def dfs(node, parent, depth, tree, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in tree[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, tree, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list, depth_list):\n    ancestor = lca(u, v, parent_list, depth_list)\n    energy = 0\n    while u != ancestor:\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_list[u]]), abs(illusion_rates[u] - illusion_rates[parent_list[u]]))\n        u = parent_list[u]\n    while v != ancestor:\n        energy += max(abs(illusion_rates[v] + illusion_rates[parent_list[v]]), abs(illusion_rates[v] - illusion_rates[parent_list[v]]))\n        v = parent_list[v]\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    dfs(1, 0, 0, tree, parent_list, depth_list)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        if query_type == 1:", "report": "The compilation output of the preceding code is: expected an indented block (<string>, line 62)"}, "Round_1": {"code": "def dfs(node, parent, depth, tree, parent_list, depth_list):\n    parent_list[node] = parent\n    depth_list[node] = depth\n    for neighbor in tree[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, tree, parent_list, depth_list)\n\ndef lca(u, v, parent_list, depth_list):\n    if depth_list[u] < depth_list[v]:\n        u, v = v, u\n    while depth_list[u] > depth_list[v]:\n        u = parent_list[u]\n    while u != v:\n        u = parent_list[u]\n        v = parent_list[v]\n    return u\n\ndef calculate_energy(u, v, illusion_rates, parent_list, depth_list):\n    ancestor = lca(u, v, parent_list, depth_list)\n    energy = 0\n    while u != ancestor:\n        energy += max(abs(illusion_rates[u] + illusion_rates[parent_list[u]]), abs(illusion_rates[u] - illusion_rates[parent_list[u]]))\n        u = parent_list[u]\n    while v != ancestor:\n        energy += max(abs(illusion_rates[v] + illusion_rates[parent_list[v]]), abs(illusion_rates[v] - illusion_rates[parent_list[v]]))\n        v = parent_list[v]\n    return energy\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    index = 0\n    \n    n = int(data[index])\n    index += 1\n    q = int(data[index])\n    index += 1\n    \n    illusion_rates = [0] * (n + 1)\n    for i in range(1, n + 1):\n        illusion_rates[i] = int(data[index])\n        index += 1\n    \n    tree = collections.defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index])\n        index += 1\n        v = int(data[index])\n        index += 1\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    parent_list = [0] * (n + 1)\n    depth_list = [0] * (n + 1)\n    dfs(1, 0, 0, tree, parent_list, depth_list)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        index += 1\n        if query_type == 1:"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of rooms, number of queries, initial illusion rates, and the tree structure of the maze.\",\n      \"steps\": [\n        \"Read the first line to get the number of rooms (n) and the number of queries (q).\",\n        \"Read the second line to get the initial illusion rates for each room.\",\n        \"Read the next n-1 lines to construct the tree structure using adjacency lists or another suitable data structure.\",\n        \"Read the next q lines to store the queries.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a function to update the illusion rate of a specific room based on type 1 queries.\",\n      \"steps\": [\n        \"For a type 1 query, update the illusion rate of the specified room to the new value.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a function to calculate the minimum sum of energy required to travel between two rooms based on type 2 queries.\",\n      \"steps\": [\n        \"Use a tree traversal algorithm (e.g., DFS or BFS) to find the path between the two specified rooms.\",\n        \"Calculate the energy required for each segment of the path using the formula max(|a_x + a_y|, |a_x - a_y|).\",\n        \"Sum the energy values for the entire path and return the result.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data structures for rooms, illusion rates, and tree connections.\",\n    \"Iterate over each query and determine its type.\",\n    \"For type 1 queries, update the illusion rate of the specified room.\",\n    \"For type 2 queries, calculate the minimum energy required to travel between the specified rooms using the current illusion rates.\",\n    \"Output the result for each type 2 query.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree': A tree is a connected graph with no cycles, which means there is exactly one path between any two nodes (rooms in this case).\n    'illusion rate': This is a value associated with each room that affects the energy required to travel between rooms.\n    'energy calculation': The energy required to travel between rooms is calculated using the formula max(|a_x + a_y|, |a_x - a_y|).\n\n# [phrase showing quantity relationship]\n    'max': This indicates that for each segment of the path, the energy is the maximum of the two calculated values, |a_x + a_y| and |a_x - a_y|. In code, this can be implemented using the `max()` function.\n\n# [degree adverb]\n    'minimum': For type 2 queries, the task is to find the minimum sum of energy needed to travel from one room to another. This involves calculating the energy for each path segment and summing them up.\n\n# [code logic]\n    The steps for handling type 2 queries should be implemented simultaneously:\n    - \"Use a tree traversal algorithm (e.g., DFS or BFS) to find the path between the two specified rooms.\"\n    - \"Calculate the energy required for each segment of the path using the formula max(|a_x + a_y|, |a_x - a_y|).\"\n    These can be combined into a single traversal function that calculates the energy as it finds the path.\n\n# [edge case]\n    1. Input: 2 1\n       0 0\n       1 2\n       2 1 2\n       Output: 0\n       Explanation: Both rooms have an illusion rate of 0, so the energy required is max(|0 + 0|, |0 - 0|) = 0.\n\n    2. Input: 3 1\n       1 1 1\n       1 2\n       2 3\n       2 1 3\n       Output: 2\n       Explanation: The path is 1 -> 2 -> 3, with energy calculations max(|1 + 1|, |1 - 1|) = 2 and max(|1 + 1|, |1 - 1|) = 2, totaling 4.\n\n    3. Input: 4 1\n       10 -10 10 -10\n       1", "Round_0": {"code": "import sys\nfrom collections import defaultdict, deque\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = defaultdict(list)\n    for _ in range(n - 1):\n        u = int(data[index]) - 1\n        v = int(data[index + 1]) - 1\n        tree[u].append(v)\n        tree[v].append(u)\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1]) - 1\n        if query_type == 1:\n            c = int(data[index + 2])\n            queries.append((query_type, u, c))\n            index += 3\n        else:\n            v = int(data[index + 2]) - 1\n            queries.append((query_type, u, v))\n            index += 3\n    \n    def calculate_energy(a, b):\n        return max(abs(a + b), abs(a - b))\n    \n    def bfs_find_path_energy(start, end):\n        queue = deque([(start, -1, 0)])  # (current_node, parent, current_energy)\n        visited = set()\n        \n        while queue:\n            current, parent, current_energy = queue.popleft()\n            if current == end:\n                return current_energy\n            \n            visited.add(current)\n            \n            for neighbor in tree[current]:\n                if neighbor != parent and neighbor not in visited:\n                    energy = calculate_energy(illusion_rates[current], illusion_rates[neighbor])\n                    queue.append((neighbor, current, current_energy + energy))\n        \n        return -1  # Should never reach here if the input is valid\n    \n    results = []\n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            illusion_rates[u] = c\n        elif query[0] == 2:\n            _, u, v = query\n            energy = bfs_find_path_energy(u, v)\n            results.append(energy)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, false, false, false, true, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 88, "prompt": "Chanek Jones is back, aiding his long-lost relative Indiana Jones in locating a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them, making it possible to travel between each pair of rooms through several tunnels. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate, requiring max(|a_x + a_y|, |a_x - a_y|) energy to travel. |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "examples": "\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 2}
