{"name": "1598_C. Delete Two Elements", "description": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "tags": ["data structures", "dp", "implementation", "math", "two pointers"], "difficulty": 9, "id": 1598, "sample_io": [{"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}], "test_list": [{"input": "1\n3\n228 1337 228\n", "output": ["0\n"]}, {"input": "1\n3\n228 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n2\n3\n"]}, {"input": "4\n4\n8 9 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n34 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 7\n", "output": ["6\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 1\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["0\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 9\n", "output": ["6\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 10\n5\n1 2 7 0 5\n7\n2 2 3 7 1 4 9\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 6\n5\n1 2 7 0 5\n7\n0 2 3 7 1 4 9\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 28 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n4\n8 8 5 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["0\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n4 2 3 7 1 4 7\n", "output": ["6\n0\n1\n3\n"]}, {"input": "4\n4\n5 8 11 8\n3\n9 24 10\n5\n1 4 2 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["2\n0\n2\n0\n"]}, {"input": "4\n4\n5 8 5 8\n3\n9 34 10\n5\n1 4 4 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["4\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 18 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 8 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 127\n", "output": ["0\n"]}, {"input": "1\n3\n40 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 9\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 0 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 -1 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n342 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 0 4 5 6 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 9\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 0\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 -1 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 8 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 3 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 14 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 103\n", "output": ["0\n"]}, {"input": "1\n3\n40 270 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 44\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 37 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 3\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n382 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 8\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 74\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n298 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n93 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 15\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 11\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 5\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 29 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n141 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 10 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 0\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 20\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 16\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 11 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n148 141 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 5\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n233 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 16\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 0\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 6 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 6 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n0 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 24 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 7 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 461 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 1 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 4 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 28\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 12\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}], "task_id": "codecontest/60", "repair_prompt": ["Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e. sum divided by n), and Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements. In other words, it is sum divided by n. Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer), which is the sum of elements divided by n, and Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n < 3:\n            results.append(0)\n            continue\n        \n        total_sum = sum(a)\n        mean = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean\n        # Simplifying, we get:\n        # total_sum - a[i] - a[j] == mean * (n - 2)\n        # a[i] + a[j] == total_sum - mean * (n - 2)\n        \n        target_sum = total_sum - mean * (n - 2)\n        \n        # To avoid floating point precision issues, we work with integers\n        # Multiply everything by n to avoid division\n        target_sum = total_sum * n - mean * n * (n - 2)\n        \n        # Now we need to find pairs (i, j) such that:\n        # a[i] * n + a[j] * n == target_sum\n        \n        from collections import defaultdict\n        \n        count = defaultdict(int)\n        valid_pairs = 0\n        \n        for number in a:\n            # Check if there's a complement that forms the target sum\n            complement = target_sum - number * n\n            if complement in count:\n                valid_pairs += count[complement]\n            \n            # Count the current number for future pairs\n            count[number * n] += 1\n        \n        results.append(valid_pairs)\n    \n    for result in results:\n        print(result)\n\n\nmain()", "completions": ["def count_valid_pairs(test_cases):\n    results = []\n    for n, array in test_cases:\n        total_sum = sum(array)\n        mean = total_sum / n\n        \n        # Check if all elements are the same\n        if all(x == array[0] for x in array):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # Calculate the number of valid pairs\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                remaining_sum = total_sum - array[i] - array[j]\n                remaining_mean = remaining_sum / (n - 2)\n                if remaining_mean == mean:\n                    count += 1\n        \n        results.append(count)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = count_valid_pairs(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        k = total_sum / n\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == k\n        # Simplifying, we get:\n        # total_sum - a[i] - a[j] == k * (n - 2)\n        # a[i] + a[j] == total_sum - k * (n - 2)\n        \n        target_sum = total_sum - k * (n - 2)\n        \n        # Count pairs (i, j) such that a[i] + a[j] == target_sum\n        from collections import defaultdict\n        \n        count = 0\n        freq = defaultdict(int)\n        \n        for num in a:\n            # Check if there is a number that can pair with `num` to form `target_sum`\n            complement = target_sum - num\n            if complement in freq:\n                count += freq[complement]\n            \n            # Record the frequency of the current number\n            freq[num] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\n\nmain()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            # If all elements are equal, any pair can be removed\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean_k\n        # Simplifying the equation:\n        # total_sum - a[i] - a[j] == mean_k * (n - 2)\n        # a[i] + a[j] == total_sum - mean_k * (n - 2)\n        \n        target_sum = total_sum - mean_k * (n - 2)\n        \n        count = 0\n        freq = defaultdict(int)\n        \n        for num in a:\n            count += freq[target_sum - num]\n            freq[num] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "def find_valid_pairs(t, test_cases):\n    results = []\n    for case in test_cases:\n        n, a = case\n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        # Check if all elements are the same\n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # Count valid pairs\n        count = 0\n        pair_sum_needed = 2 * mean_k\n        value_count = {}\n        \n        for value in a:\n            if pair_sum_needed - value in value_count:\n                count += value_count[pair_sum_needed - value]\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        results.append(count)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = find_valid_pairs(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2)  # This is the sum we need after removing two elements\n        \n        count = 0\n        freq = {}\n        \n        for num in a:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        \n        for i in range(n):\n            freq[a[i]] -= 1\n            for j in range(i + 1, n):\n                freq[a[j]] -= 1\n                \n                if (total_sum - a[i] - a[j]) * n == target_sum:\n                    count += 1\n                \n                freq[a[j]] += 1\n            freq[a[i]] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        k = total_sum / n\n        \n        # Check if all elements are the same\n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # Calculate the number of valid pairs\n        count = 0\n        from collections import defaultdict\n        freq = defaultdict(int)\n        \n        for num in a:\n            freq[num] += 1\n        \n        for num in a:\n            freq[num] -= 1\n            target = 2 * k - num\n            if target in freq:\n                count += freq[target]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 3:\n            results.append(0)\n            continue\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean_k\n        # Simplifying the equation:\n        # total_sum - a[i] - a[j] == mean_k * (n - 2)\n        # a[i] + a[j] == total_sum - mean_k * (n - 2)\n        \n        target_sum = total_sum - mean_k * (n - 2)\n        \n        # Count pairs (i, j) such that a[i] + a[j] == target_sum\n        from collections import defaultdict\n        \n        count = 0\n        value_count = defaultdict(int)\n        \n        for value in a:\n            complement = target_sum - value\n            if complement in value_count:\n                count += value_count[complement]\n            value_count[value] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        # Edge case: all elements are equal\n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # Count pairs (i, j) such that removing them keeps the mean unchanged\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                remaining_sum = total_sum - a[i] - a[j]\n                remaining_mean = remaining_sum / (n - 2)\n                if remaining_mean == mean_k:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        k = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            # If all elements are the same, any pair can be removed\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        count = 0\n        # We need to find pairs (i, j) such that a[i] + a[j] = 2 * k\n        target_sum = 2 * k\n        from collections import defaultdict\n        freq = defaultdict(int)\n        \n        for num in a:\n            freq[num] += 1\n        \n        for num in a:\n            freq[num] -= 1\n            complement = target_sum - num\n            if complement in freq:\n                count += freq[complement]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n < 3:\n            results.append(0)\n            continue\n        \n        total_sum = sum(a)\n        mean = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean\n        # Simplifying, we get:\n        # total_sum - a[i] - a[j] == mean * (n - 2)\n        # a[i] + a[j] == total_sum - mean * (n - 2)\n        \n        target_sum = total_sum - mean * (n - 2)\n        \n        # To avoid floating point precision issues, we work with integers\n        # Multiply everything by n to avoid division\n        target_sum = total_sum * n - mean * n * (n - 2)\n        \n        # Now we need to find pairs (i, j) such that:\n        # a[i] * n + a[j] * n == target_sum\n        \n        from collections import defaultdict\n        \n        count = defaultdict(int)\n        valid_pairs = 0\n        \n        for number in a:\n            # Check if there's a complement that forms the target sum\n            complement = target_sum - number * n\n            if complement in count:\n                valid_pairs += count[complement]\n            \n            # Count the current number for future pairs\n            count[number * n] += 1\n        \n        results.append(valid_pairs)\n    \n    for result in results:\n        print(result)\n\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean of the array.\",\n      \"steps\": [\n        \"Sum all elements of the array.\",\n        \"Divide the sum by the number of elements to get the mean.\"\n      ]\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"steps\": [\n        \"For each pair of elements (i, j), calculate the sum of the remaining elements after removing i and j.\",\n        \"Check if the mean of the remaining elements equals the initial mean.\"\n      ]\n    },\n    {\n      \"description\": \"Count valid pairs for each test case.\",\n      \"steps\": [\n        \"Iterate through all possible pairs (i, j) with i < j.\",\n        \"Count pairs where the condition is satisfied.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following:\",\n    \"Read the number of elements and the array.\",\n    \"Calculate the initial mean of the array.\",\n    \"Initialize a counter for valid pairs.\",\n    \"Iterate through all pairs of elements (i, j) with i < j.\",\n    \"For each pair, calculate the sum of the remaining elements and check if the mean is unchanged.\",\n    \"If the mean is unchanged, increment the counter.\",\n    \"Output the counter for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean is the average of a set of numbers, calculated by dividing the sum of the numbers by the count of numbers.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'sum of elements divided by n': This is the formula for calculating the mean, where 'n' is the number of elements in the array.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for calculating the initial mean and checking pairs should be implemented simultaneously for efficiency. Specifically, the calculation of the sum of remaining elements and checking if the mean is unchanged can be done in one loop over pairs.\n\n# [edge case] \n    Test case with all elements equal: [4, 4, 4, 4] = 6\n    Explanation: Any pair of elements can be removed since all elements are equal, and the mean remains unchanged.\n    \n    Test case with no valid pairs: [1, 2, 3] = 0\n    Explanation: No pair of elements can be removed to keep the mean unchanged because the array is too small to satisfy the condition.\n    \n    Test case with large numbers: [1000000000, 1000000000, 1000000000, 1000000000] = 6\n    Explanation: Similar to the first edge case, any pair can be removed since all elements are equal.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently, especially when all elements are equal or when the array is too small to have valid pairs.\n    ```python\n    if n < 3:\n        return 0\n    if all(x == a[0] for x in a):\n        return (n * (n - 1)) // 2\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n < 3:\n            results.append(0)\n            continue\n        \n        total_sum = sum(a)\n        mean = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean\n        # Simplifying, we get:\n        # total_sum - a[i] - a[j] == mean * (n - 2)\n        # a[i] + a[j] == total_sum - mean * (n - 2)\n        \n        target_sum = total_sum - mean * (n - 2)\n        \n        # To avoid floating point precision issues, we work with integers\n        # Multiply everything by n to avoid division\n        target_sum = total_sum * n - mean * n * (n - 2)\n        \n        # Now we need to find pairs (i, j) such that:\n        # a[i] * n + a[j] * n == target_sum\n        \n        from collections import defaultdict\n        \n        count = defaultdict(int)\n        valid_pairs = 0\n        \n        for number in a:\n            # Check if there's a complement that forms the target sum\n            complement = target_sum - number * n\n            if complement in count:\n                valid_pairs += count[complement]\n            \n            # Count the current number for future pairs\n            count[number * n] += 1\n        \n        results.append(valid_pairs)\n    \n    for result in results:\n        print(result)\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean of the array.\",\n      \"steps\": [\n        \"Sum all elements of the array.\",\n        \"Divide the sum by the number of elements to get the mean.\"\n      ]\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"steps\": [\n        \"For each pair of elements (i, j), calculate the sum of the remaining elements after removing i and j.\",\n        \"Check if the mean of the remaining elements equals the initial mean.\"\n      ]\n    },\n    {\n      \"description\": \"Count valid pairs for each test case.\",\n      \"steps\": [\n        \"Iterate through all possible pairs (i, j) with i < j.\",\n        \"Count pairs where the mean remains unchanged.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following:\",\n    \"Read the number of elements and the array.\",\n    \"Calculate the initial mean of the array.\",\n    \"Initialize a counter for valid pairs.\",\n    \"Iterate through all pairs of elements (i, j) with i < j:\",\n    \"Calculate the sum of the remaining elements after removing i and j.\",\n    \"Check if the mean of the remaining elements equals the initial mean.\",\n    \"If yes, increment the counter.\",\n    \"Output the counter for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is the sum of its elements divided by the number of elements. The task is to find pairs of elements that can be removed such that the mean of the remaining elements is unchanged.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove two elements from the array.\n    'number of pairs of positions [i, j] (i < j)': This indicates that we need to count all possible pairs of indices where the first index is less than the second.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for calculating the initial mean and checking pairs should be implemented in a loop for each test case. Specifically, the steps for iterating through pairs and checking the mean should be done simultaneously within the same loop structure.\n\n# [edge case] \n    1. Input: [3, 3, 3, 3] = 6\n       Explanation: All elements are the same, so any pair can be removed without changing the mean.\n    2. Input: [1, 2, 3] = 0\n       Explanation: No pair can be removed to keep the mean unchanged because the elements are distinct.\n    3. Input: [5, 5, 5, 5, 5] = 10\n       Explanation: Similar to the first case, any pair can be removed since all elements are the same.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where all elements are the same, as this allows any pair to be removed. This can be optimized by checking if all elements are equal initially.\n    ```python\n    if all(x == array[0] for x in array):\n        return (n * (n - 1)) // 2  # All pairs are valid\n    ```\n\nYES", "Round_0": {"code": "def count_valid_pairs(test_cases):\n    results = []\n    for n, array in test_cases:\n        total_sum = sum(array)\n        mean = total_sum / n\n        \n        # Check if all elements are the same\n        if all(x == array[0] for x in array):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # Calculate the number of valid pairs\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                remaining_sum = total_sum - array[i] - array[j]\n                remaining_mean = remaining_sum / (n - 2)\n                if remaining_mean == mean:\n                    count += 1\n        \n        results.append(count)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    results = count_valid_pairs(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Sum all elements of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Count valid pairs for each test case.\",\n      \"details\": \"For each test case, count the number of valid pairs (i, j) that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data.\",\n      \"details\": \"Parse the number of test cases t and for each test case, read n and the array a.\"\n    },\n    {\n      \"step\": \"Iterate over each test case.\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Calculate the sum of the array a.\",\n      \"details\": \"Compute the sum of all elements in the array a to determine the initial mean k.\"\n    },\n    {\n      \"step\": \"Iterate over all pairs of elements in the array.\",\n      \"details\": \"Use two nested loops to consider each pair (i, j) with i < j.\"\n    },\n    {\n      \"step\": \"Check if removing the pair keeps the mean unchanged.\",\n      \"details\": \"For each pair (i, j), calculate the sum of the remaining elements and check if their mean equals k.\"\n    },\n    {\n      \"step\": \"Count and store the number of valid pairs.\",\n      \"details\": \"If the condition is satisfied, increment the count of valid pairs for the current test case.\"\n    },\n    {\n      \"step\": \"Output the results.\",\n      \"details\": \"After processing all test cases, print the count of valid pairs for each test case.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mean is the sum of all elements divided by the number of elements. In this problem, it is used to determine if removing two elements keeps the mean of the remaining elements the same as the original mean.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove two elements from the array.\n    'equal to': This means that the mean of the remaining elements should be the same as the original mean.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Iterate over all pairs of elements in the array\" and \"Check if removing the pair keeps the mean unchanged\" should be implemented simultaneously. This can be done by using nested loops to iterate over pairs and checking the condition within the same block.\n\n# [edge case] \n    Test case with all elements equal: [4, 4, 4, 4] = 6\n    Explanation: Any pair of elements can be removed since all elements are equal, and the mean remains unchanged.\n    \n    Test case with only three elements: [1, 2, 3] = 0\n    Explanation: Removing any two elements will leave only one element, which cannot have a mean equal to the original mean of the three elements.\n    \n    Test case with large numbers: [1000000000, 1000000000, 1000000000, 1000000000] = 6\n    Explanation: Similar to the first edge case, any pair can be removed since all elements are equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over pairs and checking the mean condition will naturally handle these cases.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        k = total_sum / n\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == k\n        # Simplifying, we get:\n        # total_sum - a[i] - a[j] == k * (n - 2)\n        # a[i] + a[j] == total_sum - k * (n - 2)\n        \n        target_sum = total_sum - k * (n - 2)\n        \n        # Count pairs (i, j) such that a[i] + a[j] == target_sum\n        from collections import defaultdict\n        \n        count = 0\n        freq = defaultdict(int)\n        \n        for num in a:\n            # Check if there is a number that can pair with `num` to form `target_sum`\n            complement = target_sum - num\n            if complement in freq:\n                count += freq[complement]\n            \n            # Record the frequency of the current number\n            freq[num] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean of the array.\",\n      \"details\": \"Compute the sum of the array and divide by the number of elements to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal maintains the mean.\",\n      \"details\": \"For each pair of elements (i, j), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Count valid pairs.\",\n      \"details\": \"Count all pairs (i, j) that satisfy the condition from the previous subproblem.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data.\",\n      \"details\": \"Parse the number of test cases and for each test case, read the number of elements and the array itself.\"\n    },\n    {\n      \"step\": \"Calculate the mean of the array.\",\n      \"details\": \"For each test case, compute the sum of the array and divide by n to get the mean k.\"\n    },\n    {\n      \"step\": \"Iterate over pairs of elements.\",\n      \"details\": \"For each test case, iterate over all pairs of elements (i, j) with i < j.\"\n    },\n    {\n      \"step\": \"Check mean condition for each pair.\",\n      \"details\": \"For each pair (i, j), calculate the sum of the remaining elements and check if the mean remains k.\"\n    },\n    {\n      \"step\": \"Count and output valid pairs.\",\n      \"details\": \"Count the number of pairs that satisfy the condition and output the result for each test case.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is the sum of its elements divided by the number of elements. The task requires maintaining this mean after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This indicates that precisely two elements must be removed from the array.\n    'number of pairs of positions [i, j] (i < j)': This refers to counting pairs of indices where the first index is less than the second.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Iterate over pairs of elements\" and \"Check mean condition for each pair\" should be implemented simultaneously. This can be done by iterating over pairs and checking the condition within the same loop.\n\n# [edge case]\n    Test case with all elements equal: If all elements are the same, any pair can be removed without changing the mean.\n    Example: [5, 5, 5, 5] = 6 pairs\n    Explanation: Any pair of elements can be removed since all elements are equal, maintaining the mean.\n\n    Test case with minimum elements: If n = 3, only one pair can be removed.\n    Example: [1, 2, 3] = 0 pairs\n    Explanation: Removing any pair will change the mean unless all elements are equal.\n\n    Test case with large numbers: If elements are large, precision issues might arise.\n    Example: [1000000000, 1000000000, 1000000000, 1000000000] = 6 pairs\n    Explanation: Similar to the first edge case, all elements are equal, so any pair can be removed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where all elements are equal.\n    ```python\n    if all(x == a[0] for x in a):\n        return comb(n, 2)  # Calculate combinations of n elements taken 2 at a time\n    ```\n\nYES", "Round_0": {"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            # If all elements are equal, any pair can be removed\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean_k\n        # Simplifying the equation:\n        # total_sum - a[i] - a[j] == mean_k * (n - 2)\n        # a[i] + a[j] == total_sum - mean_k * (n - 2)\n        \n        target_sum = total_sum - mean_k * (n - 2)\n        \n        count = 0\n        freq = defaultdict(int)\n        \n        for num in a:\n            count += freq[target_sum - num]\n            freq[num] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            # If all elements are equal, any pair can be removed\n            results.append(n * (n - 1) // 2)\n            continue\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean_k\n        # Simplifying the equation:\n        # total_sum - a[i] - a[j] == mean_k * (n - 2)\n        # a[i] + a[j] == total_sum - mean_k * (n - 2)\n        \n        target_sum = total_sum - mean_k * (n - 2)\n        \n        count = 0\n        freq = defaultdict(int)\n        \n        for num in a:\n            count += freq[target_sum - num]\n            freq[num] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Sum all elements of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Count valid pairs for each test case.\",\n      \"details\": \"Iterate through all possible pairs (i, j) with i < j and count those that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases t and for each test case, read n and the array a.\"\n    },\n    {\n      \"step\": \"Process each test case\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Calculate the mean k\",\n      \"details\": \"Compute the sum of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"step\": \"Find valid pairs\",\n      \"details\": \"Use a nested loop to iterate over all pairs (i, j) with i < j and check if removing a[i] and a[j] keeps the mean unchanged.\"\n    },\n    {\n      \"step\": \"Output the result\",\n      \"details\": \"For each test case, output the count of valid pairs.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is the sum of its elements divided by the number of elements. In this problem, the task is to find pairs of elements that can be removed such that the mean of the remaining elements remains the same as the original mean.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'number of pairs of positions [i, j] (i < j)': This indicates that we need to count all possible pairs of indices where the first index is less than the second.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the mean k\" and \"Find valid pairs\" should be considered simultaneously. \n    Explanation: While iterating over pairs to find valid ones, the mean k should be used to check the condition for each pair. This can be efficiently done by calculating the mean once and using it in the loop that checks pairs.\n\n# [edge case] \n    1. Input: 3, [1, 1, 1] = 1\n       Explanation: All elements are the same, so any pair can be removed without changing the mean.\n    2. Input: 4, [0, 0, 0, 0] = 6\n       Explanation: All elements are zero, so any pair can be removed without changing the mean.\n    3. Input: 5, [1, 2, 3, 4, 5] = 0\n       Explanation: No pair of elements can be removed to keep the mean unchanged because the elements are distinct and the mean changes with any removal.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where all elements are the same or zero.\n    ```python\n    if all(x == a[0] for x in a):\n        return (n * (n - 1)) // 2\n    ```\n\nYES", "Round_0": {"code": "def find_valid_pairs(t, test_cases):\n    results = []\n    for case in test_cases:\n        n, a = case\n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        # Check if all elements are the same\n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # Count valid pairs\n        count = 0\n        pair_sum_needed = 2 * mean_k\n        value_count = {}\n        \n        for value in a:\n            if pair_sum_needed - value in value_count:\n                count += value_count[pair_sum_needed - value]\n            if value in value_count:\n                value_count[value] += 1\n            else:\n                value_count[value] = 1\n        \n        results.append(count)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, a))\n    \n    results = find_valid_pairs(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean of the array.\",\n      \"details\": \"Sum all elements of the array and divide by the number of elements to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (i, j), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Count valid pairs for each test case.\",\n      \"details\": \"Iterate through all possible pairs and count those that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read input data\",\n      \"details\": \"Parse the number of test cases and the arrays for each test case.\"\n    },\n    {\n      \"step\": \"Process each test case\",\n      \"details\": \"For each test case, perform the following steps.\"\n    },\n    {\n      \"step\": \"Calculate the mean of the array\",\n      \"details\": \"Compute the sum of the array and divide by the number of elements to find the mean k.\"\n    },\n    {\n      \"step\": \"Find pairs of elements to remove\",\n      \"details\": \"Iterate over all pairs of elements (i, j) and check if their removal keeps the mean unchanged.\"\n    },\n    {\n      \"step\": \"Count valid pairs\",\n      \"details\": \"Count the number of pairs that satisfy the condition for each test case.\"\n    },\n    {\n      \"step\": \"Output results\",\n      \"details\": \"Print the count of valid pairs for each test case.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is calculated by summing all elements and dividing by the number of elements. The task requires maintaining this mean after removing two elements.\n\n# [phrase showing quantity relationship]\n    'sum divided by n': This indicates the calculation of the mean, which is the total sum of elements divided by the number of elements.\n    'exactly two elements': This specifies that precisely two elements must be removed from the array.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Calculate the mean of the array\" and \"Find pairs of elements to remove\" should be considered simultaneously. This can be done by calculating the mean once and then iterating over pairs to check if their removal maintains the mean.\n\n# [edge case] \n    Input: 3\n    3\n    1 1 1\n    Output: 3\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n    \n    Input: 4\n    1 2 3 4\n    Output: 0\n    Explanation: No pair can be removed to maintain the mean because the elements are distinct and removal changes the mean.\n    \n    Input: 5\n    5 5 5 5 5\n    Output: 10\n    Explanation: All elements are the same, so any pair can be removed without changing the mean.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over pairs and checking the mean will naturally handle these cases.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        target_sum = total_sum * (n - 2)  # This is the sum we need after removing two elements\n        \n        count = 0\n        freq = {}\n        \n        for num in a:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        \n        for i in range(n):\n            freq[a[i]] -= 1\n            for j in range(i + 1, n):\n                freq[a[j]] -= 1\n                \n                if (total_sum - a[i] - a[j]) * n == target_sum:\n                    count += 1\n                \n                freq[a[j]] += 1\n            freq[a[i]] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Sum all elements of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Count the number of valid pairs (i, j) for each test case.\",\n      \"details\": \"Iterate through all possible pairs (i, j) and count those that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases t.\"\n    },\n    {\n      \"step\": \"For each test case, perform the following steps:\"\n    },\n    {\n      \"step\": \"Read the integer n and the array a of n integers.\"\n    },\n    {\n      \"step\": \"Calculate the sum of the array a and determine the mean k.\"\n    },\n    {\n      \"step\": \"Initialize a counter to zero for counting valid pairs.\"\n    },\n    {\n      \"step\": \"Iterate over all pairs (i, j) with i < j in the array a.\"\n    },\n    {\n      \"step\": \"For each pair, calculate the sum of the remaining elements after removing a[i] and a[j].\"\n    },\n    {\n      \"step\": \"Check if the mean of the remaining elements equals k. If yes, increment the counter.\"\n    },\n    {\n      \"step\": \"After checking all pairs, store the counter value as the result for the current test case.\"\n    },\n    {\n      \"step\": \"Output the results for all test cases.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean of an array is the sum of its elements divided by the number of elements. In this problem, it is denoted as k.\n\n    'pairs of positions [i, j]'\n    Explanation: This refers to selecting two distinct positions in the array such that i < j.\n\n# [phrase showing quantity relationship]\n    'exactly two elements'\n    Explanation: This means that we need to remove exactly two elements from the array to check if the mean remains unchanged.\n\n    'number of pairs'\n    Explanation: This refers to counting how many pairs of indices (i, j) satisfy the condition.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    Steps 6-8 should be implemented simultaneously:\n    - \"Iterate over all pairs (i, j) with i < j in the array a.\"\n    - \"For each pair, calculate the sum of the remaining elements after removing a[i] and a[j].\"\n    - \"Check if the mean of the remaining elements equals k. If yes, increment the counter.\"\n    These steps can be combined into a nested loop where for each pair, the condition is checked and the counter is updated accordingly.\n\n# [edge case]\n    1. Input: 3\n       3\n       1 1 1\n       Explanation: All elements are the same, so any pair can be removed. Expected output is 3.\n    2. Input: 3\n       3\n       1 2 3\n       Explanation: No pair can be removed to keep the mean unchanged. Expected output is 0.\n    3. Input: 4\n       4\n       5 5 5 5\n       Explanation: All elements are the same, so any pair can be removed. Expected output is 6.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where all elements are the same.\n    ```python\n    if all(x == a[0] for x in a):\n        return (n * (n - 1)) // 2\n    ```\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        k = total_sum / n\n        \n        # Check if all elements are the same\n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # Calculate the number of valid pairs\n        count = 0\n        from collections import defaultdict\n        freq = defaultdict(int)\n        \n        for num in a:\n            freq[num] += 1\n        \n        for num in a:\n            freq[num] -= 1\n            target = 2 * k - num\n            if target in freq:\n                count += freq[target]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Sum all elements of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Count valid pairs for each test case.\",\n      \"details\": \"For each test case, count the number of valid pairs (i, j) that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  1. Read the integer n and the array a of n integers.\",\n    \"  2. Calculate the sum of the array a and determine the initial mean k.\",\n    \"  3. Initialize a counter to zero for counting valid pairs.\",\n    \"  4. Iterate over all pairs of indices (i, j) with i < j:\",\n    \"     a. Calculate the sum of the remaining elements if a[i] and a[j] are removed.\",\n    \"     b. Check if the mean of the remaining elements equals k.\",\n    \"     c. If it does, increment the counter.\",\n    \"  5. Output the counter value for the current test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematic mean of an array is the sum of its elements divided by the number of elements. In this problem, the task is to find pairs of elements that can be removed such that the mean of the remaining elements is unchanged.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'number of pairs of positions [i, j] (i < j)': This indicates that we need to count all possible pairs of indices where the first index is less than the second.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps 4a, 4b, and 4c should be implemented simultaneously. \n    Explanation: When iterating over pairs of indices, the calculation of the sum of the remaining elements, checking if the mean equals k, and incrementing the counter if the condition is met should all occur within the same loop iteration.\n\n# [edge case]\n    1. Input: 3\n       Array: [1, 1, 1]\n       Expected Output: 0\n       Explanation: With only three elements, removing any two will leave one element, which cannot maintain the original mean.\n       \n    2. Input: 4\n       Array: [0, 0, 0, 0]\n       Expected Output: 6\n       Explanation: Any pair of elements can be removed since all elements are zero, and the mean remains zero.\n       \n    3. Input: 5\n       Array: [1, 2, 3, 4, 5]\n       Expected Output: 0\n       Explanation: No pair of elements can be removed to maintain the mean of the remaining elements.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where n is very small (e.g., n = 3) because removing two elements would leave only one element, which cannot maintain the mean.\n    ```python\n    if n == 3:\n        print(0)\n        continue\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 3:\n            results.append(0)\n            continue\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean_k\n        # Simplifying the equation:\n        # total_sum - a[i] - a[j] == mean_k * (n - 2)\n        # a[i] + a[j] == total_sum - mean_k * (n - 2)\n        \n        target_sum = total_sum - mean_k * (n - 2)\n        \n        # Count pairs (i, j) such that a[i] + a[j] == target_sum\n        from collections import defaultdict\n        \n        count = 0\n        value_count = defaultdict(int)\n        \n        for value in a:\n            complement = target_sum - value\n            if complement in value_count:\n                count += value_count[complement]\n            value_count[value] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 3:\n            results.append(0)\n            continue\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean_k\n        # Simplifying the equation:\n        # total_sum - a[i] - a[j] == mean_k * (n - 2)\n        # a[i] + a[j] == total_sum - mean_k * (n - 2)\n        \n        target_sum = total_sum - mean_k * (n - 2)\n        \n        # Count pairs (i, j) such that a[i] + a[j] == target_sum\n        from collections import defaultdict\n        \n        count = 0\n        value_count = defaultdict(int)\n        \n        for value in a:\n            complement = target_sum - value\n            if complement in value_count:\n                count += value_count[complement]\n            value_count[value] += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean k of the array a.\",\n      \"details\": \"Sum all elements of the array a and divide by n to get the mean k.\"\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"details\": \"For each pair of elements (a[i], a[j]), check if removing them keeps the mean of the remaining elements equal to k.\"\n    },\n    {\n      \"description\": \"Count the number of valid pairs (i, j) for each test case.\",\n      \"details\": \"Iterate through all possible pairs (i, j) and count those that satisfy the condition.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Read the number of test cases t.\"\n    },\n    {\n      \"step\": \"For each test case, perform the following:\",\n      \"substeps\": [\n        {\n          \"step\": \"Read the integer n and the array a of n integers.\"\n        },\n        {\n          \"step\": \"Calculate the sum of the array a and determine the mean k.\"\n        },\n        {\n          \"step\": \"Initialize a counter to zero for counting valid pairs.\"\n        },\n        {\n          \"step\": \"Iterate over all pairs (i, j) with i < j:\",\n          \"substeps\": [\n            {\n              \"step\": \"Calculate the sum of the remaining elements if a[i] and a[j] are removed.\"\n            },\n            {\n              \"step\": \"Check if the mean of the remaining elements equals k.\"\n            },\n            {\n              \"step\": \"If the condition is satisfied, increment the counter.\"\n            }\n          ]\n        },\n        {\n          \"step\": \"Output the counter value for the current test case.\"\n        }\n      ]\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean (or average) of a set of numbers is the sum of the numbers divided by the count of numbers. In this requirement, it refers to the mean of the array elements before and after removing two elements.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'equal to': This indicates that the mean of the remaining elements after removing two should be the same as the original mean.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for calculating the sum and mean, and then iterating over pairs to check conditions, should be implemented in a loop for each test case. The substeps for checking pairs (i, j) should be implemented simultaneously within a nested loop structure.\n\n# [edge case] \n    Test case with all elements equal: [4, 4, 4, 4] = 6\n    Explanation: Any pair of elements can be removed since all elements are equal, and the mean remains unchanged.\n\n    Test case with minimum elements: [1, 1, 1] = 0\n    Explanation: With only three elements, removing any two will leave one element, which cannot maintain the original mean.\n\n    Test case with large numbers: [1000000000, 1000000000, 1000000000, 1000000000] = 6\n    Explanation: Similar to the first edge case, any pair can be removed as all elements are equal.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where all elements are equal.\n    ```python\n    if all(x == a[0] for x in a):\n        print((n * (n - 1)) // 2)\n        continue\n    ```\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        mean_k = total_sum / n\n        \n        # Edge case: all elements are equal\n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # Count pairs (i, j) such that removing them keeps the mean unchanged\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                remaining_sum = total_sum - a[i] - a[j]\n                remaining_mean = remaining_sum / (n - 2)\n                if remaining_mean == mean_k:\n                    count += 1\n        \n        results.append(count)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the mathematical mean k of the original array a.\",\n      \"steps\": [\n        \"Sum all elements of the array a.\",\n        \"Divide the sum by the number of elements n to get the mean k.\"\n      ]\n    },\n    {\n      \"description\": \"Identify pairs of elements that can be removed while maintaining the mean k.\",\n      \"steps\": [\n        \"For each pair of elements (a[i], a[j]) where i < j, calculate the sum of the remaining elements after removing a[i] and a[j].\",\n        \"Check if the mean of the remaining elements equals k.\"\n      ]\n    },\n    {\n      \"description\": \"Count the number of valid pairs (i, j) that satisfy the condition.\",\n      \"steps\": [\n        \"Initialize a counter to zero.\",\n        \"For each valid pair found in the previous step, increment the counter.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"Read the integer n and the array a of n integers.\",\n    \"Calculate the mean k of the array a.\",\n    \"Initialize a counter to zero for counting valid pairs.\",\n    \"Iterate over all pairs (i, j) with i < j:\",\n    \"  Calculate the sum of the array excluding a[i] and a[j].\",\n    \"  Check if the mean of the remaining elements equals k.\",\n    \"  If it does, increment the counter.\",\n    \"Output the counter for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean of an array is the sum of its elements divided by the number of elements. It is a measure of central tendency.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'number of pairs of positions [i, j] (i < j)': This indicates that we need to count pairs of indices where the first index is less than the second.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for calculating the mean and checking pairs should be implemented simultaneously for efficiency. Specifically, the steps:\n    - \"Calculate the sum of the array excluding a[i] and a[j].\"\n    - \"Check if the mean of the remaining elements equals k.\"\n    These can be combined in a single loop to avoid recalculating the sum repeatedly.\n\n# [edge case] \n    1. Input: [3, 3, 3, 3] = 6\n       Explanation: All elements are the same, so any pair can be removed without changing the mean.\n    2. Input: [1, 2, 3] = 0\n       Explanation: No two elements can be removed to maintain the mean since the array is too small.\n    3. Input: [1, 1, 1, 2, 2, 2] = 3\n       Explanation: Pairs like (1, 1) or (2, 2) can be removed to maintain the mean.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where all elements are the same or when the array is too small to form valid pairs.\n    ```python\n    if n < 3:\n        return 0\n    if all(x == a[0] for x in a):\n        return (n * (n - 1)) // 2\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        k = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            # If all elements are the same, any pair can be removed\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        count = 0\n        # We need to find pairs (i, j) such that a[i] + a[j] = 2 * k\n        target_sum = 2 * k\n        from collections import defaultdict\n        freq = defaultdict(int)\n        \n        for num in a:\n            freq[num] += 1\n        \n        for num in a:\n            freq[num] -= 1\n            complement = target_sum - num\n            if complement in freq:\n                count += freq[complement]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 86)"}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(a)\n        k = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            # If all elements are the same, any pair can be removed\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        count = 0\n        # We need to find pairs (i, j) such that a[i] + a[j] = 2 * k\n        target_sum = 2 * k\n        from collections import defaultdict\n        freq = defaultdict(int)\n        \n        for num in a:\n            freq[num] += 1\n        \n        for num in a:\n            freq[num] -= 1\n            complement = target_sum - num\n            if complement in freq:\n                count += freq[complement]\n        \n        results.append(count // 2)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Calculate the initial mean of the array.\",\n      \"steps\": [\n        \"Sum all elements of the array.\",\n        \"Divide the sum by the number of elements to get the mean.\"\n      ]\n    },\n    {\n      \"description\": \"Identify pairs of elements whose removal keeps the mean unchanged.\",\n      \"steps\": [\n        \"For each pair of elements (i, j), calculate the sum of the remaining elements after removing i and j.\",\n        \"Check if the mean of the remaining elements equals the initial mean.\"\n      ]\n    },\n    {\n      \"description\": \"Count valid pairs for each test case.\",\n      \"steps\": [\n        \"Iterate through all possible pairs (i, j) with i < j.\",\n        \"Count pairs where the condition is satisfied.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following:\",\n    \"Read the number of elements and the array.\",\n    \"Calculate the initial mean of the array.\",\n    \"Initialize a counter for valid pairs.\",\n    \"Iterate through all pairs of elements (i, j) with i < j.\",\n    \"For each pair, calculate the sum of the remaining elements and check if the mean is unchanged.\",\n    \"If the mean is unchanged, increment the counter.\",\n    \"Output the counter for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mathematic mean'\n    Explanation: The mathematical mean is the average of a set of numbers, calculated by dividing the sum of the numbers by the count of numbers.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    'sum of elements divided by n': This is the formula for calculating the mean, where 'n' is the number of elements in the array.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for calculating the initial mean and checking pairs should be implemented simultaneously for efficiency. Specifically, the calculation of the sum of remaining elements and checking if the mean is unchanged can be done in one loop over pairs.\n\n# [edge case] \n    Test case with all elements equal: [4, 4, 4, 4] = 6\n    Explanation: Any pair of elements can be removed since all elements are equal, and the mean remains unchanged.\n    \n    Test case with no valid pairs: [1, 2, 3] = 0\n    Explanation: No pair of elements can be removed to keep the mean unchanged because the array is too small to satisfy the condition.\n    \n    Test case with large numbers: [1000000000, 1000000000, 1000000000, 1000000000] = 6\n    Explanation: Similar to the first edge case, any pair can be removed since all elements are equal.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently, especially when all elements are equal or when the array is too small to have valid pairs.\n    ```python\n    if n < 3:\n        return 0\n    if all(x == a[0] for x in a):\n        return (n * (n - 1)) // 2\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        a = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n < 3:\n            results.append(0)\n            continue\n        \n        total_sum = sum(a)\n        mean = total_sum / n\n        \n        if all(x == a[0] for x in a):\n            results.append((n * (n - 1)) // 2)\n            continue\n        \n        # We need to find pairs (i, j) such that:\n        # (total_sum - a[i] - a[j]) / (n - 2) == mean\n        # Simplifying, we get:\n        # total_sum - a[i] - a[j] == mean * (n - 2)\n        # a[i] + a[j] == total_sum - mean * (n - 2)\n        \n        target_sum = total_sum - mean * (n - 2)\n        \n        # To avoid floating point precision issues, we work with integers\n        # Multiply everything by n to avoid division\n        target_sum = total_sum * n - mean * n * (n - 2)\n        \n        # Now we need to find pairs (i, j) such that:\n        # a[i] * n + a[j] * n == target_sum\n        \n        from collections import defaultdict\n        \n        count = defaultdict(int)\n        valid_pairs = 0\n        \n        for number in a:\n            # Check if there's a complement that forms the target sum\n            complement = target_sum - number * n\n            if complement in count:\n                valid_pairs += count[complement]\n            \n            # Count the current number for future pairs\n            count[number * n] += 1\n        \n        results.append(valid_pairs)\n    \n    for result in results:\n        print(result)\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, false, false, true, true, false, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 26, "prompt": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). The mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i.e. sum divided by n), and Monocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "mutate_method": "condense_two2one", "save_node": true, "parent_index": 26}
