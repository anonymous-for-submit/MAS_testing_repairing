{"name": "1619_H. Permutation and Queries", "description": "You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times. \n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.", "tags": ["brute force", "data structures", "divide and conquer", "two pointers"], "difficulty": 14, "id": 1619, "sample_io": [{"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n3\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n", "output": ["4\n1\n2\n"]}], "test_list": [{"input": "1 1\n1\n2 1 1\n", "output": ["1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 6\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n4\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 3\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 4\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["7\n6\n8\n9\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 83 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 6\n2 36 69\n1 100 59\n", "output": ["19\n6\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n8\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n5\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 4\n1 1 3\n2 1 2\n", "output": ["4\n1\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n59\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n4\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n4\n3\n5\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 68\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n1\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n1 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n1\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 7 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n4\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 2\n1 1 3\n2 1 2\n", "output": ["4\n4\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 44 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["21\n6\n40\n54\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n1\n2\n3\n3\n5\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 4\n1 1 2\n2 1 2\n", "output": ["4\n1\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n4\n2\n4\n3\n5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n1\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n3\n1\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n1 1 3\n2 1 2\n", "output": ["4\n2\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 44 22\n2 1 72\n2 65 13\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["21\n6\n57\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n7\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n7\n5\n10\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 2\n", "output": ["3\n5\n4\n2\n3\n5\n3\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n9\n5\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 9\n1 3 6\n", "output": ["10\n6\n8\n7\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 2 72\n2 65 8\n1 18 37\n1 19 89\n1 86 3\n2 36 69\n1 100 59\n", "output": ["71\n16\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n9\n8\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 1 6\n1 7 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n8\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 1 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n9\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n1\n2\n3\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 2\n1 2 3\n2 1 2\n", "output": ["4\n4\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 44 44\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["64\n6\n40\n54\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 4\n2 5 2\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n3\n1\n2\n3\n3\n5\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 0\n2 1 4\n1 1 2\n2 1 2\n", "output": ["3\n1\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["7\n6\n7\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 4 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n1\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n8\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 4 9\n2 8 8\n1 3 6\n", "output": ["7\n6\n7\n8\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n1 3 6\n", "output": ["10\n3\n8\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 15\n1 3 6\n", "output": ["10\n3\n8\n6\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 83 22\n2 1 72\n2 65 10\n1 18 37\n1 19 89\n1 86 6\n2 36 69\n1 100 59\n", "output": ["19\n6\n47\n54\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n2 1 3\n2 1 2\n", "output": ["4\n1\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 1\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n4\n3\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 2\n1 1 3\n2 2 2\n", "output": ["4\n4\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 5 1\n2 5 3\n2 1 4\n1 5 2\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n4\n2\n4\n3\n1\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n6\n5\n3\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n3\n3\n1\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 4 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n3\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["2\n6\n7\n5\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 5 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n9\n7\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 5 6\n1 10 6\n2 3 3\n1 1 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n9\n3\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 8\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n1\n2\n2\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 0\n2 1 3\n1 1 2\n2 1 2\n", "output": ["3\n5\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n2\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 10\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n1 3 6\n", "output": ["10\n3\n7\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 0\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n5\n3\n3\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n6\n5\n7\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n3\n2\n1\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 5 6\n2 5 9\n2 8 2\n1 3 6\n", "output": ["10\n6\n9\n7\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 0\n1 4 6\n1 5 9\n2 9 8\n1 3 7\n", "output": ["10\n9\n9\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 8\n1 5 4\n2 5 3\n2 2 7\n2 5 2\n", "output": ["3\n5\n1\n2\n2\n3\n1\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n8\n4\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 0\n2 5 3\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n5\n2\n3\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n7\n5\n7\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 6\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n4\n2\n1\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 8\n1 4 6\n", "output": ["2\n6\n7\n6\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 0\n1 4 6\n2 5 9\n2 9 8\n1 3 7\n", "output": ["10\n9\n9\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n4\n4\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n8\n8\n8\n"]}, {"input": "5 7\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 6\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n4\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 8\n2 4 6\n", "output": ["2\n6\n7\n6\n10\n4\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["10\n6\n8\n8\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 6\n2 4 6\n", "output": ["2\n6\n7\n6\n8\n4\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 5\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n8\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n2 5 4\n2 5 3\n2 2 5\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n2\n2\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 0\n", "output": ["4\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 4\n2 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n4\n8\n7\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 4 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n4\n4\n5\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 3\n2 1 72\n2 65 8\n1 18 68\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["55\n6\n40\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 2\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 1 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n4\n5\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n2 1 3\n2 1 2\n", "output": ["4\n2\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n1 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n5\n4\n4\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 8\n1 10 6\n2 4 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n9\n4\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n2 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 8\n2 9 8\n1 3 6\n", "output": ["10\n10\n6\n9\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 0\n1 1 4\n1 1 2\n2 1 2\n", "output": ["3\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 4\n2 1 3\n2 1 2\n", "output": ["4\n4\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 1 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n4\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n2 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n8\n6\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 5 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n5\n5\n3\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 4 3\n2 5 4\n1 5 1\n2 5 3\n2 2 12\n2 4 1\n", "output": ["3\n5\n4\n3\n3\n5\n2\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 10\n2 4 2\n", "output": ["3\n5\n1\n2\n3\n5\n3\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 1 3\n2 5 8\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n1\n5\n2\n3\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 10\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 1 8\n1 3 6\n", "output": ["7\n6\n7\n5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 9 8\n1 4 6\n", "output": ["2\n6\n7\n5\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 6\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 8\n1 4 6\n", "output": ["2\n3\n7\n6\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 3 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n8\n4\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 2 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n8\n5\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 6 9\n2 8 8\n2 4 6\n", "output": ["2\n6\n8\n6\n10\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 4\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["10\n7\n4\n5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 0\n1 3 6\n2 6 9\n2 8 6\n2 4 6\n", "output": ["2\n6\n9\n6\n8\n4\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 5\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 4\n1 1 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n3\n4\n5\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n2 1 3\n2 1 1\n", "output": ["4\n2\n5\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 0\n2 5 4\n2 5 2\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 2\n", "output": ["3\n3\n1\n2\n3\n3\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 0\n2 5 4\n1 5 1\n2 1 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n5\n3\n4\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 9 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 10 10\n1 3 6\n", "output": ["10\n6\n1\n5\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n5\n5\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n2 1 2\n2 1 1\n", "output": ["4\n2\n1\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 9 6\n2 4 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 10 10\n1 3 6\n", "output": ["10\n8\n1\n5\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 0\n2 1 2\n2 1 1\n", "output": ["4\n3\n1\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 9 6\n1 4 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 10 10\n1 3 6\n", "output": ["10\n6\n5\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 5\n2 8 10\n1 3 8\n", "output": ["10\n6\n5\n2\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 6\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n2\n8\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n1 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n", "output": ["3\n5\n4\n2\n2\n2\n4\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 13\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["33\n89\n40\n94\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 1 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n8\n6\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n1 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["95\n40\n32\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 5 2\n2 9 5\n1 4 6\n1 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n10\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 4 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n1\n2\n4\n3\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 1\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n4\n4\n2\n3\n3\n1\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n1 2 3\n2 1 2\n", "output": ["4\n2\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 2 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n2\n4\n2\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 6\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["9\n6\n7\n5\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 8 8\n1 3 6\n", "output": ["10\n9\n8\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n2 7 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 8\n2 9 8\n1 3 6\n", "output": ["10\n9\n6\n9\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 1 2\n2 9 4\n1 4 6\n1 8 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n9\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 3\n1 1 2\n2 1 2\n", "output": ["4\n5\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 4\n1 1 4\n2 1 2\n", "output": ["4\n4\n3\n"]}, {"input": "5 2\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 4 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n2 5 8\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 3\n2 4 8\n1 3 6\n", "output": ["10\n6\n8\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 7 6\n1 7 9\n2 3 1\n1 6 2\n2 9 5\n1 4 6\n2 4 9\n2 8 8\n1 5 6\n", "output": ["7\n4\n7\n8\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 6\n", "output": ["10\n3\n8\n7\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 5 6\n1 5 8\n2 4 15\n1 3 6\n", "output": ["10\n3\n8\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 3\n2 1 3\n2 1 2\n", "output": ["4\n5\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 1 1\n2 5 3\n2 1 4\n1 5 2\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n2\n2\n4\n3\n1\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 10\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["2\n6\n3\n5\n10\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 17\n2 4 2\n", "output": ["3\n5\n4\n2\n3\n5\n5\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n1 9 5\n1 5 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n5\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 1 6\n1 7 10\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n1 3 6\n", "output": ["7\n3\n7\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 5\n1 6 2\n2 9 0\n1 4 6\n1 5 9\n2 9 8\n1 3 7\n", "output": ["10\n2\n9\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 8\n1 5 4\n1 5 3\n2 2 7\n2 5 2\n", "output": ["3\n5\n1\n2\n2\n3\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 1\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n4\n2\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 7 6\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n3\n8\n8\n"]}, {"input": "5 7\n2 3 5 1 4\n1 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 6\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["5\n5\n5\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n2 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["10\n6\n9\n4\n2\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n1 5 3\n2 1 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n1\n4\n4\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 0\n2 5 4\n2 5 0\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 2\n", "output": ["3\n3\n5\n2\n3\n3\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 1\n1 6 2\n2 9 4\n2 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n4\n8\n6\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 4 3\n2 5 4\n1 5 1\n2 5 3\n2 4 12\n2 4 1\n", "output": ["3\n5\n4\n3\n3\n5\n4\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 10\n2 4 3\n", "output": ["3\n5\n1\n2\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 9 8\n1 4 6\n", "output": ["2\n6\n7\n6\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 3 5\n1 1 6\n1 7 9\n2 9 22\n2 3 4\n", "output": ["10\n6\n8\n8\n4\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 6 7\n2 8 8\n2 4 6\n", "output": ["2\n6\n8\n4\n10\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 0\n2 5 4\n2 5 4\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 2\n", "output": ["3\n3\n3\n2\n3\n3\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n2 3 6\n", "output": ["10\n6\n5\n5\n8\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n2 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n1 3 8\n", "output": ["10\n8\n6\n9\n10\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 6\n1 6 2\n2 3 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n2\n7\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 4\n1 7 6\n1 10 6\n2 3 2\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 5\n", "output": ["7\n1\n8\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 2\n1 4 6\n1 1 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n2\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 5 2\n2 9 5\n1 4 6\n1 5 8\n2 8 8\n1 3 6\n", "output": ["10\n6\n10\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n1 3 1\n2 2 2\n1 1 5\n2 1 2\n", "output": ["5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 6\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["9\n6\n8\n5\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 9 9\n2 8 8\n1 3 8\n", "output": ["10\n6\n9\n9\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n2 1 1\n2 1 3\n1 1 2\n2 1 2\n", "output": ["5\n5\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 6\n", "output": ["10\n10\n8\n7\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 5 3\n1 5 8\n2 4 15\n1 3 6\n", "output": ["10\n3\n8\n1\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n1 9 5\n1 5 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 5 6\n", "output": ["7\n6\n2\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 4 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 1\n2 9 22\n2 3 6\n", "output": ["10\n9\n6\n4\n4\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 1\n1 8 5\n1 7 6\n2 3 3\n2 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["9\n6\n9\n4\n2\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n2 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n2 3 6\n", "output": ["10\n7\n6\n5\n3\n2\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 11\n1 6 2\n2 3 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n7\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 1\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 6\n", "output": ["10\n10\n6\n3\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 4\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 5 6\n", "output": ["7\n8\n6\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 1\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 8\n", "output": ["10\n10\n6\n3\n10\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 1 3\n1 6 2\n1 9 5\n1 5 6\n3 5 9\n2 8 8\n1 3 6\n", "output": ["10\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 4\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 8 22\n1 5 6\n", "output": ["7\n8\n6\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 6 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 6 12\n2 8 8\n1 4 6\n", "output": ["2\n6\n9\n6\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 1\n2 9 4\n1 4 6\n1 5 8\n2 3 8\n2 3 8\n", "output": ["10\n10\n6\n10\n10\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 2 3\n1 6 2\n1 9 5\n1 5 6\n3 5 9\n2 8 8\n1 3 6\n", "output": ["10\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 4\n2 3 3\n1 6 2\n2 9 8\n1 1 6\n1 7 9\n2 8 22\n1 5 6\n", "output": ["7\n8\n4\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 4\n1 7 6\n1 10 3\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["7\n2\n4\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 1 2\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n3\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 4\n1 1 3\n2 1 2\n", "output": ["4\n3\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 37\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n51\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 2 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n1\n3\n5\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 10\n1 18 68\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n47\n6\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 0\n", "output": ["3\n5\n4\n2\n3\n3\n1\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 7\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n1\n2\n1\n3\n5\n1\n"]}, {"input": "5 3\n5 3 4 2 1\n2 3 1\n2 1 4\n1 1 2\n2 1 2\n", "output": ["4\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n1 3 5\n2 4 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["1\n5\n5\n1\n3\n4\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n1 3 1\n2 3 2\n1 1 3\n2 1 2\n", "output": ["1\n1\n"]}], "task_id": "codecontest/146", "repair_prompt": ["You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times.\n\nYour task is to efficiently handle each query and return the expected results promptly. Make sure to consider the constraints and optimize your solution accordingly.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations. However, [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times.\n\nYour task is to efficiently handle each query and return the expected results promptly. Make sure to consider the constraints and optimize your solution accordingly.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once and, for example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times.\n\nYour task is to efficiently handle each query and return the expected results promptly. Make sure to consider the constraints and optimize your solution accordingly.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            # Perform the operation i = p[i] k times\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    p = list(map(int, data[index:index + n]))\n    index += n\n    \n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            visited = {}\n            steps = 0\n            while k > 0 and i not in visited:\n                visited[i] = steps\n                i = p[i] - 1\n                steps += 1\n                k -= 1\n            \n            if k > 0:\n                cycle_length = steps - visited[i]\n                k %= cycle_length\n                for _ in range(k):\n                    i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    queries = data[n+2:]\n    \n    results = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            for _ in range(k):\n                i = p[i] - 1\n            results.append(p[i])\n            index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    queries = data[n+2:]\n    \n    results = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            index += 3\n            \n            # Perform the repeated assignment\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    queries = data[n+2:]\n    \n    results = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            for _ in range(k):\n                i = p[i] - 1\n            results.append(p[i])\n            index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            # Perform the operation k times\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            current_index = i\n            for _ in range(k):\n                current_index = p[current_index] - 1\n            \n            results.append(p[current_index])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def handle_query_type_2(p, i, k):\n    visited = set()\n    while k > 0 and i not in visited:\n        visited.add(i)\n        i = p[i - 1]\n        k -= 1\n    return i\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    p = list(map(int, data[index:index + n]))\n    index += n\n    \n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        x = int(data[index + 1])\n        y = int(data[index + 2])\n        index += 3\n        \n        if t == 1:\n            # Swap operation\n            p[x - 1], p[y - 1] = p[y - 1], p[x - 1]\n        elif t == 2:\n            # Calculate operation\n            result = handle_query_type_2(p, x, y)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    queries = data[n+2:]\n    \n    result = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            for _ in range(k):\n                i = p[i] - 1\n            result.append(p[i])\n            index += 3\n    \n    for res in result:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            for _ in range(k):\n                i = p[i] - 1\n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            # Perform the operation i = p[i] k times\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the permutation array and the list of queries.\",\n      \"details\": \"Read the first line to get n and q. Read the second line to get the permutation array p. Read the next q lines to get the queries.\"\n    },\n    {\n      \"description\": \"Implement the swap operation for the first type of query.\",\n      \"details\": \"For a query of type 1 x y, swap the elements at indices x-1 and y-1 in the permutation array p.\"\n    },\n    {\n      \"description\": \"Implement the calculation for the second type of query.\",\n      \"details\": \"For a query of type 2 i k, repeatedly assign i = p[i-1] for k times and return the final value of i.\"\n    },\n    {\n      \"description\": \"Optimize the solution to handle large input sizes efficiently.\",\n      \"details\": \"Consider using efficient data structures or algorithms to minimize time complexity, especially for the second type of query.\"\n    },\n    {\n      \"description\": \"Output the results for each second-type query.\",\n      \"details\": \"Collect the results of all second-type queries and print each result on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, q, the permutation array p, and the list of queries.\",\n    \"Initialize a loop to process each query.\",\n    \"For each query, check the type:\",\n    \"  - If type 1, perform the swap operation on the permutation array.\",\n    \"  - If type 2, calculate the result by iterating k times as described and store the result.\",\n    \"After processing all queries, output the results for each second-type query.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that each number from 1 to n appears exactly once in the array, ensuring no duplicates or missing numbers.\n\n# [phrase showing quantity relationship]\n    'at least one second-type query'\n    Explanation: This means that among the queries provided, there is guaranteed to be at least one query of type 2. This ensures that the output will always have at least one result to print.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for processing each query should be considered simultaneously within a loop that iterates over the queries. Specifically, the logic for determining the type of query and executing the corresponding operation (swap or calculation) should be handled in a single code block using an if-else statement.\n\n# [edge case]\n    1. Input: 1 1\n       Output: 1\n       Explanation: With n = 1, the permutation is [1]. Any query of type 2 will always return 1, as there is only one element.\n       \n    2. Input: 5 1\n       Output: 5\n       Explanation: If the permutation is [5, 4, 3, 2, 1] and the query is of type 2 with i = 5 and k = 1, the output will be 5, as p[5] = 5.\n       \n    3. Input: 3 3\n       Output: 3\n       Explanation: If the permutation is [3, 1, 2] and the query is of type 2 with i = 3 and k = 1, the output will be 2, as p[3] = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the queries and handling each type appropriately will naturally cover these scenarios.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            # Perform the operation i = p[i] k times\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 79)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            # Perform the operation i = p[i] k times\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the permutation array and the list of queries.\",\n      \"details\": [\n        \"Read the first line to get the values of n and q.\",\n        \"Read the second line to get the permutation array p.\",\n        \"Read the next q lines to get the list of queries.\"\n      ]\n    },\n    {\n      \"description\": \"Implement the swap operation for the first type of query.\",\n      \"details\": [\n        \"Identify queries of type 1.\",\n        \"For each query, swap the elements at indices x and y in the permutation array p.\"\n      ]\n    },\n    {\n      \"description\": \"Implement the transformation operation for the second type of query.\",\n      \"details\": [\n        \"Identify queries of type 2.\",\n        \"For each query, perform the transformation i = p_i k times.\",\n        \"Track the transformation and return the final value of i.\"\n      ]\n    },\n    {\n      \"description\": \"Optimize the solution to handle large constraints efficiently.\",\n      \"details\": [\n        \"Consider using data structures that allow efficient updates and queries.\",\n        \"Ensure the solution can handle up to 10^5 elements and queries within time limits.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, q, permutation array p, and queries.\",\n    \"Initialize the permutation array and prepare to process queries.\",\n    \"Iterate over each query:\",\n    \"  If the query is of type 1, perform the swap operation.\",\n    \"  If the query is of type 2, perform the transformation operation and store the result.\",\n    \"Output the results for all second-type queries.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that the array is a rearrangement of the numbers from 1 to n.\n\n    'query'\n    Explanation: A query is an operation that needs to be performed on the permutation. There are two types of queries: one that swaps elements and another that transforms an index based on the permutation.\n\n# [phrase showing quantity relationship]\n    'k times'\n    Explanation: In the second type of query, the transformation i = p_i is performed k times. This means repeatedly applying the transformation k times to find the final value of i.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for handling each query type should be implemented separately, as they involve different operations. However, within the handling of type 2 queries, the transformation operation (i = p_i k times) should be implemented in a loop or recursive manner to apply the transformation k times.\n\n# [edge case]\n    1. n = 1, q = 1, p = [1], query = [2, 1, 1] = 1\n       Explanation: With only one element, any transformation will result in the same element.\n    2. n = 5, q = 1, p = [1, 2, 3, 4, 5], query = [2, 5, 100000] = 5\n       Explanation: Since the permutation is already in order, any number of transformations will result in the same element.\n    3. n = 5, q = 1, p = [5, 4, 3, 2, 1], query = [2, 1, 2] = 1\n       Explanation: The transformation will cycle through the permutation, but since k is even, it will return to the original element.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where k is very large, potentially using a cycle detection or modulo operation to avoid unnecessary computations.\n    ```python\n    def handle_query_type_2(p, i, k):\n        visited = set()\n        while k > 0 and i not in visited:\n            visited.add(i)\n            i = p[i - 1]\n            k -= 1\n        return i\n    ``", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    p = list(map(int, data[index:index + n]))\n    index += n\n    \n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            visited = {}\n            steps = 0\n            while k > 0 and i not in visited:\n                visited[i] = steps\n                i = p[i] - 1\n                steps += 1\n                k -= 1\n            \n            if k > 0:\n                cycle_length = steps - visited[i]\n                k %= cycle_length\n                for _ in range(k):\n                    i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the permutation array and the list of queries.\",\n      \"details\": \"Read the first line to get n and q. Read the second line to get the permutation array p. Read the next q lines to get the list of queries.\"\n    },\n    {\n      \"description\": \"Implement the swap operation for the first type of query.\",\n      \"details\": \"For a query of type 1 x y, swap the elements at indices x-1 and y-1 in the permutation array p.\"\n    },\n    {\n      \"description\": \"Implement the repeated assignment operation for the second type of query.\",\n      \"details\": \"For a query of type 2 i k, repeatedly assign i = p[i-1] for k times and return the final value of i.\"\n    },\n    {\n      \"description\": \"Efficiently handle multiple queries and output the results for second-type queries.\",\n      \"details\": \"Iterate through the list of queries, perform the required operations, and store the results of second-type queries. Print each result on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, q, the permutation array p, and the list of queries.\",\n    \"Initialize an empty list to store results of second-type queries.\",\n    \"Iterate through each query in the list of queries:\",\n    \"  - If the query is of type 1, perform the swap operation on the permutation array.\",\n    \"  - If the query is of type 2, perform the repeated assignment operation and append the result to the results list.\",\n    \"After processing all queries, print each result from the results list on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that each number in the range 1 to n appears exactly once in the array.\n\n    'query'\n    Explanation: A query is an operation that needs to be performed on the permutation. There are two types of queries: one that swaps two elements in the permutation and another that repeatedly assigns a value based on the permutation.\n\n# [phrase showing quantity relationship]\n    'k times': In the context of the second type of query, it means that the assignment operation should be performed k times. In code, this can be implemented using a loop that iterates k times.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for handling the queries should be implemented in a loop that processes each query one by one. The swap operation and the repeated assignment operation are distinct and should be handled separately within the loop. However, the results of the second-type queries should be collected and printed after processing all queries.\n\n# [edge case]\n    1. n = 1, q = 1, p = [1], query = [2, 1, 1]\n       Expected output: 1\n       Explanation: With only one element, any assignment will result in the same element.\n       \n    2. n = 5, q = 1, p = [1, 2, 3, 4, 5], query = [2, 5, 100000]\n       Expected output: 5\n       Explanation: Since the permutation is already in order, any number will map to itself regardless of the number of assignments.\n       \n    3. n = 5, q = 1, p = [5, 4, 3, 2, 1], query = [2, 1, 5]\n       Expected output: 1\n       Explanation: The permutation is reversed, but since the query starts at 1, it will always map back to 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the queries and performing the operations as described will naturally handle these cases.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    queries = data[n+2:]\n    \n    results = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            for _ in range(k):\n                i = p[i] - 1\n            results.append(p[i])\n            index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 77)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    queries = data[n+2:]\n    \n    results = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            for _ in range(k):\n                i = p[i] - 1\n            results.append(p[i])\n            index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the permutation array and the list of queries.\",\n      \"details\": \"Read the first line to get n and q. Read the second line to get the permutation array p. Read the next q lines to get the queries.\"\n    },\n    {\n      \"description\": \"Implement the swap operation for the first type of query.\",\n      \"details\": \"For a query of type 1 x y, swap the elements at indices x-1 and y-1 in the permutation array p.\"\n    },\n    {\n      \"description\": \"Implement the calculation for the second type of query.\",\n      \"details\": \"For a query of type 2 i k, repeatedly assign i = p[i-1] for k times and return the final value of i.\"\n    },\n    {\n      \"description\": \"Optimize the solution to handle large inputs efficiently.\",\n      \"details\": \"Consider using memoization or other techniques to avoid redundant calculations, especially for the second type of query.\"\n    },\n    {\n      \"description\": \"Output the results for each second-type query.\",\n      \"details\": \"Collect the results of all second-type queries and print each result on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, q, the permutation array p, and the list of queries.\",\n    \"Initialize a list to store the results of second-type queries.\",\n    \"Iterate over each query:\",\n    \"  If the query is of type 1, perform the swap operation on the permutation array.\",\n    \"  If the query is of type 2, calculate the result using the repeated assignment method and store the result.\",\n    \"Output the results for all second-type queries.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that the array is a rearrangement of numbers from 1 to n without repetition.\n\n    'query'\n    A query is an operation that needs to be performed on the permutation array. There are two types of queries: swap and repeated assignment.\n\n# [phrase showing quantity relationship]\n    'k times'\n    This indicates that the operation of assigning i = p[i-1] should be performed k times. In code, this can be implemented using a loop that iterates k times, updating the value of i in each iteration.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for handling the second-type query should be implemented simultaneously. Specifically, the repeated assignment operation should be performed in a loop, and the result should be stored immediately after the loop completes.\n\n# [edge case]\n    Input: 1 1\n           1\n           2 1 1\n    Output: 1\n    Explanation: With only one element, the permutation is [1]. The query asks for the result of assigning i = p[i-1] one time, which is simply 1.\n\n    Input: 3 3\n           3 1 2\n           2 1 2\n           1 1 3\n           2 1 2\n    Output: 2\n            3\n    Explanation: Initially, p = [3, 1, 2]. The first query results in 2 after two assignments. After swapping p_1 and p_3, p becomes [2, 1, 3]. The second query results in 3 after two assignments.\n\n    Input: 5 5\n           5 4 3 2 1\n           2 5 5\n           1 1 5\n           2 5 5\n           1 2 4\n           2 5 5\n    Output: 1\n            5\n            4\n    Explanation: The permutation changes with each swap, affecting the result of subsequent queries.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the queries and performing the operations as described will handle these cases correctly.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    queries = data[n+2:]\n    \n    results = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            index += 3\n            \n            # Perform the repeated assignment\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 80)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    queries = data[n+2:]\n    \n    results = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            index += 3\n            \n            # Perform the repeated assignment\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the permutation array and the list of queries.\",\n      \"details\": \"Read the first line to get n and q. Read the second line to get the permutation array p. Read the next q lines to get the list of queries.\"\n    },\n    {\n      \"description\": \"Implement the swap operation for the first type of query.\",\n      \"details\": \"For a query of type 1 x y, swap the elements at positions x and y in the permutation array p.\"\n    },\n    {\n      \"description\": \"Implement the transformation operation for the second type of query.\",\n      \"details\": \"For a query of type 2 i k, repeatedly apply the transformation i = p[i] k times and return the result.\"\n    },\n    {\n      \"description\": \"Efficiently handle multiple queries and output the results for the second type of queries.\",\n      \"details\": \"Iterate through the list of queries, perform the required operations, and store the results of the second type of queries for output.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, q, the permutation array p, and the list of queries.\",\n    \"Initialize a loop to iterate over each query.\",\n    \"For each query, check the type of query:\",\n    \"  - If the query is of type 1, perform the swap operation on the permutation array.\",\n    \"  - If the query is of type 2, perform the transformation operation and store the result.\",\n    \"After processing all queries, output the results of all second-type queries.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that the array is a rearrangement of numbers from 1 to n without repetition.\n\n# [phrase showing quantity relationship]\n    'k times': means that the transformation operation should be applied repeatedly k times. In code, this can be implemented using a loop that iterates k times, updating the index i each time.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for handling queries should be implemented simultaneously within a loop that iterates over each query. Specifically, the logic for checking the type of query and performing the corresponding operation (swap or transformation) should be handled in a single code block using an if-else statement.\n\n# [edge case] \n    Input: 1 1\n           1\n           2 1 1\n    Output: 1\n    Explanation: With only one element, the permutation is [1]. The query asks for the transformation of index 1 one time, which remains 1.\n\n    Input: 3 3\n           3 1 2\n           2 1 3\n           1 1 3\n           2 1 3\n    Output: 2\n            3\n    Explanation: Initially, the permutation is [3, 1, 2]. The first query transforms index 1 three times, resulting in 2. After swapping indices 1 and 3, the permutation becomes [2, 1, 3]. The second query transforms index 1 three times, resulting in 3.\n\n    Input: 5 5\n           5 4 3 2 1\n           2 5 5\n           1 1 5\n           2 5 5\n           1 2 4\n           2 5 5\n    Output: 1\n            5\n            1\n    Explanation: The permutation starts as [5, 4, 3, 2, 1]. The first query transforms index 5 five times, resulting in 1. After swapping indices 1 and 5, the permutation becomes [1, 4, 3, 2, 5]. The second query transforms index 5 five times, resulting in 5. After swapping indices 2", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    queries = data[n+2:]\n    \n    results = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            for _ in range(k):\n                i = p[i] - 1\n            results.append(p[i])\n            index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 78)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    queries = data[n+2:]\n    \n    results = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            for _ in range(k):\n                i = p[i] - 1\n            results.append(p[i])\n            index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the permutation array and the list of queries.\",\n      \"details\": \"Read the first line to get n and q. Read the second line to get the permutation array p. Read the next q lines to get the list of queries.\"\n    },\n    {\n      \"description\": \"Implement the swap operation for the first type of query.\",\n      \"details\": \"For a query of type 1 x y, swap the elements at indices x-1 and y-1 in the permutation array p.\"\n    },\n    {\n      \"description\": \"Implement the calculation for the second type of query.\",\n      \"details\": \"For a query of type 2 i k, repeatedly assign i = p[i-1] for k times and return the final value of i.\"\n    },\n    {\n      \"description\": \"Efficiently handle multiple queries and output results for second-type queries.\",\n      \"details\": \"Iterate through the list of queries, perform the required operations, and store results for second-type queries. Print each result on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize the permutation array p and the list of queries from the input.\",\n    \"Iterate through each query in the list:\",\n    \"  - If the query is of type 1, perform the swap operation on the permutation array.\",\n    \"  - If the query is of type 2, calculate the result by iterating k times and store the result.\",\n    \"Output the results for all second-type queries, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that each number in the range 1 to n appears exactly once in the array.\n\n    'query'\n    Explanation: A query is an operation that needs to be performed on the permutation. There are two types of queries: one that swaps two elements and another that calculates a value based on repeated assignments.\n\n# [phrase showing quantity relationship]\n    'k times': This indicates that the operation should be repeated k times. In the context of the second type of query, it means repeatedly assigning i = p[i-1] for k iterations.\n    Implementation: Use a loop to perform the assignment operation k times.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for handling each query should be implemented in a loop that processes each query one by one. The swap operation and the calculation for the second type of query are distinct and should be handled separately within the loop.\n\n# [edge case]\n    1. Input: 1 1\n       Output: 1\n       Explanation: With only one element, any swap operation is irrelevant, and the second type of query will always return the single element itself.\n\n    2. Input: 5 1\n       Output: 5\n       Explanation: If k is 1, the second type of query will return the element at the initial position without any changes.\n\n    3. Input: 5 5\n       Output: 1\n       Explanation: If the permutation is a cycle of length n, after n operations, the element will return to its original position.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the queries and performing the operations as described will naturally handle these cases.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            # Perform the operation k times\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 79)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            # Perform the operation k times\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of elements n, number of queries q, the permutation array p, and the list of queries.\",\n      \"steps\": [\n        \"Read the first line to get n and q.\",\n        \"Read the second line to get the permutation array p.\",\n        \"Read the next q lines to get the list of queries.\"\n      ]\n    },\n    {\n      \"description\": \"Implement the logic to handle the first type of query (swap operation).\",\n      \"steps\": [\n        \"Identify the query type by checking the first integer t.\",\n        \"If t is 1, perform a swap operation between the elements at positions x and y in the permutation array p.\"\n      ]\n    },\n    {\n      \"description\": \"Implement the logic to handle the second type of query (iterative assignment operation).\",\n      \"steps\": [\n        \"Identify the query type by checking the first integer t.\",\n        \"If t is 2, perform the iterative assignment operation starting from index i, k times.\",\n        \"Track the index transformation by iteratively updating the index using the permutation array p.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each second-type query.\",\n      \"steps\": [\n        \"For each second-type query, after performing the iterative assignment, store the result.\",\n        \"Print each stored result on a new line.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, q, the permutation array p, and the list of queries.\",\n    \"Initialize a loop to process each query one by one.\",\n    \"For each query, determine the type of query (either swap or iterative assignment).\",\n    \"If the query is a swap operation, update the permutation array accordingly.\",\n    \"If the query is an iterative assignment, compute the result by iterating k times starting from index i.\",\n    \"Store the result of each second-type query.\",\n    \"After processing all queries, output the results of all second-type queries.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that each number between 1 and n appears exactly once in the array.\n\n# [phrase showing quantity relationship]\n    'k times': means that the operation should be performed k iterations starting from the given index i.\n    Implementation: Use a loop to iterate k times, updating the index i using the permutation array p.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for handling the second-type query should be implemented simultaneously:\n    \"If t is 2, perform the iterative assignment operation starting from index i, k times.\"\n    \"Track the index transformation by iteratively updating the index using the permutation array p.\"\n    This can be done by using a loop to update the index i k times and then storing the result.\n\n# [edge case] \n    Input: 1 1\n           1\n           2 1 1\n    Output: 1\n    Explanation: With only one element, the permutation is [1]. The query asks for the result of one iteration starting from index 1, which remains 1.\n\n    Input: 3 3\n           3 1 2\n           2 1 2\n           1 1 3\n           2 1 1\n    Output: 2\n            3\n    Explanation: Initially, the permutation is [3, 1, 2]. The first query results in 2 after two iterations starting from index 1. After swapping elements at positions 1 and 3, the permutation becomes [2, 1, 3]. The second query results in 3 after one iteration starting from index 1.\n\n    Input: 5 1\n           5 4 3 2 1\n           2 5 5\n    Output: 1\n    Explanation: The permutation is [5, 4, 3, 2, 1]. The query asks for the result of five iterations starting from index 5, which results in 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating k times starting from index i will handle these cases correctly.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            current_index = i\n            for _ in range(k):\n                current_index = p[current_index] - 1\n            \n            results.append(p[current_index])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 79)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            current_index = i\n            for _ in range(k):\n                current_index = p[current_index] - 1\n            \n            results.append(p[current_index])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the permutation array and the list of queries.\",\n      \"details\": \"Read the first line to get n and q. Read the second line to get the permutation array p. Read the next q lines to get the queries.\"\n    },\n    {\n      \"description\": \"Implement the swap operation for the first type of query.\",\n      \"details\": \"For a query of type 1 x y, swap the elements at positions x and y in the permutation array p.\"\n    },\n    {\n      \"description\": \"Implement the calculation for the second type of query.\",\n      \"details\": \"For a query of type 2 i k, repeatedly assign i = p_i for k times and return the final value.\"\n    },\n    {\n      \"description\": \"Optimize the solution to handle large input sizes efficiently.\",\n      \"details\": \"Consider using efficient data structures or algorithms to minimize time complexity, especially for the second type of query.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, q, the permutation array p, and the list of queries.\",\n    \"Initialize a loop to process each query one by one.\",\n    \"For each query, check the type:\",\n    \"  - If the query is of type 1, perform the swap operation on the permutation array.\",\n    \"  - If the query is of type 2, calculate the result by iterating k times to find the final value of i.\",\n    \"Store the results of type 2 queries.\",\n    \"Output the results of all type 2 queries in the order they were received.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that each number in the range 1 to n appears exactly once in the array.\n\n    'query'\n    Explanation: A query is an operation that needs to be performed on the permutation. There are two types of queries: one that swaps elements and another that calculates a value based on repeated assignments.\n\n# [phrase showing quantity relationship]\n    'k times'\n    Explanation: In the second type of query, the operation i = p_i is performed k times. This means that the value of i is updated k times by assigning it the value at the current index i in the permutation array.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for handling each query should be implemented in a loop that processes each query one by one. The logic for type 1 and type 2 queries should be handled in separate conditional blocks (if-else statements) within this loop.\n\n# [edge case]\n    1. Input: 1 1\n       Output: 1\n       Explanation: With only one element, any swap operation is redundant, and the only second-type query will return the element itself.\n\n    2. Input: 5 1\n       Output: 5\n       Explanation: If the permutation is already sorted in ascending order, any second-type query with k = 1 will return the element itself.\n\n    3. Input: 5 5\n       Output: 5\n       Explanation: If k is equal to the length of the permutation, the result will be the element at the position after k iterations, which could be the same as the starting element if the permutation is cyclic.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where k is very large or when the permutation is cyclic. This can be optimized by recognizing cycles in the permutation to avoid unnecessary iterations.\n    \n    ```python\n    def handle_query_type_2(p, i, k):\n        visited = set()\n        while k > 0 and i not in visited:\n            visited.add(i)\n            i = p[i - 1]\n            k -= 1\n        return i\n    ```\n\nYES", "Round_0": {"code": "def handle_query_type_2(p, i, k):\n    visited = set()\n    while k > 0 and i not in visited:\n        visited.add(i)\n        i = p[i - 1]\n        k -= 1\n    return i\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    p = list(map(int, data[index:index + n]))\n    index += n\n    \n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        x = int(data[index + 1])\n        y = int(data[index + 2])\n        index += 3\n        \n        if t == 1:\n            # Swap operation\n            p[x - 1], p[y - 1] = p[y - 1], p[x - 1]\n        elif t == 2:\n            # Calculate operation\n            result = handle_query_type_2(p, x, y)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 85)"}, "Round_1": {"code": "def handle_query_type_2(p, i, k):\n    visited = set()\n    while k > 0 and i not in visited:\n        visited.add(i)\n        i = p[i - 1]\n        k -= 1\n    return i\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    p = list(map(int, data[index:index + n]))\n    index += n\n    \n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        x = int(data[index + 1])\n        y = int(data[index + 2])\n        index += 3\n        \n        if t == 1:\n            # Swap operation\n            p[x - 1], p[y - 1] = p[y - 1], p[x - 1]\n        elif t == 2:\n            # Calculate operation\n            result = handle_query_type_2(p, x, y)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the permutation array and the list of queries.\",\n      \"details\": \"Read the first line to get n and q. Read the second line to get the permutation array p. Read the next q lines to get the queries.\"\n    },\n    {\n      \"description\": \"Implement the swap operation for the first type of query.\",\n      \"details\": \"For a query of type 1 x y, swap the elements at indices x-1 and y-1 in the permutation array p.\"\n    },\n    {\n      \"description\": \"Implement the transformation operation for the second type of query.\",\n      \"details\": \"For a query of type 2 i k, repeatedly apply the transformation i = p[i-1] for k times and return the final value.\"\n    },\n    {\n      \"description\": \"Efficiently handle multiple queries and output results for second-type queries.\",\n      \"details\": \"Iterate through the list of queries, apply the appropriate operation based on the query type, and store results for second-type queries.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize the permutation array p from the input.\",\n    \"Iterate through each query:\",\n    \"  - If the query is of type 1, perform the swap operation on the permutation array.\",\n    \"  - If the query is of type 2, perform the transformation operation and store the result.\",\n    \"Output the results for all second-type queries.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that every integer between 1 and n appears exactly once in the array.\n\n# [phrase showing quantity relationship]\n    'n elements': indicates the length of the permutation array, which is equal to n.\n    'k times': indicates the number of times the transformation i = p[i-1] should be applied in the second type of query.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for handling queries should be implemented simultaneously within a loop that processes each query. Specifically, the operations for type 1 and type 2 queries should be handled in the same iteration of the loop, using an if-else statement to differentiate between query types.\n\n# [edge case] \n    Input: 1 1\n           1\n           2 1 1\n    Output: 1\n    Explanation: With only one element, the permutation is [1]. The query asks for the transformation of index 1 one time, which results in 1.\n\n    Input: 2 2\n           1 2\n           1 1 2\n           2 1 1\n    Output: 2\n    Explanation: After swapping elements at indices 1 and 2, the permutation becomes [2, 1]. The query asks for the transformation of index 1 one time, which results in 2.\n\n    Input: 3 3\n           3 1 2\n           2 1 2\n           1 1 3\n           2 1 1\n    Output: 1\n    Explanation: The first query transforms index 1 twice, resulting in 1. After swapping indices 1 and 3, the permutation becomes [2, 1, 3]. The final query transforms index 1 one time, resulting in 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through queries and applying transformations or swaps as specified will naturally handle these cases.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    queries = data[n+2:]\n    \n    result = []\n    index = 0\n    \n    for _ in range(q):\n        t = int(queries[index])\n        if t == 1:\n            x = int(queries[index+1]) - 1\n            y = int(queries[index+2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(queries[index+1]) - 1\n            k = int(queries[index+2])\n            for _ in range(k):\n                i = p[i] - 1\n            result.append(p[i])\n            index += 3\n    \n    for res in result:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the permutation array and the list of queries.\",\n      \"details\": \"Read the first line to get n and q. Read the second line to get the permutation array p. Read the next q lines to get the list of queries.\"\n    },\n    {\n      \"description\": \"Implement a function to handle the first type of query (swap operation).\",\n      \"details\": \"For a query of type 1 x y, swap the elements at indices x-1 and y-1 in the permutation array p.\"\n    },\n    {\n      \"description\": \"Implement a function to handle the second type of query (iterative assignment).\",\n      \"details\": \"For a query of type 2 i k, iteratively assign i = p[i-1] for k times and return the final value of i.\"\n    },\n    {\n      \"description\": \"Efficiently process each query and store the results for second-type queries.\",\n      \"details\": \"Iterate over each query, apply the appropriate function based on the query type, and store the result for type 2 queries.\"\n    },\n    {\n      \"description\": \"Output the results for all second-type queries.\",\n      \"details\": \"Print each result from the stored results of type 2 queries on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, q, the permutation array p, and the list of queries.\",\n    \"Define a function to swap elements in the permutation array for type 1 queries.\",\n    \"Define a function to compute the result of iterative assignments for type 2 queries.\",\n    \"Iterate over each query, apply the appropriate function, and store results for type 2 queries.\",\n    \"Output the results for all type 2 queries, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that the array is a rearrangement of the numbers from 1 to n.\n\n    'query'\n    Explanation: A query is an operation that needs to be performed on the permutation. There are two types of queries: one that swaps elements and another that performs iterative assignments.\n\n# [phrase showing quantity relationship]\n    'n elements': Refers to the number of elements in the permutation, which is equal to the length of the array.\n    'k times': Refers to the number of times the iterative assignment should be performed in the second type of query.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for handling the queries should be implemented in a loop where each query is processed one by one. The swap operation and the iterative assignment are distinct operations and should be handled separately within the loop.\n\n# [edge case]\n    1. Input: 1 1\n       Output: 1\n       Explanation: With only one element, any swap operation is redundant, and any iterative assignment will always return the same element.\n       \n    2. Input: 5 1\n       Output: 5\n       Explanation: If k is 1, the iterative assignment will return the element at the initial position without any further changes.\n       \n    3. Input: 5 5\n       Output: 5\n       Explanation: If k equals the length of the permutation, the iterative assignment will cycle through the permutation and return the element at the initial position.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the queries and applying the operations will naturally handle these cases.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            for _ in range(k):\n                i = p[i] - 1\n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 76)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            for _ in range(k):\n                i = p[i] - 1\n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the permutation array and the list of queries.\",\n      \"details\": \"Read the first line to get n and q. Read the second line to get the permutation array p. Read the next q lines to get the queries.\"\n    },\n    {\n      \"description\": \"Implement the swap operation for the first type of query.\",\n      \"details\": \"For a query of type 1 x y, swap the elements at indices x-1 and y-1 in the permutation array p.\"\n    },\n    {\n      \"description\": \"Implement the calculation for the second type of query.\",\n      \"details\": \"For a query of type 2 i k, repeatedly assign i = p[i-1] for k times and return the final value of i.\"\n    },\n    {\n      \"description\": \"Optimize the solution to handle large input sizes efficiently.\",\n      \"details\": \"Consider using efficient data structures or algorithms to minimize time complexity, especially for the second type of query.\"\n    },\n    {\n      \"description\": \"Output the results for each second-type query.\",\n      \"details\": \"Collect the results of all second-type queries and print each result on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract n, q, the permutation array p, and the list of queries.\",\n    \"Initialize a loop to process each query.\",\n    \"For each query, check the type:\",\n    \"  - If type 1, perform the swap operation on the permutation array.\",\n    \"  - If type 2, calculate the result by iterating k times as described and store the result.\",\n    \"After processing all queries, output the results for each second-type query.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. This means that each number from 1 to n appears exactly once in the array, ensuring no duplicates or missing numbers.\n\n# [phrase showing quantity relationship]\n    'at least one second-type query'\n    Explanation: This means that among the queries provided, there is guaranteed to be at least one query of type 2. This ensures that the output will always have at least one result to print.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for processing each query should be considered simultaneously within a loop that iterates over the queries. Specifically, the logic for determining the type of query and executing the corresponding operation (swap or calculation) should be handled in a single code block using an if-else statement.\n\n# [edge case]\n    1. Input: 1 1\n       Output: 1\n       Explanation: With n = 1, the permutation is [1]. Any query of type 2 will always return 1, as there is only one element.\n       \n    2. Input: 5 1\n       Output: 5\n       Explanation: If the permutation is [5, 4, 3, 2, 1] and the query is of type 2 with i = 5 and k = 1, the output will be 5, as p[5] = 5.\n       \n    3. Input: 3 3\n       Output: 3\n       Explanation: If the permutation is [3, 1, 2] and the query is of type 2 with i = 3 and k = 1, the output will be 2, as p[3] = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the queries and handling each type appropriately will naturally cover these scenarios.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            # Perform the operation i = p[i] k times\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 79)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    q = int(data[1])\n    \n    p = list(map(int, data[2:n+2]))\n    \n    index = n + 2\n    results = []\n    \n    for _ in range(q):\n        t = int(data[index])\n        if t == 1:\n            x = int(data[index + 1]) - 1\n            y = int(data[index + 2]) - 1\n            p[x], p[y] = p[y], p[x]\n            index += 3\n        elif t == 2:\n            i = int(data[index + 1]) - 1\n            k = int(data[index + 2])\n            index += 3\n            \n            # Perform the operation i = p[i] k times\n            for _ in range(k):\n                i = p[i] - 1\n            \n            results.append(p[i])\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 2, "round": 715, "prompt": "You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times.\n\nYour task is to efficiently handle each query and return the expected results promptly. Make sure to consider the constraints and optimize your solution accordingly.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.", "examples": "\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 182}
