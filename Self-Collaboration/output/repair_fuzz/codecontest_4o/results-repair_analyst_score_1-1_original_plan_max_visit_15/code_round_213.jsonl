{"name": "1618_E. Singers' Tour", "description": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "tags": ["constructive algorithms", "math"], "difficulty": 11, "id": 1618, "sample_io": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n"]}], "test_list": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n4\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n4\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n2\n3\n1 2 0\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n2\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n19 16 19\n1\n1\n3\n1 0 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 4 2\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 105\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 132 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 124\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n2\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n2\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 19 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 0\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 129 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 155 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n62 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 16 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 6\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 64 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n4 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 2\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 2\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 -1\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 138 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 21 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 240 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 0 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 112 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n2\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n2\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 20\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 24\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n0 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 15 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 104 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 38 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n22 22 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 47 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n3 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n0 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 2 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 28\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 5 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 144 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 0 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 2\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 12 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 -1 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 1 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 57 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 4\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n13 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 1 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n2\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 27 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 136 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 64 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n2 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 141 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}], "task_id": "codecontest/136", "repair_prompt": ["n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Each concert lasts a strictly positive amount of time.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. The arrangement of towns is unique in this order where each town follows the previous one in sequence. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Each concert lasts a strictly positive amount of time.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "n towns are arranged in a circle sequentially with the towns numbered from 1 to n in clockwise order, where in the i-th town, a singer lives with a repertoire of a_i minutes for each i \u2208 [1, n]. Each singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town, while also getting inspired in each town to come up with a song lasting a_i minutes to add to his repertoire for future performances. Hence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Each concert lasts a strictly positive amount of time.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        # Check if the total sum of b is divisible by the sum of the first n natural numbers\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "completions": ["def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # If there's only one town, the answer is straightforward\n            results.append(\"YES\")\n            results.append(str(b[0]))\n            continue\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if the total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference between b[i] and b[i-1]\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            a[i] = (total_a - diff) // n\n            \n            # Check if a[i] is a positive integer\n            if a[i] <= 0 or (total_a - diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(b)\n        \n        # The sum of b must be divisible by the sum of the first n natural numbers\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (total_a_sum + diff) % n != 0 or (total_a_sum + diff) // n <= 0:\n                possible = False\n                break\n            a[i] = (total_a_sum + diff) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff + total_a) % n != 0 or (diff + total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff + total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # Edge case: only one town\n            if b[0] > 0:\n                results.append(\"YES\")\n                results.append(f\"{b[0]}\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of a\n        sum_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            a[i] = (sum_a - diff) // n\n            \n            # Check if a[i] is a valid positive integer\n            if a[i] <= 0 or (sum_a - diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "def handle_edge_cases(n, b):\n    if n == 1:\n        return \"YES\\n\" + str(b[0]) if b[0] > 0 else \"NO\"\n    if all(x == b[0] for x in b):\n        return \"YES\\n\" + \" \".join([\"1\"] * n) if b[0] % n == 0 else \"NO\"\n    return None\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Check for edge cases\n        edge_case_result = handle_edge_cases(n, b)\n        if edge_case_result:\n            results.append(edge_case_result)\n            continue\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a_i\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        # Try to reconstruct the sequence a\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev = (i - 1 + n) % n\n            diff = b[i] - b[prev]\n            if (diff + total_a) % n != 0 or (diff + total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff + total_a) // n\n        \n        if possible:\n            results.append(\"YES\\n\" + \" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # Special case for n = 1\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            a[i] = (total_a + diff) // n\n            \n            # Check if a[i] is a positive integer\n            if a[i] <= 0 or (total_a + diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        sum_n = n * (n + 1) // 2\n        \n        if total_b % sum_n != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // sum_n\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (total_a + diff) % n != 0 or (total_a + diff) // n <= 0:\n                possible = False\n                break\n            a[i] = (total_a + diff) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(b)\n        \n        # The sum of b must be divisible by the sum of the first n natural numbers\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference between consecutive b values\n            diff = b[i] - b[i - 1]\n            # Check if the difference can be evenly distributed among the singers\n            if (diff - total_a_sum) % n != 0 or (diff - total_a_sum) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a_sum) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    solve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        # Check if the total sum of b is divisible by n * (n + 1) // 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference between consecutive b values\n            diff = b[i] - b[i - 1]\n            # Check if the difference minus total_a is divisible by n and positive\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        # Check if the total sum of b is divisible by the sum of the first n natural numbers\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"For each test case, read the array b, which contains the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, analyze the array b to check if a valid sequence a can be reconstructed.\",\n        \"Consider the constraints that each concert duration must be strictly positive.\",\n        \"Check if the sum of b values is divisible by n, as each singer contributes equally to the total duration across all towns.\"\n      ]\n    },\n    {\n      \"description\": \"Reconstruct the sequence a if possible.\",\n      \"steps\": [\n        \"If a valid sequence is possible, calculate the initial repertoire durations a for each singer.\",\n        \"Ensure that the calculated sequence satisfies the condition that each concert duration is strictly positive.\",\n        \"If multiple sequences are possible, choose any valid sequence.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, if a valid sequence a is found, print 'YES' followed by the sequence.\",\n        \"If no valid sequence exists, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, check if a valid sequence of initial repertoire durations exists.\",\n    \"If a valid sequence exists, reconstruct the sequence and ensure it meets the requirements.\",\n    \"Output the results for each test case, indicating whether a valid sequence was found.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around, and the last town is followed by the first town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The time each singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    'exactly one concert'\n    Explanation: Each singer performs exactly once in each town.\n\n    '2 \u22c5 a_i, ..., n \u22c5 a_i'\n    Explanation: The concert duration increases by multiplying the initial repertoire by the number of towns visited so far.\n\n# [degree adverb]\n    'strictly positive'\n    Explanation: Each concert duration must be greater than zero, meaning no zero or negative durations are allowed.\n\n# [code logic]\n    The steps in the plan are mostly sequential, but the check for divisibility by n and the reconstruction of sequence a should be considered together. This is because the divisibility check is a prerequisite for determining if a valid sequence can be reconstructed.\n\n# [edge case]\n    1. n = 1, b = [1] = YES, 1\n       Explanation: With only one town, the singer's repertoire must match the concert duration exactly.\n    2. n = 2, b = [2, 2] = YES, 1 1\n       Explanation: Each singer performs for 1 minute in each town, satisfying the condition.\n    3. n = 3, b = [3, 3, 3] = NO\n       Explanation: The sum of b is 9, which is not divisible by 3, making it impossible to distribute equally.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    if sum(b) % n != 0:\n        print(\"NO\")\n    else:\n        # Proceed with reconstructing sequence a\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        # Check if the total sum of b is divisible by the sum of the first n natural numbers\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of towns.\",\n        \"Read the array b of n integers, representing the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence a exists for each test case.\",\n      \"steps\": [\n        \"For each test case, initialize an array a of size n to store the initial duration of repertoire for each singer.\",\n        \"Iterate over each town and calculate the possible values for a based on the given b values.\",\n        \"Check if the calculated values for a are valid (i.e., all values are positive integers).\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If a valid sequence a is found, print 'YES' followed by the sequence a.\",\n        \"If no valid sequence a can be found, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, attempt to reconstruct a valid sequence a that satisfies the given conditions.\",\n    \"For each town, calculate the possible initial repertoire durations for each singer.\",\n    \"Verify if the calculated sequence a is valid (all values are positive integers).\",\n    \"Output 'YES' and the sequence a if valid, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the concerts.\n    'concert': refers to the performance given by each singer in each town, which increases in duration as they visit more towns.\n    'sequence': refers to the order of initial song durations that need to be reconstructed.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration doubles as the singer moves to the next town.\n    'k + 2 \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to the k-th town.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    'strictly positive': means each concert duration must be greater than zero.\n\n# [code logic]\n    The steps for parsing input and determining the sequence should be implemented simultaneously for efficiency:\n    - Parse the input and initialize the array a.\n    - Calculate possible values for a based on b values.\n    - Check validity of a in one loop to minimize complexity.\n\n# [edge case]\n    Test case with minimum values:\n    1\n    1\n    1\n    Expected output: YES 1\n    Explanation: With only one town and one singer, the concert duration matches the initial repertoire.\n\n    Test case with impossible sequence:\n    1\n    2\n    1 1\n    Expected output: NO\n    Explanation: It's impossible to have a valid sequence where both towns have a concert duration of 1.\n\n    Test case with large values:\n    1\n    3\n    1000000000 1000000000 1000000000\n    Expected output: YES (any valid sequence)\n    Explanation: Large values allow multiple valid sequences, but they must be positive integers.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where no valid sequence can be found.\n    - Implement checks to ensure all calculated values for a are positive integers.\n    - If any value is non-positive, output 'NO'.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # If there's only one town, the answer is straightforward\n            results.append(\"YES\")\n            results.append(str(b[0]))\n            continue\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if the total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference between b[i] and b[i-1]\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            a[i] = (total_a - diff) // n\n            \n            # Check if a[i] is a positive integer\n            if a[i] <= 0 or (total_a - diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"Read the array b of n integers, which represents the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, check if the sum of the array b is divisible by n.\",\n        \"If not divisible, output 'NO' for that test case.\",\n        \"If divisible, proceed to reconstruct the sequence a.\"\n      ]\n    },\n    {\n      \"description\": \"Reconstruct the sequence a of initial repertoire durations if possible.\",\n      \"steps\": [\n        \"Calculate the total sum of the array b.\",\n        \"Divide the total sum by n to find the sum of initial repertoire durations.\",\n        \"Use the properties of the problem to reconstruct a valid sequence a.\",\n        \"Ensure each element of a is a positive integer and satisfies the conditions given in the problem.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, if a valid sequence a is found, output 'YES' followed by the sequence a.\",\n        \"If no valid sequence is found, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, check if the sum of the array b is divisible by n.\",\n    \"If divisible, attempt to reconstruct the sequence a using the properties of the problem.\",\n    \"Output 'YES' and the sequence a if reconstruction is successful, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The duration of concerts increases as the singer moves from town to town, starting from their own town.\n\n# [phrase showing quantity relationship]\n    'exactly one concert'\n    Explanation: Each singer performs one concert in each town they visit.\n\n    'k + 2'\n    Explanation: The concert duration increases by a factor of (k + 2) as the singer moves to the next town.\n\n# [degree adverb]\n    'strictly positive'\n    Explanation: Each concert duration must be greater than zero, meaning no concert can have a duration of zero or negative.\n\n# [code logic]\n    The steps in the plan related to checking divisibility and reconstructing the sequence should be considered simultaneously. Specifically:\n    - \"Check if the sum of the array b is divisible by n\" and \"Reconstruct the sequence a if possible\" should be closely linked because the divisibility check directly influences the possibility of reconstruction.\n\n# [edge case]\n    Edge Case 1: n = 1, b = [1]\n    Expected Output: YES, 1\n    Explanation: With only one town, the singer's repertoire must match the concert duration exactly.\n\n    Edge Case 2: n = 2, b = [2, 2]\n    Expected Output: YES, 1 1\n    Explanation: Each singer can have a repertoire of 1, leading to concert durations of 1 and 2 in each town.\n\n    Edge Case 3: n = 3, b = [3, 3, 3]\n    Expected Output: NO\n    Explanation: It's impossible to distribute the concert durations such that each town's total matches the given b values.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the sum of b is not divisible by n or when reconstruction is not possible.\n    ```\n    if sum(b) % n != 0:\n        print(\"NO\")\n    else:\n        # Attempt to reconstruct sequence a\n        # Additional logic to ensure each a_i is positive and satisfies the conditions\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(b)\n        \n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (total_a_sum + diff) % n != 0 or (total_a_sum + diff) // n <= 0:\n                possible = False\n                break\n            a[i] = (total_a_sum + diff) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 91)"}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(b)\n        \n        # The sum of b must be divisible by the sum of the first n natural numbers\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (total_a_sum + diff) % n != 0 or (total_a_sum + diff) // n <= 0:\n                possible = False\n                break\n            a[i] = (total_a_sum + diff) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the number of towns and the total duration of concerts in each town.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of towns.\",\n        \"Read the array b of n integers, representing the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"For each test case, determine if a valid sequence a exists that satisfies the conditions given the array b.\",\n      \"steps\": [\n        \"Initialize an array a of size n to store the initial duration of repertoire for each singer.\",\n        \"Iterate over each town and calculate the possible values for a_i based on the given b array.\",\n        \"Check if the calculated values for a_i are valid (i.e., strictly positive).\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"If a valid sequence a is found, print 'YES' followed by the sequence a.\",\n        \"If no valid sequence exists, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, attempt to reconstruct a valid sequence a that satisfies the conditions using the given b array.\",\n    \"Check the validity of the reconstructed sequence a.\",\n    \"Output 'YES' and the sequence a if valid, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'concert duration calculation'\n    Explanation: Each singer's concert duration in a town is a multiple of their initial repertoire, increasing as they move to the next town.\n\n# [phrase showing quantity relationship]\n    'one integer t (1 \u2264 t \u2264 10^3)': The number of test cases is between 1 and 1000.\n    'n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9})': Each concert duration is between 1 and 1 billion.\n    'sum of n over all test cases does not exceed 2 \u22c5 10^5': The total number of towns across all test cases is at most 200,000.\n\n# [degree adverb]\n    'strictly positive': Each concert duration must be greater than zero.\n\n# [code logic]\n    The steps in the plan for parsing input and outputting results can be implemented simultaneously for efficiency:\n    - \"Read the integer t, the number of test cases.\"\n    - \"For each test case, read the integer n, the number of towns.\"\n    - \"Read the array b of n integers, representing the total duration of concerts in each town.\"\n    These can be handled in a single loop that processes each test case.\n\n# [edge case]\n    1. Test case with n = 1 and b_1 = 1: \n       Expected output: YES, 1\n       Explanation: With only one town and a concert duration of 1, the initial repertoire must be 1.\n       \n    2. Test case with n = 2 and b_1 = b_2 = 1:\n       Expected output: NO\n       Explanation: It's impossible to have two towns with both having a total concert duration of 1 with strictly positive initial repertoires.\n       \n    3. Test case with n = 3 and b_1 = b_2 = b_3 = 3:\n       Expected output: YES, 1 1 1\n       Explanation: Each singer can have an initial repertoire of 1, leading to concert durations of 1, 2, and 3 in each town.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Specifically, we need to ensure that the calculated sequence", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff + total_a) % n != 0 or (diff + total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff + total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 89)"}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff + total_a) % n != 0 or (diff + total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff + total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of towns.\",\n        \"Read the array b of n integers, representing the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence a exists for each test case.\",\n      \"steps\": [\n        \"For each test case, initialize an array a of size n to store the initial duration of repertoire for each singer.\",\n        \"Iterate over each town and calculate the possible values for a based on the given b values.\",\n        \"Check if the calculated values for a are valid (i.e., all values are positive integers).\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"If a valid sequence a is found, print 'YES' followed by the sequence a.\",\n        \"If no valid sequence a can be found, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, attempt to reconstruct a valid sequence a that satisfies the given conditions.\",\n    \"For each town, calculate the initial repertoire duration for each singer and verify its validity.\",\n    \"Output 'YES' and the sequence a if a valid sequence is found, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after the last town back to the first.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    'exactly one concert'\n    Explanation: Each singer performs exactly once in each town, which means the number of concerts equals the number of towns.\n\n    'k + 2'\n    Explanation: This indicates the multiplier for the concert duration as the singer moves to the next town. It starts from 1 and increases by 1 for each subsequent town.\n\n# [degree adverb]\n    'strictly positive'\n    Explanation: Each concert duration must be greater than zero, meaning no concert can have a duration of zero or negative.\n\n# [code logic]\n    The steps for parsing input and determining the sequence a should be implemented simultaneously for each test case. This involves reading the input, calculating possible values for a, and checking their validity in one cohesive block for each test case.\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: With only one town and a concert duration of 1, the only possible value for a_1 is 1, which is valid.\n    \n    Test case with n = 2 and b_1 = b_2 = 2\n    Explanation: Each singer must perform for 1 minute in each town, making a valid sequence a = [1, 1].\n\n    Test case with n = 3 and b_1 = b_2 = b_3 = 3\n    Explanation: Each singer must perform for 1 minute in each town, making a valid sequence a = [1, 1, 1].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where n = 1 or all b_i are equal.\n    ```\n    if n == 1:\n        if b[0] > 0:\n            print(\"YES\")\n            print(b[0])\n        else:\n            print(\"NO\")\n    else:\n        # Original logic for handling other cases\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # Edge case: only one town\n            if b[0] > 0:\n                results.append(\"YES\")\n                results.append(f\"{b[0]}\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of a\n        sum_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            a[i] = (sum_a - diff) // n\n            \n            # Check if a[i] is a valid positive integer\n            if a[i] <= 0 or (sum_a - diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # Edge case: only one town\n            if b[0] > 0:\n                results.append(\"YES\")\n                results.append(f\"{b[0]}\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of a\n        sum_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            a[i] = (sum_a - diff) // n\n            \n            # Check if a[i] is a valid positive integer\n            if a[i] <= 0 or (sum_a - diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"Read the array b, which contains the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, analyze the array b to check if a sequence a can be reconstructed.\",\n        \"Consider the constraints that each concert duration must be strictly positive.\",\n        \"Check if the sum of b_i values can be evenly distributed among n singers with increasing concert durations.\"\n      ]\n    },\n    {\n      \"description\": \"Reconstruct the sequence a if possible.\",\n      \"steps\": [\n        \"If a valid sequence is possible, calculate the initial repertoire durations a_i for each singer.\",\n        \"Ensure that the calculated sequence satisfies the condition that each concert duration is strictly positive.\",\n        \"If multiple sequences are possible, choose any valid sequence.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, if a valid sequence a is found, print 'YES' followed by the sequence.\",\n        \"If no valid sequence is possible, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, analyze the array b to determine if a valid sequence a can be reconstructed.\",\n    \"If a valid sequence is possible, reconstruct the sequence a.\",\n    \"Output 'YES' and the sequence a if possible, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after the last town back to the first.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The time each singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    'exactly one concert'\n    Explanation: Each singer performs once in each town, which implies a fixed number of performances per singer.\n\n    'n towns'\n    Explanation: The number of towns is equal to the number of singers, indicating a one-to-one relationship.\n\n# [degree adverb]\n    'strictly positive'\n    Explanation: Each concert duration must be greater than zero, meaning no concert can have a duration of zero or negative.\n\n# [code logic]\n    The steps in the plan are mostly sequential, but the analysis of array b and reconstruction of sequence a should be considered together. This is because determining if a sequence is possible and reconstructing it are closely related tasks.\n\n# [edge case]\n    1. n = 1, b = [1] = YES, 1\n    Explanation: With only one town and one singer, the concert duration must match the repertoire, which is possible.\n\n    2. n = 3, b = [1, 1, 1] = NO\n    Explanation: The total concert durations are too low to distribute among three singers with strictly positive durations.\n\n    3. n = 4, b = [4, 4, 4, 4] = YES, 1 1 1 1\n    Explanation: Each singer can have an initial repertoire of 1, and the concerts can be distributed evenly.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def handle_edge_cases(n, b):\n        if n == 1:\n            return \"YES\\n\" + str(b[0]) if b[0] > 0 else \"NO\"\n        if all(x == b[0] for x in b):\n            return \"YES\\n\" + \" \".join([\"1\"] * n) if b[0] % n == 0 else \"NO\"\n        return None\n    ```\n\nYES", "Round_0": {"code": "def handle_edge_cases(n, b):\n    if n == 1:\n        return \"YES\\n\" + str(b[0]) if b[0] > 0 else \"NO\"\n    if all(x == b[0] for x in b):\n        return \"YES\\n\" + \" \".join([\"1\"] * n) if b[0] % n == 0 else \"NO\"\n    return None\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Check for edge cases\n        edge_case_result = handle_edge_cases(n, b)\n        if edge_case_result:\n            results.append(edge_case_result)\n            continue\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a_i\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        # Try to reconstruct the sequence a\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev = (i - 1 + n) % n\n            diff = b[i] - b[prev]\n            if (diff + total_a) % n != 0 or (diff + total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff + total_a) // n\n        \n        if possible:\n            results.append(\"YES\\n\" + \" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 110)"}, "Round_1": {"code": "def handle_edge_cases(n, b):\n    if n == 1:\n        return \"YES\\n\" + str(b[0]) if b[0] > 0 else \"NO\"\n    if all(x == b[0] for x in b):\n        return \"YES\\n\" + \" \".join([\"1\"] * n) if b[0] % n == 0 else \"NO\"\n    return None\n\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Check for edge cases\n        edge_case_result = handle_edge_cases(n, b)\n        if edge_case_result:\n            results.append(edge_case_result)\n            continue\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a_i\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        # Try to reconstruct the sequence a\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev = (i - 1 + n) % n\n            diff = b[i] - b[prev]\n            if (diff + total_a) % n != 0 or (diff + total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff + total_a) // n\n        \n        if possible:\n            results.append(\"YES\\n\" + \" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of towns.\",\n        \"Read the array b of n integers, representing the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence a exists for each test case.\",\n      \"steps\": [\n        \"For each test case, initialize an array a of size n to store the initial duration of repertoire for each singer.\",\n        \"Iterate over each town and calculate the possible values for a based on the given b array.\",\n        \"Check if the calculated values for a are valid (i.e., all values are positive integers).\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If a valid sequence a is found, print 'YES' followed by the sequence a.\",\n        \"If no valid sequence a can be found, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, attempt to reconstruct a valid sequence a that satisfies the conditions given by the b array.\",\n    \"For each town, calculate the contribution of each singer to the total concert duration and derive the initial repertoire durations.\",\n    \"Check if the derived sequence a is valid (all positive integers).\",\n    \"Output 'YES' and the sequence a if valid, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town, continuing from the first town again.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the tour.\n\n    'concert duration'\n    Explanation: The total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    'exactly one concert'\n    Explanation: Each singer performs exactly once in each town, which means the number of concerts equals the number of towns.\n\n    '2 \u22c5 a_i, ..., n \u22c5 a_i'\n    Explanation: The concert duration increases linearly with each town visited, starting from a_i and increasing by a_i for each subsequent town.\n\n# [degree adverb]\n    'strictly positive'\n    Explanation: Each concert duration must be greater than zero, meaning no zero or negative durations are allowed.\n\n# [code logic]\n    The steps for parsing input and determining the sequence a should be implemented simultaneously for each test case. This involves reading the input, calculating possible values for a, and checking their validity in one cohesive block of code.\n\n# [edge case]\n    1. n = 1, b = [1] = YES, 1\n       Explanation: With only one town, the only possible value for a is the same as b, which is 1.\n    2. n = 3, b = [1, 1, 1] = NO\n       Explanation: It's impossible to have a positive integer a that satisfies the conditions for all towns.\n    3. n = 2, b = [2, 2] = YES, 1 1\n       Explanation: Each singer can have an initial repertoire of 1, leading to concert durations of 1 and 2 in each town.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the sequence a cannot be derived. Specifically, we need to check if the derived sequence a is valid (all positive integers) and handle cases where no valid sequence exists by outputting 'NO'.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # Special case for n = 1\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            a[i] = (total_a + diff) // n\n            \n            # Check if a[i] is a positive integer\n            if a[i] <= 0 or (total_a + diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"Read the array b, which contains the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, analyze the array b to check if a sequence a can be reconstructed.\",\n        \"Consider the constraints that each concert duration must be strictly positive.\",\n        \"Check if the sum of b values is divisible by the sum of the first n natural numbers (1 to n).\"\n      ]\n    },\n    {\n      \"description\": \"Reconstruct the sequence a if possible.\",\n      \"steps\": [\n        \"If a valid sequence is possible, calculate the initial repertoire durations a_i for each singer.\",\n        \"Ensure that the calculated sequence satisfies the condition that each concert duration is strictly positive.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"If a valid sequence a is found, output 'YES' followed by the sequence.\",\n        \"If no valid sequence exists, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, check if a valid sequence of initial repertoire durations exists.\",\n    \"If possible, reconstruct the sequence a and ensure it meets the requirements.\",\n    \"Output the results for each test case, indicating whether a valid sequence was found.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the collection of songs a singer has, which increases as they visit each town.\n    'concert duration': the time each singer performs in a town, which increases as they visit more towns.\n    Explanation: The requirement involves calculating the initial repertoire of each singer based on the total concert durations in each town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': indicates that the concert duration doubles as the singer moves to the next town.\n    '(k + 2) \u22c5 a_i': shows that the concert duration increases linearly with the number of towns visited.\n    Explanation: These phrases describe how the concert duration increases as the singer visits more towns. In code, this can be implemented using a loop that multiplies the initial repertoire by the number of towns visited plus one.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to checking the divisibility and reconstructing the sequence should be considered simultaneously. Specifically:\n    \"Check if the sum of b values is divisible by the sum of the first n natural numbers (1 to n).\"\n    \"Calculate the initial repertoire durations a_i for each singer.\"\n    These steps can be implemented in a single code block where the divisibility check is followed by the calculation of the sequence.\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: Output should be YES with a sequence of [1].\n    Explanation: With only one town and a concert duration of 1, the initial repertoire must be 1.\n    \n    Test case with n = 2 and b_1 = 3, b_2 = 3: Output should be NO.\n    Explanation: The sum of b values (6) is not divisible by the sum of the first 2 natural numbers (3), making it impossible to reconstruct a valid sequence.\n    \n    Test case with n = 3 and b_1 = 6, b_2 = 6, b_3 = 6: Output should be YES with a sequence of [2, 2, 2].\n    Explanation: Each singer starts with a repertoire of 2, and the concert durations match the total durations given.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to check the divisibility condition and ensure that the calculated sequence results in strictly positive concert durations.\n", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        sum_n = n * (n + 1) // 2\n        \n        if total_b % sum_n != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // sum_n\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (total_a + diff) % n != 0 or (total_a + diff) // n <= 0:\n                possible = False\n                break\n            a[i] = (total_a + diff) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read the integer n representing the number of towns.\",\n        \"Read the array b of n integers representing the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, check if the sum of the array b is divisible by n.\",\n        \"If not divisible, output 'NO' for that test case.\",\n        \"If divisible, proceed to reconstruct the sequence a.\"\n      ]\n    },\n    {\n      \"description\": \"Reconstruct the sequence a of initial repertoire durations if possible.\",\n      \"steps\": [\n        \"Calculate the total sum of the array b.\",\n        \"Divide the total sum by n to get the sum of initial durations for all singers.\",\n        \"Use the properties of the problem to distribute the total sum across the sequence a.\",\n        \"Ensure each a_i is a positive integer and satisfies the conditions given in the problem.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"If a valid sequence a is found, output 'YES' followed by the sequence a.\",\n        \"If no valid sequence is found, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, check if the sum of the array b is divisible by n.\",\n    \"If divisible, attempt to reconstruct the sequence a of initial repertoire durations.\",\n    \"Output 'YES' and the sequence a if reconstruction is successful, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the concerts.\n    'concert': refers to the performance given by the singer in each town, which increases in duration as they move from town to town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire duration.\n    '(k + 2) \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire duration as the singer moves to the k-th town.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire duration.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking divisibility and reconstructing the sequence should be considered simultaneously. If the sum of b is divisible by n, then proceed to reconstruct the sequence a. This can be implemented using an if-else statement to check divisibility and then attempt reconstruction.\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES, 1\n    Explanation: With only one town, the singer's repertoire must match the total concert duration, which is possible.\n    \n    Test case with n = 2 and b = [2, 2] = YES, 1 1\n    Explanation: Each singer can have a repertoire of 1 minute, resulting in concerts of 1 and 2 minutes in each town, matching the total duration.\n    \n    Test case with n = 3 and b = [3, 3, 3] = NO\n    Explanation: The sum of b is 9, which is divisible by 3, but no valid sequence a can be constructed where each concert duration is strictly positive.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    if sum(b) % n != 0:\n        print(\"NO\")\n    else:\n        # Attempt to reconstruct sequence a\n        total_sum = sum(b)\n        initial_sum = total_sum // n\n        # Logic to distribute initial_sum across sequence a ensuring positive integers\n        # If successful, print \"YES\" and sequence a, otherwise print \"NO\"\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(b)\n        \n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a_sum) % n != 0 or (diff - total_a_sum) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a_sum) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    solve()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 116)"}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(b)\n        \n        # The sum of b must be divisible by the sum of the first n natural numbers\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference between consecutive b values\n            diff = b[i] - b[i - 1]\n            # Check if the difference can be evenly distributed among the singers\n            if (diff - total_a_sum) % n != 0 or (diff - total_a_sum) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a_sum) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    solve()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"Read the array b of n integers, which represents the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, analyze the array b to check if a valid sequence a can be reconstructed.\",\n        \"Consider the constraints that each concert duration must be strictly positive.\",\n        \"Check if the sum of b values is divisible by n, as each singer contributes equally to the total duration across all towns.\"\n      ]\n    },\n    {\n      \"description\": \"Reconstruct the sequence a if possible.\",\n      \"steps\": [\n        \"If a valid sequence is possible, reconstruct the sequence a such that the sum of concerts in each town matches the given b values.\",\n        \"Ensure that the reconstructed sequence satisfies the condition that each concert duration is strictly positive.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, if a valid sequence a is found, print 'YES' followed by the sequence a.\",\n        \"If no valid sequence can be found, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, check if a valid sequence of initial repertoire durations exists.\",\n    \"If a valid sequence exists, reconstruct the sequence a.\",\n    \"Output 'YES' and the sequence a if possible, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around, and the last town is followed by the first town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The time each singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    'exactly one concert'\n    Explanation: Each singer performs exactly once in each town.\n\n    'strictly positive'\n    Explanation: Each concert duration must be greater than zero.\n\n    'sum of b values is divisible by n'\n    Explanation: This implies that the total concert durations across all towns must be evenly distributed among the singers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan are sequential and do not require simultaneous execution. Each step builds upon the previous one, especially in reconstructing the sequence a.\n\n# [edge case]\n    1. Test case with n = 1 and b = [1] = YES, 1\n       Explanation: With only one town and one singer, the concert duration matches the repertoire.\n       \n    2. Test case with n = 3 and b = [3, 3, 3] = NO\n       Explanation: If all b values are the same and not divisible by n, it's impossible to distribute the durations evenly.\n       \n    3. Test case with n = 2 and b = [2, 4] = YES, 1 2\n       Explanation: The first singer performs 1 minute in the first town and 2 minutes in the second town, while the second singer performs 2 minutes in the first town and 1 minute in the second town.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    if sum(b) % n != 0:\n        print(\"NO\")\n    else:\n        # Proceed with reconstructing the sequence a\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        # Check if the total sum of b is divisible by n * (n + 1) // 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference between consecutive b values\n            diff = b[i] - b[i - 1]\n            # Check if the difference minus total_a is divisible by n and positive\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        # Check if the total sum of b is divisible by n * (n + 1) // 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference between consecutive b values\n            diff = b[i] - b[i - 1]\n            # Check if the difference minus total_a is divisible by n and positive\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"For each test case, read the array b, which contains the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, analyze the array b to check if a valid sequence a can be reconstructed.\",\n        \"Consider the constraints that each concert duration must be strictly positive.\",\n        \"Check if the sum of b values is divisible by n, as each singer contributes equally to the total duration across all towns.\"\n      ]\n    },\n    {\n      \"description\": \"Reconstruct the sequence a if possible.\",\n      \"steps\": [\n        \"If a valid sequence is possible, calculate the initial repertoire durations a for each singer.\",\n        \"Ensure that the calculated sequence satisfies the condition that each concert duration is strictly positive.\",\n        \"If multiple sequences are possible, choose any valid sequence.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, if a valid sequence a is found, print 'YES' followed by the sequence.\",\n        \"If no valid sequence exists, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, check if a valid sequence of initial repertoire durations exists.\",\n    \"If a valid sequence exists, reconstruct the sequence and ensure it meets the requirements.\",\n    \"Output the results for each test case, indicating whether a valid sequence was found.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around, and the last town is followed by the first town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The time each singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    'exactly one concert'\n    Explanation: Each singer performs exactly once in each town.\n\n    '2 \u22c5 a_i, ..., n \u22c5 a_i'\n    Explanation: The concert duration increases by multiplying the initial repertoire by the number of towns visited so far.\n\n# [degree adverb]\n    'strictly positive'\n    Explanation: Each concert duration must be greater than zero, meaning no zero or negative durations are allowed.\n\n# [code logic]\n    The steps in the plan are mostly sequential, but the check for divisibility by n and the reconstruction of sequence a should be considered together. This is because the divisibility check is a prerequisite for determining if a valid sequence can be reconstructed.\n\n# [edge case]\n    1. n = 1, b = [1] = YES, 1\n       Explanation: With only one town, the singer's repertoire must match the concert duration exactly.\n    2. n = 2, b = [2, 2] = YES, 1 1\n       Explanation: Each singer performs for 1 minute in each town, satisfying the condition.\n    3. n = 3, b = [3, 3, 3] = NO\n       Explanation: The sum of b is 9, which is not divisible by 3, making it impossible to distribute equally.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    if sum(b) % n != 0:\n        print(\"NO\")\n    else:\n        # Proceed with reconstructing sequence a\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        # Check if the total sum of b is divisible by the sum of the first n natural numbers\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 213, "prompt": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Each concert lasts a strictly positive amount of time.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 45}
