{"name": "1598_D. Training Session", "description": "Monocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n) and a difficulty b_i (an integer from 1 to n). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems should satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\n\n\nYour task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.", "tags": ["combinatorics", "data structures", "geometry", "implementation", "math"], "difficulty": 10, "id": 1598, "sample_io": [{"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}], "test_list": [{"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 3\n4 4\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n0\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n0\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 2\n1 4\n1 2\n5 1\n", "output": ["2\n6\n"]}, {"input": "2\n4\n2 4\n3 4\n2 3\n3 3\n5\n2 5\n2 4\n3 2\n4 2\n5 1\n", "output": ["0\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 4\n1 4\n2 2\n5 1\n", "output": ["2\n7\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 2\n3 3\n3 2\n4 2\n", "output": ["3\n6\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n0\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n0\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n1 1\n5 1\n", "output": ["4\n6\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 1\n4 5\n4 2\n4 1\n", "output": ["2\n4\n"]}, {"input": "2\n4\n4 4\n1 4\n3 2\n3 3\n0\n1 4\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n0\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 5\n1 1\n5 1\n", "output": ["3\n7\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 3\n4 3\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n2 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n4 3\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n2 3\n4 2\n5 2\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n4 4\n3 3\n4 3\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n1 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n1 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n4 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 3\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 3\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 1\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 3\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n1 2\n2 3\n5\n1 5\n2 4\n3 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 4\n3 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 1\n2 3\n5\n2 5\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 4\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n2 5\n2 3\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 1\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 1\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 3\n3 3\n4 2\n2 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n2 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 4\n2 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n4 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 1\n2 1\n2 3\n5\n1 5\n4 4\n3 3\n4 3\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n4 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n2 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 2\n4 3\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n1 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 2\n4 3\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 3\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 3\n3 4\n4 3\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 5\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n1 2\n2 3\n5\n1 5\n2 4\n4 3\n4 1\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n1 3\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 3\n3 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 4\n1 4\n4 2\n5 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n2 5\n3 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n3 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 3\n3 3\n4 2\n1 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n3 3\n2 3\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n3 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n2 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n4 4\n3 2\n4 3\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 3\n1 4\n3 5\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 3\n3 2\n2 2\n5 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 2\n1 4\n4 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n2 5\n3 4\n2 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n2 1\n4 2\n4 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n3 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 5\n2 3\n4 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n1 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 2\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 4\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 2\n", "output": ["3\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 3\n3 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n3 1\n2 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n4 4\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 3\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 5\n3 3\n4 2\n1 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n4 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 5\n2 4\n3 1\n4 2\n4 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n1 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 1\n5\n2 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n2 1\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 1\n1 2\n2 3\n5\n1 5\n2 4\n3 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n4 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 2\n", "output": ["4\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 1\n2 3\n5\n2 5\n1 4\n3 5\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n3 4\n1 2\n2 2\n2 3\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 1\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n4 1\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 4\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n3 2\n2 3\n5\n1 5\n1 3\n3 3\n4 2\n2 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n4 1\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n4 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n2 5\n2 4\n2 3\n1 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 4\n5\n1 5\n2 4\n1 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 3\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 5\n2 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n4 3\n4 1\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n1 1\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 3\n3 2\n4 4\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n2 2\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n4 1\n1 3\n5\n1 5\n2 1\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n3 2\n4 2\n", "output": ["3\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 3\n1 3\n5\n1 5\n2 4\n5 5\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n1 4\n3 5\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n1 1\n2 2\n1 4\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n2 1\n3 4\n2 3\n4 2\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n1 5\n2 4\n2 1\n4 2\n4 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n4 1\n5 2\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n4 5\n2 3\n4 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 4\n5 2\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 4\n1 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 1\n3 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n3 1\n1 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 2\n4 4\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n4 2\n2 3\n5\n1 5\n1 4\n3 3\n4 3\n4 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n4 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 1\n5\n2 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 1\n3 1\n2 2\n2 3\n5\n1 2\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 1\n1 2\n2 1\n5\n1 5\n2 4\n3 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 4\n3 2\n4 2\n3 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n3 4\n1 2\n2 2\n2 3\n5\n2 5\n2 4\n2 2\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n1 1\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 4\n2 4\n3 2\n4 2\n4 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n2 1\n5 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n2 4\n4 3\n4 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n3 3\n5\n2 5\n2 4\n2 3\n1 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 2\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n1 5\n2 2\n5 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n3 3\n4 2\n2 3\n5\n1 5\n2 4\n4 3\n4 1\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n1 1\n2 2\n2 3\n5\n2 5\n1 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n4 1\n1 3\n5\n1 5\n2 1\n3 3\n3 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n1 1\n3 5\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n1 2\n2 2\n1 4\n4 2\n5 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n5 4\n5 2\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n1 2\n2 3\n5\n1 5\n2 3\n3 3\n4 4\n1 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n1 1\n1 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 2\n4 4\n5\n1 5\n4 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n3 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 2\n2 4\n3 3\n4 4\n4 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n2 4\n1 1\n2 2\n2 3\n5\n1 5\n1 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 1\n1 3\n5\n1 5\n2 1\n3 3\n3 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 1\n3 5\n4 2\n4 1\n", "output": ["2\n7\n"]}, {"input": "2\n4\n2 4\n3 4\n1 2\n2 3\n5\n2 5\n2 3\n3 3\n4 4\n1 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n1 1\n1 3\n5\n1 5\n2 4\n3 4\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n3 3\n5\n1 4\n2 4\n3 5\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n3 3\n5\n1 4\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 3\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n4 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n4 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 2\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n4 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n1 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n1 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n2 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n1 1\n", "output": ["4\n10\n"]}], "task_id": "codecontest/61", "repair_prompt": ["Monocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n). It also has a difficulty b_i (an integer from 1 to n). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems he selects for the problemset should satisfy specific conditions. He has to ensure that they satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\n\n\nYour task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n). It also has a difficulty b_i (an integer from 1 to n). Each problem has distinct attributes, ensuring uniqueness within the set. All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems he selects for the problemset should satisfy specific conditions. He has to ensure that they satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\nYour task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp is the coach of the Berland State University programming teams and decided to compose a problemset for a training session for his teams. Monocarp has n problems that none of his students have seen yet, and the i-th problem has a topic a_i (an integer from 1 to n) and also has a difficulty b_i (an integer from 1 to n). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time. Monocarp decided to select exactly 3 problems from n problems for the problemset, and the problems he selects for the problemset should satisfy specific conditions. He has to ensure that they satisfy at least one of two conditions (possibly, both): the topics of all three selected problems are different; the difficulties of all three selected problems are different. Your task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            invalid_combinations += (topic_count[a_i] - 1) * (difficulty_count[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = {}\n        difficulty_count = {}\n        pair_count = {}\n        \n        for _ in range(n):\n            a = int(data[index])\n            b = int(data[index + 1])\n            index += 2\n            problems.append((a, b))\n            \n            if a not in topic_count:\n                topic_count[a] = 0\n            if b not in difficulty_count:\n                difficulty_count[b] = 0\n            if (a, b) not in pair_count:\n                pair_count[(a, b)] = 0\n            \n            topic_count[a] += 1\n            difficulty_count[b] += 1\n            pair_count[(a, b)] += 1\n        \n        # Total ways to choose 3 problems\n        total_ways = n * (n - 1) * (n - 2) // 6\n        \n        # Subtract invalid ways where all topics are the same\n        invalid_topic_ways = 0\n        for count in topic_count.values():\n            if count >= 3:\n                invalid_topic_ways += count * (count - 1) * (count - 2) // 6\n        \n        # Subtract invalid ways where all difficulties are the same\n        invalid_difficulty_ways = 0\n        for count in difficulty_count.values():\n            if count >= 3:\n                invalid_difficulty_ways += count * (count - 1) * (count - 2) // 6\n        \n        # Add back over-subtracted ways where both topics and difficulties are the same\n        over_subtracted_ways = 0\n        for count in pair_count.values():\n            if count >= 3:\n                over_subtracted_ways += count * (count - 1) * (count - 2) // 6\n        \n        valid_ways = total_ways - invalid_topic_ways - invalid_difficulty_ways + over_subtracted_ways\n        results.append(valid_ways)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        # Total ways to choose 3 problems\n        total_combinations = comb(n, 3)\n        \n        # Invalid combinations where all three have the same topic\n        invalid_topic_combinations = sum(comb(count, 3) for count in topic_count.values() if count >= 3)\n        \n        # Invalid combinations where all three have the same difficulty\n        invalid_difficulty_combinations = sum(comb(count, 3) for count in difficulty_count.values() if count >= 3)\n        \n        # Valid combinations\n        valid_combinations = total_combinations - invalid_topic_combinations - invalid_difficulty_combinations\n        \n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        topics = defaultdict(int)\n        difficulties = defaultdict(int)\n        \n        problems = []\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            \n            problems.append((a_i, b_i))\n            topics[a_i] += 1\n            difficulties[b_i] += 1\n        \n        # Total ways to choose 3 problems\n        total_combinations = comb(n, 3)\n        \n        # Calculate invalid combinations\n        invalid_combinations = 0\n        for a_i, b_i in problems:\n            # For each problem, calculate the number of invalid combinations\n            # where this problem is included and the other two have the same topic or difficulty\n            invalid_combinations += (topics[a_i] - 1) * (difficulties[b_i] - 1)\n        \n        # Calculate valid combinations\n        valid_combinations = total_combinations - invalid_combinations\n        \n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "from collections import defaultdict\nimport sys\ninput = sys.stdin.read\n\ndef calculate_ways(n, problems):\n    total_ways = n * (n - 1) * (n - 2) // 6\n    topic_count = defaultdict(int)\n    difficulty_count = defaultdict(int)\n    \n    for a, b in problems:\n        topic_count[a] += 1\n        difficulty_count[b] += 1\n    \n    same_topic_ways = 0\n    for count in topic_count.values():\n        if count >= 3:\n            same_topic_ways += count * (count - 1) * (count - 2) // 6\n    \n    same_difficulty_ways = 0\n    for count in difficulty_count.values():\n        if count >= 3:\n            same_difficulty_ways += count * (count - 1) * (count - 2) // 6\n    \n    # Calculate the number of ways where both topic and difficulty are the same\n    # Since no two problems have the same topic and difficulty, this is always zero.\n    same_topic_difficulty_ways = 0\n    \n    valid_ways = total_ways - same_topic_ways - same_difficulty_ways + same_topic_difficulty_ways\n    return valid_ways\n\ndef main():\n    data = input().strip().split()\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        problems = []\n        \n        for _ in range(n):\n            a = int(data[index])\n            b = int(data[index + 1])\n            problems.append((a, b))\n            index += 2\n        \n        results.append(calculate_ways(n, problems))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        topics = {}\n        difficulties = {}\n        \n        problems = []\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            \n            problems.append((a_i, b_i))\n            \n            if a_i not in topics:\n                topics[a_i] = 0\n            if b_i not in difficulties:\n                difficulties[b_i] = 0\n            \n            topics[a_i] += 1\n            difficulties[b_i] += 1\n        \n        # Total ways to choose 3 problems\n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        # Calculate invalid combinations\n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            # If we fix one problem, the other two must not have the same topic or difficulty\n            invalid_combinations += (topics[a_i] - 1) * (difficulties[b_i] - 1)\n        \n        # Valid combinations are total minus invalid\n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef calculate_valid_selections(n, problems):\n    if n < 3:\n        return 0\n    \n    # Calculate total combinations of three problems\n    total_combinations = comb(n, 3)\n    \n    # Frequency count of topics and difficulties\n    topic_count = defaultdict(int)\n    difficulty_count = defaultdict(int)\n    \n    for topic, difficulty in problems:\n        topic_count[topic] += 1\n        difficulty_count[difficulty] += 1\n    \n    # Calculate invalid combinations where neither condition is met\n    invalid_combinations = 0\n    for topic, difficulty in problems:\n        invalid_combinations += (topic_count[topic] - 1) * (difficulty_count[difficulty] - 1)\n    \n    # Valid combinations are total combinations minus invalid ones\n    valid_combinations = total_combinations - invalid_combinations\n    return valid_combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n        \n        result = calculate_valid_selections(n, problems)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    from collections import defaultdict\n    from math import comb\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        # Total ways to choose 3 problems\n        total_ways = comb(n, 3)\n        \n        # Calculate invalid sets where all topics are the same\n        invalid_topic_ways = 0\n        for count in topic_count.values():\n            if count >= 3:\n                invalid_topic_ways += comb(count, 3)\n        \n        # Calculate invalid sets where all difficulties are the same\n        invalid_difficulty_ways = 0\n        for count in difficulty_count.values():\n            if count >= 3:\n                invalid_difficulty_ways += comb(count, 3)\n        \n        # Valid ways are total ways minus invalid ways\n        valid_ways = total_ways - invalid_topic_ways - invalid_difficulty_ways\n        results.append(valid_ways)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        topics = defaultdict(int)\n        difficulties = defaultdict(int)\n        \n        problems = []\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            \n            problems.append((a_i, b_i))\n            topics[a_i] += 1\n            difficulties[b_i] += 1\n        \n        if n == 3:\n            # Edge case handling for n = 3\n            if len(set(p[0] for p in problems)) == 1 or len(set(p[1] for p in problems)) == 1:\n                results.append(0)\n            else:\n                results.append(1)\n            continue\n        \n        total_combinations = comb(n, 3)\n        \n        # Calculate invalid combinations\n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            # Count combinations where all topics or all difficulties are the same\n            invalid_combinations += (topics[a_i] - 1) * (difficulties[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            invalid_combinations += (topic_count[a_i] - 1) * (difficulty_count[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            invalid_combinations += (topic_count[a_i] - 1) * (difficulty_count[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of problems.\",\n        \"For each problem, read the integers a_i and b_i, which represent the topic and difficulty of the problem.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of ways to select three problems that satisfy the conditions for each test case.\",\n      \"steps\": [\n        \"For each test case, generate all possible combinations of three problems from the list of n problems.\",\n        \"For each combination, check if the topics of the three problems are all different or if the difficulties are all different.\",\n        \"Count the number of combinations that satisfy at least one of the conditions.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, print the number of valid combinations found.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n    \"For each test case, iterate over all possible combinations of three problems.\",\n    \"Check each combination to see if it satisfies the condition of having all different topics or all different difficulties.\",\n    \"Count and store the number of valid combinations for each test case.\",\n    \"Output the count for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'topics' and 'difficulties'\n    Explanation: In the requirement, each problem has a topic and a difficulty, both represented by integers. The core task is to select three problems such that either all topics are different or all difficulties are different.\n\n# [phrase showing quantity relationship]\n    'exactly 3 problems': This means we need to select combinations of three problems from the list.\n    'at least one of two conditions': This means that a valid selection must satisfy at least one of the conditions (different topics or different difficulties).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but the checking of conditions (different topics or different difficulties) can be done simultaneously within the loop that checks combinations. This can be implemented using an if-else statement to check both conditions for each combination.\n\n# [edge case]\n    1. Test case with minimum n (n=3):\n       Input: 1\n              3\n              1 1\n              2 2\n              3 3\n       Expected Output: 1\n       Explanation: Only one combination (1, 2, 3) is possible, and it satisfies both conditions.\n\n    2. Test case with all problems having the same topic:\n       Input: 1\n              4\n              1 1\n              1 2\n              1 3\n              1 4\n       Expected Output: 4\n       Explanation: Any combination of three problems will have different difficulties.\n\n    3. Test case with all problems having the same difficulty:\n       Input: 1\n              4\n              1 1\n              2 1\n              3 1\n              4 1\n       Expected Output: 4\n       Explanation: Any combination of three problems will have different topics.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking combinations for different topics or difficulties will naturally handle these cases.\n\nNO", "Round_0": {"code": "import sys\nfrom collections import defaultdict\nfrom itertools import combinations\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            invalid_combinations += (topic_count[a_i] - 1) * (difficulty_count[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            invalid_combinations += (topic_count[a_i] - 1) * (difficulty_count[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n      \"details\": \"Read the integer t for the number of test cases. For each test case, read the integer n and then n pairs of integers representing the topic and difficulty of each problem.\"\n    },\n    {\n      \"description\": \"Calculate the total number of ways to select any three problems from the n problems.\",\n      \"details\": \"Use the combination formula C(n, 3) = n * (n - 1) * (n - 2) / 6 to calculate the total number of ways to choose 3 problems from n.\"\n    },\n    {\n      \"description\": \"Calculate the number of ways to select three problems where all topics are not different.\",\n      \"details\": \"For each unique topic, count the number of problems with that topic. Use the combination formula C(count, 3) to find the number of ways to select 3 problems with the same topic, and sum these for all topics.\"\n    },\n    {\n      \"description\": \"Calculate the number of ways to select three problems where all difficulties are not different.\",\n      \"details\": \"For each unique difficulty, count the number of problems with that difficulty. Use the combination formula C(count, 3) to find the number of ways to select 3 problems with the same difficulty, and sum these for all difficulties.\"\n    },\n    {\n      \"description\": \"Calculate the number of ways to select three problems where both topics and difficulties are not different.\",\n      \"details\": \"For each unique pair of topic and difficulty, count the number of problems with that pair. Use the combination formula C(count, 3) to find the number of ways to select 3 problems with the same topic and difficulty, and sum these for all pairs.\"\n    },\n    {\n      \"description\": \"Calculate the number of valid ways to select three problems that satisfy at least one of the conditions.\",\n      \"details\": \"Subtract the invalid combinations (where all topics or all difficulties are the same) from the total combinations, and add back the over-subtracted cases (where both topics and difficulties are the same).\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n    \"For each test case, calculate the total number of ways to select any\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct attributes'\n    Explanation: Each problem has unique topic and difficulty, ensuring no two problems are identical in both attributes.\n\n    'select exactly 3 problems'\n    Explanation: The task is to choose a subset of exactly three problems from the given set.\n\n    'topics of all three selected problems are different'\n    Explanation: The three chosen problems must each have a unique topic.\n\n    'difficulties of all three selected problems are different'\n    Explanation: The three chosen problems must each have a unique difficulty.\n\n# [phrase showing quantity relationship]\n    'exactly 3': This indicates a strict requirement to select a subset of three problems.\n    Implementation: Use combinations to select subsets of size 3.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    Steps 3, 4, and 5 should be considered simultaneously. These steps involve calculating invalid combinations based on topics and difficulties, and they can be combined into a single logic block to optimize the calculation of valid combinations.\n\n# [edge case]\n    1. n = 3, problems = [(1, 1), (2, 2), (3, 3)] = 1\n       Explanation: Only one way to select all three problems, and they satisfy both conditions.\n    2. n = 4, problems = [(1, 1), (1, 2), (2, 1), (2, 2)] = 4\n       Explanation: All combinations of three problems satisfy at least one condition.\n    3. n = 5, problems = [(1, 1), (1, 2), (1, 3), (2, 1), (3, 1)] = 10\n       Explanation: All combinations of three problems satisfy at least one condition.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating combinations and subtracting invalid cases will handle these scenarios correctly.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = {}\n        difficulty_count = {}\n        pair_count = {}\n        \n        for _ in range(n):\n            a = int(data[index])\n            b = int(data[index + 1])\n            index += 2\n            problems.append((a, b))\n            \n            if a not in topic_count:\n                topic_count[a] = 0\n            if b not in difficulty_count:\n                difficulty_count[b] = 0\n            if (a, b) not in pair_count:\n                pair_count[(a, b)] = 0\n            \n            topic_count[a] += 1\n            difficulty_count[b] += 1\n            pair_count[(a, b)] += 1\n        \n        # Total ways to choose 3 problems\n        total_ways = n * (n - 1) * (n - 2) // 6\n        \n        # Subtract invalid ways where all topics are the same\n        invalid_topic_ways = 0\n        for count in topic_count.values():\n            if count >= 3:\n                invalid_topic_ways += count * (count - 1) * (count - 2) // 6\n        \n        # Subtract invalid ways where all difficulties are the same\n        invalid_difficulty_ways = 0\n        for count in difficulty_count.values():\n            if count >= 3:\n                invalid_difficulty_ways += count * (count - 1) * (count - 2) // 6\n        \n        # Add back over-subtracted ways where both topics and difficulties are the same\n        over_subtracted_ways = 0\n        for count in pair_count.values():\n            if count >= 3:\n                over_subtracted_ways += count * (count - 1) * (count - 2) // 6\n        \n        valid_ways = total_ways - invalid_topic_ways - invalid_difficulty_ways + over_subtracted_ways\n        results.append(valid_ways)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each problem for each test case.\",\n      \"output\": \"A structured representation of the input data, such as a list of test cases where each test case contains a list of problems with their topics and difficulties.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total number of ways to select any three problems from the given problems.\",\n      \"output\": \"The total number of combinations of three problems from the given n problems.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of ways to select three problems such that all three have the same topic.\",\n      \"output\": \"The number of combinations where all three selected problems have the same topic.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of ways to select three problems such that all three have the same difficulty.\",\n      \"output\": \"The number of combinations where all three selected problems have the same difficulty.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of valid combinations by subtracting invalid combinations (same topic or same difficulty) from the total combinations.\",\n      \"output\": \"The number of valid combinations for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"For each test case, calculate the total number of ways to select any three problems using combinatorial mathematics (n choose 3).\",\n    \"For each test case, count the occurrences of each topic and calculate the number of invalid combinations where all three problems have the same topic.\",\n    \"For each test case, count the occurrences of each difficulty and calculate the number of invalid combinations where all three problems have the same difficulty.\",\n    \"Subtract the invalid combinations (same topic and same difficulty) from the total combinations to get the number of valid combinations for each test case.\",\n    \"Output the number of valid combinations for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'topics of all three selected problems are different'\n    Explanation: This means that when selecting three problems, each problem must have a unique topic number.\n\n    'difficulties of all three selected problems are different'\n    Explanation: This means that when selecting three problems, each problem must have a unique difficulty level.\n\n# [phrase showing quantity relationship]\n    'exactly 3 problems': This indicates that the selection must consist of three problems, no more, no less.\n    'number of ways to select': This refers to the different combinations possible to select the problems.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for calculating the total number of combinations and subtracting invalid combinations should be considered simultaneously. Specifically, after calculating the total combinations, the invalid combinations (same topic or same difficulty) should be subtracted in the same logical block to determine the valid combinations.\n\n# [edge case]\n    1. n = 3, problems = [(1, 1), (2, 2), (3, 3)] = 1\n       Explanation: There is only one way to select all three problems, and they automatically satisfy both conditions.\n    2. n = 4, problems = [(1, 1), (1, 2), (2, 1), (2, 2)] = 0\n       Explanation: Any selection of three problems will have at least two problems with the same topic or difficulty.\n    3. n = 5, problems = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)] = 10\n       Explanation: All combinations of three problems will satisfy both conditions since all topics and difficulties are unique.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating combinations and subtracting invalid ones will naturally handle these cases.\n\nNO", "Round_0": {"code": "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        # Total ways to choose 3 problems\n        total_combinations = comb(n, 3)\n        \n        # Invalid combinations where all three have the same topic\n        invalid_topic_combinations = sum(comb(count, 3) for count in topic_count.values() if count >= 3)\n        \n        # Invalid combinations where all three have the same difficulty\n        invalid_difficulty_combinations = sum(comb(count, 3) for count in difficulty_count.values() if count >= 3)\n        \n        # Valid combinations\n        valid_combinations = total_combinations - invalid_topic_combinations - invalid_difficulty_combinations\n        \n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        # Total ways to choose 3 problems\n        total_combinations = comb(n, 3)\n        \n        # Invalid combinations where all three have the same topic\n        invalid_topic_combinations = sum(comb(count, 3) for count in topic_count.values() if count >= 3)\n        \n        # Invalid combinations where all three have the same difficulty\n        invalid_difficulty_combinations = sum(comb(count, 3) for count in difficulty_count.values() if count >= 3)\n        \n        # Valid combinations\n        valid_combinations = total_combinations - invalid_topic_combinations - invalid_difficulty_combinations\n        \n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each problem for each test case.\",\n      \"output\": \"A structured format containing the number of test cases and a list of problems for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total number of ways to select any three problems from the given n problems.\",\n      \"output\": \"The total number of combinations of three problems from n problems.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of ways to select three problems such that all have the same topic.\",\n      \"output\": \"The number of combinations where all three problems have the same topic.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of ways to select three problems such that all have the same difficulty.\",\n      \"output\": \"The number of combinations where all three problems have the same difficulty.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of ways to select three problems such that they do not satisfy either condition (all topics different or all difficulties different).\",\n      \"output\": \"The number of invalid combinations where neither condition is satisfied.\"\n    },\n    {\n      \"description\": \"For each test case, subtract the invalid combinations from the total combinations to get the valid combinations.\",\n      \"output\": \"The number of valid combinations for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"For each test case, calculate the total number of ways to select any three problems using combinations.\",\n    \"For each test case, count the occurrences of each topic and calculate the number of invalid combinations where all three problems have the same topic.\",\n    \"For each test case, count the occurrences of each difficulty and calculate the number of invalid combinations where all three problems have the same difficulty.\",\n    \"Calculate the number of invalid combinations where neither condition is satisfied by considering both topic and difficulty constraints.\",\n    \"Subtract the invalid combinations from the total combinations to get the valid combinations for each test case.\",\n    \"Output the number of valid combinations for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'topic' and 'difficulty'\n    Explanation: These are the two attributes of each problem that need to be considered when selecting problems for the problemset. The selection criteria are based on these attributes.\n\n# [phrase showing quantity relationship]\n    'exactly 3 problems': means that we need to select precisely three problems for the problemset.\n    'number of ways': refers to calculating the different combinations possible under given constraints.\n\n# [degree adverb]\n    'different': means that the selected problems must have distinct topics or difficulties.\n\n# [code logic]\n    The steps related to calculating invalid combinations based on topics and difficulties should be considered simultaneously. Specifically, steps 3 and 4 can be implemented together by iterating through the problems once and counting occurrences of topics and difficulties.\n\n# [edge case]\n    Test case with minimum n:\n    Input: 3\n           1 1\n           2 2\n           3 3\n    Output: 1\n    Explanation: Only one way to select three problems, and they satisfy both conditions.\n\n    Test case with all problems having the same topic:\n    Input: 3\n           1 1\n           1 2\n           1 3\n    Output: 1\n    Explanation: Only one way to select three problems, and they satisfy the condition of different difficulties.\n\n    Test case with all problems having the same difficulty:\n    Input: 3\n           1 1\n           2 1\n           3 1\n    Output: 1\n    Explanation: Only one way to select three problems, and they satisfy the condition of different topics.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating combinations and subtracting invalid ones will handle these cases.\n\nNO", "Round_0": {"code": "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        topics = defaultdict(int)\n        difficulties = defaultdict(int)\n        \n        problems = []\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            \n            problems.append((a_i, b_i))\n            topics[a_i] += 1\n            difficulties[b_i] += 1\n        \n        # Total ways to choose 3 problems\n        total_combinations = comb(n, 3)\n        \n        # Invalid combinations where all three have the same topic\n        invalid_topic_combinations = sum(comb(count, 3) for count in topics.values() if count >= 3)\n        \n        # Invalid combinations where all three have the same difficulty\n        invalid_difficulty_combinations = sum(comb(count, 3) for count in difficulties.values() if count >= 3)\n        \n        # Calculate valid combinations\n        valid_combinations = total_combinations - invalid_topic_combinations - invalid_difficulty_combinations\n        \n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        topics = defaultdict(int)\n        difficulties = defaultdict(int)\n        \n        problems = []\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            \n            problems.append((a_i, b_i))\n            topics[a_i] += 1\n            difficulties[b_i] += 1\n        \n        # Total ways to choose 3 problems\n        total_combinations = comb(n, 3)\n        \n        # Calculate invalid combinations\n        invalid_combinations = 0\n        for a_i, b_i in problems:\n            # For each problem, calculate the number of invalid combinations\n            # where this problem is included and the other two have the same topic or difficulty\n            invalid_combinations += (topics[a_i] - 1) * (difficulties[b_i] - 1)\n        \n        # Calculate valid combinations\n        valid_combinations = total_combinations - invalid_combinations\n        \n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n      \"details\": \"Read the input data, which includes the number of test cases, and for each test case, the number of problems followed by the topic and difficulty of each problem.\"\n    },\n    {\n      \"description\": \"Calculate the total number of ways to select any three problems from the given n problems.\",\n      \"details\": \"Use the combination formula C(n, 3) = n * (n - 1) * (n - 2) / 6 to calculate the total number of ways to choose three problems from n.\"\n    },\n    {\n      \"description\": \"Calculate the number of ways to select three problems where all topics are the same.\",\n      \"details\": \"Group problems by their topics and for each group with at least three problems, calculate the number of ways to choose three problems using the combination formula.\"\n    },\n    {\n      \"description\": \"Calculate the number of ways to select three problems where all difficulties are the same.\",\n      \"details\": \"Group problems by their difficulties and for each group with at least three problems, calculate the number of ways to choose three problems using the combination formula.\"\n    },\n    {\n      \"description\": \"Calculate the number of ways to select three problems where both topics and difficulties are the same.\",\n      \"details\": \"For each unique (topic, difficulty) pair, count the number of occurrences and calculate the number of ways to choose three problems if there are at least three problems with the same pair.\"\n    },\n    {\n      \"description\": \"Compute the final result for each test case.\",\n      \"details\": \"Subtract the number of invalid selections (same topics or same difficulties) from the total number of ways to select three problems, and add back the over-subtracted cases (same topic and difficulty).\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n    \"For each test case, calculate the total number of ways to select any three problems using the combination formula.\",\n    \"Group problems by topics and calculate the number of invalid selections where all topics are the same.\",\n    \"Group problems by difficulties and calculate the number of invalid selections where all difficulties are the same.\",\n    \"Identify and calculate the number of over-subtracted cases where both topics and difficulties\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'topics' and 'difficulties'\n    Explanation: In the requirement, each problem has a unique topic and difficulty. The task is to select three problems such that either all topics are different or all difficulties are different.\n\n# [phrase showing quantity relationship]\n    'exactly 3 problems': This means we need to select precisely three problems from the list.\n    'at least one of two conditions': This means that the selected problems must satisfy at least one of the given conditions (different topics or different difficulties).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for calculating the number of ways to select three problems with the same topic or difficulty should be considered simultaneously. Specifically, steps 3 and 4 can be combined into a single loop that checks both conditions for each group of problems.\n\n# [edge case]\n    1. n = 3, problems = [(1, 1), (2, 2), (3, 3)] = 1\n       Explanation: Only one way to select all three problems, and they satisfy both conditions.\n    2. n = 4, problems = [(1, 1), (1, 2), (2, 1), (2, 2)] = 0\n       Explanation: No way to select three problems that satisfy either condition.\n    3. n = 5, problems = [(1, 1), (1, 2), (1, 3), (2, 1), (3, 1)] = 3\n       Explanation: Three ways to select problems that satisfy the conditions: (1, 1), (1, 2), (1, 3); (1, 1), (2, 1), (3, 1); (1, 2), (2, 1), (3, 1).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that we correctly calculate the number of ways to select problems with the same topic or difficulty and adjust the total count accordingly.\n    ```python\n    from collections import defaultdict\n\n    def calculate_ways(n, problems):\n        total_ways = n * (n - 1) * (n - 2) // 6\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for a, b in problems", "Round_0": {"code": "from collections import defaultdict\nimport sys\ninput = sys.stdin.read\n\ndef calculate_ways(n, problems):\n    total_ways = n * (n - 1) * (n - 2) // 6\n    topic_count = defaultdict(int)\n    difficulty_count = defaultdict(int)\n    \n    for a, b in problems:\n        topic_count[a] += 1\n        difficulty_count[b] += 1\n    \n    same_topic_ways = 0\n    for count in topic_count.values():\n        if count >= 3:\n            same_topic_ways += count * (count - 1) * (count - 2) // 6\n    \n    same_difficulty_ways = 0\n    for count in difficulty_count.values():\n        if count >= 3:\n            same_difficulty_ways += count * (count - 1) * (count - 2) // 6\n    \n    # Calculate the number of ways where both topic and difficulty are the same\n    # Since no two problems have the same topic and difficulty, this is always zero.\n    same_topic_difficulty_ways = 0\n    \n    valid_ways = total_ways - same_topic_ways - same_difficulty_ways + same_topic_difficulty_ways\n    return valid_ways\n\ndef main():\n    data = input().strip().split()\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        problems = []\n        \n        for _ in range(n):\n            a = int(data[index])\n            b = int(data[index + 1])\n            problems.append((a, b))\n            index += 2\n        \n        results.append(calculate_ways(n, problems))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from collections import defaultdict\nimport sys\ninput = sys.stdin.read\n\ndef calculate_ways(n, problems):\n    total_ways = n * (n - 1) * (n - 2) // 6\n    topic_count = defaultdict(int)\n    difficulty_count = defaultdict(int)\n    \n    for a, b in problems:\n        topic_count[a] += 1\n        difficulty_count[b] += 1\n    \n    same_topic_ways = 0\n    for count in topic_count.values():\n        if count >= 3:\n            same_topic_ways += count * (count - 1) * (count - 2) // 6\n    \n    same_difficulty_ways = 0\n    for count in difficulty_count.values():\n        if count >= 3:\n            same_difficulty_ways += count * (count - 1) * (count - 2) // 6\n    \n    # Calculate the number of ways where both topic and difficulty are the same\n    # Since no two problems have the same topic and difficulty, this is always zero.\n    same_topic_difficulty_ways = 0\n    \n    valid_ways = total_ways - same_topic_ways - same_difficulty_ways + same_topic_difficulty_ways\n    return valid_ways\n\ndef main():\n    data = input().strip().split()\n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        problems = []\n        \n        for _ in range(n):\n            a = int(data[index])\n            b = int(data[index + 1])\n            problems.append((a, b))\n            index += 2\n        \n        results.append(calculate_ways(n, problems))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of problems.\",\n        \"For each problem, read the integers a_i and b_i, which represent the topic and difficulty of the problem.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the total number of ways to select three problems from n problems.\",\n      \"steps\": [\n        \"Use combinatorial mathematics to calculate the total number of combinations of three problems from n problems, which is C(n, 3) = n * (n - 1) * (n - 2) / 6.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of invalid combinations where neither condition is satisfied.\",\n      \"steps\": [\n        \"Count the number of problems for each topic and difficulty.\",\n        \"For each topic, calculate the number of invalid combinations where all three problems have the same topic.\",\n        \"For each difficulty, calculate the number of invalid combinations where all three problems have the same difficulty.\",\n        \"Subtract the invalid combinations from the total combinations to get the valid combinations.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n    \"For each test case, calculate the total number of ways to select three problems using combinatorial mathematics.\",\n    \"For each test case, calculate the number of invalid combinations where neither condition is satisfied by counting problems with the same topic and difficulty.\",\n    \"Subtract the number of invalid combinations from the total combinations to get the number of valid combinations.\",\n    \"Output the number of valid combinations for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct attributes'\n    Explanation: This means that each problem has a unique combination of topic and difficulty, ensuring no two problems are identical in both aspects.\n\n    'select exactly 3 problems'\n    Explanation: The requirement is to choose a subset of three problems from the given set of problems.\n\n    'topics of all three selected problems are different'\n    Explanation: This condition requires that the three chosen problems have different topics.\n\n    'difficulties of all three selected problems are different'\n    Explanation: This condition requires that the three chosen problems have different difficulties.\n\n# [phrase showing quantity relationship]\n    'exactly 3': This indicates that the selection must consist of precisely three problems.\n    Implementation: Use combinations to select three problems from the list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to counting invalid combinations for topics and difficulties should be considered simultaneously. This can be done by iterating through the list of problems once and updating counts for both topics and difficulties in parallel.\n\n# [edge case]\n    Test case with minimum n:\n    Input: 3\n           1 1\n           2 2\n           3 3\n    Expected output: 1\n    Explanation: Only one way to select three problems, and it satisfies both conditions.\n\n    Test case with all problems having the same topic:\n    Input: 3\n           1 2\n           1 3\n           1 4\n    Expected output: 0\n    Explanation: No valid selection as all problems have the same topic.\n\n    Test case with all problems having the same difficulty:\n    Input: 3\n           1 1\n           2 1\n           3 1\n    Expected output: 0\n    Explanation: No valid selection as all problems have the same difficulty.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    if n < 3:\n        return 0\n    ```\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        topics = {}\n        difficulties = {}\n        \n        problems = []\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            \n            problems.append((a_i, b_i))\n            \n            if a_i not in topics:\n                topics[a_i] = 0\n            if b_i not in difficulties:\n                difficulties[b_i] = 0\n            \n            topics[a_i] += 1\n            difficulties[b_i] += 1\n        \n        # Total ways to choose 3 problems\n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        # Calculate invalid combinations\n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            # If we fix one problem, the other two must not have the same topic or difficulty\n            invalid_combinations += (topics[a_i] - 1) * (difficulties[b_i] - 1)\n        \n        # Valid combinations are total minus invalid\n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each problem for each test case.\",\n      \"input\": \"Raw input string containing multiple test cases.\",\n      \"output\": \"Structured data containing the number of test cases and a list of problems for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total number of ways to select any three problems from the given n problems.\",\n      \"input\": \"List of problems for a test case.\",\n      \"output\": \"Total number of ways to select any three problems.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of ways to select three problems such that all topics are different.\",\n      \"input\": \"List of problems for a test case.\",\n      \"output\": \"Number of ways to select three problems with different topics.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of ways to select three problems such that all difficulties are different.\",\n      \"input\": \"List of problems for a test case.\",\n      \"output\": \"Number of ways to select three problems with different difficulties.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of valid selections by subtracting invalid selections (where neither condition is met) from the total selections.\",\n      \"input\": \"Total number of selections, number of selections with different topics, number of selections with different difficulties.\",\n      \"output\": \"Number of valid selections for the problemset.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n    \"For each test case, calculate the total number of ways to select any three problems using combinatorial methods.\",\n    \"For each test case, calculate the number of ways to select three problems with different topics by iterating over the list and using a frequency count of topics.\",\n    \"For each test case, calculate the number of ways to select three problems with different difficulties by iterating over the list and using a frequency count of difficulties.\",\n    \"For each test case, calculate the number of valid selections by ensuring at least one of the conditions (different topics or different difficulties) is met.\",\n    \"Output the number of valid selections for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct attributes'\n    Explanation: Each problem has unique topic and difficulty, ensuring no two problems are identical in both attributes.\n\n    'select exactly 3 problems'\n    Explanation: The task is to choose three problems from the given set, adhering to specified conditions.\n\n    'different topics' and 'different difficulties'\n    Explanation: The selected problems must have either all different topics or all different difficulties, or both.\n\n# [phrase showing quantity relationship]\n    'number of ways'\n    Explanation: This refers to the combinatorial calculation of selecting three problems from the given set that meet the conditions.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for calculating the number of ways to select three problems with different topics and different difficulties can be implemented simultaneously. This can be done by iterating over the list of problems and using frequency counts for both topics and difficulties in a single pass.\n\n# [edge case] \n    Test case with minimum problems:\n    Input: 3\n           1 1\n           2 2\n           3 3\n    Output: 1\n    Explanation: Only one way to select three problems, and they meet both conditions.\n\n    Test case with all same topics:\n    Input: 4\n           1 2\n           1 3\n           1 4\n           1 5\n    Output: 0\n    Explanation: No way to select three problems with different topics.\n\n    Test case with all same difficulties:\n    Input: 4\n           1 1\n           2 1\n           3 1\n           4 1\n    Output: 0\n    Explanation: No way to select three problems with different difficulties.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where either all topics or all difficulties are the same.\n    This can be handled by checking the frequency counts of topics and difficulties before calculating valid selections.\n\n    ```python\n    def calculate_valid_selections(problems):\n        topic_count = {}\n        difficulty_count = {}\n        for topic, difficulty in problems:\n            topic_count[topic] = topic_count.get(topic, 0) + 1\n            difficulty_count[difficulty] = difficulty_count.get(difficulty, 0) + 1\n        \n        # Calculate total combinations of three problems\n        total_combinations = comb(len(problems), 3)\n        \n        # Calculate invalid", "Round_0": {"code": "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef calculate_valid_selections(problems):\n    n = len(problems)\n    if n < 3:\n        return 0\n    \n    # Calculate total combinations of three problems\n    total_combinations = comb(n, 3)\n    \n    # Frequency count of topics and difficulties\n    topic_count = defaultdict(int)\n    difficulty_count = defaultdict(int)\n    \n    for topic, difficulty in problems:\n        topic_count[topic] += 1\n        difficulty_count[difficulty] += 1\n    \n    # Calculate invalid combinations where neither condition is met\n    invalid_combinations = 0\n    for topic, difficulty in problems:\n        invalid_combinations += (topic_count[topic] - 1) * (difficulty_count[difficulty] - 1)\n    \n    # Valid combinations are total combinations minus invalid ones\n    valid_combinations = total_combinations - invalid_combinations\n    return valid_combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n        \n        result = calculate_valid_selections(problems)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: calculate_valid_selections() missing 1 required positional argument: 'problems'"}, "Round_1": {"code": "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef calculate_valid_selections(n, problems):\n    if n < 3:\n        return 0\n    \n    # Calculate total combinations of three problems\n    total_combinations = comb(n, 3)\n    \n    # Frequency count of topics and difficulties\n    topic_count = defaultdict(int)\n    difficulty_count = defaultdict(int)\n    \n    for topic, difficulty in problems:\n        topic_count[topic] += 1\n        difficulty_count[difficulty] += 1\n    \n    # Calculate invalid combinations where neither condition is met\n    invalid_combinations = 0\n    for topic, difficulty in problems:\n        invalid_combinations += (topic_count[topic] - 1) * (difficulty_count[difficulty] - 1)\n    \n    # Valid combinations are total combinations minus invalid ones\n    valid_combinations = total_combinations - invalid_combinations\n    return valid_combinations\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n        \n        result = calculate_valid_selections(n, problems)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n      \"details\": \"Read the integer t for the number of test cases. For each test case, read the integer n and then read n pairs of integers representing the topic and difficulty of each problem.\"\n    },\n    {\n      \"description\": \"Calculate the total number of ways to select any three problems from n problems.\",\n      \"details\": \"Use the combination formula C(n, 3) = n * (n - 1) * (n - 2) / 6 to calculate the total number of ways to choose 3 problems from n.\"\n    },\n    {\n      \"description\": \"Count the number of ways to select three problems where all topics are the same.\",\n      \"details\": \"Group problems by their topic and for each group with at least 3 problems, calculate the number of ways to choose 3 problems using the combination formula.\"\n    },\n    {\n      \"description\": \"Count the number of ways to select three problems where all difficulties are the same.\",\n      \"details\": \"Group problems by their difficulty and for each group with at least 3 problems, calculate the number of ways to choose 3 problems using the combination formula.\"\n    },\n    {\n      \"description\": \"Calculate the number of valid problem sets that satisfy at least one of the conditions.\",\n      \"details\": \"Subtract the number of invalid sets (where all topics or all difficulties are the same) from the total number of ways to select any three problems.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get the number of test cases and the list of problems for each test case.\",\n    \"For each test case, calculate the total number of ways to select any three problems using the combination formula.\",\n    \"Group problems by topic and calculate the number of invalid sets where all topics are the same.\",\n    \"Group problems by difficulty and calculate the number of invalid sets where all difficulties are the same.\",\n    \"Subtract the number of invalid sets from the total number of ways to get the number of valid problem sets.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'topics' and 'difficulties'\n    Explanation: In the requirement, each problem has a topic and a difficulty, both represented as integers. The core task is to select three problems such that either all topics are different or all difficulties are different.\n\n# [phrase showing quantity relationship]\n    'exactly 3 problems': This means we need to select precisely three problems from the list.\n    'at least one of two conditions': This means that the selected problems must satisfy at least one of the given conditions (either all topics are different or all difficulties are different).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for calculating the total number of ways to select any three problems and subtracting invalid sets should be considered simultaneously. Specifically, after calculating the total combinations, the invalid sets (where all topics or all difficulties are the same) should be subtracted in a single logical block to determine the valid sets.\n\n# [edge case]\n    1. n = 3, problems = [(1, 1), (2, 2), (3, 3)] = 1\n       Explanation: There is only one way to select all three problems, and they satisfy both conditions.\n    2. n = 4, problems = [(1, 1), (1, 2), (2, 1), (2, 2)] = 4\n       Explanation: All combinations of three problems satisfy at least one condition.\n    3. n = 5, problems = [(1, 1), (1, 2), (1, 3), (2, 1), (3, 1)] = 6\n       Explanation: The combinations that do not satisfy the conditions are those where all topics or all difficulties are the same.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where n is exactly 3, as the logic for invalid sets might not apply directly.\n    ```python\n    if n == 3:\n        # Directly check if the single combination satisfies the conditions\n        if len(set(topics)) == 3 or len(set(difficulties)) == 3:\n            return 1\n        else:\n            return 0\n    ```\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    from collections import defaultdict\n    from math import comb\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        # Total ways to choose 3 problems\n        total_ways = comb(n, 3)\n        \n        # Calculate invalid sets where all topics are the same\n        invalid_topic_ways = 0\n        for count in topic_count.values():\n            if count >= 3:\n                invalid_topic_ways += comb(count, 3)\n        \n        # Calculate invalid sets where all difficulties are the same\n        invalid_difficulty_ways = 0\n        for count in difficulty_count.values():\n            if count >= 3:\n                invalid_difficulty_ways += comb(count, 3)\n        \n        # Valid ways are total ways minus invalid ways\n        valid_ways = total_ways - invalid_topic_ways - invalid_difficulty_ways\n        results.append(valid_ways)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details of each problem for each test case.\",\n      \"output\": \"A list of test cases, where each test case contains a list of problems with their respective topics and difficulties.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the total number of ways to select any three problems from the given problems.\",\n      \"output\": \"The total number of combinations of three problems from the given n problems.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of ways to select three problems such that all topics are different.\",\n      \"output\": \"The number of combinations of three problems with different topics.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of ways to select three problems such that all difficulties are different.\",\n      \"output\": \"The number of combinations of three problems with different difficulties.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of ways to select three problems that do not satisfy either condition (all topics different or all difficulties different).\",\n      \"output\": \"The number of combinations of three problems that do not meet either condition.\"\n    },\n    {\n      \"description\": \"For each test case, calculate the number of valid combinations by subtracting the invalid combinations from the total combinations.\",\n      \"output\": \"The number of valid combinations of three problems that meet at least one of the conditions.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format suitable for processing.\",\n    \"For each test case, calculate the total number of ways to select any three problems using combinatorial mathematics.\",\n    \"For each test case, use data structures (e.g., dictionaries or arrays) to count the occurrences of each topic and each difficulty.\",\n    \"Calculate the number of invalid combinations where all topics or all difficulties are the same using the counts from the previous step.\",\n    \"Subtract the number of invalid combinations from the total combinations to get the number of valid combinations for each test case.\",\n    \"Output the number of valid combinations for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'topics' and 'difficulties'\n    Explanation: Each problem has a unique topic and difficulty, and the selection of problems must ensure diversity in either topics or difficulties.\n\n# [phrase showing quantity relationship]\n    'exactly 3 problems': This means we need to select precisely three problems from the list.\n    'at least one of two conditions': This means that the selected problems must satisfy at least one of the conditions (different topics or different difficulties).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for calculating the number of ways to select three problems with different topics and the number of ways to select three problems with different difficulties can be implemented simultaneously. This is because both calculations involve similar logic and can be handled in the same loop or function.\n\n# [edge case]\n    1. n = 3, problems = [(1, 1), (2, 2), (3, 3)] = 1\n       Explanation: There is only one way to select all three problems, and they satisfy both conditions.\n    2. n = 3, problems = [(1, 1), (1, 2), (1, 3)] = 0\n       Explanation: All problems have the same topic, so no valid selection can be made.\n    3. n = 4, problems = [(1, 1), (2, 2), (3, 3), (4, 4)] = 4\n       Explanation: Any selection of three problems will satisfy at least one condition.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where n is exactly 3, as the logic for larger n might not directly apply.\n    ```python\n    if n == 3:\n        # Check if all topics or all difficulties are the same\n        if len(set(topics)) == 1 or len(set(difficulties)) == 1:\n            return 0\n        else:\n            return 1\n    ```\n\nYES", "Round_0": {"code": "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        topics = defaultdict(int)\n        difficulties = defaultdict(int)\n        \n        problems = []\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            \n            problems.append((a_i, b_i))\n            topics[a_i] += 1\n            difficulties[b_i] += 1\n        \n        if n == 3:\n            # Edge case handling for n = 3\n            if len(set(p[0] for p in problems)) == 1 or len(set(p[1] for p in problems)) == 1:\n                results.append(0)\n            else:\n                results.append(1)\n            continue\n        \n        total_combinations = comb(n, 3)\n        \n        # Calculate invalid combinations\n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            # Count combinations where all topics or all difficulties are the same\n            invalid_combinations += (topics[a_i] - 1) * (difficulties[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import sys\nfrom collections import defaultdict\nfrom math import comb\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        topics = defaultdict(int)\n        difficulties = defaultdict(int)\n        \n        problems = []\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            \n            problems.append((a_i, b_i))\n            topics[a_i] += 1\n            difficulties[b_i] += 1\n        \n        if n == 3:\n            # Edge case handling for n = 3\n            if len(set(p[0] for p in problems)) == 1 or len(set(p[1] for p in problems)) == 1:\n                results.append(0)\n            else:\n                results.append(1)\n            continue\n        \n        total_combinations = comb(n, 3)\n        \n        # Calculate invalid combinations\n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            # Count combinations where all topics or all difficulties are the same\n            invalid_combinations += (topics[a_i] - 1) * (difficulties[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of problems.\",\n        \"For each problem, read the integers a_i and b_i, which represent the topic and difficulty of the problem.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the number of ways to select three problems that satisfy the conditions for each test case.\",\n      \"steps\": [\n        \"For each test case, iterate over all combinations of three problems.\",\n        \"Check if the selected combination satisfies at least one of the conditions: all topics are different or all difficulties are different.\",\n        \"Count the number of valid combinations.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, print the number of valid combinations found.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a list to store the results for each test case.\",\n    \"For each test case, parse the input to extract the number of problems and their respective topics and difficulties.\",\n    \"Use combinatorial logic to iterate over all possible combinations of three problems.\",\n    \"For each combination, check if it satisfies the condition of having all different topics or all different difficulties.\",\n    \"Count and store the number of valid combinations for each test case.\",\n    \"Output the stored results for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'different topics' and 'different difficulties'\n    Explanation: The requirement specifies that the selected problems must have either all different topics or all different difficulties. This is crucial for determining valid combinations.\n\n# [phrase showing quantity relationship]\n    'exactly 3 problems': means that we need to select combinations of three problems from the list.\n    'at least one of two conditions': means that a valid combination must satisfy either one or both conditions (different topics or different difficulties).\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps for checking combinations should be implemented simultaneously:\n    \"For each test case, iterate over all combinations of three problems\",\n    \"Check if the selected combination satisfies at least one of the conditions: all topics are different or all difficulties are different\"\n    This can be done using a loop to generate combinations and a conditional statement to check the conditions.\n\n# [edge case] \n    Test case with minimum n:\n    Input: 3\n           1 1\n           2 2\n           3 3\n    Output: 1\n    Explanation: Only one combination (1, 2, 3) is possible, and it satisfies both conditions.\n\n    Test case with all same topics:\n    Input: 3\n           1 1\n           1 2\n           1 3\n    Output: 1\n    Explanation: Only one combination (1, 2, 3) is possible, and it satisfies the condition of different difficulties.\n\n    Test case with all same difficulties:\n    Input: 3\n           1 1\n           2 1\n           3 1\n    Output: 1\n    Explanation: Only one combination (1, 2, 3) is possible, and it satisfies the condition of different topics.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking combinations and conditions will naturally handle these cases.\n\nNO", "Round_0": {"code": "import sys\nfrom collections import defaultdict\nfrom itertools import combinations\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            invalid_combinations += (topic_count[a_i] - 1) * (difficulty_count[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            invalid_combinations += (topic_count[a_i] - 1) * (difficulty_count[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of problems.\",\n        \"For each problem, read the integers a_i and b_i, which represent the topic and difficulty of the problem.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of ways to select three problems that satisfy the conditions for each test case.\",\n      \"steps\": [\n        \"For each test case, generate all possible combinations of three problems from the list of n problems.\",\n        \"For each combination, check if the topics of the three problems are all different or if the difficulties are all different.\",\n        \"Count the number of combinations that satisfy at least one of the conditions.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, print the number of valid combinations found.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the list of problems for each test case.\",\n    \"For each test case, iterate over all possible combinations of three problems.\",\n    \"Check each combination to see if it satisfies the condition of having all different topics or all different difficulties.\",\n    \"Count and store the number of valid combinations for each test case.\",\n    \"Output the count for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'topics' and 'difficulties'\n    Explanation: In the requirement, each problem has a topic and a difficulty, both represented by integers. The core task is to select three problems such that either all topics are different or all difficulties are different.\n\n# [phrase showing quantity relationship]\n    'exactly 3 problems': This means we need to select combinations of three problems from the list.\n    'at least one of two conditions': This means that a valid selection must satisfy at least one of the conditions (different topics or different difficulties).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but the checking of conditions (different topics or different difficulties) can be done simultaneously within the loop that checks combinations. This can be implemented using an if-else statement to check both conditions for each combination.\n\n# [edge case]\n    1. Test case with minimum n (n=3):\n       Input: 1\n              3\n              1 1\n              2 2\n              3 3\n       Expected Output: 1\n       Explanation: Only one combination (1, 2, 3) is possible, and it satisfies both conditions.\n\n    2. Test case with all problems having the same topic:\n       Input: 1\n              4\n              1 1\n              1 2\n              1 3\n              1 4\n       Expected Output: 4\n       Explanation: Any combination of three problems will have different difficulties.\n\n    3. Test case with all problems having the same difficulty:\n       Input: 1\n              4\n              1 1\n              2 1\n              3 1\n              4 1\n       Expected Output: 4\n       Explanation: Any combination of three problems will have different topics.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking combinations for different topics or difficulties will naturally handle these cases.\n\nNO", "Round_0": {"code": "import sys\nfrom collections import defaultdict\nfrom itertools import combinations\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            invalid_combinations += (topic_count[a_i] - 1) * (difficulty_count[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        \n        problems = []\n        topic_count = defaultdict(int)\n        difficulty_count = defaultdict(int)\n        \n        for _ in range(n):\n            a_i = int(data[index])\n            b_i = int(data[index + 1])\n            index += 2\n            problems.append((a_i, b_i))\n            topic_count[a_i] += 1\n            difficulty_count[b_i] += 1\n        \n        total_combinations = n * (n - 1) * (n - 2) // 6\n        \n        invalid_combinations = 0\n        \n        for a_i, b_i in problems:\n            invalid_combinations += (topic_count[a_i] - 1) * (difficulty_count[b_i] - 1)\n        \n        valid_combinations = total_combinations - invalid_combinations\n        results.append(valid_combinations)\n    \n    for result in results:\n        print(result)\n\nsolve()\n"}}], "scores": [], "pass_results": [true, true, false, false, true, false, true, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 129, "prompt": "Monocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n). It also has a difficulty b_i (an integer from 1 to n). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems he selects for the problemset should satisfy specific conditions. He has to ensure that they satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\n\n\nYour task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 111}
