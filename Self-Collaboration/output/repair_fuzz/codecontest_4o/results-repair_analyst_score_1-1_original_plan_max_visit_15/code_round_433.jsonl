{"name": "1620_B. Triangles on a Rectangle", "description": "A rectangle with its opposite corners in (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\n\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "tags": ["geometry", "greedy", "math"], "difficulty": 8, "id": 1620, "sample_io": [{"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}], "test_list": [{"input": "1\n99 99\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["99\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["25\n70\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n78\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n77\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "1\n99 164\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["164\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n49\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 7\n2 2 4\n", "output": ["25\n42\n88\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["20\n70\n44\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n112\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 4\n", "output": ["25\n42\n210\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n49\n66\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["25\n42\n66\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n91\n42\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n77\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n18 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n126\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n63\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n72\n"]}, {"input": "3\n5 8\n2 1 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n70\n"]}, {"input": "1\n198 164\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["198\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n63\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 8\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n48\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 3 5 6\n25 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n75\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n70\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 1 10\n3 0 3 7\n2 2 4\n", "output": ["30\n42\n77\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 1\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n33\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n117\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n22 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n49\n132\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["45\n42\n66\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["45\n63\n66\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n182\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["32\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n17 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n51\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 8 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 7\n", "output": ["25\n70\n55\n"]}, {"input": "3\n4 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 4 4\n", "output": ["24\n117\n77\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["25\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n20 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 1 5 6\n11 5\n3 1 2 8\n3 2 1 10\n3 0 3 7\n2 2 4\n", "output": ["30\n50\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n56\n210\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 5 5\n20 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n84\n60\n"]}, {"input": "3\n2 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["24\n56\n210\n"]}, {"input": "1\n99 99\n2 1 2\n2 0 4\n2 5 6\n2 7 8\n", "output": ["396\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 7\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["40\n42\n77\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n20 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n60\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["75\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 13\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n156\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["24\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 9\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n54\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 16\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n60\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 6\n", "output": ["32\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 2\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n49\n33\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 1 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 7\n2 2 4\n", "output": ["25\n56\n88\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 11\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["50\n42\n77\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 2\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["24\n42\n77\n"]}, {"input": "3\n5 24\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 4\n", "output": ["48\n42\n210\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["25\n49\n66\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 7\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n33\n"]}, {"input": "3\n5 8\n2 1 5\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["32\n91\n42\n"]}, {"input": "3\n5 8\n2 1 4\n3 1 3 4\n3 0 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["30\n42\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["24\n70\n44\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n18 7\n2 5 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n54\n35\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n21 1\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n63\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 8\n2 2 4\n", "output": ["45\n42\n77\n"]}, {"input": "3\n10 8\n2 1 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 2 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["50\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 0\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 3\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n63\n33\n"]}, {"input": "3\n5 12\n2 2 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 16\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n84\n77\n"]}, {"input": "3\n5 8\n2 1 7\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["48\n42\n35\n"]}, {"input": "3\n5 9\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 3 5 6\n25 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["27\n42\n75\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 2\n3 7 5 6\n9 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n42\n90\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 10\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n60\n182\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 4\n2 4 4\n", "output": ["40\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 8\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 8 3\n20 5\n3 1 12 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["35\n84\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 16\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["20\n42\n75\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 6\n3 1 4 6\n2 4 5\n0 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["32\n42\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n42\n121\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 12\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n72\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 0 4\n", "output": ["20\n70\n77\n"]}, {"input": "3\n5 8\n2 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n78\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["25\n70\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 8\n2 4 2\n10 7\n2 0 4\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["35\n42\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 15\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n84\n72\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 4\n2 2 4\n", "output": ["24\n70\n55\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 4 9\n2 2 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n35\n77\n"]}, {"input": "3\n5 12\n2 2 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 4 16\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["45\n84\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 5\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 8 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 4 4\n2 2 4\n", "output": ["20\n70\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 0\n1 7\n2 3 9\n2 1 14\n3 1 3 5\n3 4 5 11\n16 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n112\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 10\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["30\n70\n182\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 2 7\n3 1 3 1\n3 4 5 5\n17 5\n3 1 6 8\n3 4 6 8\n3 1 3 3\n2 2 4\n", "output": ["25\n35\n35\n"]}, {"input": "3\n1 12\n2 1 6\n3 2 4 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 8\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 1\n", "output": ["60\n42\n112\n"]}, {"input": "3\n3 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 20\n2 2 3\n", "output": ["24\n56\n420\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 0 4 6\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 5 5\n20 5\n3 2 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n84\n60\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 0 6 8\n3 3 6 8\n3 2 4 4\n2 4 4\n", "output": ["40\n49\n80\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 8 3\n20 5\n3 1 12 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["75\n84\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 3 17\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 10 8\n3 1 3 4\n2 2 4\n", "output": ["75\n98\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n108\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n56\n33\n"]}, {"input": "3\n5 17\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 15\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["68\n84\n72\n"]}, {"input": "3\n9 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 4 9\n2 2 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["45\n35\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 9\n2 8 5\n10 7\n2 3 3\n2 1 11\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["40\n70\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 6 5 6\n11 6\n3 1 6 8\n3 3 6 8\n3 2 2 2\n2 2 4\n", "output": ["32\n42\n42\n"]}, {"input": "3\n5 8\n2 1 1\n3 1 3 4\n3 1 4 6\n2 4 0\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 7 8\n3 1 3 4\n2 2 7\n", "output": ["25\n63\n55\n"]}, {"input": "1\n53 164\n2 1 2\n2 0 4\n2 5 6\n2 9 8\n", "output": ["656\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n1 8\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 3 5\n3 0 3 3\n2 2 4\n", "output": ["24\n48\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 0 6\n2 4 5\n18 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n54\n121\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 2 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n108\n30\n"]}, {"input": "3\n5 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n13 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n56\n39\n"]}, {"input": "3\n5 17\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 28\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["68\n175\n72\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 9\n2 8 5\n10 7\n2 3 3\n2 1 15\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["40\n98\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 0 3 4\n3 1 4 3\n2 4 7\n10 7\n2 3 4\n2 1 7\n3 1 0 4\n3 1 5 6\n11 5\n3 1 6 8\n3 3 2 8\n3 0 3 3\n2 2 5\n", "output": ["32\n50\n35\n"]}, {"input": "3\n1 12\n2 1 6\n3 2 4 4\n3 1 4 7\n2 4 5\n10 7\n2 3 1\n2 1 7\n3 1 3 4\n3 7 5 6\n16 8\n3 1 6 8\n3 3 11 8\n3 0 3 13\n2 2 1\n", "output": ["60\n42\n208\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n19 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 6 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 7\n2 4 4\n", "output": ["25\n76\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 0 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 2 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 14\n3 4 6 1\n3 0 3 3\n2 2 4\n", "output": ["32\n42\n65\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 0\n3 1 4 6\n2 4 1\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n8 4\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 0 4\n", "output": ["25\n42\n32\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 0 6\n2 4 5\n18 7\n2 3 15\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n84\n121\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 7\n3 4 5 6\n11 5\n3 1 6 0\n3 3 10 8\n3 2 5 4\n2 2 6\n", "output": ["32\n60\n44\n"]}, {"input": "3\n10 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n13 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["50\n56\n39\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 10\n3 0 3 8\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 5\n3 1 3 7\n2 2 4\n", "output": ["25\n80\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 11\n2 8 5\n10 7\n2 3 3\n2 1 15\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["50\n98\n35\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n19 7\n2 3 10\n2 1 7\n3 -1 3 4\n3 4 6 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 7\n2 4 4\n", "output": ["25\n95\n70\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n20 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 0 6 8\n3 3 6 8\n3 2 4 4\n2 4 1\n", "output": ["40\n80\n80\n"]}, {"input": "1\n53 202\n2 1 2\n2 0 4\n2 3 6\n2 9 8\n", "output": ["808\n"]}, {"input": "3\n5 4\n2 1 4\n3 0 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 2 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 14\n3 4 6 1\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n65\n"]}, {"input": "3\n5 13\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n4 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 2 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["39\n108\n30\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 1 4\n3 7 5 6\n16 6\n3 2 6 0\n3 3 11 8\n3 0 3 6\n2 2 1\n", "output": ["36\n42\n96\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 10\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 8\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n77\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 0\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 3\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 3 5 6\n14 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 8\n2 1 1\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 1 10\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n78\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 0 4\n3 4 5 6\n11 5\n3 1 6 12\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 6\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n2 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 6 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 8 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 3\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 0 6 8\n3 0 3 4\n2 2 0\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 5\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["20\n70\n44\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 3\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n112\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n42\n210\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n12 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 6\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 0 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 11 8\n3 1 6 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 0 4\n3 1 8 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 5\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n77\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 6 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n18 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n126\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 0 2\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n63\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["32\n42\n70\n"]}], "task_id": "codecontest/148", "repair_prompt": ["A rectangle with its opposite corners located at (0, 0) and (w, h) and sides parallel to the axes is depicted on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that:\n\n  * exactly two of them belong to the same side of a rectangle;\n  * the area of a triangle formed by them is maximum possible.\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "A rectangle with its opposite corners located at (0, 0) and (w, h) and sides parallel to the axes is depicted on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. These lattice points do not occupy the corners of the rectangle. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that:\n\n  * exactly two of them belong to the same side of a rectangle;\n  * the area of a triangle formed by them is maximum possible.\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "A rectangle with its opposite corners located at (0, 0) and (w, h) and sides parallel to the axes is depicted on a plane. You are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner, with at least two points on every side. Your task is to choose three points in such a way that: exactly two of them belong to the same side of a rectangle; the area of a triangle formed by them is maximum possible. Print the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0) and top side (y = h)\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Left side (x = 0) and right side (x = w)\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum distance on each side\n        max_horizontal_bottom = (horizontal_bottom[-1] - horizontal_bottom[0]) * h\n        max_horizontal_top = (horizontal_top[-1] - horizontal_top[0]) * h\n        max_vertical_left = (vertical_left[-1] - vertical_left[0]) * w\n        max_vertical_right = (vertical_right[-1] - vertical_right[0]) * w\n        \n        # Find the maximum doubled area\n        max_area = max(max_horizontal_bottom, max_horizontal_top, max_vertical_left, max_vertical_right)\n        results.append(max_area)\n    \n    return results\n\ndef parse_input(data):\n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return test_cases\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    test_cases = parse_input(data)\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for case in test_cases:\n        w, h, bottom_points, top_points, left_points, right_points = case\n        \n        # Calculate maximum distance on each side\n        max_bottom_distance = bottom_points[-1] - bottom_points[0]\n        max_top_distance = top_points[-1] - top_points[0]\n        max_left_distance = left_points[-1] - left_points[0]\n        max_right_distance = right_points[-1] - right_points[0]\n        \n        # Calculate maximum doubled area for each side\n        max_area_bottom = max_bottom_distance * h\n        max_area_top = max_top_distance * h\n        max_area_left = max_left_distance * w\n        max_area_right = max_right_distance * w\n        \n        # Determine the maximum doubled area\n        max_doubled_area = max(max_area_bottom, max_area_top, max_area_left, max_area_right)\n        results.append(max_doubled_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        bottom_points = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        top_points = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        left_points = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        right_points = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, bottom_points, top_points, left_points, right_points))\n    \n    return test_cases\n\ndef main():\n    test_cases = parse_input()\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side\n        k1 = int(data[index])\n        x1_min = int(data[index + 1])\n        x1_max = int(data[index + k1])\n        index += k1 + 1\n        \n        # Read points on the top side\n        k2 = int(data[index])\n        x2_min = int(data[index + 1])\n        x2_max = int(data[index + k2])\n        index += k2 + 1\n        \n        # Read points on the left side\n        k3 = int(data[index])\n        y1_min = int(data[index + 1])\n        y1_max = int(data[index + k3])\n        index += k3 + 1\n        \n        # Read points on the right side\n        k4 = int(data[index])\n        y2_min = int(data[index + 1])\n        y2_max = int(data[index + k4])\n        index += k4 + 1\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (x1_max - x1_min) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (x2_max - x2_min) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (y1_max - y1_min) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (y2_max - y2_min) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_0, horizontal_h, vertical_0, vertical_w = case\n        \n        # Calculate maximum base lengths for each side\n        max_base_horizontal_0 = horizontal_0[-1] - horizontal_0[0]\n        max_base_horizontal_h = horizontal_h[-1] - horizontal_h[0]\n        max_base_vertical_0 = vertical_0[-1] - vertical_0[0]\n        max_base_vertical_w = vertical_w[-1] - vertical_w[0]\n        \n        # Calculate maximum doubled area for each side\n        max_area_horizontal_0 = max_base_horizontal_0 * h\n        max_area_horizontal_h = max_base_horizontal_h * h\n        max_area_vertical_0 = max_base_vertical_0 * w\n        max_area_vertical_w = max_base_vertical_w * w\n        \n        # Determine the maximum doubled area for the current test case\n        max_doubled_area = max(max_area_horizontal_0, max_area_horizontal_h, max_area_vertical_0, max_area_vertical_w)\n        \n        results.append(max_doubled_area)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k1 = int(data[index])\n        horizontal_0 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        horizontal_h = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        k3 = int(data[index])\n        vertical_0 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        vertical_w = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        test_cases.append((w, h, horizontal_0, horizontal_h, vertical_0, vertical_w))\n    \n    results\nmain()", "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_0, horizontal_h, vertical_0, vertical_w = case\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Horizontal side y = 0\n        max_area = max(max_area, (horizontal_0[-1] - horizontal_0[0]) * h)\n        \n        # Horizontal side y = h\n        max_area = max(max_area, (horizontal_h[-1] - horizontal_h[0]) * h)\n        \n        # Vertical side x = 0\n        max_area = max(max_area, (vertical_0[-1] - vertical_0[0]) * w)\n        \n        # Vertical side x = w\n        max_area = max(max_area, (vertical_w[-1] - vertical_w[0]) * w)\n        \n        results.append(max_area)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nindex = 0\nt = int(data[index])\nindex += 1\n\ntest_cases = []\nfor _ in range(t):\n    w = int(data[index])\n    h = int(data[index + 1])\n    index += 2\n    \n    k1 = int(data[index])\n    horizontal_0 = list(map(int, data[index + 1:index + 1 + k1]))\n    index += 1 + k1\n    \n    k2 = int(data[index])\n    horizontal_h = list(map(int, data[index + 1:index + 1 + k2]))\n    index += 1 + k2\n    \n    k3 = int(data[index])\n    vertical_0 = list(map(int, data[index + 1:index + 1 + k3]))\n    index += 1 + k3\n    \n    k4 = int(data[index])\n    vertical_w = list(map(int, data[index + 1:index + 1 + k4]))\n    index += 1 + k4\n    \n    test_cases.append((w, h, horizontal_0, horizontal_h, vertical_0, vertical_w))\n\nresults = max_doubled_area(t, test_cases)\nfor result in results:\n    print(result)\n\nmain()", "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum base for horizontal sides\n        max_base_bottom = horizontal_bottom[-1] - horizontal_bottom[0]\n        max_base_top = horizontal_top[-1] - horizontal_top[0]\n        \n        # Calculate maximum height for vertical sides\n        max_height_left = vertical_left[-1] - vertical_left[0]\n        max_height_right = vertical_right[-1] - vertical_right[0]\n        \n        # Calculate maximum doubled area for each configuration\n        max_area = max(\n            max_base_bottom * h,  # Bottom side with top point\n            max_base_top * h,     # Top side with bottom point\n            max_height_left * w,  # Left side with right point\n            max_height_right * w  # Right side with left point\n        )\n        \n        results.append(max_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return test_cases\n\ndef main():\n    test_cases = parse_input()\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x1_min = int(data[index + 1])\n        x1_max = int(data[index + k1])\n        index += k1 + 1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x2_min = int(data[index + 1])\n        x2_max = int(data[index + k2])\n        index += k2 + 1\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y1_min = int(data[index + 1])\n        y1_max = int(data[index + k3])\n        index += k3 + 1\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y2_min = int(data[index + 1])\n        y2_max = int(data[index + k4])\n        index += k4 + 1\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0) and top side (y = h)\n        max_area = max(max_area, (x1_max - x1_min) * h)\n        max_area = max(max_area, (x2_max - x2_min) * h)\n        \n        # Left side (x = 0) and right side (x = w)\n        max_area = max(max_area, (y1_max - y1_min) * w)\n        max_area = max(max_area, (y2_max - y2_min) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right = case\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (horizontal_bottom[-1] - horizontal_bottom[0]) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (horizontal_top[-1] - horizontal_top[0]) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (vertical_left[-1] - vertical_left[0]) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (vertical_right[-1] - vertical_right[0]) * w)\n        \n        results.append(max_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k1 = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        k3 = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return t, test_cases\n\ndef main():\n    t, test_cases = parse_input()\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area\n        max_area = 0\n        \n        # Horizontal sides\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Vertical sides\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0) and top side (y = h)\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Left side (x = 0) and right side (x = w)\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points for each side.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers w and h representing the width and height of the rectangle.\",\n        \"For each side of the rectangle, read the number of points k and the list of coordinates.\"\n      ]\n    },\n    {\n      \"description\": \"Identify the possible triangles that can be formed by choosing two points from the same side and one point from another side.\",\n      \"steps\": [\n        \"For each test case, iterate over each side of the rectangle.\",\n        \"For each pair of points on the same side, iterate over points on the other sides to form triangles.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the area of each triangle formed and determine the maximum area.\",\n      \"steps\": [\n        \"For each triangle formed, calculate the area using the formula for the area of a triangle given three points.\",\n        \"Keep track of the maximum area encountered.\"\n      ]\n    },\n    {\n      \"description\": \"Output the doubled maximum area for each test case.\",\n      \"steps\": [\n        \"Multiply the maximum area by 2 to get the doubled area.\",\n        \"Print the doubled area for each test case.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data for each test case.\",\n    \"For each test case, iterate over each side of the rectangle to form possible triangles.\",\n    \"Calculate the area of each triangle and track the maximum area.\",\n    \"Output the doubled maximum area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle': A four-sided polygon with opposite sides equal and parallel, and all angles are right angles.\n    'lattice points': Points with integer coordinates.\n    'triangle': A polygon with three edges and three vertices.\n    Explanation: The requirement involves forming triangles using lattice points on the sides of a rectangle and calculating the maximum possible area of such triangles.\n\n# [phrase showing quantity relationship]\n    'at least two points': Indicates that there are a minimum of two points on each side of the rectangle.\n    'maximum possible': Refers to finding the largest area that can be formed by a triangle using the given points.\n    Implementation: Use loops to iterate through combinations of points to find the maximum area.\n\n# [degree adverb]\n    'maximum': Refers to the largest area of a triangle that can be formed.\n    Implementation: Use a variable to keep track of the largest area encountered during the iteration.\n\n# [code logic]\n    The steps for forming triangles and calculating their areas should be implemented simultaneously. Specifically, the steps:\n    - \"For each pair of points on the same side, iterate over points on the other sides to form triangles.\"\n    - \"Calculate the area using the formula for the area of a triangle given three points.\"\n    These can be combined into a single loop structure where the area is calculated immediately after forming a triangle.\n\n# [edge case]\n    Case 1: When all points on one side are collinear with a point on another side, e.g., points on the horizontal side at y=0 and a point on the vertical side at x=0.\n    Expected output: The area will be zero since the points are collinear.\n    Case 2: When the rectangle is very large, e.g., w=10^6, h=10^6, and points are at extreme ends.\n    Expected output: The area will be large, but the calculation should handle large numbers without overflow.\n    Case 3: When there are only two points on each side, e.g., minimal configuration.\n    Expected output: The function should still correctly calculate the area using the available points.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through combinations of points and calculating the area will naturally handle these cases.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0) and top side (y = h)\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Left side (x = 0) and right side (x = w)\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 137)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0) and top side (y = h)\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Left side (x = 0) and right side (x = w)\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side that are farthest apart for each side of the rectangle.\",\n      \"output\": \"The maximum distance between two points on the same side for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from an adjacent side.\",\n      \"output\": \"The maximum doubled area of the triangle for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"For each test case, iterate over each side of the rectangle and find the two points that are farthest apart.\",\n    \"Calculate the maximum possible area of a triangle by considering combinations of two points from the same side and one point from an adjacent side.\",\n    \"For each combination, compute the area of the triangle and keep track of the maximum area found.\",\n    \"Output the doubled maximum area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates that lie on the sides of the rectangle but not at the corners.\n\n    'doubled area of a triangle'\n    Explanation: The requirement specifies that the area of the triangle should be doubled, which means the output should be twice the actual area of the triangle formed by the points.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle will have a minimum of two points, ensuring that a triangle can always be formed.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: This indicates that we need to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n    The steps to find the two points on the same side that are farthest apart and calculate the maximum possible area of a triangle should be considered simultaneously. This can be done by iterating over each side, calculating the maximum distance between two points, and then using this information to compute the maximum area of a triangle.\n\n# [edge case]\n    1. A rectangle with minimum dimensions and minimum points:\n       Input: \n       ```\n       1\n       3 3\n       2 1 2\n       2 1 2\n       2 1 2\n       2 1 2\n       ```\n       Expected Output: 6\n       Explanation: The maximum triangle is formed by points (0, 1), (0, 2), and (3, 2) with a doubled area of 6.\n\n    2. A rectangle with maximum width and minimum height:\n       Input:\n       ```\n       1\n       1000000 3\n       2 1 999999\n       2 1 999999\n       2 1 2\n       2 1 2\n       ```\n       Expected Output: 1999998\n       Explanation: The maximum triangle is formed by points (0, 1), (0, 2), and (1000000, 2) with a doubled area of 1999998.\n\n    3. A rectangle with minimum width and maximum height:\n       Input:\n       ```\n       1\n       3 1000000\n       2 1 2\n       2 1 2\n       2 1 999", "Round_0": {"code": "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum distance on each side\n        max_horizontal_bottom = (horizontal_bottom[-1] - horizontal_bottom[0]) * h\n        max_horizontal_top = (horizontal_top[-1] - horizontal_top[0]) * h\n        max_vertical_left = (vertical_left[-1] - vertical_left[0]) * w\n        max_vertical_right = (vertical_right[-1] - vertical_right[0]) * w\n        \n        # Find the maximum doubled area\n        max_area = max(max_horizontal_bottom, max_horizontal_top, max_vertical_left, max_vertical_right)\n        results.append(max_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return test_cases\n\ndef main():\n    test_cases = parse_input()\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: parse_input() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum distance on each side\n        max_horizontal_bottom = (horizontal_bottom[-1] - horizontal_bottom[0]) * h\n        max_horizontal_top = (horizontal_top[-1] - horizontal_top[0]) * h\n        max_vertical_left = (vertical_left[-1] - vertical_left[0]) * w\n        max_vertical_right = (vertical_right[-1] - vertical_right[0]) * w\n        \n        # Find the maximum doubled area\n        max_area = max(max_horizontal_bottom, max_horizontal_top, max_vertical_left, max_vertical_right)\n        results.append(max_area)\n    \n    return results\n\ndef parse_input(data):\n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return test_cases\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    test_cases = parse_input(data)\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side that are farthest apart for each side of the rectangle.\",\n      \"output\": \"The maximum distance between two points on the same side for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from an adjacent side.\",\n      \"output\": \"The maximum doubled area of the triangle for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the dimensions of the rectangle (w, h).\",\n    \"  b. Read the points on the bottom side and calculate the maximum distance between two points.\",\n    \"  c. Read the points on the top side and calculate the maximum distance between two points.\",\n    \"  d. Read the points on the left side and calculate the maximum distance between two points.\",\n    \"  e. Read the points on the right side and calculate the maximum distance between two points.\",\n    \"  f. For each side, calculate the maximum possible area of a triangle using the maximum distance from that side and the height or width of the rectangle.\",\n    \"  g. Determine the maximum doubled area from the calculated areas for each side.\",\n    \"Output the maximum doubled area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of the rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle and then doubling it. This is a common technique to avoid dealing with fractions when the area is guaranteed to be an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle will have a minimum of two points, ensuring that a triangle can always be formed.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n    Steps b, c, d, and e should be implemented simultaneously for efficiency. You can calculate the maximum distance between two points on each side in a single pass through the input data for each test case.\n\n# [edge case]\n    1. Test case with minimum dimensions and points:\n       Input: \n       ```\n       1\n       3 3\n       2 1 2\n       2 1 2\n       2 1 2\n       2 1 2\n       ```\n       Expected Output: 6\n       Explanation: The maximum triangle is formed by points (1, 0), (2, 0), and (3, 1) with a doubled area of 6.\n\n    2. Test case with points only on two sides:\n       Input:\n       ```\n       1\n       5 5\n       2 1 4\n       2 1 4\n       2 1 4\n       2 1 4\n       ```\n       Expected Output: 20\n       Explanation: The maximum triangle is formed by points (1, 0), (4, 0), and (5, 4) with a doubled area of 20.\n\n    3. Test case with maximum possible points on one side:\n       Input:\n       ```\n       1\n       5 5\n       200000 1 2 3 ... 200000\n       2 1 4\n       2 1 4\n       2 1 4\n       ```\n       Expected Output: 20\n       Explanation: The maximum triangle", "Round_0": {"code": "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for case in test_cases:\n        w, h, bottom_points, top_points, left_points, right_points = case\n        \n        # Calculate maximum distance on each side\n        max_bottom_distance = bottom_points[-1] - bottom_points[0]\n        max_top_distance = top_points[-1] - top_points[0]\n        max_left_distance = left_points[-1] - left_points[0]\n        max_right_distance = right_points[-1] - right_points[0]\n        \n        # Calculate maximum doubled area for each side\n        max_area_bottom = max_bottom_distance * h\n        max_area_top = max_top_distance * h\n        max_area_left = max_left_distance * w\n        max_area_right = max_right_distance * w\n        \n        # Determine the maximum doubled area\n        max_doubled_area = max(max_area_bottom, max_area_top, max_area_left, max_area_right)\n        results.append(max_doubled_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        bottom_points = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        top_points = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        left_points = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        right_points = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, bottom_points, top_points, left_points, right_points))\n    \n    return test_cases\n\ndef main():\n    test_cases = parse_input()\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: parse_input() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for case in test_cases:\n        w, h, bottom_points, top_points, left_points, right_points = case\n        \n        # Calculate maximum distance on each side\n        max_bottom_distance = bottom_points[-1] - bottom_points[0]\n        max_top_distance = top_points[-1] - top_points[0]\n        max_left_distance = left_points[-1] - left_points[0]\n        max_right_distance = right_points[-1] - right_points[0]\n        \n        # Calculate maximum doubled area for each side\n        max_area_bottom = max_bottom_distance * h\n        max_area_top = max_top_distance * h\n        max_area_left = max_left_distance * w\n        max_area_right = max_right_distance * w\n        \n        # Determine the maximum doubled area\n        max_doubled_area = max(max_area_bottom, max_area_top, max_area_left, max_area_right)\n        results.append(max_doubled_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        bottom_points = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        top_points = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        left_points = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        right_points = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, bottom_points, top_points, left_points, right_points))\n    \n    return test_cases\n\ndef main():\n    test_cases = parse_input()\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side that are farthest apart for each side of the rectangle.\",\n      \"output\": \"The maximum distance between two points on the same side for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from an adjacent side.\",\n      \"output\": \"The maximum doubled area of the triangle for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"For each test case, iterate over each side of the rectangle and find the two points that are farthest apart.\",\n    \"Calculate the maximum possible area of a triangle by considering combinations of two points from the same side and one point from an adjacent side.\",\n    \"For each test case, output the maximum doubled area of the triangle.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle formed by three points and then doubling it. This is because the area of a triangle formed by lattice points is always an integer when doubled.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that for each side of the rectangle, there are a minimum of two lattice points. This ensures that a triangle can be formed by selecting points from different sides.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed under the given conditions. This involves selecting points that maximize the base and height of the triangle.\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but the calculation of the maximum possible area of a triangle (step 3) involves considering combinations of points from different sides, which can be done in a nested loop or similar structure to ensure all combinations are checked.\n\n# [edge case]\n    1. A rectangle with minimum dimensions and minimum points:\n       Input: 3 3\n              2 1 2\n              2 1 2\n              2 1 2\n              2 1 2\n       Expected Output: 4\n       Explanation: The maximum triangle is formed by points (1,0), (2,0), and (1,3) with a doubled area of 4.\n\n    2. All points on one side are the same:\n       Input: 5 5\n              2 2 2\n              2 3 4\n              2 1 2\n              2 4 5\n       Expected Output: 10\n       Explanation: The maximum triangle is formed by points (2,0), (2,5), and (5,4) with a doubled area of 10.\n\n    3. Maximum number of points on one side:\n       Input: 5 5\n              200000 1 2 ... 200000\n              2 1 2\n              2 1 2\n              2 1 2\n       Expected Output: 999995\n       Explanation:", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side\n        k1 = int(data[index])\n        x1_min = int(data[index + 1])\n        x1_max = int(data[index + k1])\n        index += k1 + 1\n        \n        # Read points on the top side\n        k2 = int(data[index])\n        x2_min = int(data[index + 1])\n        x2_max = int(data[index + k2])\n        index += k2 + 1\n        \n        # Read points on the left side\n        k3 = int(data[index])\n        y1_min = int(data[index + 1])\n        y1_max = int(data[index + k3])\n        index += k3 + 1\n        \n        # Read points on the right side\n        k4 = int(data[index])\n        y2_min = int(data[index + 1])\n        y2_max = int(data[index + k4])\n        index += k4 + 1\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (x1_max - x1_min) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (x2_max - x2_min) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (y1_max - y1_min) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (y2_max - y2_min) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 135)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side\n        k1 = int(data[index])\n        x1_min = int(data[index + 1])\n        x1_max = int(data[index + k1])\n        index += k1 + 1\n        \n        # Read points on the top side\n        k2 = int(data[index])\n        x2_min = int(data[index + 1])\n        x2_max = int(data[index + k2])\n        index += k2 + 1\n        \n        # Read points on the left side\n        k3 = int(data[index])\n        y1_min = int(data[index + 1])\n        y1_max = int(data[index + k3])\n        index += k3 + 1\n        \n        # Read points on the right side\n        k4 = int(data[index])\n        y2_min = int(data[index + 1])\n        y2_max = int(data[index + k4])\n        index += k4 + 1\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (x1_max - x1_min) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (x2_max - x2_min) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (y1_max - y1_min) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (y2_max - y2_min) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including rectangle dimensions and lattice points on each side.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side of the rectangle that will form the base of the triangle with the maximum possible length.\",\n      \"output\": \"The maximum possible length of the base for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible height of the triangle by selecting a point from the opposite side of the rectangle.\",\n      \"output\": \"The maximum possible height for each pair of points forming the base.\"\n    },\n    {\n      \"description\": \"Compute the doubled area of the triangle using the formula: doubled area = base * height.\",\n      \"output\": \"The doubled area of the triangle for each test case.\"\n    },\n    {\n      \"description\": \"Determine the maximum doubled area across all possible triangles for each test case.\",\n      \"output\": \"The maximum doubled area for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Parse the rectangle dimensions and lattice points on each side.\",\n    \"  b. For each side of the rectangle, calculate the maximum possible base length by considering the first and last points on that side.\",\n    \"  c. For each pair of points forming the base, calculate the maximum possible height by considering the farthest point on the opposite side.\",\n    \"  d. Compute the doubled area of the triangle using the base and height.\",\n    \"  e. Track the maximum doubled area found for the current test case.\",\n    \"Output the maximum doubled area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle': A four-sided polygon with opposite sides equal and parallel, and all angles are right angles.\n    'lattice points': Points with integer coordinates.\n    'triangle': A polygon with three edges and three vertices.\n    Explanation: The requirement involves calculating the area of a triangle formed by lattice points on the sides of a rectangle.\n\n# [phrase showing quantity relationship]\n    'maximum possible': Refers to finding the largest area that can be formed by a triangle using the given points.\n    Explanation: The task is to maximize the area of the triangle formed by the points.\n\n# [degree adverb]\n    'maximum': Refers to the largest possible value.\n    Explanation: The requirement is to find the triangle with the largest area.\n\n# [code logic]\n    Steps b and c should be considered simultaneously. For each side, calculate the base and height together to determine the area.\n    Implementation: For each side, calculate the base using the first and last points, and simultaneously calculate the height using the farthest point on the opposite side.\n\n# [edge case]\n    Case 1: When all points on one side are the same, e.g., (0, 1), (0, 1), (5, 4)\n    Expected output: 0\n    Explanation: The base length is zero, so the area is zero.\n    \n    Case 2: When the rectangle is very narrow, e.g., w = 3, h = 1000000, with points (1, 0), (2, 0), (0, 500000)\n    Expected output: 3000000\n    Explanation: The maximum base is 1, and the height is 1000000, so the doubled area is 2 * 1 * 1000000 = 2000000.\n    \n    Case 3: When all points are on one side, e.g., (0, 1), (0, 2), (0, 3)\n    Expected output: 0\n    Explanation: No valid triangle can be formed as all points are collinear.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    if base_length == 0:\n        return 0\n    ```\n\nYES", "Round_0": {"code": "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_0, horizontal_h, vertical_0, vertical_w = case\n        \n        # Calculate maximum base lengths for each side\n        max_base_horizontal_0 = horizontal_0[-1] - horizontal_0[0]\n        max_base_horizontal_h = horizontal_h[-1] - horizontal_h[0]\n        max_base_vertical_0 = vertical_0[-1] - vertical_0[0]\n        max_base_vertical_w = vertical_w[-1] - vertical_w[0]\n        \n        # Calculate maximum doubled area for each side\n        max_area_horizontal_0 = max_base_horizontal_0 * h\n        max_area_horizontal_h = max_base_horizontal_h * h\n        max_area_vertical_0 = max_base_vertical_0 * w\n        max_area_vertical_w = max_base_vertical_w * w\n        \n        # Determine the maximum doubled area for the current test case\n        max_doubled_area = max(max_area_horizontal_0, max_area_horizontal_h, max_area_vertical_0, max_area_vertical_w)\n        \n        results.append(max_doubled_area)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k1 = int(data[index])\n        horizontal_0 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        horizontal_h = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        k3 = int(data[index])\n        vertical_0 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        vertical_w = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        test_cases.append((w, h, horizontal_0, horizontal_h, vertical_0, vertical_w))\n    \n    results", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, rectangle dimensions, and lattice points for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the rectangle dimensions (w, h).\",\n        \"Read the lattice points for the two horizontal sides and two vertical sides.\"\n      ]\n    },\n    {\n      \"description\": \"Identify the pairs of points on the same side of the rectangle.\",\n      \"steps\": [\n        \"For each side, identify all pairs of points that can be selected.\",\n        \"Ensure that the points are not corners of the rectangle.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the area of triangles formed by selecting two points from the same side and one point from another side.\",\n      \"steps\": [\n        \"For each pair of points on the same side, select a third point from another side.\",\n        \"Calculate the area of the triangle formed by these three points.\",\n        \"Double the area to meet the requirement.\"\n      ]\n    },\n    {\n      \"description\": \"Determine the maximum doubled area for each test case.\",\n      \"steps\": [\n        \"Track the maximum doubled area found for each test case.\",\n        \"Compare the doubled areas of all possible triangles and select the maximum.\"\n      ]\n    },\n    {\n      \"description\": \"Output the maximum doubled area for each test case.\",\n      \"steps\": [\n        \"Print the maximum doubled area for each test case.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data for each test case.\",\n    \"For each test case, identify pairs of points on the same side of the rectangle.\",\n    \"Calculate the doubled area of triangles formed by these points and track the maximum area.\",\n    \"Output the maximum doubled area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle with sides parallel to the axes'\n    This means the rectangle is aligned with the x and y axes, making it easier to determine which points lie on which sides.\n\n    'lattice points'\n    These are points with integer coordinates, which simplifies calculations for areas and distances.\n\n    'doubled area of a triangle'\n    The requirement specifies that the area of the triangle should be doubled, which is a common technique to avoid dealing with fractions in computational geometry.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    This means that each side of the rectangle will have a minimum of two points, ensuring that there are always pairs of points to form triangles.\n\n# [degree adverb]\n    'maximum possible'\n    This indicates that the task is to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n    The steps for calculating the area of triangles and determining the maximum area should be considered simultaneously. Specifically, when iterating through pairs of points on the same side, the calculation of the area and comparison to find the maximum should be done in the same loop to optimize performance.\n\n# [edge case]\n    Test case with minimum dimensions and points:\n    3 3\n    2 1 2\n    2 1 2\n    2 1 2\n    2 1 2\n    Expected output: 6\n    Explanation: The largest triangle can be formed by points (1, 0), (2, 0), and (3, 3), with a doubled area of 6.\n\n    Test case with points only on one side:\n    5 5\n    2 1 4\n    2 1 4\n    2 1 4\n    2 1 4\n    Expected output: 0\n    Explanation: No valid triangle can be formed as all points are on the same side.\n\n    Test case with maximum dimensions:\n    1000000 1000000\n    2 1 999999\n    2 1 999999\n    2 1 999999\n    2 1 999999\n    Expected output: 999999000000\n    Explanation: The largest triangle can be formed by points (1, 0), (999999, 0), and (1000000, 1000000), with", "Round_0": {"code": "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_0, horizontal_h, vertical_0, vertical_w = case\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Horizontal side y = 0\n        max_area = max(max_area, (horizontal_0[-1] - horizontal_0[0]) * h)\n        \n        # Horizontal side y = h\n        max_area = max(max_area, (horizontal_h[-1] - horizontal_h[0]) * h)\n        \n        # Vertical side x = 0\n        max_area = max(max_area, (vertical_0[-1] - vertical_0[0]) * w)\n        \n        # Vertical side x = w\n        max_area = max(max_area, (vertical_w[-1] - vertical_w[0]) * w)\n        \n        results.append(max_area)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nindex = 0\nt = int(data[index])\nindex += 1\n\ntest_cases = []\nfor _ in range(t):\n    w = int(data[index])\n    h = int(data[index + 1])\n    index += 2\n    \n    k1 = int(data[index])\n    horizontal_0 = list(map(int, data[index + 1:index + 1 + k1]))\n    index += 1 + k1\n    \n    k2 = int(data[index])\n    horizontal_h = list(map(int, data[index + 1:index + 1 + k2]))\n    index += 1 + k2\n    \n    k3 = int(data[index])\n    vertical_0 = list(map(int, data[index + 1:index + 1 + k3]))\n    index += 1 + k3\n    \n    k4 = int(data[index])\n    vertical_w = list(map(int, data[index + 1:index + 1 + k4]))\n    index += 1 + k4\n    \n    test_cases.append((w, h, horizontal_0, horizontal_h, vertical_0, vertical_w))\n\nresults = max_doubled_area(t, test_cases)\nfor result in results:\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 93)"}, "Round_1": {"code": "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_0, horizontal_h, vertical_0, vertical_w = case\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Horizontal side y = 0\n        max_area = max(max_area, (horizontal_0[-1] - horizontal_0[0]) * h)\n        \n        # Horizontal side y = h\n        max_area = max(max_area, (horizontal_h[-1] - horizontal_h[0]) * h)\n        \n        # Vertical side x = 0\n        max_area = max(max_area, (vertical_0[-1] - vertical_0[0]) * w)\n        \n        # Vertical side x = w\n        max_area = max(max_area, (vertical_w[-1] - vertical_w[0]) * w)\n        \n        results.append(max_area)\n    \n    return results\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nindex = 0\nt = int(data[index])\nindex += 1\n\ntest_cases = []\nfor _ in range(t):\n    w = int(data[index])\n    h = int(data[index + 1])\n    index += 2\n    \n    k1 = int(data[index])\n    horizontal_0 = list(map(int, data[index + 1:index + 1 + k1]))\n    index += 1 + k1\n    \n    k2 = int(data[index])\n    horizontal_h = list(map(int, data[index + 1:index + 1 + k2]))\n    index += 1 + k2\n    \n    k3 = int(data[index])\n    vertical_0 = list(map(int, data[index + 1:index + 1 + k3]))\n    index += 1 + k3\n    \n    k4 = int(data[index])\n    vertical_w = list(map(int, data[index + 1:index + 1 + k4]))\n    index += 1 + k4\n    \n    test_cases.append((w, h, horizontal_0, horizontal_h, vertical_0, vertical_w))\n\nresults = max_doubled_area(t, test_cases)\nfor result in results:\n    print(result)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including rectangle dimensions and lattice points on each side.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side of the rectangle that are farthest apart.\",\n      \"output\": \"The maximum distance between two points on the same side for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from an adjacent side.\",\n      \"output\": \"The maximum doubled area of the triangle for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Parse the rectangle dimensions (w, h) and the lattice points on each side.\",\n    \"  b. For each side of the rectangle, find the two points that are farthest apart.\",\n    \"  c. Calculate the maximum possible doubled area of a triangle by considering combinations of two points from the same side and one point from an adjacent side.\",\n    \"  d. Store the result for the current test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle formed by three points and then doubling it. This is because the area of a triangle formed by lattice points is always an integer when doubled.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that a triangle can be formed by selecting points from different sides.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed under the given conditions. This involves selecting points that maximize the base and height of the triangle.\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but within step \"c\", the calculation of the maximum possible doubled area of a triangle should consider all combinations of two points from the same side and one point from an adjacent side simultaneously. This can be done using nested loops or comprehensions to evaluate all possible combinations.\n\n# [edge case]\n    1. Test case with minimum dimensions and points:\n       Input: 3 3\n              2 1 2\n              2 1 2\n              2 1 2\n              2 1 2\n       Expected Output: 4\n       Explanation: The maximum triangle is formed by points (1,0), (2,0), and (1,3) with a doubled area of 4.\n\n    2. Test case with all points on one side:\n       Input: 5 5\n              5 1 2 3 4 5\n              2 1 2\n              2 1 2\n              2 1 2\n       Expected Output: 8\n       Explanation: The maximum triangle is formed by points (1,0), (5,0), and (1,5) with a doubled area of 8.\n\n    3. Test case with maximum distance on vertical sides:\n       Input: 6 6\n              2 1 5\n              2 1 5\n              3 1 3 5\n              3 1 3 5\n      ", "Round_0": {"code": "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum base for horizontal sides\n        max_base_bottom = horizontal_bottom[-1] - horizontal_bottom[0]\n        max_base_top = horizontal_top[-1] - horizontal_top[0]\n        \n        # Calculate maximum height for vertical sides\n        max_height_left = vertical_left[-1] - vertical_left[0]\n        max_height_right = vertical_right[-1] - vertical_right[0]\n        \n        # Calculate maximum doubled area for each configuration\n        max_area = max(\n            max_base_bottom * h,  # Bottom side with top point\n            max_base_top * h,     # Top side with bottom point\n            max_height_left * w,  # Left side with right point\n            max_height_right * w  # Right side with left point\n        )\n        \n        results.append(max_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return test_cases\n\ndef main():\n    test_cases = parse_input()\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: parse_input() takes 0 positional arguments but 1 was given"}, "Round_1": {"code": "def max_doubled_area_of_triangle(test_cases):\n    results = []\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum base for horizontal sides\n        max_base_bottom = horizontal_bottom[-1] - horizontal_bottom[0]\n        max_base_top = horizontal_top[-1] - horizontal_top[0]\n        \n        # Calculate maximum height for vertical sides\n        max_height_left = vertical_left[-1] - vertical_left[0]\n        max_height_right = vertical_right[-1] - vertical_right[0]\n        \n        # Calculate maximum doubled area for each configuration\n        max_area = max(\n            max_base_bottom * h,  # Bottom side with top point\n            max_base_top * h,     # Top side with bottom point\n            max_height_left * w,  # Left side with right point\n            max_height_right * w  # Right side with left point\n        )\n        \n        results.append(max_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k_bottom = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k_bottom]))\n        index += 1 + k_bottom\n        \n        k_top = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k_top]))\n        index += 1 + k_top\n        \n        k_left = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k_left]))\n        index += 1 + k_left\n        \n        k_right = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k_right]))\n        index += 1 + k_right\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return test_cases\n\ndef main():\n    test_cases = parse_input()\n    results = max_doubled_area_of_triangle(test_cases)\n    for result in results:\n        print(result)"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side that can form the longest segment.\",\n      \"output\": \"The maximum length of segments for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from another side.\",\n      \"output\": \"The doubled maximum area of the triangle for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format for each test case.\",\n    \"For each test case, iterate over the four sides of the rectangle and determine the maximum segment length for each side by subtracting the smallest coordinate from the largest coordinate.\",\n    \"Calculate the doubled area of the triangle for each possible combination of two points from the same side and one point from another side. Use the formula for the area of a triangle given by lattice points.\",\n    \"For each test case, determine the maximum doubled area from all possible combinations and store the result.\",\n    \"Output the maximum doubled area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle': A four-sided polygon with opposite sides equal and parallel, and all angles are right angles.\n    'lattice points': Points with integer coordinates.\n    'triangle': A polygon with three edges and three vertices.\n    Explanation: The requirement involves calculating the area of a triangle formed by lattice points on the sides of a rectangle.\n\n# [phrase showing quantity relationship]\n    'maximum possible': Refers to finding the largest area that can be formed by the triangle.\n    'doubled area': The area of the triangle is multiplied by two.\n    Explanation: The task is to find the largest possible area of a triangle formed by the points and then double it.\n\n# [degree adverb]\n    'maximum': Refers to the largest possible value.\n    Explanation: The requirement is to find the triangle with the largest area.\n\n# [code logic]\n    The steps in the plan should be implemented simultaneously when calculating the maximum segment length and the doubled area of the triangle. This can be done by iterating over the sides and calculating the segment length and area in one loop.\n\n# [edge case]\n    Case 1: When all points on a side are the same, e.g., (0, 1), (0, 1), (5, 4)\n    Expected output: 0\n    Explanation: No valid triangle can be formed as two points are identical.\n    \n    Case 2: When the rectangle is very large, e.g., w = 10^6, h = 10^6, with points (1, 0), (999999, 0), (0, 1)\n    Expected output: 1999998\n    Explanation: The largest triangle is formed by the longest segment on one side and a point on another side.\n    \n    Case 3: When there are only two points on each side, e.g., (1, 0), (2, 0), (0, 1), (0, 2)\n    Expected output: 4\n    Explanation: The largest triangle is formed by the longest segment on one side and a point on another side.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    if len(points_on_side) < 2:\n        return 0\n    ```\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x1_min = int(data[index + 1])\n        x1_max = int(data[index + k1])\n        index += k1 + 1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x2_min = int(data[index + 1])\n        x2_max = int(data[index + k2])\n        index += k2 + 1\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y1_min = int(data[index + 1])\n        y1_max = int(data[index + k3])\n        index += k3 + 1\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y2_min = int(data[index + 1])\n        y2_max = int(data[index + k4])\n        index += k4 + 1\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0) and top side (y = h)\n        max_area = max(max_area, (x1_max - x1_min) * h)\n        max_area = max(max_area, (x2_max - x2_min) * h)\n        \n        # Left side (x = 0) and right side (x = w)\n        max_area = max(max_area, (y1_max - y1_min) * w)\n        max_area = max(max_area, (y2_max - y2_min) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including rectangle dimensions and lattice points on each side.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify the two points on the same side of the rectangle that are farthest apart.\",\n      \"output\": \"The maximum distance between two points on the same side for each side of the rectangle.\"\n    },\n    {\n      \"description\": \"Calculate the maximum possible area of a triangle formed by choosing two points from the same side and one point from an adjacent side.\",\n      \"output\": \"The maximum doubled area of the triangle for each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Parse the rectangle dimensions (w, h) and the lattice points on each side.\",\n    \"  b. For each side of the rectangle, find the two points that are farthest apart.\",\n    \"  c. Calculate the maximum possible doubled area of a triangle by considering combinations of two points from the same side and one point from an adjacent side.\",\n    \"  d. Store the result for the current test case.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle formed by three points and then doubling it. This is because the area of a triangle with integer coordinates is always an integer when doubled.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that a triangle can always be formed.\n    Implementation: Ensure that the input parsing logic checks for at least two points on each side.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed under the given conditions.\n    Implementation: Use a strategy to calculate the area for all possible combinations and keep track of the largest one.\n\n# [code logic]\n    The steps to find the two farthest points on the same side and calculate the maximum area should be implemented simultaneously for efficiency. This can be done by iterating through the points on each side and calculating potential areas in a single pass.\n\n# [edge case]\n    1. Test case with minimum dimensions and points:\n       Input: 3 3\n              2 1 2\n              2 1 2\n              2 1 2\n              2 1 2\n       Expected Output: 4\n       Explanation: The largest triangle is formed by points (1, 0), (2, 0), and (2, 3) with a doubled area of 4.\n\n    2. Test case with all points on one side:\n       Input: 5 5\n              5 1 2 3 4 5\n              2 1 2\n              2 1 2\n              2 1 2\n       Expected Output: 8\n       Explanation: The largest triangle is formed by points (1, 0), (5, 0), and (5, 5) with a doubled area of 8.\n\n    3. Test case with maximum distance between points:\n       Input: 10 10\n              2 1 9\n              2 1 9\n              2 1 9\n              2 ", "Round_0": {"code": "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right = case\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (horizontal_bottom[-1] - horizontal_bottom[0]) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (horizontal_top[-1] - horizontal_top[0]) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (vertical_left[-1] - vertical_left[0]) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (vertical_right[-1] - vertical_right[0]) * w)\n        \n        results.append(max_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k1 = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        k3 = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return t, test_cases\n\ndef main():\n    t, test_cases = parse_input()\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 103)"}, "Round_1": {"code": "def max_doubled_area(t, test_cases):\n    results = []\n    for case in test_cases:\n        w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right = case\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0)\n        max_area = max(max_area, (horizontal_bottom[-1] - horizontal_bottom[0]) * h)\n        \n        # Top side (y = h)\n        max_area = max(max_area, (horizontal_top[-1] - horizontal_top[0]) * h)\n        \n        # Left side (x = 0)\n        max_area = max(max_area, (vertical_left[-1] - vertical_left[0]) * w)\n        \n        # Right side (x = w)\n        max_area = max(max_area, (vertical_right[-1] - vertical_right[0]) * w)\n        \n        results.append(max_area)\n    \n    return results\n\ndef parse_input():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k1 = int(data[index])\n        horizontal_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        horizontal_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        k3 = int(data[index])\n        vertical_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        vertical_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n    \n    return t, test_cases\n\ndef main():\n    t, test_cases = parse_input()\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points on each side for each test case.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the dimensions w and h of the rectangle.\",\n        \"Read the number of points and their x-coordinates for the bottom side (y=0).\",\n        \"Read the number of points and their x-coordinates for the top side (y=h).\",\n        \"Read the number of points and their y-coordinates for the left side (x=0).\",\n        \"Read the number of points and their y-coordinates for the right side (x=w).\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the maximum possible doubled area of a triangle for each test case.\",\n      \"steps\": [\n        \"For each horizontal side, calculate the maximum distance between any two points and multiply by the height of the rectangle.\",\n        \"For each vertical side, calculate the maximum distance between any two points and multiply by the width of the rectangle.\",\n        \"Determine the maximum value from the calculated areas for both horizontal and vertical sides.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, print the maximum doubled area calculated.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data for each test case.\",\n    \"For each test case, compute the maximum possible doubled area of a triangle by considering the maximum distance between points on the same side and the corresponding rectangle dimension.\",\n    \"Output the computed maximum doubled area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area of a triangle'\n    Explanation: The problem requires calculating the area of a triangle formed by three points and then doubling it. This is a common technique in computational geometry to avoid dealing with fractions.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle will have a minimum of two points, ensuring that a triangle can always be formed.\n    Implementation: Ensure that the input parsing logic accounts for at least two points on each side.\n\n    'maximum possible'\n    Explanation: This indicates that we need to find the largest possible area of a triangle that can be formed under the given conditions.\n    Implementation: Use max functions to compare calculated areas and determine the largest.\n\n# [degree adverb]\n    'maximum'\n    Explanation: Refers to the largest area that can be achieved by the triangle.\n    Implementation: Use comparison operations to keep track of the largest area found.\n\n# [code logic]\n    The steps for calculating the maximum possible doubled area of a triangle should be implemented simultaneously for both horizontal and vertical sides. This involves:\n    - Calculating the maximum distance between points on each side.\n    - Multiplying these distances by the corresponding rectangle dimension (height for horizontal sides, width for vertical sides).\n    - Comparing these values to find the maximum.\n\n# [edge case]\n    1. w = 3, h = 3, points on bottom side = [1, 2], points on top side = [1, 2], points on left side = [1, 2], points on right side = [1, 2]\n       Expected output = 6\n       Explanation: The maximum triangle is formed by points (0, 1), (0, 2), and (3, 2) with a doubled area of 6.\n\n    2. w = 4, h = 4, points on bottom side = [1, 3], points on top side = [1, 3], points on left side = [1, 3], points on right side = [1, 3]\n       Expected output = 8\n       Explanation: The maximum triangle is formed by points (0, 1), (0, 3), and (4", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area\n        max_area = 0\n        \n        # Horizontal sides\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Vertical sides\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, dimensions of the rectangle, and the list of lattice points for each side.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers w and h representing the width and height of the rectangle.\",\n        \"For each side of the rectangle, read the number of points k and the list of coordinates.\"\n      ]\n    },\n    {\n      \"description\": \"Identify the possible triangles that can be formed by choosing two points from the same side and one point from another side.\",\n      \"steps\": [\n        \"For each test case, iterate over each side of the rectangle.\",\n        \"For each pair of points on the same side, iterate over points on the other sides to form triangles.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the area of each triangle formed and determine the maximum area.\",\n      \"steps\": [\n        \"For each triangle formed, calculate the area using the formula for the area of a triangle given three points.\",\n        \"Keep track of the maximum area encountered.\"\n      ]\n    },\n    {\n      \"description\": \"Output the doubled maximum area for each test case.\",\n      \"steps\": [\n        \"Multiply the maximum area by 2 to get the doubled area.\",\n        \"Print the doubled area for each test case.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data for each test case.\",\n    \"For each test case, iterate over each side of the rectangle to form possible triangles.\",\n    \"Calculate the area of each triangle and track the maximum area.\",\n    \"Output the doubled maximum area for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle': A four-sided polygon with opposite sides equal and parallel, and all angles are right angles.\n    'lattice points': Points with integer coordinates.\n    'triangle': A polygon with three edges and three vertices.\n    Explanation: The requirement involves forming triangles using lattice points on the sides of a rectangle and calculating the maximum possible area of such triangles.\n\n# [phrase showing quantity relationship]\n    'at least two points': Indicates that there are a minimum of two points on each side of the rectangle.\n    'maximum possible': Refers to finding the largest area that can be formed by a triangle using the given points.\n    Implementation: Use loops to iterate through combinations of points to find the maximum area.\n\n# [degree adverb]\n    'maximum': Refers to the largest area of a triangle that can be formed.\n    Implementation: Use a variable to keep track of the largest area encountered during the iteration.\n\n# [code logic]\n    The steps for forming triangles and calculating their areas should be implemented simultaneously. Specifically, the steps:\n    - \"For each pair of points on the same side, iterate over points on the other sides to form triangles.\"\n    - \"Calculate the area using the formula for the area of a triangle given three points.\"\n    These can be combined into a single loop structure where the area is calculated immediately after forming a triangle.\n\n# [edge case]\n    Case 1: When all points on one side are collinear with a point on another side, e.g., points on the horizontal side at y=0 and a point on the vertical side at x=0.\n    Expected output: The area will be zero since the points are collinear.\n    Case 2: When the rectangle is very large, e.g., w=10^6, h=10^6, and points are at extreme ends.\n    Expected output: The area will be large, but the calculation should handle large numbers without overflow.\n    Case 3: When there are only two points on each side, e.g., minimal configuration.\n    Expected output: The function should still correctly calculate the area using the available points.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through combinations of points and calculating the area will naturally handle these cases.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0) and top side (y = h)\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Left side (x = 0) and right side (x = w)\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 137)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        # Read points on the bottom side (y = 0)\n        k1 = int(data[index])\n        x_bottom = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        # Read points on the top side (y = h)\n        k2 = int(data[index])\n        x_top = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        # Read points on the left side (x = 0)\n        k3 = int(data[index])\n        y_left = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        # Read points on the right side (x = w)\n        k4 = int(data[index])\n        y_right = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        # Calculate maximum doubled area for each side\n        max_area = 0\n        \n        # Bottom side (y = 0) and top side (y = h)\n        max_area = max(max_area, (x_bottom[-1] - x_bottom[0]) * h)\n        max_area = max(max_area, (x_top[-1] - x_top[0]) * h)\n        \n        # Left side (x = 0) and right side (x = w)\n        max_area = max(max_area, (y_left[-1] - y_left[0]) * w)\n        max_area = max(max_area, (y_right[-1] - y_right[0]) * w)\n        \n        results.append(max_area)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}], "scores": [], "pass_results": [true, true, false, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 433, "prompt": "A rectangle with its opposite corners located at (0, 0) and (w, h) and sides parallel to the axes is depicted on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that:\n\n  * exactly two of them belong to the same side of a rectangle;\n  * the area of a triangle formed by them is maximum possible.\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 85}
