{"name": "1579_C. Ticks", "description": "Casimir has a rectangular piece of paper with a checkered field of size n \u00d7 m. Initially, all cells of the field are white.\n\nLet us denote the cell with coordinates i vertically and j horizontally by (i, j). The upper left cell will be referred to as (1, 1) and the lower right cell as (n, m).\n\nCasimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: \n\n  1. First, the center cell (i, j) is painted black. \n  2. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black. \n  3. That is all the cells with coordinates (i - h, j \u00b1 h) for all h between 0 and d are painted. In particular, a tick consists of 2d + 1 black cells. \n\n\n\nAn already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3.\n\n<image>\n\nYou are given a description of a checkered field of size n \u00d7 m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks).\n\nDetermine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.", "tags": ["greedy", "implementation"], "difficulty": 9, "id": 1579, "sample_io": [{"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n"]}], "test_list": [{"input": "1\n1 1 1\n*\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n.*.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n1 1 1\n.\n", "output": ["YES\n"]}, {"input": "1\n3 9 1\n*.*...*.*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.*.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 5 1\n.....\n", "output": ["YES\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*..\n..*...\n", "output": ["NO\n"]}, {"input": "1\n3 6 1\n.*....\n..*.*.\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.+.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 5 2\n.....\n", "output": ["YES\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n...*.....\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..+.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n*..+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/.*.\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 2 2\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 3\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n1 1 0\n.\n", "output": ["YES\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n.*...\n.*.*.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n.*.+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n*..+-\n-.*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/.*.\n*.*.\n.*/.\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*/.+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n*.*.\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 2 2\n....*\n*..+-\n..+..\n.../.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....*.\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*./.\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 3 1\n..*/\n*.*.\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n./..*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-./..\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n../...\n.....*\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*./\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n...*.\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n.*.*\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 1 1\n..*/\n*.*.\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n./..*\n*..+-\n..+./\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 4\n-./..\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 2\n*-*...*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 3\n../...\n.....*\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n.*./\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/./*\n.*.*\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 1 2\n*\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*-*\n.*.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*.*...*.*\n.*../..*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n1 6 1\n.*....\n..*.*.\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.+-\n..*./\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.+.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n/..*\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..+./\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/*..\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n.*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n.*...*\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n+...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n4 4 1\n..*.\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n-+.*.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n./..*\n*..+-\n-.*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n/.*.\n*.*.\n.*/.\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n-+./*\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n.*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n**.......\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*.-\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n..*.\n./..\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 0\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*./.\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n3 4 1\n...*\n*.*-\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n...*.\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n*.*/\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 3 1\n..*/\n*.*.\n.+..\n..1.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-./..\n.....\n*.*.*\n*..*/\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n.-**..*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*/\n.*./\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n..//\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 3 1\n/..*\n.*.*\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n/...*\n*..+-\n..+./\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 3\n-./..\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 3\n*-*...*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 3\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n/.*.\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n../..\n.....\n*.*-*\n.*.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n/*.+-\n..*./\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n/..*\n*.+.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n/..*\n.*.*\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/*..\n*.*.\n.*..\n.0..\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.../.\n.....\n*.*.*\n.*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n.*...*\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n./..*\n*..+-\n-.*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n/.*.\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n-+./*\n./+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n-*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n..-...\n.....*\n*...*.\n.*.*.-\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*/*-\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n*.*/\n*.-.\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 1 1\n..*/\n*.*.\n.+..\n..1.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-./..\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 4 2\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*/\n.*./\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n..*.\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.,-\n./*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 1\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n/*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n//.*\n*.+.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n0..*\n.*.*\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n-.....\n.....*\n.*...*\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n./-.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n*../\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n../..\n*.*.*\n-*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.).\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*/*-\n.)..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 1 1\n..*/\n*.*.\n.+-.\n..1.\n", "output": ["NO\n"]}, {"input": "1\n5 5 3\n-./..\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 4 2\n.../..\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*/\n..*/\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.+-\n./*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 1\n../...\n*.....\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n0..*\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 6 3\n-.....\n.....*\n.*...*\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n.-/.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n.*./\n.//.\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n*../\n*.*.\n*...\n.//.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n../..\n*.*.*\n-+..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n.*..\n*.).\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n5 5 3\n-....\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n*...\n*.*/\n..*/\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n..*.\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.+.\n./*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 1\n../.-.\n*.....\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.+.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n*..0\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n-.....\n.....*\n.*...*\n.*.*..\n..*../\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n..*.\n.-/.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n.*//\n.//.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n*../\n*.*.\n*...\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n.*/.\n*.).\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 5 3\n-....\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n*...\n*.*/\n/*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n..).\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.+.\n./*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n2 6 1\n../.-.\n*.....\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*-+.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n*.//\n.//.\n", "output": ["NO\n"]}, {"input": "1\n3 5 3\n-....\n.....\n*.*.*\n/*..*\n..)..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n.)..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.*.\n./*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*-+.\n/*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 1 2\n..*.\n*.+.\n*.//\n.//.\n", "output": ["NO\n"]}, {"input": "1\n3 5 3\n....-\n.....\n*.*.*\n/*..*\n..)..\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.*.\n-/*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n.*.*.\n/.*..\n", "output": ["NO\n"]}, {"input": "1\n1 9 1\n*.*...*.*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n...**\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n3 6 1\n.*../.\n..*.*.\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n....\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n..**\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n2 5 1\n....*\n.*.+.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n.*..\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n/..*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....)\n*..+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..*..\n-....\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n-+..*\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n*/*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*.*...*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..+.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n.*.+-\n..*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n).*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n*..+-\n..*-.\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/.*.\n.*.*\n.*/.\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*/.+-\n..+..\n-....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n**..\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n*-.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....*.\n-...*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...).\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n...-.*.\n..*.*..\n...*./.\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}], "task_id": "codecontest/15", "repair_prompt": ["Casimir possesses a rectangular sheet of paper with a grid pattern measuring n \u00d7 m. Initially, every cell in the grid is white. Let us denote the cell with coordinates i vertically and j horizontally by (i, j). The top-left cell will be called (1, 1) and the bottom-right cell will be called (n, m). Casimir draws ticks of various sizes on the grid. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: 1. The center cell (i, j) is painted black first. 2. Then exactly d cells diagonally from the top-left to the center and exactly d cells diagonally from the top-right to the center are also painted black. 3. Essentially, all cells with coordinates (i - h, j \u00b1 h) for each h ranging from 0 to d are painted. In particular, a tick has 2d + 1 black cells. An already painted cell will stay black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3. <image> You are given a portrayal of a checkered field of size n \u00d7 m. Casimir argues that this field was produced after he drew some (possibly 0) ticks on it. The ticks could be of varying sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks). Ascertain whether this field could genuinely be the result of drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Casimir possesses a rectangular sheet of paper with a grid pattern measuring n \u00d7 m. Initially, every cell in the grid is white. Let us denote the cell with coordinates i vertically and j horizontally by (i, j). The top-left cell will be called (1, 1), whereas the bottom-right cell will be called (n, m). Casimir draws ticks of various sizes on the grid. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: 1. The center cell (i, j) is painted black first. 2. Then exactly d cells diagonally from the top-left to the center and exactly d cells diagonally from the top-right to the center are also painted black. 3. Essentially, all cells with coordinates (i - h, j \u00b1 h) for each h ranging from 0 to d are painted. In particular, a tick has 2d + 1 black cells. An already painted cell will stay black if painted again. Below you can find an example of the 4 \u00d7 9 box. It includes two ticks of sizes 2 and 3. <image> You are given a portrayal of a checkered field of size n \u00d7 m. Casimir argues that this field was produced after he drew some (possibly 0) ticks on it. The ticks could be of varying sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks). Ascertain whether this field could genuinely be the result of drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Casimir possesses a rectangular sheet of paper with a grid pattern measuring n \u00d7 m. Initially, every cell in the grid is white. Let us denote the cell with coordinates i vertically and j horizontally by (i, j), where the top-left cell will be called (1, 1) and the bottom-right cell will be called (n, m). Casimir draws ticks of various sizes on the grid, and a tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: 1. The center cell (i, j) is painted black first. 2. Then exactly d cells diagonally from the top-left to the center and exactly d cells diagonally from the top-right to the center are also painted black. 3. Essentially, all cells with coordinates (i - h, j \u00b1 h) for each h ranging from 0 to d are painted, meaning a tick has 2d + 1 black cells. An already painted cell will stay black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3. <image> You are given a portrayal of a checkered field of size n \u00d7 m. Casimir argues that this field was produced after he drew some (possibly 0) ticks on it, where the ticks could be of varying sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks). Ascertain whether this field could genuinely be the result of drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_form_ticks(n, m, k, grid):\n    # Create a copy of the grid to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible tick centers from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Try to find the maximum size of the tick with center at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                d -= 1  # Adjust d to the last valid size\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the grid are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_form_ticks(n, m, k, grid):\n    # Create a copy of the grid to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible ticks from bottom to top to ensure larger ticks are considered first\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if a tick of size k can be centered at (i, j)\n                size = 0\n                while True:\n                    if i - size < 0 or j - size < 0 or j + size >= m:\n                        break\n                    if grid[i - size][j - size] == '*' and grid[i - size][j + size] == '*':\n                        size += 1\n                    else:\n                        break\n\n                # If a tick of at least size k is found, mark the cells\n                if size > k:\n                    for h in range(size):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Verify if all '*' in the grid are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, grid):\n    # Create a copy of the grid to mark cells that can be part of a valid tick\n    valid_grid = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell in the grid\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if a tick of size at least k can be centered at (i, j)\n                size = 0\n                while True:\n                    if i - size < 0 or j - size < 0 or j + size >= m:\n                        break\n                    if grid[i - size][j - size] != '*' or grid[i - size][j + size] != '*':\n                        break\n                    size += 1\n\n                # If the tick size is at least k, mark the cells as valid\n                if size > k:\n                    for h in range(size):\n                        valid_grid[i - h][j - h] = True\n                        valid_grid[i - h][j + h] = True\n\n    # Check if all '*' in the grid are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not valid_grid[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, grid):\n    # Create a copy of the grid to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for each cell if it can be the center of a tick of size d >= k\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Determine the maximum size of the tick with center at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                d -= 1  # Adjust d to the last valid size\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the grid are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(grid, n, m, k):\n    # Create a grid to track covered cells\n    covered = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to find potential tick centers\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if this can be the center of a tick of size at least k\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                \n                # If the tick size is at least k, mark the cells as covered\n                if d > k:\n                    for h in range(d):\n                        covered[i - h][j - h] = True\n                        covered[i - h][j + h] = True\n\n    # Check if all '*' cells are covered\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not covered[i][j]:\n                return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n        \n        if can_form_ticks(grid, n, m, k):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_tick(grid, n, m, k):\n    # Create a copy of the grid to mark visited cells\n    visited = [[False] * m for _ in range(n)]\n    \n    def is_valid_tick(i, j, d):\n        # Check if a tick of size d can be formed with center at (i, j)\n        for h in range(d + 1):\n            if i - h < 0 or j - h < 0 or j + h >= m:\n                return False\n            if grid[i - h][j - h] != '*' or grid[i - h][j + h] != '*':\n                return False\n        return True\n\n    # Iterate over the grid from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == '*' and not visited[i][j]:\n                # Find the maximum size of tick that can be formed\n                d = 0\n                while is_valid_tick(i, j, d + 1):\n                    d += 1\n                \n                # If the tick size is at least k, mark the cells as visited\n                if d >= k:\n                    for h in range(d + 1):\n                        visited[i - h][j - h] = True\n                        visited[i - h][j + h] = True\n                else:\n                    return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n        \n        if can_form_tick(grid, n, m, k):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(grid, n, m, k):\n    # Create a copy of the grid to mark cells that can be part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if this cell can be the center of a tick of size at least k\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                \n                # If the tick size is at least k, mark the cells\n                if d > k:\n                    for h in range(d):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n    \n    # Check if all '*' cells are marked\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = can_form_ticks(grid, n, m, k)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, grid):\n    # Create a grid to mark cells that can be part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell in the grid\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if a tick of size at least k can be centered at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                d -= 1\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Validate the grid pattern against the tick formation\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a grid to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check for potential tick centers\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if this cell can be the center of a tick of size at least k\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If the tick size is at least k, mark the cells\n                if d > k:\n                    for h in range(d):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' are part of valid ticks\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, grid):\n    # Create a grid to mark cells that can be part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if a tick of size d >= k can be centered at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n                    marked[i][j] = True\n\n    # Validate the grid pattern against the tick formation\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, grid):\n    # Create a copy of the grid to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible tick centers from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Try to find the maximum size of the tick with center at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                d -= 1  # Adjust d to the last valid size\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the grid are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, grid dimensions, minimum tick size, and grid patterns.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the grid dimensions (n, m) and minimum tick size (k).\",\n        \"Read the grid pattern consisting of n lines with m characters each.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a tick of size d >= k can be drawn on the grid for each test case.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the grid.\",\n        \"Check if the cell can be the center of a tick of size d >= k.\",\n        \"Verify that the cells diagonally from the top-left and top-right to the center are painted black.\",\n        \"Ensure that all cells with coordinates (i - h, j \u00b1 h) for each h ranging from 0 to d are painted black.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If the grid can be obtained by drawing ticks of size d >= k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and grid information.\",\n    \"For each test case, analyze the grid to determine if it can be formed by ticks of size d >= k.\",\n    \"Output the result for each test case based on the analysis.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid pattern': A rectangular arrangement of cells, each of which can be either white ('.') or black ('*').\n    'tick': A pattern of black cells centered at a specific cell, extending diagonally in both directions.\n    'size d': The number of cells extending diagonally from the center, with a total of 2d + 1 black cells.\n    'minimum size k': The smallest allowable size for any tick drawn on the grid.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the size of a tick must be greater than zero, meaning no tick can be of size zero.\n    '2d + 1': Represents the total number of black cells in a tick, including the center and the diagonals.\n    'd \u2265 k': Specifies that the size of any tick must be at least k.\n\n# [degree adverb]\n    'at least': Implies that the size of the tick must be greater than or equal to a specified value (k).\n\n# [code logic]\n    The steps in the plan for checking if a tick can be drawn should be implemented simultaneously:\n    - \"Check if the cell can be the center of a tick of size d >= k.\"\n    - \"Verify that the cells diagonally from the top-left and top-right to the center are painted black.\"\n    - \"Ensure that all cells with coordinates (i - h, j \u00b1 h) for each h ranging from 0 to d are painted black.\"\n    These steps can be combined into a single loop that checks each potential center cell and verifies the tick pattern.\n\n# [edge case]\n    1. A grid with all cells white ('.') and k = 1:\n       Input: 1 1 1\n              .\n       Expected Output: YES\n       Explanation: No ticks are needed, and the grid is already valid.\n\n    2. A grid with a single black cell ('*') and k = 1:\n       Input: 1 1 1\n              *\n       Expected Output: NO\n       Explanation: A single black cell cannot form a tick of size 1.\n\n    3. A grid with a valid tick pattern but k is larger than the tick size:\n       Input: 3 3 2\n              .*. \n              *.* \n              .*.\n       Expected Output: NO\n       Explanation: The tick size is 1, which is less than k = 2.\n\n#", "Round_0": {"code": "def can_form_ticks(n, m, k, grid):\n    # Create a copy of the grid to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible tick centers from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Try to find the maximum size of the tick with center at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                d -= 1  # Adjust d to the last valid size\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the grid are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case including grid dimensions, minimum tick size, and grid pattern.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the grid dimensions (n, m) and minimum tick size (k).\",\n        \"Read the grid pattern consisting of n lines with m characters each.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the grid pattern can be formed by ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the grid.\",\n        \"Check if a tick of size at least k can be centered at each cell marked with '*'.\",\n        \"Ensure that all cells required for a tick of size k are marked with '*' and are within grid boundaries.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, output 'YES' if the grid can be formed by ticks of size at least k, otherwise output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and grid details.\",\n    \"For each test case, analyze the grid to check if it can be formed by ticks of size at least k.\",\n    \"Output the result for each test case based on the analysis.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangular sheet of paper with a grid pattern': This refers to the grid structure where each cell can be either white ('.') or black ('*').\n\n    'tick of size d': A pattern centered at a cell (i, j) that includes the center cell and diagonally adjacent cells forming a cross pattern.\n\n    'd \u2265 k': The minimum size of the tick that can be drawn, ensuring that any tick drawn must be at least of size k.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the tick size must be positive, meaning no zero-sized ticks are allowed.\n\n    '2d + 1 black cells': This describes the total number of cells that will be painted black for a tick of size d.\n\n# [degree adverb]\n    'at least': Refers to the minimum size requirement for the ticks, meaning the tick size must be greater than or equal to k.\n\n# [code logic]\n    The steps in the plan for checking if a tick can be centered at a cell marked with '*' and ensuring all required cells are marked with '*' should be implemented simultaneously. This involves checking the diagonal cells in one code block to verify if a tick of size k can be formed.\n\n# [edge case]\n    Case 1: A grid with all cells marked as '.' (no ticks possible) should return NO.\n    Explanation: Since no cells are marked with '*', no ticks can be formed.\n\n    Case 2: A grid with a single '*' in the center and k > 1 should return NO.\n    Explanation: A single '*' cannot form a tick of size greater than 1.\n\n    Case 3: A grid with a complete row or column of '*' and k = 1 should return YES.\n    Explanation: Each '*' can be considered as a tick of size 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the grid is entirely '.', or when the tick size k is greater than the possible tick size based on the grid dimensions.\n    ```python\n    if all(cell == '.' for row in grid for cell in row):\n        return 'NO'\n    if k > min(n, m):\n        return 'NO'\n    ```\n\nYES", "Round_0": {"code": "def can_form_ticks(n, m, k, grid):\n    # Create a copy of the grid to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible ticks from bottom to top to ensure larger ticks are considered first\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if a tick of size k can be centered at (i, j)\n                size = 0\n                while True:\n                    if i - size < 0 or j - size < 0 or j + size >= m:\n                        break\n                    if grid[i - size][j - size] == '*' and grid[i - size][j + size] == '*':\n                        size += 1\n                    else:\n                        break\n\n                # If a tick of at least size k is found, mark the cells\n                if size > k:\n                    for h in range(size):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Verify if all '*' in the grid are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case including grid dimensions, minimum tick size, and grid pattern.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the grid dimensions (n, m) and minimum tick size (k).\",\n        \"Read the grid pattern consisting of n lines with m characters each.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the grid pattern can be formed by ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the grid.\",\n        \"Check if a tick of size at least k can be centered at each cell marked with '*'.\",\n        \"Ensure that all cells required for a tick of size k are marked with '*' and are within grid boundaries.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, output 'YES' if the grid can be formed by ticks of size at least k, otherwise output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and grid details.\",\n    \"For each test case, analyze the grid to check if it can be formed by ticks of size at least k.\",\n    \"Output the result for each test case based on the analysis.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid pattern': Refers to the arrangement of cells in a rectangular sheet, where each cell can be either white ('.') or black ('*').\n\n    'tick': A pattern centered at a cell, consisting of black cells arranged diagonally from the center.\n\n    'size d': The number of cells diagonally from the center to the top-left and top-right, forming a tick.\n\n    'minimum size k': The smallest size a tick can have, ensuring d \u2265 k for all ticks.\n\n    Explanation: The requirement involves determining if a given grid pattern can be formed by drawing ticks of varying sizes, with each tick having a minimum size of k.\n\n# [phrase showing quantity relationship]\n    'at least k': Indicates that the size of each tick must be greater than or equal to k.\n\n    Implementation: Ensure that any tick formed has a size d such that d \u2265 k.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented simultaneously when checking if a tick can be centered at a cell marked with '*'. Specifically, the steps:\n    - \"Check if a tick of size at least k can be centered at each cell marked with '*'.\"\n    - \"Ensure that all cells required for a tick of size k are marked with '*' and are within grid boundaries.\"\n    These can be implemented in a single code block that iterates over the grid and checks the conditions for forming a tick.\n\n# [edge case]\n    Case 1: A grid with no '*' characters at all.\n    Input: 3 3 1\n           ...\n           ...\n           ...\n    Expected Output: NO\n    Explanation: No ticks can be formed as there are no black cells.\n\n    Case 2: A grid with '*' characters only in the corners.\n    Input: 3 3 1\n           *..\n           ...\n           ..*\n    Expected Output: NO\n    Explanation: The '*' characters cannot form a tick of size at least 1.\n\n    Case 3: A grid with a single '*' character.\n    Input: 3 3 1\n           ...\n           .*.\n           ...\n    Expected Output: NO\n    Explanation: A single '*' cannot form a tick of size at least 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that:\n    - If there are no '*' characters, the output should be", "Round_0": {"code": "def can_form_ticks(n, m, k, grid):\n    # Create a copy of the grid to mark cells that can be part of a valid tick\n    valid_grid = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell in the grid\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if a tick of size at least k can be centered at (i, j)\n                size = 0\n                while True:\n                    if i - size < 0 or j - size < 0 or j + size >= m:\n                        break\n                    if grid[i - size][j - size] != '*' or grid[i - size][j + size] != '*':\n                        break\n                    size += 1\n\n                # If the tick size is at least k, mark the cells as valid\n                if size > k:\n                    for h in range(size):\n                        valid_grid[i - h][j - h] = True\n                        valid_grid[i - h][j + h] = True\n\n    # Check if all '*' in the grid are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not valid_grid[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, grid dimensions, minimum tick size, and grid patterns.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the grid dimensions (n, m) and minimum tick size (k).\",\n        \"Read the grid pattern consisting of n lines with m characters each.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a tick of size d >= k can be drawn on the grid for each test case.\",\n      \"steps\": [\n        \"For each cell marked with '*', check if it can be the center of a tick of size d >= k.\",\n        \"Verify that for each potential tick center, the cells diagonally from the top-left and top-right are also marked with '*' for the required size.\",\n        \"Ensure that all cells involved in the tick remain marked as '*' after drawing the tick.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If the grid can be formed by drawing ticks of size d >= k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the necessary information for each test case.\",\n    \"For each test case, iterate over the grid to identify potential tick centers.\",\n    \"Check the validity of each tick by ensuring all required cells are marked with '*'.\",\n    \"Output 'YES' if the grid can be formed by valid ticks, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick': A tick is a pattern of black cells centered at a specific cell in the grid, extending diagonally from the center. The size of the tick determines how many cells are painted black diagonally from the center.\n    'size d': The size of the tick, which determines the number of cells painted diagonally from the center. A tick of size d has 2d + 1 black cells.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the size of the tick must be greater than zero, meaning no tick can have a size of zero.\n    'd \u2265 k': Indicates that the size of each tick must be at least k, meaning the tick size must be greater than or equal to k.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to checking the validity of a tick should be implemented simultaneously. Specifically:\n    - \"For each cell marked with '*', check if it can be the center of a tick of size d >= k.\"\n    - \"Verify that for each potential tick center, the cells diagonally from the top-left and top-right are also marked with '*' for the required size.\"\n    These steps can be implemented in a single loop that checks each '*' cell for potential tick formation and validates the tick size and pattern.\n\n# [edge case]\n    Case 1: A grid with no '*' cells at all.\n    Input: 1 1 1\n           .\n    Expected Output: NO\n    Explanation: There are no '*' cells to form any tick.\n\n    Case 2: A grid with '*' cells that cannot form a valid tick of size k.\n    Input: 3 3 2\n           *..\n           .*.\n           ..*\n    Expected Output: NO\n    Explanation: The '*' cells are not positioned to form a tick of size 2.\n\n    Case 3: A grid with exactly one valid tick of size k.\n    Input: 3 3 1\n           .*.\n           ***\n           .*.\n    Expected Output: YES\n    Explanation: The center cell (2, 2) forms a valid tick of size 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where no valid tick can be formed.\n    - Implement a check for grids with no '*' cells to immediately return 'NO'.\n    - Implement logic to verify tick formation and size constraints for each", "Round_0": {"code": "def can_form_ticks(n, m, k, grid):\n    # Create a copy of the grid to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for each cell if it can be the center of a tick of size d >= k\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Determine the maximum size of the tick with center at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                d -= 1  # Adjust d to the last valid size\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the grid are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the grid dimensions, minimum tick size, and the grid itself.\",\n      \"output\": \"A list of test cases, where each test case contains the grid dimensions, minimum tick size, and the grid pattern.\"\n    },\n    {\n      \"description\": \"For each test case, identify potential tick centers by iterating over each cell in the grid and checking if it can be the center of a tick of size at least k.\",\n      \"output\": \"A list of potential tick centers for each test case.\"\n    },\n    {\n      \"description\": \"For each potential tick center, verify if a tick of size at least k can be drawn by checking the required cells diagonally from the center.\",\n      \"output\": \"A boolean value indicating whether a valid tick can be drawn for each potential center.\"\n    },\n    {\n      \"description\": \"Mark the cells covered by valid ticks and ensure all '*' cells in the grid are covered by at least one tick.\",\n      \"output\": \"A boolean value indicating whether the entire grid can be explained by the ticks.\"\n    },\n    {\n      \"description\": \"Output 'YES' if the grid can be explained by the ticks, otherwise output 'NO'.\",\n      \"output\": \"A list of results for each test case, either 'YES' or 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format containing all test cases.\",\n    \"For each test case, iterate over each cell in the grid to identify potential tick centers.\",\n    \"For each potential tick center, check if a tick of size at least k can be drawn by verifying the required diagonal cells.\",\n    \"Track which cells are covered by valid ticks and ensure all '*' cells are covered.\",\n    \"For each test case, determine if the grid can be fully explained by the ticks and store the result.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid pattern': A rectangular arrangement of cells, each of which can be either white ('.') or black ('*').\n    'tick': A pattern of black cells centered at a specific cell, extending diagonally in both directions.\n    'size d': The number of cells extending diagonally from the center, with a total of 2d + 1 black cells.\n    'minimum size k': The smallest allowable size for any tick drawn on the grid.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the size of a tick must be greater than zero, meaning no tick can be of size zero.\n    '2d + 1': Represents the total number of black cells in a tick, including the center and the diagonals.\n    'd \u2265 k': Specifies that the size of any tick must be at least k.\n\n# [degree adverb]\n    'at least': Refers to the minimum size requirement for the ticks, meaning the size must be k or greater.\n\n# [code logic]\n    Steps 2 and 3 in the plan should be considered simultaneously. When identifying potential tick centers, the verification of whether a tick of size at least k can be drawn should occur in the same iteration to optimize the process. This can be implemented using a nested loop where the outer loop iterates over potential centers and the inner loop checks the diagonal cells.\n\n# [edge case]\n    1. A grid with no '*' cells: The expected output is 'YES' because no ticks are needed to explain the grid.\n    2. A grid where all '*' cells are isolated and cannot form a tick of size k: The expected output is 'NO' because the grid cannot be explained by ticks of the required size.\n    3. A grid where '*' cells form a perfect tick pattern of size exactly k: The expected output is 'YES' because the grid can be explained by ticks of the required size.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where isolated '*' cells cannot form a valid tick. This involves checking if any '*' cells remain uncovered after attempting to form ticks.\n    ```python\n    def can_form_ticks(grid, n, m, k):\n        covered = [[False] * m for _ in range(n)]\n        \n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    # Check if this can be the center of", "Round_0": {"code": "def can_form_ticks(grid, n, m, k):\n    # Create a grid to track covered cells\n    covered = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to find potential tick centers\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if this can be the center of a tick of size at least k\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                \n                # If the tick size is at least k, mark the cells as covered\n                if d > k:\n                    for h in range(d):\n                        covered[i - h][j - h] = True\n                        covered[i - h][j + h] = True\n\n    # Check if all '*' cells are covered\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not covered[i][j]:\n                return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n        \n        if can_form_ticks(grid, n, m, k):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, grid dimensions, minimum tick size, and grid patterns.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the grid dimensions (n, m) and minimum tick size (k).\",\n        \"Read the grid pattern consisting of n lines with m characters each.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a tick of size d >= k can be drawn for each test case.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the grid.\",\n        \"Check if the cell can be the center of a tick of size d >= k.\",\n        \"Verify that all required cells for the tick are painted black ('*').\",\n        \"Mark cells that are part of a valid tick to avoid rechecking.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If all black cells can be part of valid ticks, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and grid information.\",\n    \"For each test case, iterate over the grid to check for valid ticks.\",\n    \"Use a helper function to verify if a tick can be drawn from a given cell.\",\n    \"Output 'YES' if the grid can be formed by valid ticks, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick'\n    Explanation: A tick is a pattern of black cells ('*') on the grid, centered at a specific cell, and extending diagonally in both directions. The size of a tick is defined by the number of cells it extends diagonally from the center, and it must be at least the given minimum size k.\n\n# [phrase showing quantity relationship]\n    'at least k': means that the size of each tick must be greater than or equal to k.\n    '2d + 1 black cells': means that a tick of size d will have a total of 2d + 1 cells painted black, including the center.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps \"Check if the cell can be the center of a tick of size d >= k\" and \"Verify that all required cells for the tick are painted black ('*')\" should be implemented simultaneously. This can be done by iterating over each cell and checking if it can be the center of a valid tick, marking the cells as part of a tick if they meet the criteria.\n\n# [edge case] \n    1. A grid with all cells as '.' (e.g., 3x3 grid with k=1): NO\n       Explanation: Since there are no black cells, no ticks can be formed.\n    2. A grid with a single '*' in the center and k=1 (e.g., 3x3 grid): NO\n       Explanation: A single '*' cannot form a tick of size 1 or more.\n    3. A grid with a single row of '*' and k=1 (e.g., 1x5 grid): NO\n       Explanation: A single row of '*' cannot form a valid tick as it requires diagonal cells.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def can_form_tick(grid, n, m, k):\n        # Create a copy of the grid to mark visited cells\n        visited = [[False] * m for _ in range(n)]\n        \n        def is_valid_tick(i, j, d):\n            # Check if a tick of size d can be formed with center at (i, j)\n            for h in range(d + 1):\n                if i - h < 0 or j - h < 0 or j + h >= m:\n                    return False\n                if grid[i", "Round_0": {"code": "def can_form_tick(grid, n, m, k):\n    # Create a copy of the grid to mark visited cells\n    visited = [[False] * m for _ in range(n)]\n    \n    def is_valid_tick(i, j, d):\n        # Check if a tick of size d can be formed with center at (i, j)\n        for h in range(d + 1):\n            if i - h < 0 or j - h < 0 or j + h >= m:\n                return False\n            if grid[i - h][j - h] != '*' or grid[i - h][j + h] != '*':\n                return False\n        return True\n\n    # Iterate over the grid from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == '*' and not visited[i][j]:\n                # Find the maximum size of tick that can be formed\n                d = 0\n                while is_valid_tick(i, j, d + 1):\n                    d += 1\n                \n                # If the tick size is at least k, mark the cells as visited\n                if d >= k:\n                    for h in range(d + 1):\n                        visited[i - h][j - h] = True\n                        visited[i - h][j + h] = True\n                else:\n                    return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n        \n        if can_form_tick(grid, n, m, k):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case including grid dimensions, minimum tick size, and the grid pattern.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers n, m, and k representing the grid dimensions and minimum tick size.\",\n        \"Read the next n lines to capture the grid pattern as a list of strings.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the grid pattern can be formed by ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the grid.\",\n        \"Check if a cell marked with '*' can be the center of a tick of size at least k.\",\n        \"Verify that for each potential tick center, the diagonals of size d (where d >= k) are also marked with '*'.\",\n        \"Ensure that all '*' cells can be accounted for by valid ticks.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, output 'YES' if the grid can be formed by ticks of size at least k, otherwise output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and details for each test case.\",\n    \"For each test case, analyze the grid to determine if it can be formed by ticks of size at least k.\",\n    \"Iterate over each cell in the grid to check for potential tick centers and validate tick formation.\",\n    \"Output the result for each test case based on the analysis.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick'\n    Explanation: A tick is a pattern of black cells on the grid, centered at a specific cell, and extending diagonally in both directions. The size of a tick is defined by the number of cells extending diagonally from the center.\n\n    'd \u2265 k'\n    Explanation: This means that the size of any tick drawn on the grid must be at least k, where k is a given minimum size.\n\n# [phrase showing quantity relationship]\n    'at least k': This means that the size of the tick (d) must be greater than or equal to k. In code, this can be implemented by checking if d >= k for any tick being considered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to checking if a cell can be the center of a tick and verifying the diagonals should be implemented simultaneously. Specifically, when iterating over each cell, you should immediately check if it can be the center of a tick and verify the diagonals in the same loop to ensure efficiency.\n\n# [edge case]\n    1. A grid with all cells marked as '.' (e.g., 3x3 grid with k=1):\n       Input: \n       ```\n       1\n       3 3 1\n       ...\n       ...\n       ...\n       ```\n       Expected Output: YES\n       Explanation: Since there are no '*' cells, the grid can trivially be considered as formed by zero ticks.\n\n    2. A grid with a single '*' in a corner and k=1:\n       Input:\n       ```\n       1\n       3 3 1\n       *..\n       ...\n       ...\n       ```\n       Expected Output: NO\n       Explanation: The single '*' cannot form a tick of size 1 or more.\n\n    3. A grid with a single row of '*' and k=2:\n       Input:\n       ```\n       1\n       1 5 2\n       *****\n       ```\n       Expected Output: NO\n       Explanation: A single row cannot form any valid tick of size 2 or more.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the grid is empty or has isolated '*' that cannot form valid ticks.\n    ```python\n    def can_form_ticks(grid, n, m, k):\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j]", "Round_0": {"code": "def can_form_ticks(grid, n, m, k):\n    # Create a copy of the grid to mark cells that can be part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if this cell can be the center of a tick of size at least k\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                \n                # If the tick size is at least k, mark the cells\n                if d > k:\n                    for h in range(d):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n    \n    # Check if all '*' cells are marked\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = can_form_ticks(grid, n, m, k)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case including grid dimensions, minimum tick size, and grid pattern.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read the integers n, m, and k representing the grid dimensions and minimum tick size.\",\n        \"Read the next n lines to capture the grid pattern as a list of strings.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the grid pattern can be formed by ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the grid.\",\n        \"Check if a tick of size at least k can be centered at each cell (i, j) by verifying the diagonal conditions.\",\n        \"Mark cells that can be part of a valid tick.\"\n      ]\n    },\n    {\n      \"description\": \"Validate the grid pattern against the tick formation.\",\n      \"steps\": [\n        \"For each test case, ensure all '*' cells can be explained by valid ticks.\",\n        \"If any '*' cell cannot be part of a valid tick, mark the test case as NO.\",\n        \"Otherwise, mark the test case as YES.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"Print YES or NO for each test case based on the validation results.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test case details.\",\n    \"For each test case, analyze the grid to determine possible tick formations.\",\n    \"Validate the grid pattern against the tick formations.\",\n    \"Output the result for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangular sheet of paper with a grid pattern': This refers to the grid structure where each cell can be either white ('.') or black ('*').\n\n    'tick of size d': A tick is a pattern of black cells centered at a specific cell, extending diagonally in both directions. The size d indicates how far the tick extends diagonally.\n\n    'd \u2265 k': This means that the size of each tick must be at least k.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the size of a tick must be greater than zero, meaning no zero-sized ticks are allowed.\n\n    '2d + 1 black cells': This describes the total number of black cells in a tick of size d, including the center cell.\n\n# [degree adverb]\n    'at least': Refers to the minimum size requirement for the ticks, meaning the size must be greater than or equal to k.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially, but within the second subproblem, checking if a tick can be centered at each cell and marking valid tick cells can be done simultaneously in a nested loop structure.\n\n# [edge case]\n    Case 1: A grid with all cells as '.' (no ticks possible)\n    Input: 3 3 1\n           ...\n           ...\n           ...\n    Expected Output: YES\n    Explanation: Since there are no '*' cells, the grid can be considered as having no ticks, which is valid.\n\n    Case 2: A grid with a single '*' cell\n    Input: 3 3 1\n           ...\n           .*.\n           ...\n    Expected Output: NO\n    Explanation: A single '*' cannot form a tick of size 1 or greater.\n\n    Case 3: A grid with '*' cells forming a valid tick of size k\n    Input: 3 3 1\n           .*.\n           ***\n           .*.\n    Expected Output: YES\n    Explanation: The '*' cells form a valid tick of size 1 centered at (2, 2).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where no ticks are present or single '*' cells exist.\n    Code for handling edge cases:\n    ```python\n    def handle_edge_cases(grid, n, m, k):\n        # Check if there are no '*' cells\n        if all(cell == '.' for row in grid for cell in row):\n            return", "Round_0": {"code": "def can_form_ticks(n, m, k, grid):\n    # Create a grid to mark cells that can be part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell in the grid\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if a tick of size at least k can be centered at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                d -= 1\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Validate the grid pattern against the tick formation\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, field dimensions, minimum tick size, and field patterns.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers n, m, and k representing the field dimensions and minimum tick size.\",\n        \"Read the next n lines to capture the field pattern as a list of strings.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a given field pattern can be formed by ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size at least k.\",\n        \"Verify that all cells required for the tick are painted black ('*').\",\n        \"Mark cells that are part of a valid tick to avoid rechecking.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"For each test case, output 'YES' if the field can be formed by ticks of size at least k, otherwise output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and field patterns.\",\n    \"For each test case, analyze the field pattern to determine if it can be formed by valid ticks.\",\n    \"Iterate over each cell to check for potential tick centers and validate tick formation.\",\n    \"Output the result for each test case based on the analysis.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick'\n    Explanation: A tick is a pattern of black cells ('*') on the grid, centered at a specific cell, and extending diagonally in both directions. The size of a tick is determined by the number of cells it extends diagonally from the center.\n\n    'minimum size of the ticks'\n    Explanation: This refers to the smallest allowable size for any tick drawn on the grid. Each tick must have a size of at least 'k', meaning it must extend at least 'k' cells diagonally from the center.\n\n# [phrase showing quantity relationship]\n    'at least k'\n    Explanation: This means that the size of each tick must be greater than or equal to 'k'. In code, this can be implemented by checking if the size of a tick (d) is >= k.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the subproblem \"Determine if a given field pattern can be formed by ticks of size at least k\" should be implemented simultaneously. Specifically, when iterating over each cell, checking if it can be the center of a tick, verifying the tick's validity, and marking cells should be done in a single loop to ensure efficiency and correctness.\n\n# [edge case]\n    1. A grid with no '*' characters at all, e.g., a 3x3 grid with all '.' characters.\n       Expected output: YES\n       Explanation: Since there are no '*' characters, no ticks are needed, and the grid is trivially valid.\n\n    2. A grid where all '*' characters are isolated and cannot form a tick of size k, e.g., a 3x3 grid with '*' only at (1,1), (2,2), and (3,3) with k=2.\n       Expected output: NO\n       Explanation: None of the '*' characters can form a valid tick of size 2.\n\n    3. A grid where a valid tick of size k is possible, but there are extra '*' characters that do not fit into any tick, e.g., a 4x4 grid with a valid tick of size 2 and an isolated '*' elsewhere.\n       Expected output: NO\n       Explanation: The isolated '*' cannot be part of any valid tick, making the grid invalid.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that all '*' characters are part of valid", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a grid to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check for potential tick centers\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if this cell can be the center of a tick of size at least k\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If the tick size is at least k, mark the cells\n                if d > k:\n                    for h in range(d):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' are part of valid ticks\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case including grid dimensions, minimum tick size, and grid pattern.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers n, m, and k representing the grid dimensions and minimum tick size.\",\n        \"Read the next n lines to capture the grid pattern as a list of strings.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if the grid pattern can be formed by ticks of size at least k.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the grid.\",\n        \"Check if a tick of size d >= k can be centered at each cell (i, j) by verifying the diagonal conditions.\",\n        \"Mark cells that can be part of a valid tick.\"\n      ]\n    },\n    {\n      \"description\": \"Validate the grid pattern against the tick formation.\",\n      \"steps\": [\n        \"For each test case, ensure all '*' cells can be explained by valid ticks.\",\n        \"If any '*' cell cannot be part of a valid tick, mark the test case as NO.\",\n        \"Otherwise, mark the test case as YES.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and grid details.\",\n    \"For each test case, iterate over the grid to identify potential tick centers.\",\n    \"Validate each '*' cell to ensure it can be part of a tick of size at least k.\",\n    \"Output YES if the grid can be formed by valid ticks, otherwise output NO.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangular sheet of paper with a grid pattern': This refers to the grid structure where operations will be performed.\n    'tick of size d': A pattern centered at a cell, extending diagonally with specific rules.\n    'd \u2265 k': The minimum size constraint for ticks.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the tick size must be positive.\n    '2d + 1 black cells': Specifies the number of cells painted black for a tick of size d.\n    'd \u2265 k': Implies that the tick size must be at least k.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented simultaneously when checking if a tick can be centered at a cell. Specifically, the steps:\n    - \"Check if a tick of size d >= k can be centered at each cell (i, j) by verifying the diagonal conditions.\"\n    - \"Mark cells that can be part of a valid tick.\"\n    These can be done in a single loop over the grid, checking conditions and marking cells accordingly.\n\n# [edge case]\n    Case 1: A grid with all cells as '.' (no ticks possible)\n    Input: 3 3 1\n           ...\n           ...\n           ...\n    Expected Output: YES\n    Explanation: Since there are no '*' cells, the grid can trivially be considered as formed by zero ticks.\n\n    Case 2: A grid with '*' cells that cannot form a valid tick\n    Input: 3 3 2\n           *..\n           ...\n           ...\n    Expected Output: NO\n    Explanation: The single '*' cannot form a tick of size 2, hence the grid cannot be formed by valid ticks.\n\n    Case 3: A grid with '*' cells forming a valid tick of minimum size\n    Input: 3 3 1\n           *.*\n           .*.\n           ...\n    Expected Output: YES\n    Explanation: The '*' cells can form ticks of size 1, satisfying the condition.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that:\n    - If there are no '*' cells, the output should be YES.\n    - If any '*' cell cannot be part of a valid tick, the output should be NO.\n    This can be handled by iterating over the grid and checking each '*' cell against the tick formation rules.\n\n", "Round_0": {"code": "def can_form_ticks(n, m, k, grid):\n    # Create a grid to mark cells that can be part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if a tick of size d >= k can be centered at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n                    marked[i][j] = True\n\n    # Validate the grid pattern against the tick formation\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, grid dimensions, minimum tick size, and grid patterns.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the grid dimensions (n, m) and minimum tick size (k).\",\n        \"Read the grid pattern consisting of n lines with m characters each.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a tick of size d >= k can be drawn on the grid for each test case.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the grid.\",\n        \"Check if the cell can be the center of a tick of size d >= k.\",\n        \"Verify that the cells diagonally from the top-left and top-right to the center are painted black.\",\n        \"Ensure that all cells with coordinates (i - h, j \u00b1 h) for each h ranging from 0 to d are painted black.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If the grid can be obtained by drawing ticks of size d >= k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and grid information.\",\n    \"For each test case, analyze the grid to determine if it can be formed by ticks of size d >= k.\",\n    \"Output the result for each test case based on the analysis.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid pattern': A rectangular arrangement of cells, each of which can be either white ('.') or black ('*').\n    'tick': A pattern of black cells centered at a specific cell, extending diagonally in both directions.\n    'size d': The number of cells extending diagonally from the center, with a total of 2d + 1 black cells.\n    'minimum size k': The smallest allowable size for any tick drawn on the grid.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the size of a tick must be greater than zero, meaning no tick can be of size zero.\n    '2d + 1': Represents the total number of black cells in a tick, including the center and the diagonals.\n    'd \u2265 k': Specifies that the size of any tick must be at least k.\n\n# [degree adverb]\n    'at least': Implies that the size of the tick must be greater than or equal to a specified value (k).\n\n# [code logic]\n    The steps in the plan for checking if a tick can be drawn should be implemented simultaneously:\n    - \"Check if the cell can be the center of a tick of size d >= k.\"\n    - \"Verify that the cells diagonally from the top-left and top-right to the center are painted black.\"\n    - \"Ensure that all cells with coordinates (i - h, j \u00b1 h) for each h ranging from 0 to d are painted black.\"\n    These steps can be combined into a single loop that checks each potential center cell and verifies the tick pattern.\n\n# [edge case]\n    1. A grid with all cells white ('.') and k = 1:\n       Input: 1 1 1\n              .\n       Expected Output: YES\n       Explanation: No ticks are needed, and the grid is already valid.\n\n    2. A grid with a single black cell ('*') and k = 1:\n       Input: 1 1 1\n              *\n       Expected Output: NO\n       Explanation: A single black cell cannot form a tick of size 1.\n\n    3. A grid with a valid tick pattern but k is larger than the tick size:\n       Input: 3 3 2\n              .*. \n              *.* \n              .*.\n       Expected Output: NO\n       Explanation: The tick size is 1, which is less than k = 2.\n\n#", "Round_0": {"code": "def can_form_ticks(n, m, k, grid):\n    # Create a copy of the grid to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible tick centers from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Try to find the maximum size of the tick with center at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if grid[i - d][j - d] != '*' or grid[i - d][j + d] != '*':\n                        break\n                    d += 1\n                d -= 1  # Adjust d to the last valid size\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the grid are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        grid = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, grid)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, true, true, true, true, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 517, "prompt": "Casimir possesses a rectangular sheet of paper with a grid pattern measuring n \u00d7 m. Initially, every cell in the grid is white. Let us denote the cell with coordinates i vertically and j horizontally by (i, j). The top-left cell will be called (1, 1) and the bottom-right cell will be called (n, m). Casimir draws ticks of various sizes on the grid. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: 1. The center cell (i, j) is painted black first. 2. Then exactly d cells diagonally from the top-left to the center and exactly d cells diagonally from the top-right to the center are also painted black. 3. Essentially, all cells with coordinates (i - h, j \u00b1 h) for each h ranging from 0 to d are painted. In particular, a tick has 2d + 1 black cells. An already painted cell will stay black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3. <image> You are given a portrayal of a checkered field of size n \u00d7 m. Casimir argues that this field was produced after he drew some (possibly 0) ticks on it. The ticks could be of varying sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks). Ascertain whether this field could genuinely be the result of drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 270}
