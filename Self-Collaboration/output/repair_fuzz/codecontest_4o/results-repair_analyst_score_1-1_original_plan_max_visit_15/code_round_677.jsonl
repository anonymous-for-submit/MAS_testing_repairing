{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "repair_prompt": ["You are given a keyboard consisting of 26 keys, which are arranged sequentially in one row in a specific order where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard, and it also consists only of lowercase Latin letters. To type a word, you must position your hand over each key, press it, and moving the hand takes time equal to the absolute difference between the positions of the keys (the keys are numbered from left to right). No time is spent on pressing the keys. No time is spent on placing your hand over the first letter of the word. For instance, imagine a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively, therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". Calculate the time required to type out the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "You are given a keyboard consisting of 26 keys, which are arranged sequentially in one row in a specific order where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard, and it also consists only of lowercase Latin letters. To type a word, you must position your hand over each key, press it, and moving the hand takes time equal to the absolute difference between the positions of the keys. The positions of the keys are numbered from left to right. No time is spent on pressing the keys. No time is spent on placing your hand over the first letter of the word. For instance, imagine a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively, therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". Calculate the time required to type out the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "You are given a keyboard consisting of 26 keys, which are arranged sequentially in one row in a specific order where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard, and it also consists only of lowercase Latin letters, and to type a word, you must position your hand over each key, press it, and moving the hand takes time equal to the absolute difference between the positions of the keys (the keys are numbered from left to right). No time is spent on pressing the keys. No time is spent on placing your hand over the first letter of the word. For instance, imagine a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively, therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". Calculate the time required to type out the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a mapping of each letter to its position in the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n\nmain()", "completions": ["def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a mapping of each letter to its position in the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n\nmain()", "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        position = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(position[word[i]] - position[word[i - 1]])\n        \n        results.append(time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n\nmain()", "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n\nmain()", "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a position dictionary for the keyboard\n        position = {char: i for i, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position[word[i]] - position[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n\nmain()", "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a position index map for the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n\nmain()", "def calculate_typing_time(test_cases):\n    results = []\n    for keyboard, word in test_cases:\n        # Map each character in the keyboard to its position\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        typing_time = 0\n        for i in range(1, len(word)):\n            typing_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(typing_time)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [(data[i * 2 + 1], data[i * 2 + 2]) for i in range(t)]\n    \n    results = calculate_typing_time(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary to map each character to its position\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        total_time = 0\n        current_position = position_map[word[0]]\n        \n        for char in word[1:]:\n            next_position = position_map[char]\n            total_time += abs(next_position - current_position)\n            current_position = next_position\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n\nmain()", "def calculate_typing_time(test_cases):\n    results = []\n    for keyboard, word in test_cases:\n        # Create a mapping of each letter to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the total time required to type the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = []\n    \n    for i in range(t):\n        keyboard = data[2 * i + 1]\n        word = data[2 * i + 2]\n        test_cases.append((keyboard, word))\n    \n    results = calculate_typing_time(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary mapping each character to its position\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n\nmain()", "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a mapping of each letter to its position in the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, keyboards, and words.\",\n      \"details\": \"Read the first line to get the number of test cases 't'. For each test case, read two lines: the first line is the keyboard layout, and the second line is the word to be typed.\"\n    },\n    {\n      \"description\": \"Map each letter of the keyboard to its position.\",\n      \"details\": \"Create a dictionary where each key is a letter from the keyboard string and the value is its position (index) in the string.\"\n    },\n    {\n      \"description\": \"Calculate the typing time for each word based on the keyboard layout.\",\n      \"details\": \"For each word, iterate through its letters and calculate the total time by summing the absolute differences between consecutive letter positions using the previously created dictionary.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the calculated typing time for each test case on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases 't'.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the keyboard layout and the word to be typed.\",\n    \"  - Create a mapping of each letter to its position in the keyboard layout.\",\n    \"  - Initialize a variable to store the total typing time.\",\n    \"  - Iterate through the word, calculating the time taken to move between consecutive letters using the mapping.\",\n    \"  - Output the total typing time for the word.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key on the keyboard. The position of each letter in the string corresponds to its position on the keyboard.\n\n    'absolute difference'\n    Explanation: The absolute difference between two positions is the non-negative difference between them, which represents the time taken to move from one key to another.\n\n# [phrase showing quantity relationship]\n    'absolute difference': This indicates the calculation of the time taken to move between keys, which is implemented as `abs(position1 - position2)` in code.\n\n# [degree adverb] \n    'minimal': This refers to the calculation of the exact time required to type the word, without any additional time for pressing keys or initial positioning.\n\n# [code logic]\n    The steps for mapping each letter to its position and calculating the typing time should be implemented simultaneously for efficiency. Specifically, creating the mapping and using it to calculate the typing time can be done in a single loop over the word.\n\n# [edge case] \n    Test case with a single letter word: 'a' = 0\n    Explanation: No movement is required, so the time is 0.\n\n    Test case with repeated letters: 'aaaa' = 0\n    Explanation: No movement is required between the same letters, so the time is 0.\n\n    Test case with maximum length word: 'abcdefghijklmnopqrstuvwxyz' = 25\n    Explanation: The word is typed sequentially from the first to the last position, taking 25 units of time.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute difference between consecutive positions will naturally handle these cases.\n\nNO", "Round_0": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a mapping of each letter to its position in the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a mapping of each letter to its position in the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n"}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, keyboards, and words.\",\n      \"details\": \"Read the first line to get the number of test cases 't'. For each test case, read the next two lines: the first line is the keyboard layout, and the second line is the word to be typed.\"\n    },\n    {\n      \"description\": \"Map each letter of the keyboard to its position.\",\n      \"details\": \"Create a dictionary where each key is a letter from the keyboard string and the value is its position (index) in the string.\"\n    },\n    {\n      \"description\": \"Calculate the typing time for each word based on the keyboard layout.\",\n      \"details\": \"For each word, calculate the total time by summing the absolute differences between the positions of consecutive letters in the word using the previously created dictionary.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the calculated typing time for each test case on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases 't'.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the keyboard layout and the word to be typed.\",\n    \"  - Create a mapping of each letter to its position in the keyboard layout.\",\n    \"  - Initialize a variable to store the total typing time.\",\n    \"  - Iterate over the word, calculate the time taken to move between consecutive letters, and update the total typing time.\",\n    \"  - Print the total typing time for the current test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key on the keyboard. The position of each letter in the string corresponds to its position on the keyboard.\n\n    'typing time'\n    Explanation: Typing time is calculated as the sum of the absolute differences between the positions of consecutive letters in the word, according to the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'absolute difference': This refers to the non-negative difference between two numbers, which in this context is the distance between two keys on the keyboard. In code, this can be implemented using the `abs()` function in Python.\n\n# [degree adverb]\n    'minimal': This indicates that the calculated time should be the least possible time required to type the word, given the constraints. In this context, it means accurately calculating the time based on the given keyboard layout without any unnecessary operations.\n\n# [code logic]\n    The steps for creating a mapping of each letter to its position and calculating the typing time should be implemented simultaneously for each test case. Specifically, after reading the keyboard layout and word, the mapping and time calculation should occur in a single loop to ensure efficiency.\n\n# [edge case]\n    1. Input: \n       ```\n       1\n       abcdefghijklmnopqrstuvwxyz\n       a\n       ```\n       Output: 0\n       Explanation: Since the word consists of a single letter, no movement is required, resulting in a typing time of 0.\n\n    2. Input: \n       ```\n       1\n       zyxwvutsrqponmlkjihgfedcba\n       z\n       ```\n       Output: 0\n       Explanation: Similar to the first case, a single letter requires no movement, so the typing time is 0.\n\n    3. Input: \n       ```\n       1\n       qwertyuiopasdfghjklzxcvbnm\n       qqqqq\n       ```\n       Output: 0\n       Explanation: All letters in the word are the same, so no movement is required between different keys, resulting in a typing time of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the typing time by summing the absolute differences between consecutive letters inherently handles these cases correctly.\n\nNO", "Round_0": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a mapping of each letter to its position in the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a mapping of each letter to its position in the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, keyboards, and words.\",\n      \"details\": \"Read the input data and split it into the number of test cases, followed by pairs of keyboard strings and word strings.\"\n    },\n    {\n      \"description\": \"Map each keyboard string to a position dictionary.\",\n      \"details\": \"For each keyboard string, create a dictionary that maps each letter to its position index.\"\n    },\n    {\n      \"description\": \"Calculate the typing time for each word using the corresponding keyboard mapping.\",\n      \"details\": \"For each word, calculate the total time required to type it by summing the absolute differences between consecutive letter positions using the position dictionary.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the calculated typing time for each test case on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"Iterate over each test case to read the keyboard and word.\",\n    \"For each keyboard, create a dictionary mapping each letter to its position.\",\n    \"For each word, calculate the typing time using the position dictionary.\",\n    \"Print the typing time for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard', 'word', 'position', 'absolute difference'\n    Explanation: The keyboard is a sequence of 26 unique lowercase Latin letters. The word is a sequence of lowercase Latin letters that needs to be typed using the keyboard. The position refers to the index of each letter on the keyboard. The absolute difference is used to calculate the time taken to move between keys.\n\n# [phrase showing quantity relationship]\n    'absolute difference': This refers to the non-negative difference between the positions of two keys on the keyboard. In code, this can be implemented using the `abs()` function in Python to calculate the absolute difference between two indices.\n\n# [degree adverb]\n    'minimal': This implies that the calculation should ensure the least amount of time is spent typing the word, which is inherently achieved by the described method of summing absolute differences between consecutive key positions.\n\n# [code logic]\n    The steps for creating the position dictionary and calculating the typing time should be implemented simultaneously for each test case. Specifically, after reading the keyboard and word, the position dictionary should be created, and then the typing time should be calculated in a single loop over the word.\n\n# [edge case]\n    1. Keyboard: 'abcdefghijklmnopqrstuvwxyz', Word: 'a' = 0\n       Explanation: The word consists of a single letter, so no movement is required, resulting in 0 time.\n    2. Keyboard: 'zyxwvutsrqponmlkjihgfedcba', Word: 'az' = 25\n       Explanation: The keyboard is reversed, so moving from 'a' to 'z' requires 25 units of time.\n    3. Keyboard: 'qwertyuiopasdfghjklzxcvbnm', Word: 'mnbvcxz' = 6\n       Explanation: The word requires moving across the keyboard in a specific pattern, resulting in a total time of 6 units.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute differences between consecutive letter positions will naturally handle these cases.\n\nNO", "Round_0": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        position = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(position[word[i]] - position[word[i - 1]])\n        \n        results.append(time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 77)"}, "Round_1": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        position = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(position[word[i]] - position[word[i - 1]])\n        \n        results.append(time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, keyboards, and words.\",\n      \"details\": \"Read the integer t from the first line, then read the next 2t lines to get each keyboard and corresponding word.\"\n    },\n    {\n      \"description\": \"Map each keyboard layout to a position index.\",\n      \"details\": \"For each keyboard string, create a dictionary that maps each letter to its position index (0 to 25).\"\n    },\n    {\n      \"description\": \"Calculate the typing time for each word on its corresponding keyboard.\",\n      \"details\": \"For each word, calculate the total time by summing the absolute differences between consecutive letter positions using the mapped indices.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the calculated time for each word on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data to get the number of test cases and the corresponding keyboards and words.\",\n    \"For each test case, map the keyboard layout to a dictionary of letter positions.\",\n    \"For each word, calculate the total typing time by iterating through the word and summing the absolute differences between consecutive letter positions.\",\n    \"Output the calculated typing time for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key on the keyboard. The position of each letter in the string determines its position on the keyboard.\n\n    'typing time'\n    Explanation: Typing time is calculated as the sum of the absolute differences between the positions of consecutive letters in the word, according to the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'absolute difference': This refers to the non-negative difference between two numbers, which in this context is the distance between two keys on the keyboard.\n    Implementation: Use the `abs()` function in Python to calculate the absolute difference between positions.\n\n# [degree adverb] \n    'minimal': This indicates that the calculated time should be the least possible time required to type the word, which is inherently ensured by the method of calculation described (summing absolute differences).\n\n# [code logic]\n    The steps in the plan are sequential and do not require simultaneous execution. Each step builds on the previous one, so they should be implemented in the order given.\n\n# [edge case] \n    Case 1: Single letter word\n    Input: \n    ```\n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    ```\n    Expected Output: \n    ```\n    0\n    ```\n    Explanation: No movement is needed to type a single letter.\n\n    Case 2: All letters the same\n    Input: \n    ```\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qqqqq\n    ```\n    Expected Output: \n    ```\n    0\n    ```\n    Explanation: No movement is needed when all letters are the same.\n\n    Case 3: Maximum length word\n    Input: \n    ```\n    1\n    zyxwvutsrqponmlkjihgfedcba\n    abcdefghijklmnopqrstuvwxyz\n    ```\n    Expected Output: \n    ```\n    650\n    ```\n    Explanation: The word requires maximum movement across the keyboard.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute differences between consecutive letter positions will naturally handle these cases.\n\nNO", "Round_0": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, keyboards, and words.\",\n      \"details\": \"Read the input data and split it into the number of test cases, followed by pairs of keyboard strings and words.\"\n    },\n    {\n      \"description\": \"Map each keyboard string to a position dictionary.\",\n      \"details\": \"For each keyboard string, create a dictionary that maps each letter to its position index.\"\n    },\n    {\n      \"description\": \"Calculate the typing time for each word using the position dictionary.\",\n      \"details\": \"For each word, calculate the total time by summing the absolute differences between consecutive letter positions using the position dictionary.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the calculated typing time for each word in the order of the test cases.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, read the keyboard string and the word to be typed.\",\n    \"Create a position dictionary for the keyboard string.\",\n    \"Initialize a variable to store the total typing time for the word.\",\n    \"Iterate over the word, calculating the absolute difference in positions between consecutive letters using the position dictionary.\",\n    \"Sum these differences to get the total typing time for the word.\",\n    \"Store the result for the current test case.\",\n    \"After processing all test cases, print the results.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard': refers to the arrangement of 26 keys corresponding to lowercase Latin letters in a specific order.\n    'absolute difference': refers to the calculation of the time taken to move between keys based on their positions.\n\n# [phrase showing quantity relationship]\n    'absolute difference': means calculating the time taken to move between keys by finding the absolute difference between their positions.\n    Implementation: Use `abs(position1 - position2)` in code to calculate the time taken to move between two keys.\n\n# [degree adverb] \n    'minimal': means the least amount of time required to type the word.\n    Implementation: Ensure the calculation correctly sums the absolute differences between consecutive key positions.\n\n# [code logic]\n    The steps for creating a position dictionary and calculating typing time should be implemented simultaneously for each test case.\n    Explanation: For each test case, after reading the keyboard and word, create the position dictionary and immediately use it to calculate the typing time for the word.\n\n# [edge case] \n    Test case with a single letter word: 'a' = 0\n    Explanation: No movement is required, so the time is 0.\n    Test case with repeated letters: 'aaaa' = 0\n    Explanation: No movement is required between the same letters, so the time is 0.\n    Test case with maximum length word: 'abcdefghijklmnopqrstuvwxyz' = 25\n    Explanation: The word is typed sequentially from the first to the last key, requiring movement between each consecutive key.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute differences between consecutive letters will handle these cases correctly.\n\nNO", "Round_0": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a position dictionary for the keyboard\n        position = {char: i for i, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position[word[i]] - position[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a position dictionary for the keyboard\n        position = {char: i for i, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position[word[i]] - position[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, keyboards, and words.\",\n      \"details\": \"Read the integer t from the first line, then read the next 2t lines to get each keyboard and corresponding word.\"\n    },\n    {\n      \"description\": \"Map each keyboard layout to a position index.\",\n      \"details\": \"For each keyboard string, create a dictionary that maps each character to its position index (0 to 25).\"\n    },\n    {\n      \"description\": \"Calculate the typing time for each word based on its keyboard layout.\",\n      \"details\": \"For each word, calculate the total time by summing the absolute differences between consecutive character positions using the mapped indices.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the calculated typing time for each word on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases (t).\",\n    \"For each test case, perform the following steps:\",\n    \"  Read the keyboard layout and the word to be typed.\",\n    \"  Create a position index map for the keyboard layout.\",\n    \"  Initialize a variable to store the total typing time.\",\n    \"  Iterate over the word to calculate the typing time using the position index map.\",\n    \"  Output the total typing time for the word.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key on the keyboard. The position of each letter in the string determines its position on the keyboard.\n\n    'typing time'\n    Explanation: Typing time is calculated as the sum of the absolute differences between the positions of consecutive letters in the word, according to their positions on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'absolute difference': This refers to the non-negative difference between two numbers, which in this context is the distance between two keys on the keyboard. In code, this can be implemented using the `abs()` function in Python.\n\n# [degree adverb] \n    'minimal': This indicates that the calculated time should be the least possible time required to type the word, given the constraints. In this context, it means accurately calculating the time based on the given keyboard layout without any additional delays.\n\n# [code logic]\n    The steps for creating a position index map and calculating the typing time should be implemented simultaneously for each test case. Specifically, after reading the keyboard layout and word, the position index map should be created, and then the typing time should be calculated in a single loop over the word.\n\n# [edge case] \n    Case 1: \n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    Expected Output: \n    0\n    Explanation: Since the word consists of a single letter, no movement is required, resulting in a typing time of 0.\n\n    Case 2: \n    Input: \n    1\n    zyxwvutsrqponmlkjihgfedcba\n    az\n    Expected Output: \n    25\n    Explanation: The positions of 'a' and 'z' are 25 and 0, respectively, on this keyboard layout, resulting in an absolute difference of 25.\n\n    Case 3: \n    Input: \n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qwerty\n    Expected Output: \n    5\n    Explanation: The word is typed sequentially on the keyboard layout, resulting in minimal movement between consecutive keys.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute differences between consecutive character positions will naturally handle these cases.\n\nNO", "Round_0": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a position index map for the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a position index map for the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, keyboards, and words.\",\n      \"details\": \"Read the integer t from the first line, then read the next 2t lines to get each keyboard and corresponding word.\"\n    },\n    {\n      \"description\": \"Map each keyboard layout to a position index.\",\n      \"details\": \"For each keyboard string, create a dictionary that maps each character to its position index (0 to 25).\"\n    },\n    {\n      \"description\": \"Calculate the typing time for each word on its corresponding keyboard.\",\n      \"details\": \"For each word, calculate the total time by summing the absolute differences between consecutive character positions using the mapped indices.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the calculated typing time for each word on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data to get the number of test cases and the corresponding keyboards and words.\",\n    \"For each test case, map the keyboard layout to a dictionary of character positions.\",\n    \"For each word, calculate the total typing time by iterating through the characters and summing the absolute differences in positions.\",\n    \"Print the typing time for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key on the keyboard. The position of each letter in the string determines its position on the keyboard.\n\n    'typing time'\n    Explanation: Typing time is calculated as the sum of the absolute differences between the positions of consecutive letters in the word, according to their positions on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'absolute difference': This refers to the non-negative difference between two numbers, which in this context is the distance between two keys on the keyboard. In code, this can be implemented using the `abs()` function in Python.\n\n# [degree adverb]\n    'minimal': This indicates that the calculated time should be the least possible time required to type the word, given the constraints. In this context, it means accurately calculating the time based on the given keyboard layout without any additional delays.\n\n# [code logic]\n    The steps for mapping the keyboard layout to positions and calculating the typing time should be implemented simultaneously for each test case. Specifically, after mapping the keyboard, the typing time calculation should directly follow for each word.\n\n# [edge case]\n    1. Input: \n       1\n       abcdefghijklmnopqrstuvwxyz\n       a\n       Expected Output: 0\n       Explanation: Since the word consists of a single letter, no movement is required, resulting in a typing time of 0.\n\n    2. Input: \n       1\n       zyxwvutsrqponmlkjihgfedcba\n       z\n       Expected Output: 0\n       Explanation: Similar to the first case, a single letter requires no movement, so the typing time is 0.\n\n    3. Input: \n       1\n       qwertyuiopasdfghjklzxcvbnm\n       qwerty\n       Expected Output: 0\n       Explanation: The word \"qwerty\" is typed in the order of the given keyboard layout, so no additional time is needed beyond the initial positioning.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute differences between consecutive character positions will naturally handle these cases correctly.\n\nNO", "Round_0": {"code": "def calculate_typing_time(test_cases):\n    results = []\n    for keyboard, word in test_cases:\n        # Map each character in the keyboard to its position\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        typing_time = 0\n        for i in range(1, len(word)):\n            typing_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(typing_time)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [(data[i * 2 + 1], data[i * 2 + 2]) for i in range(t)]\n    \n    results = calculate_typing_time(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 71)"}, "Round_1": {"code": "def calculate_typing_time(test_cases):\n    results = []\n    for keyboard, word in test_cases:\n        # Map each character in the keyboard to its position\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        typing_time = 0\n        for i in range(1, len(word)):\n            typing_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(typing_time)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [(data[i * 2 + 1], data[i * 2 + 2]) for i in range(t)]\n    \n    results = calculate_typing_time(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, keyboards, and words.\",\n      \"details\": \"Read the input data and split it into the number of test cases (t), followed by pairs of lines where each pair consists of a keyboard string and a word string.\"\n    },\n    {\n      \"description\": \"Map each keyboard layout to a dictionary for quick position lookup.\",\n      \"details\": \"For each keyboard string, create a dictionary that maps each character to its position index in the string.\"\n    },\n    {\n      \"description\": \"Calculate the typing time for each word on its corresponding keyboard.\",\n      \"details\": \"For each word, use the dictionary to find the position of each character and calculate the total time by summing the absolute differences between consecutive character positions.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, print the calculated typing time on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the entire input data at once and split it into lines.\",\n    \"Extract the number of test cases (t) from the first line.\",\n    \"Iterate over the test cases, processing two lines at a time: one for the keyboard and one for the word.\",\n    \"For each keyboard, create a dictionary mapping each letter to its index position.\",\n    \"For each word, initialize a variable to track the total typing time.\",\n    \"Iterate over the characters of the word, using the dictionary to find positions and calculate the time difference between consecutive characters.\",\n    \"Sum these differences to get the total typing time for the word.\",\n    \"Store the result for each test case.\",\n    \"After processing all test cases, print the results, each on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard': refers to the arrangement of 26 keys corresponding to lowercase Latin letters in a specific order.\n    'absolute difference': refers to the calculation of the time taken to move between keys based on their positions.\n\n# [phrase showing quantity relationship]\n    'absolute difference': means the time taken to move between keys is calculated using the absolute difference between their positions.\n    Implementation: Use `abs(position1 - position2)` in code to calculate the time.\n\n# [degree adverb]\n    'minimal': means the least amount of time required to type the word.\n    Implementation: Ensure the calculation correctly sums the absolute differences to find the total time.\n\n# [code logic]\n    The steps for creating the dictionary mapping and calculating the typing time should be implemented simultaneously for each test case.\n    Implementation: Within the loop for each test case, create the dictionary and calculate the typing time in one block of code.\n\n# [edge case]\n    Test case with a single letter word: 'a' on any keyboard = 0\n    Explanation: No movement is required, so the time is 0.\n    \n    Test case with repeated letters: 'aaaa' on any keyboard = 0\n    Explanation: No movement is required between the same letters, so the time is 0.\n    \n    Test case with maximum length word: 'abcdefghijklmnopqrstuvwxyz' on a keyboard arranged in reverse order = 650\n    Explanation: The maximum movement occurs when typing the alphabet in reverse order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute differences between consecutive characters will handle these cases correctly.\n\nNO", "Round_0": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary to map each character to its position\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        total_time = 0\n        current_position = position_map[word[0]]\n        \n        for char in word[1:]:\n            next_position = position_map[char]\n            total_time += abs(next_position - current_position)\n            current_position = next_position\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary to map each character to its position\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the typing time for the word\n        total_time = 0\n        current_position = position_map[word[0]]\n        \n        for char in word[1:]:\n            next_position = position_map[char]\n            total_time += abs(next_position - current_position)\n            current_position = next_position\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the corresponding keyboard and word for each test case.\",\n      \"steps\": [\n        \"Read the integer t from the input, which represents the number of test cases.\",\n        \"For each test case, read the next two lines: the first line is the keyboard layout, and the second line is the word to be typed.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the time required to type the word on the given keyboard for each test case.\",\n      \"steps\": [\n        \"Create a mapping of each letter to its position on the keyboard.\",\n        \"Initialize a variable to keep track of the total time for typing the word.\",\n        \"Iterate through the word, and for each pair of consecutive letters, calculate the absolute difference in their positions on the keyboard and add it to the total time.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, print the calculated total time on a new line.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the corresponding keyboard and word for each test case.\",\n    \"For each test case, create a mapping of each letter to its position on the keyboard.\",\n    \"Calculate the total time required to type the word by summing the absolute differences in positions for each consecutive pair of letters in the word.\",\n    \"Output the total time for each test case on a new line.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard': A string of 26 unique lowercase Latin letters representing the layout of the keyboard.\n    'word s': The word to be typed using the given keyboard layout.\n    'absolute difference': The time taken to move between keys is the absolute difference in their positions.\n\n# [phrase showing quantity relationship]\n    'absolute difference': This refers to the non-negative difference between the positions of two keys. In code, this can be implemented using the `abs()` function in Python.\n\n# [degree adverb] \n    'minimal': This implies calculating the exact time required without any additional or unnecessary steps. The plan already accounts for this by summing only the necessary movements.\n\n# [code logic]\n    The steps in the plan are well-structured and do not require simultaneous execution. Each step logically follows the previous one, ensuring clarity and correctness.\n\n# [edge case] \n    1. Input: \n       ```\n       1\n       abcdefghijklmnopqrstuvwxyz\n       a\n       ```\n       Output: 0\n       Explanation: No movement is needed as the word consists of a single letter.\n       \n    2. Input: \n       ```\n       1\n       zyxwvutsrqponmlkjihgfedcba\n       z\n       ```\n       Output: 0\n       Explanation: Similar to the first case, no movement is needed for a single letter.\n       \n    3. Input: \n       ```\n       1\n       abcdefghijklmnopqrstuvwxyz\n       zyx\n       ```\n       Output: 50\n       Explanation: The movement is from 'z' to 'y' (1 unit), 'y' to 'x' (1 unit), totaling 2 units.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute difference between consecutive letters already handles these cases effectively.\n\nNO", "Round_0": {"code": "def calculate_typing_time(test_cases):\n    results = []\n    for keyboard, word in test_cases:\n        # Create a mapping of each letter to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the total time required to type the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = []\n    \n    for i in range(t):\n        keyboard = data[2 * i + 1]\n        word = data[2 * i + 2]\n        test_cases.append((keyboard, word))\n    \n    results = calculate_typing_time(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 77)"}, "Round_1": {"code": "def calculate_typing_time(test_cases):\n    results = []\n    for keyboard, word in test_cases:\n        # Create a mapping of each letter to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the total time required to type the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = []\n    \n    for i in range(t):\n        keyboard = data[2 * i + 1]\n        word = data[2 * i + 2]\n        test_cases.append((keyboard, word))\n    \n    results = calculate_typing_time(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, keyboards, and words.\",\n      \"details\": \"Read the input data and split it into the number of test cases, followed by pairs of keyboard strings and word strings.\"\n    },\n    {\n      \"description\": \"Map each keyboard string to a dictionary of character positions.\",\n      \"details\": \"For each keyboard string, create a dictionary where each character is a key and its position in the string is the value.\"\n    },\n    {\n      \"description\": \"Calculate the typing time for each word using the corresponding keyboard mapping.\",\n      \"details\": \"For each word, calculate the total time by summing the absolute differences between consecutive character positions using the dictionary created in the previous step.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the calculated typing time for each word in the order of the test cases.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases from the input.\",\n    \"For each test case, read the keyboard string and the word string.\",\n    \"Create a dictionary mapping each character in the keyboard string to its position.\",\n    \"Initialize a variable to store the total typing time for the word.\",\n    \"Iterate over the characters in the word, calculate the absolute difference in positions for consecutive characters, and accumulate the total time.\",\n    \"Output the accumulated time for each test case.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard': refers to the arrangement of 26 unique lowercase Latin letters in a specific order.\n    'absolute difference': refers to the non-negative difference between two positions, which is used to calculate the time taken to move between keys.\n\n# [phrase showing quantity relationship]\n    'absolute difference': means the time taken to move between keys is calculated by the absolute difference between their positions.\n    Implementation: Use `abs(position1 - position2)` in code to calculate the time.\n\n# [degree adverb]\n    'minimal': means the least amount of time required to type the word.\n    Implementation: The calculation inherently finds the minimal time by summing only necessary movements.\n\n# [code logic]\n    The steps for creating the dictionary mapping and calculating the typing time should be implemented simultaneously for each test case. This can be done by iterating through the test cases and performing both actions in a single loop.\n\n# [edge case]\n    Test case with a single letter word: \n    Input: 'abcdefghijklmnopqrstuvwxyz', 'a'\n    Expected output: 0\n    Explanation: No movement is needed as the word consists of a single letter.\n    \n    Test case with repeated letters:\n    Input: 'abcdefghijklmnopqrstuvwxyz', 'aaaa'\n    Expected output: 0\n    Explanation: No movement is needed as all letters are the same.\n    \n    Test case with maximum length word:\n    Input: 'abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz'\n    Expected output: 25\n    Explanation: The word consists of all letters in order, requiring movement from the first to the last position.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute difference between consecutive characters will handle these cases correctly.\n\nNO", "Round_0": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary mapping each character to its position\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a dictionary mapping each character to its position\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, keyboards, and words.\",\n      \"details\": \"Read the first line to get the number of test cases 't'. For each test case, read two lines: the first line is the keyboard layout, and the second line is the word to be typed.\"\n    },\n    {\n      \"description\": \"Map each letter of the keyboard to its position.\",\n      \"details\": \"Create a dictionary where each key is a letter from the keyboard string and the value is its position (index) in the string.\"\n    },\n    {\n      \"description\": \"Calculate the typing time for each word based on the keyboard layout.\",\n      \"details\": \"For each word, iterate through its letters and calculate the total time by summing the absolute differences between consecutive letter positions using the previously created dictionary.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"Print the calculated typing time for each test case on a new line.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases 't'.\",\n    \"For each test case, perform the following steps:\",\n    \"  - Read the keyboard layout and the word to be typed.\",\n    \"  - Create a mapping of each letter to its position in the keyboard layout.\",\n    \"  - Initialize a variable to store the total typing time.\",\n    \"  - Iterate through the word, calculating the time taken to move between consecutive letters using the mapping.\",\n    \"  - Output the total typing time for the word.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key on the keyboard. The position of each letter in the string corresponds to its position on the keyboard.\n\n    'absolute difference'\n    Explanation: The absolute difference between two positions is the non-negative difference between them, which represents the time taken to move from one key to another.\n\n# [phrase showing quantity relationship]\n    'absolute difference': This indicates the calculation of the time taken to move between keys, which is implemented as `abs(position1 - position2)` in code.\n\n# [degree adverb] \n    'minimal': This refers to the calculation of the exact time required to type the word, without any additional time for pressing keys or initial positioning.\n\n# [code logic]\n    The steps for mapping each letter to its position and calculating the typing time should be implemented simultaneously for efficiency. Specifically, creating the mapping and using it to calculate the typing time can be done in a single loop over the word.\n\n# [edge case] \n    Test case with a single letter word: 'a' = 0\n    Explanation: No movement is required, so the time is 0.\n\n    Test case with repeated letters: 'aaaa' = 0\n    Explanation: No movement is required between the same letters, so the time is 0.\n\n    Test case with maximum length word: 'abcdefghijklmnopqrstuvwxyz' = 25\n    Explanation: The word is typed sequentially from the first to the last position, taking 25 units of time.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute difference between consecutive positions will naturally handle these cases.\n\nNO", "Round_0": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a mapping of each letter to its position in the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_typing_time():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        keyboard = data[index]\n        word = data[index + 1]\n        index += 2\n        \n        # Create a mapping of each letter to its position in the keyboard layout\n        position_map = {char: pos for pos, char in enumerate(keyboard)}\n        \n        # Calculate the total typing time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        results.append(total_time)\n    \n    for result in results:\n        print(result)\n\ncalculate_typing_time()\n"}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 677, "prompt": "You are given a keyboard consisting of 26 keys, which are arranged sequentially in one row in a specific order where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard, and it also consists only of lowercase Latin letters. To type a word, you must position your hand over each key, press it, and moving the hand takes time equal to the absolute difference between the positions of the keys (the keys are numbered from left to right). No time is spent on pressing the keys. No time is spent on placing your hand over the first letter of the word. For instance, imagine a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively, therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". Calculate the time required to type out the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 350}
