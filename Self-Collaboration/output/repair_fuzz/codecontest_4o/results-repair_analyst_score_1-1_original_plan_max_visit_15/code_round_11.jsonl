{"name": "1580_C. Train Maintenance", "description": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "tags": ["brute force", "data structures", "implementation"], "difficulty": 9, "id": 1580, "sample_io": [{"input": "3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "test_list": [{"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "3 4\n10 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "3 4\n23 15\n14 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n2 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n5\n4\n3\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n2\n3\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 2\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n"]}, {"input": "20 7\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n4 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n3 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n"]}, {"input": "3 2\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n2 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n3\n4\n4\n4\n4\n5\n5\n4\n3\n4\n6\n8\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 2\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 6\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n6\n5\n6\n7\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n1 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n14 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n4\n3\n4\n7\n8\n"]}, {"input": "3 4\n16 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n10 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n10 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 1\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n13 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n467159628 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 0\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n13 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n369260158 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 16\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n23 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n2 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000101 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 7\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n16 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n5 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10001011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1166046831 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n26 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1425917046 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 11\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 1\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 8\n12 25\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1011185365 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n12 15\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 1\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n9 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 18\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n22 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 0\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 173113793\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n3 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 21\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n9 6\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 38795044\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n4 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10010011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 4\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n4 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 29\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 13\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n3 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n10 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n5 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "3 4\n16 21\n10 17\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n4 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n3 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 0\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n0 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 2\n1 1\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 4\n1 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n2 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n0 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "5 2\n1 2\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 13\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n529113291 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 7\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n292159474 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n16 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 0\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 -1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n0 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "task_id": "codecontest/22", "repair_prompt": ["Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance. Make sure to account for all transitions between working and maintenance periods accurately in your calculations.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance. Make sure to account for all transitions between working and maintenance periods accurately in your calculations.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering and has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment; in the beginning, there are no trains, and at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance. Make sure to account for all transitions between working and maintenance periods accurately in your calculations.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_specs = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_specs.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize state tracking\n    train_states = [None] * n  # None means no train, otherwise (start_day, cycle_position)\n    maintenance_counts = []\n    current_day = 0\n    \n    for op, k in operations:\n        if op == 1:  # Add train\n            x_i, y_i = train_specs[k]\n            train_states[k] = (current_day, 0)  # Start at day `current_day`, cycle position 0 (working)\n        elif op == 2:  # Remove train\n            train_states[k] = None\n        \n        # Calculate maintenance count for the current day\n        maintenance_count = 0\n        for i in range(n):\n            if train_states[i] is not None:\n                start_day, cycle_position = train_states[i]\n                x_i, y_i = train_specs[i]\n                total_cycle = x_i + y_i\n                days_since_start = current_day - start_day\n                \n                # Determine current cycle position\n                current_cycle_position = days_since_start % total_cycle\n                \n                # Check if in maintenance\n                if x_i <= current_cycle_position < total_cycle:\n                    maintenance_count += 1\n        \n        maintenance_counts.append(maintenance_count)\n        current_day += 1\n    \n    for count in maintenance_counts:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State tracking\n    train_states = [None] * n  # None means no train, otherwise (start_day, cycle_position)\n    maintenance_count = 0\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = train_cycles[k]\n            train_states[k] = (day, 0)  # Start at day `day` with cycle position 0 (working)\n        \n        elif op == 2:  # Remove train\n            start_day, cycle_position = train_states[k]\n            x_i, y_i = train_cycles[k]\n            # Calculate the current cycle position\n            total_cycle = x_i + y_i\n            days_since_start = day - start_day\n            current_position = days_since_start % total_cycle\n            \n            # If it was in maintenance, decrement the maintenance count\n            if current_position >= x_i:\n                maintenance_count -= 1\n            \n            train_states[k] = None  # Remove the train\n        \n        # Update maintenance count\n        for i in range(n):\n            if train_states[i] is not None:\n                start_day, cycle_position = train_states[i]\n                x_i, y_i = train_cycles[i]\n                total_cycle = x_i + y_i\n                days_since_start = day - start_day\n                current_position = days_since_start % total_cycle\n                \n                if current_position == 0 and cycle_position >= x_i:\n                    maintenance_count -= 1\n                if current_position == x_i:\n                    maintenance_count += 1\n                \n                train_states[i] = (start_day, current_position)\n        \n        results.append(maintenance_count\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index])\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize train states\n    train_states = {i: None for i in range(1, n+1)}  # None means not added\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k-1]\n        \n        if op == 1:  # Add train of model k\n            train_states[k] = 0  # Start at day 0 of its cycle\n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Update maintenance count\n        current_maintenance = 0\n        for model, state in train_states.items():\n            if state is not None:\n                # Calculate the current cycle position\n                cycle_length = train_cycles[model-1][0] + train_cycles[model-1][1]\n                cycle_position = state % cycle_length\n                if cycle_position >= train_cycles[model-1][0]:\n                    current_maintenance += 1\n                # Update the state for the next day\n                train_states[model] += 1\n        \n        maintenance_count[day] = current_maintenance\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    # Read the working and maintenance periods for each train model\n    train_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_periods.append((x_i, y_i))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Prepare to store the results\n    results = []\n    \n    # Process each day's operation\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        \n        if op == 1:  # Add a train of model k\n            x_i, y_i = train_periods[k]\n            train_status[k] = (x_i, y_i, 0)  # (work_days, maintenance_days, current_day)\n        \n        elif op == 2:  # Remove a train of model k\n            train_status[k] = None\n        \n        # Count trains in maintenance\n        maintenance_count = 0\n        for status in train_status:\n            if status is not None:\n                x_i, y_i, current_day = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i:\n                    maintenance_count += 1\n        \n        results.append(maintenance_count)\n        \n        # Update the current day for each train\n        for i in range(n):\n            if train_status[i] is not None:\n                x_i, y_i, current_day = train_status[i]\n                current_day = (current_day + 1) % (x_i + y_i)\n                train_status[i] = (x_i, y_i, current_day)\n    \n    # Print the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    x = [0] * (n + 1)\n    y = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        x[i] = int(data[index])\n        index += 1\n        y[i] = int(data[index])\n        index += 1\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index])\n        index += 1\n        operations.append((op, k))\n    \n    # State tracking\n    train_states = [None] * (n + 1)  # None means no train, otherwise it stores the day it was added\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            train_states[k] = day\n        elif op == 2:  # Remove train\n            train_states[k] = None\n        \n        # Calculate current maintenance count\n        current_maintenance = 0\n        for i in range(1, n + 1):\n            if train_states[i] is not None:\n                added_day = train_states[i]\n                total_days = day - added_day + 1\n                cycle_length = x[i] + y[i]\n                full_cycles = total_days // cycle_length\n                remaining_days = total_days % cycle_length\n                \n                # Calculate maintenance days\n                if remaining_days > x[i]:\n                    current_maintenance += 1\n        \n        results.append(current_maintenance)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model: None if not present, otherwise (days_left, in_maintenance)\n    train_state = [None] * n\n    maintenance_count = 0\n    \n    result = []\n    \n    for op, k in operations:\n        if op == 1:  # Add train\n            x_i, y_i = train_cycles[k]\n            train_state[k] = (x_i, False)  # Starts working\n        elif op == 2:  # Remove train\n            if train_state[k] is not None and train_state[k][1]:  # If it was in maintenance\n                maintenance_count -= 1\n            train_state[k] = None\n        \n        # Update train states\n        for i in range(n):\n            if train_state[i] is not None:\n                days_left, in_maintenance = train_state[i]\n                days_left -= 1\n                if days_left == 0:\n                    if in_maintenance:\n                        train_state[i] = (train_cycles[i][0], False)  # Switch to working\n                        maintenance_count -= 1\n                    else:\n                        train_state[i] = (train_cycles[i][1], True)  # Switch to maintenance\n                        maintenance_count += 1\n                else:\n                    train_state[i] = (days_left, in_maintenance)\n        \n        result.append(maintenance_count)\n    \n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    # Read x_i and y_i for each train model\n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    # Initialize state tracking\n    train_states = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    results = []\n    \n    # Process each day's operation\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_states[k] = (x_i, y_i, 0)  # (work_days, maintenance_days, current_day)\n        elif op == 2:  # Remove train of model k\n            if train_states[k] is not None:\n                work_days, maintenance_days, current_day = train_states[k]\n                if current_day >= work_days:\n                    maintenance_count -= 1\n                train_states[k] = None\n        \n        # Update train states and count maintenance\n        current_maintenance_count = 0\n        for i in range(n):\n            if train_states[i] is not None:\n                work_days, maintenance_days, current_day = train_states[i]\n                if current_day < work_days:\n                    train_states[i] = (work_days, maintenance_days, current_day + 1)\n                elif current_day < work_days + maintenance_days:\n                    current_maintenance_count += 1\n                    train_states[i] = (work_days, maintenance_days, current_day + 1)\n                else:\n                    train_states[i] = (work_days, maintenance_days, 1)\n        \n        results.append(current_maintenance_count)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    train_status = {}\n    train_cycle_day = {}\n    maintenance_count = 0\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = train_cycles[k]\n            train_status[k] = 'working'\n            train_cycle_day[k] = 0\n        \n        elif op == 2:  # Remove train\n            if train_status[k] == 'maintenance':\n                maintenance_count -= 1\n            del train_status[k]\n            del train_cycle_day[k]\n        \n        # Update train statuses\n        for model in list(train_status.keys()):\n            x_i, y_i = train_cycles[model]\n            train_cycle_day[model] += 1\n            \n            if train_status[model] == 'working' and train_cycle_day[model] == x_i:\n                train_status[model] = 'maintenance'\n                train_cycle_day[model] = 0\n                maintenance_count += 1\n            \n            elif train_status[model] == 'maintenance' and train_cycle_day[model] == y_i:\n                train_status[model] = 'working'\n                train_cycle_day[model] = 0\n                maintenance_count -= 1\n        \n        result.append(maintenance_count)\n    \n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_models = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_models.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_models[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate the number of trains in maintenance\n        maintenance_count = 0\n        for i in range(n):\n            status = train_status[i]\n            if status is not None:\n                current_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i:  # In maintenance period\n                    maintenance_count += 1\n                # Update the current day in cycle\n                train_status[i] = ((current_day + 1) % cycle_length, x_i, y_i)\n        \n        result.append(maintenance_count)\n    \n    # Print the result for each day\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of each train model: None if not present, otherwise the day it was added\n    train_state = [None] * n\n    # Maintenance count for each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            train_state[k] = day\n        elif op == 2:  # Remove train of model k\n            train_state[k] = None\n        \n        # Calculate maintenance trains for the current day\n        maintenance_trains = 0\n        for model in range(n):\n            if train_state[model] is not None:\n                added_day = train_state[model]\n                x_i, y_i = train_cycles[model]\n                # Calculate the number of days since the train was added\n                days_since_added = day - added_day\n                # Calculate the current cycle position\n                cycle_length = x_i + y_i\n                cycle_position = days_since_added % cycle_length\n                # Check if the train is in maintenance\n                if cycle_position >= x_i:\n                    maintenance_trains += 1\n        \n        maintenance_count[day] = maintenance_trains\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_specs = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_specs.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize state tracking\n    train_states = [None] * n  # None means no train, otherwise (start_day, cycle_position)\n    maintenance_counts = []\n    current_day = 0\n    \n    for op, k in operations:\n        if op == 1:  # Add train\n            x_i, y_i = train_specs[k]\n            train_states[k] = (current_day, 0)  # Start at day `current_day`, cycle position 0 (working)\n        elif op == 2:  # Remove train\n            train_states[k] = None\n        \n        # Calculate maintenance count for the current day\n        maintenance_count = 0\n        for i in range(n):\n            if train_states[i] is not None:\n                start_day, cycle_position = train_states[i]\n                x_i, y_i = train_specs[i]\n                total_cycle = x_i + y_i\n                days_since_start = current_day - start_day\n                \n                # Determine current cycle position\n                current_cycle_position = days_since_start % total_cycle\n                \n                # Check if in maintenance\n                if x_i <= current_cycle_position < total_cycle:\n                    maintenance_count += 1\n        \n        maintenance_counts.append(maintenance_count)\n        current_day += 1\n    \n    for count in maintenance_counts:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train model specifications (x_i, y_i) and operations (op, k).\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the x_i and y_i values for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Track the state of each train model over the days, including whether it is working or in maintenance.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (working or maintenance).\",\n        \"For each operation, update the state of the train model based on whether it is added or removed.\",\n        \"Calculate the transition between working and maintenance periods for each train model.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the train models to count how many are in maintenance.\",\n        \"Ensure that trains removed on a given day are not counted as in maintenance.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, output the calculated number of trains in maintenance.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train states.\",\n    \"Iterate over each day's operations to update train states and calculate maintenance counts.\",\n    \"Output the maintenance count for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the context of the requirement, maintenance refers to the period during which a train is not operational and is undergoing upkeep. The task is to calculate how many trains are in this state each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any given time.\n    'works for x_i days': This indicates the train operates for a specified number of days.\n    'in maintenance for y_i days': This indicates the train is in maintenance for a specified number of days.\n    Implementation: Use a cycle counter to track the days a train is working and in maintenance, and update the state accordingly.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the state of train models and calculating the number of trains in maintenance should be considered simultaneously. Specifically, when updating the state of a train model, the transition between working and maintenance periods should be calculated in the same code block to ensure accurate tracking.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: On the first day, a train is added and it starts working, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: On the first day, a train is added and starts working. On the second day, it is removed, so no train is in maintenance.\n\n    Input: 1 3\n           1 1\n           1 1\n           1 1\n           1 1\n    Output: 0\n            1\n            0\n    Explanation: On the first day, a train is added and starts working. On the second day, it transitions to maintenance. On the third day, it transitions back to working.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    # Initialize a dictionary to track the state of each train model\n    train_states = {}\n    maintenance_counts = []\n\n    for day in range(m):\n        op, k = operations[day]\n        if op", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_specs = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_specs.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize state tracking\n    train_states = [None] * n  # None means no train, otherwise (start_day, cycle_position)\n    maintenance_counts = []\n    current_day = 0\n    \n    for op, k in operations:\n        if op == 1:  # Add train\n            x_i, y_i = train_specs[k]\n            train_states[k] = (current_day, 0)  # Start at day `current_day`, cycle position 0 (working)\n        elif op == 2:  # Remove train\n            train_states[k] = None\n        \n        # Calculate maintenance count for the current day\n        maintenance_count = 0\n        for i in range(n):\n            if train_states[i] is not None:\n                start_day, cycle_position = train_states[i]\n                x_i, y_i = train_specs[i]\n                total_cycle = x_i + y_i\n                days_since_start = current_day - start_day\n                \n                # Determine current cycle position\n                current_cycle_position = days_since_start % total_cycle\n                \n                # Check if in maintenance\n                if x_i <= current_cycle_position < total_cycle:\n                    maintenance_count += 1\n        \n        maintenance_counts.append(maintenance_count)\n        current_day += 1\n    \n    for count in maintenance_counts:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models, number of days, train model details, and daily operations.\",\n      \"steps\": [\n        \"Read the first line to get integers n (number of train models) and m (number of days).\",\n        \"Read the next n lines to get pairs of integers x_i and y_i for each train model, representing working and maintenance days.\",\n        \"Read the next m lines to get pairs of integers op and k, representing daily operations (add or remove train of model k).\"\n      ]\n    },\n    {\n      \"description\": \"Track the state of each train model over the days.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state (working or maintenance) and cycle position for each train model.\",\n        \"Update the state of train models based on daily operations (add or remove).\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over all train models to check their current state.\",\n        \"Count the number of trains in maintenance and store the result for that day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each day.\",\n      \"steps\": [\n        \"Print the number of trains in maintenance for each of the m days.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary information about train models and daily operations.\",\n    \"Initialize a data structure to track the state and cycle position of each train model.\",\n    \"Iterate over each day, updating the state of train models based on operations and calculating the number of trains in maintenance.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own working and maintenance cycle.\n\n    'working and maintenance cycle'\n    Explanation: Each train model has a specific number of days it works (x_i) and a specific number of days it is in maintenance (y_i).\n\n    'daily operations'\n    Explanation: Refers to the actions of adding or removing a train of a specific model on a given day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any time, but not more than one.\n\n    'x_i days (day t inclusive)'\n    Explanation: The train works for x_i days starting from the day it is added.\n\n    'y_i days'\n    Explanation: The train is in maintenance for y_i days after its working period.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the subproblem \"Track the state of each train model over the days\" should be implemented simultaneously. Specifically, updating the state of train models based on daily operations should be done in conjunction with checking their current state to determine if they are in maintenance.\n\n# [edge case]\n    1. Input: 1 1\n       1 1\n       1 1\n       Output: 0\n       Explanation: On the first day, a train is added and it is working, so no train is in maintenance.\n\n    2. Input: 1 2\n       1 1\n       1 1\n       2 1\n       Output: 0\n       0\n       Explanation: On the first day, a train is added and it is working. On the second day, the train is removed, so no train is in maintenance on either day.\n\n    3. Input: 2 3\n       1 1\n       1 1\n       1 1\n       1 2\n       2 1\n       Output: 0\n       0\n       0\n       Explanation: On the first day, a train of model 1 is added and it is working. On the second day, a train of model 2 is added and it is working. On the third day, the train of model 1 is removed, so no train is in maintenance on any", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State tracking\n    train_states = [None] * n  # None means no train, otherwise (start_day, cycle_position)\n    maintenance_count = 0\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = train_cycles[k]\n            train_states[k] = (day, 0)  # Start at day `day` with cycle position 0 (working)\n        \n        elif op == 2:  # Remove train\n            start_day, cycle_position = train_states[k]\n            x_i, y_i = train_cycles[k]\n            # Calculate the current cycle position\n            total_cycle = x_i + y_i\n            days_since_start = day - start_day\n            current_position = days_since_start % total_cycle\n            \n            # If it was in maintenance, decrement the maintenance count\n            if current_position >= x_i:\n                maintenance_count -= 1\n            \n            train_states[k] = None  # Remove the train\n        \n        # Update maintenance count\n        for i in range(n):\n            if train_states[i] is not None:\n                start_day, cycle_position = train_states[i]\n                x_i, y_i = train_cycles[i]\n                total_cycle = x_i + y_i\n                days_since_start = day - start_day\n                current_position = days_since_start % total_cycle\n                \n                if current_position == 0 and cycle_position >= x_i:\n                    maintenance_count -= 1\n                if current_position == x_i:\n                    maintenance_count += 1\n                \n                train_states[i] = (start_day, current_position)\n        \n        results.append(maintenance_count", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 68)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State tracking\n    train_states = [None] * n  # None means no train, otherwise (start_day, cycle_position)\n    maintenance_count = 0\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = train_cycles[k]\n            train_states[k] = (day, 0)  # Start at day `day` with cycle position 0 (working)\n        \n        elif op == 2:  # Remove train\n            start_day, cycle_position = train_states[k]\n            x_i, y_i = train_cycles[k]\n            # Calculate the current cycle position\n            total_cycle = x_i + y_i\n            days_since_start = day - start_day\n            current_position = days_since_start % total_cycle\n            \n            # If it was in maintenance, decrement the maintenance count\n            if current_position >= x_i:\n                maintenance_count -= 1\n            \n            train_states[k] = None  # Remove the train\n        \n        # Update maintenance count\n        for i in range(n):\n            if train_states[i] is not None:\n                start_day, cycle_position = train_states[i]\n                x_i, y_i = train_cycles[i]\n                total_cycle = x_i + y_i\n                days_since_start = day - start_day\n                current_position = days_since_start % total_cycle\n                \n                if current_position == 0 and cycle_position >= x_i:\n                    maintenance_count -= 1\n                if current_position == x_i:\n                    maintenance_count += 1\n                \n                train_states[i] = (start_day, current_position)\n        \n        results.append(maintenance_count"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train model specifications (x_i, y_i) and operations (op, k).\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the x_i and y_i values for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over m days, tracking their maintenance status.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (whether it is added and its current cycle position).\",\n        \"For each day, perform the operation specified (add or remove a train of model k).\",\n        \"Update the cycle position of each train model that is currently added, based on its x_i and y_i values.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the current state of all train models.\",\n        \"Count the number of trains that are in the maintenance phase of their cycle.\",\n        \"Store the count for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"Print the stored count for each day, one per line.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train states and cycles.\",\n    \"Iterate over each day, updating train states and cycles based on operations.\",\n    \"Calculate and store the number of trains in maintenance for each day.\",\n    \"Output the results for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': Refers to different types of trains, each with its own working and maintenance cycle.\n    'maintenance': A period during which a train is not operational and is being serviced.\n    'cycle': The repeating pattern of working and maintenance days for each train model.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    'x_i days': The number of days a train works before going into maintenance.\n    'y_i days': The number of days a train is in maintenance before returning to work.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the subproblem \"Simulate the addition and removal of trains over m days, tracking their maintenance status\" should be implemented simultaneously. Specifically, updating the cycle position and performing the operation (add or remove) should be done in the same loop to ensure accurate tracking of each train's state.\n\n# [edge case]\n    1. Input: 1 1\n       1 1\n       1 1\n       Output: 0\n       Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n       \n    2. Input: 1 2\n       1 1\n       1 1\n       2 1\n       Output: 0\n       0\n       Explanation: A train is added and then removed the next day, never entering maintenance.\n       \n    3. Input: 2 3\n       1 1\n       1 1\n       1 1\n       1 2\n       2 1\n       Output: 0\n       0\n       0\n       Explanation: Two trains are added but neither enters maintenance before the first is removed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed without entering maintenance. This can be managed by ensuring that the cycle position is correctly initialized and updated, and by checking the state of each train before counting it as in maintenance.\n\n    Example code snippet:\n    ```python\n    # Initialize train states\n    train_states = {i: None for i in range(1, n+1)}  # None means not added\n\n    # For each day\n    for day in range(m):\n       ", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index])\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize train states\n    train_states = {i: None for i in range(1, n+1)}  # None means not added\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k-1]\n        \n        if op == 1:  # Add train of model k\n            train_states[k] = 0  # Start at day 0 of its cycle\n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Update maintenance count\n        current_maintenance = 0\n        for model, state in train_states.items():\n            if state is not None:\n                # Calculate the current cycle position\n                cycle_length = train_cycles[model-1][0] + train_cycles[model-1][1]\n                cycle_position = state % cycle_length\n                if cycle_position >= train_cycles[model-1][0]:\n                    current_maintenance += 1\n                # Update the state for the next day\n                train_states[model] += 1\n        \n        maintenance_count[day] = current_maintenance\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 102)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index])\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize train states\n    train_states = {i: None for i in range(1, n+1)}  # None means not added\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k-1]\n        \n        if op == 1:  # Add train of model k\n            train_states[k] = 0  # Start at day 0 of its cycle\n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Update maintenance count\n        current_maintenance = 0\n        for model, state in train_states.items():\n            if state is not None:\n                # Calculate the current cycle position\n                cycle_length = train_cycles[model-1][0] + train_cycles[model-1][1]\n                cycle_position = state % cycle_length\n                if cycle_position >= train_cycles[model-1][0]:\n                    current_maintenance += 1\n                # Update the state for the next day\n                train_states[model] += 1\n        \n        maintenance_count[day] = current_maintenance\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models, number of days, and the operation details for each day.\",\n      \"steps\": [\n        \"Read the first line to get integers n (number of train models) and m (number of days).\",\n        \"Read the next n lines to get the working and maintenance periods (x_i, y_i) for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day, where op indicates adding or removing a train of model k.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the daily operations to track the status of each train model.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current status (working or maintenance) and the remaining days in the current status for each train model.\",\n        \"For each day, update the status of each train model based on the operation (add or remove) and the current status (working or maintenance).\",\n        \"Ensure that transitions between working and maintenance periods are accurately handled.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate through the train models to count how many are in maintenance.\",\n        \"Output the count for each day.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data for train models and daily operations.\",\n    \"Initialize data structures to track the status of each train model.\",\n    \"Simulate the operations for each day, updating the status of train models accordingly.\",\n    \"Calculate and output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the context of the requirement, maintenance refers to the period during which a train is not operational and is undergoing maintenance. The task is to calculate how many trains are in this state each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any given time.\n    'works for x_i days': This indicates the duration a train is operational before going into maintenance.\n    'maintenance for y_i days': This indicates the duration a train is in maintenance before becoming operational again.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for simulating daily operations and calculating the number of trains in maintenance should be considered simultaneously. Specifically, updating the status of each train model and counting the number of trains in maintenance should be done in the same loop for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: On the first day, a train is added and it is in working state, so no train is in maintenance.\n\n    Input: 1 2\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: On the first day, a train is added and it is in working state. On the second day, the train is removed, so no train is in maintenance.\n\n    Input: 2 3\n           1 1\n           1 1\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: On the first day, both trains are added and are in working state. On the second day, both trains are still in working state. On the third day, one train is removed, and the other is still in working state.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating daily operations and counting maintenance trains will naturally handle these cases.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    # Read the working and maintenance periods for each train model\n    train_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_periods.append((x_i, y_i))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Prepare to store the results\n    results = []\n    \n    # Process each day's operation\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        \n        if op == 1:  # Add a train of model k\n            x_i, y_i = train_periods[k]\n            train_status[k] = (x_i, y_i, 0)  # (work_days, maintenance_days, current_day)\n        \n        elif op == 2:  # Remove a train of model k\n            train_status[k] = None\n        \n        # Count trains in maintenance\n        maintenance_count = 0\n        for status in train_status:\n            if status is not None:\n                x_i, y_i, current_day = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i:\n                    maintenance_count += 1\n        \n        results.append(maintenance_count)\n        \n        # Update the current day for each train\n        for i in range(n):\n            if train_status[i] is not None:\n                x_i, y_i, current_day = train_status[i]\n                current_day = (current_day + 1) % (x_i + y_i)\n                train_status[i] = (x_i, y_i, current_day)\n    \n    # Print the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train model specifications (x_i, y_i) and operations (op, k).\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the x_i and y_i values for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Track the state of each train model over the days, including whether it is working or in maintenance.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (working or maintenance).\",\n        \"For each operation, update the state of the train model based on whether it is added or removed.\",\n        \"Calculate the transition between working and maintenance periods for each train model.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the train models to count how many are in maintenance.\",\n        \"Consider the transition rules: a train is not in maintenance on the day it is removed.\",\n        \"Output the count of trains in maintenance for each day.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train states.\",\n    \"Iterate over each day's operations to update train states.\",\n    \"Calculate and output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the context of the requirement, maintenance refers to the period during which a train is not operational and is undergoing upkeep. The task is to calculate how many trains are in this state each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any given time.\n    'works for x_i days': This indicates the duration a train is operational before going into maintenance.\n    'in maintenance for y_i days': This indicates the duration a train is in maintenance before becoming operational again.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the state of train models and calculating transitions between working and maintenance periods should be considered simultaneously. Specifically:\n    - \"Update the state of the train model based on whether it is added or removed.\"\n    - \"Calculate the transition between working and maintenance periods for each train model.\"\n    These can be implemented in a single loop that processes each day's operations and updates the state accordingly.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and then removed the next day, so no train is in maintenance.\n\n    Input: 3 3\n           1 1\n           1 1\n           1 1\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but none are in maintenance during the given days.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed on the same day or where the maintenance period does not start within the given days.\n    Example code:\n    ```python\n    def handle_edge_cases(train_states, operations, x_values, y_values):\n        for day, (op, k) in enumerate(operations):\n            if op == 1:  # Train added\n                train_states", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    x = [0] * (n + 1)\n    y = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        x[i] = int(data[index])\n        index += 1\n        y[i] = int(data[index])\n        index += 1\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index])\n        index += 1\n        operations.append((op, k))\n    \n    # State tracking\n    train_states = [None] * (n + 1)  # None means no train, otherwise it stores the day it was added\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            train_states[k] = day\n        elif op == 2:  # Remove train\n            train_states[k] = None\n        \n        # Calculate current maintenance count\n        current_maintenance = 0\n        for i in range(1, n + 1):\n            if train_states[i] is not None:\n                added_day = train_states[i]\n                total_days = day - added_day + 1\n                cycle_length = x[i] + y[i]\n                full_cycles = total_days // cycle_length\n                remaining_days = total_days % cycle_length\n                \n                # Calculate maintenance days\n                if remaining_days > x[i]:\n                    current_maintenance += 1\n        \n        results.append(current_maintenance)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 105)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    x = [0] * (n + 1)\n    y = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        x[i] = int(data[index])\n        index += 1\n        y[i] = int(data[index])\n        index += 1\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index])\n        index += 1\n        operations.append((op, k))\n    \n    # State tracking\n    train_states = [None] * (n + 1)  # None means no train, otherwise it stores the day it was added\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            train_states[k] = day\n        elif op == 2:  # Remove train\n            train_states[k] = None\n        \n        # Calculate current maintenance count\n        current_maintenance = 0\n        for i in range(1, n + 1):\n            if train_states[i] is not None:\n                added_day = train_states[i]\n                total_days = day - added_day + 1\n                cycle_length = x[i] + y[i]\n                full_cycles = total_days // cycle_length\n                remaining_days = total_days % cycle_length\n                \n                # Calculate maintenance days\n                if remaining_days > x[i]:\n                    current_maintenance += 1\n        \n        results.append(current_maintenance)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models' working and maintenance periods and daily operations.\"\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over the m days, keeping track of the working and maintenance cycles for each train model.\",\n      \"output\": \"A data structure that maintains the state of each train model (whether it is working or in maintenance) for each day.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of all train models.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Parse Input\",\n      \"details\": \"Read the input data to extract n, m, the working and maintenance periods for each train model, and the list of operations for each day.\"\n    },\n    {\n      \"step\": \"Initialize Data Structures\",\n      \"details\": \"Create data structures to track the state of each train model, including its current cycle (working or maintenance) and the remaining days in that cycle.\"\n    },\n    {\n      \"step\": \"Process Daily Operations\",\n      \"details\": \"Iterate over each day's operations. For each operation, update the state of the relevant train model (add or remove) and adjust the cycle counters accordingly.\"\n    },\n    {\n      \"step\": \"Update Maintenance Count\",\n      \"details\": \"After processing each day's operations, calculate the number of trains in maintenance by checking the state of each train model.\"\n    },\n    {\n      \"step\": \"Output Results\",\n      \"details\": \"Print the number of trains in maintenance for each day as specified in the output format.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': Refers to different types of trains, each with unique working and maintenance cycles.\n    'working and maintenance cycles': Describes the alternating periods during which a train is operational and under maintenance.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    'x_i days', 'y_i days': Specifies the duration of working and maintenance periods for each train model.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps \"Process Daily Operations\" and \"Update Maintenance Count\" should be considered simultaneously. As each day's operations are processed, the maintenance count should be updated immediately to reflect the current state of all train models.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: On the first day, a train is added but it starts working, not maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           1 2\n    Output: 0\n            0\n    Explanation: Both trains are added but start working, not maintenance.\n\n    Input: 1 3\n           1 1\n           1 1\n           2 1\n           1 1\n    Output: 0\n            0\n            0\n    Explanation: Train is added, removed, and added again, but always starts working.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating the state of each train model and calculating the maintenance count should naturally handle these scenarios.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model: None if not present, otherwise (days_left, in_maintenance)\n    train_state = [None] * n\n    maintenance_count = 0\n    \n    result = []\n    \n    for op, k in operations:\n        if op == 1:  # Add train\n            x_i, y_i = train_cycles[k]\n            train_state[k] = (x_i, False)  # Starts working\n        elif op == 2:  # Remove train\n            if train_state[k] is not None and train_state[k][1]:  # If it was in maintenance\n                maintenance_count -= 1\n            train_state[k] = None\n        \n        # Update train states\n        for i in range(n):\n            if train_state[i] is not None:\n                days_left, in_maintenance = train_state[i]\n                days_left -= 1\n                if days_left == 0:\n                    if in_maintenance:\n                        train_state[i] = (train_cycles[i][0], False)  # Switch to working\n                        maintenance_count -= 1\n                    else:\n                        train_state[i] = (train_cycles[i][1], True)  # Switch to maintenance\n                        maintenance_count += 1\n                else:\n                    train_state[i] = (days_left, in_maintenance)\n        \n        result.append(maintenance_count)\n    \n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 108)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model: None if not present, otherwise (days_left, in_maintenance)\n    train_state = [None] * n\n    maintenance_count = 0\n    \n    result = []\n    \n    for op, k in operations:\n        if op == 1:  # Add train\n            x_i, y_i = train_cycles[k]\n            train_state[k] = (x_i, False)  # Starts working\n        elif op == 2:  # Remove train\n            if train_state[k] is not None and train_state[k][1]:  # If it was in maintenance\n                maintenance_count -= 1\n            train_state[k] = None\n        \n        # Update train states\n        for i in range(n):\n            if train_state[i] is not None:\n                days_left, in_maintenance = train_state[i]\n                days_left -= 1\n                if days_left == 0:\n                    if in_maintenance:\n                        train_state[i] = (train_cycles[i][0], False)  # Switch to working\n                        maintenance_count -= 1\n                    else:\n                        train_state[i] = (train_cycles[i][1], True)  # Switch to maintenance\n                        maintenance_count += 1\n                else:\n                    train_state[i] = (days_left, in_maintenance)\n        \n        result.append(maintenance_count)\n    \n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get x_i and y_i for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Track the state of each train model over the days, including whether it is currently working or in maintenance.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state (working or maintenance) and the remaining days in the current state for each train model.\",\n        \"Update the state of the train model based on the operation (add or remove) and the current day.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over all train models to check their current state.\",\n        \"Count the number of trains that are in maintenance and store the result for that day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"Print the stored results for each day, one per line.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train states.\",\n    \"Iterate over each day to update train states and calculate maintenance counts.\",\n    \"Output the maintenance counts for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': Refers to different types of trains, each with unique working and maintenance cycles.\n    'maintenance': Refers to the period when a train is not operational and is being serviced.\n    Explanation: The requirement involves tracking the operational status of different train models over a series of days, specifically focusing on when they are in maintenance.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    'x_i days', 'y_i days': Specifies the duration of working and maintenance periods for each train model.\n    Explanation: These phrases define the constraints and durations for train operations and maintenance cycles.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially, as each step builds upon the previous one. However, within the subproblem of tracking train states, updating the state and calculating maintenance counts can be done simultaneously for efficiency.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: With only one train model and one day, the train is added and starts working, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           1 2\n    Output: 0\n            0\n    Explanation: Both trains are added on consecutive days, but they start working immediately, so no train is in maintenance.\n\n    Input: 3 3\n           1 1\n           1 1\n           1 1\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Train 1 is added and removed before it enters maintenance, and train 2 is added but starts working immediately.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking train states and updating them based on operations will naturally handle these scenarios.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    # Read x_i and y_i for each train model\n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    # Initialize state tracking\n    train_states = [None] * n  # None means no train of this model is present\n    maintenance_count = 0\n    results = []\n    \n    # Process each day's operation\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_states[k] = (x_i, y_i, 0)  # (work_days, maintenance_days, current_day)\n        elif op == 2:  # Remove train of model k\n            if train_states[k] is not None:\n                work_days, maintenance_days, current_day = train_states[k]\n                if current_day >= work_days:\n                    maintenance_count -= 1\n                train_states[k] = None\n        \n        # Update train states and count maintenance\n        current_maintenance_count = 0\n        for i in range(n):\n            if train_states[i] is not None:\n                work_days, maintenance_days, current_day = train_states[i]\n                if current_day < work_days:\n                    train_states[i] = (work_days, maintenance_days, current_day + 1)\n                elif current_day < work_days + maintenance_days:\n                    current_maintenance_count += 1\n                    train_states[i] = (work_days, maintenance_days, current_day + 1)\n                else:\n                    train_states[i] = (work_days, maintenance_days, 1)\n        \n        results.append(current_maintenance_count)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models, number of days, train model cycles, and daily operations.\",\n      \"details\": [\n        \"Read the first line to get integers n (number of train models) and m (number of days).\",\n        \"Read the next n lines to get the cycle information for each train model, which includes x_i (working days) and y_i (maintenance days).\",\n        \"Read the next m lines to get the daily operations, which include op (operation type) and k (train model).\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the daily operations to track the status of each train model.\",\n      \"details\": [\n        \"Initialize a data structure to keep track of the current status of each train model (working or maintenance).\",\n        \"For each day, update the status of the train models based on the operation (add or remove) and their cycle information.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"details\": [\n        \"For each day, count the number of train models that are in maintenance.\",\n        \"Ensure that trains removed on a given day are not counted as in maintenance.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each day.\",\n      \"details\": [\n        \"Print the number of trains in maintenance for each of the m days.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary information.\",\n    \"Initialize data structures to track train statuses.\",\n    \"Iterate over each day and update train statuses based on operations.\",\n    \"Count and record the number of trains in maintenance for each day.\",\n    \"Output the recorded maintenance counts for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models', 'working days', 'maintenance days', 'operations'\n    Explanation: The requirement involves managing different train models, each with a cycle of working and maintenance days. Operations include adding or removing trains, which affects their status.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means there can be zero or one train of each model at any time.\n    'x_i days', 'y_i days': These specify the duration of working and maintenance periods for each train model.\n    Implementation: Use variables to track the cycle of each train model and update their status based on these durations.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but within the simulation of daily operations, updating the status and counting maintenance trains should be done simultaneously for each day.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n\n       Output: 0\n       Explanation: Only one train is added and it starts working, so no train is in maintenance.\n    2. Input: 1 2\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, never entering maintenance.\n    3. Input: 1 3\\n1 1\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\\n0\n       Explanation: A train is added, stays working, and is removed before entering maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where a train is added and removed before it can enter maintenance.\n    ```python\n    # Example code snippet to handle edge cases\n    if op == 1:  # Add train\n        # Initialize train status and cycle tracking\n        train_status[k] = 'working'\n        train_cycle[k] = 0\n    elif op == 2:  # Remove train\n        # Ensure train is not counted in maintenance\n        if train_status[k] == 'maintenance':\n            maintenance_count -= 1\n        del train_status[k]\n        del train_cycle[k]\n    ```\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    train_status = {}\n    train_cycle_day = {}\n    maintenance_count = 0\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = train_cycles[k]\n            train_status[k] = 'working'\n            train_cycle_day[k] = 0\n        \n        elif op == 2:  # Remove train\n            if train_status[k] == 'maintenance':\n                maintenance_count -= 1\n            del train_status[k]\n            del train_cycle_day[k]\n        \n        # Update train statuses\n        for model in list(train_status.keys()):\n            x_i, y_i = train_cycles[model]\n            train_cycle_day[model] += 1\n            \n            if train_status[model] == 'working' and train_cycle_day[model] == x_i:\n                train_status[model] = 'maintenance'\n                train_cycle_day[model] = 0\n                maintenance_count += 1\n            \n            elif train_status[model] == 'maintenance' and train_cycle_day[model] == y_i:\n                train_status[model] = 'working'\n                train_cycle_day[model] = 0\n                maintenance_count -= 1\n        \n        result.append(maintenance_count)\n    \n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 114)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    train_status = {}\n    train_cycle_day = {}\n    maintenance_count = 0\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = train_cycles[k]\n            train_status[k] = 'working'\n            train_cycle_day[k] = 0\n        \n        elif op == 2:  # Remove train\n            if train_status[k] == 'maintenance':\n                maintenance_count -= 1\n            del train_status[k]\n            del train_cycle_day[k]\n        \n        # Update train statuses\n        for model in list(train_status.keys()):\n            x_i, y_i = train_cycles[model]\n            train_cycle_day[model] += 1\n            \n            if train_status[model] == 'working' and train_cycle_day[model] == x_i:\n                train_status[model] = 'maintenance'\n                train_cycle_day[model] = 0\n                maintenance_count += 1\n            \n            elif train_status[model] == 'maintenance' and train_cycle_day[model] == y_i:\n                train_status[model] = 'working'\n                train_cycle_day[model] = 0\n                maintenance_count -= 1\n        \n        result.append(maintenance_count)\n    \n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models, number of days, train model details, and daily operations.\",\n      \"steps\": [\n        \"Read the first line to get integers n (number of train models) and m (number of days).\",\n        \"Read the next n lines to get pairs of integers x_i and y_i for each train model.\",\n        \"Read the next m lines to get pairs of integers op and k for daily operations.\"\n      ]\n    },\n    {\n      \"description\": \"Track the status of each train model over the days.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current status (working or maintenance) of each train model.\",\n        \"Update the status of train models based on daily operations (add or remove).\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the train models to check their current status.\",\n        \"Count the number of trains in maintenance and store the result for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each day.\",\n      \"steps\": [\n        \"Print the number of trains in maintenance for each of the m days.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input data to extract necessary information.\",\n    \"Initialize data structures to track train models and their statuses.\",\n    \"Iterate over each day to update train statuses based on operations.\",\n    \"Calculate and store the number of trains in maintenance for each day.\",\n    \"Output the results for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own working and maintenance schedule.\n\n    'maintenance'\n    Explanation: A period during which a train is not operational and is being serviced.\n\n    'working period'\n    Explanation: The time span during which a train is operational and not in maintenance.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: These represent the number of days a train is in working and maintenance periods, respectively. In code, this can be implemented using counters or timers to track the days.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to updating the status of train models and calculating the number of trains in maintenance should be implemented simultaneously. Specifically:\n    - \"Update the status of train models based on daily operations (add or remove).\"\n    - \"For each day, iterate over the train models to check their current status.\"\n    These can be combined in a loop that processes each day's operations and updates the status of trains accordingly.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n1 1\\n\n       Output: 0\n       Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    2. Input: 2 2\\n1 1\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, so no train is in maintenance.\n\n    3. Input: 1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n\n       Output: 0\\n1\n       Explanation: A train is added and on the second day, it enters maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that the transition between working and maintenance is accurately tracked, and that the removal of a train resets its status. This can be done by maintaining a cycle counter for each train model and updating it based on the operation type (add or remove).\n\nYES", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_models = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_models.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_models[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate the number of trains in maintenance\n        maintenance_count = 0\n        for i in range(n):\n            status = train_status[i]\n            if status is not None:\n                current_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i:  # In maintenance period\n                    maintenance_count += 1\n                # Update the current day in cycle\n                train_status[i] = ((current_day + 1) % cycle_length, x_i, y_i)\n        \n        result.append(maintenance_count)\n    \n    # Print the result for each day\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 112)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_models = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_models.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize the status of each train model\n    train_status = [None] * n  # None means no train of this model is present\n    \n    # Result list to store the number of trains in maintenance each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_models[k]\n            train_status[k] = (0, x_i, y_i)  # (current day in cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Calculate the number of trains in maintenance\n        maintenance_count = 0\n        for i in range(n):\n            status = train_status[i]\n            if status is not None:\n                current_day, x_i, y_i = status\n                cycle_length = x_i + y_i\n                if current_day >= x_i:  # In maintenance period\n                    maintenance_count += 1\n                # Update the current day in cycle\n                train_status[i] = ((current_day + 1) % cycle_length, x_i, y_i)\n        \n        result.append(maintenance_count)\n    \n    # Print the result for each day\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train model specifications (x_i, y_i) and operations (op, k).\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the list of tuples (x_i, y_i) for each train model.\",\n        \"Read the next m lines to get the list of operations (op, k).\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over m days, tracking the maintenance status of each train model.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (whether it is added and its current cycle position).\",\n        \"Iterate over each operation (op, k) for m days:\",\n        \"If op = 1, add the train model k and start its cycle.\",\n        \"If op = 2, remove the train model k and stop its cycle.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, check the cycle position of each added train model.\",\n        \"Determine if the train model is in maintenance based on its cycle position (x_i days working, y_i days maintenance).\",\n        \"Count the number of trains in maintenance and store the result for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"Print the stored results for each of the m days.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train models and their cycles.\",\n    \"Simulate the operations over m days, updating train states and cycles.\",\n    \"Calculate and store the number of trains in maintenance for each day.\",\n    \"Output the results for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own working and maintenance cycle.\n\n    'working and maintenance cycle'\n    Explanation: Each train model has a specific number of days it works (x_i) and a specific number of days it is in maintenance (y_i).\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any given time.\n\n    'x_i days', 'y_i days'\n    Explanation: These specify the duration of the working and maintenance periods for each train model.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to simulating the addition and removal of trains and calculating the number of trains in maintenance should be considered simultaneously. Specifically, the steps:\n    - \"If op = 1, add the train model k and start its cycle.\"\n    - \"If op = 2, remove the train model k and stop its cycle.\"\n    - \"Determine if the train model is in maintenance based on its cycle position (x_i days working, y_i days maintenance).\"\n    These steps should be implemented in a loop that processes each day's operations and updates the maintenance status accordingly.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n\n       Output: 0\n       Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    2. Input: 1 2\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, never entering maintenance.\n\n    3. Input: 2 3\\n1 1\\n1 1\\n1 1\\n1 2\\n2 1\\n\n       Output: 0\\n0\\n0\n       Explanation: Two trains are added on consecutive days, but both are removed before entering maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed without entering maintenance. This can be managed by ensuring that the cycle position is correctly updated and checked each day.\n    ```python\n    # Example code snippet to handle edge cases\n    for day in range(m):\n        # Process each operation\n        if", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of each train model: None if not present, otherwise the day it was added\n    train_state = [None] * n\n    # Maintenance count for each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            train_state[k] = day\n        elif op == 2:  # Remove train of model k\n            train_state[k] = None\n        \n        # Calculate maintenance trains for the current day\n        maintenance_trains = 0\n        for model in range(n):\n            if train_state[model] is not None:\n                added_day = train_state[model]\n                x_i, y_i = train_cycles[model]\n                # Calculate the number of days since the train was added\n                days_since_added = day - added_day\n                # Calculate the current cycle position\n                cycle_length = x_i + y_i\n                cycle_position = days_since_added % cycle_length\n                # Check if the train is in maintenance\n                if cycle_position >= x_i:\n                    maintenance_trains += 1\n        \n        maintenance_count[day] = maintenance_trains\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the list of train model specifications (x_i, y_i) and operations (op, k).\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the x_i and y_i values for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Track the state of each train model over the days, including whether it is working or in maintenance.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (working or maintenance).\",\n        \"For each operation, update the state of the train model based on whether it is added or removed.\",\n        \"Calculate the transition between working and maintenance periods for each train model.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the train models to count how many are in maintenance.\",\n        \"Ensure that trains removed on a given day are not counted as in maintenance.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, output the calculated number of trains in maintenance.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train states.\",\n    \"Iterate over each day's operations to update train states and calculate maintenance counts.\",\n    \"Output the maintenance count for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the context of the requirement, maintenance refers to the period during which a train is not operational and is undergoing upkeep. The task is to calculate how many trains are in this state each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any given time.\n    'works for x_i days': This indicates the train operates for a specified number of days.\n    'in maintenance for y_i days': This indicates the train is in maintenance for a specified number of days.\n    Implementation: Use a cycle counter to track the days a train is working and in maintenance, and update the state accordingly.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the state of train models and calculating the number of trains in maintenance should be considered simultaneously. Specifically, when updating the state of a train model, the transition between working and maintenance periods should be calculated in the same code block to ensure accurate tracking.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: On the first day, a train is added and it starts working, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: On the first day, a train is added and starts working. On the second day, it is removed, so no train is in maintenance.\n\n    Input: 1 3\n           1 1\n           1 1\n           1 1\n           1 1\n    Output: 0\n            1\n            0\n    Explanation: On the first day, a train is added and starts working. On the second day, it transitions to maintenance. On the third day, it transitions back to working.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Code for handling the edge case:\n    ```python\n    # Initialize a dictionary to track the state of each train model\n    train_states = {}\n    maintenance_counts = []\n\n    for day in range(m):\n        op, k = operations[day]\n        if op", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_specs = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_specs.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # Initialize state tracking\n    train_states = [None] * n  # None means no train, otherwise (start_day, cycle_position)\n    maintenance_counts = []\n    current_day = 0\n    \n    for op, k in operations:\n        if op == 1:  # Add train\n            x_i, y_i = train_specs[k]\n            train_states[k] = (current_day, 0)  # Start at day `current_day`, cycle position 0 (working)\n        elif op == 2:  # Remove train\n            train_states[k] = None\n        \n        # Calculate maintenance count for the current day\n        maintenance_count = 0\n        for i in range(n):\n            if train_states[i] is not None:\n                start_day, cycle_position = train_states[i]\n                x_i, y_i = train_specs[i]\n                total_cycle = x_i + y_i\n                days_since_start = current_day - start_day\n                \n                # Determine current cycle position\n                current_cycle_position = days_since_start % total_cycle\n                \n                # Check if in maintenance\n                if x_i <= current_cycle_position < total_cycle:\n                    maintenance_count += 1\n        \n        maintenance_counts.append(maintenance_count)\n        current_day += 1\n    \n    for count in maintenance_counts:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, true, true, true, true, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 11, "prompt": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance. Make sure to account for all transitions between working and maintenance periods accurately in your calculations.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "examples": "\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 11}
