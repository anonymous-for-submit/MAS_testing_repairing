{"name": "1579_C. Ticks", "description": "Casimir has a rectangular piece of paper with a checkered field of size n \u00d7 m. Initially, all cells of the field are white.\n\nLet us denote the cell with coordinates i vertically and j horizontally by (i, j). The upper left cell will be referred to as (1, 1) and the lower right cell as (n, m).\n\nCasimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: \n\n  1. First, the center cell (i, j) is painted black. \n  2. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black. \n  3. That is all the cells with coordinates (i - h, j \u00b1 h) for all h between 0 and d are painted. In particular, a tick consists of 2d + 1 black cells. \n\n\n\nAn already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3.\n\n<image>\n\nYou are given a description of a checkered field of size n \u00d7 m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks).\n\nDetermine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.", "tags": ["greedy", "implementation"], "difficulty": 9, "id": 1579, "sample_io": [{"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n"]}], "test_list": [{"input": "1\n1 1 1\n*\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n.*.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n1 1 1\n.\n", "output": ["YES\n"]}, {"input": "1\n3 9 1\n*.*...*.*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.*.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 5 1\n.....\n", "output": ["YES\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*..\n..*...\n", "output": ["NO\n"]}, {"input": "1\n3 6 1\n.*....\n..*.*.\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.+.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 5 2\n.....\n", "output": ["YES\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n...*.....\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..+.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n*..+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/.*.\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 2 2\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 3\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n1 1 0\n.\n", "output": ["YES\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n.*...\n.*.*.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n.*.+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n*..+-\n-.*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/.*.\n*.*.\n.*/.\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*/.+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n*.*.\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 2 2\n....*\n*..+-\n..+..\n.../.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....*.\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*./.\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 3 1\n..*/\n*.*.\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n./..*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-./..\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n../...\n.....*\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*./\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n...*.\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n.*.*\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 1 1\n..*/\n*.*.\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n./..*\n*..+-\n..+./\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 4\n-./..\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 2\n*-*...*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 3\n../...\n.....*\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n.*./\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/./*\n.*.*\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 1 2\n*\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*-*\n.*.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*.*...*.*\n.*../..*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n1 6 1\n.*....\n..*.*.\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n.*.+-\n..*./\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n*.+.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n/..*\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..+./\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/*..\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n....*\n*..+-\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n.*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n.*...*\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n+...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n4 4 1\n..*.\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n-+.*.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n./..*\n*..+-\n-.*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n/.*.\n*.*.\n.*/.\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n-+./*\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n.*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n**.......\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...*.\n.*.*.-\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n..*.\n./..\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 0\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*./.\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n3 4 1\n...*\n*.*-\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n...*.\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n*.*/\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 3 1\n..*/\n*.*.\n.+..\n..1.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-./..\n.....\n*.*.*\n*..*/\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n.-**..*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*/\n.*./\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n..//\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.,-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 3 1\n/..*\n.*.*\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 2 3\n/...*\n*..+-\n..+./\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 3\n-./..\n.....\n*.*.*\n*..*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 3\n*-*...*.*\n.*.....).\n....*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 3\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n/.*.\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n../..\n.....\n*.*-*\n.*.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n/*.+-\n..*./\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n/..*\n*.+.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n/..*\n.*.*\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/*..\n*.*.\n.*..\n.0..\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.../.\n.....\n*.*.*\n.*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n.*...*\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n/..*\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n./..*\n*..+-\n-.*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n/.*.\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n-+./*\n./+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n-*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n..-...\n.....*\n*...*.\n.*.*.-\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*/*-\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n/..*\n*.*/\n*.-.\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 1 1\n..*/\n*.*.\n.+..\n..1.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-./..\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 4 2\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*/\n.*./\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n..*.\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.,-\n./*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 1\n../...\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n/*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n//.*\n*.+.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n0..*\n.*.*\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n-.....\n.....*\n.*...*\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n./-.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n*../\n*.*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n../..\n*.*.*\n-*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.).\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*/*-\n.)..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 1 1\n..*/\n*.*.\n.+-.\n..1.\n", "output": ["NO\n"]}, {"input": "1\n5 5 3\n-./..\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n5 4 2\n.../..\n*.....\n*...*.\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*/\n..*/\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.+-\n./*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 1\n../...\n*.....\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.*.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n0..*\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 6 3\n-.....\n.....*\n.*...*\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n.*..\n.-/.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n.*./\n.//.\n", "output": ["NO\n"]}, {"input": "1\n2 4 1\n*../\n*.*.\n*...\n.//.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n../..\n*.*.*\n-+..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n.*..\n*.).\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n5 5 3\n-....\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n*...\n*.*/\n..*/\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n..*.\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.+.\n./*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 6 1\n../.-.\n*.....\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*.+.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n*..0\n*.*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n-.....\n.....*\n.*...*\n.*.*..\n..*../\n", "output": ["NO\n"]}, {"input": "1\n3 4 1\n...*\n*.*.\n..*.\n.-/.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n.*//\n.//.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n*../\n*.*.\n*...\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n.*/.\n*.).\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n3 5 3\n-....\n.....\n*.*.*\n/*..*\n..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n*...\n*.*/\n/*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n..).\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.+.\n./*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n2 6 1\n../.-.\n*.....\n*...*.\n.*.*..\n...*..\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*-+.\n..*/\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n..*.\n*.+.\n*.//\n.//.\n", "output": ["NO\n"]}, {"input": "1\n3 5 3\n-....\n.....\n*.*.*\n/*..*\n..)..\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n.*..\n*.*.\n.)..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.*.\n./*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n1 4 2\n...*\n*-+.\n/*..\n./..\n", "output": ["NO\n"]}, {"input": "1\n4 1 2\n..*.\n*.+.\n*.//\n.//.\n", "output": ["NO\n"]}, {"input": "1\n3 5 3\n....-\n.....\n*.*.*\n/*..*\n..)..\n", "output": ["NO\n"]}, {"input": "1\n4 2 1\n.*...\n.*.*.\n-/*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n.....\n.....\n*.*.*\n.*.*.\n/.*..\n", "output": ["NO\n"]}, {"input": "1\n1 9 1\n*.*...*.*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n...**\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n3 6 1\n.*../.\n..*.*.\n...*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n....\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n..**\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n2 5 1\n....*\n.*.+.\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n.*..\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n1 4 1\n/..*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....)\n*..+-\n..*..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*..+-\n..*..\n-....\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n-+..*\n..+..\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n*/*.\n.*..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*.*...*\n.*.....*.\n....*....\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..+.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n.//.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n...*.\n.*.+-\n..*.-\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/..*\n).*.\n*...\n../.\n", "output": ["NO\n"]}, {"input": "1\n4 5 1\n....*\n*..+-\n..*-.\n.....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n/.*.\n.*.*\n.*/.\n..0.\n", "output": ["NO\n"]}, {"input": "1\n4 5 2\n....*\n*/.+-\n..+..\n-....\n", "output": ["NO\n"]}, {"input": "1\n4 4 1\n..*/\n**..\n.+..\n..0.\n", "output": ["NO\n"]}, {"input": "1\n5 5 2\n-....\n.....\n*.*.*\n*-.*.\n..*..\n", "output": ["NO\n"]}, {"input": "1\n3 9 1\n*-*...*.*\n.*.....*.\n-...*../.\n", "output": ["NO\n"]}, {"input": "1\n5 6 2\n......\n.....*\n*...).\n.*.*..\n/..*..\n", "output": ["NO\n"]}, {"input": "1\n4 4 2\n...*\n*.*.\n.*..\n../.\n", "output": ["NO\n"]}, {"input": "8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 2\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n...-.*.\n..*.*..\n...*./.\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n", "output": ["NO\nYES\nNO\nYES\nNO\nNO\nNO\nNO\n"]}], "task_id": "codecontest/15", "repair_prompt": ["Casimir has a rectangular piece of paper with a checkered field of size n \u00d7 m. Initially, all cells of the field are white.\n\nLet us denote the cell with coordinates i vertically and j horizontally by (i, j), where the upper left cell is (1, 1) and the lower right cell is (n, m). Casimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: \n\n1. First, the center cell (i, j) is painted black. \n2. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black. The cells are painted in such a way that it creates a symmetrical pattern. There is a certain symmetry involved in the pattern of how the cells are painted. \n3. That is all the cells with coordinates (i - h, j \u00b1 h) for all h between 0 and d are painted; in particular, a tick consists of 2d + 1 black cells. \n\nAn already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3.\n\n<image>\n\nYou are given a description of a checkered field of size n \u00d7 m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks).\n\nDetermine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Casimir has a rectangular piece of paper with a checkered field of size n \u00d7 m. Initially, all cells of the field are white.\n\nLet us denote the cell with coordinates i vertically and j horizontally by (i, j), where the upper left cell is (1, 1) and the lower right cell is (n, m). Casimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows:\n\n1. First, the center cell (i, j) is painted black. \n2. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black. The cells are painted in such a way that it creates a symmetrical pattern. There is a certain symmetry involved in the pattern of how the cells are painted.\n3. That is, all the cells with coordinates (i - h, j \u00b1 h) for all h between 0 and d are painted. This means that in particular, a tick consists of 2d + 1 black cells.\n\nAn already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3.\n\n<image>\n\nYou are given a description of a checkered field of size n \u00d7 m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks).\n\nDetermine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Casimir has a rectangular piece of paper with a checkered field of size n \u00d7 m, where initially, all cells of the field are white. Let us denote the cell with coordinates i vertically and j horizontally by (i, j), where the upper left cell is (1, 1) and the lower right cell is (n, m), and Casimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: First, the center cell (i, j) is painted black. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black, in such a way that it creates a symmetrical pattern. There is a certain symmetry involved in the pattern of how the cells are painted. That is all the cells with coordinates (i - h, j \u00b1 h) for all h between 0 and d are painted; in particular, a tick consists of 2d + 1 black cells. An already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3. <image> You are given a description of a checkered field of size n \u00d7 m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks). Determine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def can_form_ticks(n, m, k, field):\n    # Check if the field is empty (all '.')\n    if all(row == '.' * m for row in field):\n        return 'YES'\n    \n    # Create a copy of the field to mark visited cells\n    visited = [[False] * m for _ in range(n)]\n    \n    # Function to check if a tick of size d can be centered at (i, j)\n    def can_be_center(i, j, d):\n        for h in range(d + 1):\n            if i - h < 0 or j - h < 0 or j + h >= m:\n                return False\n            if field[i - h][j - h] != '*' or field[i - h][j + h] != '*':\n                return False\n        return True\n    \n    # Mark cells that can be part of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Find the maximum size of tick that can be centered at (i, j)\n                d = 0\n                while can_be_center(i, j, d):\n                    d += 1\n                d -= 1\n                \n                # If the tick size is at least k, mark the cells as visited\n                if d >= k:\n                    for h in range(d + 1):\n                        visited[i - h][j - h] = True\n                        visited[i - h][j + h] = True\n    \n    # Check if all '*' cells are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not visited[i][j]:\n                return 'NO'\n    \n    return 'YES'\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def can_form_ticks(field, n, m, k):\n    # Create a copy of the field to mark the cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size d >= k can be formed with center at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If the tick size is at least k, mark the cells\n                if d > k:\n                    for h in range(d):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(field, n, m, k)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a blank field to simulate drawing ticks\n    simulated_field = [['.' for _ in range(m)] for _ in range(n)]\n\n    # Iterate over each cell to identify potential tick centers\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size d >= k can be drawn\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If the tick size is at least k, draw it on the simulated field\n                if d > k:\n                    for h in range(d):\n                        simulated_field[i - h][j - h] = '*'\n                        simulated_field[i - h][j + h] = '*'\n                    simulated_field[i][j] = '*'\n\n    # Compare the simulated field with the given field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] != simulated_field[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        field = [data[index + i + 1] for i in range(n)]\n        index += n + 1\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible tick centers from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Determine the maximum size of the tick with center at (i, j)\n                d = 0\n                while (i - d >= 0 and j - d >= 0 and j + d < m and\n                       field[i - d][j - d] == '*' and field[i - d][j + d] == '*'):\n                    d += 1\n                d -= 1  # Adjust because the loop exits after one extra increment\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Verify if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(field, n, m, k):\n    # Create a copy of the field to mark the cells covered by ticks\n    covered = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size at least k can be drawn with center at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If the tick size is at least k, mark the cells as covered\n                if d > k:\n                    for h in range(d):\n                        covered[i - h][j - h] = True\n                        covered[i - h][j + h] = True\n\n    # Check if all '*' cells in the original field are covered\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not covered[i][j]:\n                return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        if can_form_ticks(field, n, m, k):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a helper function to check if a tick of size d can be centered at (i, j)\n    def is_valid_tick_center(i, j, d):\n        for h in range(d + 1):\n            if i - h < 0 or j - h < 0 or j + h >= m:\n                return False\n            if field[i - h][j - h] != '*' or field[i - h][j + h] != '*':\n                return False\n        return True\n\n    # Create a 2D list to mark cells that are part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to find valid tick centers\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Find the maximum size of the tick that can be centered at (i, j)\n                d = 0\n                while is_valid_tick_center(i, j, d):\n                    d += 1\n                d -= 1  # The last increment was invalid, so decrement\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to simulate drawing ticks\n    simulated_field = [['.' for _ in range(m)] for _ in range(n)]\n\n    # Iterate over each cell to find potential tick centers\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size at least k can be drawn\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If a valid tick of size at least k is found, mark it on the simulated field\n                if d > k:\n                    for h in range(d):\n                        simulated_field[i - h][j - h] = '*'\n                        simulated_field[i - h][j + h] = '*'\n\n    # Compare the simulated field with the original field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and simulated_field[i][j] != '*':\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark cells that can be part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size d >= k can be formed with (i, j) as the center\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n                \n                # If a valid tick of size d >= k is found, mark the cells\n                if d > k:\n                    for h in range(d):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n    \n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_tick(field, n, m, k):\n    # Create a copy of the field to mark cells covered by ticks\n    covered = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to find potential tick centers\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size at least k can be formed\n                max_d = 0\n                while True:\n                    d = max_d + 1\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] == '*' and field[i - d][j + d] == '*':\n                        max_d = d\n                    else:\n                        break\n                \n                # If a valid tick of size at least k is found, mark the cells\n                if max_d >= k:\n                    for h in range(max_d + 1):\n                        covered[i - h][j - h] = True\n                        covered[i - h][j + h] = True\n    \n    # Compare the covered field with the original field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not covered[i][j]:\n                return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        field = [data[index + i + 1] for i in range(n)]\n        index += n + 1\n        \n        if can_form_tick(field, n, m, k):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark the cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate from bottom to top to ensure we can check for valid ticks\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Determine the maximum size of the tick with center at (i, j)\n                d = 0\n                while (i - d >= 0 and j - d >= 0 and j + d < m and\n                       field[i - d][j - d] == '*' and field[i - d][j + d] == '*'):\n                    d += 1\n                d -= 1  # Adjust because we incremented one extra time\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        field = data[index + 1:index + 1 + n]\n        index += 1 + n\n\n        if can_form_ticks(n, m, k, field):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def can_form_ticks(n, m, k, field):\n    # Check if the field is empty (all '.')\n    if all(row == '.' * m for row in field):\n        return 'YES'\n    \n    # Create a copy of the field to mark visited cells\n    visited = [[False] * m for _ in range(n)]\n    \n    # Function to check if a tick of size d can be centered at (i, j)\n    def can_be_center(i, j, d):\n        for h in range(d + 1):\n            if i - h < 0 or j - h < 0 or j + h >= m:\n                return False\n            if field[i - h][j - h] != '*' or field[i - h][j + h] != '*':\n                return False\n        return True\n    \n    # Mark cells that can be part of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Find the maximum size of tick that can be centered at (i, j)\n                d = 0\n                while can_be_center(i, j, d):\n                    d += 1\n                d -= 1\n                \n                # If the tick size is at least k, mark the cells as visited\n                if d >= k:\n                    for h in range(d + 1):\n                        visited[i - h][j - h] = True\n                        visited[i - h][j + h] = True\n    \n    # Check if all '*' cells are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not visited[i][j]:\n                return 'NO'\n    \n    return 'YES'\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, field dimensions, minimum tick size, and field patterns.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers n, m, and k representing the field dimensions and minimum tick size.\",\n        \"Read the next n lines to capture the field pattern as a list of strings.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a tick of size d >= k can be drawn for each test case.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size d >= k.\",\n        \"Verify the symmetry of the tick by checking the top-left and top-right diagonals.\",\n        \"Ensure all required cells for the tick are painted black ('*').\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If the field can be obtained by drawing ticks of size d >= k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and field details.\",\n    \"For each test case, analyze the field to determine if it can be formed by ticks of size d >= k.\",\n    \"Iterate over each cell to check potential tick centers and validate tick formation.\",\n    \"Output 'YES' or 'NO' based on the possibility of forming the field with valid ticks.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick': A tick is a pattern of black cells centered at a specific cell, extending diagonally in both top-left and top-right directions. The size of the tick determines how many cells are painted diagonally from the center.\n    'symmetry': The tick pattern is symmetrical, meaning the number of cells painted diagonally to the left and right of the center is equal.\n\n# [phrase showing quantity relationship]\n    'at least': The size of each tick must be greater than or equal to k, meaning d >= k.\n    '2d + 1': This indicates the total number of cells painted for a tick of size d, including the center cell.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if a cell can be the center of a tick and verifying the symmetry should be implemented simultaneously. This involves checking both diagonals from the center cell in one code block to ensure the tick can be formed.\n\n# [edge case]\n    Case 1: A field with no '*' characters at all, e.g., a field of size 3x3 with all '.'.\n    Expected output: YES\n    Explanation: Since there are no '*' characters, no ticks are needed, and the field can be considered as having been formed without any ticks.\n\n    Case 2: A field with '*' characters only in the corners, e.g., a 3x3 field with '*' at (1,1), (1,3), (3,1), and (3,3).\n    Expected output: NO\n    Explanation: None of these '*' can be the center of a tick of size k >= 1 because they do not have enough surrounding cells to form a tick.\n\n    Case 3: A field with a single '*' in the center of a 3x3 field, e.g., '*' at (2,2).\n    Expected output: NO\n    Explanation: A single '*' cannot form a tick of size k >= 1 as it lacks the required surrounding cells.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where no ticks are needed or where isolated '*' cannot form valid ticks.\n    ```python\n    def can_form_ticks(n, m, k, field):\n        # Check if the field is empty (all '.')\n        if all(row == '.' * m for row in field):\n            return 'YES'\n        \n        # Iterate over each cell to check potential tick", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Check if the field is empty (all '.')\n    if all(row == '.' * m for row in field):\n        return 'YES'\n    \n    # Create a copy of the field to mark visited cells\n    visited = [[False] * m for _ in range(n)]\n    \n    # Function to check if a tick of size d can be centered at (i, j)\n    def can_be_center(i, j, d):\n        for h in range(d + 1):\n            if i - h < 0 or j - h < 0 or j + h >= m:\n                return False\n            if field[i - h][j - h] != '*' or field[i - h][j + h] != '*':\n                return False\n        return True\n    \n    # Mark cells that can be part of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Find the maximum size of tick that can be centered at (i, j)\n                d = 0\n                while can_be_center(i, j, d):\n                    d += 1\n                d -= 1\n                \n                # If the tick size is at least k, mark the cells as visited\n                if d >= k:\n                    for h in range(d + 1):\n                        visited[i - h][j - h] = True\n                        visited[i - h][j + h] = True\n    \n    # Check if all '*' cells are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not visited[i][j]:\n                return 'NO'\n    \n    return 'YES'\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, field dimensions, minimum tick size, and field patterns.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the dimensions n, m, and k.\",\n        \"Read the n lines representing the field pattern.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a tick of size d >= k can be drawn for each test case.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size d >= k.\",\n        \"Verify the symmetry of the tick by checking the top-left and top-right diagonals.\",\n        \"Ensure all cells in the tick are marked with '*' and remain consistent with the pattern.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If the field can be obtained by drawing ticks of size d >= k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and field patterns.\",\n    \"For each test case, iterate over the field to check for possible ticks of size d >= k.\",\n    \"Verify the symmetry and consistency of each tick with the given field pattern.\",\n    \"Output 'YES' or 'NO' based on whether the field can be obtained by drawing valid ticks.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick'\n    Explanation: A tick is a pattern of black cells centered at a specific cell, extending diagonally in both top-left and top-right directions. The size of a tick is defined by the number of cells extending diagonally from the center.\n\n    'symmetry'\n    Explanation: The tick pattern is symmetrical, meaning the number of cells painted on the top-left diagonal is equal to the number of cells painted on the top-right diagonal.\n\n# [phrase showing quantity relationship]\n    'at least k': This means that the size of each tick must be greater than or equal to k. In code, this can be implemented by checking if the size of the tick (d) is >= k.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the second subproblem should be implemented simultaneously:\n    - \"Check if the cell can be the center of a tick of size d >= k.\"\n    - \"Verify the symmetry of the tick by checking the top-left and top-right diagonals.\"\n    - \"Ensure all cells in the tick are marked with '*' and remain consistent with the pattern.\"\n    These steps can be combined into a single loop that iterates over each cell and checks the conditions for forming a valid tick.\n\n# [edge case]\n    1. A field with no '*' at all, e.g., a 3x3 grid of all '.' with k=1.\n       Expected output: YES\n       Explanation: Since there are no '*' to form any ticks, the field is trivially valid.\n\n    2. A field with a single '*' in the center of a 3x3 grid with k=1.\n       Expected output: NO\n       Explanation: A single '*' cannot form a tick of size 1 or more.\n\n    3. A field with '*' forming a perfect tick of size k in a 3x3 grid with k=1.\n       Expected output: YES\n       Explanation: The '*' form a valid tick pattern that meets the minimum size requirement.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no '*' or isolated '*' that cannot form a valid tick.\n    Example code for handling these edge cases:\n    ```python\n    def can_form_ticks(field, n, m, k):\n        for i in range(n):\n            for j in range(m):\n                if field[i][j] == '*':\n                    # Check if this can be", "Round_0": {"code": "def can_form_ticks(field, n, m, k):\n    # Create a copy of the field to mark the cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size d >= k can be formed with center at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If the tick size is at least k, mark the cells\n                if d > k:\n                    for h in range(d):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(field, n, m, k)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the dimensions of the field, the minimum tick size, and the field pattern.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify potential tick centers by iterating over each cell in the field and checking if it can be the center of a tick of size at least k.\",\n      \"output\": \"A list of potential tick centers for each test case.\"\n    },\n    {\n      \"description\": \"For each potential tick center, verify if a tick of size d (d >= k) can be drawn by checking the required cells in the top-left and top-right diagonals.\",\n      \"output\": \"A boolean indicating whether a valid tick can be drawn for each potential center.\"\n    },\n    {\n      \"description\": \"Simulate the drawing of valid ticks on a blank field and compare the result with the given field to ensure all black cells are covered by ticks.\",\n      \"output\": \"A boolean indicating whether the given field can be fully explained by the drawn ticks.\"\n    },\n    {\n      \"description\": \"Compile the results for all test cases and format the output as 'YES' or 'NO' for each test case.\",\n      \"output\": \"A list of results corresponding to each test case.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to extract the number of test cases and details for each test case.\",\n    \"For each test case, iterate over each cell in the field to identify potential tick centers.\",\n    \"For each potential tick center, check if a tick of size d (d >= k) can be drawn by verifying the required cells in the diagonals.\",\n    \"Simulate the drawing of valid ticks on a blank field and compare it with the given field to ensure all black cells are covered.\",\n    \"Output 'YES' if the field can be fully explained by the drawn ticks, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick': A pattern of black cells centered at a specific cell, extending diagonally in both directions, forming a symmetrical shape.\n    'size d': The number of cells extending diagonally from the center, with the total number of black cells being 2d + 1.\n    'd \u2265 k': The minimum size of the tick that can be drawn, ensuring that each tick has a certain minimum size.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the size of a tick must be greater than zero, meaning no tick can be of size zero.\n    'd \u2265 k': Indicates that the size of each tick must be at least k, meaning the tick must extend at least k cells diagonally from the center.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2 and 3 should be implemented simultaneously:\n    - \"For each test case, iterate over each cell in the field to identify potential tick centers.\"\n    - \"For each potential tick center, check if a tick of size d (d >= k) can be drawn by verifying the required cells in the diagonals.\"\n    These steps can be combined by iterating over each cell and immediately checking if it can be a tick center, thus reducing the need for separate iterations.\n\n# [edge case] \n    1. A field with all cells as '.' (e.g., 3x3 grid with k=1): NO\n       Explanation: No ticks can be drawn as there are no black cells.\n    2. A field with a single '*' in the center of a 3x3 grid with k=1: NO\n       Explanation: A single '*' cannot form a tick of size 1 or more.\n    3. A field with a single row of '*' in a 1x5 grid with k=1: NO\n       Explanation: A single row of '*' cannot form a valid tick pattern as it lacks the diagonal symmetry required.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Specifically, we need to ensure that any isolated '*' or patterns that cannot form a valid tick are identified and handled.\n    - This can be done by checking if any '*' cannot be part of a valid tick of size d \u2265 k.\n\n```python\ndef can_form_ticks(n, m, k, field):\n    # Create a blank field to simulate drawing ticks\n   ", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a blank field to simulate drawing ticks\n    simulated_field = [['.' for _ in range(m)] for _ in range(n)]\n\n    # Iterate over each cell to identify potential tick centers\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size d >= k can be drawn\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If the tick size is at least k, draw it on the simulated field\n                if d > k:\n                    for h in range(d):\n                        simulated_field[i - h][j - h] = '*'\n                        simulated_field[i - h][j + h] = '*'\n                    simulated_field[i][j] = '*'\n\n    # Compare the simulated field with the given field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] != simulated_field[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        field = [data[index + i + 1] for i in range(n)]\n        index += n + 1\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, field dimensions, minimum tick size, and field patterns.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the dimensions n, m, and k.\",\n        \"Read the n lines representing the field pattern.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a tick of size d >= k can be drawn for each test case.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size d >= k.\",\n        \"Verify the symmetry of the tick by checking cells diagonally top-left and top-right.\",\n        \"Ensure all required cells for a tick are painted black ('*').\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If all ticks can be drawn according to the rules, output 'YES'.\",\n        \"If any tick cannot be drawn, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and field details.\",\n    \"For each test case, iterate over the field to check for possible ticks.\",\n    \"Validate the tick size and symmetry for each potential tick center.\",\n    \"Output 'YES' if the field can be formed by valid ticks, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick': A symmetrical pattern of black cells centered at a specific cell, extending diagonally top-left and top-right.\n    'symmetry': The pattern must be symmetrical, meaning equal cells on both diagonals from the center.\n    'minimum size k': The smallest size a tick can be, ensuring d >= k for all ticks.\n\n# [phrase showing quantity relationship]\n    'at least k': The size of each tick must be greater than or equal to k, meaning d >= k.\n    Implementation: Ensure that any tick considered has a size d that satisfies d >= k.\n\n# [degree adverb]\n    No degree adverb present in the requirement.\n\n# [code logic]\n    The steps in the second subproblem should be implemented simultaneously:\n    - \"Check if the cell can be the center of a tick of size d >= k.\"\n    - \"Verify the symmetry of the tick by checking cells diagonally top-left and top-right.\"\n    - \"Ensure all required cells for a tick are painted black ('*').\"\n    These steps can be combined into a single loop that checks each cell for potential tick centers and validates the tick size and symmetry.\n\n# [edge case]\n    Case 1: A field with no '*' characters at all.\n    Input: 1 1 1\n           .\n    Expected Output: YES\n    Explanation: No ticks are needed, and the field is valid as is.\n\n    Case 2: A field with '*' characters that cannot form a tick of size k.\n    Input: 2 2 2\n           *.\n           .*\n    Expected Output: NO\n    Explanation: The '*' characters are isolated and cannot form a tick of size 2.\n\n    Case 3: A field with exactly one tick of size k.\n    Input: 3 3 1\n           .*.\n           ***\n           .*.\n    Expected Output: YES\n    Explanation: The center cell (2, 2) forms a valid tick of size 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where no ticks are needed or isolated '*' characters exist.\n    Code for handling edge cases:\n    ```python\n    def can_form_ticks(n, m, k, field):\n        for i in range(n):\n            for j in range(m):\n                if field[i][j] == '*':\n                    # Check if this can be the center of a tick of size d >= k\n                    if not is", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Check for possible tick centers from bottom to top\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Determine the maximum size of the tick with center at (i, j)\n                d = 0\n                while (i - d >= 0 and j - d >= 0 and j + d < m and\n                       field[i - d][j - d] == '*' and field[i - d][j + d] == '*'):\n                    d += 1\n                d -= 1  # Adjust because the loop exits after one extra increment\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Verify if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the dimensions of the field, the minimum tick size, and the field's configuration.\",\n      \"output\": \"A structured representation of the input data, such as a list of test cases with their respective parameters.\"\n    },\n    {\n      \"description\": \"For each test case, identify potential tick centers by iterating over each cell in the field and checking if it can be the center of a tick of size at least k.\",\n      \"output\": \"A list of potential tick centers for each test case.\"\n    },\n    {\n      \"description\": \"For each potential tick center, verify if a tick of size at least k can be drawn by checking the required cells in the top-left and top-right diagonals.\",\n      \"output\": \"A boolean value indicating whether a valid tick can be drawn for each potential center.\"\n    },\n    {\n      \"description\": \"Simulate the drawing of valid ticks on the field and mark the cells that are covered by these ticks.\",\n      \"output\": \"A modified field representation where cells covered by valid ticks are marked.\"\n    },\n    {\n      \"description\": \"Compare the modified field with the original field to determine if all '*' cells can be explained by the drawn ticks.\",\n      \"output\": \"A boolean value indicating whether the field can be obtained by drawing ticks of size at least k.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to extract the number of test cases and details for each test case.\",\n    \"For each test case, iterate over each cell in the field to identify potential tick centers.\",\n    \"For each potential tick center, check if a tick of size at least k can be drawn by verifying the required cells in the diagonals.\",\n    \"Simulate the drawing of valid ticks on the field and mark the cells covered by these ticks.\",\n    \"Compare the modified field with the original field to determine if all '*' cells are covered by valid ticks.\",\n    \"Output 'YES' if the field can be obtained by drawing ticks of size at least k, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick': A symmetrical pattern of black cells centered at a specific cell, extending diagonally in both directions.\n    'size d': The number of cells extending diagonally from the center cell, forming a tick.\n    'symmetrical pattern': The arrangement of black cells in a tick, ensuring equal extension in both diagonal directions.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the size of a tick must be greater than zero, meaning ticks cannot be of size zero.\n    'd \u2265 k': Specifies that the size of each tick must be at least k, meaning the tick size must be greater than or equal to k.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to identifying potential tick centers and verifying tick validity should be considered simultaneously. Specifically:\n    - \"For each test case, iterate over each cell in the field to identify potential tick centers.\"\n    - \"For each potential tick center, check if a tick of size at least k can be drawn by verifying the required cells in the diagonals.\"\n    These steps can be implemented in a single loop where each cell is checked for its potential to be a tick center and validated in one go.\n\n# [edge case]\n    Case 1: A field with no '*' cells, e.g., 3x3 field with all '.' cells.\n    Expected output: YES\n    Explanation: Since there are no '*' cells, no ticks are needed, and the field can be considered valid.\n\n    Case 2: A field with '*' cells that cannot form a valid tick, e.g., a single '*' in a 3x3 field.\n    Expected output: NO\n    Explanation: A single '*' cannot form a tick of size k \u2265 1, so the field is invalid.\n\n    Case 3: A field with '*' cells forming a valid tick of minimum size k, e.g., a 3x3 field with a tick of size 1.\n    Expected output: YES\n    Explanation: The '*' cells form a valid tick of size 1, satisfying the condition d \u2265 k.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where no '*' cells exist or where '*' cells cannot form a valid tick.\n    Code for handling edge cases:\n    ```python\n    def can_form_ticks(field, n, m, k):\n        for i in range(n):\n            for j in range(m):\n               ", "Round_0": {"code": "def can_form_ticks(field, n, m, k):\n    # Create a copy of the field to mark the cells covered by ticks\n    covered = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size at least k can be drawn with center at (i, j)\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If the tick size is at least k, mark the cells as covered\n                if d > k:\n                    for h in range(d):\n                        covered[i - h][j - h] = True\n                        covered[i - h][j + h] = True\n\n    # Check if all '*' cells in the original field are covered\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not covered[i][j]:\n                return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        if can_form_ticks(field, n, m, k):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, field dimensions, minimum tick size, and field patterns.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the dimensions n, m, and k.\",\n        \"Read the n lines representing the field pattern.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a tick of size d >= k can be drawn for each test case.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size d >= k.\",\n        \"Verify the symmetry and pattern of the tick by checking the diagonals.\",\n        \"Ensure all cells in the tick are marked with '*'.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If the field can be obtained by drawing ticks of size d >= k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and field patterns.\",\n    \"For each test case, iterate over the field to check for possible ticks.\",\n    \"Verify the tick pattern and symmetry for each potential tick center.\",\n    \"Output 'YES' if the field can be obtained by drawing valid ticks, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick': A tick is a pattern of black cells centered at a specific cell, extending diagonally in both directions. The size of the tick is determined by the number of cells extending diagonally from the center.\n    'symmetry': The tick pattern must be symmetrical, meaning the number of cells painted diagonally to the left and right of the center must be equal.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the size of the tick must be greater than zero, meaning there must be at least one cell painted diagonally on each side of the center.\n    'd \u2265 k': Indicates that the size of the tick must be at least k, meaning the tick must extend diagonally at least k cells from the center.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan related to checking the tick pattern and symmetry should be implemented simultaneously. Specifically:\n    - \"Check if the cell can be the center of a tick of size d >= k.\"\n    - \"Verify the symmetry and pattern of the tick by checking the diagonals.\"\n    - \"Ensure all cells in the tick are marked with '*'.\"\n    These steps can be implemented in a single loop that iterates over each cell and checks the conditions for forming a valid tick.\n\n# [edge case]\n    Case 1: A field with no '*' at all, e.g., 3x3 field with all '.'.\n    Expected output: YES\n    Explanation: Since there are no '*' cells, no ticks are needed, and the field can be considered valid.\n    \n    Case 2: A field with '*' only in the corners, e.g., 3x3 field with '*' at (1,1), (1,3), (3,1), (3,3).\n    Expected output: NO\n    Explanation: None of the '*' can form a valid tick of size d \u2265 k, as they cannot extend diagonally.\n\n    Case 3: A field with a single '*' in the center, e.g., 3x3 field with '*' at (2,2).\n    Expected output: NO\n    Explanation: A single '*' cannot form a tick of size d \u2265 k unless k = 0, which is not allowed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where no ticks are needed or where isolated '*' cannot form valid ticks.\n    Example code for handling", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a helper function to check if a tick of size d can be centered at (i, j)\n    def is_valid_tick_center(i, j, d):\n        for h in range(d + 1):\n            if i - h < 0 or j - h < 0 or j + h >= m:\n                return False\n            if field[i - h][j - h] != '*' or field[i - h][j + h] != '*':\n                return False\n        return True\n\n    # Create a 2D list to mark cells that are part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate over each cell to find valid tick centers\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Find the maximum size of the tick that can be centered at (i, j)\n                d = 0\n                while is_valid_tick_center(i, j, d):\n                    d += 1\n                d -= 1  # The last increment was invalid, so decrement\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the dimensions of the field, the minimum tick size, and the field pattern.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify all potential tick centers by iterating over each cell in the field and checking if it can be the center of a tick of size at least k.\",\n      \"output\": \"A list of potential tick centers for each test case.\"\n    },\n    {\n      \"description\": \"For each potential tick center, verify if a tick of size d (d >= k) can be drawn by checking the required cells in the top-left and top-right diagonals.\",\n      \"output\": \"A boolean indicating whether a valid tick can be drawn for each potential center.\"\n    },\n    {\n      \"description\": \"Simulate the drawing of valid ticks on a copy of the field to ensure all '*' cells can be covered by ticks of size at least k.\",\n      \"output\": \"A modified field showing the coverage of ticks.\"\n    },\n    {\n      \"description\": \"Compare the modified field with the original field to determine if the original field can be obtained by drawing ticks of size at least k.\",\n      \"output\": \"A boolean result for each test case indicating if the field can be obtained.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to extract the number of test cases and details for each test case.\",\n    \"For each test case, iterate over each cell in the field to identify potential tick centers.\",\n    \"For each potential tick center, check if a tick of size at least k can be drawn by verifying the required cells in the diagonals.\",\n    \"Simulate the drawing of valid ticks on a copy of the field to cover all '*' cells.\",\n    \"Compare the simulated field with the original field to determine if the field can be obtained by drawing ticks.\",\n    \"Output 'YES' if the field can be obtained, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick': A pattern of black cells centered at a specific cell, extending diagonally in both directions.\n    'symmetrical pattern': The tick must be symmetrical, meaning it extends equally in both diagonal directions.\n    'size d': The number of cells extending diagonally from the center, with the total number of black cells being 2d + 1.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the size of the tick must be greater than zero, meaning it must have at least one cell extending diagonally.\n    'd \u2265 k': The size of each tick must be at least k, meaning the tick must extend diagonally by at least k cells.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    Steps 2 and 3 in the subproblems should be considered simultaneously. When identifying potential tick centers, we should immediately verify if a tick of size at least k can be drawn. This can be implemented using nested loops to iterate over each cell and check the diagonals simultaneously.\n\n# [edge case]\n    Case 1: A field with no '*' cells, e.g., a 3x3 field with all '.' cells.\n    Expected output: YES\n    Explanation: Since there are no '*' cells, no ticks are needed, and the field can be considered as obtained by drawing zero ticks.\n\n    Case 2: A field with '*' cells that cannot form a tick of size k, e.g., a 3x3 field with '*' only at (1,1).\n    Expected output: NO\n    Explanation: The '*' at (1,1) cannot be part of a tick of size k because it lacks the necessary diagonal cells.\n\n    Case 3: A field with '*' cells forming a valid tick of size k, e.g., a 3x3 field with '*' at (2,2), (1,1), and (1,3).\n    Expected output: YES\n    Explanation: The '*' cells form a valid tick of size 1 centered at (2,2).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - For the case with no '*' cells, simply return 'YES'.\n    - For the case where '*' cells cannot form a valid tick, ensure the logic checks for diagonal coverage and returns 'NO' if not met.\n\nYES", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to simulate drawing ticks\n    simulated_field = [['.' for _ in range(m)] for _ in range(n)]\n\n    # Iterate over each cell to find potential tick centers\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size at least k can be drawn\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n\n                # If a valid tick of size at least k is found, mark it on the simulated field\n                if d > k:\n                    for h in range(d):\n                        simulated_field[i - h][j - h] = '*'\n                        simulated_field[i - h][j + h] = '*'\n\n    # Compare the simulated field with the original field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and simulated_field[i][j] != '*':\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n\n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, field dimensions, minimum tick size, and field patterns.\",\n      \"steps\": [\n        \"Read the number of test cases.\",\n        \"For each test case, read the dimensions n, m, and k.\",\n        \"Read the n lines representing the field pattern.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a tick of size d >= k can be drawn for each test case.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size d >= k.\",\n        \"Verify the symmetry of the tick by checking the diagonals.\",\n        \"Ensure all required cells for the tick are painted black ('*').\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If the field can be obtained by drawing ticks of size d >= k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and field patterns.\",\n    \"For each test case, iterate over the field to check for possible ticks.\",\n    \"Verify the symmetry and size constraints for each potential tick.\",\n    \"Output 'YES' or 'NO' based on whether the field can be obtained by drawing valid ticks.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick'\n    Explanation: A tick is a pattern of black cells ('*') on the field, centered at a specific cell, and extending diagonally in both directions. The size of a tick is defined by the number of cells extending diagonally from the center.\n\n    'symmetry'\n    Explanation: The tick pattern must be symmetrical, meaning the number of cells painted on the top-left diagonal must equal the number on the top-right diagonal.\n\n# [phrase showing quantity relationship]\n    'at least k': This means that the size of any tick drawn must be greater than or equal to k. In code, this can be implemented by ensuring that any tick considered has a size d such that d >= k.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the subproblem \"Determine if a tick of size d >= k can be drawn for each test case\" should be implemented simultaneously. Specifically, checking if a cell can be the center of a tick, verifying the symmetry, and ensuring all required cells are painted should be done in a single iteration over the field.\n\n# [edge case]\n    1. A field with all cells unpainted ('.') and k = 1 should return 'YES' because no ticks are needed.\n       Explanation: Since no cells are painted, the field can be considered as having no ticks, which is valid.\n    2. A field with a single row or column and k > 1 should return 'NO' because no valid tick can be formed.\n       Explanation: A single row or column does not allow for the diagonal extension required for a tick of size k > 1.\n    3. A field where all cells are painted ('*') and k = 1 should return 'YES' because each cell can be the center of a tick of size 1.\n       Explanation: Each cell can independently be the center of a tick of size 1, satisfying the condition.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - For a field with all cells unpainted, check if k = 1 and return 'YES'.\n    - For a single row or column, ensure that no tick of size k > 1 is attempted.\n    - For a fully painted field, ensure that each cell can independently be a tick center if k = 1.\n\n```python\ndef handle_edge_cases(n, m, k, field):\n", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark cells that can be part of a valid tick\n    marked = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to check if it can be the center of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size d >= k can be formed with (i, j) as the center\n                d = 0\n                while True:\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] != '*' or field[i - d][j + d] != '*':\n                        break\n                    d += 1\n                \n                # If a valid tick of size d >= k is found, mark the cells\n                if d > k:\n                    for h in range(d):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n    \n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return \"NO\"\n    \n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the dimensions of the field, the minimum tick size, and the field pattern.\",\n      \"output\": \"A structured representation of the input data for each test case.\"\n    },\n    {\n      \"description\": \"For each test case, identify all potential tick centers by iterating over each cell in the field and checking if it can be the center of a tick of size at least k.\",\n      \"output\": \"A list of potential tick centers for each test case.\"\n    },\n    {\n      \"description\": \"For each potential tick center, verify if a tick of size at least k can be drawn by checking the required cells in the top-left and top-right diagonals.\",\n      \"output\": \"A boolean value indicating whether a valid tick can be drawn for each potential center.\"\n    },\n    {\n      \"description\": \"Simulate the drawing of valid ticks on the field and mark the cells that are covered by ticks.\",\n      \"output\": \"A modified field representation where cells covered by ticks are marked.\"\n    },\n    {\n      \"description\": \"Compare the modified field with the original field to determine if all '*' cells can be explained by the drawn ticks.\",\n      \"output\": \"A boolean value indicating whether the field can be obtained by drawing ticks of size at least k.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read and parse the input to extract the number of test cases and details for each test case.\",\n    \"For each test case, iterate over each cell in the field to identify potential tick centers.\",\n    \"For each potential tick center, check if a tick of size at least k can be drawn by verifying the required diagonal cells.\",\n    \"Simulate the drawing of valid ticks on the field and mark the cells covered by these ticks.\",\n    \"Compare the modified field with the original field to check if all '*' cells are covered by ticks.\",\n    \"Output 'YES' if the field can be obtained by drawing ticks, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick': A pattern of black cells centered at a specific cell, extending diagonally in both directions.\n    'size d': The number of cells extending diagonally from the center cell, forming a symmetrical pattern.\n    'field': The grid of cells, some of which are painted black ('*') and others are white ('.').\n\n# [phrase showing quantity relationship]\n    'at least k': The minimum size of the tick, meaning the tick must have a size greater than or equal to k.\n    '2d + 1': The total number of cells painted black for a tick of size d, including the center cell.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    Steps 2 and 3 in the high-level plan should be considered simultaneously. When identifying potential tick centers, the verification of whether a tick can be drawn should occur immediately to avoid unnecessary checks.\n\n# [edge case]\n    Case 1: n = 1, m = 1, k = 1, field = ['*']\n    Expected output: NO\n    Explanation: A tick of size at least 1 cannot be formed with only one cell.\n    \n    Case 2: n = 3, m = 3, k = 2, field = ['*.*', '.*.', '*.*']\n    Expected output: NO\n    Explanation: The '*' cells cannot form a tick of size 2 due to insufficient diagonal cells.\n    \n    Case 3: n = 5, m = 5, k = 1, field = ['.....', '.*.*.', '..*..', '.*.*.', '.....']\n    Expected output: YES\n    Explanation: The pattern can be formed by ticks of size 1 centered at (2,2), (2,4), (4,2), and (4,4).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    The code should ensure that for each potential tick center, the diagonals are checked for sufficient cells to form a tick of the required size.\n    ```python\n    def can_form_tick(field, n, m, k):\n        for i in range(k, n):\n            for j in range(k, m):\n                if field[i][j] == '*':\n                    can_form = True\n                    for d in range(1, k + 1):\n                        if i - d < 0 or", "Round_0": {"code": "def can_form_tick(field, n, m, k):\n    # Create a copy of the field to mark cells covered by ticks\n    covered = [[False] * m for _ in range(n)]\n    \n    # Iterate over each cell to find potential tick centers\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Check if a tick of size at least k can be formed\n                max_d = 0\n                while True:\n                    d = max_d + 1\n                    if i - d < 0 or j - d < 0 or j + d >= m:\n                        break\n                    if field[i - d][j - d] == '*' and field[i - d][j + d] == '*':\n                        max_d = d\n                    else:\n                        break\n                \n                # If a valid tick of size at least k is found, mark the cells\n                if max_d >= k:\n                    for h in range(max_d + 1):\n                        covered[i - h][j - h] = True\n                        covered[i - h][j + h] = True\n    \n    # Compare the covered field with the original field\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not covered[i][j]:\n                return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        field = [data[index + i + 1] for i in range(n)]\n        index += n + 1\n        \n        if can_form_tick(field, n, m, k):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case, including the dimensions of the field and the minimum tick size.\",\n      \"output\": \"A list of test cases, where each test case contains the dimensions n, m, k, and the field as a list of strings.\"\n    },\n    {\n      \"description\": \"For each test case, identify all potential tick centers by iterating over each cell in the field.\",\n      \"output\": \"A list of potential tick centers for each test case.\"\n    },\n    {\n      \"description\": \"For each potential tick center, determine the maximum possible tick size that can be drawn without violating the field boundaries or the minimum tick size k.\",\n      \"output\": \"A list of valid ticks for each test case, where each tick is represented by its center and size.\"\n    },\n    {\n      \"description\": \"Simulate the drawing of all valid ticks on a blank field of the same dimensions and compare the result with the given field.\",\n      \"output\": \"A boolean value for each test case indicating whether the given field can be obtained by drawing the identified ticks.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the input data and parse it into a structured format.\",\n    \"For each test case, iterate over each cell in the field to identify potential tick centers.\",\n    \"For each potential tick center, calculate the maximum tick size that can be drawn, ensuring it meets the minimum size requirement.\",\n    \"Simulate the drawing of all valid ticks on a blank field and compare the result with the given field.\",\n    \"Output 'YES' if the simulated field matches the given field, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick': A symmetrical pattern of black cells centered at a specific cell, extending diagonally in both directions.\n    'size d': The number of cells diagonally painted from the center cell, resulting in a total of 2d + 1 black cells.\n    'symmetry': The pattern is symmetrical around the center cell, ensuring equal extension in both diagonal directions.\n\n# [phrase showing quantity relationship]\n    'd > 0': Indicates that the size of the tick must be greater than zero, meaning no tick can be of size zero.\n    'd \u2265 k': Specifies that the size of each tick must be at least k, meaning the tick size must be greater than or equal to k.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially, as each step builds upon the previous one. However, the simulation of drawing ticks and comparison with the given field can be done simultaneously for efficiency.\n\n# [edge case]\n    Case 1: A field with no '*' characters at all, e.g., 3x3 field with all '.'.\n    Expected output: YES\n    Explanation: Since there are no '*' characters, no ticks are needed, and the field can be considered as obtained by drawing zero ticks.\n\n    Case 2: A field with '*' characters only in the corners, e.g., 3x3 field with '*' at (1,1), (1,3), (3,1), (3,3).\n    Expected output: NO\n    Explanation: The '*' characters cannot form valid ticks of size k or greater due to their isolated positions.\n\n    Case 3: A field with a single '*' character, e.g., 3x3 field with '*' at (2,2).\n    Expected output: NO\n    Explanation: A single '*' cannot form a tick of size k or greater.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def handle_edge_cases(field, n, m, k):\n        # Check if the field is empty (all '.')\n        if all(cell == '.' for row in field for cell in row):\n            return True\n        \n        # Check if any '*' can form a valid tick\n        for i in range(n):\n            for j in range(m):\n                if field[i][j] == '*':\n                    # Check if it can be a center of a tick of", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Create a copy of the field to mark the cells that are part of valid ticks\n    marked = [[False] * m for _ in range(n)]\n\n    # Iterate from bottom to top to ensure we can check for valid ticks\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Determine the maximum size of the tick with center at (i, j)\n                d = 0\n                while (i - d >= 0 and j - d >= 0 and j + d < m and\n                       field[i - d][j - d] == '*' and field[i - d][j + d] == '*'):\n                    d += 1\n                d -= 1  # Adjust because we incremented one extra time\n\n                # If the tick size is at least k, mark the cells\n                if d >= k:\n                    for h in range(d + 1):\n                        marked[i - h][j - h] = True\n                        marked[i - h][j + h] = True\n\n    # Check if all '*' in the field are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not marked[i][j]:\n                return False\n    return True\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        field = data[index + 1:index + 1 + n]\n        index += 1 + n\n\n        if can_form_ticks(n, m, k, field):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases, field dimensions, minimum tick size, and field patterns.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read integers n, m, and k representing the field dimensions and minimum tick size.\",\n        \"Read the next n lines to capture the field pattern as a list of strings.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a tick of size d >= k can be drawn for each test case.\",\n      \"steps\": [\n        \"For each test case, iterate over each cell in the field.\",\n        \"Check if the cell can be the center of a tick of size d >= k.\",\n        \"Verify the symmetry of the tick by checking the top-left and top-right diagonals.\",\n        \"Ensure all required cells for the tick are painted black ('*').\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If the field can be obtained by drawing ticks of size d >= k, output 'YES'.\",\n        \"Otherwise, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract test cases and field details.\",\n    \"For each test case, analyze the field to determine if it can be formed by ticks of size d >= k.\",\n    \"Iterate over each cell to check potential tick centers and validate tick formation.\",\n    \"Output 'YES' or 'NO' based on the possibility of forming the field with valid ticks.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tick': A tick is a pattern of black cells centered at a specific cell, extending diagonally in both top-left and top-right directions. The size of the tick determines how many cells are painted diagonally from the center.\n    'symmetry': The tick pattern is symmetrical, meaning the number of cells painted diagonally to the left and right of the center is equal.\n\n# [phrase showing quantity relationship]\n    'at least': The size of each tick must be greater than or equal to k, meaning d >= k.\n    '2d + 1': This indicates the total number of cells painted for a tick of size d, including the center cell.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for checking if a cell can be the center of a tick and verifying the symmetry should be implemented simultaneously. This involves checking both diagonals from the center cell in one code block to ensure the tick can be formed.\n\n# [edge case]\n    Case 1: A field with no '*' characters at all, e.g., a field of size 3x3 with all '.'.\n    Expected output: YES\n    Explanation: Since there are no '*' characters, no ticks are needed, and the field can be considered as having been formed without any ticks.\n\n    Case 2: A field with '*' characters only in the corners, e.g., a 3x3 field with '*' at (1,1), (1,3), (3,1), and (3,3).\n    Expected output: NO\n    Explanation: None of these '*' can be the center of a tick of size k >= 1 because they do not have enough surrounding cells to form a tick.\n\n    Case 3: A field with a single '*' in the center of a 3x3 field, e.g., '*' at (2,2).\n    Expected output: NO\n    Explanation: A single '*' cannot form a tick of size k >= 1 as it lacks the required surrounding cells.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where no ticks are needed or where isolated '*' cannot form valid ticks.\n    ```python\n    def can_form_ticks(n, m, k, field):\n        # Check if the field is empty (all '.')\n        if all(row == '.' * m for row in field):\n            return 'YES'\n        \n        # Iterate over each cell to check potential tick", "Round_0": {"code": "def can_form_ticks(n, m, k, field):\n    # Check if the field is empty (all '.')\n    if all(row == '.' * m for row in field):\n        return 'YES'\n    \n    # Create a copy of the field to mark visited cells\n    visited = [[False] * m for _ in range(n)]\n    \n    # Function to check if a tick of size d can be centered at (i, j)\n    def can_be_center(i, j, d):\n        for h in range(d + 1):\n            if i - h < 0 or j - h < 0 or j + h >= m:\n                return False\n            if field[i - h][j - h] != '*' or field[i - h][j + h] != '*':\n                return False\n        return True\n    \n    # Mark cells that can be part of a tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                # Find the maximum size of tick that can be centered at (i, j)\n                d = 0\n                while can_be_center(i, j, d):\n                    d += 1\n                d -= 1\n                \n                # If the tick size is at least k, mark the cells as visited\n                if d >= k:\n                    for h in range(d + 1):\n                        visited[i - h][j - h] = True\n                        visited[i - h][j + h] = True\n    \n    # Check if all '*' cells are part of a valid tick\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*' and not visited[i][j]:\n                return 'NO'\n    \n    return 'YES'\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        n, m, k = map(int, data[index].split())\n        index += 1\n        field = [data[index + i] for i in range(n)]\n        index += n\n        \n        result = can_form_ticks(n, m, k, field)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 168, "prompt": "Casimir has a rectangular piece of paper with a checkered field of size n \u00d7 m. Initially, all cells of the field are white.\n\nLet us denote the cell with coordinates i vertically and j horizontally by (i, j), where the upper left cell is (1, 1) and the lower right cell is (n, m). Casimir draws ticks of different sizes on the field. A tick of size d (d > 0) with its center in cell (i, j) is drawn as follows: \n\n1. First, the center cell (i, j) is painted black. \n2. Then exactly d cells on the top-left diagonally to the center and exactly d cells on the top-right diagonally to the center are also painted black. The cells are painted in such a way that it creates a symmetrical pattern. There is a certain symmetry involved in the pattern of how the cells are painted. \n3. That is all the cells with coordinates (i - h, j \u00b1 h) for all h between 0 and d are painted; in particular, a tick consists of 2d + 1 black cells. \n\nAn already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3.\n\n<image>\n\nYou are given a description of a checkered field of size n \u00d7 m. Casimir claims that this field came about after he drew some (possibly 0) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k (that is, d \u2265 k for all the ticks).\n\nDetermine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes d \u2265 k or not.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number test cases.\n\nThe following lines contain the descriptions of the test cases. \n\nThe first line of the test case description contains the integers n, m, and k (1 \u2264 k \u2264 n \u2264 10; 1 \u2264 m \u2264 19) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being '.' if the corresponding cell is not yet painted or '*' otherwise.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n8\n2 3 1\n*.*\n...\n4 9 2\n*.*.*...*\n.*.*...*.\n..*.*.*..\n.....*...\n4 4 1\n*.*.\n****\n.**.\n....\n5 5 1\n.....\n*...*\n.*.*.\n..*.*\n...*.\n5 5 2\n.....\n*...*\n.*.*.\n..*.*\n...*.\n4 7 1\n*.....*\n.....*.\n..*.*..\n...*...\n3 3 1\n***\n***\n***\n3 5 1\n*...*\n.***.\n.**..\n\n\nOutput\n\n\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n\nNote\n\nThe first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don't exist.\n\nThe second sample test case is already described in the statement (check the picture in the statement). This field can be obtained by drawing ticks of sizes 2 and 3, as shown in the figure.\n\nThe field in the third sample test case corresponds to three ticks of size 1. Their center cells are marked with \\color{blue}{blue}, \\color{red}{red} and \\color{green}{green} colors: *.*.  \n---  \n*\\color{blue}{*}**  \n.\\color{green}{*}\\color{red}{*}.  \n....  \n  \nThe field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2. Their vertices are marked below with \\color{blue}{blue} and \\color{red}{red} colors respectively: .....  \n---  \n*...*  \n.*.*.  \n..\\color{red}{*}.*  \n...\\color{blue}{*}.  \n  \nThe field in the fifth sample test case can not be obtained because k = 2, and the last asterisk in the fourth row from the top with coordinates (4, 5) can only be a part of a tick of size 1.\n\nThe field in the sixth sample test case can not be obtained because the top left asterisk (1, 1) can't be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap (a point, '.') in (2, 2).\n\nIn the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates (1, 2) (second cell in the first row), (3, 1) and (3, 3) (leftmost and rightmost cells in the bottom) can not be parts of any ticks.", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 126}
