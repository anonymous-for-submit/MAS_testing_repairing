{"name": "1580_C. Train Maintenance", "description": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "tags": ["brute force", "data structures", "implementation"], "difficulty": 9, "id": 1580, "sample_io": [{"input": "3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "test_list": [{"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "3 4\n10 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "3 4\n23 15\n14 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n2 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n5\n4\n3\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n2\n3\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 2\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n"]}, {"input": "20 7\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n4 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n3 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n"]}, {"input": "3 2\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n2 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n3\n4\n4\n4\n4\n5\n5\n4\n3\n4\n6\n8\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 2\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 6\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n6\n5\n6\n7\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n1 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n14 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n4\n3\n4\n7\n8\n"]}, {"input": "3 4\n16 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n10 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n10 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 1\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n13 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n467159628 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 0\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n13 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n369260158 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 16\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n23 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n2 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000101 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 7\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n16 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n5 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10001011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1166046831 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n26 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1425917046 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 11\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 1\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 8\n12 25\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1011185365 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n12 15\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 1\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n9 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 18\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n22 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 0\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 173113793\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n3 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 21\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n9 6\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 38795044\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n4 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10010011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 4\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n4 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 29\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 13\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n3 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n10 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n5 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "3 4\n16 21\n10 17\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n4 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n3 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 0\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n0 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 2\n1 1\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 4\n1 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n2 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n0 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "5 2\n1 2\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 13\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n529113291 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 7\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n292159474 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n16 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 0\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 -1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n0 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "task_id": "codecontest/22", "repair_prompt": ["Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance. Make sure to account for all transitions between working and maintenance periods accurately in your calculations. Consider edge cases where trains might have overlapping maintenance periods or synchronized cycles.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains. Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance. Make sure to account for all transitions between working and maintenance periods accurately in your calculations. Consider edge cases where trains might have overlapping maintenance periods or synchronized cycles.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering, thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment; in the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance. Make sure to account for all transitions between working and maintenance periods accurately in your calculations. Consider edge cases where trains might have overlapping maintenance periods or synchronized cycles.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    cycles = []\n    for _ in range(n):\n        x = int(data[index])\n        index += 1\n        y = int(data[index])\n        index += 1\n        cycles.append((x, y))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model\n    train_state = [None] * n\n    # Number of trains in maintenance each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x, y = cycles[k]\n            train_state[k] = {'days_in_cycle': 0, 'x': x, 'y': y}\n        \n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # Update the cycle position of all active trains\n        current_maintenance_count = 0\n        for state in train_state:\n            if state is not None:\n                state['days_in_cycle'] += 1\n                if state['days_in_cycle'] > state['x'] + state['y']:\n                    state['days_in_cycle'] = 1\n                \n                if state['x'] < state['days_in_cycle'] <= state['x'] + state['y']:\n                    current_maintenance_count += 1\n        \n        maintenance_count[day] = current_maintenance_count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "completions": ["def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    # Read train model cycles\n    cycles = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        cycles.append((x_i, y_i))\n        index += 2\n    \n    # Read operations\n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of trains\n    train_state = [None] * n  # None means no train of that model is present\n    \n    # Result for each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = cycles[k]\n            train_state[k] = {'cycle': 'working', 'days_left': x_i}\n        \n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # Count trains in maintenance\n        maintenance_count = 0\n        for state in train_state:\n            if state is not None:\n                if state['cycle'] == 'maintenance':\n                    maintenance_count += 1\n                \n                # Update the cycle\n                state['days_left'] -= 1\n                if state['days_left'] == 0:\n                    if state['cycle'] == 'working':\n                        state['cycle'] = 'maintenance'\n                        state['days_left'] = cycles[k][1]\n                    else:\n                        state['cycle'] = 'working'\n                        state['days_left'] = cycles[k][0]\n        \n        result.append(maintenance_count)\n    \n    # Print results\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def calculate_maintenance_days(n, m, train_periods, operations):\n    # Initialize the state of each train model\n    train_states = [None] * (n + 1)  # None means no train of that model is present\n\n    # Result list to store the number of trains in maintenance for each day\n    maintenance_count = []\n\n    # Iterate through each day's operations\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_periods[k - 1]\n\n        if op == 1:  # Add train of model k\n            # Initialize the train state with the current day and cycle\n            train_states[k] = {'start_day': day, 'cycle': 'working', 'days_in_cycle': 0}\n        elif op == 2:  # Remove train of model k\n            # Remove the train from the state\n            train_states[k] = None\n\n        # Calculate the number of trains in maintenance for the current day\n        maintenance_today = 0\n        for state in train_states:\n            if state is not None:\n                # Update the cycle days\n                state['days_in_cycle'] += 1\n\n                # Check if the train is in maintenance\n                if state['cycle'] == 'maintenance':\n                    maintenance_today += 1\n\n                # Transition between cycles\n                if state['cycle'] == 'working' and state['days_in_cycle'] == x_i:\n                    state['cycle'] = 'maintenance'\n                    state['days_in_cycle'] = 0\n                elif state['cycle'] == 'maintenance' and state['days_in_cycle'] == y_i:\n                    state['cycle'] = 'working'\n                    state['days_in_cycle'] = 0\n\n        # Append the count for the current day\n        maintenance_count.append(maintenance_today)\n\n    return maintenance_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Parse the input\n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n\n    train_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_periods.append((x_i, y_i))\n        index += 2\n\n    operations = []\n    for _ in range(m):\n        op = int\nmain()", "def calculate_maintenance_days(n, m, cycles, operations):\n    # Initialize the state of each train model\n    train_states = [None] * (n + 1)  # None means no train of that model is present\n    maintenance_count = [0] * m\n\n    for day in range(m):\n        op, k = operations[day]\n        x, y = cycles[k - 1]\n\n        if op == 1:  # Add train of model k\n            train_states[k] = (day, x, y)  # Store the start day and cycles\n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n\n        # Calculate maintenance count for the current day\n        count = 0\n        for model in range(1, n + 1):\n            if train_states[model] is not None:\n                start_day, x, y = train_states[model]\n                # Calculate the number of days since the train was added\n                days_since_added = day - start_day\n                # Calculate the current cycle position\n                cycle_length = x + y\n                cycle_position = days_since_added % cycle_length\n                # Check if the train is in maintenance\n                if cycle_position >= x:\n                    count += 1\n\n        maintenance_count[day] = count\n\n    return maintenance_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n\n    cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        cycles.append((x_i, y_i))\n        index += 2\n\n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1])\n        operations.append((op, k))\n        index += 2\n\n    maintenance_days = calculate_maintenance_days(n, m, cycles, operations)\n\n    for count in maintenance_days:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def calculate_maintenance_days(n, m, cycles, operations):\n    # Initialize data structures\n    train_states = {}  # Dictionary to track train states\n    maintenance_count = [0] * m  # List to store maintenance count for each day\n\n    # Process each operation\n    for day in range(m):\n        op, k = operations[day]\n        x, y = cycles[k - 1]  # Get the work and maintenance cycle for model k\n\n        if op == 1:  # Add train of model k\n            # Initialize the train state\n            train_states[k] = {'state': 'working', 'remaining': x}\n        elif op == 2:  # Remove train of model k\n            # Remove the train from the states\n            del train_states[k]\n\n        # Update train states and count maintenance trains\n        maintenance_trains = 0\n        for model in train_states:\n            state_info = train_states[model]\n            if state_info['state'] == 'maintenance':\n                maintenance_trains += 1\n\n            # Update the remaining days in the current cycle\n            state_info['remaining'] -= 1\n            if state_info['remaining'] == 0:\n                # Switch state and reset remaining days\n                if state_info['state'] == 'working':\n                    state_info['state'] = 'maintenance'\n                    state_info['remaining'] = y\n                else:\n                    state_info['state'] = 'working'\n                    state_info['remaining'] = x\n\n        # Store the count of maintenance trains for the current day\n        maintenance_count[day] = maintenance_trains\n\n    # Output the maintenance count for each day\n    for count in maintenance_count:\n        print(count)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nn = int(data[0])\nm = int(data[1])\ncycles = []\nindex = 2\nfor _ in range(n):\n    x_i = int(data[index])\n    y_i = int(data[index + 1])\n    cycles.append((x_i, y_i))\n    index += 2\n\noperations = []\nfor _ in range(m):\n    op = int(data[index])\n    k = int(data[index + 1])\n    operations.append((op, k))\n    index += 2\n\n# Calculate and print maintenance days\ncalculate_maintenance_days(n, m, cycles, operations)\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model: None if not present, otherwise (day_added, cycle_position)\n    train_state = [None] * n\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            train_state[k] = (day, 0)  # Start at cycle position 0 (working)\n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                day_added, cycle_position = train_state[i]\n                x_i, y_i = train_cycles[i]\n                \n                # Calculate the number of days since the train was added\n                days_since_added = day - day_added\n                \n                # Calculate the current cycle position\n                total_cycle_length = x_i + y_i\n                current_cycle_day = days_since_added % total_cycle_length\n                \n                # Check if the train is in maintenance\n                if current_cycle_day >= x_i:\n                    count += 1\n        \n        maintenance_count[day] = count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model\n    train_state = [None] * n  # None means no train of this model is present\n    \n    # Result for each day\n    result = []\n    \n    # Simulate each day\n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_state[k] = (0, x_i, y_i)  # (current_day_in_cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_state[k] = None\n        \n        # Calculate number of trains in maintenance\n        maintenance_count = 0\n        for state in train_state:\n            if state is not None:\n                current_day_in_cycle, x_i, y_i = state\n                # Check if the train is in maintenance\n                if current_day_in_cycle >= x_i:\n                    maintenance_count += 1\n        \n        result.append(maintenance_count)\n        \n        # Update the state of each train for the next day\n        for i in range(n):\n            if train_state[i] is not None:\n                current_day_in_cycle, x_i, y_i = train_state[i]\n                total_cycle_length = x_i + y_i\n                current_day_in_cycle = (current_day_in_cycle + 1) % total_cycle_length\n                train_state[i] = (current_day_in_cycle, x_i, y_i)\n    \n    # Print the result for each day\n    for count in result:\n        print(count)\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    train_cycles = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State tracking for each train model\n    train_states = [None] * n  # None means no train of this model is active\n    \n    maintenance_counts = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_states[k] = {'active': True, 'cycle_day': 0, 'x': x_i, 'y': y_i}\n        \n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Calculate number of trains in maintenance\n        maintenance_count = 0\n        for state in train_states:\n            if state and state['active']:\n                cycle_length = state['x'] + state['y']\n                current_cycle_day = state['cycle_day'] % cycle_length\n                if current_cycle_day >= state['x']:\n                    maintenance_count += 1\n        \n        maintenance_counts.append(maintenance_count)\n        \n        # Update cycle days for active trains\n        for state in train_states:\n            if state and state['active']:\n                state['cycle_day'] += 1\n    \n    for count in maintenance_counts:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of each train model\n    train_state = [None] * n  # None means not present, otherwise (days_left, in_maintenance)\n    \n    # Result for each day\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        # Update the state of all trains\n        maintenance_count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                days_left, in_maintenance = train_state[i]\n                if days_left == 1:\n                    # Transition to the next state\n                    if in_maintenance:\n                        # Move to working state\n                        train_state[i] = (train_cycles[i][0], False)\n                    else:\n                        # Move to maintenance state\n                        train_state[i] = (train_cycles[i][1], True)\n                else:\n                    # Decrease the days left in the current state\n                    train_state[i] = (days_left - 1, in_maintenance)\n                \n                # Count maintenance trains\n                if train_state[i][1]:\n                    maintenance_count += 1\n        \n        # Perform the operation for the current day\n        if op == 1:\n            # Add train of model k\n            train_state[k] = (train_cycles[k][0], False)  # Start in working state\n        elif op == 2:\n            # Remove train of model k\n            train_state[k] = None\n        \n        # Record the result for the current day\n        results.append(maintenance_count)\n    \n    # Output the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def calculate_maintenance_days(n, m, train_cycles, operations):\n    # Initialize the state of each train model\n    train_state = {}\n    maintenance_count = [0] * m\n\n    for day in range(m):\n        op, k = operations[day]\n        x, y = train_cycles[k - 1]\n\n        if op == 1:  # Add train of model k\n            train_state[k] = {'cycle': 'working', 'remaining_days': x}\n        elif op == 2:  # Remove train of model k\n            del train_state[k]\n\n        # Update the state of each train model\n        current_maintenance_count = 0\n        for model in list(train_state.keys()):\n            state = train_state[model]\n            state['remaining_days'] -= 1\n\n            if state['remaining_days'] == 0:\n                if state['cycle'] == 'working':\n                    state['cycle'] = 'maintenance'\n                    state['remaining_days'] = y\n                else:\n                    state['cycle'] = 'working'\n                    state['remaining_days'] = x\n\n            if state['cycle'] == 'maintenance':\n                current_maintenance_count += 1\n\n        maintenance_count[day] = current_maintenance_count\n\n    return maintenance_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    m = int(data[1])\n\n    train_cycles = []\n    index = 2\n    for _ in range(n):\n        x = int(data[index])\n        y = int(data[index + 1])\n        train_cycles.append((x, y))\n        index += 2\n\n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1])\n        operations.append((op, k))\n        index += 2\n\n    result = calculate_maintenance_days(n, m, train_cycles, operations)\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    cycles = []\n    for _ in range(n):\n        x = int(data[index])\n        index += 1\n        y = int(data[index])\n        index += 1\n        cycles.append((x, y))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model\n    train_state = [None] * n\n    # Number of trains in maintenance each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x, y = cycles[k]\n            train_state[k] = {'days_in_cycle': 0, 'x': x, 'y': y}\n        \n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # Update the cycle position of all active trains\n        current_maintenance_count = 0\n        for state in train_state:\n            if state is not None:\n                state['days_in_cycle'] += 1\n                if state['days_in_cycle'] > state['x'] + state['y']:\n                    state['days_in_cycle'] = 1\n                \n                if state['x'] < state['days_in_cycle'] <= state['x'] + state['y']:\n                    current_maintenance_count += 1\n        \n        maintenance_count[day] = current_maintenance_count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models' cycles and daily operations.\"\n    },\n    {\n      \"description\": \"Implement a data structure to track the state of each train model, including whether it is currently added, its current cycle position, and whether it is in maintenance or working.\",\n      \"output\": \"A data structure that can efficiently update and query the state of each train model.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the current cycle position of each train.\",\n      \"output\": \"An updated state of all train models for each day.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of all train models.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, working and maintenance periods for each train model, and daily operations.\",\n    \"Initialize a data structure to track the state of each train model, including its cycle position and whether it is in maintenance or working.\",\n    \"Iterate over each day, performing the following steps:\",\n    \"  - If the operation is to add a train, update the data structure to reflect the train's addition and set its initial cycle position.\",\n    \"  - If the operation is to remove a train, update the data structure to reflect the train's removal.\",\n    \"  - Update the cycle position of all active trains to determine if they are in maintenance or working.\",\n    \"Calculate the number of trains in maintenance for the current day based on the updated state of all train models.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': Refers to different types of trains, each with unique working and maintenance cycles.\n    'maintenance': The period during which a train is not operational and is being serviced.\n    Explanation: The requirement involves tracking the status of train models, specifically focusing on their maintenance periods.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    'x_i days', 'y_i days': Specifies the duration of working and maintenance periods for each train model.\n    Explanation: These phrases define the constraints and cycles for each train model, which are crucial for calculating maintenance periods.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the cycle position and determining maintenance status should be implemented simultaneously.\n    \"Update the cycle position of all active trains to determine if they are in maintenance or working.\"\n    This can be done by iterating over the active trains and updating their cycle positions in a single loop.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A train is added and immediately starts working, so no train is in maintenance on the first day.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           1 2\n    Output: 0\n            0\n    Explanation: Both trains are added and start working immediately, so no train is in maintenance on either day.\n\n    Input: 1 3\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: A train is added, works for one day, and is removed before entering maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that the cycle position is correctly initialized and updated for each train model, and that maintenance status is accurately determined based on the cycle position.\n    Example code for handling cycle updates:\n    ```python\n    def update_cycle(train_state, x, y):\n        if train_state['days_in_cycle'] < x:\n            train_state['status'] = 'working'\n        elif train_state['days_in_cycle']", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    cycles = []\n    for _ in range(n):\n        x = int(data[index])\n        index += 1\n        y = int(data[index])\n        index += 1\n        cycles.append((x, y))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model\n    train_state = [None] * n\n    # Number of trains in maintenance each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x, y = cycles[k]\n            train_state[k] = {'days_in_cycle': 0, 'x': x, 'y': y}\n        \n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # Update the cycle position of all active trains\n        current_maintenance_count = 0\n        for state in train_state:\n            if state is not None:\n                state['days_in_cycle'] += 1\n                if state['days_in_cycle'] > state['x'] + state['y']:\n                    state['days_in_cycle'] = 1\n                \n                if state['x'] < state['days_in_cycle'] <= state['x'] + state['y']:\n                    current_maintenance_count += 1\n        \n        maintenance_count[day] = current_maintenance_count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models with their respective working and maintenance periods, and a list of daily operations.\"\n    },\n    {\n      \"description\": \"Implement a data structure to track the state of each train model, including whether it is currently added, and if so, its current cycle (working or maintenance) and the remaining days in that cycle.\",\n      \"output\": \"A data structure that can efficiently update and query the state of each train model.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the passage of time.\",\n      \"output\": \"An updated state of the trains for each day, reflecting the addition or removal of trains and the progression of their cycles.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of all trains.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, working and maintenance periods for each model, and the list of operations for each day.\",\n    \"Initialize a data structure to track the state of each train model, including its current cycle and remaining days in that cycle.\",\n    \"Iterate over each day, processing the operation for that day (add or remove a train) and updating the state of all trains to reflect the passage of one day.\",\n    \"For each day, calculate the number of trains currently in maintenance by checking the state of each train model.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models', 'working and maintenance periods', 'operations (add or remove)'\n    Explanation: The requirement involves managing different train models, each with specific working and maintenance cycles. The operations involve adding or removing trains, which affects their state and the count of trains in maintenance.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any time.\n    'x_i days', 'y_i days': These specify the duration of working and maintenance periods for each train model.\n    '1 \u2264 n,m \u2264 2 \u22c5 10^5', '1 \u2264 x_i,y_i \u2264 10^9': These constraints define the limits for the number of models, days, and the duration of cycles.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but the simulation of each day's operations (step 3) and the calculation of trains in maintenance (step 4) should be closely integrated. This means that after updating the state of trains for a day, the calculation of maintenance trains should immediately follow.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n1 1\\nOutput: 0\n       Explanation: Only one train is added and it starts working, so no train is in maintenance.\n    2. Input: 1 2\\n1 1\\n1 1\\n2 1\\nOutput: 0\\n0\n       Explanation: A train is added and then removed the next day, so no train is in maintenance on either day.\n    3. Input: 2 3\\n1 1\\n1 1\\n1 1\\n1 2\\n2 1\\nOutput: 0\\n0\\n0\n       Explanation: Two trains are added, but both start working, and one is removed before entering maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed on the same day or where the cycles are very short.\n    ```python\n    # Example code to handle edge cases\n    if op == 1:  # Add train\n        if train not in department:\n            department[train] = {'cycle': 'working', 'days_left': x_i}\n    elif op == 2: ", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    # Read train model cycles\n    cycles = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        cycles.append((x_i, y_i))\n        index += 2\n    \n    # Read operations\n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of trains\n    train_state = [None] * n  # None means no train of that model is present\n    \n    # Result for each day\n    result = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = cycles[k]\n            train_state[k] = {'cycle': 'working', 'days_left': x_i}\n        \n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # Count trains in maintenance\n        maintenance_count = 0\n        for state in train_state:\n            if state is not None:\n                if state['cycle'] == 'maintenance':\n                    maintenance_count += 1\n                \n                # Update the cycle\n                state['days_left'] -= 1\n                if state['days_left'] == 0:\n                    if state['cycle'] == 'working':\n                        state['cycle'] = 'maintenance'\n                        state['days_left'] = cycles[k][1]\n                    else:\n                        state['cycle'] = 'working'\n                        state['days_left'] = cycles[k][0]\n        \n        result.append(maintenance_count)\n    \n    # Print results\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get x_i and y_i for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Track the state of each train model (whether it is added or removed) and its current cycle (working or maintenance).\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the state of each train model.\",\n        \"For each operation, update the state of the train model accordingly.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of all train models.\",\n      \"steps\": [\n        \"For each day, iterate through all train models to check their current cycle.\",\n        \"Count the number of trains in maintenance and store the result for that day.\"\n      ]\n    },\n    {\n      \"description\": \"Handle edge cases such as overlapping maintenance periods and synchronized cycles.\",\n      \"steps\": [\n        \"Ensure that the calculation accounts for trains that have overlapping maintenance periods.\",\n        \"Consider synchronized cycles where multiple trains might enter maintenance simultaneously.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train states and cycles.\",\n    \"Iterate through each day's operations to update train states.\",\n    \"Calculate and output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the context of the requirement, maintenance refers to the period during which a train is not operational and is being serviced. The task is to calculate how many trains are in this state each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any given time.\n    'x_i days', 'y_i days': These phrases indicate the duration of the working and maintenance periods for each train model. In code, these can be implemented using counters or timers to track the days.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the state of train models and calculating the number of trains in maintenance should be considered simultaneously. Specifically, when updating the state of a train model, the current cycle (working or maintenance) should be checked and updated in the same code block to ensure accurate tracking.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it is in working state on the first day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           1 2\n    Output: 0\n            0\n    Explanation: Both trains are added on consecutive days, but both are in working state on their respective first days.\n\n    Input: 3 3\n           1 1\n           1 1\n           1 1\n           1 1\n           1 2\n           1 3\n    Output: 0\n            0\n            0\n    Explanation: All trains are added on consecutive days, but all are in working state on their respective first days.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that the transition between working and maintenance is accurately tracked, especially when trains are added or removed. This can be done by maintaining a cycle counter for each train model and updating it based on the operation (add/remove) and the current day.\n\n    Example code snippet:\n    ```python\n    def update_train_state(train_states, op, k, x_i, y_i, current_day):\n       ", "Round_0": {"code": "def calculate_maintenance_days(n, m, train_periods, operations):\n    # Initialize the state of each train model\n    train_states = [None] * (n + 1)  # None means no train of that model is present\n\n    # Result list to store the number of trains in maintenance for each day\n    maintenance_count = []\n\n    # Iterate through each day's operations\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_periods[k - 1]\n\n        if op == 1:  # Add train of model k\n            # Initialize the train state with the current day and cycle\n            train_states[k] = {'start_day': day, 'cycle': 'working', 'days_in_cycle': 0}\n        elif op == 2:  # Remove train of model k\n            # Remove the train from the state\n            train_states[k] = None\n\n        # Calculate the number of trains in maintenance for the current day\n        maintenance_today = 0\n        for state in train_states:\n            if state is not None:\n                # Update the cycle days\n                state['days_in_cycle'] += 1\n\n                # Check if the train is in maintenance\n                if state['cycle'] == 'maintenance':\n                    maintenance_today += 1\n\n                # Transition between cycles\n                if state['cycle'] == 'working' and state['days_in_cycle'] == x_i:\n                    state['cycle'] = 'maintenance'\n                    state['days_in_cycle'] = 0\n                elif state['cycle'] == 'maintenance' and state['days_in_cycle'] == y_i:\n                    state['cycle'] = 'working'\n                    state['days_in_cycle'] = 0\n\n        # Append the count for the current day\n        maintenance_count.append(maintenance_today)\n\n    return maintenance_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Parse the input\n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n\n    train_periods = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_periods.append((x_i, y_i))\n        index += 2\n\n    operations = []\n    for _ in range(m):\n        op = int", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), and the cycles (x_i, y_i) for each train model.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get x_i and y_i for each train model.\"\n      ]\n    },\n    {\n      \"description\": \"Track the state of each train model over the m days based on operations (add or remove).\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state (working or maintenance) of each train model.\",\n        \"Process each of the m operations to update the state of the train models.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, determine the current state of all train models.\",\n        \"Count the number of trains in maintenance and store the result for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"Print the stored results for each of the m days.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data.\",\n    \"Initialize data structures to track train states.\",\n    \"Iterate over each day's operations to update train states.\",\n    \"Calculate and store the number of trains in maintenance for each day.\",\n    \"Output the results for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': refers to different types of trains, each with unique maintenance and working cycles.\n    'maintenance': refers to the period when a train is not operational and is being serviced.\n    'working': refers to the period when a train is operational and running.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': means that there can be zero or one train of each model at any time.\n    'x_i days': refers to the number of days a train works before going into maintenance.\n    'y_i days': refers to the number of days a train is in maintenance before returning to work.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they build upon each other. However, within the subproblem of tracking the state of each train model, updating the state based on operations (add or remove) and determining the current state of all train models for maintenance count can be considered simultaneously in a loop for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: On the first day, a train is added and it is working, not in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: On the first day, a train is added and it is working. On the second day, the train is removed, so no train is in maintenance.\n\n    Input: 3 3\n           1 1\n           1 1\n           1 1\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: On the first day, a train is added and it is working. On the second day, another train is added and it is working. On the third day, the first train is removed, leaving the second train still working.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking train states and counting maintenance days will naturally handle these scenarios.\n\nNO", "Round_0": {"code": "def calculate_maintenance_days(n, m, cycles, operations):\n    # Initialize the state of each train model\n    train_states = [None] * (n + 1)  # None means no train of that model is present\n    maintenance_count = [0] * m\n\n    for day in range(m):\n        op, k = operations[day]\n        x, y = cycles[k - 1]\n\n        if op == 1:  # Add train of model k\n            train_states[k] = (day, x, y)  # Store the start day and cycles\n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n\n        # Calculate maintenance count for the current day\n        count = 0\n        for model in range(1, n + 1):\n            if train_states[model] is not None:\n                start_day, x, y = train_states[model]\n                # Calculate the number of days since the train was added\n                days_since_added = day - start_day\n                # Calculate the current cycle position\n                cycle_length = x + y\n                cycle_position = days_since_added % cycle_length\n                # Check if the train is in maintenance\n                if cycle_position >= x:\n                    count += 1\n\n        maintenance_count[day] = count\n\n    return maintenance_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n\n    cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        cycles.append((x_i, y_i))\n        index += 2\n\n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1])\n        operations.append((op, k))\n        index += 2\n\n    maintenance_days = calculate_maintenance_days(n, m, cycles, operations)\n\n    for count in maintenance_days:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models, number of days, and the cycles of work and maintenance for each train model.\",\n      \"steps\": [\n        \"Read the first line to get integers n (number of train models) and m (number of days).\",\n        \"Read the next n lines to get pairs of integers x_i and y_i for each train model, representing the work and maintenance cycles.\"\n      ]\n    },\n    {\n      \"description\": \"Track the state of each train model over the m days based on the operations provided.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state (working or maintenance) and the remaining days in the current cycle for each train model.\",\n        \"Process each of the m operations to update the state of the train models.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over the train models to count how many are in the maintenance state.\",\n        \"Output the count for each day.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize data structures to store train model cycles and current states.\",\n    \"Iterate over the m days, processing each operation to update train states.\",\n    \"For each day, calculate and output the number of trains in maintenance.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models', 'work and maintenance cycles', 'operations'\n    Explanation: The requirement involves managing different train models, each with specific work and maintenance cycles. Operations are performed daily to add or remove trains, affecting their state (working or maintenance).\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means there can be zero or one train of each model at any time.\n    'x_i days', 'y_i days': These specify the duration of work and maintenance cycles for each train model.\n    '1 \u2264 n,m \u2264 2 \u22c5 10^5', '1 \u2264 x_i,y_i \u2264 10^9': These are constraints on the number of models, days, and cycle durations.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but within the second subproblem, updating the state of train models and processing operations should be handled simultaneously. This involves checking the current state and updating it based on the operation (add or remove).\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n\n       Output: 0\n       Explanation: Only one train is added and it starts working, so no train is in maintenance.\n    2. Input: 1 2\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, so no train is in maintenance on either day.\n    3. Input: 2 3\\n1 1\\n1 1\\n1 1\\n1 2\\n2 1\\n\n       Output: 0\\n0\\n0\n       Explanation: Two trains are added on consecutive days, and one is removed on the third day. No train is in maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Ensure that when a train is added, it starts in the working state.\n    - When a train is removed, it should not be counted as in maintenance.\n    - Handle transitions between working and maintenance accurately.\n\n```python\n# Example code snippet to handle edge cases\ntrain_states = {}  # Dictionary to track train states\n\ndef update_train_state(op, k, x, y, current_day):\n    if op == 1:  #", "Round_0": {"code": "def calculate_maintenance_days(n, m, cycles, operations):\n    # Initialize data structures\n    train_states = {}  # Dictionary to track train states\n    maintenance_count = [0] * m  # List to store maintenance count for each day\n\n    # Process each operation\n    for day in range(m):\n        op, k = operations[day]\n        x, y = cycles[k - 1]  # Get the work and maintenance cycle for model k\n\n        if op == 1:  # Add train of model k\n            # Initialize the train state\n            train_states[k] = {'state': 'working', 'remaining': x}\n        elif op == 2:  # Remove train of model k\n            # Remove the train from the states\n            del train_states[k]\n\n        # Update train states and count maintenance trains\n        maintenance_trains = 0\n        for model in train_states:\n            state_info = train_states[model]\n            if state_info['state'] == 'maintenance':\n                maintenance_trains += 1\n\n            # Update the remaining days in the current cycle\n            state_info['remaining'] -= 1\n            if state_info['remaining'] == 0:\n                # Switch state and reset remaining days\n                if state_info['state'] == 'working':\n                    state_info['state'] = 'maintenance'\n                    state_info['remaining'] = y\n                else:\n                    state_info['state'] = 'working'\n                    state_info['remaining'] = x\n\n        # Store the count of maintenance trains for the current day\n        maintenance_count[day] = maintenance_trains\n\n    # Output the maintenance count for each day\n    for count in maintenance_count:\n        print(count)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nn = int(data[0])\nm = int(data[1])\ncycles = []\nindex = 2\nfor _ in range(n):\n    x_i = int(data[index])\n    y_i = int(data[index + 1])\n    cycles.append((x_i, y_i))\n    index += 2\n\noperations = []\nfor _ in range(m):\n    op = int(data[index])\n    k = int(data[index + 1])\n    operations.append((op, k))\n    index += 2\n\n# Calculate and print maintenance days\ncalculate_maintenance_days(n, m, cycles, operations)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_maintenance_days(n, m, cycles, operations):\n    # Initialize data structures\n    train_states = {}  # Dictionary to track train states\n    maintenance_count = [0] * m  # List to store maintenance count for each day\n\n    # Process each operation\n    for day in range(m):\n        op, k = operations[day]\n        x, y = cycles[k - 1]  # Get the work and maintenance cycle for model k\n\n        if op == 1:  # Add train of model k\n            # Initialize the train state\n            train_states[k] = {'state': 'working', 'remaining': x}\n        elif op == 2:  # Remove train of model k\n            # Remove the train from the states\n            del train_states[k]\n\n        # Update train states and count maintenance trains\n        maintenance_trains = 0\n        for model in train_states:\n            state_info = train_states[model]\n            if state_info['state'] == 'maintenance':\n                maintenance_trains += 1\n\n            # Update the remaining days in the current cycle\n            state_info['remaining'] -= 1\n            if state_info['remaining'] == 0:\n                # Switch state and reset remaining days\n                if state_info['state'] == 'working':\n                    state_info['state'] = 'maintenance'\n                    state_info['remaining'] = y\n                else:\n                    state_info['state'] = 'working'\n                    state_info['remaining'] = x\n\n        # Store the count of maintenance trains for the current day\n        maintenance_count[day] = maintenance_trains\n\n    # Output the maintenance count for each day\n    for count in maintenance_count:\n        print(count)\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\n# Parse input\nn = int(data[0])\nm = int(data[1])\ncycles = []\nindex = 2\nfor _ in range(n):\n    x_i = int(data[index])\n    y_i = int(data[index + 1])\n    cycles.append((x_i, y_i))\n    index += 2\n\noperations = []\nfor _ in range(m):\n    op = int(data[index])\n    k = int(data[index + 1])\n    operations.append((op, k))\n    index += 2\n\n# Calculate and print maintenance days\ncalculate_maintenance_days(n, m, cycles, operations)\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"steps\": [\n        \"Read the first line to get n and m.\",\n        \"Read the next n lines to get the working (x_i) and maintenance (y_i) periods for each train model.\",\n        \"Read the next m lines to get the operations (op, k) for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Simulate the addition and removal of trains over the m days and track their working and maintenance cycles.\",\n      \"steps\": [\n        \"Initialize a data structure to keep track of the current state of each train model (whether it is added or removed, and its current cycle position).\",\n        \"For each day, perform the operation specified (add or remove a train) and update the state of the train models accordingly.\"\n      ]\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, iterate over all train models to determine if they are in the maintenance period based on their current cycle position.\",\n        \"Count the number of trains in maintenance and store the result for each day.\"\n      ]\n    },\n    {\n      \"description\": \"Output the number of trains in maintenance for each day.\",\n      \"steps\": [\n        \"For each day, output the calculated number of trains in maintenance.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract necessary data about train models and daily operations.\",\n    \"Initialize data structures to track the state and cycle of each train model.\",\n    \"Iterate over each day, updating the state of train models based on the operations (add or remove).\",\n    \"For each day, calculate the number of trains in maintenance by checking their cycle positions.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models', 'working and maintenance cycles', 'operations (add or remove)'\n    Explanation: The requirement involves managing different train models, each with specific working and maintenance cycles. The operations involve adding or removing trains, which affects their cycle status.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means there can be zero or one train of each model at any time.\n    'x_i days', 'y_i days': These specify the duration of working and maintenance periods for each train model.\n    Implementation: Use variables to track the number of days a train is in a working or maintenance state.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but within each day, the operations of adding or removing trains and updating their cycle status should be handled simultaneously. This can be done using a loop that processes each day's operations and updates the state of all trains accordingly.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n\n       Output: 0\n       Explanation: Only one train is added and it starts working, so no train is in maintenance.\n    2. Input: 1 2\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, so no train is in maintenance on either day.\n    3. Input: 2 3\\n1 1\\n1 1\\n1 1\\n1 2\\n2 1\\n\n       Output: 0\\n0\\n0\n       Explanation: Two trains are added on consecutive days, but both start working, so no train is in maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed on the same day or have overlapping cycles.\n    ```python\n    # Example code to handle edge cases\n    def handle_edge_cases(trains, operations):\n        maintenance_count = [0] * len(operations)\n        train_states = {}\n        \n        for day, (op, k) in enumerate(operations):\n            if op == 1:  # Add train\n                train_states[k] = {'working': True, 'days': 0}\n            elif op == 2:  # Remove train\n                if k in", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model: None if not present, otherwise (day_added, cycle_position)\n    train_state = [None] * n\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            train_state[k] = (day, 0)  # Start at cycle position 0 (working)\n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # Calculate maintenance count for the current day\n        count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                day_added, cycle_position = train_state[i]\n                x_i, y_i = train_cycles[i]\n                \n                # Calculate the number of days since the train was added\n                days_since_added = day - day_added\n                \n                # Calculate the current cycle position\n                total_cycle_length = x_i + y_i\n                current_cycle_day = days_since_added % total_cycle_length\n                \n                # Check if the train is in maintenance\n                if current_cycle_day >= x_i:\n                    count += 1\n        \n        maintenance_count[day] = count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models and daily operations.\"\n    },\n    {\n      \"description\": \"Implement a data structure to track the state of each train model, including whether it is currently added, its current cycle position (working or maintenance), and the remaining days in the current cycle.\",\n      \"output\": \"A data structure that can efficiently update and query the state of each train model.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the current cycle of each train.\",\n      \"output\": \"An updated state of all train models for each day.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of all train models.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, working and maintenance periods for each train model, and the operations for each day.\",\n    \"Initialize a data structure to track the state of each train model, including its current cycle and whether it is added or removed.\",\n    \"Iterate over each day's operations:\",\n    \"  - If a train is added, update its state to reflect the start of its working cycle.\",\n    \"  - If a train is removed, update its state to reflect its removal and ensure it is not counted in maintenance.\",\n    \"  - For each train, update its cycle state (working or maintenance) based on the passage of time.\",\n    \"Calculate the number of trains in maintenance for the current day based on the updated states.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models', 'working and maintenance periods', 'operations'\n    Explanation: The requirement involves managing different train models, each with specific working and maintenance cycles. Operations include adding or removing trains, which affects their state and the count of trains in maintenance.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any time.\n    'x_i days', 'y_i days': These specify the duration of working and maintenance periods for each train model.\n    Implementation: Use variables to track the number of days a train is in its working or maintenance cycle.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the state of trains and calculating the number of trains in maintenance should be considered simultaneously. Specifically:\n    - \"If a train is added, update its state to reflect the start of its working cycle.\"\n    - \"If a train is removed, update its state to reflect its removal and ensure it is not counted in maintenance.\"\n    - \"For each train, update its cycle state (working or maintenance) based on the passage of time.\"\n    These steps can be implemented in a single loop that processes each day's operations and updates the state of all trains accordingly.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n1 1\\n\n       Output: 0\n       Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n    2. Input: 1 2\\n1 1\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\n       Explanation: The train is added and then removed the next day, never entering maintenance.\n    3. Input: 2 3\\n1 1\\n1 1\\n1 1\\n1 2\\n2 1\\n\n       Output: 0\\n0\\n0\n       Explanation: Two trains are added on consecutive days, but both are removed before entering maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains are added and removed without entering maintenance.\n    ```python\n    # Example code snippet to handle edge cases\n    def update_train_state(trains, operations):\n        for op, k in operations:\n            if op == 1:  #", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        index += 1\n        y_i = int(data[index])\n        index += 1\n        train_cycles.append((x_i, y_i))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1  # Convert to 0-based index\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model\n    train_state = [None] * n  # None means no train of this model is present\n    \n    # Result for each day\n    result = []\n    \n    # Simulate each day\n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_state[k] = (0, x_i, y_i)  # (current_day_in_cycle, x_i, y_i)\n        \n        elif op == 2:  # Remove train of model k\n            train_state[k] = None\n        \n        # Calculate number of trains in maintenance\n        maintenance_count = 0\n        for state in train_state:\n            if state is not None:\n                current_day_in_cycle, x_i, y_i = state\n                # Check if the train is in maintenance\n                if current_day_in_cycle >= x_i:\n                    maintenance_count += 1\n        \n        result.append(maintenance_count)\n        \n        # Update the state of each train for the next day\n        for i in range(n):\n            if train_state[i] is not None:\n                current_day_in_cycle, x_i, y_i = train_state[i]\n                total_cycle_length = x_i + y_i\n                current_day_in_cycle = (current_day_in_cycle + 1) % total_cycle_length\n                train_state[i] = (current_day_in_cycle, x_i, y_i)\n    \n    # Print the result for each day\n    for count in result:\n        print(count)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured data format containing train models with their respective working and maintenance periods, and a list of daily operations.\"\n    },\n    {\n      \"description\": \"Implement a mechanism to track the state of each train model (whether it is added or removed) and its current cycle (working or maintenance) for each day.\",\n      \"output\": \"A data structure that maintains the current state and cycle of each train model.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains and calculating the number of trains in maintenance.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    },\n    {\n      \"description\": \"Handle edge cases such as overlapping maintenance periods and synchronized cycles to ensure accurate maintenance counts.\",\n      \"output\": \"Correct maintenance counts even in complex scenarios.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, working and maintenance periods for each model, and daily operations.\",\n    \"Initialize a data structure to track the state and cycle of each train model.\",\n    \"Iterate over each day's operations:\",\n    \"  - If a train is added, set its initial state to working and start tracking its cycle.\",\n    \"  - If a train is removed, stop tracking its cycle and ensure it is not counted as in maintenance.\",\n    \"  - For each train, update its cycle based on its working and maintenance periods.\",\n    \"  - Count the number of trains currently in maintenance and store the result for the day.\",\n    \"Output the list of maintenance counts for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': Refers to different types of trains, each with unique working and maintenance cycles.\n    'working and maintenance periods': The cycle of days a train is operational (working) and days it is under maintenance.\n    'operations': Actions taken each day, either adding or removing a train.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    'x_i days': Refers to the number of days a train works before going into maintenance.\n    'y_i days': Refers to the number of days a train is in maintenance before returning to work.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the state of trains and counting maintenance should be implemented simultaneously:\n    - \"If a train is added, set its initial state to working and start tracking its cycle.\"\n    - \"If a train is removed, stop tracking its cycle and ensure it is not counted as in maintenance.\"\n    - \"For each train, update its cycle based on its working and maintenance periods.\"\n    These steps can be handled in a single loop that processes each day's operations and updates the state and cycle of each train.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n\n       Output: 0\n       Explanation: A single train is added and it starts working immediately, so no train is in maintenance.\n    2. Input: 1 2\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, never entering maintenance.\n    3. Input: 2 3\\n1 1\\n1 1\\n1 1\\n1 2\\n2 1\\n\n       Output: 0\\n0\\n0\n       Explanation: Two trains are added on consecutive days, but both start working immediately, so no train is in maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where trains might have overlapping maintenance periods or synchronized cycles.\n    ```python\n    # Example code to handle edge cases\n    def update_train_state(trains, day):\n        for model, state in trains.items():\n            if state['active']:\n                cycle_length = state['x'] + state['", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    train_cycles = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State tracking for each train model\n    train_states = [None] * n  # None means no train of this model is active\n    \n    maintenance_counts = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_states[k] = {'active': True, 'cycle_day': 0, 'x': x_i, 'y': y_i}\n        \n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Calculate number of trains in maintenance\n        maintenance_count = 0\n        for state in train_states:\n            if state and state['active']:\n                cycle_length = state['x'] + state['y']\n                current_cycle_day = state['cycle_day'] % cycle_length\n                if current_cycle_day >= state['x']:\n                    maintenance_count += 1\n        \n        maintenance_counts.append(maintenance_count)\n        \n        # Update cycle days for active trains\n        for state in train_states:\n            if state and state['active']:\n                state['cycle_day'] += 1\n    \n    for count in maintenance_counts:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 103)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    \n    train_cycles = []\n    index = 2\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State tracking for each train model\n    train_states = [None] * n  # None means no train of this model is active\n    \n    maintenance_counts = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_states[k] = {'active': True, 'cycle_day': 0, 'x': x_i, 'y': y_i}\n        \n        elif op == 2:  # Remove train of model k\n            train_states[k] = None\n        \n        # Calculate number of trains in maintenance\n        maintenance_count = 0\n        for state in train_states:\n            if state and state['active']:\n                cycle_length = state['x'] + state['y']\n                current_cycle_day = state['cycle_day'] % cycle_length\n                if current_cycle_day >= state['x']:\n                    maintenance_count += 1\n        \n        maintenance_counts.append(maintenance_count)\n        \n        # Update cycle days for active trains\n        for state in train_states:\n            if state and state['active']:\n                state['cycle_day'] += 1\n    \n    for count in maintenance_counts:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models and daily operations.\"\n    },\n    {\n      \"description\": \"Implement a data structure to track the state of each train model, including whether it is currently added, its current cycle position (working or maintenance), and the remaining days in the current cycle.\",\n      \"output\": \"A data structure that can efficiently update and query the state of each train model.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the current cycle position of each train.\",\n      \"output\": \"An updated state of all train models after each day's operations.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of all train models.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, working and maintenance periods for each train model, and the operations for each day.\",\n    \"Initialize a data structure to track the state of each train model, including its current cycle position and remaining days in the current cycle.\",\n    \"For each day, perform the following steps:\",\n    \"  - If the operation is to add a train, update the data structure to reflect the train's addition and set its initial cycle position to working.\",\n    \"  - If the operation is to remove a train, update the data structure to reflect the train's removal.\",\n    \"  - Update the cycle position and remaining days for each train model currently added, transitioning between working and maintenance as necessary.\",\n    \"  - Count the number of trains currently in maintenance and store the result for the current day.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': Refers to different types of trains, each with its own working and maintenance cycle.\n    'working and maintenance periods': The cycle of days a train is operational (working) and then under maintenance.\n    'operations': Actions to add or remove trains, affecting their current state.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Ensures that there is only one train per model at any time.\n    'x_i days': The number of days a train works before going into maintenance.\n    'y_i days': The number of days a train is in maintenance before it can work again.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the cycle position and counting the number of trains in maintenance should be implemented simultaneously. Specifically:\n    - \"Update the cycle position and remaining days for each train model currently added, transitioning between working and maintenance as necessary.\"\n    - \"Count the number of trains currently in maintenance and store the result for the current day.\"\n    These can be done in a single loop iterating over the active trains.\n\n# [edge case]\n    1. Input: 1 1\\n1 1\\n1 1\\n\n       Output: 0\n       Explanation: A single train is added and works for 1 day, so it is not in maintenance.\n    2. Input: 1 2\\n1 1\\n1 1\\n2 1\\n\n       Output: 0\\n0\n       Explanation: A train is added and then removed the next day, never entering maintenance.\n    3. Input: 2 3\\n1 1\\n1 1\\n1 1\\n1 2\\n2 1\\n\n       Output: 0\\n0\\n0\n       Explanation: Two trains are added on consecutive days, both work for 1 day and are removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating the cycle and counting maintenance trains will naturally handle these scenarios.\n\nNO", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of each train model\n    train_state = [None] * n  # None means not present, otherwise (days_left, in_maintenance)\n    \n    # Result for each day\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        # Update the state of all trains\n        maintenance_count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                days_left, in_maintenance = train_state[i]\n                if days_left == 1:\n                    # Transition to the next state\n                    if in_maintenance:\n                        # Move to working state\n                        train_state[i] = (train_cycles[i][0], False)\n                    else:\n                        # Move to maintenance state\n                        train_state[i] = (train_cycles[i][1], True)\n                else:\n                    # Decrease the days left in the current state\n                    train_state[i] = (days_left - 1, in_maintenance)\n                \n                # Count maintenance trains\n                if train_state[i][1]:\n                    maintenance_count += 1\n        \n        # Perform the operation for the current day\n        if op == 1:\n            # Add train of model k\n            train_state[k] = (train_cycles[k][0], False)  # Start in working state\n        elif op == 2:\n            # Remove train of model k\n            train_state[k] = None\n        \n        # Record the result for the current day\n        results.append(maintenance_count)\n    \n    # Output the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 115)"}, "Round_1": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    m = int(data[index + 1])\n    index += 2\n    \n    train_cycles = []\n    for _ in range(n):\n        x_i = int(data[index])\n        y_i = int(data[index + 1])\n        train_cycles.append((x_i, y_i))\n        index += 2\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1]) - 1  # Convert to 0-based index\n        operations.append((op, k))\n        index += 2\n    \n    # State of each train model\n    train_state = [None] * n  # None means not present, otherwise (days_left, in_maintenance)\n    \n    # Result for each day\n    results = []\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        # Update the state of all trains\n        maintenance_count = 0\n        for i in range(n):\n            if train_state[i] is not None:\n                days_left, in_maintenance = train_state[i]\n                if days_left == 1:\n                    # Transition to the next state\n                    if in_maintenance:\n                        # Move to working state\n                        train_state[i] = (train_cycles[i][0], False)\n                    else:\n                        # Move to maintenance state\n                        train_state[i] = (train_cycles[i][1], True)\n                else:\n                    # Decrease the days left in the current state\n                    train_state[i] = (days_left - 1, in_maintenance)\n                \n                # Count maintenance trains\n                if train_state[i][1]:\n                    maintenance_count += 1\n        \n        # Perform the operation for the current day\n        if op == 1:\n            # Add train of model k\n            train_state[k] = (train_cycles[k][0], False)  # Start in working state\n        elif op == 2:\n            # Remove train of model k\n            train_state[k] = None\n        \n        # Record the result for the current day\n        results.append(maintenance_count)\n    \n    # Output the results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models and daily operations.\"\n    },\n    {\n      \"description\": \"Implement a data structure to track the state of each train model, including whether it is currently added, its current cycle (working or maintenance), and the remaining days in the current cycle.\",\n      \"output\": \"A data structure that efficiently tracks the state of each train model.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the current cycle of each train.\",\n      \"output\": \"Updated state of trains for each day, reflecting additions and removals.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of all trains.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, working and maintenance periods for each train model, and daily operations.\",\n    \"Initialize a data structure to track the state of each train model, including its current cycle and remaining days in that cycle.\",\n    \"Iterate over each day's operations:\",\n    \"  - If a train is added, update its state to start its working cycle.\",\n    \"  - If a train is removed, ensure it is not counted in maintenance and remove it from the tracking structure.\",\n    \"  - For each train currently added, update its cycle (working or maintenance) and decrement the remaining days in the current cycle.\",\n    \"  - If a train completes its working cycle, transition it to maintenance, and vice versa.\",\n    \"Calculate the number of trains in maintenance for each day and store the result.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': Refers to different types of trains, each with its own working and maintenance cycle.\n    'working and maintenance periods': The cycle of days a train is operational (working) and then under maintenance.\n    'operations': Actions taken each day, either adding or removing a train.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Implies that there can be zero or one train of each model at any time.\n    'x_i days': Refers to the number of days a train works before going into maintenance.\n    'y_i days': Refers to the number of days a train is in maintenance before returning to work.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the state of trains and calculating the number of trains in maintenance should be implemented simultaneously. Specifically:\n    - \"For each train currently added, update its cycle (working or maintenance) and decrement the remaining days in the current cycle.\"\n    - \"If a train completes its working cycle, transition it to maintenance, and vice versa.\"\n    These steps can be combined in a loop that iterates over the active trains each day.\n\n# [edge case]\n    1. Input: 1 1\n       1 1\n       1 1\n       Output: 0\n       Explanation: On the first day, a train is added and is in its working period, so no train is in maintenance.\n       \n    2. Input: 1 2\n       1 1\n       1 1\n       2 1\n       Output: 0\n       0\n       Explanation: On the first day, a train is added and is in its working period. On the second day, the train is removed, so no train is in maintenance on either day.\n       \n    3. Input: 2 3\n       1 1\n       1 1\n       1 1\n       1 2\n       2 1\n       Output: 0\n       0\n       0\n       Explanation: On the first day, a train of model 1 is added and is in its working period. On the second day, a train of model 2 is added and is also in its working period. On the third day, the train of model 1 is removed, so no train is in maintenance on", "Round_0": {"code": "def calculate_maintenance_days(n, m, train_cycles, operations):\n    # Initialize the state of each train model\n    train_state = {}\n    maintenance_count = [0] * m\n\n    for day in range(m):\n        op, k = operations[day]\n        x, y = train_cycles[k - 1]\n\n        if op == 1:  # Add train of model k\n            train_state[k] = {'cycle': 'working', 'remaining_days': x}\n        elif op == 2:  # Remove train of model k\n            del train_state[k]\n\n        # Update the state of each train model\n        current_maintenance_count = 0\n        for model in list(train_state.keys()):\n            state = train_state[model]\n            state['remaining_days'] -= 1\n\n            if state['remaining_days'] == 0:\n                if state['cycle'] == 'working':\n                    state['cycle'] = 'maintenance'\n                    state['remaining_days'] = y\n                else:\n                    state['cycle'] = 'working'\n                    state['remaining_days'] = x\n\n            if state['cycle'] == 'maintenance':\n                current_maintenance_count += 1\n\n        maintenance_count[day] = current_maintenance_count\n\n    return maintenance_count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    m = int(data[1])\n\n    train_cycles = []\n    index = 2\n    for _ in range(n):\n        x = int(data[index])\n        y = int(data[index + 1])\n        train_cycles.append((x, y))\n        index += 2\n\n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        k = int(data[index + 1])\n        operations.append((op, k))\n        index += 2\n\n    result = calculate_maintenance_days(n, m, train_cycles, operations)\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of train models (n), number of days (m), the working and maintenance periods for each train model, and the operations for each day.\",\n      \"output\": \"A structured representation of the input data, including train models' cycles and daily operations.\"\n    },\n    {\n      \"description\": \"Implement a data structure to track the state of each train model, including whether it is currently added, its current cycle position, and whether it is in maintenance or working.\",\n      \"output\": \"A data structure that can efficiently update and query the state of each train model.\"\n    },\n    {\n      \"description\": \"Simulate each day's operations, updating the state of the trains based on the operation (add or remove) and the current cycle position of each train.\",\n      \"output\": \"An updated state of all train models for each day.\"\n    },\n    {\n      \"description\": \"Calculate the number of trains in maintenance for each day based on the current state of all train models.\",\n      \"output\": \"A list of integers representing the number of trains in maintenance for each day.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of train models, number of days, working and maintenance periods for each train model, and daily operations.\",\n    \"Initialize a data structure to track the state of each train model, including its cycle position and whether it is in maintenance or working.\",\n    \"Iterate over each day, performing the following steps:\",\n    \"  - If the operation is to add a train, update the data structure to reflect the train's addition and set its initial cycle position.\",\n    \"  - If the operation is to remove a train, update the data structure to reflect the train's removal.\",\n    \"  - Update the cycle position of all active trains to determine if they are in maintenance or working.\",\n    \"Calculate the number of trains in maintenance for the current day based on the updated state of all train models.\",\n    \"Output the number of trains in maintenance for each day.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models': Refers to different types of trains, each with unique working and maintenance cycles.\n    'maintenance': The period during which a train is not operational and is being serviced.\n    Explanation: The requirement involves tracking the status of train models, specifically focusing on their maintenance periods.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    'x_i days', 'y_i days': Specifies the duration of working and maintenance periods for each train model.\n    Explanation: These phrases define the constraints and cycles for each train model, which are crucial for calculating maintenance periods.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps related to updating the cycle position and determining maintenance status should be implemented simultaneously.\n    \"Update the cycle position of all active trains to determine if they are in maintenance or working.\"\n    This can be done by iterating over the active trains and updating their cycle positions in a single loop.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A train is added and immediately starts working, so no train is in maintenance on the first day.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           1 2\n    Output: 0\n            0\n    Explanation: Both trains are added and start working immediately, so no train is in maintenance on either day.\n\n    Input: 1 3\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: A train is added, works for one day, and is removed before entering maintenance.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    Specifically, we need to ensure that the cycle position is correctly initialized and updated for each train model, and that maintenance status is accurately determined based on the cycle position.\n    Example code for handling cycle updates:\n    ```python\n    def update_cycle(train_state, x, y):\n        if train_state['days_in_cycle'] < x:\n            train_state['status'] = 'working'\n        elif train_state['days_in_cycle']", "Round_0": {"code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    index += 1\n    m = int(data[index])\n    index += 1\n    \n    cycles = []\n    for _ in range(n):\n        x = int(data[index])\n        index += 1\n        y = int(data[index])\n        index += 1\n        cycles.append((x, y))\n    \n    operations = []\n    for _ in range(m):\n        op = int(data[index])\n        index += 1\n        k = int(data[index]) - 1\n        index += 1\n        operations.append((op, k))\n    \n    # State of each train model\n    train_state = [None] * n\n    # Number of trains in maintenance each day\n    maintenance_count = [0] * m\n    \n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x, y = cycles[k]\n            train_state[k] = {'days_in_cycle': 0, 'x': x, 'y': y}\n        \n        elif op == 2:  # Remove train\n            train_state[k] = None\n        \n        # Update the cycle position of all active trains\n        current_maintenance_count = 0\n        for state in train_state:\n            if state is not None:\n                state['days_in_cycle'] += 1\n                if state['days_in_cycle'] > state['x'] + state['y']:\n                    state['days_in_cycle'] = 1\n                \n                if state['x'] < state['days_in_cycle'] <= state['x'] + state['y']:\n                    current_maintenance_count += 1\n        \n        maintenance_count[day] = current_maintenance_count\n    \n    for count in maintenance_count:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, true, true, false, false, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 324, "prompt": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance. Make sure to account for all transitions between working and maintenance periods accurately in your calculations. Consider edge cases where trains might have overlapping maintenance periods or synchronized cycles.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "examples": "\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 63}
