{"name": "1618_E. Singers' Tour", "description": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "tags": ["constructive algorithms", "math"], "difficulty": 11, "id": 1618, "sample_io": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n"]}], "test_list": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n4\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n4\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n2\n3\n1 2 0\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n2\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n19 16 19\n1\n1\n3\n1 0 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 4 2\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 105\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 132 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 124\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n2\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n2\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 19 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 0\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 129 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 155 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n62 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 16 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 6\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 64 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n4 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 2\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 2\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 -1\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 138 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 21 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 240 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 0 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 112 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n2\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n2\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 20\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 24\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n0 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 15 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 104 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 38 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n22 22 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 47 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n3 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n0 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 2 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 28\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 5 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 144 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 0 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 2\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 12 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 -1 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 1 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 57 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 4\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n13 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 1 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n2\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 27 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 136 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 64 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n2 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 141 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}], "task_id": "codecontest/136", "repair_prompt": ["n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order and in the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town, and in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes, which was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In each town, for each i \u2208 [1, n], there lives a singer with a repertoire of a_i minutes.\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town, and in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes, which was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i. In the town ((i + n - 2) mod n + 1), the concert duration will be n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "n towns are arranged in a circle sequentially, numbered from 1 to n in clockwise order, and in the i-th town lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n]. Each singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town, getting inspired and coming up with a song in each town that lasts a_i minutes, which was added to his repertoire for the rest of the cities. Hence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Calculate the total sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n\nmain()", "completions": ["def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev = b[i - 1] if i > 0 else b[n - 1]\n            diff = b[i] - prev\n            if (diff + total_a) % n != 0 or (diff + total_a) <= 0:\n                possible = False\n                break\n            a[i] = (diff + total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # Special case for n = 1\n            if b[0] % n == 0:\n                results.append(\"YES\")\n                results.append(str(b[0] // n))\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            if b[0] % n == 0:\n                results.append(\"YES\")\n                results.append(str(b[0] // n))\n            else:\n                results.append(\"NO\")\n            continue\n        \n        total_b = sum(b)\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    solve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            results.append(f\"YES\\n{b[0]}\")\n            continue\n        \n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (total_a_sum - diff) % n != 0 or (total_a_sum - diff) // n <= 0:\n                possible = False\n                break\n            a[i] = (total_a_sum - diff) // n\n        \n        if possible:\n            results.append(\"YES\\n\" + \" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        S = n * (n + 1) // 2\n        total_sum_b = sum(b)\n        \n        if total_sum_b % S != 0:\n            results.append(\"NO\")\n            continue\n        \n        k = total_sum_b // S\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev = (i - 1 + n) % n\n            diff = b[i] - b[prev]\n            if (diff + k) % n != 0 or (diff + k) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff + k) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(b)\n        \n        # Check if the total sum is divisible by the sum of the first n natural numbers\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a_sum) % n != 0 or (diff - total_a_sum) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a_sum) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by the sum of the first n natural numbers\n        sum_n = n * (n + 1) // 2\n        if total_b % sum_n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of initial repertoires\n        total_a = total_b // sum_n\n        \n        # Calculate the sequence a\n        a = [0] * n\n        possible = True\n        for i in range(n):\n            prev = (i - 1 + n) % n\n            diff = b[i] - b[prev]\n            if (total_a + diff) % n != 0 or (total_a + diff) // n <= 0:\n                possible = False\n                break\n            a[i] = (total_a + diff) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        sum_n = n * (n + 1) // 2\n        \n        if total_b % sum_n != 0:\n            results.append(\"NO\")\n            continue\n        \n        k = total_b // sum_n\n        a = []\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[-1]\n            if (diff - k) % n != 0 or (diff - k) // n <= 0:\n                possible = False\n                break\n            a_i = (diff - k) // n\n            a.append(a_i)\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n\nmain()", "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Calculate the total sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n\nmain()"], "session_history": {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the corresponding data for each test case.\",\n      \"details\": \"Read the integer t for the number of test cases. For each test case, read the integer n and the array b of size n.\"\n    },\n    {\n      \"description\": \"Determine if a valid sequence a can be reconstructed for each test case.\",\n      \"details\": \"For each test case, check if there exists a sequence a such that the total duration of concerts in each town matches the given array b.\"\n    },\n    {\n      \"description\": \"Reconstruct a valid sequence a if possible.\",\n      \"details\": \"If a valid sequence a exists, reconstruct it such that the conditions of the problem are satisfied. If multiple sequences are possible, any valid sequence can be returned.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output 'YES' followed by the sequence a if a valid sequence exists, otherwise output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the integer n and the array b of size n.\",\n    \"  b. Initialize an array a of size n to store the initial durations.\",\n    \"  c. Attempt to reconstruct the sequence a by iterating over the array b and applying the conditions given in the problem.\",\n    \"  d. Check if the reconstructed sequence a satisfies the conditions for all towns.\",\n    \"  e. If a valid sequence a is found, store 'YES' and the sequence a. Otherwise, store 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the concerts.\n    'concert duration': refers to the total time a singer performs in each town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to reconstruct the sequence a should be considered simultaneously with checking the conditions for all towns. This involves iterating over the array b and calculating the possible values for a while ensuring they satisfy the conditions for all towns.\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES, 1\n    Explanation: With only one town, the singer's repertoire matches the concert duration directly.\n    \n    Test case with n = 2 and b = [2, 4] = YES, 1 2\n    Explanation: The first singer performs for 1 minute in the first town and 2 minutes in the second town. The second singer performs for 2 minutes in the first town and 4 minutes in the second town.\n    \n    Test case with n = 3 and b = [3, 6, 9] = YES, 1 2 3\n    Explanation: Each singer's repertoire matches the concert duration in their respective towns.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    The logic should include checking if the sum of the calculated concert durations matches the given array b for each town, and adjusting the sequence a accordingly.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Calculate the total sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"Read the array b of n integers, which represents the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, attempt to reconstruct the sequence a of initial repertoire durations.\",\n        \"Check if the sum of the concert durations for each town matches the given array b.\",\n        \"If a valid sequence a is found, store it; otherwise, mark the test case as impossible.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, if a valid sequence a was found, print 'YES' followed by the sequence a.\",\n        \"If no valid sequence was found, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Initialize a list to store the results for each test case.\",\n    \"Iterate over each test case and parse the input values.\",\n    \"For each test case, attempt to reconstruct the sequence a by solving the mathematical problem of concert durations.\",\n    \"Store the result ('YES' and sequence a or 'NO') for each test case.\",\n    \"Print the results for all test cases in the required format.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the collection of songs a singer has, which increases as they visit each town.\n    'concert duration': the time each singer performs in a town, which increases as they move clockwise through the towns.\n    Explanation: The requirement involves calculating the initial repertoire of each singer based on the total concert durations in each town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i', '(k + 2) \u22c5 a_i', 'n \u22c5 a_i': These phrases indicate the multiplication of the initial repertoire duration by a factor that increases as the singer moves through the towns.\n    Explanation: The concert duration in each town is a multiple of the initial repertoire duration, increasing by one factor for each subsequent town visited.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially, as each step builds upon the previous one. Parsing the input, reconstructing the sequence, and outputting results are distinct phases that should not be combined into a single code block.\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: \n    Expected output: YES, 1\n    Explanation: With only one town and a total concert duration of 1, the initial repertoire must be 1.\n    \n    Test case with n = 2 and b_1 = 2, b_2 = 2:\n    Expected output: NO\n    Explanation: It's impossible to have two towns with equal concert durations without violating the increasing duration rule.\n    \n    Test case with n = 3 and b_1 = 3, b_2 = 6, b_3 = 9:\n    Expected output: YES, 1 2 3\n    Explanation: Each singer's concert duration matches the expected increase in each town.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    The code should include logic to check if the sequence can be reconstructed based on the mathematical relationship between the concert durations and the initial repertoire. This involves verifying if the calculated sequence matches the given total durations for each town.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev = b[i - 1] if i > 0 else b[n - 1]\n            diff = b[i] - prev\n            if (diff + total_a) % n != 0 or (diff + total_a) <= 0:\n                possible = False\n                break\n            a[i] = (diff + total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))\n\nsolve()\n", "report": "The compilation output of the preceding code is: unexpected EOF while parsing (<string>, line 88)"}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev = b[i - 1] if i > 0 else b[n - 1]\n            diff = b[i] - prev\n            if (diff + total_a) % n != 0 or (diff + total_a) <= 0:\n                possible = False\n                break\n            a[i] = (diff + total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the corresponding data for each test case.\",\n      \"details\": \"Read the integer t, which represents the number of test cases. For each test case, read the integer n (number of towns) and the list of integers b (total concert durations for each town).\"\n    },\n    {\n      \"description\": \"Determine if a valid sequence a exists for each test case.\",\n      \"details\": \"For each test case, check if there is a sequence of integers a such that the total concert durations in each town match the given list b.\"\n    },\n    {\n      \"description\": \"Reconstruct a valid sequence a if possible.\",\n      \"details\": \"If a valid sequence a exists, reconstruct it by calculating the initial repertoire durations for each singer such that the total concert durations match the given list b.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, output 'YES' followed by the sequence a if a valid sequence exists, otherwise output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the integer n and the list of integers b.\",\n    \"  b. Initialize an empty list to store the sequence a.\",\n    \"  c. Check if a valid sequence a can be constructed:\",\n    \"     i. Iterate over the list b to determine if a sequence a can be derived.\",\n    \"     ii. If a valid sequence is found, store it in the list a.\",\n    \"  d. If a valid sequence a is found, output 'YES' and the sequence a.\",\n    \"  e. If no valid sequence a can be found, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the concerts.\n    'concert duration': refers to the total time a singer performs in each town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': indicates that the concert duration in the next town is twice the initial repertoire duration.\n    '(k + 2) \u22c5 a_i': indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire duration as the singer visits more towns.\n    'n \u22c5 a_i': indicates the concert duration in the last town is n times the initial repertoire duration.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to check if a valid sequence exists and reconstruct it should be considered simultaneously. Specifically, the logic to derive sequence 'a' from 'b' should be implemented in a single code block to ensure consistency in calculations.\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES, 1\n    Explanation: With only one town, the singer's initial repertoire must match the total concert duration.\n    \n    Test case with n = 2 and b = [2, 4] = YES, 1 2\n    Explanation: The first singer performs for 1 minute in the first town and 2 minutes in the second town. The second singer performs for 2 minutes in the first town and 4 minutes in the second town.\n    \n    Test case with n = 3 and b = [3, 6, 9] = YES, 1 2 3\n    Explanation: Each singer's initial repertoire matches the pattern of increasing concert durations.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where n = 1 or the sequence b does not allow a valid sequence a to be derived.\n    ```python\n    if n == 1:\n        if b[0] % n == 0:\n            print(\"YES\")\n            print(b[0] // n)\n        else:\n            print(\"NO\")\n    else:\n        # Implement logic to derive sequence a from b\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # Special case for n = 1\n            if b[0] % n == 0:\n                results.append(\"YES\")\n                results.append(str(b[0] // n))\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # Special case for n = 1\n            if b[0] % n == 0:\n                results.append(\"YES\")\n                results.append(str(b[0] // n))\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, the number of test cases.\",\n        \"For each test case, read the integer n, the number of towns.\",\n        \"Read the array b of n integers, representing the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence a exists for each test case.\",\n      \"steps\": [\n        \"For each test case, initialize an array a of size n to store the initial duration of repertoire for each singer.\",\n        \"Iterate over each town and calculate the possible initial duration a_i for each singer based on the given b array.\",\n        \"Check if the calculated sequence a satisfies the conditions for all towns.\"\n      ]\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"steps\": [\n        \"If a valid sequence a is found, print 'YES' followed by the sequence a.\",\n        \"If no valid sequence exists, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, attempt to reconstruct a valid sequence a that satisfies the conditions.\",\n    \"For each town, calculate the initial duration a_i for each singer and verify the total concert durations.\",\n    \"Output 'YES' and the sequence a if a valid sequence is found, otherwise output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the concerts.\n    'concert duration': refers to the total time a singer performs in each town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': indicates that the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': indicates the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for parsing input and determining the sequence a should be implemented simultaneously for efficiency. Specifically, parsing the input and calculating the sequence a can be done in a single loop for each test case.\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES, 1\n    Explanation: With only one town, the initial repertoire must be equal to the total concert duration.\n    \n    Test case with n = 2 and b = [2, 4] = YES, 1 2\n    Explanation: The first singer performs for 1 minute in the first town and 2 minutes in the second town. The second singer performs for 2 minutes in the first town and 4 minutes in the second town.\n    \n    Test case with n = 3 and b = [3, 6, 9] = YES, 1 2 3\n    Explanation: Each singer's initial repertoire matches the total concert duration divided by the number of towns.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where n = 1 or the sequence a cannot be reconstructed.\n    ```python\n    if n == 1:\n        if b[0] % n == 0:\n            print(\"YES\")\n            print(b[0] // n)\n        else:\n            print(\"NO\")\n    else:\n        # Original logic to reconstruct sequence a\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            if b[0] % n == 0:\n                results.append(\"YES\")\n                results.append(str(b[0] // n))\n            else:\n                results.append(\"NO\")\n            continue\n        \n        total_b = sum(b)\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nif __name__ == \"__main__\":\n    solve()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t representing the number of test cases.\",\n        \"For each test case, read the integer n representing the number of towns.\",\n        \"Read the array b of n integers representing the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence a exists for each test case.\",\n      \"steps\": [\n        \"For each test case, initialize an array a of size n to store the initial duration of repertoire for each singer.\",\n        \"Iterate over each town and calculate the possible values for a_i based on the given b_i values.\",\n        \"Check if the calculated values for a_i satisfy the conditions for all towns.\",\n        \"If a valid sequence is found, store it; otherwise, mark the test case as impossible.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, if a valid sequence a was found, print 'YES' followed by the sequence a.\",\n        \"If no valid sequence was found, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, attempt to reconstruct a valid sequence a based on the given b values.\",\n    \"Check the validity of the reconstructed sequence for each test case.\",\n    \"Output 'YES' and the sequence a if valid, or 'NO' if no valid sequence exists.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'concert duration calculation'\n    Explanation: Each singer's concert duration in each town is calculated based on their initial repertoire and the number of towns they have visited.\n\n# [phrase showing quantity relationship]\n    'n towns'\n    Explanation: The number of towns is given as n, which is a key factor in determining the sequence of concerts.\n\n    'total duration of concerts'\n    Explanation: The array b provides the total duration of concerts in each town, which is used to reconstruct the initial repertoire sequence.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but the calculation of possible values for a_i and checking their validity can be done in a single loop for efficiency.\n\n# [edge case]\n    1. n = 1, b = [1] = YES, 1\n       Explanation: With only one town, the initial repertoire must match the total concert duration.\n    2. n = 3, b = [1, 1, 1] = NO\n       Explanation: It's impossible to distribute the concert durations evenly among three towns with such low values.\n    3. n = 2, b = [2, 4] = YES, 1 2\n       Explanation: The sequence 1, 2 satisfies the condition for the given total durations.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Specifically, we need to ensure that the calculated sequence a satisfies the conditions for all towns, especially when n is small or when b values are minimal.\n\n```python\ndef handle_edge_cases(n, b):\n    if n == 1:\n        return \"YES\\n\" + str(b[0]) if b[0] > 0 else \"NO\"\n    # Additional logic to handle other edge cases\n```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            results.append(f\"YES\\n{b[0]}\")\n            continue\n        \n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (total_a_sum - diff) % n != 0 or (total_a_sum - diff) // n <= 0:\n                possible = False\n                break\n            a[i] = (total_a_sum - diff) // n\n        \n        if possible:\n            results.append(\"YES\\n\" + \" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            results.append(f\"YES\\n{b[0]}\")\n            continue\n        \n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (total_a_sum - diff) % n != 0 or (total_a_sum - diff) // n <= 0:\n                possible = False\n                break\n            a[i] = (total_a_sum - diff) // n\n        \n        if possible:\n            results.append(\"YES\\n\" + \" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the corresponding data for each test case.\",\n      \"details\": \"Read the integer t for the number of test cases. For each test case, read the integer n and the array b of size n.\"\n    },\n    {\n      \"description\": \"Determine if a valid sequence a exists for each test case.\",\n      \"details\": \"For each test case, check if there is a sequence a such that the total duration of concerts in each town matches the given array b.\"\n    },\n    {\n      \"description\": \"Reconstruct a valid sequence a if possible.\",\n      \"details\": \"If a valid sequence a exists, reconstruct it such that the conditions of the problem are satisfied.\"\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"details\": \"For each test case, output 'YES' followed by the sequence a if it exists, otherwise output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to get the number of test cases and the data for each test case.\",\n    \"For each test case, initialize variables to store the potential sequence a.\",\n    \"Iterate over the array b to determine if a valid sequence a can be constructed.\",\n    \"Check the conditions for each town and adjust the sequence a accordingly.\",\n    \"If a valid sequence a is found, store the result as 'YES' and the sequence a.\",\n    \"If no valid sequence a can be constructed, store the result as 'NO'.\",\n    \"Output the results for all test cases in the required format.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sequence a': Refers to the initial duration of repertoire for each singer in each town.\n    'concert duration': The duration of concerts in each town, which is influenced by the singer's repertoire and the number of towns visited.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': Indicates that the concert duration in the next town is twice the initial repertoire duration.\n    '(k + 2) \u22c5 a_i': Shows that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': Represents the maximum concert duration in the last town visited, which is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps for parsing input and outputting results can be implemented simultaneously for efficiency. However, the logic for determining the sequence a and checking conditions should be handled separately to ensure correctness.\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES, 1\n    Explanation: With only one town, the concert duration matches the repertoire directly.\n    \n    Test case with n = 2 and b = [2, 4] = YES, 1 2\n    Explanation: The first town has a concert duration of 1, and the second town has a concert duration of 2 times the first town's repertoire.\n    \n    Test case with n = 3 and b = [3, 6, 9] = YES, 1 1 1\n    Explanation: Each town's concert duration is a multiple of the initial repertoire, which is consistent across towns.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1:\n            print(\"YES\")\n            print(b[0])\n        elif n == 2:\n            if b[0] * 2 == b[1]:\n                print(\"YES\")\n                print(b[0] // 2, b[0])\n            else:\n                print(\"NO\")\n        else:\n            # Implement logic to check and construct sequence a for n >= 3\n            # (other code)\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        total_b = sum(b)\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"Read the array b of n integers, which represents the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, analyze the array b to determine if a sequence a can be reconstructed.\",\n        \"Check if the sum of b_i is divisible by the sum of the first n natural numbers (1 to n).\",\n        \"If not divisible, output 'NO'.\",\n        \"If divisible, proceed to reconstruct the sequence a.\"\n      ]\n    },\n    {\n      \"description\": \"Reconstruct the sequence a if possible.\",\n      \"steps\": [\n        \"Calculate the sum of the first n natural numbers (S = n * (n + 1) / 2).\",\n        \"For each test case, calculate the total sum of b_i.\",\n        \"Divide the total sum of b_i by S to find the common factor k.\",\n        \"Use k to reconstruct the sequence a by solving the system of equations derived from the concert durations.\",\n        \"Output 'YES' followed by the sequence a if reconstruction is successful.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, check if the sum of b_i is divisible by the sum of the first n natural numbers.\",\n    \"If not divisible, output 'NO'.\",\n    \"If divisible, calculate the common factor k and reconstruct the sequence a.\",\n    \"Output 'YES' followed by the sequence a if reconstruction is successful.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after the last town back to the first.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The duration of each concert in a town, which increases as the singer moves from town to town.\n\n# [phrase showing quantity relationship]\n    'exactly one concert'\n    Explanation: Each singer performs one concert in each town.\n\n    'k + 2'\n    Explanation: The concert duration increases by a factor of (k + 2) as the singer moves to the next town.\n\n    'n \u22c5 a_i'\n    Explanation: In the last town, the concert duration is n times the initial repertoire.\n\n# [degree adverb]\n    'any correct sequence'\n    Explanation: Any sequence that satisfies the conditions is acceptable, not necessarily the largest or smallest.\n\n# [code logic]\n    The steps for checking divisibility and reconstructing the sequence should be considered simultaneously. Specifically, after checking divisibility, the calculation of the common factor k and the reconstruction of sequence a are interdependent and should be implemented in a single logical block.\n\n# [edge case]\n    1. n = 1, b = [1] = YES, a = [1]\n       Explanation: With only one town and one singer, the concert duration matches the initial repertoire.\n       \n    2. n = 2, b = [3, 3] = NO\n       Explanation: The sum of b_i is 6, which is not divisible by the sum of the first 2 natural numbers (3), making it impossible to reconstruct a valid sequence.\n       \n    3. n = 4, b = [10, 10, 10, 10] = NO\n       Explanation: The sum of b_i is 40, which is not divisible by the sum of the first 4 natural numbers (10), making it impossible to reconstruct a valid sequence.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the sum of b_i is not divisible by the sum of the first n natural numbers.\n    ```python\n    if total_sum_b % S != 0:\n        print(\"NO\")\n        continue\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        S = n * (n + 1) // 2\n        total_sum_b = sum(b)\n        \n        if total_sum_b % S != 0:\n            results.append(\"NO\")\n            continue\n        \n        k = total_sum_b // S\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev = (i - 1 + n) % n\n            diff = b[i] - b[prev]\n            if (diff + k) % n != 0 or (diff + k) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff + k) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 91)"}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        S = n * (n + 1) // 2\n        total_sum_b = sum(b)\n        \n        if total_sum_b % S != 0:\n            results.append(\"NO\")\n            continue\n        \n        k = total_sum_b // S\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            prev = (i - 1 + n) % n\n            diff = b[i] - b[prev]\n            if (diff + k) % n != 0 or (diff + k) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff + k) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"For each test case, read the array b, which contains the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, check if the sum of b_i is divisible by n. If not, output 'NO'.\",\n        \"If divisible, calculate the average duration per singer by dividing the sum of b_i by n.\",\n        \"Check if the calculated average can be distributed among the singers such that each town's total concert duration matches b_i.\"\n      ]\n    },\n    {\n      \"description\": \"Reconstruct a valid sequence of initial repertoire durations if possible.\",\n      \"steps\": [\n        \"Initialize an array a of size n to store the initial repertoire durations.\",\n        \"Iteratively assign values to a_i such that the concert durations match the given b_i for each town.\",\n        \"Ensure that the values assigned to a_i are positive integers and satisfy the constraints.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"If a valid sequence a is found, output 'YES' followed by the sequence.\",\n        \"If no valid sequence is found, output 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, check if a valid sequence of initial repertoire durations exists.\",\n    \"If a valid sequence exists, reconstruct the sequence and output the result.\",\n    \"If no valid sequence exists, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after the last town back to the first.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    'exactly one concert'\n    Explanation: Each singer performs exactly once in each town.\n\n    '2 \u22c5 a_i, ..., n \u22c5 a_i'\n    Explanation: The concert duration increases by multiplying the initial repertoire by the number of towns visited so far.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan are mostly sequential, but the check for divisibility and the calculation of the average should be considered together to determine if a valid sequence is possible. This can be done in a single code block.\n\n# [edge case]\n    1. n = 1, b = [1] = YES, 1\n       Explanation: With only one town, the initial repertoire must equal the total concert duration.\n    2. n = 2, b = [2, 2] = YES, 1 1\n       Explanation: Each singer can have an initial repertoire of 1, leading to concert durations of 2 in each town.\n    3. n = 3, b = [3, 3, 3] = NO\n       Explanation: The sum of b is 9, which is divisible by 3, but no valid sequence of initial repertoires can satisfy the conditions.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    if sum(b) % n != 0:\n        print(\"NO\")\n    else:\n        average = sum(b) // n\n        # Additional logic to check if a valid sequence can be constructed\n        # This might involve checking if the average can be distributed correctly\n    ```\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(b)\n        \n        # Check if the total sum is divisible by the sum of the first n natural numbers\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a_sum) % n != 0 or (diff - total_a_sum) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a_sum) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"Read the array b of n integers, which represents the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, initialize an array a of n integers to store the initial repertoire durations.\",\n        \"Iterate over each town and calculate the possible initial repertoire duration for each singer.\",\n        \"Check if the calculated sequence satisfies the condition that the sum of concerts in each town matches the given array b.\",\n        \"If a valid sequence is found, store it; otherwise, mark the test case as impossible.\"\n      ]\n    },\n    {\n      \"description\": \"Output the results for each test case.\",\n      \"steps\": [\n        \"For each test case, if a valid sequence was found, print 'YES' followed by the sequence a.\",\n        \"If no valid sequence was found, print 'NO'.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, attempt to reconstruct a valid sequence of initial repertoire durations.\",\n    \"Output 'YES' and the sequence if a valid sequence is found; otherwise, output 'NO'.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The duration of each concert increases as the singer moves from town to town, starting with their initial repertoire.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire.\n    'k + 2': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but the calculation of the initial repertoire duration and checking if it satisfies the condition can be done in a loop for each test case. The logic for checking if the sequence is valid should be integrated into the loop that calculates the initial repertoire.\n\n# [edge case]\n    1. n = 1, b = [1] = YES, 1\n       Explanation: With only one town, the initial repertoire must equal the total concert duration.\n    2. n = 2, b = [2, 2] = NO\n       Explanation: It's impossible to have two singers with initial repertoires that satisfy the given total durations.\n    3. n = 3, b = [3, 3, 3] = YES, 1 1 1\n       Explanation: Each singer can have an initial repertoire of 1, leading to concert durations of 1, 2, and 3 in each town.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    The code should check if the sum of the calculated sequence matches the given array b for each test case. If not, it should return 'NO'.\n\n    ```python\n    def solve():\n        import sys\n        input = sys.stdin.read\n        data = input().split()\n        \n        index = 0\n        t = int(data[index])\n        index += 1\n        results = []\n        \n        for _ in range(t):\n            n = int(data[index])\n            index += 1\n            b = list(map(int, data[index:index + n]))\n            index += n\n            \n           ", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by the sum of the first n natural numbers\n        sum_n = n * (n + 1) // 2\n        if total_b % sum_n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of initial repertoires\n        total_a = total_b // sum_n\n        \n        # Calculate the sequence a\n        a = [0] * n\n        possible = True\n        for i in range(n):\n            prev = (i - 1 + n) % n\n            diff = b[i] - b[prev]\n            if (total_a + diff) % n != 0 or (total_a + diff) // n <= 0:\n                possible = False\n                break\n            a[i] = (total_a + diff) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the details for each test case.\",\n      \"steps\": [\n        \"Read the integer t, which represents the number of test cases.\",\n        \"For each test case, read the integer n, which represents the number of towns.\",\n        \"Read the array b of n integers, which represents the total duration of concerts in each town.\"\n      ]\n    },\n    {\n      \"description\": \"Determine if a valid sequence of initial repertoire durations exists for each test case.\",\n      \"steps\": [\n        \"For each test case, check if the sum of b_i is divisible by the sum of the first n natural numbers (1 to n).\",\n        \"If not divisible, output 'NO'.\",\n        \"If divisible, proceed to reconstruct the sequence a.\"\n      ]\n    },\n    {\n      \"description\": \"Reconstruct the sequence of initial repertoire durations for each test case.\",\n      \"steps\": [\n        \"Calculate the sum of the first n natural numbers (1 to n).\",\n        \"Divide the sum of b_i by the sum of the first n natural numbers to find the initial repertoire duration a_i for each singer.\",\n        \"Verify that the calculated sequence satisfies the conditions for concert durations in each town.\",\n        \"Output 'YES' followed by the sequence a if valid.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the number of test cases and the details for each test case.\",\n    \"For each test case, check if a valid sequence of initial repertoire durations exists.\",\n    \"If a valid sequence exists, reconstruct the sequence and verify its correctness.\",\n    \"Output the result for each test case, either 'NO' or 'YES' followed by the sequence.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The time each singer performs in each town, which increases as they move to the next town.\n\n# [phrase showing quantity relationship]\n    'exactly one concert'\n    Explanation: Each singer performs once in each town.\n\n    'k + 2'\n    Explanation: The concert duration increases by a factor of the number of towns visited plus two.\n\n# [degree adverb]\n    'no suitable sequence'\n    Explanation: If the conditions for constructing the sequence are not met, the output should be \"NO\".\n\n# [code logic]\n    The steps in the plan should be implemented in sequence, but the check for divisibility and the reconstruction of the sequence can be logically grouped together as they both pertain to determining the validity of the sequence.\n\n# [edge case]\n    1. Input: 1, [1] = Output: YES, [1]\n       Explanation: With only one town and one singer, the concert duration matches the repertoire.\n       \n    2. Input: 2, [3, 3] = Output: NO\n       Explanation: The sum of b_i (6) is not divisible by the sum of the first 2 natural numbers (3), making it impossible to construct a valid sequence.\n       \n    3. Input: 3, [6, 6, 6] = Output: YES, [2, 2, 2]\n       Explanation: Each singer performs for 2, 4, and 6 minutes in the towns, matching the total durations.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def handle_edge_cases(n, b):\n        total_b = sum(b)\n        sum_n = n * (n + 1) // 2\n        if total_b % sum_n != 0:\n            return \"NO\"\n        k = total_b // sum_n\n        a = []\n        for i in range(n):\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[-1]\n            if (diff - k) % n != 0 or (diff - k) // n <= 0", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        sum_n = n * (n + 1) // 2\n        \n        if total_b % sum_n != 0:\n            results.append(\"NO\")\n            continue\n        \n        k = total_b // sum_n\n        a = []\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[-1]\n            if (diff - k) % n != 0 or (diff - k) // n <= 0:\n                possible = False\n                break\n            a_i = (diff - k) // n\n            a.append(a_i)\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        sum_n = n * (n + 1) // 2\n        \n        if total_b % sum_n != 0:\n            results.append(\"NO\")\n            continue\n        \n        k = total_b // sum_n\n        a = []\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[-1]\n            if (diff - k) % n != 0 or (diff - k) // n <= 0:\n                possible = False\n                break\n            a_i = (diff - k) // n\n            a.append(a_i)\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\nsolve()\n"}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Parse the input to extract the number of test cases and the corresponding data for each test case.\",\n      \"details\": \"Read the integer t for the number of test cases. For each test case, read the integer n and the array b of size n.\"\n    },\n    {\n      \"description\": \"Determine if a valid sequence a can be reconstructed for each test case.\",\n      \"details\": \"For each test case, check if there exists a sequence a such that the total duration of concerts in each town matches the given array b.\"\n    },\n    {\n      \"description\": \"Reconstruct a valid sequence a if possible.\",\n      \"details\": \"If a valid sequence a exists, reconstruct it such that the conditions of the problem are satisfied. If multiple sequences are possible, any valid sequence can be returned.\"\n    },\n    {\n      \"description\": \"Output the result for each test case.\",\n      \"details\": \"For each test case, output 'YES' followed by the sequence a if a valid sequence exists, otherwise output 'NO'.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Read the number of test cases t.\",\n    \"For each test case, perform the following steps:\",\n    \"  a. Read the integer n and the array b of size n.\",\n    \"  b. Initialize an array a of size n to store the initial durations.\",\n    \"  c. Attempt to reconstruct the sequence a by iterating over the array b and applying the conditions given in the problem.\",\n    \"  d. Check if the reconstructed sequence a satisfies the conditions for all towns.\",\n    \"  e. If a valid sequence a is found, store 'YES' and the sequence a. Otherwise, store 'NO'.\",\n    \"Output the results for all test cases.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the concerts.\n    'concert duration': refers to the total time a singer performs in each town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    The steps to reconstruct the sequence a should be considered simultaneously with checking the conditions for all towns. This involves iterating over the array b and calculating the possible values for a while ensuring they satisfy the conditions for all towns.\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES, 1\n    Explanation: With only one town, the singer's repertoire matches the concert duration directly.\n    \n    Test case with n = 2 and b = [2, 4] = YES, 1 2\n    Explanation: The first singer performs for 1 minute in the first town and 2 minutes in the second town. The second singer performs for 2 minutes in the first town and 4 minutes in the second town.\n    \n    Test case with n = 3 and b = [3, 6, 9] = YES, 1 2 3\n    Explanation: Each singer's repertoire matches the concert duration in their respective towns.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    The logic should include checking if the sum of the calculated concert durations matches the given array b for each town, and adjusting the sequence a accordingly.\n\nYES", "Round_0": {"code": "def solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Calculate the total sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate the difference\n            diff = b[i] - b[i - 1]\n            # Calculate a[i]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                possible = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    # Print all results\n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 641, "prompt": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order and in the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town, and in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes, which was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 45}
