{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain the given substring.\n\nDescription:\nWrite a function `filter_strings` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": ["def check(filter_by_substring):\n\tassert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "def check(filter_by_substring):\n\tassert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'john') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "def check(filter_by_substring):\n\tassert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'agw') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'y') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'ii') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "def check(filter_by_substring):\n\tassert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'hm') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'u') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "def check(filter_by_substring):\n\tassert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "def check(filter_by_substring):\n\tassert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "def check(filter_by_substring):\n\tassert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'p') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "def check(filter_by_substring):\n\tassert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "def check(filter_by_substring):\n\tassert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "test_case_list": ["assert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "assert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "assert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "assert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "assert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "assert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "assert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "assert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "assert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "assert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "assert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "assert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "assert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "assert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "assert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "assert filter_by_substring([], 'john') == []", "assert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "assert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "assert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "assert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "assert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "assert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "assert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "assert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "assert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "assert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "assert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "assert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "assert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "assert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "assert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "assert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "assert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "assert filter_by_substring([], 'agw') == []", "assert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "assert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "assert filter_by_substring([], 'y') == []", "assert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "assert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "assert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "assert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "assert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "assert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "assert filter_by_substring([], 'ii') == []", "assert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "assert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "assert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "assert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "assert filter_by_substring([], 'hm') == []", "assert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "assert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "assert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "assert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "assert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "assert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "assert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "assert filter_by_substring([], 'u') == []", "assert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "assert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "assert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "assert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "assert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "assert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "assert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "assert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "assert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "assert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "assert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "assert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "assert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "assert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "assert filter_by_substring([], 'p') == []", "assert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "assert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "assert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "assert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "assert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "assert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "assert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "assert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "assert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "assert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "assert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "assert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "assert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "assert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "assert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "assert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "assert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "assert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "assert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "assert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "assert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "assert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "assert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "assert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "assert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "assert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "assert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "assert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "assert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "assert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "assert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "assert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "assert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "assert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "nl": " Filter an input list of strings only for ones that contain given substring\n    ", "func": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:", "examples": ">>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    ", "repair_prompt": ["def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain the given substring.\n\nDescription:\nWrite a function `filter_strings` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", " def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain the given substring.\n\nDescription:\nWrite a function `filter_strings` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at", " def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_strings` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substr"], "completion": "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "completions": ["from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substr.\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substr.\n    '''\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at the start, middle, or end of a string.\n    '''\n    return [string for string in strings if substring in string]", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substr\n    '''\n    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list", "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"The function should be named `filter_by_substring` and take two parameters: `strings` (a list of strings) and `substring` (a string).\"\n      },\n      {\n        \"subproblem\": \"Check if the substring is in each string of the list.\",\n        \"details\": \"Iterate through each string in the `strings` list and check if the `substring` is a substring of that string.\"\n      },\n      {\n        \"subproblem\": \"Filter the list based on the substring presence.\",\n        \"details\": \"Create a new list that includes only those strings from the original list where the `substring` is found.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of strings in the original list.\",\n        \"details\": \"Ensure that the new list maintains the same order as the original list, even if the `substring` is found at different positions within the strings.\"\n      },\n      {\n        \"subproblem\": \"Handle edge cases.\",\n        \"details\": \"Consider edge cases such as empty strings, case sensitivity, and substrings at any position within the strings.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize the function with the required parameters.\",\n        \"details\": \"Define the function `filter_by_substring` with parameters `strings` and `substring`.\"\n      },\n      {\n        \"step\": \"Create an empty list to store the filtered results.\",\n        \"details\": \"Initialize an empty list named `filtered_strings`.\"\n      },\n      {\n        \"step\": \"Iterate through each string in the input list.\",\n        \"details\": \"Use a for loop to go through each string in the `strings` list.\"\n      },\n      {\n        \"step\": \"Check if the substring is in the current string.\",\n        \"details\": \"Use the `in` keyword to check if the `substring` is a substring of the current string.\"\n      },\n      {\n        \"step\": \"Add the string to the filtered list if the substring is found.\",\n        \"details\": \"If the substring is found, append the string\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a part of a string that is contained within another string\n    Explanation: In the requirement, the core concept is the substring, which refers to any sequence of characters within a string. The function is designed to filter a list of strings, keeping only those that contain a specified substring.\n\n# [phrase showing quantity relationship]\n    'more than': means greater than a certain value\n    Explanation: The phrase \"appears at least as many times as the integer itself\" implies that the frequency of the integer in the list should be at least as much as the integer", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the requirement\",\n        \"details\": \"Ensure the requirement is clear and well-defined, including understanding the purpose of the function, the expected input and output, and any constraints or edge cases.\"\n      },\n      {\n        \"subproblem\": \"Design the function signature\",\n        \"details\": \"Define the function name, parameters, and return type based on the requirement.\"\n      },\n      {\n        \"subproblem\": \"Implement the function logic\",\n        \"details\": \"Write the Python code to filter the list of strings based on the presence of the substring. This should include handling the case-sensitive comparison and maintaining the order of strings.\"\n      },\n      {\n        \"subproblem\": \"Test the function\",\n        \"details\": \"Create test cases to validate the function works as expected. This includes testing with various inputs to ensure the function handles all edge cases correctly.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Step 1: Analyze the requirement\",\n        \"details\": \"Clarify the requirement with the user to ensure a clear understanding of what the function should do.\"\n      },\n      {\n        \"step\": \"Step 2: Design the function\",\n        \"details\": \"Design the function signature based on the requirement. Define the function name, parameters, and return type.\"\n      },\n      {\n        \"step\": \"Step 3: Implement the function\",\n        \"details\": \"Write the Python code to implement the function logic. This includes filtering the list of strings based on the presence of the substring while maintaining the order.\"\n      },\n      {\n        \"step\": \"Step 4: Test the function\",\n        \"details\": \"Create test cases to validate the function. Run the test cases to ensure the function works as expected and handles all edge cases correctly.\"\n      },\n      {\n        \"step\": \"Step 5: Review and refine\",\n        \"details\": \"Review the implementation and refine it if necessary. Ensure the code is clean, readable, and efficient.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a part of a string that is contained within another string\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specific substring. This concept is crucial as it defines the basis for the filtering process.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implement sequentially. Each step is dependent on the previous one, ensuring that the function processes the list correctly.", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"Ensure the function is defined with the correct name, parameters, and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement the function logic to filter strings.\",\n        \"details\": \"Write the code to iterate through the list of strings and check for the presence of the substring.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of strings in the original list.\",\n        \"details\": \"Ensure that the function returns a new list with strings that contain the substring, maintaining the original order.\"\n      },\n      {\n        \"subproblem\": \"Handle case-sensitive comparison.\",\n        \"details\": \"Implement the comparison logic to ensure the substring check is case-sensitive.\"\n      },\n      {\n        \"subproblem\": \"Ensure the function handles substrings correctly.\",\n        \"details\": \"Test the function with various substrings and strings to confirm it works as expected.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function `filter_by_substring` with the specified parameters.\",\n        \"details\": \"Ensure the function is correctly named and has the appropriate type hints for the parameters and return value.\"\n      },\n      {\n        \"step\": \"2. Implement the logic to iterate through the list of strings.\",\n        \"details\": \"Use a loop to go through each string in the input list and check if it contains the specified substring.\"\n      },\n      {\n        \"step\": \"3. Check for the presence of the substring in each string.\",\n        \"details\": \"Use an appropriate method to check if the substring is present in the current string.\"\n      },\n      {\n        \"step\": \"4. Collect the strings that contain the substring.\",\n        \"details\": \"Create a new list to store the strings that pass the substring check.\"\n      },\n      {\n        \"step\": \"5. Return the new list containing the filtered strings.\",\n        \"details\": \"Ensure the function returns the new list with the filtered strings.\"\n      },\n      {\n        \"step\": \"6. Test the function with various inputs to ensure it works as expected.\",\n        \"\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a part of a string that is contained within another string\n    Explanation: In the requirement, the core concept is the substring, which refers to any sequence of characters within a string. The function is designed to filter a list of strings, keeping only those that contain a specific substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be implement simultaneously.\n    \"Implement the logic to iterate through the", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substr.\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substr.\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"Ensure the function is defined with the correct name, parameters, and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement the function logic to filter strings.\",\n        \"details\": \"Iterate through the list of strings and check if each string contains the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of strings in the original list.\",\n        \"details\": \"Use a list comprehension or a loop to filter the strings while preserving their original order.\"\n      },\n      {\n        \"subproblem\": \"Handle edge cases.\",\n        \"details\": \"Consider cases where the input list might be empty or the substring is not found in any string.\"\n      },\n      {\n        \"subproblem\": \"Write unit tests for the function.\",\n        \"details\": \"Create test cases to verify the function works as expected with various inputs.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function `filter_by_substring` with the appropriate parameters.\",\n        \"details\": \"Ensure the function is named correctly and has the correct type hints for the parameters and return value.\"\n      },\n      {\n        \"step\": \"2. Implement the function logic using a list comprehension or a loop.\",\n        \"details\": \"Iterate through each string in the input list and check if it contains the specified substring.\"\n      },\n      {\n        \"step\": \"3. Preserve the order of strings from the original list.\",\n        \"details\": \"Collect the strings that contain the substring into a new list, maintaining the order from the original list.\"\n      },\n      {\n        \"step\": \"4. Handle edge cases.\",\n        \"details\": \"Add checks to handle cases where the input list is empty or the substring is not found in any of the strings.\"\n      },\n      {\n        \"step\": \"5. Test the function with various test cases.\",\n        \"details\": \"Use the defined unit tests to verify that the function works correctly for different inputs.\"\n      },\n      {\n        \"step\": \"6. Review and refine the function.\",\n        \"details\": \"\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a part of a string that is contained within another string\n    Explanation: In the requirement, the substring is a sequence of characters within a string that we are interested in finding. The comparison should be case-sensitive, meaning 'a' is not the same as 'A'.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-3 should be implement simultaneously.\n    \"Implement the function logic using a list comprehension", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substr.\n    '''\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substr.\n    '''\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the requirement\",\n        \"details\": \"Ensure the requirement is clear and the user's intent is well understood.\"\n      },\n      {\n        \"subproblem\": \"Design the function signature\",\n        \"details\": \"Define the function `filter_by_substring` with appropriate parameters and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement the function logic\",\n        \"details\": \"Write the code to filter the list of strings based on the presence of the substring.\"\n      },\n      {\n        \"subproblem\": \"Test the function\",\n        \"details\": \"Create test cases to verify the function works as expected, including edge cases.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Analyze the requirement\",\n        \"details\": \"Clarify the requirement with the user to ensure understanding of the task.\"\n      },\n      {\n        \"step\": \"2. Design the function\",\n        \"details\": \"Define the function signature based on the requirement and decompose the task into manageable parts.\"\n      },\n      {\n        \"step\": \"3. Implement the function\",\n        \"details\": \"Write the Python code to implement the function logic, ensuring it meets the requirement specifications.\"\n      },\n      {\n        \"step\": \"4. Test the function\",\n        \"details\": \"Execute the test cases to validate the function's correctness and robustness.\"\n      },\n      {\n        \"step\": \"5. Review and refine\",\n        \"details\": \"Review the implementation and refine if necessary based on testing feedback.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a sequence of characters within a string.\n    Explanation: In the requirement, the substring is a part of the string that we are looking for within another string. The comparison should be case-sensitive and should consider substrings at any position within the strings.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be implement simultaneously.\n    \"Write the Python code to implement the function logic\" should include", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    return [string for string in strings if substring in string]"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the requirement\",\n        \"details\": \"Ensure the requirement is clear and the user's intent is well understood.\"\n      },\n      {\n        \"subproblem\": \"Design the function signature\",\n        \"details\": \"Define the function `filter_by_substring` with appropriate parameters and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement the function logic\",\n        \"details\": \"Write the code to filter the list of strings based on the presence of the substring.\"\n      },\n      {\n        \"subproblem\": \"Test the function\",\n        \"details\": \"Create test cases to verify the function works as expected, including edge cases.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Step 1: Understand the requirement\",\n        \"details\": \"Clarify the requirement with the user to ensure a clear understanding of what is expected.\"\n      },\n      {\n        \"step\": \"Step 2: Design the function signature\",\n        \"details\": \"Design the function `filter_by_substring` with parameters `strings` (list of strings) and `substring` (string), and specify the return type as `List[str]`.\"\n      },\n      {\n        \"step\": \"Step 3: Implement the function logic\",\n        \"details\": \"Write the function to iterate through the list of strings, check for the presence of the substring, and collect the strings that contain the substring. Maintain the order of strings as in the original list.\"\n      },\n      {\n        \"step\": \"Step 4: Test the function\",\n        \"details\": \"Develop a set of test cases to validate the function's correctness. Include cases with different string lengths, positions of the substring, and case sensitivity.\"\n      },\n      {\n        \"step\": \"Step 5: Review and refine\",\n        \"details\": \"Review the implementation and test results. Refine the function if necessary to ensure it meets the user's requirements and handles edge cases appropriately.\"\n      },\n      {\n        \"step\": \"Step 6: Document the function\",\n        \"details\": \"Document the function with a clear description, parameters, return type, and\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a part of a string that is contained within another string\n    Explanation: In the requirement, the substring is a smaller sequence of characters within a larger string. The function should filter the list of strings to include only those that contain the specified substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implement sequentially. Each string in the list should be checked for the presence of the substring.\n\n# [edge case", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the input and output requirements.\",\n        \"details\": \"Ensure the function takes a list of strings and a substring as input and returns a list of strings that contain the given substring.\"\n      },\n      {\n        \"subproblem\": \"Implement the function to filter strings based on the substring.\",\n        \"details\": \"Create a function `filter_by_substring` that iterates through the list of strings and checks if each string contains the specified substring.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of strings in the original list.\",\n        \"details\": \"Ensure that the function returns a new list with the filtered strings, maintaining the order from the original list.\"\n      },\n      {\n        \"subproblem\": \"Handle case sensitivity.\",\n        \"details\": \"Implement the comparison to be case-sensitive as per the requirement.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature.\",\n        \"details\": \"Start by defining the function `filter_by_substring` with the appropriate parameters.\"\n      },\n      {\n        \"step\": \"Initialize an empty list to store the results.\",\n        \"details\": \"Create a new list to hold the strings that contain the substring.\"\n      },\n      {\n        \"step\": \"Iterate through the input list.\",\n        \"details\": \"Use a loop to go through each string in the input list.\"\n      },\n      {\n        \"step\": \"Check if the substring is in the current string.\",\n        \"details\": \"For each string, check if the specified substring is found within it.\"\n      },\n      {\n        \"step\": \"Add the string to the result list if the substring is found.\",\n        \"details\": \"If the substring is found, add the string to the result list.\"\n      },\n      {\n        \"step\": \"Return the result list.\",\n        \"details\": \"After the loop, return the list containing only the strings that contain the substring.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a part of a string that is contained within another string\n    Explanation: In the requirement, the substring is a specific segment of characters that should be found within the strings listed in the input. The comparison should be case-sensitive, meaning 'a' is not the same as 'A'.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3-5 should be implement simultaneously.\n    \"Iterate through the input", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the requirement\",\n        \"details\": \"Ensure the requirement is clear and well-defined, including understanding the purpose of the function, the expected input and output, and any constraints or special considerations.\"\n      },\n      {\n        \"subproblem\": \"Design the function signature\",\n        \"details\": \"Define the function parameters and return type based on the requirement. Specifically, the function should take a list of strings and a substring as input and return a list of strings.\"\n      },\n      {\n        \"subproblem\": \"Implement the filtering logic\",\n        \"details\": \"Write the logic to iterate through the list of strings and check if each string contains the given substring. Use list comprehension or a loop to filter the strings.\"\n      },\n      {\n        \"subproblem\": \"Maintain order of strings\",\n        \"details\": \"Ensure that the order of strings in the output list matches the order of strings in the input list. This is crucial as per the requirement.\"\n      },\n      {\n        \"subproblem\": \"Test the function\",\n        \"details\": \"Write test cases to verify the correctness of the function. Test various scenarios including strings that contain the substring, strings that do not contain the substring, and edge cases such as empty strings or the substring being at the start or end of a string.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Analyze the requirement\",\n        \"details\": \"Clarify the requirement with the user to ensure a clear understanding of what the function should do.\"\n      },\n      {\n        \"step\": \"2. Design the function\",\n        \"details\": \"Define the function signature based on the requirement and decompose the problem into smaller subproblems.\"\n      },\n      {\n        \"step\": \"3. Implement the function\",\n        \"details\": \"Write the code to implement the function based on the high-level plan and the decomposed subproblems.\"\n      },\n      {\n        \"step\": \"4. Test the function\",\n        \"details\": \"Run the test cases to ensure the function works as expected and meets the requirements.\"\n      },\n      {\n        \"step\": \"5. Review and refine\",\n        \"details\": \"\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a part of a string that is contained within another string\n    Explanation: In the requirement, the function is designed to filter a list of strings to include only those that contain a specific substring. This concept is crucial for understanding the functionality of the function.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be implement simultaneously.\n    \"Analyze the requirement\",\n    \"Design the function signature\",", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at the start, middle, or end of a string.\n    '''\n    return [string for string in strings if substring in string]", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at the start, middle, or end of a string.\n    '''\n    return [string for string in strings if substring in string]"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"The function should be named `filter_by_substring` and take two parameters: `strings` (a list of strings) and `substring` (a string).\"\n      },\n      {\n        \"subproblem\": \"Check if the substring is in each string of the list.\",\n        \"details\": \"Iterate through each string in the `strings` list and check if the `substring` is a substring of that string.\"\n      },\n      {\n        \"subproblem\": \"Filter the list based on the substring presence.\",\n        \"details\": \"Create a new list that includes only those strings from the original list where the `substring` is found.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of strings in the original list.\",\n        \"details\": \"Ensure that the new list maintains the same order as the original list, even if the `substring` is found at different positions within the strings.\"\n      },\n      {\n        \"subproblem\": \"Handle edge cases.\",\n        \"details\": \"Consider edge cases such as empty strings or cases where the `substring` is not found in any of the strings.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature and parameters.\",\n        \"details\": \"Start by defining the function with the required parameters.\"\n      },\n      {\n        \"step\": \"Iterate through the list of strings.\",\n        \"details\": \"Use a loop to go through each string in the `strings` list.\"\n      },\n      {\n        \"step\": \"Check for the substring.\",\n        \"details\": \"Use a conditional check to see if the `substring` is a substring of the current string.\"\n      },\n      {\n        \"step\": \"Filter the list.\",\n        \"details\": \"Add the string to a new list if the `substring` is found.\"\n      },\n      {\n        \"step\": \"Return the filtered list.\",\n        \"details\": \"After the loop, return the new list containing only the strings that contain the `substring`.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a part of a string that is contained within another string\n    Explanation: In the requirement, the core concept is the concept of a substring, which is a sequence of characters within a string. The function is designed to filter a list of strings to include only those that contain a specific substring.\n\n# [phrase showing quantity relationship]\n    'more than': means greater than\n    Explanation: The phrase \"more than\" is used to indicate that a certain condition must be met a certain number of times. In this case, it is used to specify that the", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"Ensure the function is defined with the correct name, parameters, and return type.\"\n      },\n      {\n        \"subproblem\": \"Implement the function logic to filter strings.\",\n        \"details\": \"Write the code to iterate through the list of strings and check for the presence of the substring.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of strings in the original list.\",\n        \"details\": \"Ensure that the filtered list maintains the same order as the original list.\"\n      },\n      {\n        \"subproblem\": \"Handle case sensitivity.\",\n        \"details\": \"Ensure the function considers the case of the characters when checking for the substring.\"\n      },\n      {\n        \"subproblem\": \"Test the function with various inputs.\",\n        \"details\": \"Create test cases to verify the function works as expected for different inputs.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"1. Define the function `filter_by_substring` with the appropriate parameters.\",\n        \"details\": \"Ensure the function is defined with a list of strings and a substring as parameters.\"\n      },\n      {\n        \"step\": \"2. Initialize an empty list to store the filtered results.\",\n        \"details\": \"This list will be populated with strings that contain the given substring.\"\n      },\n      {\n        \"step\": \"3. Iterate through each string in the input list.\",\n        \"details\": \"For each string, check if the substring is present.\"\n      },\n      {\n        \"step\": \"4. If the substring is found in the string, add it to the filtered list.\",\n        \"details\": \"Maintain the order of strings as they appear in the original list.\"\n      },\n      {\n        \"step\": \"5. Return the filtered list.\",\n        \"details\": \"Ensure the function returns the list of strings that contain the substring.\"\n      },\n      {\n        \"step\": \"6. Test the function with a variety of test cases to ensure it works as expected.\",\n        \"details\": \"Check for both positive and negative cases, including strings that do and do not contain the substring\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring presence': means checking if a given substring is present in each string of a list.\n    'case sensitivity': means the comparison should consider the case of the characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    Steps 3-4 should be implemented simultaneously.\n    \"Iterate through each string in the input list\" and \"check if the substring is present\" can be combined into a single loop where we check for the presence", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substr\n    '''\n    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substr\n    '''\n    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Define the function signature and parameters.\",\n        \"details\": \"The function should be named `filter_by_substring` and take two parameters: `strings` (a list of strings) and `substring` (a string).\"\n      },\n      {\n        \"subproblem\": \"Check if the substring is in each string of the list.\",\n        \"details\": \"Iterate through each string in the `strings` list and check if the `substring` is a substring of that string.\"\n      },\n      {\n        \"subproblem\": \"Filter the list based on the substring presence.\",\n        \"details\": \"Create a new list that includes only those strings from the original list where the `substring` is found.\"\n      },\n      {\n        \"subproblem\": \"Maintain the order of strings in the original list.\",\n        \"details\": \"Ensure that the new list maintains the same order as the original list, even if the `substring` is found at different positions within the strings.\"\n      },\n      {\n        \"subproblem\": \"Handle edge cases.\",\n        \"details\": \"Consider edge cases such as empty strings, case sensitivity, and substrings at any position within the strings.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Initialize the function with the required parameters.\",\n        \"details\": \"Define the function `filter_by_substring` with parameters `strings` and `substring`.\"\n      },\n      {\n        \"step\": \"Create an empty list to store the filtered results.\",\n        \"details\": \"Initialize an empty list named `filtered_strings`.\"\n      },\n      {\n        \"step\": \"Iterate through each string in the input list.\",\n        \"details\": \"Use a for loop to go through each string in the `strings` list.\"\n      },\n      {\n        \"step\": \"Check if the substring is in the current string.\",\n        \"details\": \"Use the `in` keyword to check if the `substring` is a substring of the current string.\"\n      },\n      {\n        \"step\": \"Add the string to the filtered list if the substring is found.\",\n        \"details\": \"If the substring is found, append the string\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'substring': means a part of a string that is contained within another string\n    Explanation: In the requirement, the core concept is the substring, which refers to any sequence of characters within a string. The function is designed to filter a list of strings, keeping only those that contain a specified substring.\n\n# [phrase showing quantity relationship]\n    'more than': means greater than a certain value\n    Explanation: The phrase \"appears at least as many times as the integer itself\" implies that the frequency of the integer in the list should be at least as much as the integer", "Round_0": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "report": "The compilation output of the preceding code is: name 'List' is not defined"}, "Round_1": {"code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    '''Filter an input list of strings only for ones that contain the given substring.\n\n    Description:\n    Write a function `filter_by_substring` that takes a list of strings and a substring as input and returns a new list containing only the strings that contain the given substring. The function should maintain the order of strings in the original list. You can assume that the input list and the substring will be non-empty. It's important to note that the comparison should be case-sensitive and should consider substrings at any position within the strings.\n    >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    '''\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [106, 106, 106, 106, 106, 106, 106, 106, 106, 106], "passed": true, "pass": true, "pass_num": 6, "round": 146, "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 124}
