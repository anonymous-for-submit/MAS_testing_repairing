{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if the list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if the list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", " def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    True\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 2, 2, 2])\n    True\n    >>> monotonic([1, 3, 2, 4])\n    False\n    '''", " def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completion": "from typing import *\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "completions": ["from typing import *\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n        '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "from typing import *\ndef is_non_decreasing(lst):\n    return all(x <= y for x, y in zip(lst, lst[1:]))\n\ndef is_non_increasing(lst):\n    return all(x >= y for x, y in zip(lst, lst[1:]))\n\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_non_decreasing(l) or is_non_increasing(l)", "from typing import *\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    True\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 2, 2, 2])\n    True\n    >>> monotonic([1, 3, 2, 4])\n    False\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    True\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 2, 2, 2])\n    True\n    >>> monotonic([1, 3, 2, 4])\n    False\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "from typing import *\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    True\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 2, 2, 2])\n    True\n    >>> monotonic([1, 3, 2, 4])\n    False\n    '''\n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        if l[i] > l[i + 1]:\n            increasing = False\n    \n    return increasing or decreasing", "from typing import *\ndef is_monotonic_increasing(l: list):\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list):\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "from typing import *\ndef is_non_decreasing(lst):\n    return all(x <= y for x, y in zip(lst, lst[1:]))\n\ndef is_non_increasing(lst):\n    return all(x >= y for x, y in zip(lst, lst[1:]))\n\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_non_decreasing(l) or is_non_increasing(l)", "from typing import *\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\"\n      },\n      {\n        \"step\": \"Implement a function to check if the list is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement a function to check if the list is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results of the two checks to determine if the list is monotonic.\"\n      },\n      {\n        \"step\": \"Return the result of the monotonicity check.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n    Explanation: A list is considered monotonic if it either always increases (each element is less than or equal to the next) or always decreases (each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The steps 2-4 should be considered simultaneously.\n    \"Implement a function to check if the list", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\"\n      },\n      {\n        \"step\": \"Implement a function to check if the list is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement a function to check if the list is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results of the two checks to determine if the list is monotonic.\"\n      },\n      {\n        \"step\": \"Return the result of the monotonicity check.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n    Explanation: A list is considered monotonic if it either always increases (i.e., each element is less than or equal to the next) or always decreases (i.e., each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The steps 2-4 should be considered simultaneously.\n    \"", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n        '''\n    if len(l) < 2:\n        return True\n    \n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the definition of monotonicity in the context of lists.\",\n        \"details\": \"Determine if a list is either entirely non-decreasing or non-increasing.\"\n      },\n      {\n        \"subproblem\": \"Identify the criteria for a list to be considered monotonic.\",\n        \"details\": \"A list is monotonic if it is either entirely non-decreasing (each element is less than or equal to the next) or non-increasing (each element is greater than or equal to the next).\"\n      },\n      {\n        \"subproblem\": \"Develop a function to check if a list is non-decreasing.\",\n        \"details\": \"Create a helper function that returns True if the list is non-decreasing.\"\n      },\n      {\n        \"subproblem\": \"Develop a function to check if a list is non-increasing.\",\n        \"details\": \"Create a helper function that returns True if the list is non-increasing.\"\n      },\n      {\n        \"subproblem\": \"Combine the results of the non-decreasing and non-increasing checks to determine if the list is monotonic.\",\n        \"details\": \"Use the helper functions to check both conditions and return True if either condition is met.\"\n      },\n      {\n        \"subproblem\": \"Implement the function based on the decomposed subproblems.\",\n        \"details\": \"Write the Python function 'monotonic' that uses the helper functions to check the list and return the appropriate boolean value.\"\n      },\n      {\n        \"subproblem\": \"Test the function with various inputs to ensure it works correctly.\",\n        \"details\": \"Create test cases that cover different scenarios including increasing, decreasing, and mixed lists.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Analyze the requirement and understand the concept of monotonicity.\",\n        \"details\": \"Clarify the definition and requirements with the team.\"\n      },\n      {\n        \"step\": \"Decompose the requirement into manageable subproblems.\",\n        \"details\": \"Break down the main task into smaller, more specific tasks.\"\n      },\n      {\n        \"step\": \"Develop the necessary helper functions.\",\n        \"details\": \"Create functions to check if a list is non-decreasing or non-increasing.\"\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means that the list either always increases or always decreases.\n    Explanation: A list is considered monotonic if it either consistently increases (each element is less than or equal to the next) or consistently decreases (each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3-5 should be considered simultaneously.\n    \"Develop a function to check if a list is non-decreasing.\"", "Round_0": {"code": "def is_non_decreasing(lst):\n    return all(x <= y for x, y in zip(lst, lst[1:]))\n\ndef is_non_increasing(lst):\n    return all(x >= y for x, y in zip(lst, lst[1:]))\n\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_non_decreasing(l) or is_non_increasing(l)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the criteria for a list to be considered monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is strictly increasing.\",\n          \"Check if the list is strictly decreasing.\",\n          \"Return True if either condition is met, otherwise return False.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check if a list is strictly increasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return False if any element is greater than the next element.\",\n          \"Return True if the loop completes without finding any such pair.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check if a list is strictly decreasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return False if any element is less than the next element.\",\n          \"Return True if the loop completes without finding any such pair.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Analyze the requirement to understand the need for a function that checks if a list is monotonically increasing or decreasing.\",\n      \"Decompose the requirement into subproblems of checking for strict increase and strict decrease.\",\n      \"Implement the logic for checking strict increase and strict decrease.\",\n      \"Combine the results of the two checks to determine if the list is monotonic.\",\n      \"Write the function based on the implemented logic.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n    Explanation: A list is considered monotonic if it is either entirely non-increasing (each element is less than or equal to the next) or non-decreasing (each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2-4 should be considered simultaneously. The function should check both for strict increase and", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    True\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 2, 2, 2])\n    True\n    >>> monotonic([1, 3, 2, 4])\n    False\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\"\n      },\n      {\n        \"step\": \"Implement a function to check if the list is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement a function to check if the list is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results of the two checks to determine if the list is monotonic.\"\n      },\n      {\n        \"step\": \"Return the result of the monotonicity check.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n    Explanation: A list is considered monotonic if it either always increases (each element is less than or equal to the next) or always decreases (each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The steps 2-4 should be considered simultaneously.\n    \"Implement a function to check if the list", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\"\n      },\n      {\n        \"step\": \"Implement a function to check if the list is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement a function to check if the list is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results of the two checks to determine if the list is monotonic.\"\n      },\n      {\n        \"step\": \"Return the result of the monotonicity check.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means that the list either consistently increases or consistently decreases without any reversals.\n    Explanation: A list is considered monotonic if it either always increases (i.e., each element is less than or equal to the next) or always decreases (i.e., each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The steps 2-4 should be considered simultaneously. We need", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the criteria for a list to be considered monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is strictly increasing.\",\n          \"Check if the list is strictly decreasing.\",\n          \"Return True if either condition is met, otherwise return False.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check if a list is strictly increasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return False if any element is greater than the next element.\",\n          \"Return True if the loop completes without finding any such pair.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check if a list is strictly decreasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return False if any element is less than the next element.\",\n          \"Return True if the loop completes without finding any such pair.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Analyze the requirement to understand the need for a function that checks if a list is monotonically increasing or decreasing.\",\n      \"Decompose the requirement into subproblems of checking for strict increase and strict decrease.\",\n      \"Implement the logic for checking strict increase and strict decrease.\",\n      \"Combine the results of the two checks to determine if the list is monotonic.\",\n      \"Write the function based on the combined logic.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n    Explanation: A list is considered monotonic if it either always increases (i.e., each element is less than or equal to the next) or always decreases (i.e., each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 1-3 should be considered simultaneously.\n    \"Check if", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    True\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 2, 2, 2])\n    True\n    >>> monotonic([1, 3, 2, 4])\n    False\n    '''\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Identify the criteria for a list to be considered monotonically increasing or decreasing.\",\n        \"steps\": [\n          \"Check if the list is strictly increasing.\",\n          \"Check if the list is strictly decreasing.\",\n          \"Return True if either condition is met, otherwise return False.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check if a list is strictly increasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return False if any element is greater than the next element.\",\n          \"Return True if the loop completes without finding any such pair.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the logic to check if a list is strictly decreasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return False if any element is less than the next element.\",\n          \"Return True if the loop completes without finding any such pair.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Analyze the requirement to understand the need for a function that checks if a list is monotonically increasing or decreasing.\",\n      \"Decompose the requirement into subproblems for checking increasing and decreasing lists.\",\n      \"Implement the logic for checking increasing and decreasing lists.\",\n      \"Combine the results from the increasing and decreasing checks to determine the final result.\",\n      \"Write the function based on the implemented logic.\",\n      \"Test the function with the provided test cases to ensure it meets the requirements.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either always increasing or always decreasing.\n    Explanation: A list is considered monotonic if it either consistently increases or consistently decreases without any reversals. This includes lists that are strictly increasing or strictly decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2 and 3 should be considered simultaneously. Both checks (increasing and decreasing) can be performed in a single pass through the list by comparing each element with the", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    True\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 2, 2, 2])\n    True\n    >>> monotonic([1, 3, 2, 4])\n    False\n    '''\n    increasing = True\n    decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        if l[i] > l[i + 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the definition of monotonicity in the context of lists.\",\n        \"steps\": [\n          \"Identify if the list is strictly increasing.\",\n          \"Identify if the list is strictly decreasing.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically increasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return True if all comparisons show that each element is less than or equal to the next one.\",\n          \"Return False otherwise.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement a function to check if a list is monotonically decreasing.\",\n        \"steps\": [\n          \"Iterate through the list and compare each element with the next one.\",\n          \"Return True if all comparisons show that each element is greater than or equal to the next one.\",\n          \"Return False otherwise.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Combine the results of the increasing and decreasing checks to determine if the list is monotonic.\",\n        \"steps\": [\n          \"Use the results from the increasing and decreasing checks to determine if the list is monotonic.\",\n          \"Return True if either the list is monotonically increasing or decreasing.\",\n          \"Return False otherwise.\"\n        ]\n      },\n      {\n        \"subproblem\": \"Implement the main function based on the user requirement.\",\n        \"steps\": [\n          \"Define the function 'monotonic' as per the user requirement.\",\n          \"Call the appropriate functions to check for monotonicity.\",\n          \"Return the result of the monotonicity check.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"step\": \"Analyze the user requirement to identify the main task.\",\n        \"substeps\": [\n          \"Understand the purpose of the function 'monotonic'.\",\n          \"Identify the need to check for both increasing and decreasing monotonicity.\"\n        ]\n      },\n      {\n        \"step\": \"Decompose the main task into manageable subproblems.\",\n        \"substeps\": [\n          \"Decompose the requirement into subproblems for increasing and decreasing checks.\",\n          \"Ensure each subproblem is clear and can\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list is either strictly increasing or strictly decreasing.\n    Explanation: A list is considered monotonic if it either consistently increases or consistently decreases without any reversals.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    Steps 2-4 should be implemented simultaneously.\n    \"Identify if the list is strictly increasing.\"\n    \"Identify if the list is strictly decreasing.\"\n    These steps can be combined into a single function that", "Round_0": {"code": "def is_monotonic_increasing(l: list):\n    return all(x <= y for x, y in zip(l, l[1:]))\n\ndef is_monotonic_decreasing(l: list):\n    return all(x >= y for x, y in zip(l, l[1:]))\n\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_monotonic_increasing(l) or is_monotonic_decreasing(l)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Understand the definition of monotonicity in the context of lists.\",\n        \"details\": \"Determine if a list is either entirely non-decreasing or non-increasing.\"\n      },\n      {\n        \"subproblem\": \"Identify the criteria for a list to be considered monotonic.\",\n        \"details\": \"A list is monotonic if it is either entirely non-decreasing (each element is less than or equal to the next) or non-increasing (each element is greater than or equal to the next).\"\n      },\n      {\n        \"subproblem\": \"Develop a function to check if a list is non-decreasing.\",\n        \"details\": \"Create a helper function that returns True if the list is non-decreasing.\"\n      },\n      {\n        \"subproblem\": \"Develop a function to check if a list is non-increasing.\",\n        \"details\": \"Create a helper function that returns True if the list is non-increasing.\"\n      },\n      {\n        \"subproblem\": \"Combine the results of the non-decreasing and non-increasing checks to determine if the list is monotonic.\",\n        \"details\": \"Implement the main function 'monotonic' that uses the helper functions to return True if the list is monotonic, otherwise False.\"\n      },\n      {\n        \"subproblem\": \"Write the docstring for the 'monotonic' function.\",\n        \"details\": \"Ensure the docstring accurately describes the function's purpose, arguments, and return value.\"\n      },\n      {\n        \"subproblem\": \"Test the 'monotonic' function with various examples.\",\n        \"details\": \"Use the provided examples and other test cases to verify the correctness of the implementation.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Analyze the requirement and understand the definition of monotonicity.\",\n        \"details\": \"Clarify the requirements and ensure understanding of the task.\"\n      },\n      {\n        \"step\": \"Decompose the requirement into subproblems.\",\n        \"details\": \"Break down the main task into smaller, manageable parts.\"\n      },\n      {\n        \"step\": \"Implement helper functions to check for non-decreasing and non-increasing lists.\",\n        \"details\": \"Develop the necessary functions to assist in\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means that the list either always increases or always decreases.\n    Explanation: A list is considered monotonic if it is either entirely non-decreasing (each element is less than or equal to the next) or non-increasing (each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 3-5 should be considered simultaneously.\n    \"Develop a function to check if a list is", "Round_0": {"code": "def is_non_decreasing(lst):\n    return all(x <= y for x, y in zip(lst, lst[1:]))\n\ndef is_non_increasing(lst):\n    return all(x >= y for x, y in zip(lst, lst[1:]))\n\ndef monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    return is_non_decreasing(l) or is_non_increasing(l)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"subproblem\": \"Extract the list from the requirement.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically increasing.\"\n      },\n      {\n        \"subproblem\": \"Check if the list is monotonically decreasing.\"\n      },\n      {\n        \"subproblem\": \"Return True if the list is either monotonically increasing or decreasing, otherwise return False.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Parse the requirement to extract the list.\"\n      },\n      {\n        \"step\": \"Implement a function to check if the list is monotonically increasing.\"\n      },\n      {\n        \"step\": \"Implement a function to check if the list is monotonically decreasing.\"\n      },\n      {\n        \"step\": \"Combine the results of the two checks to determine if the list is monotonic.\"\n      },\n      {\n        \"step\": \"Return the result of the monotonicity check.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'monotonic': means the list either consistently increases or consistently decreases without any reversals.\n    Explanation: A list is considered monotonic if it either always increases (each element is less than or equal to the next) or always decreases (each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The steps 2-4 should be considered simultaneously.\n    \"Implement a function to check if the list", "Round_0": {"code": "def monotonic(l: list):\n    '''Return True if the list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 2:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "passed": true, "pass": true, "pass_num": 10, "round": 658, "mutate_method": "condense_two2one", "save_node": false, "parent_index": 557}
