{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree. Consider using the Pythagorean theorem to determine if the triangle is right-angled.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "test": ["def check(right_angle_triangle):\n\tassert right_angle_triangle(273, 936, 975) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 380, 475) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(705, 376, 799) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(870, 464, 986) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3504, 4015, 5329) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(525, 280, 595) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1536, 1760, 2336) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(175, 600, 625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(455, 1560, 1625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(259, 888, 925) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(490, 1680, 1750) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1185, 632, 1343) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2256, 2585, 3431) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1155, 616, 1309) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 7, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(54, 72, 90) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(20, 12, 16) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2736, 3135, 4161) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(518, 1776, 1850) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 7, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 6, 8) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 5, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 15) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(280, 960, 1000) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 9, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 7, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(765, 408, 867) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(69, 92, 115) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(140, 336, 364) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(240, 144, 192) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(780, 468, 624) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3888, 4455, 5913) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(14, 8, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(204, 272, 340) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 7, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1035, 552, 1173) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(243, 324, 405) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(581, 1992, 2075) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(11, 5, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(820, 492, 656) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(900, 480, 1020) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(360, 864, 936) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 1, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 3, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(210, 112, 238) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1000, 600, 800) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 684, 741) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(65, 156, 169) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(960, 576, 768) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3792, 4345, 5767) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 4, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 12, 13) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 6, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(160, 384, 416) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2880, 3300, 4380) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 5, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 24, 25) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 17) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4752, 5445, 7227) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4656, 5335, 7081) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(380, 912, 988) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(350, 840, 910) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 4, 5) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(70, 42, 56) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 9, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(201, 268, 335) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(170, 408, 442) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 16, 20) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(305, 732, 793) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 552, 598) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 5, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(235, 564, 611) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(81, 108, 135) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 28, 35) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(234, 312, 390) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 138, 184) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(168, 576, 600) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1095, 584, 1241) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(320, 192, 256) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 2, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(528, 605, 803) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1455, 776, 1649) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 72, 75) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2544, 2915, 3869) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(610, 366, 488) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 10, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(219, 292, 365) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(192, 220, 292) == True"], "entry_point": "right_angle_triangle", "completion": "from typing import *\ndef right_angle_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n", "completions": ["from typing import *\ndef right_angle_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n", "from typing import *\ndef right_angle_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n", "from typing import *\ndef right_angle_triangle(a, b, c):\n    # Validate the input to ensure all sides are positive integers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Calculate the squares of the three sides\n    a_squared = a ** 2\n    b_squared = b ** 2\n    c_squared = c ** 2\n    \n    # Check if the sum of the squares of two shorter sides is equal to the square of the longest side\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False\n", "from typing import *\ndef right_angle_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n", "from typing import *\ndef right_angle_triangle(a, b, c):\n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b > c and a + c > b and b + c > a:\n        # Use the Pythagorean theorem to check if the triangle is right-angled\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n", "from typing import *\ndef right_angle_triangle(a, b, c):\n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b > c and a + c > b and b + c > a:\n        # Use the Pythagorean theorem to check if the triangle is right-angled\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n", "from typing import *\ndef right_angle_triangle(a, b, c):\n    # Validate the input to ensure all sides are positive integers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Calculate the squares of the three sides\n    a_squared = a ** 2\n    b_squared = b ** 2\n    c_squared = c ** 2\n    \n    # Check if the sum of the squares of two shorter sides is equal to the square of the longest side to determine if it is a right-angled triangle\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False\n", "from typing import *\ndef right_angle_triangle(a, b, c):\n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b > c and a + c > b and b + c > a:\n        # Use the Pythagorean theorem (a^2 + b^2 = c^2) to check if the triangle is right-angled\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n", "from typing import *\ndef right_angle_triangle(a, b, c):\n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b > c and a + c > b and b + c > a:\n        # Use the Pythagorean theorem (a^2 + b^2 = c^2) to check if the triangle is right-angled\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # Output: True\nprint(right_angle_triangle(1, 2, 3))  # Output: False\n", "from typing import *\ndef right_angle_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Validate the input to ensure all sides are positive integers\",\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Calculate the squares of the three sides\",\n      \"Check if the sum of the squares of two shorter sides is equal to the square of the longest side to determine if it is a right-angled triangle\",\n      \"Return True if it is a right-angled triangle, False otherwise\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The step 2 and 3 could be implemented simultaneously:\n    \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n    \"Calculate the squares of the three sides\"\n    This can be done by first checking if the sum of any two sides is greater than the third side, and then calculating the squares of the sides.\n\n# [edge case] \n    right_angle_triangle(1, 1, 2) = False\n    Explanation: The sum of the two shorter sides (1+1) is not greater than the longest side (2), so it does not form a triangle.\n    right_angle_triangle(3, 4, 5) = True\n    Explanation: The sum of the squares of the two shorter sides (3^2 + 4^2 = 9 + 16 = 25) is equal to the square of the longest side (5^2 = 25), forming a right-angled triangle.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a + b <= c or a + c <= b or b + c <= a:\n            return False\n        (other code)\n\n# NO", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Validate the input to ensure all sides are positive integers\",\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Calculate the squares of the three sides\",\n      \"Check if the sum of the squares of two shorter sides is equal to the square of the longest side to determine if it is a right-angled triangle\",\n      \"Return True if it is a right-angled triangle, False otherwise\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle being a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The step 2 and 3 should be implemented simultaneously:\n    \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n    \"Calculate the squares of the three sides\"\n    This can be done by first checking the triangle inequality theorem to validate if a triangle can be formed, and then calculating the squares of the sides.\n\n# [edge case] \n    right_angle_triangle(1, 1, 2) = False\n    Explanation: The sum of the two shorter sides is not greater than the longest side, so it does not form a triangle.\n    right_angle_triangle(3, 4, 5) = True\n    Explanation: The sides satisfy the Pythagorean theorem, forming a right-angled triangle.\n    right_angle_triangle(5, 12, 13) = True\n    Explanation: Another example of a right-angled triangle based on the Pythagorean theorem.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a + b <= c or a + c <= b or b + c <= a:\n            return False\n        (other code)\n\n# NO", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Validate the input to ensure all sides are positive integers\",\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Calculate the squares of the three sides\",\n      \"Check if the sum of the squares of two shorter sides is equal to the square of the longest side to determine if it is a right-angled triangle\",\n      \"Return True if it is a right-angled triangle, False otherwise\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle being a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The step 2 and 3 should be implemented simultaneously:\n    \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n    \"Calculate the squares of the three sides\"\n    This can be done by first checking the triangle inequality theorem and then calculating the squares of the sides.\n\n# [edge case] \n    right_angle_triangle(1, 1, 2) = False\n    Explanation: The sum of the two shorter sides is not greater than the longest side, so it does not form a triangle.\n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a classic example of a right-angled triangle with sides following the Pythagorean theorem.\n    right_angle_triangle(5, 12, 13) = True\n    Explanation: Another example of a right-angled triangle based on the Pythagorean theorem.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a + b <= c or a + c <= b or b + c <= a:\n            return False\n        (other code)\n\n# NO", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Validate the input to ensure all sides are positive integers\",\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Calculate the squares of the three sides\",\n      \"Check if the sum of the squares of two shorter sides is equal to the square of the longest side to determine if it is a right-angled triangle\",\n      \"Return True if the triangle is right-angled, False otherwise\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2 and 3 should be implemented simultaneously:\n    \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\"\n    \"Calculate the squares of the three sides\"\n    This can be done by first checking if the sides can form a triangle and then calculating the squares of the sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a Pythagorean triple, and the sides form a right-angled triangle.\n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, the sides do not satisfy the Pythagorean theorem, so it is not a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the cases.", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    # Validate the input to ensure all sides are positive integers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Calculate the squares of the three sides\n    a_squared = a ** 2\n    b_squared = b ** 2\n    c_squared = c ** 2\n    \n    # Check if the sum of the squares of two shorter sides is equal to the square of the longest side\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Validate the input to ensure all sides are positive integers\",\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Calculate the squares of the three sides\",\n      \"Check if the sum of the squares of two shorter sides is equal to the square of the longest side to determine if it is a right-angled triangle\",\n      \"Return True if it is a right-angled triangle, False otherwise\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle being a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The step 2 and 3 should be implemented simultaneously:\n    \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n    \"Calculate the squares of the three sides\"\n    This can be done by first checking the triangle inequality theorem to validate if a triangle can be formed, and then calculating the squares of the sides.\n\n# [edge case] \n    right_angle_triangle(1, 1, 2) = False\n    Explanation: The sum of the two shorter sides is not greater than the longest side, so it does not form a triangle.\n    right_angle_triangle(3, 4, 5) = True\n    Explanation: The sides satisfy the Pythagorean theorem, forming a right-angled triangle.\n    right_angle_triangle(5, 12, 13) = True\n    Explanation: The sides satisfy the Pythagorean theorem, forming a right-angled triangle.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a + b <= c or a + c <= b or b + c <= a:\n            return False\n        (other code)\n\n# NO", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Define a function right_angle_triangle that takes three parameters a, b, and c\",\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Use the Pythagorean theorem (a^2 + b^2 = c^2) to check if the triangle is right-angled\",\n      \"Return True if the triangle is right-angled, False otherwise\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle equal to 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The step 2 and 3 should be implemented simultaneously.\n    \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n    \"Use the Pythagorean theorem (a^2 + b^2 = c^2) to check if the triangle is right-angled\"\n    This could be done by first checking if the sides can form a triangle, and then applying the Pythagorean theorem to check for a right-angled triangle.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) == True\n    Explanation: This is a classic example of a right-angled triangle with sides 3, 4, and 5 satisfying the Pythagorean theorem.\n    right_angle_triangle(1, 2, 3) == False\n    Explanation: In this case, the sides 1, 2, and 3 do not satisfy the Pythagorean theorem for a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the edge cases.", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b > c and a + c > b and b + c > a:\n        # Use the Pythagorean theorem to check if the triangle is right-angled\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Define a function right_angle_triangle that takes three parameters a, b, and c\",\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Use the Pythagorean theorem (a^2 + b^2 = c^2) to check if the triangle is right-angled\",\n      \"Return True if the triangle is right-angled, False otherwise\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle equal to 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The step 2 and 3 should be implemented simultaneously:\n    \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n    \"Use the Pythagorean theorem (a^2 + b^2 = c^2) to check if the triangle is right-angled\"\n    This can be done by first checking if the sum of any two sides is greater than the third side to form a triangle, then applying the Pythagorean theorem to check for a right-angled triangle.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) == True\n    Explanation: This is a Pythagorean triple where 3^2 + 4^2 = 5^2, so it forms a right-angled triangle.\n    right_angle_triangle(1, 2, 3) == False\n    Explanation: In this case, the sum of the squares of the two shorter sides is not equal to the square of the longest side, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the necessary checks for determining a right-angled triangle.", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b > c and a + c > b and b + c > a:\n        # Use the Pythagorean theorem to check if the triangle is right-angled\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Validate the input to ensure all sides are positive integers\",\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Calculate the squares of the three sides\",\n      \"Check if the sum of the squares of two shorter sides is equal to the square of the longest side to determine if it is a right-angled triangle\",\n      \"Return True if it is a right-angled triangle, False otherwise\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The step 2 and 3 should be implemented simultaneously:\n    \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\"\n    \"Calculate the squares of the three sides\"\n    This can be done by first checking if the sum of any two sides is greater than the third side, and then calculating the squares of the sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) == True\n    Explanation: This is a Pythagorean triple where 3^2 + 4^2 = 5^2, so it forms a right-angled triangle.\n    right_angle_triangle(1, 2, 3) == False\n    Explanation: In this case, the sum of the squares of the two shorter sides is not equal to the square of the longest side, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the cases.", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    # Validate the input to ensure all sides are positive integers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Calculate the squares of the three sides\n    a_squared = a ** 2\n    b_squared = b ** 2\n    c_squared = c ** 2\n    \n    # Check if the sum of the squares of two shorter sides is equal to the square of the longest side to determine if it is a right-angled triangle\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Define a function right_angle_triangle that takes three arguments a, b, and c\",\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Use the Pythagorean theorem (a^2 + b^2 = c^2) to check if the triangle is right-angled\",\n      \"Return True if the triangle is right-angled, False otherwise\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle equal to 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps do not need to be implemented simultaneously. Each step should be executed sequentially.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: The sides 3, 4, and 5 satisfy the Pythagorean theorem (3^2 + 4^2 = 5^2), forming a right-angled triangle.\n    right_angle_triangle(1, 2, 3) = False\n    Explanation: The sides 1, 2, and 3 do not satisfy the Pythagorean theorem, hence not forming a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the requirements.", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b > c and a + c > b and b + c > a:\n        # Use the Pythagorean theorem (a^2 + b^2 = c^2) to check if the triangle is right-angled\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Use the Pythagorean theorem (a^2 + b^2 = c^2) to check if the triangle is right-angled\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle where one of the angles is a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps do not need to be implemented simultaneously. Each step can be executed sequentially.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a Pythagorean triple where 3^2 + 4^2 = 5^2, so it forms a right-angled triangle.\n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, the sum of the squares of the two shorter sides is not equal to the square of the longest side, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of checking the Pythagorean theorem covers all cases.", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    # Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\n    if a + b > c and a + c > b and b + c > a:\n        # Use the Pythagorean theorem (a^2 + b^2 = c^2) to check if the triangle is right-angled\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # Output: True\nprint(right_angle_triangle(1, 2, 3))  # Output: False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Check if the given sides can form a triangle\",\n      \"Check if the triangle is a right-angled triangle using the Pythagorean theorem\"\n    ],\n    \"steps\": [\n      \"Validate the input to ensure all sides are positive integers\",\n      \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n      \"Calculate the squares of the three sides\",\n      \"Check if the sum of the squares of two shorter sides is equal to the square of the longest side to determine if it is a right-angled triangle\",\n      \"Return True if it is a right-angled triangle, False otherwise\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The step 2 and 3 could be implemented simultaneously:\n    \"Check if the sum of any two sides is greater than the third side to determine if a triangle can be formed\",\n    \"Calculate the squares of the three sides\"\n    This can be done by first checking if the sum of any two sides is greater than the third side, and then calculating the squares of the sides.\n\n# [edge case] \n    right_angle_triangle(1, 1, 2) = False\n    Explanation: The sum of the two shorter sides (1+1) is not greater than the longest side (2), so it does not form a triangle.\n    right_angle_triangle(3, 4, 5) = True\n    Explanation: The sum of the squares of the two shorter sides (3^2 + 4^2 = 9 + 16 = 25) is equal to the square of the longest side (5^2 = 25), forming a right-angled triangle.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a + b <= c or a + c <= b or b + c <= a:\n            return False\n        (other code)\n\n# NO", "Round_0": {"code": "def right_angle_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    return False\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [134, 134, 134, 134, 134, 134, 134, 134, 134, 134], "passed": true, "passAt10": true, "nl": "\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    ", "func": "def right_angle_triangle(a, b, c):", "examples": "Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    ", "canonical_plan": ["{\n  \"high_level_plan\": {\n    \"subproblems\": [\n      \"Check if the given lengths are valid for a triangle (sum of any two sides should be greater than the third side)\",\n      \"Check if the triangle is a right-angled triangle based on the Pythagorean theorem\"\n    ],\n    \"major_steps\": [\n      \"Validate the input lengths to ensure they form a valid triangle\",\n      \"Implement a function to check if the triangle is right-angled based on the Pythagorean theorem\",\n      \"Return True or False based on the result of the right-angled triangle check\"\n    ]\n  }\n}"], "plan_score_gpt-35-turbo": [93.5, 95.0], "plan_score_gpt-4o": [95.0, 95.0], "repair_prompt": ["def right_angle_triangle(a, b, c):\t\n'''    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree. Consider using the Pythagorean theorem to determine if the triangle is right-angled.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "def right_angle_triangle(a, b, c):\t\n'''    Given the lengths of the three sides of a triangle. You are required to return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle. It is equal to 90 degree.\n    Consider using the Pythagorean theorem to determine if the triangle is right-angled.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "def right_angle_triangle(a, b, c):\t\n'''    Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree; consider using the Pythagorean theorem to determine if the triangle is right-angled.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''"], "mutate_method": "add_1_sentence_at_end", "test_case_list": ["assert right_angle_triangle(273, 936, 975) == True", "assert right_angle_triangle(285, 380, 475) == True", "assert right_angle_triangle(705, 376, 799) == True", "assert right_angle_triangle(870, 464, 986) == True", "assert right_angle_triangle(3504, 4015, 5329) == True", "assert right_angle_triangle(525, 280, 595) == True", "assert right_angle_triangle(1536, 1760, 2336) == True", "assert right_angle_triangle(175, 600, 625) == True", "assert right_angle_triangle(455, 1560, 1625) == True", "assert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "assert right_angle_triangle(3, 2, 5) == False", "assert right_angle_triangle(259, 888, 925) == True", "assert right_angle_triangle(490, 1680, 1750) == True", "assert right_angle_triangle(1185, 632, 1343) == True", "assert right_angle_triangle(6, 1, 9) == False", "assert right_angle_triangle(2256, 2585, 3431) == True", "assert right_angle_triangle(1155, 616, 1309) == True", "assert right_angle_triangle(4, 5, 5) == False", "assert right_angle_triangle(5, 7, 1) == False", "assert right_angle_triangle(5, 1, 2) == False", "assert right_angle_triangle(54, 72, 90) == True", "assert right_angle_triangle(20, 12, 16) == True", "assert right_angle_triangle(5, 5, 2) == False", "assert right_angle_triangle(2736, 3135, 4161) == True", "assert right_angle_triangle(518, 1776, 1850) == True", "assert right_angle_triangle(3, 6, 11) == False", "assert right_angle_triangle(7, 7, 5) == False", "assert right_angle_triangle(15, 2, 10) == False", "assert right_angle_triangle(10, 6, 8) == True", "assert right_angle_triangle(15, 5, 11) == False", "assert right_angle_triangle(1, 1, 2) == False", "assert right_angle_triangle(1, 3, 15) == False", "assert right_angle_triangle(280, 960, 1000) == True", "assert right_angle_triangle(6, 1, 7) == False", "assert right_angle_triangle(10, 9, 3) == False", "assert right_angle_triangle(2, 7, 6) == False", "assert right_angle_triangle(1, 7, 4) == False", "assert right_angle_triangle(765, 408, 867) == True", "assert right_angle_triangle(69, 92, 115) == True", "assert right_angle_triangle(140, 336, 364) == True", "assert right_angle_triangle(240, 144, 192) == True", "assert right_angle_triangle(2, 4, 6) == False", "assert right_angle_triangle(780, 468, 624) == True", "assert right_angle_triangle(6, 7, 6) == False", "assert right_angle_triangle(3888, 4455, 5913) == True", "assert right_angle_triangle(6, 7, 7) == False", "assert right_angle_triangle(2, 2, 2) == False", "assert right_angle_triangle(14, 8, 10) == False", "assert right_angle_triangle(204, 272, 340) == True", "assert right_angle_triangle(3, 7, 2) == False", "assert right_angle_triangle(1035, 552, 1173) == True", "assert right_angle_triangle(243, 324, 405) == True", "assert right_angle_triangle(581, 1992, 2075) == True", "assert right_angle_triangle(11, 5, 8) == False", "assert right_angle_triangle(820, 492, 656) == True", "assert right_angle_triangle(5, 4, 4) == False", "assert right_angle_triangle(4, 4, 4) == False", "assert right_angle_triangle(4, 5, 4) == False", "assert right_angle_triangle(12, 1, 2) == False", "assert right_angle_triangle(900, 480, 1020) == True", "assert right_angle_triangle(3, 3, 4) == False", "assert right_angle_triangle(360, 864, 936) == True", "assert right_angle_triangle(7, 1, 6) == False", "assert right_angle_triangle(5, 3, 2) == False", "assert right_angle_triangle(210, 112, 238) == True", "assert right_angle_triangle(1000, 600, 800) == True", "assert right_angle_triangle(285, 684, 741) == True", "assert right_angle_triangle(65, 156, 169) == True", "assert right_angle_triangle(960, 576, 768) == True", "assert right_angle_triangle(3792, 4345, 5767) == True", "assert right_angle_triangle(5, 5, 6) == False", "assert right_angle_triangle(3, 3, 3) == False", "assert right_angle_triangle(3, 2, 3) == False", "assert right_angle_triangle(1, 2, 1) == False", "assert right_angle_triangle(12, 4, 2) == False", "assert right_angle_triangle(6, 4, 1) == False", "assert right_angle_triangle(5, 12, 13) == True", "assert right_angle_triangle(2, 6, 9) == False", "assert right_angle_triangle(160, 384, 416) == True", "assert right_angle_triangle(3, 6, 3) == False", "assert right_angle_triangle(2, 4, 11) == False", "assert right_angle_triangle(2880, 3300, 4380) == True", "assert right_angle_triangle(10, 5, 7) == False", "assert right_angle_triangle(7, 24, 25) == True", "assert right_angle_triangle(15, 8, 17) == True", "assert right_angle_triangle(4752, 5445, 7227) == True", "assert right_angle_triangle(4656, 5335, 7081) == True", "assert right_angle_triangle(380, 912, 988) == True", "assert right_angle_triangle(350, 840, 910) == True", "assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(2, 4, 8) == False", "assert right_angle_triangle(1, 4, 4) == False", "assert right_angle_triangle(70, 42, 56) == True", "assert right_angle_triangle(15, 9, 11) == False", "assert right_angle_triangle(201, 268, 335) == True", "assert right_angle_triangle(170, 408, 442) == True", "assert right_angle_triangle(12, 16, 20) == True", "assert right_angle_triangle(305, 732, 793) == True", "assert right_angle_triangle(2, 2, 10) == False", "assert right_angle_triangle(1, 3, 4) == False", "assert right_angle_triangle(230, 552, 598) == True", "assert right_angle_triangle(1, 1, 1) == False", "assert right_angle_triangle(3, 3, 9) == False", "assert right_angle_triangle(6, 5, 3) == False", "assert right_angle_triangle(235, 564, 611) == True", "assert right_angle_triangle(3, 1, 4) == False", "assert right_angle_triangle(81, 108, 135) == True", "assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(5, 5, 4) == False", "assert right_angle_triangle(21, 28, 35) == True", "assert right_angle_triangle(234, 312, 390) == True", "assert right_angle_triangle(3, 1, 7) == False", "assert right_angle_triangle(230, 138, 184) == True", "assert right_angle_triangle(168, 576, 600) == True", "assert right_angle_triangle(1095, 584, 1241) == True", "assert right_angle_triangle(320, 192, 256) == True", "assert right_angle_triangle(8, 5, 6) == False", "assert right_angle_triangle(5, 2, 4) == False", "assert right_angle_triangle(6, 4, 4) == False", "assert right_angle_triangle(4, 1, 4) == False", "assert right_angle_triangle(528, 605, 803) == True", "assert right_angle_triangle(5, 4, 10) == False", "assert right_angle_triangle(15, 8, 3) == False", "assert right_angle_triangle(1455, 776, 1649) == True", "assert right_angle_triangle(21, 72, 75) == True", "assert right_angle_triangle(2544, 2915, 3869) == True", "assert right_angle_triangle(610, 366, 488) == True", "assert right_angle_triangle(8, 10, 10) == False", "assert right_angle_triangle(2, 4, 5) == False", "assert right_angle_triangle(2, 3, 1) == False", "assert right_angle_triangle(3, 3, 1) == False", "assert right_angle_triangle(219, 292, 365) == True", "assert right_angle_triangle(1, 5, 5) == False", "assert right_angle_triangle(192, 220, 292) == True"], "save_node": false, "pass": true, "parent_index": 274, "round": 450}
