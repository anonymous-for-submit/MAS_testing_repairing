{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": ["def check(filter_by_substring):\n\tassert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "def check(filter_by_substring):\n\tassert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'john') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "def check(filter_by_substring):\n\tassert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'agw') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'y') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'ii') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "def check(filter_by_substring):\n\tassert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'hm') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'u') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "def check(filter_by_substring):\n\tassert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "def check(filter_by_substring):\n\tassert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "def check(filter_by_substring):\n\tassert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'p') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "def check(filter_by_substring):\n\tassert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "def check(filter_by_substring):\n\tassert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "test_case_list": ["assert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "assert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "assert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "assert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "assert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "assert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "assert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "assert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "assert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "assert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "assert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "assert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "assert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "assert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "assert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "assert filter_by_substring([], 'john') == []", "assert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "assert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "assert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "assert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "assert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "assert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "assert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "assert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "assert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "assert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "assert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "assert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "assert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "assert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "assert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "assert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "assert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "assert filter_by_substring([], 'agw') == []", "assert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "assert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "assert filter_by_substring([], 'y') == []", "assert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "assert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "assert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "assert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "assert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "assert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "assert filter_by_substring([], 'ii') == []", "assert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "assert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "assert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "assert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "assert filter_by_substring([], 'hm') == []", "assert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "assert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "assert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "assert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "assert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "assert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "assert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "assert filter_by_substring([], 'u') == []", "assert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "assert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "assert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "assert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "assert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "assert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "assert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "assert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "assert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "assert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "assert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "assert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "assert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "assert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "assert filter_by_substring([], 'p') == []", "assert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "assert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "assert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "assert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "assert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "assert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "assert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "assert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "assert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "assert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "assert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "assert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "assert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "assert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "assert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "assert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "assert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "assert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "assert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "assert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "assert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "assert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "assert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "assert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "assert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "assert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "assert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "assert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "assert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "assert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "assert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "assert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "assert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "assert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "nl": " Filter an input list of strings only for ones that contain given substring\n    ", "func": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:", "examples": ">>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    ", "completion": "from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings for those containing a given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"The first argument must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"The second argument must be a string.\")\n    \n    # Initialize an empty list to store strings that contain the substring\n    filtered_strings = []\n    \n    # Loop through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # Append the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the list of strings that contain the substring\n    return filtered_strings\n", "completions": ["from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"The first argument must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"The second argument must be a string.\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the substring is present in the string\n        if substring in string:\n            # Append the string to the result list if the substring is found\n            result.append(string)\n    \n    # Return the list of strings that contain the substring\n    return result\n", "from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Step 2: Implement input validation to ensure correct data types and non-empty substring.\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str) or not substring:\n        raise ValueError(\"Substring must be a non-empty string.\")\n    \n    # Step 3: Initialize an empty list to store strings that match the criteria.\n    filtered_strings = []\n    \n    # Step 4: Loop through each string in the input list.\n    for string in strings:\n        # Step 5: For each string, check if the substring is present.\n        if substring in string:\n            # Step 6: If the substring is found, add the string to the result list.\n            filtered_strings.append(string)\n    \n    # Step 7: After the loop, return the list of strings that contain the substring.\n    return filtered_strings\n", "from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings for those containing a given substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Step 2: Implement input validation to ensure the list and substring are of correct types.\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Step 3: Initialize an empty list to store strings that contain the substring.\n    filtered_strings = []\n    \n    # Step 4: Loop through each string in the input list.\n    for string in strings:\n        # Step 5: For each string, check if the substring is present.\n        if substring in string:\n            # Step 6: If the substring is found, add the string to the new list.\n            filtered_strings.append(string)\n    \n    # Step 7: After the loop, return the list of strings that contain the substring.\n    return filtered_strings\n", "from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Initialize list to store strings containing the substring\n    filtered_strings = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the current string contains the given substring\n        if substring in string:\n            # Add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the list of filtered strings\n    return filtered_strings\n", "from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Step 2: Validate the input\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Step 3: Initialize an empty list to store strings that match the criteria\n    filtered_strings = []\n    \n    # Step 4: Loop through each string in the input list\n    for string in strings:\n        # Step 5: For each string, check if the substring is present\n        if substring in string:\n            # Step 6: If the substring is found, add the string to the result list\n            filtered_strings.append(string)\n    \n    # Step 7: After the loop, return the list of strings that contain the substring\n    return filtered_strings\n", "from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate the input\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Initialize an empty list to store strings that contain the substring\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the current string contains the given substring\n        if substring in string:\n            # Add strings that contain the substring to the result list\n            result.append(string)\n    \n    # Return the list of strings that contain the substring\n    return result\n", "from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings for those containing a given substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Step 2: Validate input types\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Step 3: Initialize an empty list to store strings that contain the substring\n    filtered_strings = []\n    \n    # Step 4: Loop through each string in the input list\n    for string in strings:\n        # Step 5: Check if the substring is present in the current string\n        if substring in string:\n            # Step 6: Add the string to the new list if the substring is found\n            filtered_strings.append(string)\n    \n    # Step 7: Return the list of strings that contain the substring\n    return filtered_strings\n", "from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate inputs\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Initialize result list\n    result = []\n    \n    # Loop through strings\n    for string in strings:\n        # Check for substring\n        if substring in string:\n            # Add to result list\n            result.append(string)\n    \n    # Return result list\n    return result\n", "from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings. The function should return only the ones that contain the given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate inputs\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"The first parameter should be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"The second parameter should be a string.\")\n    \n    # Initialize result list\n    result = []\n    \n    # Loop through strings\n    for string in strings:\n        # Check substring\n        if substring in string:\n            # Add to result\n            result.append(string)\n    \n    # Return result list\n    return result\n", "from typing import *\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings for those containing a given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"The first argument must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"The second argument must be a string.\")\n    \n    # Initialize an empty list to store strings that contain the substring\n    filtered_strings = []\n    \n    # Loop through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # Append the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the list of strings that contain the substring\n    return filtered_strings\n"], "session_history": {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure it is a list of strings and a valid substring.\",\n    \"2. Iterate over each string in the input list.\",\n    \"3. Check if the current string contains the given substring.\",\n    \"4. Collect strings that contain the substring into a new list.\",\n    \"5. Return the new list of filtered strings.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define the function signature with parameters for the list of strings and the substring.\",\n    \"Step 2: Implement input validation to ensure the list and substring are of correct types.\",\n    \"Step 3: Initialize an empty list to store strings that contain the substring.\",\n    \"Step 4: Loop through each string in the input list.\",\n    \"Step 5: For each string, check if the substring is present using the 'in' keyword.\",\n    \"Step 6: If the substring is found, append the string to the list initialized in Step 3.\",\n    \"Step 7: After the loop, return the list of strings that contain the substring.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are all independent of each other.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: Out of the given strings, 'abc', 'bacd', and 'array' contain the substring 'a', so they are filtered and returned.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic provided in the function covers the edge cases effectively.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings for those containing a given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"The first argument must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"The second argument must be a string.\")\n    \n    # Initialize an empty list to store strings that contain the substring\n    filtered_strings = []\n    \n    # Loop through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # Append the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the list of strings that contain the substring\n    return filtered_strings\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Input Validation\",\n      \"description\": \"Ensure that the input is a list of strings and a valid substring.\"\n    },\n    {\n      \"subproblem\": \"Iterate Over List\",\n      \"description\": \"Loop through each string in the input list.\"\n    },\n    {\n      \"subproblem\": \"Check Substring Presence\",\n      \"description\": \"For each string, check if the given substring is present.\"\n    },\n    {\n      \"subproblem\": \"Collect Matching Strings\",\n      \"description\": \"If a string contains the substring, add it to the result list.\"\n    },\n    {\n      \"subproblem\": \"Return Result\",\n      \"description\": \"Return the list of strings that contain the substring.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Start by validating the inputs to ensure they are of the correct types.\",\n    \"Initialize an empty list to store strings that contain the substring.\",\n    \"Iterate over each string in the input list.\",\n    \"For each string, check if the substring is present using the 'in' keyword.\",\n    \"If the substring is found, append the string to the result list.\",\n    \"After iterating through all strings, return the result list.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are independent of each other.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: Out of the given strings, 'abc', 'bacd', and 'array' contain the substring 'a', so they are included in the filtered list.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic provided in the plan covers the edge cases effectively.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"The first argument must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"The second argument must be a string.\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the substring is present in the string\n        if substring in string:\n            # Append the string to the result list if the substring is found\n            result.append(string)\n    \n    # Return the list of strings that contain the substring\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure it is a list of strings and a non-empty substring.\",\n    \"2. Iterate over each string in the input list.\",\n    \"3. Check if the current string contains the given substring.\",\n    \"4. Collect strings that contain the substring into a new list.\",\n    \"5. Return the new list of filtered strings.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define the function signature with parameters for the list of strings and the substring.\",\n    \"Step 2: Implement input validation to ensure correct data types and non-empty substring.\",\n    \"Step 3: Initialize an empty list to store strings that match the criteria.\",\n    \"Step 4: Loop through each string in the input list.\",\n    \"Step 5: For each string, check if the substring is present.\",\n    \"Step 6: If the substring is found, add the string to the result list.\",\n    \"Step 7: After the loop, return the list of strings that contain the substring.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: Out of the given strings, 'abc', 'bacd', and 'array' contain the substring 'a', so they are returned in the filtered list.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic provided in the plan covers the edge cases effectively.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Step 2: Implement input validation to ensure correct data types and non-empty substring.\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str) or not substring:\n        raise ValueError(\"Substring must be a non-empty string.\")\n    \n    # Step 3: Initialize an empty list to store strings that match the criteria.\n    filtered_strings = []\n    \n    # Step 4: Loop through each string in the input list.\n    for string in strings:\n        # Step 5: For each string, check if the substring is present.\n        if substring in string:\n            # Step 6: If the substring is found, add the string to the result list.\n            filtered_strings.append(string)\n    \n    # Step 7: After the loop, return the list of strings that contain the substring.\n    return filtered_strings\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure it is a list of strings and a valid substring.\",\n    \"2. Iterate over each string in the input list.\",\n    \"3. Check if the current string contains the given substring.\",\n    \"4. Collect strings that contain the substring into a new list.\",\n    \"5. Return the new list of filtered strings.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define the function signature with parameters for the list of strings and the substring.\",\n    \"Step 2: Implement input validation to ensure the list and substring are of correct types.\",\n    \"Step 3: Initialize an empty list to store strings that contain the substring.\",\n    \"Step 4: Loop through each string in the input list.\",\n    \"Step 5: For each string, check if the substring is present.\",\n    \"Step 6: If the substring is found, add the string to the new list.\",\n    \"Step 7: After the loop, return the list of strings that contain the substring.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are all independent of each other.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: Out of the given strings, 'abc', 'bacd', and 'array' contain the substring 'a', so they are included in the filtered list.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The function can handle empty input list appropriately and return an empty list.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings for those containing a given substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Step 2: Implement input validation to ensure the list and substring are of correct types.\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Step 3: Initialize an empty list to store strings that contain the substring.\n    filtered_strings = []\n    \n    # Step 4: Loop through each string in the input list.\n    for string in strings:\n        # Step 5: For each string, check if the substring is present.\n        if substring in string:\n            # Step 6: If the substring is found, add the string to the new list.\n            filtered_strings.append(string)\n    \n    # Step 7: After the loop, return the list of strings that contain the substring.\n    return filtered_strings\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure it is a list of strings and a valid substring.\",\n    \"2. Iterate over each string in the input list.\",\n    \"3. Check if the current string contains the given substring.\",\n    \"4. Collect strings that contain the substring into a new list.\",\n    \"5. Return the new list of filtered strings.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define the function signature with parameters for the list of strings and the substring.\",\n    \"Step 2: Implement input validation to ensure the list and substring are of correct types.\",\n    \"Step 3: Initialize an empty list to store strings that contain the substring.\",\n    \"Step 4: Loop through each string in the input list.\",\n    \"Step 5: For each string, check if the substring is present.\",\n    \"Step 6: If the substring is found, add the string to the new list.\",\n    \"Step 7: After the loop, return the list of strings that contain the substring.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n    Explanation: The core concept here is to filter a list of strings based on whether they contain a specific substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are all independent of each other.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: Since the substring is empty, all strings in the input list contain the empty substring.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of the function already covers the edge cases provided.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Initialize list to store strings containing the substring\n    filtered_strings = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the current string contains the given substring\n        if substring in string:\n            # Add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the list of filtered strings\n    return filtered_strings\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure it is a list of strings and a non-empty substring.\",\n    \"2. Iterate over each string in the input list.\",\n    \"3. Check if the current string contains the given substring.\",\n    \"4. Collect strings that contain the substring into a new list.\",\n    \"5. Return the new list of filtered strings.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define the function signature with parameters for the list of strings and the substring.\",\n    \"Step 2: Implement input validation to ensure correct data types and non-empty substring.\",\n    \"Step 3: Initialize an empty list to store strings that match the criteria.\",\n    \"Step 4: Loop through each string in the input list.\",\n    \"Step 5: For each string, check if the substring is present.\",\n    \"Step 6: If the substring is found, add the string to the result list.\",\n    \"Step 7: After the loop, return the list of strings that contain the substring.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are all independent of each other.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: Since the substring is empty, all strings in the input list contain the empty substring.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers the edge cases effectively.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Step 2: Validate the input\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Step 3: Initialize an empty list to store strings that match the criteria\n    filtered_strings = []\n    \n    # Step 4: Loop through each string in the input list\n    for string in strings:\n        # Step 5: For each string, check if the substring is present\n        if substring in string:\n            # Step 6: If the substring is found, add the string to the result list\n            filtered_strings.append(string)\n    \n    # Step 7: After the loop, return the list of strings that contain the substring\n    return filtered_strings\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Input Validation\",\n      \"description\": \"Ensure that the input is a list of strings and a valid substring.\"\n    },\n    {\n      \"subproblem\": \"Iterate Over List\",\n      \"description\": \"Loop through each string in the input list.\"\n    },\n    {\n      \"subproblem\": \"Substring Check\",\n      \"description\": \"Check if the current string contains the given substring.\"\n    },\n    {\n      \"subproblem\": \"Collect Matching Strings\",\n      \"description\": \"Add strings that contain the substring to a result list.\"\n    },\n    {\n      \"subproblem\": \"Return Result\",\n      \"description\": \"Return the list of strings that contain the substring.\"\n    }\n  ],\n  \"high_level_plan\": [\n    \"Validate the input to ensure it is a list of strings and a valid substring.\",\n    \"Initialize an empty list to store strings that contain the substring.\",\n    \"Iterate over each string in the input list.\",\n    \"For each string, check if it contains the given substring.\",\n    \"If a string contains the substring, add it to the result list.\",\n    \"After iterating through all strings, return the result list.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are all independent of each other.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: Out of the given strings, 'abc', 'bacd', and 'array' contain the substring 'a', so they are included in the filtered list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the function is sufficient to handle the given edge cases.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate the input\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Initialize an empty list to store strings that contain the substring\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the current string contains the given substring\n        if substring in string:\n            # Add strings that contain the substring to the result list\n            result.append(string)\n    \n    # Return the list of strings that contain the substring\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure it is a list of strings and a single substring.\",\n    \"2. Iterate over each string in the input list.\",\n    \"3. Check if the current string contains the given substring.\",\n    \"4. Collect strings that contain the substring into a new list.\",\n    \"5. Return the new list of filtered strings.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define the function signature with parameters for the list of strings and the substring.\",\n    \"Step 2: Implement input validation to ensure correct data types.\",\n    \"Step 3: Initialize an empty list to store strings that contain the substring.\",\n    \"Step 4: Loop through each string in the input list.\",\n    \"Step 5: For each string, check if the substring is present.\",\n    \"Step 6: If the substring is found, add the string to the new list.\",\n    \"Step 7: After the loop, return the list of strings that contain the substring.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are all independent of each other.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: Out of the given strings, 'abc', 'bacd', and 'array' contain the substring 'a', so they are included in the filtered list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function can handle empty input list appropriately and return an empty list.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings for those containing a given substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Step 2: Validate input types\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Step 3: Initialize an empty list to store strings that contain the substring\n    filtered_strings = []\n    \n    # Step 4: Loop through each string in the input list\n    for string in strings:\n        # Step 5: Check if the substring is present in the current string\n        if substring in string:\n            # Step 6: Add the string to the new list if the substring is found\n            filtered_strings.append(string)\n    \n    # Step 7: Return the list of strings that contain the substring\n    return filtered_strings\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Input Validation\",\n      \"description\": \"Ensure that the input is a list of strings and a valid substring.\"\n    },\n    {\n      \"subproblem\": \"Iterate Over List\",\n      \"description\": \"Loop through each string in the input list.\"\n    },\n    {\n      \"subproblem\": \"Check Substring Presence\",\n      \"description\": \"For each string, check if the given substring is present.\"\n    },\n    {\n      \"subproblem\": \"Collect Matching Strings\",\n      \"description\": \"If a string contains the substring, add it to the result list.\"\n    },\n    {\n      \"subproblem\": \"Return Result\",\n      \"description\": \"Return the list of strings that contain the substring.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define Function\",\n      \"description\": \"Create a function named 'filter_by_substring' that takes a list of strings and a substring as parameters.\"\n    },\n    {\n      \"step\": \"Validate Inputs\",\n      \"description\": \"Check if the inputs are of the correct types: a list of strings and a non-empty substring.\"\n    },\n    {\n      \"step\": \"Initialize Result List\",\n      \"description\": \"Create an empty list to store strings that contain the substring.\"\n    },\n    {\n      \"step\": \"Loop Through Strings\",\n      \"description\": \"Iterate over each string in the input list.\"\n    },\n    {\n      \"step\": \"Check for Substring\",\n      \"description\": \"Within the loop, check if the current string contains the substring.\"\n    },\n    {\n      \"step\": \"Add to Result List\",\n      \"description\": \"If the substring is found, append the string to the result list.\"\n    },\n    {\n      \"step\": \"Return Result List\",\n      \"description\": \"After the loop, return the result list containing all matching strings.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are all independent of each other.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: Since the substring is empty, all strings in the input list contain the empty substring.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function can handle the edge cases with the existing logic.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate inputs\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Input must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Substring must be a string.\")\n    \n    # Initialize result list\n    result = []\n    \n    # Loop through strings\n    for string in strings:\n        # Check for substring\n        if substring in string:\n            # Add to result list\n            result.append(string)\n    \n    # Return result list\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Input Validation\",\n      \"description\": \"Ensure that the input is a list of strings and a valid substring.\"\n    },\n    {\n      \"subproblem\": \"Iterate Over List\",\n      \"description\": \"Loop through each string in the input list.\"\n    },\n    {\n      \"subproblem\": \"Check Substring Presence\",\n      \"description\": \"For each string, check if the given substring is present.\"\n    },\n    {\n      \"subproblem\": \"Collect Matching Strings\",\n      \"description\": \"If a string contains the substring, add it to the result list.\"\n    },\n    {\n      \"subproblem\": \"Return Result\",\n      \"description\": \"Return the list of strings that contain the substring.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Define Function\",\n      \"description\": \"Create a function named 'filter_by_substring' that takes a list of strings and a substring as parameters.\"\n    },\n    {\n      \"step\": \"Validate Inputs\",\n      \"description\": \"Check if the inputs are valid: the first parameter should be a list of strings, and the second should be a string.\"\n    },\n    {\n      \"step\": \"Initialize Result List\",\n      \"description\": \"Create an empty list to store strings that contain the substring.\"\n    },\n    {\n      \"step\": \"Loop Through Strings\",\n      \"description\": \"Iterate over each string in the input list.\"\n    },\n    {\n      \"step\": \"Check Substring\",\n      \"description\": \"For each string, use a method to check if the substring is present.\"\n    },\n    {\n      \"step\": \"Add to Result\",\n      \"description\": \"If the substring is found in the string, append the string to the result list.\"\n    },\n    {\n      \"step\": \"Return Result List\",\n      \"description\": \"After the loop, return the result list containing all strings with the substring.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are all independent of each other.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: Since the substring is empty, all strings in the input list contain the empty substring.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function can handle the edge cases with the existing logic.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings. The function should return only the ones that contain the given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate inputs\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"The first parameter should be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"The second parameter should be a string.\")\n    \n    # Initialize result list\n    result = []\n    \n    # Loop through strings\n    for string in strings:\n        # Check substring\n        if substring in string:\n            # Add to result\n            result.append(string)\n    \n    # Return result list\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    \"1. Validate the input to ensure it is a list of strings and a valid substring.\",\n    \"2. Iterate over each string in the input list.\",\n    \"3. Check if the current string contains the given substring.\",\n    \"4. Collect strings that contain the substring into a new list.\",\n    \"5. Return the new list of filtered strings.\"\n  ],\n  \"high_level_plan\": [\n    \"Step 1: Define the function signature with parameters for the list of strings and the substring.\",\n    \"Step 2: Implement input validation to ensure the list and substring are of correct types.\",\n    \"Step 3: Initialize an empty list to store strings that contain the substring.\",\n    \"Step 4: Loop through each string in the input list.\",\n    \"Step 5: For each string, check if the substring is present using the 'in' keyword.\",\n    \"Step 6: If the substring is found, append the string to the list initialized in Step 3.\",\n    \"Step 7: After the loop, return the list of strings that contain the substring.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'substring': Refers to a smaller sequence of characters within a larger string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are all independent of each other.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: Since the input list is empty, there are no strings to filter, so the expected output is an empty list.\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') = ['abc', 'bacd', 'array']\n    Explanation: Out of the given strings, 'abc', 'bacd', and 'array' contain the substring 'a', so they are filtered and returned.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic provided in the function covers the edge cases effectively.", "Round_0": {"code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings for those containing a given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"The first argument must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"The second argument must be a string.\")\n    \n    # Initialize an empty list to store strings that contain the substring\n    filtered_strings = []\n    \n    # Loop through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # Append the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the list of strings that contain the substring\n    return filtered_strings\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [1.0, 0.6792, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, true, true, true, true, true, true, true, true], "pass_test_cases_num": [106, 72, 106, 106, 106, 106, 106, 106, 106, 106], "passed": true, "pass": true, "pass_num": 8, "round": 349, "repair_prompt": ["def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings. The function should return only the ones that contain given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings for those containing a given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''"], "mutate_method": "condense_two2one", "save_node": false, "parent_index": 288}
