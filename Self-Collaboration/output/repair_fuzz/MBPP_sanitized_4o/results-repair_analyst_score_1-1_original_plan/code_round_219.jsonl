{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 733, "prompt": "Create a function to locate the index of the initial instance of a specified number in an ordered array.", "code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "test_imports": [], "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "assert find_first_occurrence([4, 3, 2, 7, 8, 3, 13, 4, 11, 9], 4) == -1", "assert find_first_occurrence([4, 6, 1, 6, 7, 10, 9, 5, 12, 10], 4) == 0", "assert find_first_occurrence([5, 1, 8, 10, 7, 11, 6, 12, 6, 13], 3) == -1", "assert find_first_occurrence([2, 8, 9, 3, 4, 9, 13, 5, 7, 12], 8) == -1", "assert find_first_occurrence([3, 9, 6, 3, 7, 2, 11, 5, 13, 6], 3) == 0", "assert find_first_occurrence([1, 4, 8, 4, 7, 10, 12, 10, 14, 13], 5) == -1", "assert find_first_occurrence([4, 10, 9, 8, 2, 10, 4, 13, 14, 12], 1) == -1", "assert find_first_occurrence([2, 8, 3, 7, 3, 2, 7, 8, 7, 13], 4) == -1", "assert find_first_occurrence([4, 10, 9, 8, 1, 4, 13, 10, 4, 9], 6) == -1", "assert find_first_occurrence([7, 5, 2, 5, 3, 5, 13, 12, 4, 6], 10) == -1", "assert find_first_occurrence([7, 5, 3, 3, 10, 9, 10, 9, 4, 13], 9) == -1", "assert find_first_occurrence([3, 5, 1, 5, 9, 6, 6, 13, 12, 10], 4) == -1", "assert find_first_occurrence([5, 10, 3, 4, 6, 8, 3, 9, 10, 14], 4) == -1", "assert find_first_occurrence([5, 1, 7, 9, 9, 5, 12, 7, 11, 10], 8) == -1", "assert find_first_occurrence([1, 5, 5, 10, 5, 9, 11, 4, 5, 7], 10) == -1", "assert find_first_occurrence([6, 7, 2, 5, 11, 2, 9, 13, 11, 9], 3) == -1", "assert find_first_occurrence([1, 7, 1, 5, 1, 5, 6, 7, 6, 12], 7) == 7", "assert find_first_occurrence([2, 8, 9, 6, 10, 7, 10, 6, 5, 5], 10) == 4", "assert find_first_occurrence([2, 5, 3, 10, 8, 7, 12, 10, 11, 12], 2) == 0", "assert find_first_occurrence([4, 7, 3, 3, 7, 7, 5, 7, 13, 6], 5) == -1", "assert find_first_occurrence([3, 7, 4, 1, 4, 9, 6, 14, 13, 8], 4) == 4", "assert find_first_occurrence([5, 5, 1, 6, 10, 4, 11, 5, 10, 12], 5) == 0", "assert find_first_occurrence([1, 2, 7, 7, 1, 7, 9, 13, 9, 14], 7) == 5", "assert find_first_occurrence([5, 8, 1, 2, 3, 5, 7, 10, 4, 10], 6) == -1", "assert find_first_occurrence([4, 2, 9, 9, 11, 9, 3, 13, 7, 9], 7) == -1", "assert find_first_occurrence([7, 9, 6, 5, 9, 5, 3, 12, 6, 12], 10) == -1", "assert find_first_occurrence([1, 4, 5, 6, 11, 8, 11, 10, 14, 10], 9) == -1", "assert find_first_occurrence([1, 5, 9, 8, 4, 11, 10, 13, 11, 5], 4) == 4", "assert find_first_occurrence([6, 1, 3, 8, 3, 7, 6, 11, 4, 10], 3) == 2", "assert find_first_occurrence([4, 1, 8, 3, 10, 6, 5, 10, 11, 9], 10) == 4", "assert find_first_occurrence([6, 9, 4, 1, 2, 1, 11, 10, 13, 6], 3) == -1", "assert find_first_occurrence([2, 5, 8, 1, 10, 9, 13, 6, 7, 7], 1) == -1", "assert find_first_occurrence([2, 5, 1, 5, 10, 5, 10, 6, 11, 12], 4) == -1", "assert find_first_occurrence([3, 7, 7, 5, 6, 1, 6, 6, 14, 12], 2) == -1", "assert find_first_occurrence([5, 5, 10, 2, 2, 3, 7, 8, 12, 5], 10) == -1", "assert find_first_occurrence([6, 1, 5, 8, 3, 1, 12, 8, 5, 5], 8) == 7", "assert find_first_occurrence([1, 7, 5, 2, 1, 3, 11, 7, 6, 12], 7) == 7", "assert find_first_occurrence([6, 6, 8, 3, 4, 1, 6, 11, 4, 10], 1) == -1", "assert find_first_occurrence([4, 5, 10, 8, 1, 9, 13, 8, 14, 10], 8) == 7", "assert find_first_occurrence([1, 8, 7, 2, 11, 5, 7, 9, 9, 9], 7) == -1", "assert find_first_occurrence([5, 5, 9, 4, 3, 10, 4, 4, 7, 9], 8) == -1", "assert find_first_occurrence([6, 4, 3, 9, 10, 9, 11, 14, 14, 9], 6) == -1", "assert find_first_occurrence([2, 1, 4, 3, 7, 4, 6, 10, 4, 10], 1) == 1", "assert find_first_occurrence([6, 5, 6, 5, 8, 3, 9, 14, 14, 11], 1) == -1", "assert find_first_occurrence([7, 1, 1, 9, 9, 10, 13, 10, 11, 5], 5) == -1", "assert find_first_occurrence([5, 5, 1, 2, 3, 4, 5, 8, 12, 11], 10) == -1", "assert find_first_occurrence([5, 2, 1, 9, 8, 11, 3, 6, 8, 4], 7) == -1", "assert find_first_occurrence([3, 8, 8, 7, 8, 3, 5, 11, 14, 12], 8) == 1", "assert find_first_occurrence([2, 3, 3, 10, 1, 3, 10, 14, 13, 8], 4) == -1", "assert find_first_occurrence([2, 4, 1, 10, 11, 5, 7, 13, 4, 8], 6) == -1", "assert find_first_occurrence([6, 4, 9, 8, 2, 10, 10, 11, 8, 5], 10) == 5", "assert find_first_occurrence([1, 7, 10, 5, 8, 11, 11, 13, 12, 6], 3) == -1", "assert find_first_occurrence([7, 7, 7, 6, 8, 4, 5, 4, 4, 7], 8) == 4", "assert find_first_occurrence([5, 2, 4, 10, 11, 8, 3, 6, 10, 12], 2) == 1", "assert find_first_occurrence([3, 6, 7, 2, 10, 1, 7, 12, 14, 7], 8) == -1", "assert find_first_occurrence([5, 1, 4, 2, 3, 8, 8, 12, 12, 4], 1) == 1", "assert find_first_occurrence([7, 1, 10, 9, 3, 11, 7, 8, 11, 5], 3) == 4", "assert find_first_occurrence([7, 2, 9, 1, 7, 3, 3, 4, 5, 5], 8) == -1", "assert find_first_occurrence([3, 3, 9, 1, 11, 7, 11, 11, 6, 13], 8) == -1", "assert find_first_occurrence([5, 7, 5, 1, 2, 1, 11, 5, 11, 11], 9) == -1", "assert find_first_occurrence([4, 5, 9, 6, 11, 1, 6, 5, 12, 12], 3) == -1", "assert find_first_occurrence([7, 5, 4, 9, 2, 8, 9, 11, 11, 13], 4) == -1", "assert find_first_occurrence([7, 5, 9, 9, 6, 11, 3, 9, 8, 5], 7) == -1", "assert find_first_occurrence([7, 1, 6, 8, 4, 8, 10, 10, 10, 10], 5) == -1", "assert find_first_occurrence([4, 5, 8, 4, 6, 9, 11, 10, 8, 14], 9) == 5", "assert find_first_occurrence([2, 2, 1, 5, 4, 3, 9, 4, 12, 11], 4) == 4", "assert find_first_occurrence([1, 1, 5, 2, 1, 6, 3, 13, 9, 9], 4) == -1", "assert find_first_occurrence([6, 5, 1, 4, 10, 2, 5, 11, 11, 5], 7) == -1", "assert find_first_occurrence([6, 5, 3, 8, 1, 5, 11, 9, 8, 4], 3) == -1", "assert find_first_occurrence([3, 6, 6, 2, 3, 1, 10, 14, 4, 11], 11) == -1", "assert find_first_occurrence([3, 8, 3, 2, 8, 1, 6, 10, 9, 4], 10) == 7", "assert find_first_occurrence([2, 8, 1, 4, 3, 3, 4, 14, 7, 13], 8) == -1", "assert find_first_occurrence([2, 5, 5, 3, 8, 8, 10, 8, 11, 13], 5) == 1", "assert find_first_occurrence([4, 7, 4, 2, 8, 10, 5, 8, 4, 9], 4) == 0", "assert find_first_occurrence([3, 9, 2, 5, 10, 1, 3, 5, 13, 6], 8) == -1", "assert find_first_occurrence([2, 3, 4, 9, 3, 10, 13, 6, 14, 5], 11) == -1", "assert find_first_occurrence([5, 4, 5, 9, 11, 4, 6, 8, 12, 4], 4) == 1", "assert find_first_occurrence([1, 3, 2, 1, 7, 8, 12, 10, 9, 5], 8) == 5", "assert find_first_occurrence([5, 8, 5, 3, 6, 8, 5, 10, 13, 10], 11) == -1", "assert find_first_occurrence([2, 9, 3, 7, 4, 11, 9, 11, 7, 6], 2) == 0", "assert find_first_occurrence([7, 3, 5, 4, 7, 10, 5, 5, 14, 13], 2) == -1", "assert find_first_occurrence([7, 7, 6, 3, 8, 6, 9, 9, 7, 5], 10) == -1", "assert find_first_occurrence([4, 1, 1, 10, 8, 10, 4, 9, 7, 10], 8) == 4", "assert find_first_occurrence([6, 1, 4, 4, 3, 10, 9, 9, 11, 13], 6) == -1", "assert find_first_occurrence([2, 4, 5, 5, 10, 5, 9, 8, 6, 8], 6) == -1", "assert find_first_occurrence([1, 1, 4, 7, 5, 4, 11, 10, 4, 10], 1) == 0", "assert find_first_occurrence([7, 2, 4, 2, 11, 4, 11, 12, 7, 10], 7) == -1", "assert find_first_occurrence([2, 8, 2, 4, 8, 4, 13, 4, 4, 14], 9) == -1", "assert find_first_occurrence([2, 7, 4, 8, 5, 1, 9, 5, 4, 10], 6) == -1", "assert find_first_occurrence([7, 7, 4, 3, 8, 8, 7, 13, 11, 14], 3) == -1", "assert find_first_occurrence([2, 8, 2, 4, 5, 11, 12, 13, 4, 4], 6) == -1", "assert find_first_occurrence([6, 9, 5, 8, 7, 9, 8, 11, 9, 9], 4) == -1", "assert find_first_occurrence([5, 8, 4, 1, 3, 8, 10, 14, 7, 13], 2) == -1", "assert find_first_occurrence([7, 7, 3, 2, 5, 5, 6, 13, 7, 7], 7) == -1", "assert find_first_occurrence([2, 5, 3, 5, 11, 4, 4, 13, 13, 7], 2) == 0", "assert find_first_occurrence([7, 3, 5, 8, 11, 7, 7, 4, 7, 5], 3) == 1", "assert find_first_occurrence([1, 6, 3, 10, 9, 6, 10, 9, 5, 4], 1) == 0", "assert find_first_occurrence([4, 2, 4, 1, 9, 3, 12, 13, 5, 7], 8) == -1", "assert find_first_occurrence([7, 6, 1, 5, 9, 5, 9, 12, 13, 11], 5) == -1"], "entry_point": "find_first_occurrence", "completion": "from typing import *\ndef find_first_occurrence(arr, target):\n    # Step 1: Validate the input\n    if not isinstance(target, int):\n        raise ValueError(\"The target must be an integer.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the array must be integers.\")\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"The array must be sorted in non-decreasing order.\")\n\n    # Step 2 and 3: Implement binary search to find the first occurrence\n    left, right = 0, len(arr) - 1\n    first_occurrence_index = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            first_occurrence_index = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Step 4 and 5: Return the result\n    return first_occurrence_index\n\n# Example usage:\n# print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n# print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n# print(find_first_occurrence([1, 1, 1, 1, 1], 1))  # Output: 0\n", "completions": ["from typing import *\ndef find_first_occurrence(arr, target):\n    # Validate input\n    if not isinstance(arr, list) or not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Input array must be a list of numbers.\")\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Input array must be ordered in non-decreasing order.\")\n    if not isinstance(target, (int, float)):\n        raise ValueError(\"Specified number must be a valid number.\")\n\n    # Binary search for the first occurrence\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Example usage\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n", "from typing import *\ndef find_first_occurrence(arr, target):\n    # Validate input\n    if not isinstance(arr, list) or not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Input array must be a list of numbers.\")\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Input array must be sorted in non-decreasing order.\")\n    if not isinstance(target, int):\n        raise ValueError(\"Specified number must be an integer.\")\n\n    # Implement modified binary search\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Example usage\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n", "from typing import *\ndef find_first_occurrence(arr, target):\n    # Input Validation\n    if not all(isinstance(x, int) for x in arr) or not isinstance(target, int):\n        raise ValueError(\"Array must contain integers and target must be an integer.\")\n    \n    # Binary Search Implementation\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n\n# Example usage\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n", "from typing import *\ndef find_first_occurrence(arr, target):\n    # Input validation\n    if not all(isinstance(x, int) for x in arr) or not isinstance(target, int):\n        raise ValueError(\"Array must contain integers and target must be an integer.\")\n    \n    # Binary search implementation\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # Return result\n    return result\n\n# Example usage:\n# print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n# print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n# print(find_first_occurrence([1, 1, 1, 1, 1], 1))  # Output: 0\n", "from typing import *\ndef find_first_occurrence(arr, target):\n    if not arr:\n        return -1\n\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Example usage\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n", "from typing import *\ndef find_first_occurrence(array, number):\n    # Handle edge case where the array is empty\n    if not array:\n        return -1\n    \n    # Iterate through the array\n    for index, element in enumerate(array):\n        # Check for the specified number\n        if element == number:\n            # Return the index if a match is found\n            return index\n    \n    # Return -1 if the number is not found in the array\n    return -1\n\n# Example usage\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n", "from typing import *\ndef find_first_occurrence(arr, target):\n    # Input Validation\n    if not isinstance(target, int):\n        raise ValueError(\"The target number must be an integer.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the array must be integers.\")\n    if arr != sorted(arr):\n        raise ValueError(\"The array must be sorted in non-decreasing order.\")\n\n    # Binary Search Implementation\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Edge Case Handling\n    return result\n", "from typing import *\ndef find_first_occurrence(arr, target):\n    # Input Validation\n    if not arr or not all(isinstance(x, int) for x in arr) or not isinstance(target, int):\n        raise ValueError(\"Input array must be a list of integers and target must be an integer.\")\n    if arr != sorted(arr):\n        raise ValueError(\"Input array must be sorted in non-decreasing order.\")\n\n    # Binary Search Implementation\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Return Result\n    return result\n", "from typing import *\ndef find_first_occurrence(arr, num):\n    for index, value in enumerate(arr):\n        if value == num:\n            return index\n    return -1\n", "from typing import *\ndef find_first_occurrence(arr, target):\n    # Step 1: Validate the input\n    if not isinstance(target, int):\n        raise ValueError(\"The target must be an integer.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the array must be integers.\")\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"The array must be sorted in non-decreasing order.\")\n\n    # Step 2 and 3: Implement binary search to find the first occurrence\n    left, right = 0, len(arr) - 1\n    first_occurrence_index = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            first_occurrence_index = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Step 4 and 5: Return the result\n    return first_occurrence_index\n\n# Example usage:\n# print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n# print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n# print(find_first_occurrence([1, 1, 1, 1, 1], 1))  # Output: 0\n"], "session_history": {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Validate the input to ensure it is an ordered array and the specified number is an integer.\",\n        \"details\": \"Check if the array is sorted in non-decreasing order and the target is a valid integer.\"\n      },\n      {\n        \"description\": \"Implement a search algorithm to find the first occurrence of the specified number.\",\n        \"details\": \"Use a binary search approach to efficiently locate the first occurrence of the number in the array.\"\n      },\n      {\n        \"description\": \"Handle edge cases where the specified number is not present in the array.\",\n        \"details\": \"Return a specific value (e.g., -1) if the number is not found in the array.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Step 1: Validate the input to ensure the array is ordered and the target is an integer.\",\n      \"Step 2: Implement a binary search algorithm to find the first occurrence of the specified number.\",\n      \"Step 3: During the search, keep track of the potential first occurrence index.\",\n      \"Step 4: If the number is found, return the index of its first occurrence.\",\n      \"Step 5: If the number is not found, return -1 to indicate absence.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array': An array in which the elements are arranged in a specific order, in this case, non-decreasing order.\n    'first occurrence': The index of the initial instance of a specified number in the ordered array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2 and 3 should be implemented simultaneously as they are both part of the binary search algorithm.\n    \"Implement a binary search algorithm to find the first occurrence of the specified number.\"\n    \"During the search, keep track of the potential first occurrence index.\"\n    This can be achieved by modifying the binary search algorithm to update the potential first occurrence index whenever the target number is found.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: The specified number is 5, and the first occurrence of 5 in the ordered array is at index 1.\n\n    find_first_occurrence([1, 2, 3, 4, 5], 6) == -1\n    Explanation: The specified number 6 is not present in the ordered array, so the function should return -1.\n\n    find_first_occurrence([1, 1, 1, 1, 1], 1) == 0\n    Explanation: The specified number is 1, and it is the first element in the ordered array, so the function should return 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm can efficiently handle cases where the specified number is not present in the array.", "Round_0": {"code": "def find_first_occurrence(arr, target):\n    # Step 1: Validate the input\n    if not isinstance(target, int):\n        raise ValueError(\"The target must be an integer.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the array must be integers.\")\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"The array must be sorted in non-decreasing order.\")\n\n    # Step 2 and 3: Implement binary search to find the first occurrence\n    left, right = 0, len(arr) - 1\n    first_occurrence_index = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            first_occurrence_index = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Step 4 and 5: Return the result\n    return first_occurrence_index\n\n# Example usage:\n# print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n# print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n# print(find_first_occurrence([1, 1, 1, 1, 1], 1))  # Output: 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate the input to ensure it is an ordered array and a specified number is provided.\",\n      \"details\": [\n        \"Check if the input array is a list of numbers.\",\n        \"Ensure the array is ordered (non-decreasing).\",\n        \"Verify that the specified number is a valid number.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a search algorithm to find the first occurrence of the specified number.\",\n      \"details\": [\n        \"Use a binary search algorithm to efficiently locate the specified number in the ordered array.\",\n        \"Modify the binary search to continue searching for the first occurrence if the number is found.\"\n      ]\n    },\n    {\n      \"description\": \"Return the index of the first occurrence or indicate if the number is not present.\",\n      \"details\": [\n        \"If the number is found, return the index of its first occurrence.\",\n        \"If the number is not found, return an indication (e.g., -1) that it is not present in the array.\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Start by validating the input to ensure it meets the expected criteria.\",\n    \"Implement a binary search algorithm to locate the specified number in the array.\",\n    \"Modify the binary search to find the first occurrence of the number.\",\n    \"Return the index of the first occurrence or -1 if the number is not found.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array'\n    Explanation: The requirement specifies that the input array is ordered in a non-decreasing manner, meaning the elements are arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve different aspects of the problem.\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) == 0\n    Explanation: In this edge case, all elements in the array are the same, and the specified number is present at the beginning. The expected output is 0.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) == -1\n    Explanation: The specified number is not present in the array, so the function should return -1.\n    find_first_occurrence([1, 2, 2, 3, 3, 3, 4, 4, 4], 3) == 3\n    Explanation: The specified number is 3, and it appears at index 3 for the first time in the ordered array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm can efficiently handle these scenarios.", "Round_0": {"code": "def find_first_occurrence(arr, target):\n    # Validate input\n    if not isinstance(arr, list) or not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Input array must be a list of numbers.\")\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Input array must be ordered in non-decreasing order.\")\n    if not isinstance(target, (int, float)):\n        raise ValueError(\"Specified number must be a valid number.\")\n\n    # Binary search for the first occurrence\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Example usage\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"subproblems\": [\n    {\n      \"description\": \"Validate the input to ensure it is an ordered array and the specified number is an integer.\",\n      \"details\": [\n        \"Check if the input array is a list of numbers.\",\n        \"Ensure the array is sorted in non-decreasing order.\",\n        \"Verify that the specified number is an integer.\"\n      ]\n    },\n    {\n      \"description\": \"Implement a search algorithm to find the first occurrence of the specified number.\",\n      \"details\": [\n        \"Use a binary search algorithm to efficiently locate the specified number in the ordered array.\",\n        \"Modify the binary search to continue searching in the left half of the array if the number is found, to ensure the first occurrence is located.\"\n      ]\n    },\n    {\n      \"description\": \"Return the index of the first occurrence or indicate if the number is not present.\",\n      \"details\": [\n        \"If the number is found, return the index of its first occurrence.\",\n        \"If the number is not found, return a value indicating its absence (e.g., -1).\"\n      ]\n    }\n  ],\n  \"high_level_plan\": [\n    \"Start by validating the input to ensure it meets the expected criteria.\",\n    \"Implement a modified binary search to locate the first occurrence of the specified number in the array.\",\n    \"Return the index of the first occurrence if found, or a value indicating the number is not present.\"\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array'\n    Explanation: The requirement specifies that the input array is sorted in non-decreasing order.\n\n    'first occurrence'\n    Explanation: Refers to the index of the initial instance of the specified number in the ordered array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve different subproblems and tasks.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: The specified number 5 appears at index 1 in the ordered array.\n\n    find_first_occurrence([1, 1, 1, 1, 1], 1) == 0\n    Explanation: The specified number 1 appears at index 0 in the ordered array.\n\n    find_first_occurrence([2, 3, 4, 5, 6], 7) == -1\n    Explanation: The specified number 7 is not present in the ordered array, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm can efficiently handle these cases.", "Round_0": {"code": "def find_first_occurrence(arr, target):\n    # Validate input\n    if not isinstance(arr, list) or not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Input array must be a list of numbers.\")\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Input array must be sorted in non-decreasing order.\")\n    if not isinstance(target, int):\n        raise ValueError(\"Specified number must be an integer.\")\n\n    # Implement modified binary search\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Example usage\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Validate the input array and the specified number.\",\n      \"description\": \"Ensure the array is ordered and contains integers. Check that the specified number is an integer.\"\n    },\n    {\n      \"subproblem\": \"Implement a search algorithm to locate the specified number.\",\n      \"description\": \"Use an efficient search method suitable for ordered arrays, such as binary search.\"\n    },\n    {\n      \"subproblem\": \"Identify the first occurrence of the specified number.\",\n      \"description\": \"Once the number is found, ensure it is the first occurrence by checking previous indices.\"\n    },\n    {\n      \"subproblem\": \"Return the index of the first occurrence.\",\n      \"description\": \"Output the index where the first occurrence of the specified number is found.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input Validation\",\n      \"description\": \"Check if the input array is ordered and contains integers. Validate the specified number is an integer.\"\n    },\n    {\n      \"step\": \"Search Implementation\",\n      \"description\": \"Implement a binary search algorithm to efficiently locate the specified number in the ordered array.\"\n    },\n    {\n      \"step\": \"First Occurrence Identification\",\n      \"description\": \"Once the number is found, iterate backwards if necessary to ensure it is the first occurrence.\"\n    },\n    {\n      \"step\": \"Return Result\",\n      \"description\": \"Return the index of the first occurrence of the specified number.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array'\n    Explanation: The requirement specifies that the input array is ordered, meaning the elements are arranged in a specific sequence.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as there are no steps that need to be executed simultaneously.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: The specified number is 5, and the function should return the index of the first occurrence of 5 in the ordered array, which is at index 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic of finding the first occurrence of the specified number in an ordered array can handle the given edge case.", "Round_0": {"code": "def find_first_occurrence(arr, target):\n    # Input Validation\n    if not all(isinstance(x, int) for x in arr) or not isinstance(target, int):\n        raise ValueError(\"Array must contain integers and target must be an integer.\")\n    \n    # Binary Search Implementation\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n\n# Example usage\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"decomposed_subproblems\": [\n    {\n      \"subproblem\": \"Validate the input array and the specified number.\",\n      \"description\": \"Ensure the array is ordered and contains integers. Check that the specified number is an integer.\"\n    },\n    {\n      \"subproblem\": \"Implement a search algorithm to locate the first occurrence of the specified number.\",\n      \"description\": \"Use an efficient search method suitable for ordered arrays, such as binary search, to find the index of the first occurrence of the specified number.\"\n    },\n    {\n      \"subproblem\": \"Handle cases where the specified number is not present in the array.\",\n      \"description\": \"Return an appropriate value (e.g., -1) if the specified number is not found in the array.\"\n    }\n  ],\n  \"high_level_plan\": [\n    {\n      \"step\": \"Input validation\",\n      \"description\": \"Check if the input array is ordered and contains integers. Validate that the specified number is an integer.\"\n    },\n    {\n      \"step\": \"Binary search implementation\",\n      \"description\": \"Implement a binary search algorithm to efficiently locate the first occurrence of the specified number in the ordered array.\"\n    },\n    {\n      \"step\": \"Return result\",\n      \"description\": \"Return the index of the first occurrence of the specified number, or -1 if the number is not found.\"\n    }\n  ]\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array'\n    Explanation: The requirement specifies that the input array is ordered, meaning the elements are arranged in a specific sequence.\n\n    'first occurrence'\n    Explanation: Refers to the index of the initial instance of the specified number in the ordered array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are distinct tasks.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: The specified number 5 appears first at index 1 in the ordered array.\n\n    find_first_occurrence([1, 2, 3, 4, 5], 6) == -1\n    Explanation: The specified number 6 is not present in the ordered array, so the function returns -1.\n\n    find_first_occurrence([1, 1, 1, 1, 1], 1) == 0\n    Explanation: The specified number 1 appears first at index 0 in the ordered array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm can efficiently handle cases where the specified number is not found in the ordered array.", "Round_0": {"code": "def find_first_occurrence(arr, target):\n    # Input validation\n    if not all(isinstance(x, int) for x in arr) or not isinstance(target, int):\n        raise ValueError(\"Array must contain integers and target must be an integer.\")\n    \n    # Binary search implementation\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # Return result\n    return result\n\n# Example usage:\n# print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n# print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n# print(find_first_occurrence([1, 1, 1, 1, 1], 1))  # Output: 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Understand the input format and constraints.\",\n        \"details\": \"The function will receive an ordered array and a target number. The array is sorted in non-decreasing order.\"\n      },\n      {\n        \"description\": \"Identify the task of finding the first occurrence.\",\n        \"details\": \"The function should return the index of the first occurrence of the target number in the array.\"\n      },\n      {\n        \"description\": \"Handle edge cases.\",\n        \"details\": \"Consider cases where the target number is not present in the array or the array is empty.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature.\",\n        \"details\": \"Create a function named 'find_first_occurrence' that takes two parameters: an ordered array and a target number.\"\n      },\n      {\n        \"step\": \"Implement a search algorithm.\",\n        \"details\": \"Use a binary search algorithm to efficiently find the first occurrence of the target number in the ordered array.\"\n      },\n      {\n        \"step\": \"Return the result.\",\n        \"details\": \"If the target number is found, return its index. If not, return a value indicating the target is not present (e.g., -1).\"\n      },\n      {\n        \"step\": \"Test the function.\",\n        \"details\": \"Verify the function with various test cases, including edge cases like an empty array or a target number not in the array.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array'\n    Explanation: The array is sorted in non-decreasing order, meaning the elements are arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: The target number 5 is first found at index 1 in the ordered array.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not arr:\n            return -1\n        (other code)\n\nNO", "Round_0": {"code": "def find_first_occurrence(arr, target):\n    if not arr:\n        return -1\n\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Example usage\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Understand the input format\",\n        \"details\": \"The function will take two inputs: an ordered array and a specified number.\"\n      },\n      {\n        \"description\": \"Identify the task\",\n        \"details\": \"Locate the index of the first occurrence of the specified number in the array.\"\n      },\n      {\n        \"description\": \"Handle edge cases\",\n        \"details\": \"Consider scenarios where the specified number is not present in the array or the array is empty.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function signature\",\n        \"details\": \"Create a function named 'find_first_occurrence' that accepts two parameters: an array and a number.\"\n      },\n      {\n        \"step\": \"Iterate through the array\",\n        \"details\": \"Use a loop to traverse each element of the array.\"\n      },\n      {\n        \"step\": \"Check for the specified number\",\n        \"details\": \"Within the loop, check if the current element matches the specified number.\"\n      },\n      {\n        \"step\": \"Return the index\",\n        \"details\": \"If a match is found, return the current index immediately.\"\n      },\n      {\n        \"step\": \"Handle no match scenario\",\n        \"details\": \"If the loop completes without finding the number, return a value indicating the number is not present (e.g., -1).\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array'\n    Explanation: An ordered array means the elements within the array are arranged based on a specific sequence or sorting criteria.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as described in the plan.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: The specified number 5 is first found at index 1 in the ordered array.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not array:\n            return -1\n        (other code)\n\nNO", "Round_0": {"code": "def find_first_occurrence(array, number):\n    # Handle edge case where the array is empty\n    if not array:\n        return -1\n    \n    # Iterate through the array\n    for index, element in enumerate(array):\n        # Check for the specified number\n        if element == number:\n            # Return the index if a match is found\n            return index\n    \n    # Return -1 if the number is not found in the array\n    return -1\n\n# Example usage\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Validate the input to ensure it is an ordered array and the specified number is an integer.\",\n        \"details\": \"Check if the array is sorted in non-decreasing order and the target number is a valid integer.\"\n      },\n      {\n        \"description\": \"Implement a search algorithm to find the first occurrence of the specified number.\",\n        \"details\": \"Use a binary search approach to efficiently locate the first occurrence of the number in the array.\"\n      },\n      {\n        \"description\": \"Handle edge cases where the specified number is not present in the array.\",\n        \"details\": \"Return a specific value (e.g., -1) if the number is not found in the array.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Input Validation\",\n        \"action\": \"Verify that the input array is sorted and the target number is an integer.\"\n      },\n      {\n        \"step\": \"Binary Search Implementation\",\n        \"action\": \"Implement a binary search to find the first occurrence of the specified number in the array.\"\n      },\n      {\n        \"step\": \"Edge Case Handling\",\n        \"action\": \"Ensure the function returns -1 if the specified number is not found in the array.\"\n      },\n      {\n        \"step\": \"Testing\",\n        \"action\": \"Test the function with various cases, including edge cases, to ensure correctness and robustness.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array'\n    Explanation: The requirement specifies that the input array is ordered in a non-decreasing manner, meaning the elements are arranged in ascending order.\n\n    'first occurrence'\n    Explanation: This refers to finding the index of the initial instance of the specified number in the ordered array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are distinct tasks.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: In the given ordered array, the first occurrence of the number 5 is at index 1.\n\n    find_first_occurrence([1, 2, 3, 4, 5], 6) == -1\n    Explanation: The specified number 6 is not present in the array, so the function should return -1.\n\n    find_first_occurrence([1, 1, 1, 1, 1], 1) == 0\n    Explanation: All elements in the array are the same, and the specified number is present at the beginning, so the function should return 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm can efficiently handle scenarios where the specified number is not found in the ordered array.", "Round_0": {"code": "def find_first_occurrence(arr, target):\n    # Input Validation\n    if not isinstance(target, int):\n        raise ValueError(\"The target number must be an integer.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the array must be integers.\")\n    if arr != sorted(arr):\n        raise ValueError(\"The array must be sorted in non-decreasing order.\")\n\n    # Binary Search Implementation\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Edge Case Handling\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Validate the input to ensure it is an ordered array and a valid number is provided.\",\n        \"details\": \"Check if the array is sorted in non-decreasing order and the target number is an integer.\"\n      },\n      {\n        \"description\": \"Implement a search algorithm to find the first occurrence of the specified number.\",\n        \"details\": \"Use a binary search approach to efficiently locate the first occurrence of the number in the array.\"\n      },\n      {\n        \"description\": \"Handle edge cases where the number is not present in the array.\",\n        \"details\": \"Return a specific value (e.g., -1) if the number is not found in the array.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Input Validation\",\n        \"action\": \"Verify that the input array is sorted and the target number is an integer.\"\n      },\n      {\n        \"step\": \"Binary Search Implementation\",\n        \"action\": \"Implement a binary search to find the first occurrence of the target number in the array.\"\n      },\n      {\n        \"step\": \"Edge Case Handling\",\n        \"action\": \"Ensure the function returns -1 if the target number is not found in the array.\"\n      },\n      {\n        \"step\": \"Return Result\",\n        \"action\": \"Return the index of the first occurrence of the target number or -1 if not found.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array': An array in which the elements are arranged in non-decreasing order.\n    'first occurrence': The index of the initial instance of a specified number in the ordered array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as they are distinct tasks.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: The specified number 5 first occurs at index 1 in the ordered array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search algorithm efficiently handles cases where the number is not present in the array.", "Round_0": {"code": "def find_first_occurrence(arr, target):\n    # Input Validation\n    if not arr or not all(isinstance(x, int) for x in arr) or not isinstance(target, int):\n        raise ValueError(\"Input array must be a list of integers and target must be an integer.\")\n    if arr != sorted(arr):\n        raise ValueError(\"Input array must be sorted in non-decreasing order.\")\n\n    # Binary Search Implementation\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Return Result\n    return result\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Understand the input format\",\n        \"details\": \"The function will take two inputs: an ordered array and a specified number.\"\n      },\n      {\n        \"description\": \"Iterate through the array\",\n        \"details\": \"Loop through the elements of the array to find the specified number.\"\n      },\n      {\n        \"description\": \"Identify the first occurrence\",\n        \"details\": \"Determine the index of the first occurrence of the specified number in the array.\"\n      },\n      {\n        \"description\": \"Handle edge cases\",\n        \"details\": \"Consider scenarios where the specified number is not present in the array or the array is empty.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Define the function\",\n        \"details\": \"Create a function named 'find_first_occurrence' that accepts two parameters: an ordered array and a specified number.\"\n      },\n      {\n        \"step\": \"Initialize a loop\",\n        \"details\": \"Use a loop to iterate over the elements of the array.\"\n      },\n      {\n        \"step\": \"Check for the specified number\",\n        \"details\": \"Within the loop, check if the current element is equal to the specified number.\"\n      },\n      {\n        \"step\": \"Return the index\",\n        \"details\": \"If the specified number is found, return the current index.\"\n      },\n      {\n        \"step\": \"Handle absence of the number\",\n        \"details\": \"If the loop completes without finding the number, return a value indicating the number is not present (e.g., -1).\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array'\n    Explanation: An ordered array means the elements within the array are arranged based on a specific sequence or sorting criteria.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as described in the plan.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: The specified number 5 first occurs at index 1 in the ordered array.\n\n    find_first_occurrence([1, 2, 3], 4) == -1\n    Explanation: The specified number 4 is not present in the array, so the function returns -1.\n\n    find_first_occurrence([], 5) == -1\n    Explanation: The array is empty, so the function returns -1.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic in the function already covers scenarios where the specified number is not present or the array is empty.", "Round_0": {"code": "def find_first_occurrence(arr, num):\n    for index, value in enumerate(arr):\n        if value == num:\n            return index\n    return -1\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "```json\n{\n  \"requirement_analysis\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Validate the input to ensure it is an ordered array and the specified number is an integer.\",\n        \"details\": \"Check if the array is sorted in non-decreasing order and the target is a valid integer.\"\n      },\n      {\n        \"description\": \"Implement a search algorithm to find the first occurrence of the specified number.\",\n        \"details\": \"Use a binary search approach to efficiently locate the first occurrence of the number in the array.\"\n      },\n      {\n        \"description\": \"Handle edge cases where the specified number is not present in the array.\",\n        \"details\": \"Return a specific value (e.g., -1) if the number is not found in the array.\"\n      }\n    ],\n    \"high_level_plan\": [\n      \"Step 1: Validate the input to ensure the array is ordered and the target is an integer.\",\n      \"Step 2: Implement a binary search algorithm to find the first occurrence of the specified number.\",\n      \"Step 3: During the search, keep track of the potential first occurrence index.\",\n      \"Step 4: If the number is found, return the index of its first occurrence.\",\n      \"Step 5: If the number is not found, return -1 to indicate absence.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered array': An array in which the elements are arranged in a specific order, in this case, non-decreasing order.\n    'first occurrence': The index of the initial instance of a specified number in the ordered array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 2 and 3 should be implemented simultaneously as they are both part of the binary search algorithm.\n    \"Implement a binary search algorithm to find the first occurrence of the specified number.\"\n    \"During the search, keep track of the potential first occurrence index.\"\n    This can be achieved by modifying the binary search algorithm to update the potential first occurrence index whenever the target number is found.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: The specified number is 5, and the first occurrence of 5 in the ordered array is at index 1.\n\n    find_first_occurrence([1, 2, 3, 4, 5], 6) == -1\n    Explanation: The specified number 6 is not present in the ordered array, so the function should return -1.\n\n    find_first_occurrence([1, 1, 1, 1, 1], 1) == 0\n    Explanation: The specified number is 1, and it is the first element in the ordered array, so the function should return 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm can efficiently handle cases where the specified number is not present in the array.", "Round_0": {"code": "def find_first_occurrence(arr, target):\n    # Step 1: Validate the input\n    if not isinstance(target, int):\n        raise ValueError(\"The target must be an integer.\")\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the array must be integers.\")\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"The array must be sorted in non-decreasing order.\")\n\n    # Step 2 and 3: Implement binary search to find the first occurrence\n    left, right = 0, len(arr) - 1\n    first_occurrence_index = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            first_occurrence_index = mid\n            right = mid - 1  # Continue searching in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Step 4 and 5: Return the result\n    return first_occurrence_index\n\n# Example usage:\n# print(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output: 1\n# print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n# print(find_first_occurrence([1, 1, 1, 1, 1], 1))  # Output: 0\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "test": ["def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 3, 2, 7, 8, 3, 13, 4, 11, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 6, 1, 6, 7, 10, 9, 5, 12, 10], 4) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 8, 10, 7, 11, 6, 12, 6, 13], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 9, 3, 4, 9, 13, 5, 7, 12], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 9, 6, 3, 7, 2, 11, 5, 13, 6], 3) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 4, 8, 4, 7, 10, 12, 10, 14, 13], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 10, 9, 8, 2, 10, 4, 13, 14, 12], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 3, 7, 3, 2, 7, 8, 7, 13], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 10, 9, 8, 1, 4, 13, 10, 4, 9], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 2, 5, 3, 5, 13, 12, 4, 6], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 3, 3, 10, 9, 10, 9, 4, 13], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 5, 1, 5, 9, 6, 6, 13, 12, 10], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 10, 3, 4, 6, 8, 3, 9, 10, 14], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 7, 9, 9, 5, 12, 7, 11, 10], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 5, 5, 10, 5, 9, 11, 4, 5, 7], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 7, 2, 5, 11, 2, 9, 13, 11, 9], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 1, 5, 1, 5, 6, 7, 6, 12], 7) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 9, 6, 10, 7, 10, 6, 5, 5], 10) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 3, 10, 8, 7, 12, 10, 11, 12], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 7, 3, 3, 7, 7, 5, 7, 13, 6], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 7, 4, 1, 4, 9, 6, 14, 13, 8], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 1, 6, 10, 4, 11, 5, 10, 12], 5) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 2, 7, 7, 1, 7, 9, 13, 9, 14], 7) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 1, 2, 3, 5, 7, 10, 4, 10], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 2, 9, 9, 11, 9, 3, 13, 7, 9], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 9, 6, 5, 9, 5, 3, 12, 6, 12], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 4, 5, 6, 11, 8, 11, 10, 14, 10], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 5, 9, 8, 4, 11, 10, 13, 11, 5], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 3, 8, 3, 7, 6, 11, 4, 10], 3) == 2", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 1, 8, 3, 10, 6, 5, 10, 11, 9], 10) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 9, 4, 1, 2, 1, 11, 10, 13, 6], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 8, 1, 10, 9, 13, 6, 7, 7], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 1, 5, 10, 5, 10, 6, 11, 12], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 7, 7, 5, 6, 1, 6, 6, 14, 12], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 10, 2, 2, 3, 7, 8, 12, 5], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 5, 8, 3, 1, 12, 8, 5, 5], 8) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 5, 2, 1, 3, 11, 7, 6, 12], 7) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 6, 8, 3, 4, 1, 6, 11, 4, 10], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 10, 8, 1, 9, 13, 8, 14, 10], 8) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 8, 7, 2, 11, 5, 7, 9, 9, 9], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 9, 4, 3, 10, 4, 4, 7, 9], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 4, 3, 9, 10, 9, 11, 14, 14, 9], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 1, 4, 3, 7, 4, 6, 10, 4, 10], 1) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 6, 5, 8, 3, 9, 14, 14, 11], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 1, 9, 9, 10, 13, 10, 11, 5], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 1, 2, 3, 4, 5, 8, 12, 11], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 2, 1, 9, 8, 11, 3, 6, 8, 4], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 8, 8, 7, 8, 3, 5, 11, 14, 12], 8) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 3, 10, 1, 3, 10, 14, 13, 8], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 1, 10, 11, 5, 7, 13, 4, 8], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 4, 9, 8, 2, 10, 10, 11, 8, 5], 10) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 10, 5, 8, 11, 11, 13, 12, 6], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 7, 6, 8, 4, 5, 4, 4, 7], 8) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 2, 4, 10, 11, 8, 3, 6, 10, 12], 2) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 6, 7, 2, 10, 1, 7, 12, 14, 7], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 4, 2, 3, 8, 8, 12, 12, 4], 1) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 10, 9, 3, 11, 7, 8, 11, 5], 3) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 2, 9, 1, 7, 3, 3, 4, 5, 5], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 3, 9, 1, 11, 7, 11, 11, 6, 13], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 7, 5, 1, 2, 1, 11, 5, 11, 11], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 9, 6, 11, 1, 6, 5, 12, 12], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 4, 9, 2, 8, 9, 11, 11, 13], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 9, 9, 6, 11, 3, 9, 8, 5], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 6, 8, 4, 8, 10, 10, 10, 10], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 8, 4, 6, 9, 11, 10, 8, 14], 9) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 2, 1, 5, 4, 3, 9, 4, 12, 11], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 1, 5, 2, 1, 6, 3, 13, 9, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 1, 4, 10, 2, 5, 11, 11, 5], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 3, 8, 1, 5, 11, 9, 8, 4], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 6, 6, 2, 3, 1, 10, 14, 4, 11], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 8, 3, 2, 8, 1, 6, 10, 9, 4], 10) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 1, 4, 3, 3, 4, 14, 7, 13], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 5, 3, 8, 8, 10, 8, 11, 13], 5) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 7, 4, 2, 8, 10, 5, 8, 4, 9], 4) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 9, 2, 5, 10, 1, 3, 5, 13, 6], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 4, 9, 3, 10, 13, 6, 14, 5], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 4, 5, 9, 11, 4, 6, 8, 12, 4], 4) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 3, 2, 1, 7, 8, 12, 10, 9, 5], 8) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 5, 3, 6, 8, 5, 10, 13, 10], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 9, 3, 7, 4, 11, 9, 11, 7, 6], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 3, 5, 4, 7, 10, 5, 5, 14, 13], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 6, 3, 8, 6, 9, 9, 7, 5], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 1, 1, 10, 8, 10, 4, 9, 7, 10], 8) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 4, 4, 3, 10, 9, 9, 11, 13], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 5, 5, 10, 5, 9, 8, 6, 8], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 1, 4, 7, 5, 4, 11, 10, 4, 10], 1) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 2, 4, 2, 11, 4, 11, 12, 7, 10], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 2, 4, 8, 4, 13, 4, 4, 14], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 7, 4, 8, 5, 1, 9, 5, 4, 10], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 4, 3, 8, 8, 7, 13, 11, 14], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 2, 4, 5, 11, 12, 13, 4, 4], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 9, 5, 8, 7, 9, 8, 11, 9, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 4, 1, 3, 8, 10, 14, 7, 13], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 3, 2, 5, 5, 6, 13, 7, 7], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 3, 5, 11, 4, 4, 13, 13, 7], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 3, 5, 8, 11, 7, 7, 4, 7, 5], 3) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 6, 3, 10, 9, 6, 10, 9, 5, 4], 1) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 2, 4, 1, 9, 3, 12, 13, 5, 7], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 6, 1, 5, 9, 5, 9, 12, 13, 11], 5) == -1"], "scores": [0.0196, 0.0196, 1.0, 1.0, 1.0, 0.7059, 0.0196, 0.0196, 0.7059, 0.0196], "pass_results": [false, false, true, true, true, false, false, false, false, false], "pass_test_cases_num": [2, 2, 102, 102, 102, 72, 2, 2, 72, 2], "passed": true, "pass": true, "pass_num": 1, "round": 219, "repair_prompt": ["Create a function to locate the index of the initial instance of a specified number in an ordered array.\nexample:\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n", "Create a function to locate the index of the initial instance of a specified number in an array that is ordered. An ordered array means the elements within the array are arranged based on a specific sequence or sorting criteria.\nexample:\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n", "Create a function to locate the index of the initial instance of a specified number in an ordered array.\nexample:\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n"], "mutate_method": "rephrase_one", "save_node": false, "parent_index": 219}
