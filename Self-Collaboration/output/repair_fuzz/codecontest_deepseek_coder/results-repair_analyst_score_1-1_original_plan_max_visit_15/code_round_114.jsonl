{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive integers. He wrote down the totals of all non-empty subsequences of this array, arranged them in non-decreasing order, and formed an array b containing 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive integers. He wrote down the totals of all non-empty subsequences of this array, arranged them in non-decreasing order, and formed an array b containing 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Polycarp had an array a consisting of 3 positive integers. He wrote down the sums of all non-empty subsequences of this array, arranged them in non-decreasing order, and formed an array b containing 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b =\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Polycarp had an array b consisting of 7 integers, each representing the total of all non-empty subsequences of the original array a, which consisted of 3 positive integers. Unfortunately, Polycarp lost the original array a, and he needs help to restore it.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        print(a_1, a_2, a_3)\nmain()", "completions": ["def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        print(a_1, a_2, a_3)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1, a_2, a_3 = b[0], b[1], b[6] - b[0] - b[1]\n        print(a_1, a_2, a_3)\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three numbers in the array b are the elements of array a\n        a = sorted(b[:3])\n        # The remaining elements in b are the sums of a[0], a[1], and a[2] with the other elements in b\n        remaining_sum = b[6] - sum(a)\n        # Since the sums are unique, we can find a[2] by subtracting the sum of a[0] and a[1] from the remaining sum\n        a.append(remaining_sum - a[0])\n        print(*a)\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three values in array b are the elements of array a\n        a = sorted(b[:3])\n        # The remaining elements of array a can be found by subtracting these values from the subsequent elements in array b\n        a.append(b[3] - a[0])\n        a.append(b[4] - a[0])\n        a.append(b[5] - a[0] - a[1])\n        # Output the result for each test case\n        print(a[0], a[1], a[2])\nmain()", "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        a.sort()\n        print(f\"{a[0]} {a[1]} {a[2]}\")\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(f\"{a[0]} {a[1]} {a[2]}\")\nmain()", "def restore_array_a():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        print(a_1, a_2, a_3)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to read the number of test cases and the arrays b for each test case.\",\n      \"For each test case, identify the three integers a_1, a_2, and a_3 that sum to the given array b.\",\n      \"Ensure that the solution is efficient enough to handle up to 5000 test cases, with each array b containing 7 integers each up to 10^9.\"\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers of array b.\",\n      \"  Identify the three integers a_1, a_2, and a_3 that sum to the array b.\",\n      \"Output the three integers a_1, a_2, and a_3 for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'non-empty subsequences': means all possible combinations of the array elements, including single elements and multiple elements.\n    'sum of subsequences': means the sum of all possible combinations of three integers.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases t.\n    - For each test case, read the 7 integers of array b.\n   ", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        print(a_1, a_2, a_3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        print(a_1, a_2, a_3)"}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to read the number of test cases and the arrays b for each test case.\",\n      \"For each test case, identify the three integers a_1, a_2, and a_3 that sum to the given array b.\",\n      \"Ensure that the solution is efficient enough to handle up to 5000 test cases, with each array b containing 7 integers each up to 10^9.\"\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers of array b.\",\n      \"  Identify the three integers a_1, a_2, and a_3 from array b.\",\n      \"  Output the three integers a_1, a_2, and a_3 for the current test case.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'non-empty subsequences': means combinations of elements from the array without changing the order\n    'sum to': means the sum of the three integers should match the given array b\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implement simultaneously. We need to find three integers a_1, a_2, and a_3 such that their sum equals each element in the array b. This can be done by iterating through the", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        print(a_1, a_2, a_3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        print(a_1, a_2, a_3)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input for the number of test cases and the arrays b for each test case.\",\n      \"For each test case, identify the three integers a_1, a_2, and a_3 that sum to the given array b.\",\n      \"Ensure that the solution is efficient enough to handle up to 5000 test cases, with each array b containing 7 integers each up to 10^9.\"\n    ],\n    \"high_level_plan\": [\n      \"Initialize a function to process each test case.\",\n      \"For each test case, read the 7 integers into an array b.\",\n      \"Sort the array b to simplify the identification of the three integers a_1, a_2, and a_3.\",\n      \"Use the property that the sum of all non-empty subsequences of a 3-element array a is a_1 + a_1 + a_2 + a_1 + a_2 + a_3 + a_1 + a_2 + a_3 + a_2 + a_3 + a_3 = 3*(a_1 + a_2 + a_3).\",\n      \"Calculate the sum of the smallest three elements in b, which should equal 3*(a_1 + a_2 + a_3).\",\n      \"Output the three smallest elements from b as a_1, a_2, and a_3.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'non-empty subsequences': means combinations of elements from the array without changing the order\n    'sum of all non-empty subsequences': means the sum of all possible combinations of the array elements\n\n# [phrase showing quantity relationship]\n    'more than': means greater than zero\n    'at least as many times': means appears of a number >= its value\n\n# [degree adverb] \n    'largest': means the biggest number\n\n# [code logic]\n    The steps 2-6 should be implement simultaneously.\n    \"Read the input for", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1, a_2, a_3 = b[0], b[1], b[6] - b[0] - b[1]\n        print(a_1, a_2, a_3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1, a_2, a_3 = b[0], b[1], b[6] - b[0] - b[1]\n        print(a_1, a_2, a_3)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for each test case.\",\n        \"details\": \"The program should read the number of test cases and then read the array b for each test case.\"\n      },\n      {\n        \"subproblem\": \"Identify the smallest three numbers in the array b.\",\n        \"details\": \"Since the array b is sorted in non-decreasing order, the smallest three numbers will be the first three elements.\"\n      },\n      {\n        \"subproblem\": \"Determine the remaining elements in the array b.\",\n        \"details\": \"The remaining elements should be the sums of the identified smallest three numbers with the other elements in the array b.\"\n      },\n      {\n        \"subproblem\": \"Output the original array a for each test case.\",\n        \"details\": \"The program should output the three integers that form the original array a.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read input.\",\n        \"details\": \"Read the number of test cases and prepare to read the array b for each test case.\"\n      },\n      {\n        \"step\": \"For each test case:\",\n        \"details\": \"Read the array b and identify the smallest three numbers. Calculate the remaining elements as sums of the identified numbers and the other elements in the array b.\"\n      },\n      {\n        \"step\": \"Output the results.\",\n        \"details\": \"For each test case, output the three integers that form the original array a.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input data for each test case.\",\n      \"Identify the smallest three numbers in the array b.\",\n      \"Determine the remaining elements in the array b.\",\n      \"Output the original array a for each test case.\"\n    ],\n    \"steps\": [\n      \"Initialize the program to read input.\",\n      \"Read the number of test cases and prepare to read the array b for each test case.\",\n      \"For each test case:\",\n      \"Read the array b and identify the smallest three", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a = [b[0], b[1], b[6] - b[5] - b[4]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three numbers in the array b are the elements of array a\n        a = sorted(b[:3])\n        # The remaining elements in b are the sums of a[0], a[1], and a[2] with the other elements in b\n        remaining_sum = b[6] - sum(a)\n        # Since the sums are unique, we can find a[2] by subtracting the sum of a[0] and a[1] from the remaining sum\n        a.append(remaining_sum - a[0])\n        print(*a)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for multiple test cases.\",\n        \"details\": \"The program should read the number of test cases and then read the 7 integers for each test case.\"\n      },\n      {\n        \"subproblem\": \"Determine the possible sums from the given array b.\",\n        \"details\": \"Since b is a sorted array of sums of all non-empty subsequences of a 3-element array a, we need to find a way to reverse-engineer the original array a from b.\"\n      },\n      {\n        \"subproblem\": \"Identify the three integers in array a.\",\n        \"details\": \"Given that b contains the sums of all non-empty subsequences of a, the smallest three elements of b must be the three integers from a, as they are the smallest sums.\"\n      },\n      {\n        \"subproblem\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output the three integers found in the previous step.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read input.\",\n        \"details\": \"Start by reading the number of test cases.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the 7 integers and store them in a list.\"\n      },\n      {\n        \"step\": \"Identify the three smallest elements in the list.\",\n        \"details\": \"Sort the list to easily identify the smallest three elements, which correspond to the three integers in array a.\"\n      },\n      {\n        \"step\": \"Output the three integers for each test case.\",\n        \"details\": \"Print the three smallest elements as the result for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input data for multiple test cases.\",\n      {\n        \"details\": \"The program should read the number of test cases and then read the 7 integers for each test case.\"\n      },\n      \"Determine the possible sums from the given array b.\",\n      {\n        \"details\": \"Since b is a sorted array of sums of all non-empty subsequences of a 3-element array a, we need to find a way to reverse-engineer the original array a from b.\"\n", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for each test case.\",\n        \"details\": \"The program should read the number of test cases and then read the array b for each test case.\"\n      },\n      {\n        \"subproblem\": \"Identify the smallest three values in array b.\",\n        \"details\": \"Since the array b is sorted in non-decreasing order, the smallest three values will be the first three elements of the array.\"\n      },\n      {\n        \"subproblem\": \"Determine the remaining elements of array a.\",\n        \"details\": \"Given the smallest three values, the remaining elements of array a can be found by subtracting these values from the subsequent elements in array b.\"\n      },\n      {\n        \"subproblem\": \"Output the array a for each test case.\",\n        \"details\": \"The program should output the identified elements of array a for each test case.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases t.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"details\": \"For each test case, read the array b of 7 integers.\"\n      },\n      {\n        \"step\": \"Identify the smallest three values in array b.\",\n        \"details\": \"Extract the first three elements of array b as the smallest values of array a.\"\n      },\n      {\n        \"step\": \"Determine the remaining elements of array a.\",\n        \"details\": \"Subtract the smallest three values from the subsequent elements in array b to find the remaining elements of array a.\"\n      },\n      {\n        \"step\": \"Output the result for each test case.\",\n        \"details\": \"Print the identified elements of array a for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input data for each test case.\",\n      \"Identify the smallest three values in array b.\",\n      \"Determine the remaining elements of array a.\",\n      \"Output the array a for each test case.\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases.\",\n      \"For each test case, read the array b of 7 integers.\",\n      \"Identify the smallest three values in array b and assign them to a1, a2, and a3.\",\n     ", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = b[0], b[1], b[2]\n        b1, b2, b3, b4, b5, b6, b7 = b\n        a = [a1, (b1 + b2 + b3 + b4 + b5 + b6 + b7) - 3 * a1, (b1 + b2 + b3 + b4 + b5 + b6 + b7) - 2 * a1 - a2]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        # The smallest three values in array b are the elements of array a\n        a = sorted(b[:3])\n        # The remaining elements of array a can be found by subtracting these values from the subsequent elements in array b\n        a.append(b[3] - a[0])\n        a.append(b[4] - a[0])\n        a.append(b[5] - a[0] - a[1])\n        # Output the result for each test case\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the three integers a_1, a_2, and a_3 from the array b.\",\n        \"steps\": [\n          \"For each test case, identify the three smallest integers in array b that can form a valid array a.\",\n          \"Since the input guarantees a solution exists, the smallest three values in b will always form a valid a.\"\n        ]\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"steps\": [\n          \"For each test case, print the three integers a_1, a_2, and a_3 in non-decreasing order.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the number of test cases t.\",\n      \"Loop through each test case.\",\n      \"Read the 7 integers representing array b.\",\n      \"Identify the three smallest integers in array b.\",\n      \"Print the three integers in non-decreasing order.\",\n      \"Repeat for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the input for the number of test cases and the arrays b for each test case.\",\n        \"steps\": [\n          \"Read the number of test cases t.\",\n          \"For each test case, read the 7 integers representing array b.\"\n        ]\n      },\n      {\n        \"description\": \"Determine the three integers a_1, a_2, and a_3 from the array b.\",\n        \"steps\": [\n          \"For each test case", "Round_0": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        a.sort()\n        print(f\"{a[0]} {a[1]} {a[2]}\")", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        a.sort()\n        print(f\"{a[0]} {a[1]} {a[2]}\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for test cases.\",\n        \"details\": \"The program should read the number of test cases and then read the 7 integers for each test case.\"\n      },\n      {\n        \"subproblem\": \"Determine the possible sums from the given array b.\",\n        \"details\": \"Since b is a sorted array of sums of all non-empty subsequences of a 3-element array, we need to find a way to reverse-engineer the original array a from b.\"\n      },\n      {\n        \"subproblem\": \"Identify the three integers in array a.\",\n        \"details\": \"Given the sorted nature of b, the smallest three elements in b must be the three integers from array a. The remaining elements in b are the sums of pairs and the sum of all three elements.\"\n      },\n      {\n        \"subproblem\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output the three integers that form array a.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read input.\",\n        \"details\": \"Start by reading the number of test cases.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the 7 integers and store them in a list.\"\n      },\n      {\n        \"step\": \"Identify the three smallest elements in the list.\",\n        \"details\": \"These elements are the integers from array a.\"\n      },\n      {\n        \"step\": \"Output the identified integers for each test case.\",\n        \"details\": \"Print the three integers in ascending order.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input data for test cases.\",\n      \"Determine the possible sums from the given array b.\",\n      \"Identify the three integers in array a.\",\n      \"Output the result for each test case.\"\n    ],\n    \"steps\": [\n      \"Initialize the program to read input.\",\n      \"Start by reading the number of test cases.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the 7 integers and store them in a list.\",\n      \"Identify", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(f\"{a[0]} {a[1]} {a[2]}\")", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(f\"{a[0]} {a[1]} {a[2]}\")"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for each test case.\",\n        \"details\": \"The program should read the number of test cases and then read the array b for each test case.\"\n      },\n      {\n        \"subproblem\": \"Identify the three integers in array b.\",\n        \"details\": \"Since the array b is formed by the sums of all non-empty subsequences of array a, and array a consists of three integers, array b will always contain the three smallest elements of array a, followed by the sums of all pairs, triples, and the sum of all elements of array a.\"\n      },\n      {\n        \"subproblem\": \"Determine the three smallest elements in array b.\",\n        \"details\": \"By identifying the three smallest elements in array b, we can deduce the values of the three integers in array a.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases t.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"details\": \"For each test case, read the array b of 7 integers.\"\n      },\n      {\n        \"step\": \"Identify the three smallest elements in array b.\",\n        \"details\": \"Sort the array b and select the first three elements as the three smallest integers in array a.\"\n      },\n      {\n        \"step\": \"Output the result for each test case.\",\n        \"details\": \"Print the three integers in array a for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for each test case.\",\n        \"details\": \"The program should read the number of test cases and then read the array b for each test case.\"\n      },\n      {\n        \"subproblem\": \"Identify the three integers in array b.\",\n        \"details\": \"Since the array b is formed by the sums of all non-empty subsequences of array a, and array a consists of three integers, array b will always contain the three smallest elements of array a", "Round_0": {"code": "def restore_array_a():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def restore_array_a():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"decomposition\": [\n      {\n        \"subproblem\": \"Read the input data for test cases.\",\n        \"details\": \"The program should read the number of test cases and then read the 7 integers for each test case.\"\n      },\n      {\n        \"subproblem\": \"Determine the possible sums from the given array b.\",\n        \"details\": \"Since b is a sorted array of sums of all non-empty subsequences of a 3-element array, we need to find a way to reverse-engineer the original array a from b.\"\n      },\n      {\n        \"subproblem\": \"Identify the three integers in array a.\",\n        \"details\": \"Given the sorted nature of b, the smallest three elements in b must be the three integers from array a. The remaining elements in b are the sums of pairs and the sum of all three elements.\"\n      },\n      {\n        \"subproblem\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output the three integers that form array a.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read input.\",\n        \"details\": \"Start by reading the number of test cases.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the 7 integers and store them in a list.\"\n      },\n      {\n        \"step\": \"Identify the three smallest elements in the list.\",\n        \"details\": \"Sort the list to find the three smallest elements, which are the integers in array a.\"\n      },\n      {\n        \"step\": \"Output the result.\",\n        \"details\": \"Print the three integers found in the previous step for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the input data for test cases.\",\n      \"Determine the possible sums from the given array b.\",\n      \"Identify the three integers in array a.\",\n      \"Output the result for each test case.\"\n    ],\n    \"steps\": [\n      \"Initialize the program to read input.\",\n      \"Start by reading the number of test cases.\",\n      \"Loop through each test case.\",\n      \"For each test case, read the 7 integers and store them in a list.\",\n      \"Identify", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a = [b[0], b[1], b[6] - b[0] - b[1]]\n        print(a[0], a[1], a[2])"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to read the number of test cases and the arrays b for each test case.\",\n      \"For each test case, identify the three integers a_1, a_2, and a_3 that sum to the given array b.\",\n      \"Ensure that the solution is efficient enough to handle up to 5000 test cases, with each array b containing 7 integers each up to 10^9.\"\n    ],\n    \"high_level_plan\": [\n      \"Read the number of test cases t.\",\n      \"For each test case:\",\n      \"  Read the 7 integers of array b.\",\n      \"  Identify the three integers a_1, a_2, and a_3 that sum to the array b.\",\n      \"Output the three integers a_1, a_2, and a_3 for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'non-empty subsequences': means all possible combinations of the array elements, including single elements and multiple elements.\n    'sum of subsequences': means the sum of all possible combinations of three integers.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases t.\n    - For each test case, read the 7 integers of array b.\n   ", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        print(a_1, a_2, a_3)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        b.sort()\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        print(a_1, a_2, a_3)"}}], "scores": [], "pass_results": [false, false, true, true, true, true, true, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 114, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 11}
