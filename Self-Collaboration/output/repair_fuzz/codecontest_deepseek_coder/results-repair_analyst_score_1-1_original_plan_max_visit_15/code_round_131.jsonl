{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "prompt": "You are provided with a keyboard featuring 26 keys, arranged sequentially in a singular row in a particular sequence. The keys follow a specific sequence. They are not arranged randomly but follow a specific sequence, with each key corresponding to a unique lowercase Latin letter. You have to type the word s on this keyboard, which also consists only of lowercase Latin letters.\n\nTo type a word, you have to input all its characters consecutively one after the other, placing your hand precisely over the matching key and pressing it. Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nCalculate how much time it will require to type the word s by determining the total movement time needed to type the given word on the keyboard. Assume the sequence is fixed and known before typing begins.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "repair_prompt": ["You are provided with a keyboard featuring 26 keys, arranged sequentially in a singular row in a particular sequence. The keys follow a specific sequence. They are not arranged randomly but follow a specific sequence, with each key corresponding to a unique lowercase Latin letter. You have to type the word s on this keyboard, which also consists only of lowercase Latin letters.\n\nTo type a word, you have to input all its characters consecutively one after the other, placing your hand precisely over the matching key and pressing it. Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nCalculate how much time it will require to type the word s by determining the total movement time needed to type the given word on the keyboard. Assume the sequence is fixed and known before typing begins.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys arranged in a single row, each key corresponding to a unique lowercase Latin letter. You need to type a word s, which consists of lowercase Latin letters, on this keyboard. To type the word, you must input all its characters consecutively one after the other, placing your hand precisely over the matching key and pressing it. The time taken to move your hand between keys is equal to the absolute value of the difference between the positions of these keys. No time is spent on pressing the keys or placing your hand over the first letter of the word.\n\nFor instance, consider a keyboard\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys arranged in a row, each key corresponding to a unique lowercase Latin letter. You need to type the word s on this keyboard, which consists of lowercase Latin letters. The time to type the word is determined by the total movement time needed to input all its characters consecutively, calculated as the absolute value of the difference between the positions of each consecutive pair of keys. No time is spent on pressing the keys or placing the hand over the first letter. Calculate the total movement time required to type the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize the time to type the word\n        time = 0\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            previous_pos = keyboard_positions[word[i - 1]]\n            time += abs(current_pos - previous_pos)\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "completions": ["def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize the total time to 0\n        total_time = 0\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            previous_pos = keyboard_positions[word[i - 1]]\n            total_time += abs(current_pos - previous_pos)\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        total_time = 0\n        \n        # Find the position of the first character in the word\n        first_char_pos = keyboard.index(word[0])\n        \n        # Calculate the total movement time\n        for i in range(1, len(word)):\n            current_char_pos = keyboard.index(word[i])\n            total_time += abs(current_char_pos - first_char_pos)\n            first_char_pos = current_char_pos\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize the total time and the position of the hand\n        total_time = 0\n        hand_position = 0\n        \n        # Calculate the time to type the word\n        for char in word:\n            current_position = keyboard_positions[char]\n            total_time += abs(current_position - hand_position)\n            hand_position = current_position\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each key to its position\n        key_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the total time to type the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(key_positions[word[i]] - key_positions[word[i - 1]])\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each key to its position\n        key_positions = {key: index for index, key in enumerate(keyboard)}\n        \n        # Calculate the total time to type the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(key_positions[word[i]] - key_positions[word[i - 1]])\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        total_time = 0\n        \n        # Find the initial position of the first character in the word\n        current_pos = keyboard.index(word[0])\n        \n        # Calculate the time to type the word\n        for char in word[1:]:\n            next_pos = keyboard.index(char)\n            total_time += abs(current_pos - next_pos)\n            current_pos = next_pos\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def calculate_movement_time(keyboard, word):\n    position_map = {char: idx for idx, char in enumerate(keyboard)}\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n    return total_time\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        results.append(calculate_movement_time(keyboard, word))\n    for result in results:\n        print(result)\nmain()", "def calculate_movement_time(keyboard, word):\n    positions = {char: idx for idx, char in enumerate(keyboard)}\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(positions[word[i]] - positions[word[i - 1]])\n    return total_time\n\ndef main():\n    t = int(input().strip())\n    results = []\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        results.append(calculate_movement_time(keyboard, word))\n    for result in results:\n        print(result)\nmain()", "def read_number_of_test_cases():\n    return int(input())\n\ndef read_keyboard_layout():\n    return input().strip()\n\ndef read_word():\n    return input().strip()\n\ndef calculate_movement_time(keyboard, word):\n    positions = {char: idx for idx, char in enumerate(keyboard)}\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(positions[word[i]] - positions[word[i - 1]])\n    return total_time\n\ndef main():\n    t = read_number_of_test_cases()\n    results = []\n    for _ in range(t):\n        keyboard = read_keyboard_layout()\n        word = read_word()\n        total_time = calculate_movement_time(keyboard, word)\n        results.append(total_time)\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize the time to type the word\n        time = 0\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            previous_pos = keyboard_positions[word[i - 1]]\n            time += abs(current_pos - previous_pos)\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Details\": \"The first line of input contains the number of test cases t.\"\n      },\n      {\n        \"Description\": \"Read the keyboard layout for each test case.\",\n        \"Details\": \"For each test case, the next line contains a string of 26 unique lowercase Latin letters representing the keyboard layout.\"\n      },\n      {\n        \"Description\": \"Read the word to be typed for each test case.\",\n        \"Details\": \"For each test case, the next line contains the word s which is to be typed.\"\n      },\n      {\n        \"Description\": \"Map the keyboard layout to positions.\",\n        \"Details\": \"Create a dictionary to map each letter to its position on the keyboard.\"\n      },\n      {\n        \"Description\": \"Calculate the time to type the word for each test case.\",\n        \"Details\": \"For each word, calculate the total time based on the positions of the letters on the keyboard, considering the time to move the hand between keys.\"\n      },\n      {\n        \"Description\": \"Output the result for each test case.\",\n        \"Details\": \"For each test case, output the calculated time.\"\n      }\n    ],\n    \"MajorSteps\": [\n      {\n        \"Step\": \"Initialize the program.\",\n        \"Details\": \"Start by reading the number of test cases.\"\n      },\n      {\n        \"Step\": \"Process each test case.\",\n        \"Details\": \"For each test case, read the keyboard layout and the word, map the keyboard, and calculate the typing time.\"\n      },\n      {\n        \"Step\": \"Output the results.\",\n        \"Details\": \"After processing all test cases, output the calculated times.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time it takes to type a word on a given keyboard. The time depends on the positions of the keys on the keyboard, and the movement time between keys is determined by the absolute difference in their positions.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize the time to type the word\n        time = 0\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            previous_pos = keyboard_positions[word[i - 1]]\n            time += abs(current_pos - previous_pos)\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Details\": \"The first line of input contains the number of test cases t.\"\n      },\n      {\n        \"Description\": \"Read the keyboard layout for each test case.\",\n        \"Details\": \"For each test case, the next line contains a string of 26 unique lowercase Latin letters representing the keyboard layout.\"\n      },\n      {\n        \"Description\": \"Read the word to be typed for each test case.\",\n        \"Details\": \"For each test case, the next line contains the word s which is to be typed.\"\n      },\n      {\n        \"Description\": \"Map the keyboard layout to positions.\",\n        \"Details\": \"Create a dictionary to map each letter to its position on the keyboard.\"\n      },\n      {\n        \"Description\": \"Calculate the time to type the word for each test case.\",\n        \"Details\": \"For each word, calculate the total time based on the positions of the letters on the keyboard. The time is the sum of the absolute differences between consecutive letters' positions.\"\n      },\n      {\n        \"Description\": \"Output the result for each test case.\",\n        \"Details\": \"For each test case, output the calculated time.\"\n      }\n    ],\n    \"MajorSteps\": [\n      {\n        \"Step\": \"Initialize the program.\",\n        \"Details\": \"Start by reading the number of test cases.\"\n      },\n      {\n        \"Step\": \"Process each test case.\",\n        \"Details\": \"For each test case, read the keyboard layout and the word, map the keyboard layout to positions, calculate the typing time for the word, and output the result.\"\n      },\n      {\n        \"Step\": \"Output the results.\",\n        \"Details\": \"After processing all test cases, print the calculated times.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time taken to type a word on a given keyboard. The time depends on the positions of the keys on the keyboard, and the position of a key is determined by its index in the keyboard string.\n\n# [phrase showing quantity relationship]\n    'more than': means that the integer appears a number of times greater than its value.\n\n# [degree adverb] \n    'largest': means the", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize the total time to 0\n        total_time = 0\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            previous_pos = keyboard_positions[word[i - 1]]\n            total_time += abs(current_pos - previous_pos)\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize the total time to 0\n        total_time = 0\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            previous_pos = keyboard_positions[word[i - 1]]\n            total_time += abs(current_pos - previous_pos)\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to determine the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read and store the keyboard layout for each test case.\",\n        \"steps\": [\n          \"For each of the next 2t lines, read the keyboard layout string of length 26.\",\n          \"Store each keyboard layout for later use.\"\n        ]\n      },\n      {\n        \"description\": \"Read and process each word to be typed for each test case.\",\n        \"steps\": [\n          \"For each of the next t lines, read the word to be typed.\",\n          \"Store each word for later use.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the typing time for each word on each keyboard layout.\",\n        \"steps\": [\n          \"For each keyboard layout and each word, determine the position of each character in the keyboard.\",\n          \"Calculate the total movement time by summing the absolute differences in positions for consecutive characters in the word.\"\n        ]\n      },\n      {\n        \"description\": \"Output the calculated typing times for each test case.\",\n        \"steps\": [\n          \"For each test case, print the calculated typing time.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"Read and store the keyboard layouts and words for each test case.\",\n      \"Calculate the typing times for each word on each keyboard layout.\",\n      \"Output the results.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to determine the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read and store the keyboard layout for each test case.\",\n        \"steps\": [\n          \"For each of the next 2t lines, read the keyboard layout string of length 26.\",\n          \"Store each keyboard layout for later use.\"\n        ]", "Round_0": {"code": "def main():\n    t = int(input())\n    keyboards = []\n    words = []\n    \n    # Read keyboard layouts and words\n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        keyboards.append(keyboard)\n        words.append(word)\n    \n    # Calculate typing times\n    for i in range(t):\n        keyboard = keyboards[i]\n        word = words[i]\n        total_time = 0\n        \n        # Find positions of each character in the keyboard\n        positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the total movement time\n        for j in range(1, len(word)):\n            total_time += abs(positions[word[j]] - positions[word[j-1]])\n        \n        # Output the result\n        print(total_time)", "report": "The compilation output of the preceding code is: invalid literal for int() with base 10: 'abcdefghijklmnopqrstuvwxyz'"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        total_time = 0\n        \n        # Find the position of the first character in the word\n        first_char_pos = keyboard.index(word[0])\n        \n        # Calculate the total movement time\n        for i in range(1, len(word)):\n            current_char_pos = keyboard.index(word[i])\n            total_time += abs(current_char_pos - first_char_pos)\n            first_char_pos = current_char_pos\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Details\": \"The first line of input contains the number of test cases t.\"\n      },\n      {\n        \"Description\": \"Read the keyboard layout for each test case.\",\n        \"Details\": \"For each test case, the next line contains a string of 26 unique lowercase Latin letters representing the keyboard layout.\"\n      },\n      {\n        \"Description\": \"Read the word to be typed for each test case.\",\n        \"Details\": \"For each test case, the next line contains the word s which is to be typed.\"\n      },\n      {\n        \"Description\": \"Map the keyboard layout to positions.\",\n        \"Details\": \"Create a dictionary to map each letter to its position on the keyboard.\"\n      },\n      {\n        \"Description\": \"Calculate the time to type the word for each test case.\",\n        \"Details\": \"For each word, calculate the total time based on the positions of the letters on the keyboard, considering the time to move the hand between keys.\"\n      },\n      {\n        \"Description\": \"Output the result for each test case.\",\n        \"Details\": \"For each test case, output the calculated time.\"\n      }\n    ],\n    \"MajorSteps\": [\n      {\n        \"Step\": \"Initialize the program.\",\n        \"Details\": \"Start by reading the number of test cases.\"\n      },\n      {\n        \"Step\": \"Process each test case.\",\n        \"Details\": \"For each test case, read the keyboard layout and the word, map the keyboard, and calculate the typing time.\"\n      },\n      {\n        \"Step\": \"Output the results.\",\n        \"Details\": \"After processing all test cases, output the calculated times.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, each key corresponding to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time it takes to type a word on a given keyboard. The time depends on the positions of the keys on the keyboard, and the movement of the hand between keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implement simultaneously. We need to:\n    ", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize the total time and the position of the hand\n        total_time = 0\n        hand_position = 0\n        \n        # Calculate the time to type the word\n        for char in word:\n            current_position = keyboard_positions[char]\n            total_time += abs(current_position - hand_position)\n            hand_position = current_position\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: failed with AssertionError. "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize the total time and the position of the hand\n        total_time = 0\n        hand_position = 0\n        \n        # Calculate the time to type the word\n        for char in word:\n            current_position = keyboard_positions[char]\n            total_time += abs(current_position - hand_position)\n            hand_position = current_position\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases from the input.\",\n        \"steps\": [\n          \"Read the first line of input to determine the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to calculate the typing time.\",\n        \"steps\": [\n          \"For each test case, read the keyboard layout and the word to be typed.\",\n          \"Map each key on the keyboard to its position (index + 1 for 'a' = 1, ..., 'z' = 26).\",\n          \"Calculate the total time to type the word by summing the absolute differences in positions for consecutive characters in the word.\"\n        ]\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"steps\": [\n          \"For each test case, print the calculated typing time.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the program to read input.\",\n      \"Read the number of test cases.\",\n      \"Loop through each test case:\",\n      \"  Read the keyboard layout and the word.\",\n      \"  Map the keyboard keys to their positions.\",\n      \"  Calculate the typing time for the word.\",\n      \"  Output the typing time for each test case.\",\n      \"End the program.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases from the input.\",\n        \"steps\": [\n          \"Read the first line of input to determine the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to calculate the typing time.\",\n        \"steps\": [\n          \"For each test case, read the keyboard layout and the word to be typed.\",\n          \"Map each key on the keyboard to its position (index + 1", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each key to its position\n        key_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the total time to type the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(key_positions[word[i]] - key_positions[word[i - 1]])\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: '_io.TextIOWrapper' object has no attribute 'getvalue'"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each key to its position\n        key_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the total time to type the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(key_positions[word[i]] - key_positions[word[i - 1]])\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases from the input.\",\n        \"steps\": [\n          \"Read the first line of input to determine the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to calculate the typing time.\",\n        \"steps\": [\n          \"For each test case, read the keyboard layout and the word to be typed.\",\n          \"Map each key to its position on the keyboard.\",\n          \"Calculate the total time required to type the word by summing the absolute differences in positions for consecutive characters.\"\n        ]\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"steps\": [\n          \"For each test case, print the calculated typing time.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the program to read input.\",\n      \"Read the number of test cases.\",\n      \"Loop through each test case:\",\n      \"  Read the keyboard layout and the word.\",\n      \"  Map each key to its position on the keyboard.\",\n      \"  Calculate the total typing time for the word.\",\n      \"  Output the calculated typing time.\",\n      \"End loop through test cases.\",\n      \"End program.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases from the input.\",\n        \"steps\": [\n          \"Read the first line of input to determine the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Process each test case to calculate the typing time.\",\n        \"steps\": [\n          \"For each test case, read the keyboard layout and the word to be typed.\",\n          \"Map each key to its position on the keyboard.\",\n          \"Calculate", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each key to its position\n        key_positions = {key: index for index, key in enumerate(keyboard)}\n        \n        # Calculate the total time to type the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(key_positions[word[i]] - key_positions[word[i - 1]])\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to determine the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read and store the keyboard layout for each test case.\",\n        \"steps\": [\n          \"For each of the next 2t lines, read the keyboard layout string of length 26.\",\n          \"Store each keyboard layout for later use.\"\n        ]\n      },\n      {\n        \"description\": \"Read and process each word for each test case.\",\n        \"steps\": [\n          \"For each of the next t pairs of lines, read the word to be typed.\",\n          \"Process each word to calculate the time required to type it on the given keyboard.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the time to type a word.\",\n        \"steps\": [\n          \"For each character in the word, find its position on the keyboard.\",\n          \"Calculate the time to move the hand from the current key to the next key by taking the absolute difference of their positions.\",\n          \"Sum all the movement times to get the total time for typing the word.\"\n        ]\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"steps\": [\n          \"For each test case, print the total time calculated for typing the word.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"Loop to read and store the keyboard layouts for each test case.\",\n      \"Loop to read and process each word for each test case.\",\n      \"For each word, calculate the total time to type it on the corresponding keyboard.\",\n      \"Output the total time for each word.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to determine the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read and store the keyboard layout for each test case.\",\n        \"steps\": [\n          \"For each of the next 2t lines, read the keyboard layout string of length 26.\",\n          \"Store each keyboard layout for later use.\"\n        ]", "Round_0": {"code": "def main():\n    t = int(input())\n    keyboards = []\n    words = []\n    \n    # Read keyboard layouts and words\n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        keyboards.append(keyboard)\n        words.append(word)\n    \n    # Process each word on its respective keyboard\n    for i in range(t):\n        keyboard = keyboards[i]\n        word = words[i]\n        total_time = 0\n        \n        # Calculate the time to type the word\n        for j in range(1, len(word)):\n            current_pos = keyboard.index(word[j-1])\n            next_pos = keyboard.index(word[j])\n            total_time += abs(current_pos - next_pos)\n        \n        # Output the result for each test case\n        print(total_time)", "report": "The compilation output of the preceding code is: invalid literal for int() with base 10: 'abcdefghijklmnopqrstuvwxyz'"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        total_time = 0\n        \n        # Find the initial position of the first character in the word\n        current_pos = keyboard.index(word[0])\n        \n        # Calculate the time to type the word\n        for char in word[1:]:\n            next_pos = keyboard.index(char)\n            total_time += abs(current_pos - next_pos)\n            current_pos = next_pos\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to determine the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read the keyboard layout and the word for each test case.\",\n        \"steps\": [\n          \"For each test case, read the keyboard layout (a string of 26 unique lowercase Latin letters).\"\n        ]\n      },\n      {\n        \"description\": \"Read the word for each test case.\",\n        \"steps\": [\n          \"For each test case, read the word to be typed (a string of lowercase Latin letters).\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the total movement time for each test case.\",\n        \"steps\": [\n          \"For each word, calculate the total movement time by summing the absolute differences between the positions of each consecutive pair of characters in the word on the given keyboard.\"\n        ]\n      },\n      {\n        \"description\": \"Output the total movement time for each test case.\",\n        \"steps\": [\n          \"For each test case, output the calculated total movement time.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize a loop to iterate through each test case based on the number of test cases read.\",\n      \"For each test case:\",\n      \"  Read the keyboard layout and the word.\",\n      \"  Calculate the total movement time for the word on the given keyboard.\",\n      \"  Output the calculated total movement time.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, each key corresponding to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the total movement time required to type a word based on the positions of the keys on the keyboard.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    For each test case, we need to:\n    1. Find the index of each character in the keyboard.\n    2. Calculate", "Round_0": {"code": "def calculate_movement_time(keyboard, word):\n    position_map = {char: idx for idx, char in enumerate(keyboard)}\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n    return total_time\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        results.append(calculate_movement_time(keyboard, word))\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: calculate_movement_time() missing 2 required positional arguments: 'keyboard' and 'word'"}, "Round_1": {"code": "def calculate_movement_time(keyboard, word):\n    position_map = {char: idx for idx, char in enumerate(keyboard)}\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n    return total_time\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        results.append(calculate_movement_time(keyboard, word))\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Details\": \"The first line of input contains the number of test cases t.\"\n      },\n      {\n        \"Description\": \"Read the keyboard layout for each test case.\",\n        \"Details\": \"For each test case, the next line contains a string of 26 unique lowercase Latin letters representing the keyboard layout.\"\n      },\n      {\n        \"Description\": \"Read the word to be typed for each test case.\",\n        \"Details\": \"For each test case, the next line contains the word s which is to be typed.\"\n      },\n      {\n        \"Description\": \"Calculate the total movement time for each test case.\",\n        \"Details\": \"For each word, calculate the total movement time by summing the absolute differences between the positions of each consecutive pair of characters in the word on the given keyboard.\"\n      },\n      {\n        \"Description\": \"Output the total movement time for each test case.\",\n        \"Details\": \"For each test case, output the calculated total movement time.\"\n      }\n    ]\n  },\n  \"High-Level Plan\": {\n    \"Steps\": [\n      {\n        \"Description\": \"Initialize the program to read input.\",\n        \"Details\": \"Set up the program to read input from stdin.\"\n      },\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Details\": \"Read the first line of input to determine the number of test cases.\"\n      },\n      {\n        \"Description\": \"Loop through each test case.\",\n        \"Details\": \"Use a loop to iterate through each test case based on the number of test cases read.\"\n      },\n      {\n        \"Description\": \"Read the keyboard layout and the word for each test case.\",\n        \"Details\": \"For each test case, read the keyboard layout and the word to be typed.\"\n      },\n      {\n        \"Description\": \"Calculate the total movement time for the word on the given keyboard.\",\n        \"Details\": \"For each word, calculate the total movement time by mapping each character to its position on the keyboard and summing the absolute differences between consecutive characters.\"\n      },\n      {\n        \"Description\": \"Output the total movement time for each test\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, each key corresponding to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the total movement time required to type a word based on the positions of the keys on the keyboard. The position of each key is determined by its order in the alphabet.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially. Each step is dependent on the previous", "Round_0": {"code": "def calculate_movement_time(keyboard, word):\n    positions = {char: idx for idx, char in enumerate(keyboard)}\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(positions[word[i]] - positions[word[i - 1]])\n    return total_time\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        results.append(calculate_movement_time(keyboard, word))\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: calculate_movement_time() missing 2 required positional arguments: 'keyboard' and 'word'"}, "Round_1": {"code": "def calculate_movement_time(keyboard, word):\n    positions = {char: idx for idx, char in enumerate(keyboard)}\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(positions[word[i]] - positions[word[i - 1]])\n    return total_time\n\ndef main():\n    t = int(input().strip())\n    results = []\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        results.append(calculate_movement_time(keyboard, word))\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Task\": \"Implement a function to read the number of test cases from the input.\"\n      },\n      {\n        \"Description\": \"Read the keyboard layout for each test case.\",\n        \"Task\": \"Implement a function to read the keyboard layout for each test case.\"\n      },\n      {\n        \"Description\": \"Read the word to be typed for each test case.\",\n        \"Task\": \"Implement a function to read the word to be typed for each test case.\"\n      },\n      {\n        \"Description\": \"Calculate the total movement time for typing the word on the given keyboard.\",\n        \"Task\": \"Implement a function to calculate the total movement time for each test case.\"\n      },\n      {\n        \"Description\": \"Output the total movement time for each test case.\",\n        \"Task\": \"Implement a function to output the total movement time for each test case.\"\n      }\n    ]\n  },\n  \"High-Level Plan\": {\n    \"Steps\": [\n      {\n        \"Description\": \"Initialize the program to handle multiple test cases.\",\n        \"Task\": \"Read the number of test cases and initialize a loop to process each case.\"\n      },\n      {\n        \"Description\": \"For each test case, read the keyboard layout and the word to be typed.\",\n        \"Task\": \"Implement functions to read the keyboard layout and the word for each test case.\"\n      },\n      {\n        \"Description\": \"Calculate the total movement time for typing the word on the given keyboard.\",\n        \"Task\": \"Implement a function to calculate the total movement time by finding the positions of each character in the keyboard and summing the absolute differences between consecutive characters in the word.\"\n      },\n      {\n        \"Description\": \"Output the total movement time for each test case.\",\n        \"Task\": \"Implement a function to output the calculated total movement time for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"YES\": \"NO\"\n}\n```", "Round_0": {"code": "def read_number_of_test_cases():\n    return int(input())\n\ndef read_keyboard_layout():\n    return input().strip()\n\ndef read_word():\n    return input().strip()\n\ndef calculate_movement_time(keyboard, word):\n    positions = {char: idx for idx, char in enumerate(keyboard)}\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(positions[word[i]] - positions[word[i - 1]])\n    return total_time\n\ndef main():\n    t = read_number_of_test_cases()\n    results = []\n    for _ in range(t):\n        keyboard = read_keyboard_layout()\n        word = read_word()\n        total_time = calculate_movement_time(keyboard, word)\n        results.append(total_time)\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: EOF while scanning triple-quoted string literal (<string>, line 82)"}, "Round_1": {"code": "def read_number_of_test_cases():\n    return int(input())\n\ndef read_keyboard_layout():\n    return input().strip()\n\ndef read_word():\n    return input().strip()\n\ndef calculate_movement_time(keyboard, word):\n    positions = {char: idx for idx, char in enumerate(keyboard)}\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(positions[word[i]] - positions[word[i - 1]])\n    return total_time\n\ndef main():\n    t = read_number_of_test_cases()\n    results = []\n    for _ in range(t):\n        keyboard = read_keyboard_layout()\n        word = read_word()\n        total_time = calculate_movement_time(keyboard, word)\n        results.append(total_time)\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Details\": \"The first line of input contains the number of test cases t.\"\n      },\n      {\n        \"Description\": \"Read the keyboard layout for each test case.\",\n        \"Details\": \"For each test case, the next line contains a string of 26 unique lowercase Latin letters representing the keyboard layout.\"\n      },\n      {\n        \"Description\": \"Read the word to be typed for each test case.\",\n        \"Details\": \"For each test case, the next line contains the word s which is to be typed.\"\n      },\n      {\n        \"Description\": \"Map the keyboard layout to positions.\",\n        \"Details\": \"Create a dictionary to map each letter to its position on the keyboard.\"\n      },\n      {\n        \"Description\": \"Calculate the time to type the word for each test case.\",\n        \"Details\": \"For each word, calculate the total time based on the positions of the letters on the keyboard, considering the time to move the hand between keys.\"\n      },\n      {\n        \"Description\": \"Output the result for each test case.\",\n        \"Details\": \"For each test case, output the calculated time.\"\n      }\n    ],\n    \"MajorSteps\": [\n      {\n        \"Step\": \"Initialize the program.\",\n        \"Details\": \"Start by reading the number of test cases.\"\n      },\n      {\n        \"Step\": \"Process each test case.\",\n        \"Details\": \"For each test case, read the keyboard layout and the word, map the keyboard, and calculate the typing time.\"\n      },\n      {\n        \"Step\": \"Output the results.\",\n        \"Details\": \"After processing all test cases, output the calculated times.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time it takes to type a word on a given keyboard. The time depends on the positions of the keys on the keyboard, and the movement time between keys is determined by the absolute difference in their positions.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize the time to type the word\n        time = 0\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            previous_pos = keyboard_positions[word[i - 1]]\n            time += abs(current_pos - previous_pos)\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [true, true, true, true, true, true, true, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 131, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 91}
