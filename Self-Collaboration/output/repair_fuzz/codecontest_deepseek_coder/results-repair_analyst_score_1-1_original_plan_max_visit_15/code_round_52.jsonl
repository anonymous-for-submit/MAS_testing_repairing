{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "prompt": "You are given a keyboard that consists of 26 keys, arranged sequentially in one row in a certain order. They are not arranged randomly but follow a specific sequence, with each key corresponding to a unique lowercase Latin letter. You have to type the word s on this keyboard, which also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one, positioning your hand exactly over the corresponding key and pressing it. Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s by computing the total movement time needed to type the given word on the keyboard. Assume the sequence is fixed and known before typing begins.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "repair_prompt": ["You are given a keyboard that consists of 26 keys, arranged sequentially in one row in a certain order. They are not arranged randomly but follow a specific sequence, with each key corresponding to a unique lowercase Latin letter. You have to type the word s on this keyboard, which also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one, positioning your hand exactly over the corresponding key and pressing it. Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s by computing the total movement time needed to type the given word on the keyboard. Assume the sequence is fixed and known before typing begins.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys arranged in a specific order, each key corresponding to a unique lowercase Latin letter. To type a word s, you need to type all its letters consecutively one by one, moving your hand from one key to the next. The time taken to move your hand between keys is equal to the absolute value of the difference between the positions of these keys. You do not need to account for the time spent pressing the keys or placing your hand over the first letter of the word.\n\nFor instance, if the keyboard is arranged in alphabetical order, the letter 'h' is on the \n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys arranged sequentially in one row, corresponding to a unique lowercase Latin letter. You need to type the word s on this keyboard, which consists of lowercase Latin letters. The time to type a word is determined by the absolute value of the difference between the positions of the keys for consecutive letters, with no time spent on pressing the keys or placing the hand over the first letter. Calculate the total movement time needed to type the word s on the given keyboard.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: index for index, char in enumerate(keyboard)}\n        \n        # Calculate the total movement time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            prev_pos = keyboard_positions[word[i - 1]]\n            total_time += abs(current_pos - prev_pos)\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "completions": ["def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the total movement time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        time = 0\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each key to its position\n        key_positions = {key: index for index, key in enumerate(keyboard)}\n        \n        # Initialize the total time\n        total_time = 0\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            current_pos = key_positions[word[i]]\n            prev_pos = key_positions[word[i - 1]]\n            total_time += abs(current_pos - prev_pos)\n        \n        results.append(total_time)\n    \n    # Print the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        time = 0\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the time to type the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position in the keyboard\n        keyboard_positions = {char: index for index, char in enumerate(keyboard)}\n        \n        # Initialize the time and the position of the hand\n        time = 0\n        current_position = 0\n        \n        # Calculate the total typing time for the word\n        for letter in word:\n            target_position = keyboard_positions[letter]\n            time += abs(target_position - current_position)\n            current_position = target_position\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position in the keyboard\n        keyboard_positions = {char: index for index, char in enumerate(keyboard, start=1)}\n        \n        # Initialize the time and the position of the hand\n        time = 0\n        current_position = 1  # Start at position 1 (the first key)\n        \n        # Calculate the total typing time for the word\n        for letter in word:\n            target_position = keyboard_positions[letter]\n            time += abs(target_position - current_position)\n            current_position = target_position  # Update the current position\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each key to its position\n        key_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the time to type the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(key_positions[word[i]] - key_positions[word[i - 1]])\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()", "def read_number_of_test_cases():\n    return int(input())\n\ndef read_keyboard():\n    return input().strip()\n\ndef read_word():\n    return input().strip()\n\ndef create_key_position_map(keyboard):\n    return {char: index for index, char in enumerate(keyboard)}\n\ndef calculate_typing_time(keyboard, word):\n    key_positions = create_key_position_map(keyboard)\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(key_positions[word[i]] - key_positions[word[i-1]])\n    return total_time\n\ndef main():\n    t = read_number_of_test_cases()\n    for _ in range(t):\n        keyboard = read_keyboard()\n        word = read_word()\n        time_to_type = calculate_typing_time(keyboard, word)\n        print(time_to_type)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: index for index, char in enumerate(keyboard)}\n        \n        # Calculate the total movement time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            prev_pos = keyboard_positions[word[i - 1]]\n            total_time += abs(current_pos - prev_pos)\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)\nmain()"], "session_history": {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read the keyboard layout and the word for each test case.\",\n        \"steps\": [\n          \"For each test case, read the keyboard layout (a string of 26 unique lowercase Latin letters).\"\n        ]\n      },\n      {\n        \"description\": \"Read the word to be typed for each test case.\",\n        \"steps\": [\n          \"For each test case, read the word (a string of lowercase Latin letters).\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the total movement time for each test case.\",\n        \"steps\": [\n          \"Create a mapping of each letter to its position on the keyboard.\",\n          \"For each word in a test case, calculate the total movement time by summing the absolute differences between the positions of consecutive letters.\"\n        ]\n      },\n      {\n        \"description\": \"Output the total movement time for each test case.\",\n        \"steps\": [\n          \"For each test case, print the calculated total movement time.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"Loop through each test case to read the keyboard layout and the word.\",\n      \"Map each letter to its position on the keyboard.\",\n      \"Calculate the total movement time for each word based on the keyboard positions.\",\n      \"Output the total movement time for each word.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time it takes to type a word on a given keyboard. The time is determined by the absolute difference in positions between consecutive letters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Create a mapping of each letter to its position on", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: index for index, char in enumerate(keyboard)}\n        \n        # Calculate the total movement time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            prev_pos = keyboard_positions[word[i - 1]]\n            total_time += abs(current_pos - prev_pos)\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read the keyboard layout and the word for each test case.\",\n        \"steps\": [\n          \"For each test case, read the keyboard layout (a string of 26 unique lowercase Latin letters).\"\n        ]\n      },\n      {\n        \"description\": \"Read the word to be typed for each test case.\",\n        \"steps\": [\n          \"For each test case, read the word (a string of lowercase Latin letters).\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the total movement time for each test case.\",\n        \"steps\": [\n          \"Create a mapping of each letter to its position on the keyboard.\",\n          \"For each word, calculate the total movement time by summing the absolute differences between the positions of consecutive letters.\"\n        ]\n      },\n      {\n        \"description\": \"Output the total movement time for each test case.\",\n        \"steps\": [\n          \"For each test case, print the calculated total movement time.\"\n        ]\n      }\n    ],\n    \"high_level_plan\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"Loop through each test case to read the keyboard layout and the word.\",\n      \"Create a mapping of the keyboard layout to positions.\",\n      \"For each word, calculate the total movement time.\",\n      \"Output the total movement time for each word.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    'word typing': the process of inputting a sequence of letters, where the time taken is determined by the positions of the keys used.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially. For each test case, we need to:\n    1. Create a mapping of each letter to its position on", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the total movement time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            total_time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read and store the keyboard layout for each test case.\",\n        \"steps\": [\n          \"For each of the next 2t lines, read the keyboard layout string.\",\n          \"Store each keyboard layout for later use.\"\n        ]\n      },\n      {\n        \"description\": \"Read and store the words to be typed for each test case.\",\n        \"steps\": [\n          \"For each of the next t lines, read the word to be typed.\",\n          \"Store each word for later use.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the time to type each word based on the keyboard layout.\",\n        \"steps\": [\n          \"For each test case, calculate the time to type the word using the given keyboard layout.\",\n          \"The time is the sum of the absolute differences in positions of consecutive letters in the word.\"\n        ]\n      },\n      {\n        \"description\": \"Output the calculated times for each test case.\",\n        \"steps\": [\n          \"For each test case, print the calculated time.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the program to read input.\",\n      \"Read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the keyboard layout.\",\n      \"  Read the word to be typed.\",\n      \"  Calculate the time to type the word based on the keyboard layout.\",\n      \"Output the calculated times for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, each key corresponding to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key on the keyboard. The task is to calculate the time it takes to type a word based on the positions of these keys on the keyboard.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implement simultaneously", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        time = 0\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Map each key on the keyboard to its position.\",\n        \"details\": \"Create a dictionary to store the position of each key in the keyboard.\"\n      },\n      {\n        \"description\": \"Calculate the time to type a word based on the positions of the keys.\",\n        \"details\": \"For each letter in the word, find its position on the keyboard and calculate the time to move the hand from the current position to the next letter's position.\"\n      },\n      {\n        \"description\": \"Sum the times for all letters in the word to get the total time.\",\n        \"details\": \"Iterate through the word, using the position dictionary to find the time for each move and sum these times.\"\n      },\n      {\n        \"description\": \"Handle multiple test cases.\",\n        \"details\": \"Read the number of test cases, then for each test case, read the keyboard layout and the word, compute the time, and print the result.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"description\": \"Initialize the program to handle multiple test cases.\",\n        \"details\": \"Read the number of test cases.\"\n      },\n      {\n        \"description\": \"For each test case:\",\n        \"details\": [\n          \"Map the keyboard keys to their positions.\",\n          \"Read the word to be typed.\",\n          \"Calculate the total time to type the word.\",\n          \"Print the total time for the current test case.\"\n        ]\n      },\n      {\n        \"description\": \"End the program after processing all test cases.\",\n        \"details\": \"\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to determine the time it takes to type a word on a given keyboard. The time depends on the positions of the keys and the order in which they are typed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    For each test case, we need to:\n    1. Map the keyboard", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each key to its position\n        key_positions = {key: index for index, key in enumerate(keyboard)}\n        \n        # Initialize the total time\n        total_time = 0\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            current_pos = key_positions[word[i]]\n            prev_pos = key_positions[word[i - 1]]\n            total_time += abs(current_pos - prev_pos)\n        \n        results.append(total_time)\n    \n    # Print the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read and store the keyboard layout for each test case.\",\n        \"steps\": [\n          \"For each of the next 2t lines, read the keyboard layout string.\",\n          \"Store each keyboard layout for later use.\"\n        ]\n      },\n      {\n        \"description\": \"Read and store the words to be typed for each test case.\",\n        \"steps\": [\n          \"For each of the next t lines, read the word to be typed.\",\n          \"Store each word for later use.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the time to type each word based on the keyboard layout.\",\n        \"steps\": [\n          \"For each test case, calculate the time to type the word using the given keyboard layout.\",\n          \"The time is the sum of the absolute differences in positions of consecutive letters in the word.\"\n        ]\n      },\n      {\n        \"description\": \"Output the calculated times for each test case.\",\n        \"steps\": [\n          \"For each test case, print the calculated time.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the program to read input.\",\n      \"Read the number of test cases.\",\n      \"For each test case:\",\n      \"  Read the keyboard layout.\",\n      \"  Read the word to be typed.\",\n      \"  Calculate the time to type the word based on the keyboard layout.\",\n      \"Output the calculated times for each test case.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, each key corresponding to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key. The task is to calculate the time it takes to type a word based on the positions of these keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implement simultaneously.\n    For each test", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        time = 0\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the time to type the word\n        for i in range(1, len(word)):\n            time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read and store the keyboard layout for each test case.\",\n        \"steps\": [\n          \"For each of the next 2t lines, read the keyboard layout string.\",\n          \"Store each keyboard layout for later use.\"\n        ]\n      },\n      {\n        \"description\": \"Read and store the words to be typed for each test case.\",\n        \"steps\": [\n          \"For each of the next t lines, read the word to be typed.\",\n          \"Store each word for later use.\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the time to type each word on the given keyboard.\",\n        \"steps\": [\n          \"For each test case, determine the position of each letter in the keyboard.\",\n          \"Calculate the time to type the word by summing the absolute differences in positions for consecutive letters.\",\n          \"Output the calculated time for each word.\"\n        ]\n      }\n    ],\n    \"major_steps\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"Loop to read the keyboard layout and words for each test case.\",\n      \"For each test case, map the positions of the letters in the keyboard.\",\n      \"Calculate the typing time for each word based on the keyboard positions.\",\n      \"Output the calculated typing times for all test cases.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, each key corresponding to a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a key and its corresponding letter. The task is to calculate the time it takes to type a word on this keyboard.\n\n# [phrase showing quantity relationship]\n    'more than': means that the value of the integer must be greater than the integer itself.\n    Explanation: For example, if the integer is 3, it must appear more than", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the time to type the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(keyboard_positions[word[i]] - keyboard_positions[word[i - 1]])\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Map each key on the keyboard to its position.\",\n        \"details\": \"Create a dictionary where each letter from 'a' to 'z' is associated with its position in the keyboard string.\"\n      },\n      {\n        \"description\": \"Calculate the time to type a single letter on the keyboard.\",\n        \"details\": \"For each letter in the word, find its position in the keyboard and calculate the time based on the position of the previous letter.\"\n      },\n      {\n        \"description\": \"Sum the times for all letters in the word to get the total time.\",\n        \"details\": \"Iterate through the word, using the position mapping and the time calculation for each letter to sum up the total time.\"\n      },\n      {\n        \"description\": \"Handle multiple test cases efficiently.\",\n        \"details\": \"Read the number of test cases, then loop through each test case, applying the same process to each one.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"description\": \"Initialize the keyboard mapping.\",\n        \"details\": \"Create a dictionary to map each letter to its position in the keyboard.\"\n      },\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"Use input to read the number of test cases.\"\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"details\": \"For each test case, read the keyboard layout and the word, then calculate the total typing time.\"\n      },\n      {\n        \"description\": \"Output the results.\",\n        \"details\": \"Print the calculated time for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Map each key on the keyboard to its position.\",\n        \"details\": \"Create a dictionary where each letter from 'a' to 'z' is associated with its position in the keyboard string.\"\n      },\n      {\n        \"description\": \"Calculate the time to type a single letter on the keyboard.\",\n        \"details\": \"For each letter in the word, find its position in the keyboard and calculate the time based on the position of the previous letter.\"\n      },\n      {", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position in the keyboard\n        keyboard_positions = {char: index for index, char in enumerate(keyboard)}\n        \n        # Initialize the time and the position of the hand\n        time = 0\n        current_position = 0\n        \n        # Calculate the total typing time for the word\n        for letter in word:\n            target_position = keyboard_positions[letter]\n            time += abs(target_position - current_position)\n            current_position = target_position\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: failed with AssertionError. "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position in the keyboard\n        keyboard_positions = {char: index for index, char in enumerate(keyboard)}\n        \n        # Initialize the time and the position of the hand\n        time = 0\n        current_position = 0\n        \n        # Calculate the total typing time for the word\n        for letter in word:\n            target_position = keyboard_positions[letter]\n            time += abs(target_position - current_position)\n            current_position = target_position\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Map each key on the keyboard to its position.\",\n        \"details\": \"Create a dictionary where each letter from 'a' to 'z' is associated with its position in the keyboard string.\"\n      },\n      {\n        \"description\": \"Calculate the time to type a single letter on the keyboard.\",\n        \"details\": \"For each letter in the word, find its position in the keyboard and calculate the time based on the position of the previous letter.\"\n      },\n      {\n        \"description\": \"Sum the times for all letters in the word to get the total time.\",\n        \"details\": \"Iterate through the word, using the position mapping and the time calculation for each letter to sum up the total time.\"\n      },\n      {\n        \"description\": \"Handle multiple test cases.\",\n        \"details\": \"Read the number of test cases, then iterate through each test case, applying the same process to each one.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"description\": \"Initialize the keyboard mapping.\",\n        \"details\": \"Create a dictionary to map each letter to its position in the keyboard.\"\n      },\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"Get the number of test cases from standard input.\"\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"details\": \"For each test case, read the keyboard and the word, then calculate the total typing time using the mapped positions.\"\n      },\n      {\n        \"description\": \"Output the results.\",\n        \"details\": \"Print the calculated times for each test case to standard output.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Map each key on the keyboard to its position.\",\n        \"details\": \"Create a dictionary where each letter from 'a' to 'z' is associated with its position in the keyboard string.\"\n      },\n      {\n        \"description\": \"Calculate the time to type a single letter on the keyboard.\",\n        \"details\": \"For each letter in the word, find its position in the keyboard and calculate the time based on the position of the previous letter.\"\n      },\n      {", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position in the keyboard\n        keyboard_positions = {char: index for index, char in enumerate(keyboard, start=1)}\n        \n        # Initialize the time and the position of the hand\n        time = 0\n        current_position = 1  # Start at position 1 (the first key)\n        \n        # Calculate the total typing time for the word\n        for letter in word:\n            target_position = keyboard_positions[letter]\n            time += abs(target_position - current_position)\n            current_position = target_position  # Update the current position\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: failed with AssertionError. "}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position in the keyboard\n        keyboard_positions = {char: index for index, char in enumerate(keyboard, start=1)}\n        \n        # Initialize the time and the position of the hand\n        time = 0\n        current_position = 1  # Start at position 1 (the first key)\n        \n        # Calculate the total typing time for the word\n        for letter in word:\n            target_position = keyboard_positions[letter]\n            time += abs(target_position - current_position)\n            current_position = target_position  # Update the current position\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Map each key on the keyboard to its position.\",\n        \"details\": \"Create a dictionary to store the position of each key in the keyboard.\"\n      },\n      {\n        \"description\": \"Calculate the time to type a word based on the positions of the keys.\",\n        \"details\": \"For each letter in the word, find its position on the keyboard and calculate the time based on the difference in positions between consecutive letters.\"\n      },\n      {\n        \"description\": \"Handle multiple test cases.\",\n        \"details\": \"Read the number of test cases, and for each test case, read the keyboard layout and the word, then calculate the typing time.\"\n      }\n    ],\n    \"major_steps\": [\n      {\n        \"description\": \"Initialize the program.\",\n        \"details\": \"Read the number of test cases and prepare to process each case.\"\n      },\n      {\n        \"description\": \"Process each test case.\",\n        \"details\": \"For each test case, read the keyboard layout and the word, map the keyboard positions, and calculate the typing time for the word.\"\n      },\n      {\n        \"description\": \"Output the results.\",\n        \"details\": \"For each test case, print the calculated typing time.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Map each key on the keyboard to its position.\",\n        \"details\": \"Create a dictionary to store the position of each key in the keyboard.\"\n      },\n      {\n        \"description\": \"Calculate the time to type a word based on the positions of the keys.\",\n        \"details\": \"For each letter in the word, find its position on the keyboard and calculate the time based on the difference in positions between consecutive letters.\"\n      },\n      {\n        \"description\": \"", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each key to its position\n        key_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the time to type the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(key_positions[word[i]] - key_positions[word[i - 1]])\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: '_io.TextIOWrapper' object has no attribute 'getvalue'"}, "Round_1": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each key to its position\n        key_positions = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Calculate the time to type the word\n        time = 0\n        for i in range(1, len(word)):\n            time += abs(key_positions[word[i]] - key_positions[word[i - 1]])\n        \n        results.append(time)\n    \n    # Output the results\n    for result in results:\n        print(result)"}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Description\": \"Read the number of test cases.\",\n        \"Task\": \"Implement a function to read the number of test cases from the input.\"\n      },\n      {\n        \"Description\": \"Read the keyboard layout for each test case.\",\n        \"Task\": \"Implement a function to read the keyboard layout for each test case.\"\n      },\n      {\n        \"Description\": \"Read the word to be typed for each test case.\",\n        \"Task\": \"Implement a function to read the word to be typed for each test case.\"\n      },\n      {\n        \"Description\": \"Map each key to its position on the keyboard.\",\n        \"Task\": \"Implement a function to create a dictionary that maps each character to its position on the keyboard.\"\n      },\n      {\n        \"Description\": \"Calculate the time to type the word for each test case.\",\n        \"Task\": \"Implement a function to calculate the total movement time needed to type the word based on the positions of the keys for consecutive letters.\"\n      },\n      {\n        \"Description\": \"Output the result for each test case.\",\n        \"Task\": \"Implement a function to print the calculated time for each test case.\"\n      }\n    ],\n    \"MajorSteps\": [\n      {\n        \"Description\": \"Initialize the program to handle multiple test cases.\",\n        \"Task\": \"Read the number of test cases and initialize a loop to process each case.\"\n      },\n      {\n        \"Description\": \"Set up the keyboard and map characters to positions.\",\n        \"Task\": \"Read the keyboard layout and create a mapping of characters to their positions. Prepare to read each word to be typed.\"\n      },\n      {\n        \"Description\": \"Process each word to calculate the typing time.\",\n        \"Task\": \"For each word, calculate the total movement time by finding the absolute difference in positions between consecutive letters and summing these differences.\"\n      },\n      {\n        \"Description\": \"Output the results.\",\n        \"Task\": \"Print the calculated typing time for each word.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time to type a word based on the positions of the keys on the keyboard. The positions are determined by the order of the letters in the given keyboard string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implement simultaneously.\n    \"Map each key to", "Round_0": {"code": "def read_number_of_test_cases():\n    return int(input())\n\ndef read_keyboard():\n    return input().strip()\n\ndef read_word():\n    return input().strip()\n\ndef create_key_position_map(keyboard):\n    return {char: index for index, char in enumerate(keyboard)}\n\ndef calculate_typing_time(keyboard, word):\n    key_positions = create_key_position_map(keyboard)\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(key_positions[word[i]] - key_positions[word[i-1]])\n    return total_time\n\ndef main():\n    t = read_number_of_test_cases()\n    for _ in range(t):\n        keyboard = read_keyboard()\n        word = read_word()\n        time_to_type = calculate_typing_time(keyboard, word)\n        print(time_to_type)", "report": "The compilation output of the preceding code is: 'function' object has no attribute 'main'"}, "Round_1": {"code": "def read_number_of_test_cases():\n    return int(input())\n\ndef read_keyboard():\n    return input().strip()\n\ndef read_word():\n    return input().strip()\n\ndef create_key_position_map(keyboard):\n    return {char: index for index, char in enumerate(keyboard)}\n\ndef calculate_typing_time(keyboard, word):\n    key_positions = create_key_position_map(keyboard)\n    total_time = 0\n    for i in range(1, len(word)):\n        total_time += abs(key_positions[word[i]] - key_positions[word[i-1]])\n    return total_time\n\ndef main():\n    t = read_number_of_test_cases()\n    for _ in range(t):\n        keyboard = read_keyboard()\n        word = read_word()\n        time_to_type = calculate_typing_time(keyboard, word)\n        print(time_to_type)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"steps\": [\n          \"Read the first line of input to get the number of test cases (t).\"\n        ]\n      },\n      {\n        \"description\": \"Read the keyboard layout and the word for each test case.\",\n        \"steps\": [\n          \"For each test case, read the keyboard layout (a string of 26 unique lowercase Latin letters).\"\n        ]\n      },\n      {\n        \"description\": \"Read the word to be typed for each test case.\",\n        \"steps\": [\n          \"For each test case, read the word (a string of lowercase Latin letters).\"\n        ]\n      },\n      {\n        \"description\": \"Calculate the total movement time for each test case.\",\n        \"steps\": [\n          \"Create a mapping of each letter to its position on the keyboard.\",\n          \"For each word in a test case, calculate the total movement time by summing the absolute differences between the positions of consecutive letters.\"\n        ]\n      },\n      {\n        \"description\": \"Output the total movement time for each test case.\",\n        \"steps\": [\n          \"For each test case, print the calculated total movement time.\"\n        ]\n      }\n    ],\n    \"high_level_steps\": [\n      \"Initialize the program to read the number of test cases.\",\n      \"Loop through each test case to read the keyboard layout and the word.\",\n      \"Map each letter to its position on the keyboard.\",\n      \"Calculate the total movement time for each word based on the keyboard positions.\",\n      \"Output the total movement time for each word.\"\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': the arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time it takes to type a word on a given keyboard. The time is determined by the absolute difference in positions between consecutive letters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Create a mapping of each letter to its position on", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        keyboard = input()\n        word = input()\n        \n        # Create a dictionary to map each letter to its position on the keyboard\n        keyboard_positions = {char: index for index, char in enumerate(keyboard)}\n        \n        # Calculate the total movement time for the word\n        total_time = 0\n        for i in range(1, len(word)):\n            current_pos = keyboard_positions[word[i]]\n            prev_pos = keyboard_positions[word[i - 1]]\n            total_time += abs(current_pos - prev_pos)\n        \n        results.append(total_time)\n    \n    # Output the results\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, true, false, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 52, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "condense_two2one", "save_node": true, "parent_index": 45}
