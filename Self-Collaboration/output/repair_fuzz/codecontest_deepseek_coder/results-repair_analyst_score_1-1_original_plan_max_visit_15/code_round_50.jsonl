{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has made the decision to start singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts where every song should be included in exactly one concert. He wants to minimize the absolute difference in the lengths of the concerts as much as he can. The duration of the concert is the sum of durations of all songs in that concert. It is important to remember that the duration is calculated by adding up the length of each song included. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has made the decision to start singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts where every song should be included in exactly one concert. He wants to minimize the absolute difference in the lengths of the concerts as much as he can. The duration of the concert is the sum of durations of all songs in that concert. It is important to remember that the duration is calculated by adding up the length of each song included. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to start singing. He has a one-minute song, b two-minute songs, and c three-minute songs, and he wants to distribute all songs into two concerts where every song should be included in exactly one concert. He wants to minimize the absolute difference in the lengths of the concerts as much as possible. The duration of the concert is the sum of durations of all songs in that concert. It is important to remember that the duration is calculated by adding up the length of each song included. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to start singing, with a, b, and c representing one-minute, two-minute, and three-minute songs respectively. He wants to distribute all songs into two concerts, minimizing the absolute difference in their lengths. Find the smallest possible difference in minutes between the concert durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nWrite a main() function and use input() function to read input from stdin"], "completion": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Distribute the two-minute and three-minute songs first\n        # to balance the concert lengths\n        two_and_three = min(b, c // 2)\n        b -= two_and_three\n        c -= two_and_three * 2\n        \n        # Distribute the remaining two-minute songs with three-minute songs\n        three_with_two = min(a, b // 2)\n        a -= three_with_two\n        b -= three_with_two * 2\n        \n        # Calculate the difference between the total lengths of the two concerts\n        first_concert = 3 * three_with_two + 2 * two_and_three + a\n        second_concert = 3 * (c + b // 2)\n        \n        print(abs(first_concert - second_concert))\nmain()", "completions": ["def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of the concerts\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions of two-minute and three-minute songs\n        for two_in_first in range(3):\n            for three_in_first in range(3):\n                first_duration = two_in_first * 2 + three_in_first * 3\n                second_duration = total_duration - first_duration\n                diff = abs(first_duration - second_duration)\n                min_diff = min(min_diff, diff)\n        \n        print(min_diff)\nmain()", "def min_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try to distribute the songs to minimize the absolute difference\n    for i in range(c + 1):\n        for j in range(b + 1):\n            # Assign i three-minute songs and j two-minute songs to one concert\n            duration_one = i * 3 + j * 2 + a\n            # The other concert will have the remaining songs\n            duration_two = total_duration - duration_one\n            # Calculate the absolute difference\n            diff = abs(duration_one - duration_two)\n            # Update the minimum difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)\nmain()", "def min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(4):\n        for j in range(4):\n            if (a + i) % 2 == 0 and (b + j) % 2 == 0:\n                first_concert_duration = (a + i) // 2 + 2 * (b + j) // 2 + 3 * c\n                second_concert_duration = total_duration - first_concert_duration\n                min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        results.append(min_difference(a, b, c))\n    \n    for result in results:\n        print(result)\nmain()", "def find_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Try all possible distributions\n    for i in range(4):\n        for j in range(4):\n            if (a + i) % 2 == 0 and (b + j) % 2 == 0:\n                duration1 = (a + i) // 2 + (b + j) // 2 * 2 + c * 3\n                duration2 = total_duration - duration1\n                min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)\nmain()", "def find_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Try all combinations to find the minimum difference\n    for i in range(4):\n        for j in range(4):\n            if (a + i) % 2 == (b + j) % 2 == 0:\n                duration1 = (a + i) // 2 + (b + j) // 2 + (c + (total_duration - (a + i) - (b + j)) // 2)\n                duration2 = total_duration - duration1\n                min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)\nmain()", "def find_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(4):\n        for j in range(4):\n            if i * 3 + j * 2 <= total_duration:\n                duration1 = i * 3 + j * 2\n                duration2 = total_duration - duration1\n                min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)\nmain()", "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total possible durations for both concerts\n        # The maximum duration for each concert is the sum of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The minimal possible difference is the minimum of the absolute differences\n        # We can distribute the one-minute songs evenly, the two-minute songs evenly, and the three-minute songs evenly\n        # The best distribution will be close to half of the total duration\n        min_diff = total_duration % 2\n        \n        results.append(min_diff)\n    \n    # Output the result for each test case\n    for result in results:\n        print(result)\nmain()", "def min_difference(a, b, c):\n    # Sort the counts of songs\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Distribute the songs to minimize the difference\n    first_concert = songs[0] + songs[1]\n    second_concert = songs[2]\n    \n    # Calculate the difference\n    return abs(first_concert - second_concert)\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        results.append(min_difference(a, b, c))\n    \n    for result in results:\n        print(result)\nmain()", "def min_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs between two concerts\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = i * 1 + (i // 2) * 2 + (i // 3) * 3\n            # Calculate the duration of the second concert\n            second_concert_duration = j * 1 + (j // 2) * 2 + (j // 3) * 3\n            # Calculate the absolute difference in durations\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimum difference if the current one is smaller\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Process each test case\n    for _ in range(t):\n        # Read the number of one-minute, two-minute, and three-minute songs\n        a, b, c = map(int, input().split())\n        # Calculate and print the minimal possible difference\n        print(min_difference(a, b, c))\nmain()", "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Distribute the two-minute and three-minute songs first\n        # to balance the concert lengths\n        two_and_three = min(b, c // 2)\n        b -= two_and_three\n        c -= two_and_three * 2\n        \n        # Distribute the remaining two-minute songs with three-minute songs\n        three_with_two = min(a, b // 2)\n        a -= three_with_two\n        b -= three_with_two * 2\n        \n        # Calculate the difference between the total lengths of the two concerts\n        first_concert = 3 * three_with_two + 2 * two_and_three + a\n        second_concert = 3 * (c + b // 2)\n        \n        print(abs(first_concert - second_concert))\nmain()"], "session_history": {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases (t) from the input.\",\n    \"Subproblem2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c).\",\n    \"Subproblem3\": \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in their lengths.\",\n    \"Subproblem4\": \"Calculate the difference in minutes between the two concert durations for each test case.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Read the number of test cases (t).\",\n    \"Step2\": \"Iterate through each test case.\",\n    \"Step3\": \"For each test case, read the values of a, b, and c.\",\n    \"Step4\": \"Determine the optimal distribution of songs by considering the number of two-minute and three-minute songs first to balance the concert lengths.\",\n    \"Step5\": \"Calculate the difference between the total lengths of the two concerts.\",\n    \"Step6\": \"Output the minimal possible difference for each test case.\",\n    \"Step7\": \"Repeat steps 2-6 for all test cases.\"\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with minimal difference in total duration.\n    Explanation: The goal is to distribute the songs into two concerts such that the total duration of songs in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases.\n    - For each test case, read the number of one", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Distribute the two-minute and three-minute songs first\n        # to balance the concert lengths\n        two_and_three = min(b, c // 2)\n        b -= two_and_three\n        c -= two_and_three * 2\n        \n        # Distribute the remaining two-minute songs with three-minute songs\n        three_with_two = min(a, b // 2)\n        a -= three_with_two\n        b -= three_with_two * 2\n        \n        # Calculate the difference between the total lengths of the two concerts\n        first_concert = 3 * three_with_two + 2 * two_and_three + a\n        second_concert = 3 * (c + b // 2)\n        \n        print(abs(first_concert - second_concert))", "report": "The compilation output of the preceding code is: Code Test Passed."}}, "session_historys": [{"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases (t) from the input.\",\n    \"Subproblem2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c).\",\n    \"Subproblem3\": \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in their lengths.\",\n    \"Subproblem4\": \"Calculate the difference in minutes between the two concert durations for each test case.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Initialize a variable to store the total number of test cases (t).\",\n    \"Step2\": \"Read the value of t from the input.\",\n    \"Step3\": \"Loop through each test case from 1 to t:\",\n    \"Step4\": \"Read the values of a, b, and c for the current test case.\",\n    \"Step5\": \"Determine the optimal distribution of songs by considering the number of two-minute and three-minute songs:\",\n    \"Step6\": \"Calculate the total duration of the first concert by including as many two-minute and three-minute songs as possible without exceeding the total duration of the second concert.\",\n    \"Step7\": \"Calculate the total duration of the second concert.\",\n    \"Step8\": \"Compute the absolute difference between the two concert durations.\",\n    \"Step9\": \"Output the minimal possible difference for the current test case.\",\n    \"Step10\": \"End the loop after processing all test cases.\"\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases (t) from the input.\",\n    \"Subproblem2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c).\",\n    \"Subproblem3\": \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in their lengths.\",\n    \"Subproblem4\": \"Calculate the difference in minutes between the two concert durations for each test case.\"\n  },\n  \"", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of the concerts\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions of two-minute and three-minute songs\n        for two_in_first in range(3):\n            for three_in_first in range(3):\n                first_duration = two_in_first * 2 + three_in_first * 3\n                second_duration = total_duration - first_duration\n                diff = abs(first_duration - second_duration)\n                min_diff = min(min_diff, diff)\n        \n        print(min_diff)", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total duration of the concerts\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all possible distributions of two-minute and three-minute songs\n        for two_in_first in range(3):\n            for three_in_first in range(3):\n                first_duration = two_in_first * 2 + three_in_first * 3\n                second_duration = total_duration - first_duration\n                diff = abs(first_duration - second_duration)\n                min_diff = min(min_diff, diff)\n        \n        print(min_diff)"}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Sum the durations of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute songs to minimize the absolute difference in concert durations.\",\n        \"details\": \"Try to balance the distribution by assigning songs to two concerts as evenly as possible.\"\n      },\n      {\n        \"description\": \"Calculate the difference between the two concert durations.\",\n        \"details\": \"Subtract the duration of the smaller concert from the larger one to find the absolute difference.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"details\": \"Use input() to read the number of test cases.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"details\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs for the current test case.\",\n        \"details\": \"Multiply the number of each type of song by its duration and sum them up.\"\n      },\n      {\n        \"step\": \"Distribute the songs to minimize the absolute difference in concert durations.\",\n        \"details\": \"Try to balance the distribution by assigning as many three-minute songs as possible to one concert, then balance the remaining songs between the two concerts.\"\n      },\n      {\n        \"step\": \"Calculate the difference between the two concert durations and print the result.\",\n        \"details\": \"Subtract the duration of the smaller concert from the larger one and print the absolute difference.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Sum the durations of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute songs to minimize the absolute difference in concert durations.\",\n        \"details\": \"Try to balance the distribution by assigning songs to two concerts as evenly as possible.\"\n      },\n      {\n        \"description\": \"Calculate the difference between the two concert", "Round_0": {"code": "def min_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try to distribute the songs to minimize the absolute difference\n    for i in range(c + 1):\n        for j in range(b + 1):\n            # Assign i three-minute songs and j two-minute songs to one concert\n            duration_one = i * 3 + j * 2 + a\n            # The other concert will have the remaining songs\n            duration_two = total_duration - duration_one\n            # Calculate the absolute difference\n            diff = abs(duration_one - duration_two)\n            # Update the minimum difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Sum the durations of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute songs to minimize the absolute difference in concert durations.\",\n        \"details\": \"Try to balance the distribution by assigning songs to two concerts as evenly as possible.\"\n      },\n      {\n        \"description\": \"Calculate the minimal possible difference in minutes between the concerts durations.\",\n        \"details\": \"After distributing the songs, calculate the difference between the total durations of the two concerts.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read the number of test cases.\",\n        \"details\": \"Use input() to read the number of test cases.\"\n      },\n      {\n        \"step\": \"Iterate through each test case.\",\n        \"details\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs for the current test case.\",\n        \"details\": \"Sum the durations of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"step\": \"Distribute the songs to two concerts to minimize the absolute difference.\",\n        \"details\": \"Try to balance the distribution by assigning songs to two concerts as evenly as possible.\"\n      },\n      {\n        \"step\": \"Calculate the minimal possible difference in minutes between the concerts durations.\",\n        \"details\": \"After distributing the songs, calculate the difference between the total durations of the two concerts and print the result.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Sum the durations of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute songs to minimize the absolute difference in concert durations.\",\n        \"details\": \"Try to balance the distribution by assigning songs to two concerts as evenly as possible.\"\n      },\n      {\n        \"description\": \"Calculate the minimal possible difference in minutes", "Round_0": {"code": "def min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(4):\n        for j in range(4):\n            if (a + i) % 2 == 0 and (b + j) % 2 == 0:\n                first_concert_duration = (a + i) // 2 + 2 * (b + j) // 2 + 3 * c\n                second_concert_duration = total_duration - first_concert_duration\n                min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        results.append(min_difference(a, b, c))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Sum the durations of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute songs to minimize the absolute difference in concert durations.\",\n        \"details\": \"Try to balance the distribution by assigning songs to two concerts as evenly as possible.\"\n      },\n      {\n        \"description\": \"Calculate the possible durations for each concert.\",\n        \"details\": \"For a given distribution, calculate the sum of durations for each concert.\"\n      },\n      {\n        \"description\": \"Find the minimal possible difference in minutes between the concerts durations.\",\n        \"details\": \"Compare all possible distributions and find the one with the smallest absolute difference.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Read input for the number of test cases and the details of each test case.\",\n        \"action\": \"Loop through each test case, reading the values of a, b, and c.\"\n      },\n      {\n        \"step\": \"Calculate the total duration of all songs for each test case.\",\n        \"action\": \"Multiply the number of one-minute songs by 1, two-minute songs by 2, and three-minute songs by 3, then sum these values.\"\n      },\n      {\n        \"step\": \"Determine the optimal distribution of songs to minimize the absolute difference.\",\n        \"action\": \"Iterate through possible distributions, trying to balance the load between two concerts as evenly as possible.\"\n      },\n      {\n        \"step\": \"Output the minimal possible difference for each test case.\",\n        \"action\": \"For each test case, output the smallest absolute difference found between the two concerts.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Calculate the total duration of all songs.\",\n        \"details\": \"Sum the durations of one-minute, two-minute, and three-minute songs.\"\n      },\n      {\n        \"description\": \"Determine the optimal way to distribute songs to minimize the absolute difference in concert durations.\",\n        \"details\": \"Try to balance the distribution by assigning songs to two concerts as evenly as possible.\"\n      },\n      {\n        \"description\": \"Calculate the possible durations for each concert", "Round_0": {"code": "def find_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Try all possible distributions\n    for i in range(4):\n        for j in range(4):\n            if (a + i) % 2 == 0 and (b + j) % 2 == 0:\n                duration1 = (a + i) // 2 + (b + j) // 2 * 2 + c * 3\n                duration2 = total_duration - duration1\n                min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Decomposition\": {\n      \"Subproblem1\": \"Calculate the total duration of all songs for each test case.\",\n      \"Subproblem2\": \"Determine the optimal distribution of songs between two concerts to minimize the absolute difference in their durations.\",\n      \"Subproblem3\": \"Implement the logic to find the minimal possible difference in minutes between the concerts durations.\"\n    },\n    \"HighLevelPlan\": {\n      \"Step1\": \"Read the number of test cases (t) from standard input.\",\n      \"Step2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c).\",\n      \"Step3\": \"Calculate the total duration of all songs for the current test case.\",\n      \"Step4\": \"Distribute the songs between two concerts to minimize the absolute difference in their durations.\",\n      \"Step5\": \"Output the minimal possible difference for each test case.\",\n      \"Step6\": \"Repeat steps 2-5 for each test case until all test cases are processed.\"\n    }\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"Plan\": {\n    \"Decomposition\": {\n      \"Subproblem1\": \"Calculate the total duration of all songs for each test case.\",\n      \"Subproblem2\": \"Determine the optimal distribution of songs between two concerts to minimize the absolute difference in their durations.\",\n      \"Subproblem3\": \"Implement the logic to find the minimal possible difference in minutes between the concerts durations.\"\n    },\n    \"HighLevelPlan\": {\n      \"Step1\": \"Read the number of test cases (t) from standard input.\",\n      \"Step2\": \"For each", "Round_0": {"code": "def find_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    # Try all combinations to find the minimum difference\n    for i in range(4):\n        for j in range(4):\n            if (a + i) % 2 == (b + j) % 2 == 0:\n                duration1 = (a + i) // 2 + (b + j) // 2 + (c + (total_duration - (a + i) - (b + j)) // 2)\n                duration2 = total_duration - duration1\n                min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Subproblem\": \"Read the number of test cases and the details of each test case from standard input.\",\n        \"Details\": \"The input will consist of a single integer 't' representing the number of test cases, followed by 't' lines, each containing three integers 'a', 'b', and 'c' representing the number of one-minute, two-minute, and three-minute songs, respectively.\"\n      },\n      {\n        \"Subproblem\": \"Calculate the total duration of songs for each test case.\",\n        \"Details\": \"For each test case, calculate the total duration by considering all songs. This will help in determining the range of possible concert durations.\"\n      },\n      {\n        \"Subproblem\": \"Determine the optimal distribution of songs to minimize the absolute difference in concert durations.\",\n        \"Details\": \"Given the total duration, the goal is to find two concert durations that are as close as possible. This can be achieved by trying to balance the distribution of songs between the two concerts.\"\n      },\n      {\n        \"Subproblem\": \"Output the minimal possible difference in minutes between the concerts durations for each test case.\",\n        \"Details\": \"For each test case, output the smallest absolute difference between the two possible concert durations.\"\n      }\n    ],\n    \"HighLevelPlan\": [\n      {\n        \"Step\": \"Initialize the program to read input from standard input.\",\n        \"Details\": \"Use the input() function to read the number of test cases and the details of each test case.\"\n      },\n      {\n        \"Step\": \"Calculate the total duration of songs for each test case.\",\n        \"Details\": \"Sum up the durations of all songs for each test case to get the total duration.\"\n      },\n      {\n        \"Step\": \"Determine the optimal concert durations.\",\n        \"Details\": \"Iterate through possible distributions of songs between two concerts to find the one with the smallest absolute difference in durations.\"\n      },\n      {\n        \"Step\": \"Output the result for each test case.\",\n        \"Details\": \"Print the minimal possible difference in minutes for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"Plan\": {\n    \"Subproblems\": [\n      {\n        \"Subproblem\": \"Read the number of test cases and the details of each test case from standard input.\",\n        \"Details\": \"The input will consist of a single integer 't' representing the number of test cases, followed by 't' lines, each containing three integers 'a', 'b', and 'c' representing the number of one-minute, two-minute, and three-minute songs, respectively.\"\n      },\n      {\n        \"Subproblem\": \"Calculate the total duration of songs", "Round_0": {"code": "def find_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(4):\n        for j in range(4):\n            if i * 3 + j * 2 <= total_duration:\n                duration1 = i * 3 + j * 2\n                duration2 = total_duration - duration1\n                min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        result = find_min_difference(a, b, c)\n        results.append(result)\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases, t, which is the first line of input.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read the values of a, b, and c, which represent the number of one-minute, two-minute, and three-minute songs, respectively.\"\n      },\n      {\n        \"description\": \"Calculate the total possible durations for both concerts.\",\n        \"details\": \"Determine the maximum possible duration for each concert by considering all possible combinations of the songs. This includes distributing the one-minute songs evenly, distributing the two-minute songs evenly, and distributing the three-minute songs evenly.\"\n      },\n      {\n        \"description\": \"Find the minimal possible difference in the lengths of the concerts.\",\n        \"details\": \"Calculate the absolute difference between the two possible maximum durations for each concert and find the minimum of these differences.\"\n      }\n    ],\n    \"high_level_plan\": [\n      {\n        \"step\": \"Initialize the program to read the number of test cases.\",\n        \"details\": \"Start by reading the number of test cases, t.\"\n      },\n      {\n        \"step\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the values of a, b, and c.\"\n      },\n      {\n        \"step\": \"Calculate the possible durations for both concerts.\",\n        \"details\": \"Determine the maximum possible duration for each concert by considering all possible combinations of the songs.\"\n      },\n      {\n        \"step\": \"Find the minimal possible difference.\",\n        \"details\": \"Calculate the absolute difference between the two possible maximum durations for each concert and find the minimum of these differences.\"\n      },\n      {\n        \"step\": \"Output the result for each test case.\",\n        \"details\": \"Print the minimal possible difference for each test case.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in total duration.\n    Explanation: The goal is to distribute the songs into two concerts such that the total duration of songs in each concert is as close as possible. This involves finding a balance between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'as much as': means to find the smallest possible difference in the total duration of the two concerts.\n    Explanation: This phrase indicates that we need to minimize the absolute difference in the lengths of the concerts.\n\n", "Round_0": {"code": "def main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Calculate the total possible durations for both concerts\n        # The maximum duration for each concert is the sum of all songs\n        total_duration = a + 2*b + 3*c\n        \n        # The minimal possible difference is the minimum of the absolute differences\n        # We can distribute the one-minute songs evenly, the two-minute songs evenly, and the three-minute songs evenly\n        # The best distribution will be close to half of the total duration\n        min_diff = total_duration % 2\n        \n        results.append(min_diff)\n    \n    # Output the result for each test case\n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"plan\": {\n    \"subproblems\": [\n      {\n        \"description\": \"Read the number of test cases.\",\n        \"details\": \"The program should start by reading the number of test cases t from the input.\"\n      },\n      {\n        \"description\": \"Read the number of one-minute, two-minute, and three-minute songs for each test case.\",\n        \"details\": \"For each test case, read the values of a, b, and c representing the number of one-minute, two-minute, and three-minute songs respectively.\"\n      },\n      {\n        \"description\": \"Calculate the optimal distribution of songs to minimize the absolute difference in concert lengths.\",\n        \"details\": \"Determine the best way to distribute the songs into two concerts to minimize the absolute difference in their lengths. This involves considering the number of each type of song and how they can be grouped to balance the concert lengths.\"\n      },\n      {\n        \"description\": \"Output the minimal possible difference for each test case.\",\n        \"details\": \"For each test case, output the smallest possible difference in minutes between the concert durations.\"\n      }\n    ],\n    \"high_level_steps\": [\n      {\n        \"description\": \"Initialize the program to handle multiple test cases.\",\n        \"details\": \"Start by reading the number of test cases t.\"\n      },\n      {\n        \"description\": \"Loop through each test case.\",\n        \"details\": \"For each test case, read the values of a, b, and c.\"\n      },\n      {\n        \"description\": \"Calculate the optimal distribution of songs.\",\n        \"details\": \"Use a strategy to distribute the songs into two concerts, aiming to balance their lengths as much as possible. This could involve sorting the song types and then pairing them to minimize the difference.\"\n      },\n      {\n        \"description\": \"Output the result for each test case.\",\n        \"details\": \"For each test case, output the minimal possible difference in minutes between the concert durations.\"\n      }\n    ]\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with minimal difference in total duration.\n    Explanation: The problem requires finding the optimal way to split the given songs into two concerts such that the difference in their total durations is minimized. This involves balancing the number of one-minute, two-minute, and three-minute songs between the two concerts.\n\n# [phrase showing quantity relationship]\n    'more than': indicates that the number of songs of a certain type should be considered in the distribution to balance the concert lengths.\n    'at least as many times': means that", "Round_0": {"code": "def min_difference(a, b, c):\n    # Sort the counts of songs\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Distribute the songs to minimize the difference\n    first_concert = songs[0] + songs[1]\n    second_concert = songs[2]\n    \n    # Calculate the difference\n    return abs(first_concert - second_concert)\n\ndef main():\n    t = int(input())\n    results = []\n    \n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        results.append(min_difference(a, b, c))\n    \n    for result in results:\n        print(result)", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Calculate the total duration of all songs for each test case.\",\n    \"Subproblem2\": \"Determine the optimal distribution of songs between two concerts to minimize the absolute difference in their durations.\",\n    \"Subproblem3\": \"Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Read the number of test cases from the input.\",\n    \"Step2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs.\",\n    \"Step3\": \"Calculate the total duration of all songs for the current test case.\",\n    \"Step4\": \"Distribute the songs between two concerts to minimize the absolute difference in their durations.\",\n    \"Step5\": \"Calculate the minimal possible difference in minutes between the concerts durations.\",\n    \"Step6\": \"Output the minimal possible difference for each test case.\",\n    \"Step7\": \"Repeat steps 2-6 for each test case until all test cases are processed.\"\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Calculate the total duration of all songs for each test case.\",\n    \"Subproblem2\": \"Determine the optimal distribution of songs between two concerts to minimize the absolute difference in their durations.\",\n    \"Subproblem3\": \"Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Read the number of test cases from the input.\",\n    \"Step2\": \"For each test case, read the number of one", "Round_0": {"code": "def min_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs between two concerts\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = i * 1 + (i // 2) * 2 + (i // 3) * 3\n            # Calculate the duration of the second concert\n            second_concert_duration = j * 1 + (j // 2) * 2 + (j // 3) * 3\n            # Calculate the absolute difference in durations\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimum difference if the current one is smaller\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\ndef main():\n    # Read the number of test cases\n    t = int(input())\n    \n    # Process each test case\n    for _ in range(t):\n        # Read the number of one-minute, two-minute, and three-minute songs\n        a, b, c = map(int, input().split())\n        # Calculate and print the minimal possible difference\n        print(min_difference(a, b, c))", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": " ```json\n{\n  \"Decomposition\": {\n    \"Subproblem1\": \"Read the number of test cases (t) from the input.\",\n    \"Subproblem2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c).\",\n    \"Subproblem3\": \"Determine the optimal way to distribute the songs into two concerts to minimize the absolute difference in their lengths.\",\n    \"Subproblem4\": \"Calculate the difference in minutes between the two concert durations for each test case.\"\n  },\n  \"High-Level Plan\": {\n    \"Step1\": \"Read the number of test cases (t).\",\n    \"Step2\": \"Iterate through each test case.\",\n    \"Step3\": \"For each test case, read the values of a, b, and c.\",\n    \"Step4\": \"Determine the optimal distribution of songs by considering the number of two-minute and three-minute songs first to balance the concert lengths.\",\n    \"Step5\": \"Calculate the difference between the total lengths of the two concerts.\",\n    \"Step6\": \"Output the minimal possible difference for each test case.\",\n    \"Step7\": \"Repeat steps 2-6 for all test cases.\"\n  }\n}\n```\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with minimal difference in total duration.\n    Explanation: The goal is to distribute the songs into two concerts such that the total duration of songs in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    The steps should be implemented sequentially.\n    - Read the number of test cases.\n    - For each test case, read the number of one", "Round_0": {"code": "def main():\n    t = int(input())\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        \n        # Distribute the two-minute and three-minute songs first\n        # to balance the concert lengths\n        two_and_three = min(b, c // 2)\n        b -= two_and_three\n        c -= two_and_three * 2\n        \n        # Distribute the remaining two-minute songs with three-minute songs\n        three_with_two = min(a, b // 2)\n        a -= three_with_two\n        b -= three_with_two * 2\n        \n        # Calculate the difference between the total lengths of the two concerts\n        first_concert = 3 * three_with_two + 2 * two_and_three + a\n        second_concert = 3 * (c + b // 2)\n        \n        print(abs(first_concert - second_concert))", "report": "The compilation output of the preceding code is: Code Test Passed."}}], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 50, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 44}
