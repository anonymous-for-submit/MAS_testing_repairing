{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He possesses a one-minute songs, b two-minute songs, and c three-minute songs, and he desires to allocate all songs into two concerts. Every song should be included to exactly one concert.\n\nHe wants to minimize the absolute difference in concert durations, where the duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has a total of a+b+c songs of different lengths and he needs to divide them into two concerts evenly. He is seeking assistance to determine the smallest difference in duration that can be achieved between the two concerts.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing, possessing one-minute songs, two-minute songs, and three-minute songs, and he wants to allocate all songs into two concerts to minimize the absolute difference in concert durations, where the duration of the concert is the sum of durations of all songs in that concert. Please help Luntik find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    duration_concert1 = 0\n    duration_concert2 = 0\n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration_concert1 = i + 2*j + 3*k\n                duration_concert2 = total_duration - duration_concert1\n                min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    print(min_diff)\n\nmain()", "completions": ["def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - min(a, half_duration//3) - min(b, half_duration//2) - min(c, half_duration//3)))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - a))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - min(a, half_duration//3) - min(b, half_duration//3*2)))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Try all possible combinations of songs for the first concert\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                if concert_duration <= half_duration:\n                    min_diff = min(min_diff, half_duration - concert_duration)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    \n    if total_duration % 2 == 1:\n        min_diff = min(min_diff, abs(half_duration + 1 - (a + 2*b)))\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_min_difference(a, b, c))\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimum possible difference in minutes between the concerts durations\n    # The minimum difference will be the absolute difference between the two possible combinations\n    # of distributing the songs into two concerts\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the first concert\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                diff = abs(half_duration - concert_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the number of songs needed in each concert to achieve an even distribution\n    songs_per_concert = total_duration // 2\n    \n    # Calculate the duration of each concert\n    duration_concert1 = min(a, songs_per_concert)\n    duration_concert2 = min(b, songs_per_concert)\n    duration_concert2 += min(c, songs_per_concert - duration_concert1)\n    \n    # Find the minimal possible difference in duration between the concerts\n    minimal_difference = abs(duration_concert1 - duration_concert2)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the number of songs needed in each concert to achieve an even distribution\n    songs_per_concert = total_duration // 2\n    \n    # Calculate the duration of each concert\n    duration_concert1 = min(a, songs_per_concert) + min(b, songs_per_concert) * 2 + min(c, songs_per_concert) * 3\n    duration_concert2 = total_duration - duration_concert1\n    \n    # Find the minimal possible difference in duration between the concerts\n    minimal_difference = abs(duration_concert1 - duration_concert2)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    duration_concert1 = 0\n    duration_concert2 = 0\n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration_concert1 = i + 2*j + 3*k\n                duration_concert2 = total_duration - duration_concert1\n                min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    print(min_diff)\n\nmain()"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Determine the possible combinations of songs for each concert\",\n      \"Calculate the difference in duration between the two concerts\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n      \"Calculate the total duration of all songs\",\n      \"Determine the possible combinations of songs for each concert\",\n      \"Calculate the difference in duration between the two concerts\",\n      \"Print the minimal possible difference in minutes between the concerts durations\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total duration of all songs'\n    Explanation: The sum of the durations of all songs provided.\n\n    'possible combinations of songs for each concert'\n    Explanation: Different ways in which songs can be divided into two concerts.\n\n    'difference in duration between the two concerts'\n    Explanation: The gap in time between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimal difference in duration.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n\n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n    5 5 5\n    Output: 0\n    Explanation: Luntik can divide the songs equally into two concerts, resulting in 0 difference in duration.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios effectively.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    half_duration = total_duration // 2\n    \n    # Calculate the difference in duration between the two concerts\n    duration_concert1 = 0\n    duration_concert2 = 0\n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration_concert1 = i + 2*j + 3*k\n                duration_concert2 = total_duration - duration_concert1\n                min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    duration_concert1 = 0\n    duration_concert2 = 0\n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration_concert1 = i + 2*j + 3*k\n                duration_concert2 = total_duration - duration_concert1\n                min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    print(min_diff)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination that minimizes the absolute difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the combination that minimizes the absolute difference in duration and output the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: The core concept is to allocate songs into two concerts in a way that the absolute difference in duration between the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - min(a, half_duration//3) - min(b, half_duration//2) - min(c, half_duration//3)))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 22)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - min(a, half_duration//3) - min(b, half_duration//2) - min(c, half_duration//3)))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination that minimizes the absolute difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the combination that minimizes the absolute difference in duration and output the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: The goal is to allocate songs into two concerts in a way that the absolute difference in duration between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - a))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - a))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination that minimizes the absolute difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the combination that minimizes the absolute difference in duration and output the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: The goal is to allocate songs into two concerts in a way that the absolute difference in duration between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - min(a, half_duration//3) - min(b, half_duration//3*2)))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (min(total_duration, half_duration) - min(a, half_duration//3) - min(b, half_duration//3*2)))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination that minimizes the absolute difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"Step 2\": \"Generate all possible combinations of songs for each concert\",\n    \"Step 3\": \"Calculate the duration of each concert for each combination\",\n    \"Step 4\": \"Find the combination that minimizes the absolute difference in duration between the two concerts\",\n    \"Step 5\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: Luntik wants to allocate all songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as they involve different calculations and comparisons.\n\n# [edge case] \n    1. 1 1 1\n       Output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2. 2 1 3\n       Output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    3. 5 5 5\n       Output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in 0 difference in duration.\n       \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Try all possible combinations of songs for the first concert\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                if concert_duration <= half_duration:\n                    min_diff = min(min_diff, half_duration - concert_duration)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 31)"}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Try all possible combinations of songs for the first concert\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                if concert_duration <= half_duration:\n                    min_diff = min(min_diff, half_duration - concert_duration)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination that minimizes the absolute difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for each concert\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Find the combination that minimizes the absolute difference in duration between the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: The goal is to allocate songs into two concerts in a way that the absolute difference in duration between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous implementation.\n\n# [edge case] \n    Case 1: \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2:\n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Case 3:\n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    \n    if total_duration % 2 == 1:\n        min_diff = min(min_diff, abs(half_duration + 1 - (a + 2*b)))\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 22)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    \n    if total_duration % 2 == 1:\n        min_diff = min(min_diff, abs(half_duration + 1 - (a + 2*b)))\n    \n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert durations'\n    Explanation: Refers to the total duration of songs in each concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in 0 difference in duration.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimum possible difference in minutes between the concerts durations\n    # The minimum difference will be the absolute difference between the two possible combinations\n    # of distributing the songs into two concerts\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimum possible difference in minutes between the concerts durations\n    # The minimum difference will be the absolute difference between the two possible combinations\n    # of distributing the songs into two concerts\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination that minimizes the absolute difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for each concert\",\n    \"step_3\": \"Calculate the duration of each concert for each combination\",\n    \"step_4\": \"Find the combination that minimizes the absolute difference in duration between the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: The goal is to allocate songs into two concerts in a way that the absolute difference in duration between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are not dependent on each other.\n\n# [edge case] \n    Case 1: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Case 3: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the first concert\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                diff = abs(half_duration - concert_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 33)"}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the first concert\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                diff = abs(half_duration - concert_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the number of songs needed in each concert to achieve an even distribution\",\n    \"Calculate the duration of each concert\",\n    \"Find the minimal possible difference in duration between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective lengths\",\n    \"step_2\": \"Determine the number of songs needed in each concert by dividing the total duration by 2\",\n    \"step_3\": \"Calculate the duration of each concert by summing the lengths of the songs in each concert\",\n    \"step_4\": \"Find the minimal possible difference in duration between the concerts by taking the absolute difference between the durations of the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'evenly divide'\n    Explanation: It means to distribute the songs in such a way that the total duration of each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest possible difference in duration between the concerts\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are sequential and do not require simultaneous implementation.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can evenly distribute the songs between the two concerts, resulting in a difference of 0 in duration.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the number of songs needed in each concert to achieve an even distribution\n    songs_per_concert = total_duration // 2\n    \n    # Calculate the duration of each concert\n    duration_concert1 = min(a, songs_per_concert)\n    duration_concert2 = min(b, songs_per_concert)\n    duration_concert2 += min(c, songs_per_concert - duration_concert1)\n    \n    # Find the minimal possible difference in duration between the concerts\n    minimal_difference = abs(duration_concert1 - duration_concert2)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the number of songs needed in each concert to achieve an even distribution\n    songs_per_concert = total_duration // 2\n    \n    # Calculate the duration of each concert\n    duration_concert1 = min(a, songs_per_concert)\n    duration_concert2 = min(b, songs_per_concert)\n    duration_concert2 += min(c, songs_per_concert - duration_concert1)\n    \n    # Find the minimal possible difference in duration between the concerts\n    minimal_difference = abs(duration_concert1 - duration_concert2)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the number of songs needed in each concert to achieve an even distribution\",\n    \"Calculate the duration of each concert\",\n    \"Find the minimal possible difference in duration between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs of each length by their respective durations\",\n    \"step_2\": \"Determine the number of songs needed in each concert by dividing the total duration by 2\",\n    \"step_3\": \"Calculate the duration of each concert by summing the durations of the selected songs for each concert\",\n    \"step_4\": \"Find the minimal possible difference in duration between the concerts by taking the absolute difference between the durations of the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'duration': refers to the length of time a song plays\n    'difference in duration': refers to the absolute value of the time difference between two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': indicates the smallest possible value\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    Case 1: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Case 3: 5 5 5\n    Output: 0\n    Explanation: Luntik can evenly distribute the songs between the two concerts, resulting in a difference of 0 in duration.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the number of songs needed in each concert to achieve an even distribution\n    songs_per_concert = total_duration // 2\n    \n    # Calculate the duration of each concert\n    duration_concert1 = min(a, songs_per_concert) + min(b, songs_per_concert) * 2 + min(c, songs_per_concert) * 3\n    duration_concert2 = total_duration - duration_concert1\n    \n    # Find the minimal possible difference in duration between the concerts\n    minimal_difference = abs(duration_concert1 - duration_concert2)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the number of songs needed in each concert to achieve an even distribution\n    songs_per_concert = total_duration // 2\n    \n    # Calculate the duration of each concert\n    duration_concert1 = min(a, songs_per_concert) + min(b, songs_per_concert) * 2 + min(c, songs_per_concert) * 3\n    duration_concert2 = total_duration - duration_concert1\n    \n    # Find the minimal possible difference in duration between the concerts\n    minimal_difference = abs(duration_concert1 - duration_concert2)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Determine the possible combinations of songs for each concert\",\n      \"Calculate the difference in duration between the two concerts\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n      \"Calculate the total duration of all songs\",\n      \"Determine the possible combinations of songs for each concert\",\n      \"Calculate the difference in duration between the two concerts\",\n      \"Print the minimal possible difference in minutes between the concerts durations\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total duration of all songs'\n    Explanation: The sum of the durations of all songs provided.\n\n    'possible combinations of songs for each concert'\n    Explanation: Different ways in which songs can be divided into two concerts.\n\n    'difference in duration between the two concerts'\n    Explanation: The gap in time between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimal difference in duration.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n\n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n    5 5 5\n    Output: 0\n    Explanation: Luntik can divide the songs equally into two concerts, resulting in 0 difference in duration.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios effectively.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    half_duration = total_duration // 2\n    \n    # Calculate the difference in duration between the two concerts\n    duration_concert1 = 0\n    duration_concert2 = 0\n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration_concert1 = i + 2*j + 3*k\n                duration_concert2 = total_duration - duration_concert1\n                min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    duration_concert1 = 0\n    duration_concert2 = 0\n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration_concert1 = i + 2*j + 3*k\n                duration_concert2 = total_duration - duration_concert1\n                min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    print(min_diff)\n"}}], "scores": [], "pass_results": [false, false, true, true, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 75, "prompt": "Luntik has decided to try singing. He possesses a one-minute songs, b two-minute songs, and c three-minute songs, and he desires to allocate all songs into two concerts. Every song should be included to exactly one concert.\n\nHe wants to minimize the absolute difference in concert durations, where the duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "save_node": true, "parent_index": 55}
