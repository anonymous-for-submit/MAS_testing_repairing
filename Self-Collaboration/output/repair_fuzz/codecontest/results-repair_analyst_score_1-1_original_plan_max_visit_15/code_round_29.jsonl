{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "repair_prompt": ["The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U'. Each symbol triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The robot should start its movement from the cell (2, 1) (second row, first column) to execute as many commands as possible. By starting from this cell, all commands will be successfully executed, and the robot will end at the cell (1, 2) (first row, second column).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns) and is able to move from the current cell to one of the four cells adjacent by side.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Find the starting cell that allows the robot to execute the maximum number of commands\n    start_row = 1\n    start_col = 1\n    max_commands = 0\n    curr_row = 2\n    curr_col = 1\n    for command in commands:\n        if command == 'L':\n            curr_col -= 1\n        elif command == 'R':\n            curr_col += 1\n        elif command == 'U':\n            curr_row -= 1\n        elif command == 'D':\n            curr_row += 1\n\n        if curr_row < 1:\n            curr_row = 1\n        elif curr_row > n:\n            curr_row = n\n        if curr_col < 1:\n            curr_col = 1\n        elif curr_col > m:\n            curr_col = m\n\n        num_commands = abs(curr_row - 1) + abs(curr_col - 2) + 1\n        if num_commands > max_commands:\n            max_commands = num_commands\n            start_row = curr_row\n            start_col = curr_col\n\n    print(start_row, start_col)\n\nmain()", "completions": ["t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Find the starting cell that allows the robot to execute as many commands as possible\n    start_row, start_col = 2, 1\n    max_commands = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            curr_row, curr_col = i, j\n            curr_commands = 0\n\n            for command in commands:\n                if command == 'L':\n                    curr_col -= 1\n                elif command == 'R':\n                    curr_col += 1\n                elif command == 'U':\n                    curr_row -= 1\n                elif command == 'D':\n                    curr_row += 1\n\n                if curr_row < 1 or curr_row > n or curr_col < 1 or curr_col > m:\n                    break\n\n                curr_commands += 1\n\n            if curr_commands > max_commands:\n                max_commands = curr_commands\n                start_row, start_col = i, j\n\n    print(start_row, start_col)\n\nmain()", "def determine_starting_cell(n, m, commands):\n    x, y = 1, 1\n    max_commands = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            curr_x, curr_y = i, j\n            commands_count = 0\n            for command in commands:\n                if command == 'L':\n                    curr_y -= 1\n                elif command == 'R':\n                    curr_y += 1\n                elif command == 'U':\n                    curr_x -= 1\n                elif command == 'D':\n                    curr_x += 1\n                \n                if 1 <= curr_x <= n and 1 <= curr_y <= m:\n                    commands_count += 1\n            \n            if commands_count > max_commands:\n                max_commands = commands_count\n                x, y = i, j\n    \n    return x, y\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = determine_starting_cell(n, m, commands)\n    print(r, c)\n\nmain()", "def find_starting_cell(n, m, commands):\n    x, y = 1, 1\n    for command in commands:\n        if command == 'L' and y > 1:\n            y -= 1\n        elif command == 'R' and y < m:\n            y += 1\n        elif command == 'U' and x > 1:\n            x -= 1\n        elif command == 'D' and x < n:\n            x += 1\n    return x, y\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = find_starting_cell(n, m, commands)\n    print(r, c)\n\nmain()", "def calculate_commands_executed(n, m, s):\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n\n    def is_valid_move(x, y):\n        return 1 <= x <= n and 1 <= y <= m\n\n    def count_commands(x, y):\n        commands = 0\n        visited = set()\n        while is_valid_move(x, y) and (x, y) not in visited:\n            visited.add((x, y))\n            commands += 1\n            dx, dy = directions[s[commands % len(s)]]\n            x, y = x + dx, y + dy\n        return commands\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            commands = count_commands(i, j)\n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n\n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    result = calculate_commands_executed(n, m, s)\n    print(result[0], result[1])\n\nmain()", "def find_starting_cell(n, m, commands):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n            \n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                current_commands += 1\n            \n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n    \n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    \n    start_cell = find_starting_cell(n, m, commands)\n    print(start_cell[0], start_cell[1])\n\nmain()", "def find_starting_cell(n, m, commands):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            x, y = i, j\n            current_commands = 0\n            \n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                current_commands += 1\n            \n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n    \n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    \n    start_cell = find_starting_cell(n, m, commands)\n    print(start_cell[0], start_cell[1])\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            commands_executed = 0\n\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                commands_executed += 1\n\n            if commands_executed > max_commands:\n                max_commands = commands_executed\n                start_cell = (i, j)\n\n    print(start_cell[0], start_cell[1])\n\nmain()", "def determine_starting_cell(n, m, commands):\n    row, col = 1, 1\n    for command in commands:\n        if command == 'L' and col > 1:\n            col -= 1\n        elif command == 'R' and col < m:\n            col += 1\n        elif command == 'U' and row > 1:\n            row -= 1\n        elif command == 'D' and row < n:\n            row += 1\n    return row, col\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = determine_starting_cell(n, m, commands)\n    print(r, c)\n\nmain()", "def find_starting_cell(n, m, commands):\n    max_commands = 0\n    best_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            x, y = i, j\n            current_commands = 0\n            \n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                current_commands += 1\n            \n            if current_commands > max_commands:\n                max_commands = current_commands\n                best_cell = (i, j)\n    \n    return best_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    \n    result = find_starting_cell(n, m, commands)\n    print(result[0], result[1])\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Find the starting cell that allows the robot to execute the maximum number of commands\n    start_row = 1\n    start_col = 1\n    max_commands = 0\n    curr_row = 2\n    curr_col = 1\n    for command in commands:\n        if command == 'L':\n            curr_col -= 1\n        elif command == 'R':\n            curr_col += 1\n        elif command == 'U':\n            curr_row -= 1\n        elif command == 'D':\n            curr_row += 1\n\n        if curr_row < 1:\n            curr_row = 1\n        elif curr_row > n:\n            curr_row = n\n        if curr_col < 1:\n            curr_col = 1\n        elif curr_col > m:\n            curr_col = m\n\n        num_commands = abs(curr_row - 1) + abs(curr_col - 2) + 1\n        if num_commands > max_commands:\n            max_commands = num_commands\n            start_row = curr_row\n            start_col = curr_col\n\n    print(start_row, start_col)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and their descriptions\",\n    \"For each test case, extract the height, width, and sequence of commands\",\n    \"Determine the starting cell that will allow the robot to execute as many commands as possible\",\n    \"Output the coordinates of the starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases\",\n    \"step_2\": \"For each test case, extract the height, width, and sequence of commands\",\n    \"step_3\": \"Iterate through each cell in the field and simulate the robot's movement based on the sequence of commands\",\n    \"step_4\": \"Keep track of the maximum number of commands executed and the corresponding starting cell\",\n    \"step_5\": \"Output the coordinates of the starting cell that allows the robot to execute the maximum number of commands\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'movement': refers to the actions the robot takes based on the sequence of commands to reach the end cell successfully.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Edge Case 1:\n    1 1\n    L\n    Expected Output: 1 1\n    Explanation: With only one command 'L', the robot should start at the initial cell (2, 1) to execute the command.\n    \n    Edge Case 2:\n    3 3\n    RRDLUU\n    Expected Output: 2 1\n    Explanation: The robot should start at cell (2, 1) to execute the sequence of commands successfully.\n    \n    Edge Case 3:\n    4 3\n    LUURRDDLLLUU\n    Expected Output: 3 2\n    Explanation: The robot should start at cell (3, 2) to execute the maximum number of commands successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find the starting cell that allows the robot to execute the maximum number of commands is sufficient.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Find the starting cell that allows the robot to execute the maximum number of commands\n    start_row = 1\n    start_col = 1\n    max_commands = 0\n    curr_row = 2\n    curr_col = 1\n    for command in commands:\n        if command == 'L':\n            curr_col -= 1\n        elif command == 'R':\n            curr_col += 1\n        elif command == 'U':\n            curr_row -= 1\n        elif command == 'D':\n            curr_row += 1\n\n        if curr_row < 1:\n            curr_row = 1\n        elif curr_row > n:\n            curr_row = n\n        if curr_col < 1:\n            curr_col = 1\n        elif curr_col > m:\n            curr_col = m\n\n        num_commands = abs(curr_row - 1) + abs(curr_col - 2) + 1\n        if num_commands > max_commands:\n            max_commands = num_commands\n            start_row = curr_row\n            start_col = curr_col\n\n    print(start_row, start_col)\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 43)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Find the starting cell that allows the robot to execute the maximum number of commands\n    start_row = 1\n    start_col = 1\n    max_commands = 0\n    curr_row = 2\n    curr_col = 1\n    for command in commands:\n        if command == 'L':\n            curr_col -= 1\n        elif command == 'R':\n            curr_col += 1\n        elif command == 'U':\n            curr_row -= 1\n        elif command == 'D':\n            curr_row += 1\n\n        if curr_row < 1:\n            curr_row = 1\n        elif curr_row > n:\n            curr_row = n\n        if curr_col < 1:\n            curr_col = 1\n        elif curr_col > m:\n            curr_col = m\n\n        num_commands = abs(curr_row - 1) + abs(curr_col - 2) + 1\n        if num_commands > max_commands:\n            max_commands = num_commands\n            start_row = curr_row\n            start_col = curr_col\n\n    print(start_row, start_col)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and their descriptions\",\n    \"For each test case, extract the height, width, and sequence of commands\",\n    \"Determine the starting cell that will allow the robot to execute as many commands as possible\",\n    \"Output the coordinates of the starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases\",\n    \"step_2\": \"For each test case, extract the height, width, and sequence of commands\",\n    \"step_3\": \"Iterate through each cell in the field and simulate the robot's movement based on the sequence of commands\",\n    \"step_4\": \"Track the number of successfully executed commands for each starting cell\",\n    \"step_5\": \"Output the coordinates of the starting cell with the maximum number of successfully executed commands for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'movement': refers to the actions the robot takes based on the given commands to reach the end cell.\n    'successfully executed commands': indicates the commands that the robot can perform without errors.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, extracting data, simulating movement, tracking successful commands, and outputting results.\n\n# [edge case] \n    Edge Case 1:\n    1 1\n    L\n    Output: 1 1\n    Explanation: With only one cell and one command to move left, the robot should start at the initial cell to execute the command.\n    \n    Edge Case 2:\n    3 3\n    RRDLUU\n    Output: 2 1\n    Explanation: The robot should start at cell (2, 1) to execute the sequence of commands successfully and reach the end cell (1, 2).\n    \n    Edge Case 3:\n    4 3\n    LUURRDDLLLUU\n    Output: 3 2\n    Explanation: Starting at cell (3, 2) allows the robot to execute the commands and reach the end cell successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Find the starting cell that allows the robot to execute as many commands as possible\n    start_row, start_col = 1, 1\n    max_commands = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            curr_row, curr_col = i, j\n            curr_commands = 0\n\n            for command in commands:\n                if command == 'L':\n                    curr_col -= 1\n                elif command == 'R':\n                    curr_col += 1\n                elif command == 'U':\n                    curr_row -= 1\n                elif command == 'D':\n                    curr_row += 1\n\n                if curr_row < 1 or curr_row > n or curr_col < 1 or curr_col > m:\n                    break\n\n                curr_commands += 1\n\n            if curr_commands > max_commands:\n                max_commands = curr_commands\n                start_row, start_col = i, j\n\n    print(start_row, start_col)\n", "report": "The compilation output of the preceding code is: closing parenthesis ')' does not match opening parenthesis '[' (<string>, line 38)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Find the starting cell that allows the robot to execute as many commands as possible\n    start_row, start_col = 2, 1\n    max_commands = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            curr_row, curr_col = i, j\n            curr_commands = 0\n\n            for command in commands:\n                if command == 'L':\n                    curr_col -= 1\n                elif command == 'R':\n                    curr_col += 1\n                elif command == 'U':\n                    curr_row -= 1\n                elif command == 'D':\n                    curr_row += 1\n\n                if curr_row < 1 or curr_row > n or curr_col < 1 or curr_col > m:\n                    break\n\n                curr_commands += 1\n\n            if curr_commands > max_commands:\n                max_commands = curr_commands\n                start_row, start_col = i, j\n\n    print(start_row, start_col)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the descriptions of each test case\",\n    \"For each test case, extract the height, width, and sequence of commands\",\n    \"Determine the starting cell for the robot to perform as many commands as possible\",\n    \"Output the coordinates of the starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"steps\": [\n      \"Read the number of test cases from input\",\n      \"For each test case, read the height, width, and sequence of commands from input\",\n      \"Iterate through the sequence of commands to determine the final position of the robot\",\n      \"Backtrack to find the starting cell that allows the robot to perform as many commands as possible\",\n      \"Output the coordinates of the starting cell for each test case\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'Parse the input': Extract necessary information from the input data\n    'Determine the starting cell': Find the initial cell for the robot to maximize the number of commands\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    L\n    Output:\n    1 1\n    Explanation:\n    The robot is already at the only cell, so it should start from there.\n\n    Test Case 2:\n    Input:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation:\n    The robot can start from either cell as it only has one command to move.\n\n    Test Case 3:\n    Input:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation:\n    The robot can start from cell (2, 1) to perform the most commands.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic should cover all scenarios.", "Round_0": {"code": "def determine_starting_cell(n, m, commands):\n    x, y = 1, 1\n    max_commands = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            curr_x, curr_y = i, j\n            commands_count = 0\n            for command in commands:\n                if command == 'L':\n                    curr_y -= 1\n                elif command == 'R':\n                    curr_y += 1\n                elif command == 'U':\n                    curr_x -= 1\n                elif command == 'D':\n                    curr_x += 1\n                \n                if 1 <= curr_x <= n and 1 <= curr_y <= m:\n                    commands_count += 1\n            \n            if commands_count > max_commands:\n                max_commands = commands_count\n                x, y = i, j\n    \n    return x, y\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = determine_starting_cell(n, m, commands)\n    print(r, c)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 39)"}, "Round_1": {"code": "def determine_starting_cell(n, m, commands):\n    x, y = 1, 1\n    max_commands = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            curr_x, curr_y = i, j\n            commands_count = 0\n            for command in commands:\n                if command == 'L':\n                    curr_y -= 1\n                elif command == 'R':\n                    curr_y += 1\n                elif command == 'U':\n                    curr_x -= 1\n                elif command == 'D':\n                    curr_x += 1\n                \n                if 1 <= curr_x <= n and 1 <= curr_y <= m:\n                    commands_count += 1\n            \n            if commands_count > max_commands:\n                max_commands = commands_count\n                x, y = i, j\n    \n    return x, y\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = determine_starting_cell(n, m, commands)\n    print(r, c)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the descriptions of each test case\",\n    \"For each test case, extract the height, width, and sequence of commands\",\n    \"Determine the starting cell for the robot to perform as many commands as possible\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases and the descriptions of each test case\",\n    \"Step 2\": \"For each test case, extract the height, width, and sequence of commands\",\n    \"Step 3\": \"Implement a function to calculate the final cell after executing the sequence of commands\",\n    \"Step 4\": \"Determine the starting cell for the robot to perform as many commands as possible\",\n    \"Step 5\": \"Output the coordinates of the starting cell for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'Parse the input': Extract necessary information from the input data to process the test cases effectively.\n    'Determine the starting cell': Find the initial cell from which the robot should start moving to execute maximum commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as mentioned in the plan.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    L\n    Output:\n    1 1\n    Explanation:\n    The robot is already at the only cell, so it should start moving from there.\n\n    Test Case 2:\n    Input:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation:\n    The robot can start moving from either of the two cells.\n\n    Test Case 3:\n    Input:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation:\n    The robot should start moving from cell (2, 1) to perform the maximum commands.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should handle all scenarios effectively.", "Round_0": {"code": "def find_starting_cell(n, m, commands):\n    x, y = 1, 1\n    for command in commands:\n        if command == 'L' and y > 1:\n            y -= 1\n        elif command == 'R' and y < m:\n            y += 1\n        elif command == 'U' and x > 1:\n            x -= 1\n        elif command == 'D' and x < n:\n            x += 1\n    return x, y\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = find_starting_cell(n, m, commands)\n    print(r, c)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def find_starting_cell(n, m, commands):\n    x, y = 1, 1\n    for command in commands:\n        if command == 'L' and y > 1:\n            y -= 1\n        elif command == 'R' and y < m:\n            y += 1\n        elif command == 'U' and x > 1:\n            x -= 1\n        elif command == 'D' and x < n:\n            x += 1\n    return x, y\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = find_starting_cell(n, m, commands)\n    print(r, c)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that allows the robot to execute the most commands\",\n    \"Calculate the number of commands that can be executed from each cell\"\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the necessary information\",\n    \"Create a function to calculate the number of commands that can be executed from a given starting cell\",\n    \"Iterate through each test case and determine the starting cell with the maximum number of commands that can be executed\",\n    \"Output the coordinates of the optimal starting cell for each test case\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'movement': The core concept is about the movement of the robot on a checkered rectangular board based on the given commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as there are no steps that need to be considered simultaneously.\n\n# [edge case] \n    Test Case 1:\n    1 1\n    L\n    Output: 1 1\n    Explanation: With only one cell on the board, the robot can only start from that cell to execute the command.\n    \n    Test Case 2:\n    1 2\n    L\n    Output: 1 2\n    Explanation: The robot can start from the only two cells available to execute the command.\n    \n    Test Case 3:\n    3 3\n    RRDLUU\n    Output: 2 1\n    Explanation: Starting from cell (2, 1) allows the robot to execute all commands successfully.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "def calculate_commands_executed(n, m, s):\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n\n    def is_valid_move(x, y):\n        return 1 <= x <= n and 1 <= y <= m\n\n    def count_commands(x, y):\n        commands = 0\n        visited = set()\n        while is_valid_move(x, y) and (x, y) not in visited:\n            visited.add((x, y))\n            commands += 1\n            dx, dy = directions[s[commands % len(s)]]\n            x, y = x + dx, y + dy\n        return commands\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            commands = count_commands(i, j)\n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n\n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    result = calculate_commands_executed(n, m, s)\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_commands_executed(n, m, s):\n    directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n\n    def is_valid_move(x, y):\n        return 1 <= x <= n and 1 <= y <= m\n\n    def count_commands(x, y):\n        commands = 0\n        visited = set()\n        while is_valid_move(x, y) and (x, y) not in visited:\n            visited.add((x, y))\n            commands += 1\n            dx, dy = directions[s[commands % len(s)]]\n            x, y = x + dx, y + dy\n        return commands\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            commands = count_commands(i, j)\n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n\n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    result = calculate_commands_executed(n, m, s)\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell that allows the robot to execute the most commands\",\n    \"Output the coordinates of the starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"step_2\": \"Iterate through each test case\",\n    \"step_3\": \"For each test case, iterate through each cell on the board to determine the maximum number of commands that can be executed\",\n    \"step_4\": \"Output the coordinates of the starting cell that allows the robot to execute the most commands for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'movement': The core concept is about the movement of the robot on a checkered rectangular board based on the given commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, iterating through test cases, determining the starting cell, and outputting the coordinates.\n\n# [edge case] \n    Test Case 1:\n    1 1\n    L\n    Output:\n    1 1\n    Explanation: With only one cell on the board, the robot can only start from that cell to execute the command.\n    \n    Test Case 2:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation: The robot can start from the only two cells available to execute the command.\n    \n    Test Case 3:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation: Starting from cell (2, 1) allows the robot to execute all commands successfully.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.", "Round_0": {"code": "def find_starting_cell(n, m, commands):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n            \n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                current_commands += 1\n            \n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n    \n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    \n    start_cell = find_starting_cell(n, m, commands)\n    print(start_cell[0], start_cell[1])\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def find_starting_cell(n, m, commands):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n            \n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                current_commands += 1\n            \n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n    \n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    \n    start_cell = find_starting_cell(n, m, commands)\n    print(start_cell[0], start_cell[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell for the robot to execute the maximum number of commands\",\n    \"Implement a function to simulate the robot's movement based on the given commands\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"step_2\": \"Iterate through each test case\",\n    \"step_3\": \"For each test case, iterate through each cell on the board and simulate the robot's movement to determine the maximum number of commands that can be executed\",\n    \"step_4\": \"Output the coordinates of the cell from which the robot should start moving for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept is about simulating the movement of a robot on a checkered rectangular board based on a sequence of commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as described in the plan.\n\n# [edge case] \n    Test Case 1:\n    1 1\n    L\n    Output:\n    1 1\n    Explanation: With only one cell, the robot can only start from that cell and execute the command 'L'.\n    \n    Test Case 2:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation: The robot can start from either cell to execute the command 'L'.\n    \n    Test Case 3:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation: Starting from cell (2, 1) allows the robot to execute all commands successfully.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.", "Round_0": {"code": "def find_starting_cell(n, m, commands):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            x, y = i, j\n            current_commands = 0\n            \n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                current_commands += 1\n            \n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n    \n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    \n    start_cell = find_starting_cell(n, m, commands)\n    print(start_cell[0], start_cell[1])\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 44)"}, "Round_1": {"code": "def find_starting_cell(n, m, commands):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            x, y = i, j\n            current_commands = 0\n            \n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                current_commands += 1\n            \n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n    \n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    \n    start_cell = find_starting_cell(n, m, commands)\n    print(start_cell[0], start_cell[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and their descriptions\",\n    \"For each test case, extract the height, width, and sequence of commands\",\n    \"Determine the starting cell that will allow the robot to execute as many commands as possible\",\n    \"Output the coordinates of the starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, extract the height, width, and sequence of commands\",\n    \"Step 3\": \"Iterate through each cell in the field and simulate the robot's movement based on the commands\",\n    \"Step 4\": \"Keep track of the maximum number of commands executed and the corresponding starting cell\",\n    \"Step 5\": \"Output the coordinates of the starting cell that allows the robot to execute the maximum number of commands\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'movement': refers to the action of the robot moving based on the given commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve parsing input, extracting information, simulating movement, tracking commands executed, and outputting the starting cell.\n\n# [edge case] \n    Edge Case 1:\n    1 1\n    L\n    Expected Output: 1 1\n    Explanation: With only one cell and one command to move left, the robot should start at the initial cell.\n    \n    Edge Case 2:\n    3 3\n    RRDLUU\n    Expected Output: 2 1\n    Explanation: The robot should start at cell (2, 1) to execute the sequence of commands successfully.\n    \n    Edge Case 3:\n    4 3\n    LUURRDDLLLUU\n    Expected Output: 3 2\n    Explanation: The robot should start at cell (3, 2) to execute the maximum number of commands.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            commands_executed = 0\n\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                commands_executed += 1\n\n            if commands_executed > max_commands:\n                max_commands = commands_executed\n                start_cell = (i, j)\n\n    print(start_cell[0], start_cell[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 39)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            commands_executed = 0\n\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                commands_executed += 1\n\n            if commands_executed > max_commands:\n                max_commands = commands_executed\n                start_cell = (i, j)\n\n    print(start_cell[0], start_cell[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the descriptions of each test case\",\n    \"For each test case, extract the height, width, and sequence of commands\",\n    \"Determine the starting cell for the robot to perform as many commands as possible\",\n    \"Output the coordinates of the starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases and the descriptions of each test case\",\n    \"step_2\": \"For each test case, extract the height, width, and sequence of commands\",\n    \"step_3\": \"Create a function to determine the starting cell for the robot based on the sequence of commands\",\n    \"step_4\": \"Output the coordinates of the starting cell for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'Parse the input': Extract necessary information from the input data to process the test cases effectively.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    L\n    Output:\n    1 1\n    Explanation:\n    The robot starts at cell (1, 1) and performs the command 'L', which is not a valid move. Since there is only one cell, the robot stays at the same position.\n\n    Test Case 2:\n    Input:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation:\n    The robot starts at cell (1, 2) and performs the command 'L', moving to cell (1, 1).\n\n    Test Case 3:\n    Input:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation:\n    The robot starts at cell (2, 1) and performs the commands 'RRDLUU', moving to cell (3, 2).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to determine the starting cell based on the sequence of commands should cover all scenarios.", "Round_0": {"code": "def determine_starting_cell(n, m, commands):\n    row, col = 1, 1\n    for command in commands:\n        if command == 'L' and col > 1:\n            col -= 1\n        elif command == 'R' and col < m:\n            col += 1\n        elif command == 'U' and row > 1:\n            row -= 1\n        elif command == 'D' and row < n:\n            row += 1\n    return row, col\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = determine_starting_cell(n, m, commands)\n    print(r, c)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def determine_starting_cell(n, m, commands):\n    row, col = 1, 1\n    for command in commands:\n        if command == 'L' and col > 1:\n            col -= 1\n        elif command == 'R' and col < m:\n            col += 1\n        elif command == 'U' and row > 1:\n            row -= 1\n        elif command == 'D' and row < n:\n            row += 1\n    return row, col\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = determine_starting_cell(n, m, commands)\n    print(r, c)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"Iterate through each test case and determine the starting cell for the robot to execute the maximum number of commands\",\n    \"Implement a function to simulate the robot's movement based on the given commands\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases, board dimensions, and command sequences\",\n    \"step_2\": \"Iterate through each test case\",\n    \"step_3\": \"For each test case, iterate through each cell on the board to determine the maximum number of commands that can be executed\",\n    \"step_4\": \"Output the coordinates of the cell with the maximum number of commands that can be executed\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept involves the movement of a robot on a checkered rectangular board based on given commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as described in the plan.\n\n# [edge case] \n    Test Case 1:\n    1 1\n    L\n    Output:\n    1 1\n    Explanation: The robot starts at the only cell and executes the command successfully.\n    \n    Test Case 2:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation: The robot starts at the only cell and executes the command successfully.\n    \n    Test Case 3:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation: Starting from cell (2, 1) allows the robot to execute all commands successfully.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "def find_starting_cell(n, m, commands):\n    max_commands = 0\n    best_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            x, y = i, j\n            current_commands = 0\n            \n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                current_commands += 1\n            \n            if current_commands > max_commands:\n                max_commands = current_commands\n                best_cell = (i, j)\n    \n    return best_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    \n    result = find_starting_cell(n, m, commands)\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 44)"}, "Round_1": {"code": "def find_starting_cell(n, m, commands):\n    max_commands = 0\n    best_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            x, y = i, j\n            current_commands = 0\n            \n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                current_commands += 1\n            \n            if current_commands > max_commands:\n                max_commands = current_commands\n                best_cell = (i, j)\n    \n    return best_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    \n    result = find_starting_cell(n, m, commands)\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and their descriptions\",\n    \"For each test case, extract the height, width, and sequence of commands\",\n    \"Determine the starting cell that will allow the robot to execute as many commands as possible\",\n    \"Output the coordinates of the starting cell for each test case\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases\",\n    \"step_2\": \"For each test case, extract the height, width, and sequence of commands\",\n    \"step_3\": \"Iterate through each cell in the field and simulate the robot's movement based on the sequence of commands\",\n    \"step_4\": \"Keep track of the maximum number of commands executed and the corresponding starting cell\",\n    \"step_5\": \"Output the coordinates of the starting cell that allows the robot to execute the maximum number of commands\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'movement': refers to the actions the robot takes based on the sequence of commands to reach the end cell successfully.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Edge Case 1:\n    1 1\n    L\n    Expected Output: 1 1\n    Explanation: With only one command 'L', the robot should start at the initial cell (2, 1) to execute the command.\n    \n    Edge Case 2:\n    3 3\n    RRDLUU\n    Expected Output: 2 1\n    Explanation: The robot should start at cell (2, 1) to execute the sequence of commands successfully.\n    \n    Edge Case 3:\n    4 3\n    LUURRDDLLLUU\n    Expected Output: 3 2\n    Explanation: The robot should start at cell (3, 2) to execute the maximum number of commands successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find the starting cell that allows the robot to execute the maximum number of commands is sufficient.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Find the starting cell that allows the robot to execute the maximum number of commands\n    start_row = 1\n    start_col = 1\n    max_commands = 0\n    curr_row = 2\n    curr_col = 1\n    for command in commands:\n        if command == 'L':\n            curr_col -= 1\n        elif command == 'R':\n            curr_col += 1\n        elif command == 'U':\n            curr_row -= 1\n        elif command == 'D':\n            curr_row += 1\n\n        if curr_row < 1:\n            curr_row = 1\n        elif curr_row > n:\n            curr_row = n\n        if curr_col < 1:\n            curr_col = 1\n        elif curr_col > m:\n            curr_col = m\n\n        num_commands = abs(curr_row - 1) + abs(curr_col - 2) + 1\n        if num_commands > max_commands:\n            max_commands = num_commands\n            start_row = curr_row\n            start_col = curr_col\n\n    print(start_row, start_col)\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 43)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Find the starting cell that allows the robot to execute the maximum number of commands\n    start_row = 1\n    start_col = 1\n    max_commands = 0\n    curr_row = 2\n    curr_col = 1\n    for command in commands:\n        if command == 'L':\n            curr_col -= 1\n        elif command == 'R':\n            curr_col += 1\n        elif command == 'U':\n            curr_row -= 1\n        elif command == 'D':\n            curr_row += 1\n\n        if curr_row < 1:\n            curr_row = 1\n        elif curr_row > n:\n            curr_row = n\n        if curr_col < 1:\n            curr_col = 1\n        elif curr_col > m:\n            curr_col = m\n\n        num_commands = abs(curr_row - 1) + abs(curr_col - 2) + 1\n        if num_commands > max_commands:\n            max_commands = num_commands\n            start_row = curr_row\n            start_col = curr_col\n\n    print(start_row, start_col)\n"}}], "scores": [], "pass_results": [true, false, true, true, true, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 29, "prompt": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U'. Each symbol triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 11}
