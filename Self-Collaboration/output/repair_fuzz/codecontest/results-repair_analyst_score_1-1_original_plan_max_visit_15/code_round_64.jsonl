{"name": "1607_F. Robot on the Board 2", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nEach cell has one of the symbols 'L', 'R', 'D' or 'U' written on it, indicating the direction in which the robot will move when it gets in that cell \u2014 left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. He then moves to the adjacent square in the direction indicated on the current square in one move. \n\n  * If the robot moves beyond the edge of the board, it falls and breaks. \n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore). \n\n\n\nRobot can choose any cell as the starting cell. Its goal is to make the maximum number of steps before it breaks or stops.\n\nDetermine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written (it does not matter whether to another square or beyond the edge of the board).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4", "tags": ["brute force", "dfs and similar", "dp", "graphs", "implementation"], "difficulty": 12, "id": 1607, "sample_io": [{"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4\n"]}], "test_list": [{"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 6\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nUDUR\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDLDU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 2 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n2 1 7\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nRUDU\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nRUDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 2\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRDRR\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 7\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n4 3 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n3 2 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 5\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 6\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 5\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 1 9\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 10\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n2 2 4\n4 3 10\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nDDLU\nDUDR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n2 2 4\n4 3 10\n1 1 3"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n4 3 12\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nUDRU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nDURU\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n2 1 6\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n3 2 6\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n2 1 7\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 5\n4 3 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 6\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n1 2 3\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULRL\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 2 8\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDUD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 4\n4 3 12\n3 3 6"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n3 1 5\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n2 1 3\n3 1 5\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n2 2 4\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n3 1 9\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDLDU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n1 2 2\n3 1 5\n3 2 6\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nURLL\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 1 12\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDLDU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 9\n1 2 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nLLUR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 1 9\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nDURU\nULLR\n\n4 4\nULDD\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n2 1 6\n3 2 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 6\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 2\n3 1 5\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDRU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nUUDR\nURUD\nULLR\n\n4 4\nDLDU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n1 2 2\n3 1 5\n4 3 10\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDRUU\nURUD\nRLLU\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 2 2\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n3 1 5\n4 3 9\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nDRUU\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n2 1 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 2\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nDRRR\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n3 2 5\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDUR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 9\n3 3 6"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRDR\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 5\n4 3 5\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n3 1 5\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDULD\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n1 2 3\n4 3 12\n3 2 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDRU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n1 2 2\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n2 1 3\n3 1 6\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 2\n1 2 2\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nURLL\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 6\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nUURD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n2 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n2 1 7\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nDRRR\nRUUD\nURUD\nLLUR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n1 1 6\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDRUU\nURUD\nRLLU\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nDRLD\n", "output": ["1 1 1\n1 2 2\n1 1 4\n2 1 3\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUDU\nDRUU\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n2 1 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 2\n1 2 3\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nDRRR\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n1 2 4\n3 2 5\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 9\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 2\n1 2 2\n3 1 4\n3 1 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n2 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n2 2 4\n2 1 7\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nDRRR\nRUUD\nURUD\nLLUR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 2 2\n1 2 3\n1 1 6\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n2 4\nDDLU\nDDUR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n2 2 4\n2 1 7\n2 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 2 2\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n3 2 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nDDLU\nDUDR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n2 2 4\n4 3 10\n1 1 3"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nDURU\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n1 2 3\n2 1 6\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nUDDL\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n1 2 3\n4 3 12\n3 4 6"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDUR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 5\n4 3 12\n3 3 6"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n3 1 5\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 4\n2 1 7\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n1 2 4\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n1 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n2 2 4\n4 3 10\n1 2 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nRDDU\nUUUU\nDDLR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 1 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nLLUR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 2 2\n1 2 3\n3 1 9\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n1 2 2\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 6\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 6\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n3 2 13\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 1 4\n2 1 3\n3 1 6\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nUURD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nDRLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n2 1 3\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 2 2\n1 2 3\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nUDLD\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 6\n3 2 6\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n2 4\nDDLU\nDDUR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n2 2 4\n2 1 7\n2 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n4 3 9\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 4\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n3 1 5\n4 3 9\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nDRLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n2 1 3\n3 1 4\n2 1 7\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n1 2 3\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRDUU\nDURU\nULLR\n\n2 4\nDDLU\nDDUR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n2 2 4\n1 1 5\n2 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 4\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n1 2 2\n1 2 3\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 6\n4 3 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 4\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDRU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 2\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n2 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n2 2 4\n4 3 10\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nUDRU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n2 1 3\n3 1 5\n3 2 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nDRUU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n2 1 7\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nRLLU\n\n4 4\nULDD\nRDDU\nUUUU\nRDDL\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n1 2 3\n3 1 7\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDLDU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 4\n3 2 6\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 1 4\n1 1 4\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 2\n2 1 3\n3 1 5\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nUR\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 2\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n3 1 9\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n2 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n4 3 12\n2 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nLLUR\n\n1 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 1 9\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n2 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 2\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nDDRU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n3 2 6\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n3 1 4\n4 3 9\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n2 2 4\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nURLL\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n1 2 3\n4 1 8\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDUUR\nURUD\nRLLU\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDDL\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n3 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDRU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDLDU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n3 2 6\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nUDRU\nULRL\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nUURD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n2 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nUDDR\nUUUU\nDDLR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 1 9\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDRUU\nURUD\nRLLU\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nDRLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULRL\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 2 8\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n3 2 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nDURU\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n2 1 6\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n2 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}], "task_id": "codecontest/103", "repair_prompt": ["The robot is located on a checkered rectangular board with dimensions n \u00d7 m (n rows and m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nEach cell contains one of the symbols 'L', 'R', 'D' or 'U', denoting the direction the robot will move when it enters that cell \u2014 left, right, down or up, respectively.\n\nThe robot can initiate its movement in any cell. He then moves to the adjacent square in the direction indicated on the current square in one move.\n\n  * If the robot moves beyond the edge of the board, it falls and breaks.\n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore).\n\nRobot can choose any cell as the starting cell. Its goal is to make the maximum number of steps before it breaks or stops.\n\nDecide which square the robot should start its movement from to execute the maximum number of commands possible. A command is considered successfully completed if the robot has moved from the square on which that command was written (it does not matter whether to another square or beyond the edge of the board).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Decide which square the robot should start its movement from to execute the maximum number of commands possible. Start from the cell where the robot can move the furthest before it breaks or stops.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The robot is located on a checkered rectangular board with dimensions n \u00d7 m (n rows and m columns) from top to bottom and left to right, able to move to adjacent cells by side.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_moves(board, n, m):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n\n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def dfs(x, y, steps):\n        visited[x][y] = True\n        max_steps = steps\n\n        for dx, dy in directions.values():\n            new_x, new_y = x + dx, y + dy\n            if is_valid_move(new_x, new_y) and not visited[new_x][new_y] and board[new_x][new_y] == board[x][y]:\n                max_steps = max(max_steps, dfs(new_x, new_y, steps + 1))\n\n        visited[x][y] = False\n        return max_steps\n\n    max_moves = 0\n    start_cell = (1, 1)\n\n    for i in range(n):\n        for j in range(m):\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n\n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = calculate_moves(board, n, m)\n    print(r, c, d)\n\nmain()", "completions": ["import sys\n\ndef find_starting_cell(board):\n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for r in range(len(board)):\n        for c in range(len(board[0])):\n            moves = calculate_moves(board, r, c)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (r+1, c+1)\n    \n    return start_cell, max_moves\n\ndef calculate_moves(board, r, c):\n    moves = 0\n    visited = set()\n    \n    while r >= 0 and r < len(board) and c >= 0 and c < len(board[0]) and (r, c) not in visited:\n        visited.add((r, c))\n        if board[r][c] == 'L':\n            c -= 1\n        elif board[r][c] == 'R':\n            c += 1\n        elif board[r][c] == 'U':\n            r -= 1\n        elif board[r][c] == 'D':\n            r += 1\n        moves += 1\n    \n    return moves\n\ndef main():\n    t = int(input())\n    \n    for _ in range(t):\n        input()  # read the blank line\n        n, m = map(int, input().split())\n        board = [input() for _ in range(n)]\n        \n        start_cell, max_moves = find_starting_cell(board)\n        print(start_cell[0], start_cell[1], max_moves)\n\nif __name__ == \"__main__\":\n    main()\n\nmain()", "def get_moves(board, n, m):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n\n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def dfs(x, y, steps):\n        visited[x][y] = True\n        max_steps = steps\n        for dx, dy in directions.values():\n            new_x, new_y = x + dx, y + dy\n            if is_valid_move(new_x, new_y) and not visited[new_x][new_y] and board[new_x][new_y] == board[x][y]:\n                max_steps = max(max_steps, dfs(new_x, new_y, steps + 1))\n        visited[x][y] = False\n        return max_steps\n\n    max_moves = 0\n    start_cell = (1, 1)\n    for i in range(n):\n        for j in range(m):\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n\n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    r, c, d = get_moves(board, n, m)\n    print(r, c, d)\n\nmain()", "def get_moves(board, n, m):\n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for i in range(n):\n        for j in range(m):\n            visited = set()\n            x, y = i, j\n            moves = 0\n            \n            while (x, y) not in visited:\n                visited.add((x, y))\n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                \n                if x < 0 or x >= n or y < 0 or y >= m:\n                    break\n                \n                moves += 1\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i+1, j+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = get_moves(board, n, m)\n    print(r, c, d)\n\nmain()", "def calculate_moves(board):\n    n = len(board)\n    m = len(board[0])\n    \n    max_moves = 0\n    start_cell = (0, 0)\n    \n    for i in range(n):\n        for j in range(m):\n            moves = 0\n            visited = set()\n            x, y = i, j\n            \n            while (x, y) not in visited:\n                visited.add((x, y))\n                moves += 1\n                \n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                \n                x = max(0, min(x, n-1))\n                y = max(0, min(y, m-1))\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i+1, j+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    \n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n\nmain()", "def calculate_moves(board):\n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for r in range(len(board)):\n        for c in range(len(board[0])):\n            moves = 0\n            visited = set()\n            curr_r, curr_c = r, c\n            \n            while (curr_r, curr_c) not in visited:\n                visited.add((curr_r, curr_c))\n                if board[curr_r][curr_c] == 'R':\n                    curr_c += 1\n                elif board[curr_r][curr_c] == 'L':\n                    curr_c -= 1\n                elif board[curr_r][curr_c] == 'U':\n                    curr_r -= 1\n                elif board[curr_r][curr_c] == 'D':\n                    curr_r += 1\n                moves += 1\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (r+1, c+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    \n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n\nmain()", "def calculate_moves(board):\n    max_moves = 0\n    start_cell = (0, 0)\n    \n    for r in range(len(board)):\n        for c in range(len(board[0])):\n            moves = dfs(board, r, c)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (r+1, c+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\ndef dfs(board, r, c):\n    if r < 0 or r >= len(board) or c < 0 or c >= len(board[0]) or board[r][c] == '#':\n        return 0\n    \n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    max_moves = 0\n    \n    for dr, dc in directions:\n        new_r, new_c = r, c\n        moves = 0\n        \n        while 0 <= new_r < len(board) and 0 <= new_c < len(board[0]) and board[new_r][new_c] != '#':\n            moves += 1\n            new_r += dr\n            new_c += dc\n        \n        max_moves = max(max_moves, moves)\n    \n    return max_moves\n\nt = int(input())\ninput_data = []\nfor _ in range(t):\n    input()\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    input_data.append((n, m, board))\n\nfor n, m, board in input_data:\n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n\nmain()", "def calculate_moves(board):\n    n = len(board)\n    m = len(board[0])\n    \n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for i in range(n):\n        for j in range(m):\n            moves = 0\n            visited = set()\n            x, y = i, j\n            \n            while (x, y) not in visited:\n                visited.add((x, y))\n                moves += 1\n                \n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                \n                x = (x + n) % n\n                y = (y + m) % m\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    \n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n\nmain()", "def calculate_moves(board, n, m, r, c):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n    \n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n    \n    def dfs(x, y, steps):\n        if visited[x][y]:\n            return steps\n        visited[x][y] = True\n        dx, dy = directions[board[x][y]]\n        new_x, new_y = x + dx, y + dy\n        if not is_valid_move(new_x, new_y):\n            return steps\n        return dfs(new_x, new_y, steps + 1)\n    \n    max_moves = 0\n    for i in range(n):\n        for j in range(m):\n            visited = [[False for _ in range(m)] for _ in range(n)]\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                r, c = i + 1, j + 1\n    \n    return r, c, max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = calculate_moves(board, n, m, 0, 0)\n    print(r, c, d)\n\nmain()", "def calculate_moves(board):\n    n = len(board)\n    m = len(board[0])\n    max_moves = 0\n    start_cell = (1, 1)\n\n    for i in range(n):\n        for j in range(m):\n            moves = 0\n            visited = set()\n            x, y = i, j\n\n            while (x, y) not in visited:\n                visited.add((x, y))\n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                moves += 1\n\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i+1, j+1)\n\n    return start_cell, max_moves\n\nt = int(input())\ninput()  # Skip the blank line\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    start_cell, max_moves = calculate_moves(board)\n    print(start_cell[0], start_cell[1], max_moves)\n\nmain()", "def calculate_moves(board, n, m):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n\n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def dfs(x, y, steps):\n        visited[x][y] = True\n        max_steps = steps\n\n        for dx, dy in directions.values():\n            new_x, new_y = x + dx, y + dy\n            if is_valid_move(new_x, new_y) and not visited[new_x][new_y] and board[new_x][new_y] == board[x][y]:\n                max_steps = max(max_steps, dfs(new_x, new_y, steps + 1))\n\n        visited[x][y] = False\n        return max_steps\n\n    max_moves = 0\n    start_cell = (1, 1)\n\n    for i in range(n):\n        for j in range(m):\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n\n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = calculate_moves(board, n, m)\n    print(r, c, d)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the board dimensions\",\n    \"Parse the input to extract the board layout for each test case\",\n    \"Implement a function to calculate the maximum number of moves for a given starting cell\",\n    \"Iterate through all possible starting cells to find the one that yields the maximum number of moves\"\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the necessary information\",\n    \"For each test case:\",\n    \"  - Parse the board layout\",\n    \"  - Iterate through all possible starting cells:\",\n    \"    - Calculate the maximum number of moves for the current starting cell\",\n    \"  - Output the starting cell with the maximum number of moves\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept is about the movement of a robot on a checkered rectangular board, where the robot can move in four directions and has certain constraints.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the highest number of steps the robot can take before breaking or stopping.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, calculating moves, and iterating through starting cells.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    R\n    Output:\n    1 1 1\n    Explanation: The robot starts at cell (1, 1) and can only make one move to the right before breaking.\n\n    Test Case 2:\n    Input:\n    1 3\n    RRL\n    Output:\n    1 1 3\n    Explanation: The robot starts at cell (1, 1) and can make three moves to the right before breaking.\n\n    Test Case 3:\n    Input:\n    4 4\n    DDLU\n    RDDU\n    UUUU\n    RDLD\n    Output:\n    1 1 4\n    Explanation: The robot starts at cell (1, 1) and can make four moves in different directions before breaking.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def calculate_moves(board, n, m):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n\n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def dfs(x, y, steps):\n        visited[x][y] = True\n        max_steps = steps\n\n        for dx, dy in directions.values():\n            new_x, new_y = x + dx, y + dy\n            if is_valid_move(new_x, new_y) and not visited[new_x][new_y] and board[new_x][new_y] == board[x][y]:\n                max_steps = max(max_steps, dfs(new_x, new_y, steps + 1))\n\n        visited[x][y] = False\n        return max_steps\n\n    max_moves = 0\n    start_cell = (1, 1)\n\n    for i in range(n):\n        for j in range(m):\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n\n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = calculate_moves(board, n, m)\n    print(r, c, d)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_moves(board, n, m):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n\n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def dfs(x, y, steps):\n        visited[x][y] = True\n        max_steps = steps\n\n        for dx, dy in directions.values():\n            new_x, new_y = x + dx, y + dy\n            if is_valid_move(new_x, new_y) and not visited[new_x][new_y] and board[new_x][new_y] == board[x][y]:\n                max_steps = max(max_steps, dfs(new_x, new_y, steps + 1))\n\n        visited[x][y] = False\n        return max_steps\n\n    max_moves = 0\n    start_cell = (1, 1)\n\n    for i in range(n):\n        for j in range(m):\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n\n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = calculate_moves(board, n, m)\n    print(r, c, d)\n"}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the board configurations\",\n      \"For each test case, determine the starting cell for the robot to execute the maximum number of commands\",\n      \"Calculate the maximum number of moves the robot can make from the starting cell\"\n    ],\n    \"major_steps\": [\n      \"Read the input from standard input\",\n      \"Parse the input to extract the number of test cases and the board configurations\",\n      \"For each test case, iterate through the board to find the starting cell for the robot\",\n      \"Calculate the maximum number of moves the robot can make from the starting cell\",\n      \"Output the results to standard output\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum number of commands'\n    Explanation: The core concept is to determine the starting cell for the robot to execute the maximum number of commands by moving to the cell where it can move the furthest before it breaks or stops.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the highest number of moves the robot can make from the starting cell.\n\n# [code logic]\n    The steps should be implemented sequentially as there are no steps that need to be executed simultaneously.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    R\n    Output:\n    1 1 1\n    Explanation: The robot starts at cell (1, 1) and can make 1 move in the right direction.\n    \n    Test Case 2:\n    Input:\n    1 3\n    RRL\n    Output:\n    1 1 3\n    Explanation: The robot starts at cell (1, 1) and can make 3 moves by going right, right, and left.\n    \n    Test Case 3:\n    Input:\n    4 4\n    DDLU\n    RUUD\n    URUD\n    ULLR\n    Output:\n    4 3 12\n    Explanation: The robot starts at cell (4, 3) and can make 12 moves by following the given directions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should be able to handle all scenarios effectively.", "Round_0": {"code": "import sys\n\ndef find_starting_cell(board):\n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for r in range(len(board)):\n        for c in range(len(board[0])):\n            moves = calculate_moves(board, r, c)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (r+1, c+1)\n    \n    return start_cell, max_moves\n\ndef calculate_moves(board, r, c):\n    moves = 0\n    visited = set()\n    \n    while r >= 0 and r < len(board) and c >= 0 and c < len(board[0]) and (r, c) not in visited:\n        visited.add((r, c))\n        if board[r][c] == 'L':\n            c -= 1\n        elif board[r][c] == 'R':\n            c += 1\n        elif board[r][c] == 'U':\n            r -= 1\n        elif board[r][c] == 'D':\n            r += 1\n        moves += 1\n    \n    return moves\n\ndef main():\n    t = int(input())\n    \n    for _ in range(t):\n        input()  # read the blank line\n        n, m = map(int, input().split())\n        board = [input() for _ in range(n)]\n        \n        start_cell, max_moves = find_starting_cell(board)\n        print(start_cell[0], start_cell[1], max_moves)\n\nif __name__ == \"__main__\":\n    main()\n", "report": "The compilation output of the preceding code is: calculate_moves() missing 2 required positional arguments: 'r' and 'c'"}, "Round_1": {"code": "import sys\n\ndef find_starting_cell(board):\n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for r in range(len(board)):\n        for c in range(len(board[0])):\n            moves = calculate_moves(board, r, c)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (r+1, c+1)\n    \n    return start_cell, max_moves\n\ndef calculate_moves(board, r, c):\n    moves = 0\n    visited = set()\n    \n    while r >= 0 and r < len(board) and c >= 0 and c < len(board[0]) and (r, c) not in visited:\n        visited.add((r, c))\n        if board[r][c] == 'L':\n            c -= 1\n        elif board[r][c] == 'R':\n            c += 1\n        elif board[r][c] == 'U':\n            r -= 1\n        elif board[r][c] == 'D':\n            r += 1\n        moves += 1\n    \n    return moves\n\ndef main():\n    t = int(input())\n    \n    for _ in range(t):\n        input()  # read the blank line\n        n, m = map(int, input().split())\n        board = [input() for _ in range(n)]\n        \n        start_cell, max_moves = find_starting_cell(board)\n        print(start_cell[0], start_cell[1], max_moves)\n\nif __name__ == \"__main__\":\n    main()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the board dimensions\",\n    \"Parse the input to extract the board layout for each test case\",\n    \"Implement a function to calculate the maximum number of moves for a given starting cell\",\n    \"Iterate through all possible starting cells to find the one that yields the maximum number of moves\"\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the necessary information\",\n    \"For each test case:\",\n    \"  - Parse the board layout\",\n    \"  - Iterate through all possible starting cells:\",\n    \"    - Calculate the maximum number of moves for the current starting cell\",\n    \"  - Output the starting cell with the maximum number of moves\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept is about the movement of a robot on a checkered rectangular board following specific directions and constraints.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the highest number of steps the robot can take before breaking or stopping.\n\n# [code logic]\n    The steps should be implemented sequentially as described in the plan. There are no steps that need to be implemented simultaneously.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    R\n    Output:\n    1 1 1\n    Explanation: The robot starts at cell (1, 1) and can only make one move to the right before breaking.\n\n    Test Case 2:\n    Input:\n    1 3\n    RRL\n    Output:\n    1 1 3\n    Explanation: The robot starts at cell (1, 1) and can make three moves to the right before breaking.\n\n    Test Case 3:\n    Input:\n    4 4\n    DDLU\n    RDDU\n    UUUU\n    RDLD\n    Output:\n    1 1 4\n    Explanation: The robot starts at cell (1, 1) and can make four moves before breaking.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def get_moves(board, n, m):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n\n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def dfs(x, y, steps):\n        visited[x][y] = True\n        max_steps = steps\n        for dx, dy in directions.values():\n            new_x, new_y = x + dx, y + dy\n            if is_valid_move(new_x, new_y) and not visited[new_x][new_y] and board[new_x][new_y] == board[x][y]:\n                max_steps = max(max_steps, dfs(new_x, new_y, steps + 1))\n        visited[x][y] = False\n        return max_steps\n\n    max_moves = 0\n    start_cell = (1, 1)\n    for i in range(n):\n        for j in range(m):\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n\n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    r, c, d = get_moves(board, n, m)\n    print(r, c, d)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def get_moves(board, n, m):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n\n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def dfs(x, y, steps):\n        visited[x][y] = True\n        max_steps = steps\n        for dx, dy in directions.values():\n            new_x, new_y = x + dx, y + dy\n            if is_valid_move(new_x, new_y) and not visited[new_x][new_y] and board[new_x][new_y] == board[x][y]:\n                max_steps = max(max_steps, dfs(new_x, new_y, steps + 1))\n        visited[x][y] = False\n        return max_steps\n\n    max_moves = 0\n    start_cell = (1, 1)\n    for i in range(n):\n        for j in range(m):\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n\n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    r, c, d = get_moves(board, n, m)\n    print(r, c, d)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the board configurations\",\n    \"For each test case, determine the starting cell for the robot to maximize the number of moves\",\n    \"Implement a function to calculate the maximum number of moves for a given starting cell\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases and the board configurations\",\n    \"step_2\": \"For each test case, iterate through each cell on the board and calculate the maximum number of moves for that cell\",\n    \"step_3\": \"Output the starting cell with the maximum number of moves for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum number of moves'\n    Explanation: The core concept is to find the starting cell for the robot that allows it to make the maximum number of moves before breaking or stopping.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the highest number of moves possible for the robot.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, iterating through cells, and outputting the starting cell with the maximum moves.\n\n# [edge case] \n    Test Case 1:\n    1 1\n    R\n    Output:\n    1 1 1\n    Explanation: The robot starts at cell (1, 1) and can only make one move to the right before breaking or stopping.\n\n    Test Case 2:\n    1 3\n    RRL\n    Output:\n    1 1 3\n    Explanation: The robot starts at cell (1, 1) and can make three moves to the right before breaking or stopping.\n\n    Test Case 3:\n    2 2\n    DL\n    RU\n    Output:\n    1 1 4\n    Explanation: The robot starts at cell (1, 1) and can make four moves (D -> R -> U -> L) before breaking or stopping.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def get_moves(board, n, m):\n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for i in range(n):\n        for j in range(m):\n            visited = set()\n            x, y = i, j\n            moves = 0\n            \n            while (x, y) not in visited:\n                visited.add((x, y))\n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                \n                if x < 0 or x >= n or y < 0 or y >= m:\n                    break\n                \n                moves += 1\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i+1, j+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = get_moves(board, n, m)\n    print(r, c, d)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def get_moves(board, n, m):\n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for i in range(n):\n        for j in range(m):\n            visited = set()\n            x, y = i, j\n            moves = 0\n            \n            while (x, y) not in visited:\n                visited.add((x, y))\n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                \n                if x < 0 or x >= n or y < 0 or y >= m:\n                    break\n                \n                moves += 1\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i+1, j+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = get_moves(board, n, m)\n    print(r, c, d)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the board dimensions\",\n      \"For each test case, parse the board layout and determine the starting cell for the robot\",\n      \"Implement a function to calculate the maximum number of moves the robot can make from a given starting cell\"\n    ],\n    \"high-level steps\": [\n      \"Read the number of test cases from input\",\n      \"For each test case:\",\n      \"   - Read the board dimensions and layout from input\",\n      \"   - Determine the starting cell for the robot\",\n      \"   - Calculate the maximum number of moves the robot can make from the starting cell\",\n      \"Output the starting cell and maximum number of moves for each test case\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'test cases'\n    Explanation: The requirement involves multiple test cases where the robot needs to navigate a checkered board to maximize the number of moves.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as described in the plan. Each test case should be processed individually to determine the starting cell and calculate the maximum number of moves.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    R\n    Output:\n    1 1 1\n    Explanation: The robot starts at cell (1, 1) and can make 1 move in the right direction.\n    \n    Test Case 2:\n    Input:\n    1 3\n    RRL\n    Output:\n    1 1 3\n    Explanation: The robot starts at cell (1, 1) and can make 3 moves (R -> R -> L) to maximize the number of moves.\n    \n    Test Case 3:\n    Input:\n    2 2\n    DL\n    RU\n    Output:\n    1 1 4\n    Explanation: The robot starts at cell (1, 1) and can make 4 moves (D -> L -> R -> U) to maximize the number of moves.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "def calculate_moves(board):\n    n = len(board)\n    m = len(board[0])\n    \n    max_moves = 0\n    start_cell = (0, 0)\n    \n    for i in range(n):\n        for j in range(m):\n            moves = 0\n            visited = set()\n            x, y = i, j\n            \n            while (x, y) not in visited:\n                visited.add((x, y))\n                moves += 1\n                \n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                \n                x = max(0, min(x, n-1))\n                y = max(0, min(y, m-1))\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i+1, j+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    \n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 46)"}, "Round_1": {"code": "def calculate_moves(board):\n    n = len(board)\n    m = len(board[0])\n    \n    max_moves = 0\n    start_cell = (0, 0)\n    \n    for i in range(n):\n        for j in range(m):\n            moves = 0\n            visited = set()\n            x, y = i, j\n            \n            while (x, y) not in visited:\n                visited.add((x, y))\n                moves += 1\n                \n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                \n                x = max(0, min(x, n-1))\n                y = max(0, min(y, m-1))\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i+1, j+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    \n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the board configurations\",\n      \"For each test case, determine the starting cell for the robot to maximize the number of moves\",\n      \"Implement a function to calculate the maximum number of moves from a given starting cell\"\n    ],\n    \"major_steps\": [\n      \"Read the input to get the number of test cases\",\n      \"For each test case, parse the board configuration and determine the starting cell for the robot\",\n      \"Implement a function to calculate the maximum number of moves from a given starting cell\",\n      \"Output the results for each test case\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum number of commands'\n    Explanation: The core concept is to determine the starting cell for the robot that allows it to execute the maximum number of commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the highest number of commands that can be executed from a starting cell.\n\n# [code logic]\n    The steps should be implemented sequentially as there are no steps that need to be executed simultaneously.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    R\n    Output:\n    1 1 1\n    Explanation: In this case, the robot starts at cell (1, 1) and can only move in one direction, allowing for a maximum of 1 command.\n    \n    Test Case 2:\n    Input:\n    1 3\n    RRL\n    Output:\n    1 1 3\n    Explanation: The robot can start at cell (1, 1) and execute 3 commands by moving right twice and then left once.\n    \n    Test Case 3:\n    Input:\n    4 4\n    DDLU\n    RUUD\n    URUD\n    ULLR\n    Output:\n    4 3 12\n    Explanation: The robot can start at cell (4, 3) and execute 12 commands by following the specified movements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all possible scenarios.", "Round_0": {"code": "def calculate_moves(board):\n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for r in range(len(board)):\n        for c in range(len(board[0])):\n            moves = 0\n            visited = set()\n            curr_r, curr_c = r, c\n            \n            while (curr_r, curr_c) not in visited:\n                visited.add((curr_r, curr_c))\n                if board[curr_r][curr_c] == 'R':\n                    curr_c += 1\n                elif board[curr_r][curr_c] == 'L':\n                    curr_c -= 1\n                elif board[curr_r][curr_c] == 'U':\n                    curr_r -= 1\n                elif board[curr_r][curr_c] == 'D':\n                    curr_r += 1\n                moves += 1\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (r+1, c+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    \n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_moves(board):\n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for r in range(len(board)):\n        for c in range(len(board[0])):\n            moves = 0\n            visited = set()\n            curr_r, curr_c = r, c\n            \n            while (curr_r, curr_c) not in visited:\n                visited.add((curr_r, curr_c))\n                if board[curr_r][curr_c] == 'R':\n                    curr_c += 1\n                elif board[curr_r][curr_c] == 'L':\n                    curr_c -= 1\n                elif board[curr_r][curr_c] == 'U':\n                    curr_r -= 1\n                elif board[curr_r][curr_c] == 'D':\n                    curr_r += 1\n                moves += 1\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (r+1, c+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    \n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the board dimensions\",\n      \"For each test case, parse the board layout and determine the starting cell for the robot\",\n      \"Implement a function to calculate the maximum number of moves the robot can make from a given starting cell\"\n    ],\n    \"major_steps\": [\n      \"Read the input to get the number of test cases\",\n      \"For each test case, read the board dimensions and layout\",\n      \"For each test case, determine the starting cell for the robot\",\n      \"For each test case, calculate the maximum number of moves the robot can make from the starting cell\",\n      \"Output the results for each test case\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'test cases'\n    Explanation: The requirement involves multiple test cases where the robot needs to navigate a rectangular board to maximize the number of moves.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve different aspects of processing the input and determining the robot's movements.\n\n# [edge case] \n    Test Case 1:\n    Input\n    1 1\n    R\n    Output\n    1 1 1\n    Explanation: The robot starts at cell (1, 1) and can only make 1 move to the right.\n    \n    Test Case 2:\n    Input\n    1 3\n    RRL\n    Output\n    1 1 3\n    Explanation: The robot starts at cell (1, 1) and can make 3 moves to the right.\n    \n    Test Case 3:\n    Input\n    2 2\n    DL\n    RU\n    Output\n    1 1 4\n    Explanation: The robot starts at cell (1, 1) and can make 4 moves in total.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover the requirements effectively.\n\nNO", "Round_0": {"code": "def calculate_moves(board):\n    max_moves = 0\n    start_cell = (0, 0)\n    \n    for r in range(len(board)):\n        for c in range(len(board[0])):\n            moves = dfs(board, r, c)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (r+1, c+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\ndef dfs(board, r, c):\n    if r < 0 or r >= len(board) or c < 0 or c >= len(board[0]) or board[r][c] == '#':\n        return 0\n    \n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    max_moves = 0\n    \n    for dr, dc in directions:\n        new_r, new_c = r, c\n        moves = 0\n        \n        while 0 <= new_r < len(board) and 0 <= new_c < len(board[0]) and board[new_r][new_c] != '#':\n            moves += 1\n            new_r += dr\n            new_c += dc\n        \n        max_moves = max(max_moves, moves)\n    \n    return max_moves\n\nt = int(input())\ninput_data = []\nfor _ in range(t):\n    input()\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    input_data.append((n, m, board))\n\nfor n, m, board in input_data:\n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_moves(board):\n    max_moves = 0\n    start_cell = (0, 0)\n    \n    for r in range(len(board)):\n        for c in range(len(board[0])):\n            moves = dfs(board, r, c)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (r+1, c+1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\ndef dfs(board, r, c):\n    if r < 0 or r >= len(board) or c < 0 or c >= len(board[0]) or board[r][c] == '#':\n        return 0\n    \n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    max_moves = 0\n    \n    for dr, dc in directions:\n        new_r, new_c = r, c\n        moves = 0\n        \n        while 0 <= new_r < len(board) and 0 <= new_c < len(board[0]) and board[new_r][new_c] != '#':\n            moves += 1\n            new_r += dr\n            new_c += dc\n        \n        max_moves = max(max_moves, moves)\n    \n    return max_moves\n\nt = int(input())\ninput_data = []\nfor _ in range(t):\n    input()\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    input_data.append((n, m, board))\n\nfor n, m, board in input_data:\n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the board dimensions\",\n      \"For each test case, parse the board layout and determine the starting cell for the robot\",\n      \"Implement a function to calculate the maximum number of moves the robot can make from a given starting cell\"\n    ],\n    \"high-level-steps\": [\n      \"Read the number of test cases from input\",\n      \"For each test case, read the board dimensions and layout from input\",\n      \"Determine the starting cell for the robot based on the board layout\",\n      \"Calculate the maximum number of moves the robot can make from the starting cell\",\n      \"Output the starting cell and the maximum number of moves for each test case\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'test cases'\n    Explanation: The requirement involves multiple test cases where the robot needs to navigate a rectangular board to maximize the number of moves.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they involve reading input, parsing board layout, determining starting cell, calculating moves, and outputting results.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    R\n    Output:\n    1 1 1\n    Explanation: The robot starts at cell (1, 1) and can only make 1 move to the right.\n    \n    Test Case 2:\n    Input:\n    1 3\n    RRL\n    Output:\n    1 1 3\n    Explanation: The robot starts at cell (1, 1) and can make 3 moves to the right.\n    \n    Test Case 3:\n    Input:\n    4 4\n    DDLU\n    RUUD\n    URUD\n    ULLR\n    Output:\n    1 1 4\n    Explanation: The robot starts at cell (1, 1) and can make 4 moves in various directions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "def calculate_moves(board):\n    n = len(board)\n    m = len(board[0])\n    \n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for i in range(n):\n        for j in range(m):\n            moves = 0\n            visited = set()\n            x, y = i, j\n            \n            while (x, y) not in visited:\n                visited.add((x, y))\n                moves += 1\n                \n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                \n                x = (x + n) % n\n                y = (y + m) % m\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    \n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_moves(board):\n    n = len(board)\n    m = len(board[0])\n    \n    max_moves = 0\n    start_cell = (1, 1)\n    \n    for i in range(n):\n        for j in range(m):\n            moves = 0\n            visited = set()\n            x, y = i, j\n            \n            while (x, y) not in visited:\n                visited.add((x, y))\n                moves += 1\n                \n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                \n                x = (x + n) % n\n                y = (y + m) % m\n            \n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n    \n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    \n    r, c, d = calculate_moves(board)\n    print(r, c, d)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the board dimensions\",\n    \"Parse the input to extract the board layout for each test case\",\n    \"Implement a function to calculate the maximum number of moves for a given starting cell\",\n    \"Iterate through all possible starting cells to find the one that yields the maximum number of moves\"\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the necessary information\",\n    \"For each test case:\",\n    \"  - Parse the board layout\",\n    \"  - Iterate through all possible starting cells:\",\n    \"    - Calculate the maximum number of moves for each starting cell\",\n    \"    - Keep track of the starting cell that yields the maximum number of moves\",\n    \"Output the starting cell with the maximum number of moves for each test case\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum number of moves'\n    Explanation: The core concept is to determine the starting cell for the robot that allows it to make the maximum number of moves before breaking or stopping.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the highest number of moves that the robot can make.\n\n# [code logic]\n    All steps should be implemented step by step as there are no steps that need to be executed simultaneously.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    R\n    Output:\n    1 1 1\n    Explanation: In this case, the robot can only make one move from the starting cell (1, 1) to the right (R).\n    \n    Test Case 2:\n    Input:\n    1 3\n    RRL\n    Output:\n    1 1 3\n    Explanation: The robot can make three moves starting from cell (1, 1) to the right, right, and left.\n    \n    Test Case 3:\n    Input:\n    4 4\n    DDLU\n    RDDU\n    UUUU\n    RDLD\n    Output:\n    1 1 4\n    Explanation: The robot can make four moves starting from cell (1, 1) in various directions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_moves(board, n, m, r, c):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n    \n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n    \n    def dfs(x, y, steps):\n        if visited[x][y]:\n            return steps\n        visited[x][y] = True\n        dx, dy = directions[board[x][y]]\n        new_x, new_y = x + dx, y + dy\n        if not is_valid_move(new_x, new_y):\n            return steps\n        return dfs(new_x, new_y, steps + 1)\n    \n    max_moves = 0\n    for i in range(n):\n        for j in range(m):\n            visited = [[False for _ in range(m)] for _ in range(n)]\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                r, c = i + 1, j + 1\n    \n    return r, c, max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = calculate_moves(board, n, m, 0, 0)\n    print(r, c, d)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_moves(board, n, m, r, c):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n    \n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n    \n    def dfs(x, y, steps):\n        if visited[x][y]:\n            return steps\n        visited[x][y] = True\n        dx, dy = directions[board[x][y]]\n        new_x, new_y = x + dx, y + dy\n        if not is_valid_move(new_x, new_y):\n            return steps\n        return dfs(new_x, new_y, steps + 1)\n    \n    max_moves = 0\n    for i in range(n):\n        for j in range(m):\n            visited = [[False for _ in range(m)] for _ in range(n)]\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                r, c = i + 1, j + 1\n    \n    return r, c, max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = calculate_moves(board, n, m, 0, 0)\n    print(r, c, d)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the board configurations\",\n      \"For each test case, determine the starting cell for the robot to maximize the number of moves\",\n      \"Implement a function to calculate the maximum number of moves from a given starting cell\"\n    ],\n    \"major_steps\": [\n      \"Read the input to get the number of test cases\",\n      \"For each test case, parse the board configuration and determine the starting cell for the robot\",\n      \"Implement a function to calculate the maximum number of moves from a given starting cell\",\n      \"Output the starting cell and the maximum number of moves for each test case\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum number of moves'\n    Explanation: The core concept is to determine the starting cell for the robot that allows it to make the maximum number of moves on the board.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are not dependent on each other.\n\n# [edge case] \n    1 1 1\n    Explanation: In the case where there is only one cell on the board, the robot should start from that cell to make 1 move.\n    1 1 3\n    Explanation: In the case where there are three cells with 'R' moves, the robot should start from the first cell to make 3 moves.\n    1 1 4\n    Explanation: In the case where there are four cells with 'DL' moves, the robot should start from the first cell to make 4 moves.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def calculate_moves(board):\n    n = len(board)\n    m = len(board[0])\n    max_moves = 0\n    start_cell = (1, 1)\n\n    for i in range(n):\n        for j in range(m):\n            moves = 0\n            visited = set()\n            x, y = i, j\n\n            while (x, y) not in visited:\n                visited.add((x, y))\n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                moves += 1\n\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i+1, j+1)\n\n    return start_cell, max_moves\n\nt = int(input())\ninput()  # Skip the blank line\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    start_cell, max_moves = calculate_moves(board)\n    print(start_cell[0], start_cell[1], max_moves)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 45)"}, "Round_1": {"code": "def calculate_moves(board):\n    n = len(board)\n    m = len(board[0])\n    max_moves = 0\n    start_cell = (1, 1)\n\n    for i in range(n):\n        for j in range(m):\n            moves = 0\n            visited = set()\n            x, y = i, j\n\n            while (x, y) not in visited:\n                visited.add((x, y))\n                if board[x][y] == 'L':\n                    y -= 1\n                elif board[x][y] == 'R':\n                    y += 1\n                elif board[x][y] == 'U':\n                    x -= 1\n                elif board[x][y] == 'D':\n                    x += 1\n                moves += 1\n\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i+1, j+1)\n\n    return start_cell, max_moves\n\nt = int(input())\ninput()  # Skip the blank line\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    start_cell, max_moves = calculate_moves(board)\n    print(start_cell[0], start_cell[1], max_moves)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the board dimensions\",\n    \"Parse the input to extract the board layout for each test case\",\n    \"Implement a function to calculate the maximum number of moves for a given starting cell\",\n    \"Iterate through all possible starting cells to find the one that yields the maximum number of moves\"\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the necessary information\",\n    \"For each test case:\",\n    \"  - Parse the board layout\",\n    \"  - Iterate through all possible starting cells:\",\n    \"    - Calculate the maximum number of moves for the current starting cell\",\n    \"  - Output the starting cell with the maximum number of moves\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept is about the movement of a robot on a checkered rectangular board, where the robot can move in four directions and has certain constraints.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the highest number of steps the robot can take before breaking or stopping.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, calculating moves, and iterating through starting cells.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    R\n    Output:\n    1 1 1\n    Explanation: The robot starts at cell (1, 1) and can only make one move to the right before breaking.\n\n    Test Case 2:\n    Input:\n    1 3\n    RRL\n    Output:\n    1 1 3\n    Explanation: The robot starts at cell (1, 1) and can make three moves to the right before breaking.\n\n    Test Case 3:\n    Input:\n    4 4\n    DDLU\n    RDDU\n    UUUU\n    RDLD\n    Output:\n    1 1 4\n    Explanation: The robot starts at cell (1, 1) and can make four moves in different directions before breaking.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "def calculate_moves(board, n, m):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n\n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def dfs(x, y, steps):\n        visited[x][y] = True\n        max_steps = steps\n\n        for dx, dy in directions.values():\n            new_x, new_y = x + dx, y + dy\n            if is_valid_move(new_x, new_y) and not visited[new_x][new_y] and board[new_x][new_y] == board[x][y]:\n                max_steps = max(max_steps, dfs(new_x, new_y, steps + 1))\n\n        visited[x][y] = False\n        return max_steps\n\n    max_moves = 0\n    start_cell = (1, 1)\n\n    for i in range(n):\n        for j in range(m):\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n\n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = calculate_moves(board, n, m)\n    print(r, c, d)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_moves(board, n, m):\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n\n    def is_valid_move(x, y):\n        return 0 <= x < n and 0 <= y < m\n\n    def dfs(x, y, steps):\n        visited[x][y] = True\n        max_steps = steps\n\n        for dx, dy in directions.values():\n            new_x, new_y = x + dx, y + dy\n            if is_valid_move(new_x, new_y) and not visited[new_x][new_y] and board[new_x][new_y] == board[x][y]:\n                max_steps = max(max_steps, dfs(new_x, new_y, steps + 1))\n\n        visited[x][y] = False\n        return max_steps\n\n    max_moves = 0\n    start_cell = (1, 1)\n\n    for i in range(n):\n        for j in range(m):\n            moves = dfs(i, j, 1)\n            if moves > max_moves:\n                max_moves = moves\n                start_cell = (i + 1, j + 1)\n\n    return start_cell[0], start_cell[1], max_moves\n\nt = int(input())\nfor _ in range(t):\n    input()  # read the blank line\n    n, m = map(int, input().split())\n    board = [input() for _ in range(n)]\n    r, c, d = calculate_moves(board, n, m)\n    print(r, c, d)\n"}}], "scores": [], "pass_results": [false, false, false, true, false, false, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 64, "prompt": "The robot is located on a checkered rectangular board with dimensions n \u00d7 m (n rows and m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nEach cell contains one of the symbols 'L', 'R', 'D' or 'U', denoting the direction the robot will move when it enters that cell \u2014 left, right, down or up, respectively.\n\nThe robot can initiate its movement in any cell. He then moves to the adjacent square in the direction indicated on the current square in one move.\n\n  * If the robot moves beyond the edge of the board, it falls and breaks.\n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore).\n\nRobot can choose any cell as the starting cell. Its goal is to make the maximum number of steps before it breaks or stops.\n\nDecide which square the robot should start its movement from to execute the maximum number of commands possible. A command is considered successfully completed if the robot has moved from the square on which that command was written (it does not matter whether to another square or beyond the edge of the board).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 59}
