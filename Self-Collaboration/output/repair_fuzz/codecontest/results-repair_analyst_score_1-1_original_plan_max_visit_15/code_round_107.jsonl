{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He possesses a one-minute songs, b two-minute songs, and c three-minute songs, and he desires to allocate all songs into two concerts. Every song should be included to exactly one concert.\n\nHe wants to minimize the absolute difference in concert durations, where the duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Aim for an optimal solution that efficiently calculates the desired result.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing. He possesses a one-minute songs, b two-minute songs, and c three-minute songs, and he desires to allocate all songs into two concerts. Every song should be included to exactly one concert. He wants to minimize the absolute difference in concert durations, where the duration of the concert is the sum of durations of all songs in that concert. \nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Aim for an optimal solution that efficiently calculates the desired result.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing and possesses one-minute songs, two-minute songs, and three-minute songs, and he desires to allocate all songs into two concerts to minimize the absolute difference in concert durations, where the duration of the concert is the sum of durations of all songs in that concert. Please help Luntik find the minimal possible difference in minutes between the concerts durations efficiently.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "completions": ["# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible duration of each concert\n    min_duration = (total_duration + 1) // 2\n    max_duration = total_duration // 2 + total_duration % 2\n    \n    # Calculate the minimal possible difference in minutes between the concerts durations\n    min_diff = abs(min_duration - max_duration)\n    \n    # Output the result for each test case\n    print(min_diff)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_duration = min(a, b, c) + min(a - min(a, b, c), b - min(a, b, c), c - min(a, b, c))\n    max_duration = total_duration - min_duration\n    return abs(max_duration - min_duration)\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimum possible difference in minutes between the concerts durations\n    # The difference will be the absolute difference between the two possible concert durations\n    # The minimum difference will be achieved by distributing the songs as evenly as possible\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if (i >> j) & 1:\n                duration_concert1 += (j + 1) * min(a, b, c)\n            else:\n                duration_concert2 += (j + 1) * min(a, b, c)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        # Calculate the duration of each combination\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        # Find the combination that minimizes the absolute difference in concert durations\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the first concert\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                if concert_duration <= half_duration:\n                    min_diff = min(min_diff, half_duration - concert_duration)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = (total_duration + 1) // 2\n    max_duration = total_duration // 2 + total_duration % 2\n    \n    # Calculate the minimal possible difference in minutes between the concerts durations\n    minimal_difference = abs(min_duration - max_duration)\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the minimal possible difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of the songs in each concert and finding the absolute difference\",\n    \"step_4\": \"Find the combination with the minimal possible difference in duration and output it\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: The core concept is to allocate songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in minutes between the concerts durations\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations that depend on previous results.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Determine the minimum and maximum possible duration of each concert\",\n      \"Iterate through all possible combinations of songs in each concert\",\n      \"Calculate the absolute difference in duration between the two concerts\"\n    ],\n    \"major_steps\": [\n      \"Calculate the total duration of all songs\",\n      \"Determine the minimum and maximum possible duration of each concert\",\n      \"Iterate through all possible combinations of songs in each concert\",\n      \"Calculate the absolute difference in duration between the two concerts\",\n      \"Return the minimal possible difference in minutes between the concerts durations\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert durations'\n    Explanation: Refers to the total duration of songs in each concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the need to find the smallest possible difference in concert durations.\n\n# [code logic]\n    The steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally into two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic efficiently calculates the desired result.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible duration of each concert\n    min_duration = (total_duration + 1) // 2\n    max_duration = total_duration // 2 + total_duration % 2\n    \n    # Calculate the minimal possible difference in minutes between the concerts durations\n    min_diff = abs(min_duration - max_duration)\n    \n    # Output the result for each test case\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible duration of each concert\n    min_duration = (total_duration + 1) // 2\n    max_duration = total_duration // 2 + total_duration % 2\n    \n    # Calculate the minimal possible difference in minutes between the concerts durations\n    min_diff = abs(min_duration - max_duration)\n    \n    # Output the result for each test case\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the minimal possible difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of the songs in each concert and finding the absolute difference\",\n    \"step_4\": \"Find the combination with the minimal possible difference in duration and output it\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: The core concept is to allocate songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in minutes between the concerts durations\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations that depend on previous results.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum and maximum possible duration of a concert\",\n    \"Iterate through all possible combinations of songs in each concert\",\n    \"Calculate the absolute difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Determine the minimum and maximum possible duration of a concert by considering all songs in one concert and the rest in the other\",\n    \"step_3\": \"Iterate through all possible combinations of songs in each concert by using a recursive function\",\n    \"step_4\": \"Calculate the absolute difference in duration between the two concerts and keep track of the minimum difference found\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate': means to distribute the songs into two concerts\n    'minimize the absolute difference': means to make the durations of two concerts as close as possible\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest possible difference in minutes between the concerts durations\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are not dependent on each other.\n\n# [edge case] \n    t = 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    t = 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    t = 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally into two concerts, so the difference will be 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_duration = min(a, b, c) + min(a - min(a, b, c), b - min(a, b, c), c - min(a, b, c))\n    max_duration = total_duration - min_duration\n    return abs(max_duration - min_duration)\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_duration = min(a, b, c) + min(a - min(a, b, c), b - min(a, b, c), c - min(a, b, c))\n    max_duration = total_duration - min_duration\n    return abs(max_duration - min_duration)\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: The core concept is to allocate songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest possible difference in minutes between the concerts durations\n\n# [code logic]\n    The steps should be implemented sequentially as they are. There are no steps that need to be implemented simultaneously.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimum possible difference in minutes between the concerts durations\n    # The difference will be the absolute difference between the two possible concert durations\n    # The minimum difference will be achieved by distributing the songs as evenly as possible\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimum possible difference in minutes between the concerts durations\n    # The difference will be the absolute difference between the two possible concert durations\n    # The minimum difference will be achieved by distributing the songs as evenly as possible\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the minimum and maximum possible duration of a concert\",\n    \"Iterate through all possible combinations of songs in each concert\",\n    \"Calculate the absolute difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Determine the minimum and maximum possible duration of a concert by considering all songs in one concert and the rest in the other\",\n    \"step_3\": \"Iterate through all possible combinations of songs in each concert by using a recursive function\",\n    \"step_4\": \"Calculate the absolute difference in duration between the two concerts and keep track of the minimum difference found\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate': means to distribute the songs into two concerts\n    'minimize the absolute difference': means to make the durations of two concerts as close as possible\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest possible difference\n\n# [code logic]\n    The steps in the plan should be implemented step by step as they are not dependent on each other.\n\n# [edge case] \n    t = 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    t = 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    t = 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally into two concerts, so the difference will be 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if (i >> j) & 1:\n                duration_concert1 += (j + 1) * min(a, b, c)\n            else:\n                duration_concert2 += (j + 1) * min(a, b, c)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        for j in range(3):\n            if (i >> j) & 1:\n                duration_concert1 += (j + 1) * min(a, b, c)\n            else:\n                duration_concert2 += (j + 1) * min(a, b, c)\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the duration of each possible combination\",\n    \"Find the combination that minimizes the absolute difference in concert durations\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Generate all possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the duration of each combination\",\n    \"Step 6\": \"Find the combination that minimizes the absolute difference in concert durations\",\n    \"Step 7\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate': means to distribute or assign\n    'concert': refers to a musical performance where songs are performed\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': indicates the smallest possible value\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons to find the optimal solution.\n\n# [edge case] \n    1. 1 1 1\n       Expected output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n       Expected output: 1\n       Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n       Expected output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle the scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        # Calculate the duration of each combination\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        # Find the combination that minimizes the absolute difference in concert durations\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Generate all possible combinations of songs for each concert\n    for i in range(1 << 3):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        # Calculate the duration of each combination\n        for j in range(3):\n            if i & (1 << j):\n                duration_concert1 += (j + 1)\n            else:\n                duration_concert2 += (j + 1)\n        \n        # Find the combination that minimizes the absolute difference in concert durations\n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for each concert by iterating through all possible combinations\",\n    \"step_3\": \"Calculate the duration of each concert for each combination and find the minimum difference in duration between the two concerts\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: The core concept is to allocate songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are not dependent on each other.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all cases.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the first concert\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                if concert_duration <= half_duration:\n                    min_diff = min(min_diff, half_duration - concert_duration)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Initialize the minimum difference as a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs for the first concert\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert_duration = i + 2*j + 3*k\n                if concert_duration <= half_duration:\n                    min_diff = min(min_diff, half_duration - concert_duration)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the minimal possible difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the combination with the minimal possible difference in duration and output the result\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert durations'\n    Explanation: The total duration of songs allocated to each concert to minimize the absolute difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented step by step as they are not dependent on each other.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a minimal possible difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should efficiently handle all scenarios.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of all songs\",\n      \"Determine the minimum and maximum possible durations for each concert\",\n      \"Iterate through all possible combinations of songs for each concert\",\n      \"Calculate the absolute difference in durations for each combination\",\n      \"Find the combination with the minimal absolute difference\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case:\",\n      \"   - Read the number of one-minute, two-minute, and three-minute songs\",\n      \"   - Calculate the total duration of all songs\",\n      \"   - Determine the minimum and maximum possible durations for each concert\",\n      \"   - Iterate through all possible combinations of songs for each concert\",\n      \"   - Calculate the absolute difference in durations for each combination\",\n      \"   - Find the combination with the minimal absolute difference\",\n      \"   - Print the minimal possible difference in minutes between the concerts durations\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert durations'\n    Explanation: Refers to the total duration of songs in each concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The major steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = (total_duration + 1) // 2\n    max_duration = total_duration // 2 + total_duration % 2\n    \n    # Calculate the minimal possible difference in minutes between the concerts durations\n    minimal_difference = abs(min_duration - max_duration)\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum possible durations for each concert\n    min_duration = (total_duration + 1) // 2\n    max_duration = total_duration // 2 + total_duration % 2\n    \n    # Calculate the minimal possible difference in minutes between the concerts durations\n    minimal_difference = abs(min_duration - max_duration)\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(minimal_difference)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible combinations of songs for the two concerts\",\n    \"Calculate the difference in duration between the two concerts for each combination\",\n    \"Find the combination with the minimal possible difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for the two concerts using a recursive function\",\n    \"step_3\": \"Calculate the difference in duration between the two concerts for each combination by summing the durations of the songs in each concert and finding the absolute difference\",\n    \"step_4\": \"Find the combination with the minimal possible difference in duration and output it\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in concert durations'\n    Explanation: The core concept is to allocate songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in minutes between the concerts durations\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations that depend on previous results.\n\n# [edge case] \n    1. 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    2. 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    3. 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}], "scores": [], "pass_results": [true, true, false, false, false, false, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 107, "prompt": "Luntik has decided to try singing. He possesses a one-minute songs, b two-minute songs, and c three-minute songs, and he desires to allocate all songs into two concerts. Every song should be included to exactly one concert.\n\nHe wants to minimize the absolute difference in concert durations, where the duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Aim for an optimal solution that efficiently calculates the desired result.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "save_node": false, "parent_index": 72}
