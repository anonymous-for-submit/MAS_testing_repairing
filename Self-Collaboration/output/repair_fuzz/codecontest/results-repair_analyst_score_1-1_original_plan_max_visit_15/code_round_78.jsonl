{"name": "1598_D. Training Session", "description": "Monocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.\n\nMonocarp has n problems that none of his students have seen yet. The i-th problem has a topic a_i (an integer from 1 to n) and a difficulty b_i (an integer from 1 to n). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.\n\nMonocarp decided to select exactly 3 problems from n problems for the problemset. The problems should satisfy at least one of two conditions (possibly, both):\n\n  * the topics of all three selected problems are different; \n  * the difficulties of all three selected problems are different. \n\n\n\nYour task is to determine the number of ways to select three problems for the problemset.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.", "tags": ["combinatorics", "data structures", "geometry", "implementation", "math"], "difficulty": 10, "id": 1598, "sample_io": [{"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}], "test_list": [{"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 3\n4 4\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n0\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n0\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 2\n1 4\n1 2\n5 1\n", "output": ["2\n6\n"]}, {"input": "2\n4\n2 4\n3 4\n2 3\n3 3\n5\n2 5\n2 4\n3 2\n4 2\n5 1\n", "output": ["0\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 4\n1 4\n2 2\n5 1\n", "output": ["2\n7\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 2\n3 3\n3 2\n4 2\n", "output": ["3\n6\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n0\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n0\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n1 1\n5 1\n", "output": ["4\n6\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 1\n4 5\n4 2\n4 1\n", "output": ["2\n4\n"]}, {"input": "2\n4\n4 4\n1 4\n3 2\n3 3\n0\n1 4\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n0\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 5\n1 1\n5 1\n", "output": ["3\n7\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 3\n4 3\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n2 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n4 3\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 4\n2 3\n4 2\n5 2\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n4 4\n3 3\n4 3\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n1 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n1 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n4 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 3\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 3\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 1\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 3\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n1 2\n2 3\n5\n1 5\n2 4\n3 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 4\n3 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 1\n2 3\n5\n2 5\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 4\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n2 5\n2 3\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 1\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 1\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 3\n3 3\n4 2\n2 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n2 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 4\n3 4\n2 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n4 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 1\n2 1\n2 3\n5\n1 5\n4 4\n3 3\n4 3\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n4 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n2 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 2\n4 3\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n1 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 2\n4 3\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 3\n1 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n2 3\n3 4\n4 3\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 5\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n1 2\n2 3\n5\n1 5\n2 4\n4 3\n4 1\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n1 3\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 3\n3 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 4\n1 4\n4 2\n5 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n2 5\n3 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n3 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 3\n3 3\n4 2\n1 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n3 3\n2 3\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n3 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n2 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n4 4\n3 2\n4 3\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 3\n1 4\n3 5\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 3\n3 2\n2 2\n5 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n2 4\n2 2\n2 3\n5\n1 1\n2 2\n1 4\n4 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n2 5\n3 4\n2 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n2 1\n4 2\n4 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n1 5\n3 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 5\n2 3\n4 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n1 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 2\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 4\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 2\n", "output": ["3\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 3\n3 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n3 1\n2 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n4 4\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 3\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 5\n3 3\n4 2\n1 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n4 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 5\n2 4\n3 1\n4 2\n4 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n1 2\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 1\n5\n2 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n2 1\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 1\n1 2\n2 3\n5\n1 5\n2 4\n3 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n4 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 4\n5 3\n4 2\n5 2\n", "output": ["4\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 1\n2 3\n5\n2 5\n1 4\n3 5\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n3 4\n1 2\n2 2\n2 3\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 1\n5\n2 5\n2 4\n2 1\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n4 1\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 4\n2 4\n3 3\n4 2\n4 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n3 2\n2 3\n5\n1 5\n1 3\n3 3\n4 2\n2 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n4 1\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n4 3\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n2 3\n5\n2 5\n2 4\n2 3\n1 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 4\n5\n1 5\n2 4\n1 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 3\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n5 5\n2 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n4 3\n4 1\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n1 1\n2 2\n2 3\n5\n2 5\n2 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 3\n3 2\n4 4\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n2 2\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n4 1\n1 3\n5\n1 5\n2 1\n3 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n2 5\n2 4\n3 3\n3 2\n4 2\n", "output": ["3\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 3\n1 3\n5\n1 5\n2 4\n5 5\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n1 4\n3 5\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n1 1\n2 2\n1 4\n4 2\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n2 1\n3 4\n2 3\n4 2\n5 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n3 4\n1 4\n2 2\n3 3\n5\n1 5\n2 4\n2 1\n4 2\n4 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 1\n1 3\n5\n1 5\n2 1\n1 2\n4 1\n5 2\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n4 5\n2 3\n4 2\n5 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n4 4\n5 2\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n2 3\n3 3\n4 4\n1 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n2 3\n5\n1 5\n3 4\n3 1\n3 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n3 1\n1 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 2\n4 4\n5\n1 5\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n4 2\n2 3\n5\n1 5\n1 4\n3 3\n4 3\n4 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n4 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 1\n5\n2 5\n2 3\n3 3\n4 2\n2 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 1\n3 1\n2 2\n2 3\n5\n1 2\n2 4\n5 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 1\n1 2\n2 1\n5\n1 5\n2 4\n3 3\n4 1\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n3 3\n5\n2 5\n2 4\n3 2\n4 2\n3 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n3 4\n1 2\n2 2\n2 3\n5\n2 5\n2 4\n2 2\n4 2\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 1\n3 3\n1 1\n5 1\n", "output": ["3\n8\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n1 3\n5\n1 4\n2 4\n3 2\n4 2\n4 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n4 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n5 3\n2 1\n5 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n2 4\n4 3\n4 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n3 3\n5\n2 5\n2 4\n2 3\n1 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 2\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 2\n2 4\n1 5\n2 2\n5 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n4 4\n3 3\n4 2\n2 3\n5\n1 5\n2 4\n4 3\n4 1\n5 1\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n1 1\n2 2\n2 3\n5\n2 5\n1 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n4 1\n1 3\n5\n1 5\n2 1\n3 3\n3 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 5\n1 1\n3 5\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n1 2\n2 2\n1 4\n4 2\n5 1\n", "output": ["4\n8\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n1 3\n5\n1 5\n2 4\n3 3\n5 4\n5 2\n", "output": ["4\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n1 2\n2 3\n5\n1 5\n2 3\n3 3\n4 4\n1 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n1 1\n1 3\n5\n1 5\n2 4\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 2\n4 4\n5\n1 5\n4 4\n3 3\n4 2\n4 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n3 3\n5\n1 4\n2 4\n3 4\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n1 4\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n2 2\n2 4\n3 3\n4 4\n4 1\n", "output": ["2\n8\n"]}, {"input": "2\n4\n2 4\n1 1\n2 2\n2 3\n5\n1 5\n1 4\n2 3\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n4 1\n1 3\n5\n1 5\n2 1\n3 3\n3 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 1\n3 5\n4 2\n4 1\n", "output": ["2\n7\n"]}, {"input": "2\n4\n2 4\n3 4\n1 2\n2 3\n5\n2 5\n2 3\n3 3\n4 4\n1 1\n", "output": ["3\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n1 1\n1 3\n5\n1 5\n2 4\n3 4\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n3 3\n5\n1 4\n2 4\n3 5\n4 2\n5 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n4 4\n1 4\n2 2\n3 3\n5\n1 4\n2 4\n3 5\n4 2\n4 1\n", "output": ["4\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 3\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 1\n4 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n4 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 2\n2 4\n3 3\n4 2\n4 1\n", "output": ["2\n9\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n4 4\n2 3\n4 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 3\n2 2\n2 3\n5\n1 5\n2 4\n3 3\n1 2\n5 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n1 2\n2 3\n5\n1 5\n2 3\n3 3\n4 2\n5 1\n", "output": ["3\n10\n"]}, {"input": "2\n4\n2 4\n3 4\n2 2\n2 3\n5\n1 5\n1 4\n3 3\n4 2\n2 1\n", "output": ["2\n10\n"]}, {"input": "2\n4\n4 4\n3 4\n2 2\n2 3\n5\n2 5\n2 4\n3 3\n4 2\n1 1\n", "output": ["4\n10\n"]}], "task_id": "codecontest/61", "repair_prompt": ["Monocarp is eager to make sure the chosen problems offer a good balance of challenge and opportunity for the students to learn.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp wants to ensure that the chosen problems provide a fair mix of difficulty levels and learning potential for the students. This balance is crucial for fostering a productive learning environment.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp is eager to make sure the chosen problems offer a good balance of challenge and opportunity for the students to learn.\n\nMonocarp is eager to make sure the chosen problems offer a good balance of challenge and opportunity for the students to learn.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_ways_to_select_problems(testcases):\n    for _ in range(testcases):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            problems.append(list(map(int, input().split())))\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) and (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\n# Parse the input to extract the number of testcases\ntestcases = int(input())\n\n# Calculate the number of ways to select three training problems for each testcase\ncalculate_ways_to_select_problems(testcases)\n\nmain()", "completions": ["def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        topics = {}\n        difficulties = {}\n        \n        for i in range(n):\n            a, b = map(int, input().split())\n            if a in topics:\n                topics[a] += 1\n            else:\n                topics[a] = 1\n                \n            if b in difficulties:\n                difficulties[b] += 1\n            else:\n                difficulties[b] = 1\n        \n        total_ways = 0\n        for i in range(n):\n            a, b = map(int, input().split())\n            total_ways += (n - topics[a]) * (n - difficulties[b])\n        \n        print(total_ways // 2)  # Divide by 2 as each combination is counted twice\n\ncount_ways_to_select_problems()\n\nmain()", "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            topic, difficulty = map(int, input().split())\n            problems.append((topic, difficulty))\n        \n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    topics = set([problems[i][0], problems[j][0], problems[k][0]])\n                    difficulties = set([problems[i][1], problems[j][1], problems[k][1]])\n                    if len(topics) == 3 or len(difficulties) == 3:\n                        ways += 1\n        \n        print(ways)\n\ncount_ways_to_select_problems()\n\nmain()", "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            topic, difficulty = map(int, input().split())\n            problems.append((topic, difficulty))\n        \n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] != problems[j][0] and problems[j][0] != problems[k][0] and problems[i][0] != problems[k][0]) or \\\n                       (problems[i][1] != problems[j][1] and problems[j][1] != problems[k][1] and problems[i][1] != problems[k][1]):\n                        ways += 1\n        \n        print(ways)\n\ncount_ways_to_select_problems()\n\nmain()", "def calculate_ways_to_select_problems():\n    t = int(input())  # Read the number of testcases\n    for _ in range(t):\n        n = int(input())  # Read the number of problems\n        problems = [list(map(int, input().split())) for _ in range(n)]  # Read the topics and difficulties of each problem\n        \n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) or (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        ways += 1\n        \n        print(ways)\n\ncalculate_ways_to_select_problems()\n\nmain()", "def calculate_ways_to_select_problems():\n    t = int(input())  # Read the number of testcases\n    for _ in range(t):\n        n = int(input())  # Read the number of problems\n        problems = [list(map(int, input().split())) for _ in range(n)]  # Read the topics and difficulties of each problem\n        \n        # Calculate the number of ways to select three training problems that meet the requirements\n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[i][0] == problems[k][0] or problems[j][0] == problems[k][0]) or (problems[i][1] == problems[j][1] or problems[i][1] == problems[k][1] or problems[j][1] == problems[k][1]):\n                        ways += 1\n        \n        print(ways)  # Output the result for each testcase\n\ncalculate_ways_to_select_problems()\n\nmain()", "from itertools import combinations\n\ndef count_valid_combinations(testcases):\n    def meets_requirements(combination):\n        topics = set()\n        difficulties = set()\n        for problem in combination:\n            topics.add(problem[0])\n            difficulties.add(problem[1])\n        return len(topics) == 3 or len(difficulties) == 3\n    \n    total_ways = 0\n    for problems in testcases:\n        valid_combinations = 0\n        for combination in combinations(problems, 3):\n            if meets_requirements(combination):\n                valid_combinations += 1\n        total_ways += valid_combinations\n    return total_ways\n\nif __name__ == \"__main__\":\n    t = int(input())\n    testcases = []\n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n        testcases.append(problems)\n    \n    result = count_valid_combinations(testcases)\n    print(result)\n\nmain()", "def calculate_ways_to_select_problems():\n    t = int(input())  # Read the number of testcases\n    for _ in range(t):\n        n = int(input())  # Read the number of problems\n        problems = [list(map(int, input().split())) for _ in range(n)]  # Read the topics and difficulties of each problem\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) or (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\ncalculate_ways_to_select_problems()\n\nmain()", "def calculate_ways_to_select_problems():\n    t = int(input())  # Number of testcases\n    for _ in range(t):\n        n = int(input())  # Number of problems\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n\n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] == problems[k][0]) or \\\n                       (problems[i][1] == problems[j][1] == problems[k][1]):\n                        ways += 1\n\n        print(ways)\n\ncalculate_ways_to_select_problems()\n\nmain()", "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] == problems[k][0]) or (problems[i][1] == problems[j][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\ncount_ways_to_select_problems()\n\nmain()", "def calculate_ways_to_select_problems(testcases):\n    for _ in range(testcases):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            problems.append(list(map(int, input().split())))\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) and (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\n# Parse the input to extract the number of testcases\ntestcases = int(input())\n\n# Calculate the number of ways to select three training problems for each testcase\ncalculate_ways_to_select_problems(testcases)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"For each testcase, calculate the number of ways to select three training problems that meet the requirements\",\n    \"Output the result for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"step_2\": \"For each testcase, iterate through the list of problems and check if there are any sets of three problems that meet the requirements\",\n    \"step_3\": \"Count the number of ways to select three training problems that meet the requirements\",\n    \"step_4\": \"Output the result for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'balance of challenge and opportunity'\n    Explanation: The requirement emphasizes the importance of selecting problems that provide both challenge and learning opportunities for students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'good': indicates the quality of balance needed in the selected problems\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, calculating ways to select problems, and outputting the result.\n\n# [edge case] \n    Input\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output\n    1\n    Explanation: There is only one set of three problems available, so the number of ways is 1.\n    \n    Input\n    1\n    4\n    1 1\n    2 2\n    3 3\n    4 4\n    Output\n    4\n    Explanation: All four problems provide a good balance, so there are 4 ways to select three problems.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to calculate the number of ways to select problems can handle different scenarios effectively.", "Round_0": {"code": "def calculate_ways_to_select_problems(testcases):\n    for _ in range(testcases):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            problems.append(list(map(int, input().split()))\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) and (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\n# Parse the input to extract the number of testcases\ntestcases = int(input())\n\n# Calculate the number of ways to select three training problems for each testcase\ncalculate_ways_to_select_problems(testcases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 8)"}, "Round_1": {"code": "def calculate_ways_to_select_problems(testcases):\n    for _ in range(testcases):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            problems.append(list(map(int, input().split())))\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) and (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\n# Parse the input to extract the number of testcases\ntestcases = int(input())\n\n# Calculate the number of ways to select three training problems for each testcase\ncalculate_ways_to_select_problems(testcases)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"For each testcase, determine the number of ways to select three training problems that meet the requirements\",\n    \"Output the number of ways for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the input to get the number of testcases\",\n    \"Step 2\": \"For each testcase, read the number of problems and their topics and difficulties\",\n    \"Step 3\": \"Determine the number of ways to select three training problems that meet the requirements\",\n    \"Step 4\": \"Output the number of ways for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'fair mix of difficulty levels and learning potential'\n    Explanation: The requirement emphasizes the importance of balancing difficulty levels and learning potential in selecting problems for students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'crucial': emphasizes the importance of balancing difficulty levels and learning potential\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve reading input, processing data, and outputting results.\n\n# [edge case] \n    Input\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output\n    1\n    Explanation: There is only one way to select three training problems as all problems have different topics and difficulties.\n\n    Input\n    1\n    3\n    1 1\n    1 2\n    1 3\n    Output\n    0\n    Explanation: It is not possible to select three training problems that meet the requirements as all problems have the same topic.\n\n    Input\n    1\n    3\n    1 1\n    2 2\n    2 3\n    Output\n    0\n    Explanation: It is not possible to select three training problems that meet the requirements as all problems have the same difficulty.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n\nNO", "Round_0": {"code": "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        topics = {}\n        difficulties = {}\n        \n        for i in range(n):\n            a, b = map(int, input().split())\n            if a in topics:\n                topics[a] += 1\n            else:\n                topics[a] = 1\n                \n            if b in difficulties:\n                difficulties[b] += 1\n            else:\n                difficulties[b] = 1\n        \n        total_ways = 0\n        for i in range(n):\n            a, b = map(int, input().split())\n            total_ways += (n - topics[a]) * (n - difficulties[b])\n        \n        print(total_ways // 2)  # Divide by 2 as each combination is counted twice\n\ncount_ways_to_select_problems()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 35)"}, "Round_1": {"code": "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        topics = {}\n        difficulties = {}\n        \n        for i in range(n):\n            a, b = map(int, input().split())\n            if a in topics:\n                topics[a] += 1\n            else:\n                topics[a] = 1\n                \n            if b in difficulties:\n                difficulties[b] += 1\n            else:\n                difficulties[b] = 1\n        \n        total_ways = 0\n        for i in range(n):\n            a, b = map(int, input().split())\n            total_ways += (n - topics[a]) * (n - difficulties[b])\n        \n        print(total_ways // 2)  # Divide by 2 as each combination is counted twice\n\ncount_ways_to_select_problems()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"For each testcase, determine the number of ways to select three training problems that meet the requirements\",\n    \"Output the number of ways for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of testcases\",\n    \"Step 2\": \"For each testcase, parse the input to extract the number of problems and their topics and difficulties\",\n    \"Step 3\": \"Determine the number of ways to select three training problems that meet the requirements\",\n    \"Step 4\": \"Output the number of ways for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'fair mix of difficulty levels and learning potential'\n    Explanation: The requirement emphasizes the importance of balancing difficulty levels and learning potential in selecting problems for students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, determining ways to select problems, and outputting the results.\n\n# [edge case] \n    Edge Case 1:\n    Input:\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    1\n    Explanation: In this case, there is only one way to select three training problems as all problems have unique topics and difficulties.\n\n    Edge Case 2:\n    Input:\n    1\n    4\n    1 1\n    2 2\n    3 3\n    4 4\n    Output:\n    4\n    Explanation: Each problem has a unique topic and difficulty, so there are four ways to select three training problems.\n\n    Edge Case 3:\n    Input:\n    1\n    5\n    1 1\n    2 2\n    3 3\n    4 4\n    5 5\n    Output:\n    10\n    Explanation: All problems have unique topics and difficulties, providing ten ways to select three training problems.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for determining the number of ways to select problems can handle unique topics and difficulties effectively.", "Round_0": {"code": "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            topic, difficulty = map(int, input().split())\n            problems.append((topic, difficulty))\n        \n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    topics = set([problems[i][0], problems[j][0], problems[k][0]])\n                    difficulties = set([problems[i][1], problems[j][1], problems[k][1]])\n                    if len(topics) == 3 or len(difficulties) == 3:\n                        ways += 1\n        \n        print(ways)\n\ncount_ways_to_select_problems()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 29)"}, "Round_1": {"code": "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            topic, difficulty = map(int, input().split())\n            problems.append((topic, difficulty))\n        \n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    topics = set([problems[i][0], problems[j][0], problems[k][0]])\n                    difficulties = set([problems[i][1], problems[j][1], problems[k][1]])\n                    if len(topics) == 3 or len(difficulties) == 3:\n                        ways += 1\n        \n        print(ways)\n\ncount_ways_to_select_problems()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"For each testcase, determine the number of ways to select three training problems that meet the requirements\",\n    \"Output the number of ways for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of testcases\",\n    \"Step 2\": \"For each testcase, parse the input to extract the number of problems and their topics and difficulties\",\n    \"Step 3\": \"Determine the number of ways to select three training problems that meet the requirements\",\n    \"Step 4\": \"Output the number of ways for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'fair mix of difficulty levels and learning potential'\n    Explanation: The requirement emphasizes the importance of balancing difficulty levels and learning potential in selecting problems for students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, determining ways to select problems, and outputting the results.\n\n# [edge case] \n    Edge Case 1:\n    Input:\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    1\n    Explanation: There is only one way to select three training problems with different topics and difficulties.\n    \n    Edge Case 2:\n    Input:\n    1\n    3\n    1 1\n    1 2\n    1 3\n    Output:\n    0\n    Explanation: It's not possible to select three training problems with different topics and difficulties.\n    \n    Edge Case 3:\n    Input:\n    1\n    4\n    1 1\n    2 2\n    3 3\n    4 4\n    Output:\n    4\n    Explanation: There are four ways to select three training problems with different topics and difficulties.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n\nNO", "Round_0": {"code": "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            topic, difficulty = map(int, input().split())\n            problems.append((topic, difficulty))\n        \n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] != problems[j][0] and problems[j][0] != problems[k][0] and problems[i][0] != problems[k][0]) or \\\n                       (problems[i][1] != problems[j][1] and problems[j][1] != problems[k][1] and problems[i][1] != problems[k][1]):\n                        ways += 1\n        \n        print(ways)\n\ncount_ways_to_select_problems()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 28)"}, "Round_1": {"code": "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            topic, difficulty = map(int, input().split())\n            problems.append((topic, difficulty))\n        \n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] != problems[j][0] and problems[j][0] != problems[k][0] and problems[i][0] != problems[k][0]) or \\\n                       (problems[i][1] != problems[j][1] and problems[j][1] != problems[k][1] and problems[i][1] != problems[k][1]):\n                        ways += 1\n        \n        print(ways)\n\ncount_ways_to_select_problems()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"For each testcase, calculate the number of ways to select three training problems that meet the requirements\",\n    \"Output the result for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases from input\",\n    \"Step 2\": \"For each testcase, read the number of problems and their topics and difficulties\",\n    \"Step 3\": \"Calculate the number of ways to select three training problems that meet the requirements\",\n    \"Step 4\": \"Output the result for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'balance of challenge and opportunity'\n    Explanation: The requirement emphasizes the importance of selecting problems that provide both challenge and learning opportunities for students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve reading input, calculating, and outputting results.\n\n# [edge case] \n    Input:\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    1\n    Explanation: In this edge case, all problems have unique topics and difficulties, so there is only one way to select three training problems.\n\n    Input:\n    2\n    3\n    1 1\n    2 2\n    3 3\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    3\n    3\n    Explanation: In this edge case, each testcase has unique topics and difficulties, allowing for three ways to select three training problems in each testcase.\n\n    Input:\n    1\n    4\n    1 1\n    2 2\n    3 3\n    4 4\n    Output:\n    4\n    Explanation: In this edge case, all problems have unique topics and difficulties, providing four ways to select three training problems.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic should handle unique topics and difficulties appropriately.", "Round_0": {"code": "def calculate_ways_to_select_problems():\n    t = int(input())  # Read the number of testcases\n    for _ in range(t):\n        n = int(input())  # Read the number of problems\n        problems = [list(map(int, input().split())) for _ in range(n)]  # Read the topics and difficulties of each problem\n        \n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) or (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        ways += 1\n        \n        print(ways)\n\ncalculate_ways_to_select_problems()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "def calculate_ways_to_select_problems():\n    t = int(input())  # Read the number of testcases\n    for _ in range(t):\n        n = int(input())  # Read the number of problems\n        problems = [list(map(int, input().split())) for _ in range(n)]  # Read the topics and difficulties of each problem\n        \n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) or (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        ways += 1\n        \n        print(ways)\n\ncalculate_ways_to_select_problems()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"For each testcase, calculate the number of ways to select three training problems that meet the requirements\",\n    \"Output the result for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases from input\",\n    \"Step 2\": \"For each testcase, read the number of problems and their topics and difficulties\",\n    \"Step 3\": \"Calculate the number of ways to select three training problems that meet the requirements\",\n    \"Step 4\": \"Output the result for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'balance of challenge and opportunity'\n    Explanation: The requirement emphasizes the importance of selecting problems that offer both challenge and learning opportunities for students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'good': indicates the quality of the balance between challenge and opportunity\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve reading input, calculating, and outputting results.\n\n# [edge case] \n    Edge Case 1:\n    Input:\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    1\n    Explanation: With only 3 problems, there is only one way to select three training problems.\n    \n    Edge Case 2:\n    Input:\n    1\n    4\n    1 1\n    2 2\n    3 3\n    4 4\n    Output:\n    4\n    Explanation: All problems have different topics and difficulties, so there are 4 ways to select three training problems.\n    \n    Edge Case 3:\n    Input:\n    2\n    3\n    1 1\n    2 2\n    3 3\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    6\n    6\n    Explanation: Each testcase has the same set of problems, so the number of ways is the same for both testcases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for calculating the number of ways to select three training problems covers all scenarios.", "Round_0": {"code": "def calculate_ways_to_select_problems():\n    t = int(input())  # Read the number of testcases\n    for _ in range(t):\n        n = int(input())  # Read the number of problems\n        problems = [list(map(int, input().split())) for _ in range(n)]  # Read the topics and difficulties of each problem\n        \n        # Calculate the number of ways to select three training problems that meet the requirements\n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[i][0] == problems[k][0] or problems[j][0] == problems[k][0]) or (problems[i][1] == problems[j][1] or problems[i][1] == problems[k][1] or problems[j][1] == problems[k][1]):\n                        ways += 1\n        \n        print(ways)  # Output the result for each testcase\n\ncalculate_ways_to_select_problems()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 24)"}, "Round_1": {"code": "def calculate_ways_to_select_problems():\n    t = int(input())  # Read the number of testcases\n    for _ in range(t):\n        n = int(input())  # Read the number of problems\n        problems = [list(map(int, input().split())) for _ in range(n)]  # Read the topics and difficulties of each problem\n        \n        # Calculate the number of ways to select three training problems that meet the requirements\n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[i][0] == problems[k][0] or problems[j][0] == problems[k][0]) or (problems[i][1] == problems[j][1] or problems[i][1] == problems[k][1] or problems[j][1] == problems[k][1]):\n                        ways += 1\n        \n        print(ways)  # Output the result for each testcase\n\ncalculate_ways_to_select_problems()\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of testcases and the details of each testcase\",\n      \"For each testcase, extract the number of problems and their topics and difficulties\",\n      \"Identify all possible combinations of 3 problems that meet the requirements\",\n      \"Count the number of valid combinations\"\n    ],\n    \"major_steps\": [\n      \"Read the input from standard input\",\n      \"Parse the input to extract the necessary information\",\n      \"Iterate through each testcase and extract the problem details\",\n      \"Generate all possible combinations of 3 problems for each testcase\",\n      \"Check if each combination meets the requirements\",\n      \"Count the number of valid combinations\",\n      \"Output the result to standard output\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'balance of challenge and opportunity'\n    Explanation: The core concept here is to select problems that offer both challenge and learning opportunities to the students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'good': Indicates the quality of balance required in the problems.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve reading input, parsing information, iterating through test cases, generating combinations, checking requirements, counting valid combinations, and outputting the result.\n\n# [edge case] \n    Input:\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    1\n    Explanation: In this edge case, all problems have unique topics and difficulties, so there is only one way to select three problems.\n\n    Input:\n    1\n    3\n    1 1\n    1 2\n    1 3\n    Output:\n    0\n    Explanation: In this edge case, all problems have the same topic but different difficulties, making it impossible to select three problems that meet the requirements.\n\n    Input:\n    1\n    3\n    1 1\n    2 2\n    2 2\n    Output:\n    1\n    Explanation: In this edge case, there is one way to select three problems by choosing the two problems with the same topic and difficulty.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "from itertools import combinations\n\ndef count_valid_combinations(testcases):\n    def meets_requirements(combination):\n        topics = set()\n        difficulties = set()\n        for problem in combination:\n            topics.add(problem[0])\n            difficulties.add(problem[1])\n        return len(topics) == 3 or len(difficulties) == 3\n    \n    total_ways = 0\n    for problems in testcases:\n        valid_combinations = 0\n        for combination in combinations(problems, 3):\n            if meets_requirements(combination):\n                valid_combinations += 1\n        total_ways += valid_combinations\n    return total_ways\n\nif __name__ == \"__main__\":\n    t = int(input())\n    testcases = []\n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n        testcases.append(problems)\n    \n    result = count_valid_combinations(testcases)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 40)"}, "Round_1": {"code": "from itertools import combinations\n\ndef count_valid_combinations(testcases):\n    def meets_requirements(combination):\n        topics = set()\n        difficulties = set()\n        for problem in combination:\n            topics.add(problem[0])\n            difficulties.add(problem[1])\n        return len(topics) == 3 or len(difficulties) == 3\n    \n    total_ways = 0\n    for problems in testcases:\n        valid_combinations = 0\n        for combination in combinations(problems, 3):\n            if meets_requirements(combination):\n                valid_combinations += 1\n        total_ways += valid_combinations\n    return total_ways\n\nif __name__ == \"__main__\":\n    t = int(input())\n    testcases = []\n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n        testcases.append(problems)\n    \n    result = count_valid_combinations(testcases)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"For each testcase, calculate the number of ways to select three training problems that meet the requirements\",\n    \"Output the result for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases from input\",\n    \"Step 2\": \"For each testcase, read the number of problems and their topics and difficulties\",\n    \"Step 3\": \"Calculate the number of ways to select three training problems that meet the requirements\",\n    \"Step 4\": \"Output the result for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'balance of challenge and opportunity'\n    Explanation: The requirement emphasizes the need for problems that offer both challenge and learning opportunities for students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'good': implies a balance between challenge and opportunity for learning\n\n# [code logic]\n    The steps should be implemented sequentially as they involve reading input, calculating, and outputting results.\n\n# [edge case] \n    Input:\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    1\n    Explanation: With only 3 problems, there is only one way to select three training problems.\n\n    Input:\n    1\n    4\n    1 1\n    2 2\n    3 3\n    4 4\n    Output:\n    4\n    Explanation: All combinations of 3 problems can be selected.\n\n    Input:\n    2\n    3\n    1 1\n    2 2\n    3 3\n    4\n    1 1\n    2 2\n    3 3\n    4 4\n    Output:\n    1\n    4\n    Explanation: Different scenarios with varying numbers of problems and test cases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for selecting three training problems can handle different input scenarios effectively.", "Round_0": {"code": "def calculate_ways_to_select_problems():\n    t = int(input())  # Read the number of testcases\n    for _ in range(t):\n        n = int(input())  # Read the number of problems\n        problems = [list(map(int, input().split())) for _ in range(n)]  # Read the topics and difficulties of each problem\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) or (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\ncalculate_ways_to_select_problems()\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "def calculate_ways_to_select_problems():\n    t = int(input())  # Read the number of testcases\n    for _ in range(t):\n        n = int(input())  # Read the number of problems\n        problems = [list(map(int, input().split())) for _ in range(n)]  # Read the topics and difficulties of each problem\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) or (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\ncalculate_ways_to_select_problems()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"For each testcase, calculate the number of ways to select three training problems that meet the requirements\",\n    \"Output the result for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the input to get the number of testcases\",\n    \"Step 2\": \"For each testcase, read the number of problems and their topics and difficulties\",\n    \"Step 3\": \"Calculate the number of ways to select three training problems that meet the requirements\",\n    \"Step 4\": \"Output the result for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'balance of challenge and opportunity'\n    Explanation: The requirement emphasizes the importance of selecting problems that provide both challenge and learning opportunities for students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'good': implies that the balance of challenge and opportunity should be favorable for learning\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve reading input, calculating, and outputting results.\n\n# [edge case] \n    Edge Case 1:\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    0\n    Explanation: Since all problems have the same topic and difficulty, it's not possible to select three problems that meet the requirements.\n\n    Edge Case 2:\n    1\n    4\n    1 1\n    2 2\n    3 3\n    4 4\n    Output:\n    4\n    Explanation: In this case, all problems have different topics and difficulties, allowing for four possible ways to select three training problems.\n\n    Edge Case 3:\n    2\n    3\n    1 1\n    2 2\n    3 3\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    6\n    Explanation: Each testcase provides three unique problems, and there are two testcases, resulting in a total of six ways to select three training problems.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for selecting three training problems can handle various scenarios.", "Round_0": {"code": "def calculate_ways_to_select_problems():\n    t = int(input())  # Number of testcases\n    for _ in range(t):\n        n = int(input())  # Number of problems\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n\n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] == problems[k][0]) or \\\n                       (problems[i][1] == problems[j][1] == problems[k][1]):\n                        ways += 1\n\n        print(ways)\n\ncalculate_ways_to_select_problems()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_ways_to_select_problems():\n    t = int(input())  # Number of testcases\n    for _ in range(t):\n        n = int(input())  # Number of problems\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n\n        ways = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] == problems[k][0]) or \\\n                       (problems[i][1] == problems[j][1] == problems[k][1]):\n                        ways += 1\n\n        print(ways)\n\ncalculate_ways_to_select_problems()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"For each testcase, calculate the number of ways to select three training problems that meet the requirements\",\n    \"Output the result for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases from input\",\n    \"Step 2\": \"For each testcase, read the number of problems and their topics and difficulties\",\n    \"Step 3\": \"Calculate the number of ways to select three training problems that meet the requirements\",\n    \"Step 4\": \"Output the result for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'balance of challenge and opportunity'\n    Explanation: The requirement emphasizes the importance of selecting problems that offer both challenge and learning opportunities for students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'good': indicates the quality of the balance between challenge and opportunity\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve reading input, calculating, and outputting results.\n\n# [edge case] \n    Edge Case 1:\n    Input:\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output:\n    1\n    Explanation: With only three problems, there is only one way to select three training problems.\n    \n    Edge Case 2:\n    Input:\n    1\n    4\n    1 1\n    2 2\n    3 3\n    4 4\n    Output:\n    4\n    Explanation: All problems have different topics and difficulties, so there are four ways to select three training problems.\n    \n    Edge Case 3:\n    Input:\n    1\n    5\n    1 1\n    1 2\n    2 1\n    2 2\n    3 3\n    Output:\n    0\n    Explanation: There are no three problems that meet the requirements.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n\nNO", "Round_0": {"code": "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] == problems[k][0]) or (problems[i][1] == problems[j][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\ncount_ways_to_select_problems()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def count_ways_to_select_problems():\n    t = int(input())\n    \n    for _ in range(t):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            a, b = map(int, input().split())\n            problems.append((a, b))\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] == problems[k][0]) or (problems[i][1] == problems[j][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\ncount_ways_to_select_problems()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"For each testcase, calculate the number of ways to select three training problems that meet the requirements\",\n    \"Output the result for each testcase\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of testcases and the details of each testcase\",\n    \"step_2\": \"For each testcase, iterate through the list of problems and check if there are any sets of three problems that meet the requirements\",\n    \"step_3\": \"Count the number of ways to select three training problems that meet the requirements\",\n    \"step_4\": \"Output the result for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'balance of challenge and opportunity'\n    Explanation: The requirement emphasizes the importance of selecting problems that provide both challenge and learning opportunities for students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'good': indicates the quality of balance needed in the selected problems\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, calculating ways to select problems, and outputting the result.\n\n# [edge case] \n    Input\n    1\n    3\n    1 1\n    2 2\n    3 3\n    Output\n    1\n    Explanation: There is only one set of three problems available, so the number of ways is 1.\n    \n    Input\n    1\n    4\n    1 1\n    2 2\n    3 3\n    4 4\n    Output\n    4\n    Explanation: All four problems provide a good balance, so there are 4 ways to select three problems.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to calculate the number of ways to select problems can handle different scenarios effectively.", "Round_0": {"code": "def calculate_ways_to_select_problems(testcases):\n    for _ in range(testcases):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            problems.append(list(map(int, input().split()))\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) and (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\n# Parse the input to extract the number of testcases\ntestcases = int(input())\n\n# Calculate the number of ways to select three training problems for each testcase\ncalculate_ways_to_select_problems(testcases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 8)"}, "Round_1": {"code": "def calculate_ways_to_select_problems(testcases):\n    for _ in range(testcases):\n        n = int(input())\n        problems = []\n        for _ in range(n):\n            problems.append(list(map(int, input().split())))\n        \n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (problems[i][0] == problems[j][0] or problems[j][0] == problems[k][0] or problems[i][0] == problems[k][0]) and (problems[i][1] == problems[j][1] or problems[j][1] == problems[k][1] or problems[i][1] == problems[k][1]):\n                        count += 1\n        \n        print(count)\n\n# Parse the input to extract the number of testcases\ntestcases = int(input())\n\n# Calculate the number of ways to select three training problems for each testcase\ncalculate_ways_to_select_problems(testcases)\n"}}], "scores": [], "pass_results": [false, false, false, false, true, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 78, "prompt": "Monocarp is eager to make sure the chosen problems offer a good balance of challenge and opportunity for the students to learn.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 50000) \u2014 the number of testcases.\n\nThe first line of each testcase contains an integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems that Monocarp have.\n\nIn the i-th of the following n lines, there are two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n) \u2014 the topic and the difficulty of the i-th problem.\n\nIt is guaranteed that there are no two problems that have the same topic and difficulty at the same time.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint the number of ways to select three training problems that meet either of the requirements described in the statement.\n\nExample\n\nInput\n\n\n2\n4\n2 4\n3 4\n2 1\n1 3\n5\n1 5\n2 4\n3 3\n4 2\n5 1\n\n\nOutput\n\n\n3\n10\n\nNote\n\nIn the first example, you can take the following sets of three problems:\n\n  * problems 1, 2, 4; \n  * problems 1, 3, 4; \n  * problems 2, 3, 4. \n\n\n\nThus, the number of ways is equal to three.", "mutate_method": "rephrase_one", "save_node": true, "parent_index": 45}
