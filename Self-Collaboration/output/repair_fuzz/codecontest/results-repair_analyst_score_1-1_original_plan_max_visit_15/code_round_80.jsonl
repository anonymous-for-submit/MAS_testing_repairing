{"name": "1622_E. Math Test", "description": "Petya is a math teacher. n of his students has written a test consisting of m questions. For each student, it is known which questions he has answered correctly and which he has not.\n\nIf the student answers the j-th question correctly, he gets p_j points (otherwise, he gets 0 points). Moreover, the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 ", "tags": ["bitmasks", "brute force", "greedy"], "difficulty": 11, "id": 1622, "sample_io": [{"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n", "output": ["3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \n"]}], "test_list": [{"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n001\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1 4 2 6 3 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 4 1 6 2 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n13 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n101\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 2\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n000110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n3 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111001\n", "output": ["3 1 2\n3 1 4 2\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 2\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n2 1\n"]}, {"input": "3\n4 3\n5 1 1 0\n111\n000\n101\n010\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["1 2 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000001\n111111\n", "output": ["3 1 2\n2 3 4 1\n4 1 5 2 3 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1101\n0010\n0110\n0111\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 4 1 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n2 4 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n4 1 2 3\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0011\n0110\n0001\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n1 2 4 3\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n001\n110\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["3 2 1\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0010\n0101\n3 2\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n101\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["2 1 3\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n9 1 4 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000100\n111101\n", "output": ["3 1 2\n2 3 4 1\n4 3 5 1 2 6\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n111\n100\n4 4\n6 2 0 10\n1001\n0011\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111011\n", "output": ["3 2 1\n1 2 4 3\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n001\n110\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["2 1 3\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n001\n110\n4 4\n0 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["2 1 3\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 3 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100100\n111101\n", "output": ["3 1 2\n2 3 4 1\n6 2 3 4 1 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n1 2 0 10\n1101\n0010\n0100\n0111\n3 6\n38 3 7\n010110\n100101\n111101\n", "output": ["3 1 2\n3 4 1 2\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n1 1 2 0\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0011\n0111\n0101\n3 1\n20 3 2\n011110\n000101\n111011\n", "output": ["3 1 2\n1 2 4 3\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n000\n4 4\n6 3 0 10\n0001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100100\n111101\n", "output": ["2 1 3\n2 3 4 1\n6 2 3 4 1 5\n"]}, {"input": "3\n4 3\n5 1 3 4\n100\n100\n101\n100\n4 4\n12 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 4\n010110\n010101\n111111\n", "output": ["1 2 3\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n110\n000\n100\n100\n4 4\n6 2 1 11\n1001\n0010\n0110\n0101\n3 6\n38 0 7\n110110\n000101\n111101\n", "output": ["3 2 1\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n000\n4 4\n6 3 0 1\n0001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100100\n111101\n", "output": ["2 1 3\n1 4 3 2\n6 2 3 4 1 5\n"]}, {"input": "3\n4 3\n3 1 3 2\n110\n000\n100\n100\n4 4\n6 2 1 11\n1001\n0010\n0110\n0101\n3 6\n38 0 7\n110110\n000101\n111101\n", "output": ["1 3 2\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n0 1 2 1\n110\n100\n100\n101\n4 4\n2 2 0 13\n1101\n0110\n0110\n0101\n3 6\n38 3 12\n010110\n000001\n111101\n", "output": ["3 1 2\n2 3 4 1\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 2\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 0 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 0 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 3 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n101\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 1 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n11 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 0 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 0\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n13 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 1 0\n111\n000\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0100\n0100\n3 2\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000001\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n1 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0111\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n011\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1101\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n36 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 0 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n1101\n3 1\n34 3 7\n010110\n000101\n110111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0001\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 18\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010010\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 2 2\n101\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 1\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 2\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 10\n0001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n100\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n001\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111101\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n110110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 0\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 8\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n110110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n54 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n1 1 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0110\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111011\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n11 1 0 4\n1001\n0010\n0110\n0101\n3 1\n20 0 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n110\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 4 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n4 1 0 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n000\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n6 1 0 10\n1001\n0110\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n100101\n110101\n", "output": ["3 1 2\n2 3 4 1\n3 4 1 6 2 5\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n101\n101\n100\n4 4\n6 2 0 10\n1001\n0000\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0010\n0001\n3 1\n30 1 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n100\n101\n000\n4 4\n11 1 1 11\n1001\n0010\n1110\n0101\n3 1\n34 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 2 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 0 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110110\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n13 1 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 1 0\n011\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n1110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 2\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 1 4 2\n111\n101\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111011\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n1110\n0101\n3 6\n20 3 15\n000110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n2 3 4 5 1 6\n"]}, {"input": "3\n4 3\n2 1 2 2\n110\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n1 1\n20 3 7\n010110\n010101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n9 1 4 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n011\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n101\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n20 3 2\n010110\n000101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n36 3 7\n010100\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n100\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 18\n1001\n0010\n0110\n0101\n3 6\n20 3 0\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 10\n1101\n0010\n0100\n0101\n3 1\n20 3 7\n010010\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 2 2\n101\n100\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n011110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n010101\n111111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n101\n4 4\n3 1 0 10\n0001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n100\n100\n4 4\n6 2 0 11\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0001\n3 1\n30 3 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n000\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 17\n1001\n0010\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n0 1 2 0\n110\n100\n101\n100\n4 4\n2 2 0 10\n1001\n0010\n0110\n0101\n3 6\n38 3 6\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n110110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n54 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n010\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111001\n", "output": ["3 1 2\n3 1 4 2\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n000\n4 4\n11 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n1 2 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n1 1 2 2\n110\n100\n111\n100\n4 4\n6 2 0 10\n1001\n0010\n0111\n0101\n3 1\n20 3 2\n010110\n000101\n111011\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n000\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n8 1 0 10\n1001\n0110\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n010\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n8 3 2\n010110\n100101\n110101\n", "output": ["3 1 2\n2 3 4 1\n3 4 1 6 2 5\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0010\n0001\n3 1\n30 0 2\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n111\n100\n101\n000\n4 4\n11 2 0 10\n1001\n0010\n0110\n0100\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 0 2 2\n111\n100\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n2 1\n66 3 2\n010110\n000101\n110110\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 0\n011\n100\n111\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 1 2\n101\n100\n000\n100\n4 4\n6 1 0 10\n1001\n0010\n1110\n0100\n3 1\n20 0 7\n010110\n000101\n111111\n", "output": ["3 2 1\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n5 2 4 2\n111\n101\n101\n000\n4 4\n16 1 1 11\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111011\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 0 1 0\n111\n000\n101\n010\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["1 2 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111111\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 17\n1001\n0010\n0110\n0101\n1 1\n20 3 7\n010110\n010101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n011\n100\n101\n101\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1101\n0010\n0100\n0111\n3 6\n38 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 4 1 2\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n100\n000\n4 4\n11 1 0 10\n1001\n0010\n0110\n0001\n3 1\n34 3 1\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 0\n110\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0011\n0110\n0001\n3 6\n38 2 8\n010110\n000101\n111101\n", "output": ["3 1 2\n1 2 4 3\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n10 1 2 2\n110\n110\n101\n100\n4 4\n6 2 0 18\n1001\n0010\n0110\n0101\n3 6\n20 3 0\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n3 1 4 5 2 6\n"]}, {"input": "3\n4 3\n4 1 2 2\n101\n110\n101\n100\n4 4\n6 1 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 7\n011110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 4\n100\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 1\n20 3 2\n010110\n010101\n111111\n", "output": ["1 2 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n100\n100\n100\n4 4\n6 2 1 11\n1001\n0010\n0110\n0101\n3 6\n38 2 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n4 1 2 2\n111\n100\n000\n100\n4 4\n11 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n110\n100\n101\n100\n4 4\n2 2 0 17\n1001\n0110\n0110\n0101\n3 6\n38 3 12\n010110\n000101\n111101\n", "output": ["3 1 2\n2 3 4 1\n3 2 4 5 1 6\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n100\n101\n000\n4 4\n11 1 0 10\n1001\n0110\n0110\n0101\n3 1\n34 3 7\n110110\n000100\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n0 1 2 2\n111\n100\n101\n000\n4 4\n4 1 0 10\n1001\n0010\n0110\n0001\n3 1\n54 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n3 1 2 2\n011\n100\n101\n100\n4 4\n2 1 0 10\n1001\n0010\n0110\n0101\n3 6\n38 2 8\n010110\n000101\n111001\n", "output": ["3 1 2\n3 1 4 2\n4 2 5 3 1 6\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n000\n4 4\n12 1 0 11\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000101\n110101\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n100\n4 4\n1 0 0 10\n1101\n0010\n0110\n0101\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n2 1 2 2\n111\n000\n101\n000\n4 4\n11 1 0 17\n1001\n0010\n0110\n0101\n3 1\n66 3 2\n010110\n000111\n110111\n", "output": ["2 1 3\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 3 2\n111\n100\n101\n000\n4 4\n6 1 0 10\n1101\n0010\n0010\n0101\n3 2\n20 3 7\n010110\n000101\n111101\n", "output": ["3 1 2\n3 1 4 2\n2 1\n"]}, {"input": "3\n4 3\n5 1 2 2\n101\n100\n001\n100\n4 4\n8 1 0 10\n1001\n0110\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111111\n", "output": ["3 2 1\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 4 2\n101\n101\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 3 7\n010110\n000101\n111111\n", "output": ["2 1 3\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 1 0\n011\n100\n111\n000\n4 4\n20 1 0 10\n1001\n0010\n0110\n0101\n3 1\n34 3 2\n010110\n000101\n110111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n110\n110\n101\n100\n4 4\n6 3 0 10\n1001\n0110\n0110\n0101\n3 6\n13 3 1\n010110\n100101\n111101\n", "output": ["3 1 2\n2 3 4 1\n5 2 3 4 1 6\n"]}, {"input": "3\n4 3\n4 1 1 2\n101\n100\n000\n101\n4 4\n6 1 0 10\n1001\n0010\n0110\n0100\n3 1\n20 6 7\n010110\n000101\n111110\n", "output": ["3 1 2\n1 3 4 2\n1\n"]}, {"input": "3\n4 3\n5 1 2 2\n111\n100\n101\n100\n4 4\n6 1 0 17\n1001\n0010\n0110\n0101\n1 1\n20 3 8\n010110\n010101\n111111\n", "output": ["3 1 2\n2 3 4 1\n1\n"]}], "task_id": "codecontest/158", "repair_prompt": ["Petya is a math teacher. n of his students has written a test consisting of m questions. For each student, it is known which questions he has answered correctly and which he has not.\n\nIf the student answers the j-th question correctly, he earns p_j points (otherwise, he receives 0 points). Moreover, the points for the questions are allocated such that the sequence p is a rearrangement of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Petya wonders how unexpected the results could be, believing that the surprise value of the results for students is equal to the sum of the absolute differences between expected points and actual points earned. Your task is to help Petya find a permutation p that maximizes the surprise value of the results for the students. If multiple solutions exist, any of them can be printed. \n\nPetya is a math teacher. n of his students has written a test consisting of m questions. For each student, it is known which questions he has answered correctly and which he has not.\n\nIf the student answers the j-th question correctly, he earns p_j points (otherwise, he receives 0 points). Moreover, the points for the questions are allocated such that the sequence p is a rearrangement of numbers from 1 to m. \n\nFor the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test. \n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Petya is a math teacher, and n of his students have taken a test with m questions. For each student, it is known which questions they answered correctly and the points they earned for each correct answer. Petya wants to find a permutation of points for the questions that maximizes the surprise value of the results for the students.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 \n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "from itertools import permutations\n\ndef calculate_surprise_value(points, answers, permutation):\n    total_surprise = 0\n    for i in range(len(points)):\n        student_points = sum(permutation[j] for j in range(len(permutation)) if answers[i][j] == '1')\n        total_surprise += abs(points[i] - student_points)\n    return total_surprise\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        surprise = calculate_surprise_value(points, answers, perm)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    print(*max_permutation)\n\nmain()", "completions": ["from itertools import permutations\n\ndef calculate_surprise_value(points, permutation):\n    surprise_value = 0\n    for i in range(len(points)):\n        surprise_value += abs(points[i] - permutation[i])\n    return surprise_value\n\ndef find_max_surprise_permutation(n, m, points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        surprise_value = calculate_surprise_value(points, perm)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(n, m, points, answers)\n    print(*max_permutation)\n\nmain()", "def calculate_surprise_value(points, answers):\n    surprise_value = 0\n    for answer in answers:\n        temp_value = 0\n        for i in range(len(points)):\n            temp_value += points[i] if answer[i] == '1' else 0\n        surprise_value = max(surprise_value, temp_value)\n    return surprise_value\n\ndef find_permutation(points, answers):\n    max_surprise_value = 0\n    max_permutation = []\n    \n    from itertools import permutations\n    \n    for perm in permutations(range(1, len(points) + 1)):\n        perm_points = [0] * len(points)\n        for i, p in enumerate(perm):\n            perm_points[p - 1] = points[i]\n        \n        surprise_value = calculate_surprise_value(perm_points, answers)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    permutation = find_permutation(points, answers)\n    print(*permutation)\n\nmain()", "def calculate_surprise_value(points, answers):\n    surprise_value = 0\n    for answer in answers:\n        surprise_value += sum([points[i] for i in range(len(answer)) if answer[i] == '1'])\n    return surprise_value\n\ndef find_max_surprise_permutation(points, answers):\n    max_surprise_value = 0\n    max_permutation = []\n    \n    from itertools import permutations\n    \n    for perm in permutations(range(1, len(points) + 1)):\n        current_points = [0] + list(perm)\n        current_surprise_value = calculate_surprise_value(current_points, answers)\n        if current_surprise_value > max_surprise_value:\n            max_surprise_value = current_surprise_value\n            max_permutation = current_points[1:]\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(points, answers)\n    print(*max_permutation)\n\nmain()", "def calculate_surprise_value(points, expected_points):\n    surprise_value = sum(abs(exp - act) for exp, act in zip(expected_points, points))\n    return surprise_value\n\ndef find_permutation(n, m, expected_points, answers):\n    points = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if answers[i][j] == '1':\n                points[j] += 1\n\n    permutation = sorted(range(1, m+1), key=lambda x: points[x-1], reverse=True)\n    return permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n\n    permutation = find_permutation(n, m, expected_points, answers)\n    print(*permutation)\n\nmain()", "from itertools import permutations\n\n# Function to calculate the surprise value for a given permutation\ndef calculate_surprise_value(points, permutation):\n    surprise_value = sum(abs(points[i] - permutation[i]) for i in range(len(points)))\n    return surprise_value\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of students and questions\n    n, m = map(int, input().split())\n    \n    # Read the expected points for each student\n    expected_points = list(map(int, input().split()))\n    \n    # Read the student answers\n    student_answers = [input() for _ in range(n)]\n    \n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    # Generate all possible permutations of points\n    for permutation in permutations(range(1, m+1)):\n        # Calculate the surprise value for the current permutation\n        surprise_value = calculate_surprise_value(expected_points, permutation)\n        \n        # Update the maximum surprise value and permutation if needed\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = permutation\n    \n    # Output the permutation with maximum surprise value\n    print(*max_permutation)\n\nmain()", "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [0] * m\n        for i, ans in enumerate(answers):\n            for j, a in enumerate(ans):\n                if a == '1':\n                    points[j] += perm[j]\n        \n        surprise = calculate_surprise_value(points, expected_points)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n\nmain()", "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [0] * m\n        for i, ans in enumerate(answers):\n            for j, a in enumerate(ans):\n                if a == '1':\n                    points[j] += perm[j]\n        \n        surprise = calculate_surprise_value(points, expected_points)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n\nmain()", "from itertools import permutations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of students and questions\n    n, m = map(int, input().split())\n    \n    # Read the expected points for each student\n    expected_points = list(map(int, input().split()))\n    \n    # Read the answers for each student\n    answers = [input() for _ in range(n)]\n    \n    # Generate all possible permutations of points\n    points_permutations = permutations(range(1, m + 1))\n    \n    max_surprise_value = float('-inf')\n    best_permutation = None\n    \n    # Calculate the surprise value for each permutation\n    for perm in points_permutations:\n        surprise_value = sum(expected_points[i] * int(answers[i][perm[i] - 1]) for i in range(n))\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            best_permutation = perm\n    \n    # Print the permutation with the maximum surprise value\n    print(*best_permutation)\n\nmain()", "from itertools import permutations\n\ndef calculate_surprise_value(points, permutation):\n    surprise_value = sum(abs(points[i] - permutation[i]) for i in range(len(points)))\n    return surprise_value\n\ndef find_max_surprise_permutation(n, m, points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        surprise_value = calculate_surprise_value(points, perm)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(n, m, points, answers)\n    print(*max_permutation)\n\nmain()", "from itertools import permutations\n\ndef calculate_surprise_value(points, answers, permutation):\n    total_surprise = 0\n    for i in range(len(points)):\n        student_points = sum(permutation[j] for j in range(len(permutation)) if answers[i][j] == '1')\n        total_surprise += abs(points[i] - student_points)\n    return total_surprise\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        surprise = calculate_surprise_value(points, answers, perm)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    print(*max_permutation)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the maximum possible surprise value for each test case\",\n    \"Generate a permutation p that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input data for each test case\",\n    \"Step 2\": \"For each test case, calculate the maximum possible surprise value by iterating through all possible permutations of p\",\n    \"Step 3\": \"Generate a permutation p that maximizes the surprise value by selecting the permutation with the highest surprise value\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In this requirement, a permutation refers to a rearrangement of numbers from 1 to m.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the highest value\n    'multiple answers': means there could be more than one correct output\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input data, calculating surprise values, and generating permutations.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output:\n    3 1 2 \n    Explanation: The maximum surprise value is achieved by the permutation [3, 1, 2].\n\n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output:\n    2 3 4 1 \n    Explanation: The maximum surprise value is achieved by the permutation [2, 3, 4, 1].\n\n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output:\n    3 1 4 5 2 6 \n    Explanation: The maximum surprise value is achieved by the permutation [3, 1, 4, 5, 2, 6].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, answers, permutation):\n    total_surprise = 0\n    for i in range(len(points)):\n        student_points = sum(permutation[j] for j in range(len(permutation)) if answers[i][j] == '1')\n        total_surprise += abs(points[i] - student_points)\n    return total_surprise\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        surprise = calculate_surprise_value(points, answers, perm)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    print(*max_permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 33)"}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, answers, permutation):\n    total_surprise = 0\n    for i in range(len(points)):\n        student_points = sum(permutation[j] for j in range(len(permutation)) if answers[i][j] == '1')\n        total_surprise += abs(points[i] - student_points)\n    return total_surprise\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        surprise = calculate_surprise_value(points, answers, perm)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    print(*max_permutation)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the maximum possible surprise value for each test case\",\n    \"Generate a permutation p that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input data for each test case\",\n    \"Step 2\": \"For each test case, calculate the maximum possible surprise value by iterating through all possible permutations of p\",\n    \"Step 3\": \"Generate a permutation p that maximizes the surprise value by selecting the permutation with the highest calculated surprise value\",\n    \"Step 4\": \"Output the permutation p for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In this requirement, a permutation refers to a rearrangement of numbers from 1 to m.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the highest value\n    'unexpected': means the difference between expected points and actual points\n\n# [code logic]\n    The steps should be implemented sequentially as they involve parsing input, calculating surprise value, and generating permutations.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output: 3 1 2\n    Explanation: The maximum surprise value is achieved by the permutation [3, 1, 2].\n\n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output: 2 3 4 1\n    Explanation: The maximum surprise value is achieved by the permutation [2, 3, 4, 1].\n\n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output: 3 1 4 5 2 6\n    Explanation: The maximum surprise value is achieved by the permutation [3, 1, 4, 5, 2, 6].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, permutation):\n    surprise_value = 0\n    for i in range(len(points)):\n        surprise_value += abs(points[i] - permutation[i])\n    return surprise_value\n\ndef find_max_surprise_permutation(n, m, points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        surprise_value = calculate_surprise_value(points, perm)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(n, m, points, answers)\n    print(*max_permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 35)"}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, permutation):\n    surprise_value = 0\n    for i in range(len(points)):\n        surprise_value += abs(points[i] - permutation[i])\n    return surprise_value\n\ndef find_max_surprise_permutation(n, m, points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        surprise_value = calculate_surprise_value(points, perm)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(n, m, points, answers)\n    print(*max_permutation)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input data for each test case\",\n      \"Calculate the surprise value for each possible permutation of points\",\n      \"Find the permutation that maximizes the surprise value\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case:\",\n      \"   - Read the number of students and questions\",\n      \"   - Read the expected points for each student\",\n      \"   - Read the answers for each student\",\n      \"   - Calculate the surprise value for each permutation of points\",\n      \"   - Find the permutation that maximizes the surprise value\",\n      \"   - Print the permutation\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'surprise value'\n    Explanation: The surprise value is the value that Petya wants to maximize by finding a permutation of points for the questions.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximizes': means that we need to find the permutation that gives the maximum surprise value\n\n# [code logic]\n    The major steps should be implemented step by step as they are. Each step is crucial for processing the input data and finding the optimal permutation.\n\n# [edge case] \n    Test Case 1:\n    1 2 3\n    Explanation: In this case, the students expect different points, and the surprise value can be maximized by assigning points accordingly.\n    \n    Test Case 2:\n    4 3 2 1\n    Explanation: In this case, all students expect different points, and the surprise value can be maximized by assigning points in descending order.\n    \n    Test Case 3:\n    3 1 2 4\n    Explanation: In this case, the students expect different points, and the surprise value can be maximized by assigning points accordingly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of finding the permutation that maximizes the surprise value should cover all scenarios.", "Round_0": {"code": "def calculate_surprise_value(points, answers):\n    surprise_value = 0\n    for answer in answers:\n        temp_value = 0\n        for i in range(len(points)):\n            temp_value += points[i] if answer[i] == '1' else 0\n        surprise_value = max(surprise_value, temp_value)\n    return surprise_value\n\ndef find_permutation(points, answers):\n    max_surprise_value = 0\n    max_permutation = []\n    \n    from itertools import permutations\n    \n    for perm in permutations(range(1, len(points) + 1)):\n        perm_points = [0] * len(points)\n        for i, p in enumerate(perm):\n            perm_points[p - 1] = points[i]\n        \n        surprise_value = calculate_surprise_value(perm_points, answers)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    permutation = find_permutation(points, answers)\n    print(*permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 42)"}, "Round_1": {"code": "def calculate_surprise_value(points, answers):\n    surprise_value = 0\n    for answer in answers:\n        temp_value = 0\n        for i in range(len(points)):\n            temp_value += points[i] if answer[i] == '1' else 0\n        surprise_value = max(surprise_value, temp_value)\n    return surprise_value\n\ndef find_permutation(points, answers):\n    max_surprise_value = 0\n    max_permutation = []\n    \n    from itertools import permutations\n    \n    for perm in permutations(range(1, len(points) + 1)):\n        perm_points = [0] * len(points)\n        for i, p in enumerate(perm):\n            perm_points[p - 1] = points[i]\n        \n        surprise_value = calculate_surprise_value(perm_points, answers)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    permutation = find_permutation(points, answers)\n    print(*permutation)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input data for each test case\",\n      \"Calculate the surprise value for each possible permutation of points\",\n      \"Find the permutation that maximizes the surprise value\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case:\",\n      \"   - Read the number of students and questions\",\n      \"   - Read the expected points for each student\",\n      \"   - Read the answers for each student\",\n      \"   - Calculate the surprise value for each permutation of points\",\n      \"   - Find the permutation that maximizes the surprise value\",\n      \"   - Print the permutation\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'surprise value'\n    Explanation: The surprise value is a value that Petya wants to maximize by finding a permutation of points for the questions that maximizes the surprise value of the results for the students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the best permutation that maximizes the surprise value\n\n# [code logic]\n    The major steps should be implemented sequentially as mentioned in the plan. Each step is crucial for processing the input data and calculating the surprise value accurately.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output:\n    3 1 2\n    Explanation: The expected points for students are [5, 1, 2, 2]. By permuting the points, the surprise value is maximized with the permutation [3, 1, 2].\n\n    Test Case 2:\n    Input:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output:\n    3 1 4 5 2 6\n    Explanation: The expected points for students are [20, 3, 15]. The permutation [3, 1, 4, 5, 2, 6] maximizes the surprise value.\n\n    Test Case 3:\n    Input:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output:\n    2 3 4 1\n    Explanation: The expected points for students are [6, 2, 0, 10]. The permutation [2, 3, 4, 1] maximizes the surprise value.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "def calculate_surprise_value(points, answers):\n    surprise_value = 0\n    for answer in answers:\n        surprise_value += sum([points[i] for i in range(len(answer)) if answer[i] == '1'])\n    return surprise_value\n\ndef find_max_surprise_permutation(points, answers):\n    max_surprise_value = 0\n    max_permutation = []\n    \n    from itertools import permutations\n    \n    for perm in permutations(range(1, len(points) + 1)):\n        current_points = [0] + list(perm)\n        current_surprise_value = calculate_surprise_value(current_points, answers)\n        if current_surprise_value > max_surprise_value:\n            max_surprise_value = current_surprise_value\n            max_permutation = current_points[1:]\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(points, answers)\n    print(*max_permutation)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_surprise_value(points, answers):\n    surprise_value = 0\n    for answer in answers:\n        surprise_value += sum([points[i] for i in range(len(answer)) if answer[i] == '1'])\n    return surprise_value\n\ndef find_max_surprise_permutation(points, answers):\n    max_surprise_value = 0\n    max_permutation = []\n    \n    from itertools import permutations\n    \n    for perm in permutations(range(1, len(points) + 1)):\n        current_points = [0] + list(perm)\n        current_surprise_value = calculate_surprise_value(current_points, answers)\n        if current_surprise_value > max_surprise_value:\n            max_surprise_value = current_surprise_value\n            max_permutation = current_points[1:]\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(points, answers)\n    print(*max_permutation)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the maximum possible surprise value of the results\",\n    \"Generate a permutation p that maximizes the surprise value\"\n  ],\n  \"high-level plan\": {\n    \"Step 1\": \"Parse the input data for each test case\",\n    \"Step 2\": \"For each test case, calculate the maximum possible surprise value of the results using the given formula\",\n    \"Step 3\": \"Generate a permutation p that maximizes the surprise value by rearranging numbers from 1 to m\",\n    \"Step 4\": \"Output the permutation p for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: The core concept here is to rearrange numbers from 1 to m in a way that maximizes the surprise value of the results.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the arrangement that gives the highest surprise value\n\n# [code logic]\n    The steps should be implemented sequentially as they are. There are no steps that need to be implemented simultaneously.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output: 3 1 2\n    Explanation: The expected points for the students are [5, 1, 2, 2]. The surprise value is maximized when the permutation is [3, 1, 2], resulting in a surprise value of |5-2| + |1-1| + |2-2| + |2-0| = 5.\n\n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output: 2 3 4 1\n    Explanation: The expected points for the students are [6, 2, 0, 10]. The surprise value is maximized when the permutation is [2, 3, 4, 1], resulting in a surprise value of |6-1| + |2-0| + |0-0| + |10-3| = 14.\n\n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output: 3 1 4 5 2 6\n    Explanation: The expected points for the students are [20, 3, 15]. The surprise value is maximized when the permutation is [3, 1, 4, 5, 2, 6], resulting in a surprise value of |20-15| + |3-3| + |15-15| = 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided", "Round_0": {"code": "def calculate_surprise_value(points, expected_points):\n    surprise_value = sum(abs(exp - act) for exp, act in zip(expected_points, points))\n    return surprise_value\n\ndef find_permutation(n, m, expected_points, answers):\n    points = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if answers[i][j] == '1':\n                points[j] += 1\n\n    permutation = sorted(range(1, m+1), key=lambda x: points[x-1], reverse=True)\n    return permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n\n    permutation = find_permutation(n, m, expected_points, answers)\n    print(*permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 29)"}, "Round_1": {"code": "def calculate_surprise_value(points, expected_points):\n    surprise_value = sum(abs(exp - act) for exp, act in zip(expected_points, points))\n    return surprise_value\n\ndef find_permutation(n, m, expected_points, answers):\n    points = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if answers[i][j] == '1':\n                points[j] += 1\n\n    permutation = sorted(range(1, m+1), key=lambda x: points[x-1], reverse=True)\n    return permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n\n    permutation = find_permutation(n, m, expected_points, answers)\n    print(*permutation)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the surprise value for each possible permutation of points\",\n    \"Find the permutation that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of students, number of questions, expected points, and student answers\",\n    \"Step 3\": \"Generate all possible permutations of points\",\n    \"Step 4\": \"Calculate the surprise value for each permutation\",\n    \"Step 5\": \"Find the permutation that maximizes the surprise value\",\n    \"Step 6\": \"Output the permutation\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'surprise value'\n    Explanation: The surprise value is calculated as the sum of the absolute differences between expected points and actual points earned by each student.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the permutation that maximizes the surprise value\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input data, calculating surprise values for permutations, and finding the maximum surprise value permutation.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output:\n    3 1 2 \n    Explanation: The expected points for students are [5, 1, 2, 2]. The maximum surprise value permutation is [3, 1, 2] which results in the maximum surprise value.\n    \n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output:\n    2 3 4 1 \n    Explanation: The expected points for students are [6, 2, 0, 10]. The maximum surprise value permutation is [2, 3, 4, 1] which results in the maximum surprise value.\n    \n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output:\n    3 1 4 5 2 6 \n    Explanation: The expected points for students are [20, 3, 15]. The maximum surprise value permutation is [3, 1, 4, 5, 2, 6] which results in the maximum surprise value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle the given requirements.", "Round_0": {"code": "from itertools import permutations\n\n# Function to calculate the surprise value for a given permutation\ndef calculate_surprise_value(points, permutation):\n    surprise_value = sum(abs(points[i] - permutation[i]) for i in range(len(points)))\n    return surprise_value\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of students and questions\n    n, m = map(int, input().split())\n    \n    # Read the expected points for each student\n    expected_points = list(map(int, input().split()))\n    \n    # Read the student answers\n    student_answers = [input() for _ in range(n)]\n    \n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    # Generate all possible permutations of points\n    for permutation in permutations(range(1, m+1)):\n        # Calculate the surprise value for the current permutation\n        surprise_value = calculate_surprise_value(expected_points, permutation)\n        \n        # Update the maximum surprise value and permutation if needed\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = permutation\n    \n    # Output the permutation with maximum surprise value\n    print(*max_permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 43)"}, "Round_1": {"code": "from itertools import permutations\n\n# Function to calculate the surprise value for a given permutation\ndef calculate_surprise_value(points, permutation):\n    surprise_value = sum(abs(points[i] - permutation[i]) for i in range(len(points)))\n    return surprise_value\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of students and questions\n    n, m = map(int, input().split())\n    \n    # Read the expected points for each student\n    expected_points = list(map(int, input().split()))\n    \n    # Read the student answers\n    student_answers = [input() for _ in range(n)]\n    \n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    # Generate all possible permutations of points\n    for permutation in permutations(range(1, m+1)):\n        # Calculate the surprise value for the current permutation\n        surprise_value = calculate_surprise_value(expected_points, permutation)\n        \n        # Update the maximum surprise value and permutation if needed\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = permutation\n    \n    # Output the permutation with maximum surprise value\n    print(*max_permutation)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the surprise value for each possible permutation of points\",\n    \"Find the permutation that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case:\",\n    \"Substep 1\": \"Read the number of students and questions\",\n    \"Substep 2\": \"Read the expected points for each student\",\n    \"Substep 3\": \"Read the answers for each student\",\n    \"Substep 4\": \"Generate all possible permutations of points\",\n    \"Substep 5\": \"Calculate the surprise value for each permutation\",\n    \"Substep 6\": \"Find the permutation that maximizes the surprise value\",\n    \"Step 3\": \"Output the permutation for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'surprise value'\n    Explanation: The surprise value is calculated as the sum of the absolute differences between expected points and actual points earned by each student.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the permutation that maximizes the surprise value\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input data, calculating surprise values for permutations, and finding the maximum surprise value permutation.\n\n# [edge case] \n    Edge Case 1:\n    1 2 3 4\n    Explanation: In this case, all students expect different points, and the permutation is in ascending order.\n    \n    Edge Case 2:\n    4 3 2 1\n    Explanation: In this case, all students expect different points, and the permutation is in descending order.\n    \n    Edge Case 3:\n    2 2 2 2\n    Explanation: In this case, all students expect the same points, and any permutation is valid.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n\nNO", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [0] * m\n        for i, ans in enumerate(answers):\n            for j, a in enumerate(ans):\n                if a == '1':\n                    points[j] += perm[j]\n        \n        surprise = calculate_surprise_value(points, expected_points)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 38)"}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [0] * m\n        for i, ans in enumerate(answers):\n            for j, a in enumerate(ans):\n                if a == '1':\n                    points[j] += perm[j]\n        \n        surprise = calculate_surprise_value(points, expected_points)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the surprise value for each possible permutation of points\",\n    \"Find the permutation that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of students and questions, the expected points for each student, and the answers for each student\",\n    \"Step 3\": \"Generate all possible permutations of points\",\n    \"Step 4\": \"Calculate the surprise value for each permutation\",\n    \"Step 5\": \"Find the permutation that maximizes the surprise value\",\n    \"Step 6\": \"Output the permutation\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'surprise value'\n    Explanation: The surprise value is calculated as the sum of the absolute differences between expected points and actual points earned by each student.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the permutation that maximizes the surprise value\n\n# [code logic]\n    The steps 3, 4, and 5 should be implemented simultaneously as they involve generating permutations, calculating surprise values, and finding the maximum surprise value permutation.\n    This can be achieved by creating a function to generate all permutations of points, calculating the surprise value for each permutation, and keeping track of the maximum surprise value and its corresponding permutation.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output: 3 1 2\n    Explanation: In this case, the maximum surprise value permutation is [3, 1, 2] which maximizes the sum of absolute differences between expected and actual points.\n\n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output: 2 3 4 1\n    Explanation: The permutation [2, 3, 4, 1] maximizes the surprise value for this test case.\n\n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output: 3 1 4 5 2 6\n    Explanation: The permutation [3, 1, 4, 5, 2, 6] maximizes the surprise value in this scenario.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [0] * m\n        for i, ans in enumerate(answers):\n            for j, a in enumerate(ans):\n                if a == '1':\n                    points[j] += perm[j]\n        \n        surprise = calculate_surprise_value(points, expected_points)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 38)"}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, expected_points):\n    return sum(abs(exp - act) for exp, act in zip(expected_points, points))\n\ndef find_max_surprise_permutation(n, m, expected_points, answers):\n    max_surprise = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        points = [0] * m\n        for i, ans in enumerate(answers):\n            for j, a in enumerate(ans):\n                if a == '1':\n                    points[j] += perm[j]\n        \n        surprise = calculate_surprise_value(points, expected_points)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    expected_points = list(map(int, input().split()))\n    answers = [input().strip() for _ in range(n)]\n    \n    result = find_max_surprise_permutation(n, m, expected_points, answers)\n    print(*result)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input data for each test case\",\n      \"Calculate the surprise value for each possible permutation of points\",\n      \"Find the permutation that maximizes the surprise value\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case:\",\n      \"   - Read the number of students and questions\",\n      \"   - Read the expected points for each student\",\n      \"   - Read the answers for each student\",\n      \"   - Generate all possible permutations of points\",\n      \"   - Calculate the surprise value for each permutation\",\n      \"   - Find the permutation with the maximum surprise value\",\n      \"   - Print the permutation\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation': In this context, permutation refers to the arrangement of points for the questions that maximizes the surprise value of the results for the students.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': Indicates that the goal is to find the permutation that maximizes the surprise value of the results.\n\n# [code logic]\n    All steps should be implemented step by step as there are no steps that can be executed simultaneously.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output:\n    3 1 2\n    Explanation: The expected points for students are [5, 1, 2, 2]. The surprise value is maximized by arranging the points as [3, 1, 2].\n\n    Test Case 2:\n    Input:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output:\n    2 3 4 1\n    Explanation: The expected points for students are [6, 2, 0, 10]. The surprise value is maximized by arranging the points as [2, 3, 4, 1].\n\n    Test Case 3:\n    Input:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output:\n    3 1 4 5 2 6\n    Explanation: The expected points for students are [20, 3, 15]. The surprise value is maximized by arranging the points as [3, 1, 4, 5, 2, 6].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "from itertools import permutations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of students and questions\n    n, m = map(int, input().split())\n    \n    # Read the expected points for each student\n    expected_points = list(map(int, input().split()))\n    \n    # Read the answers for each student\n    answers = [input() for _ in range(n)]\n    \n    # Generate all possible permutations of points\n    points_permutations = permutations(range(1, m + 1))\n    \n    max_surprise_value = float('-inf')\n    best_permutation = None\n    \n    # Calculate the surprise value for each permutation\n    for perm in points_permutations:\n        surprise_value = sum(expected_points[i] * int(answers[i][perm[i] - 1]) for i in range(n))\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            best_permutation = perm\n    \n    # Print the permutation with the maximum surprise value\n    print(*best_permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 41)"}, "Round_1": {"code": "from itertools import permutations\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of students and questions\n    n, m = map(int, input().split())\n    \n    # Read the expected points for each student\n    expected_points = list(map(int, input().split()))\n    \n    # Read the answers for each student\n    answers = [input() for _ in range(n)]\n    \n    # Generate all possible permutations of points\n    points_permutations = permutations(range(1, m + 1))\n    \n    max_surprise_value = float('-inf')\n    best_permutation = None\n    \n    # Calculate the surprise value for each permutation\n    for perm in points_permutations:\n        surprise_value = sum(expected_points[i] * int(answers[i][perm[i] - 1]) for i in range(n))\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            best_permutation = perm\n    \n    # Print the permutation with the maximum surprise value\n    print(*best_permutation)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the maximum possible surprise value for each test case\",\n    \"Generate a permutation p that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input data for each test case\",\n    \"Step 2\": \"For each test case, calculate the maximum possible surprise value by iterating through all possible permutations of p\",\n    \"Step 3\": \"Generate a permutation p that maximizes the surprise value by selecting the permutation with the highest surprise value\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In this requirement, a permutation refers to a rearrangement of numbers from 1 to m that maximizes the surprise value of the results.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': Indicates the need to find the permutation that maximizes the surprise value of the results.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input data, calculating surprise values, and generating permutations.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output:\n    3 1 2 \n    Explanation: The expected points for the students are [5, 1, 2, 2]. The maximum surprise value is achieved by the permutation [3, 1, 2], resulting in a surprise value of |5-2| + |1-1| + |2-0| + |2-0| = 5.\n\n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output:\n    2 3 4 1 \n    Explanation: The expected points for the students are [6, 2, 0, 10]. The maximum surprise value is achieved by the permutation [2, 3, 4, 1], resulting in a surprise value of |6-1| + |2-0| + |0-0| + |10-0| = 17.\n\n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output:\n    3 1 4 5 2 6 \n    Explanation: The expected points for the students are [20, 3, 15]. The maximum surprise value is achieved by the permutation [3, 1, 4, 5, 2, 6], resulting in a surprise value of |20-3| + |3-1| + |15-4| = 30.\n\n# [extra code for edge case]\n    We need extra code to", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, permutation):\n    surprise_value = sum(abs(points[i] - permutation[i]) for i in range(len(points)))\n    return surprise_value\n\ndef find_max_surprise_permutation(n, m, points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        surprise_value = calculate_surprise_value(points, perm)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(n, m, points, answers)\n    print(*max_permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 34)"}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, permutation):\n    surprise_value = sum(abs(points[i] - permutation[i]) for i in range(len(points)))\n    return surprise_value\n\ndef find_max_surprise_permutation(n, m, points, answers):\n    max_surprise_value = float('-inf')\n    max_permutation = None\n    \n    for perm in permutations(range(1, m+1)):\n        surprise_value = calculate_surprise_value(points, perm)\n        if surprise_value > max_surprise_value:\n            max_surprise_value = surprise_value\n            max_permutation = perm\n    \n    return max_permutation\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_permutation = find_max_surprise_permutation(n, m, points, answers)\n    print(*max_permutation)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input data for each test case\",\n    \"Calculate the maximum possible surprise value for each test case\",\n    \"Generate a permutation p that maximizes the surprise value\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input data for each test case\",\n    \"Step 2\": \"For each test case, calculate the maximum possible surprise value by iterating through all possible permutations of p\",\n    \"Step 3\": \"Generate a permutation p that maximizes the surprise value by selecting the permutation with the highest surprise value\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: In this requirement, a permutation refers to a rearrangement of numbers from 1 to m.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': means finding the highest value\n    'multiple answers': means there could be more than one correct output\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input data, calculating surprise values, and generating permutations.\n\n# [edge case] \n    Test Case 1:\n    4 3\n    5 1 2 2\n    110\n    100\n    101\n    100\n    Output:\n    3 1 2 \n    Explanation: The maximum surprise value is achieved by the permutation [3, 1, 2].\n\n    Test Case 2:\n    4 4\n    6 2 0 10\n    1001\n    0010\n    0110\n    0101\n    Output:\n    2 3 4 1 \n    Explanation: The maximum surprise value is achieved by the permutation [2, 3, 4, 1].\n\n    Test Case 3:\n    3 6\n    20 3 15\n    010110\n    000101\n    111111\n    Output:\n    3 1 4 5 2 6 \n    Explanation: The maximum surprise value is achieved by the permutation [3, 1, 4, 5, 2, 6].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, answers, permutation):\n    total_surprise = 0\n    for i in range(len(points)):\n        student_points = sum(permutation[j] for j in range(len(permutation)) if answers[i][j] == '1')\n        total_surprise += abs(points[i] - student_points)\n    return total_surprise\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        surprise = calculate_surprise_value(points, answers, perm)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    print(*max_permutation)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 33)"}, "Round_1": {"code": "from itertools import permutations\n\ndef calculate_surprise_value(points, answers, permutation):\n    total_surprise = 0\n    for i in range(len(points)):\n        student_points = sum(permutation[j] for j in range(len(permutation)) if answers[i][j] == '1')\n        total_surprise += abs(points[i] - student_points)\n    return total_surprise\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    points = list(map(int, input().split()))\n    answers = [input() for _ in range(n)]\n    \n    max_surprise = float('-inf')\n    max_permutation = []\n    \n    for perm in permutations(range(1, m+1)):\n        surprise = calculate_surprise_value(points, answers, perm)\n        if surprise > max_surprise:\n            max_surprise = surprise\n            max_permutation = perm\n    \n    print(*max_permutation)\n"}}], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 7, "round": 80, "prompt": "Petya is a math teacher. n of his students has written a test consisting of m questions. For each student, it is known which questions he has answered correctly and which he has not.\n\nIf the student answers the j-th question correctly, he earns p_j points (otherwise, he receives 0 points). Moreover, the points for the questions are allocated such that the sequence p is a rearrangement of numbers from 1 to m.\n\nFor the i-th student, Petya knows that he expects to get x_i points for the test. Petya wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to \u2211_{i=1}^{n} |x_i - r_i|, where r_i is the number of points that the i-th student has got for the test.\n\nYour task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 ", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 10; 1 \u2264 m \u2264 10^4) \u2014 the number of students and the number of questions, respectively.\n\nThe second line contains n integers x_1, x_2, ..., x_n (0 \u2264 x_i \u2264 (m(m+1))/(2)), where x_i is the number of points that the i-th student expects to get.\n\nThis is followed by n lines, the i-th line contains the string s_i (|s_i| = m; s_{i, j} \u2208 \\{0, 1\\}), where s_{i, j} is 1 if the i-th student has answered the j-th question correctly, and 0 otherwise.\n\nThe sum of m for all test cases does not exceed 10^4.\n\nOutput\n\nFor each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n3\n4 3\n5 1 2 2\n110\n100\n101\n100\n4 4\n6 2 0 10\n1001\n0010\n0110\n0101\n3 6\n20 3 15\n010110\n000101\n111111\n\n\nOutput\n\n\n3 1 2 \n2 3 4 1 \n3 1 4 5 2 6 ", "mutate_method": "rephrase_one", "save_node": true, "parent_index": 17}
