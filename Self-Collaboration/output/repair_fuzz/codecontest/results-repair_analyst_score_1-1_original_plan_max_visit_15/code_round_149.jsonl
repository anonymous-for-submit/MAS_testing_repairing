{"name": "1598_C. Delete Two Elements", "description": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "tags": ["data structures", "dp", "implementation", "math", "two pointers"], "difficulty": 9, "id": 1598, "sample_io": [{"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}], "test_list": [{"input": "1\n3\n228 1337 228\n", "output": ["0\n"]}, {"input": "1\n3\n228 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n2\n3\n"]}, {"input": "4\n4\n8 9 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n34 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 7\n", "output": ["6\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 1\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["0\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 9\n", "output": ["6\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 10\n5\n1 2 7 0 5\n7\n2 2 3 7 1 4 9\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 6\n5\n1 2 7 0 5\n7\n0 2 3 7 1 4 9\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 28 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n4\n8 8 5 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["0\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n4 2 3 7 1 4 7\n", "output": ["6\n0\n1\n3\n"]}, {"input": "4\n4\n5 8 11 8\n3\n9 24 10\n5\n1 4 2 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["2\n0\n2\n0\n"]}, {"input": "4\n4\n5 8 5 8\n3\n9 34 10\n5\n1 4 4 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["4\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 18 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 8 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 127\n", "output": ["0\n"]}, {"input": "1\n3\n40 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 9\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 0 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 -1 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n342 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 0 4 5 6 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 9\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 0\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 -1 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 8 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 3 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 14 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 103\n", "output": ["0\n"]}, {"input": "1\n3\n40 270 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 44\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 37 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 3\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n382 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 8\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 74\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n298 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n93 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 15\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 11\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 5\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 29 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n141 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 10 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 0\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 20\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 16\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 11 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n148 141 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 5\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n233 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 16\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 0\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 6 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 6 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n0 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 24 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 7 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 461 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 1 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 4 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 28\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 12\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}], "task_id": "codecontest/60", "repair_prompt": ["Monocarp's array a consists of n integers. Let's denote k as the average value of these elements (note that k might not be an integer).\n\nMonocarp is interested in removing exactly two entries from array a in a way that keeps the mean of the leftover (n - 2) items unchanged at k, which represents the mean of an n-sized array, defined by the sum of the elements divided by their count (i.e., sum divided by n).\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp is interested in removing exactly two entries from array a in a way that keeps the mean of the leftover (n - 2) items unchanged at k, which represents the mean of an n-sized array, defined by the sum of the elements divided by their count (i.e., sum divided by n). This task requires calculating the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Monocarp's array a consists of n integers, where k is the average value of these elements which might not be an integer. Monocarp is interested in removing exactly two entries from array a in a way that keeps the mean of the leftover items unchanged at k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n\nmain()", "completions": ["t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_sum = sum(a)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - a[i] - a[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n\nmain()", "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers representing the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value (k) of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize a counter for the number of pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j] where i < j\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the sum of elements excluding positions i and j\n            total = sum(arr) - arr[i] - arr[j]\n            \n            # Calculate the new average after removing elements at positions i and j\n            new_k = total / (n - 2)\n            \n            # Check if the new average is equal to k\n            if new_k == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n\nmain()", "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers in the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value (k) of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize count of pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j]\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the mean of (n-2) remaining elements after removing elements at positions i and j\n            mean = (sum(arr) - arr[i] - arr[j]) / (n - 2)\n            \n            # Check if the mean is equal to k\n            if mean == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    prefix_sum = 0\n    prefix_count = 0\n    for i in range(n):\n        prefix_sum += arr[i]\n        prefix_count += 1\n        if prefix_sum / prefix_count == k:\n            count += i\n    \n    print(count)\n\nmain()", "from collections import defaultdict\n\ndef calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n    \n    def find_pairs(arr, k):\n        count = 0\n        prefix_sum = [0]\n        for num in arr:\n            prefix_sum.append(prefix_sum[-1] + num)\n        \n        freq = defaultdict(int)\n        for i in range(1, len(prefix_sum)):\n            freq[prefix_sum[i]] += 1\n        \n        for i in range(1, len(prefix_sum)):\n            count += freq[prefix_sum[i] - k]\n            freq[prefix_sum[i]] -= 1\n        \n        return count\n    \n    results = []\n    for i in range(t):\n        n = testcases[i][0]\n        arr = testcases[i][1]\n        k = calculate_mean(arr)\n        pairs = find_pairs(arr, k)\n        results.append(pairs)\n    \n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = calculate_pairs(t, testcases)\nfor res in results:\n    print(res)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n\nmain()", "def calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n\n    def find_pairs(arr, k):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (sum(arr) - arr[i] - arr[j]) / (len(arr) - 2) == k:\n                    count += 1\n        return count\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        pairs = find_pairs(arr, k)\n        results.append(pairs)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Get results\nresults = calculate_pairs(t, testcases)\n\n# Output\nfor res in results:\n    print(res)\n\nmain()", "def calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n\n    def find_pairs(arr, mean):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (arr[i] + arr[j]) / 2 == mean:\n                    count += 1\n        return count\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        mean = calculate_mean(arr)\n        pairs = find_pairs(arr, mean)\n        results.append(pairs)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = calculate_pairs(t, testcases)\nfor res in results:\n    print(res)\n\nmain()", "def calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n\n    def find_pairs(arr, k):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (arr[i] + arr[j]) / 2 == k:\n                    count += 1\n        return count\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        pairs = find_pairs(arr, k)\n        results.append(pairs)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = calculate_pairs(t, testcases)\nfor res in results:\n    print(res)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mean of the original array\",\n    \"Identify pairs of positions [i, j] where removing elements will keep the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers in the array\",\n    \"Step 4\": \"Calculate the mean of the original array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing elements will keep the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Print the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mean': The average value of a set of numbers, calculated by summing all numbers and dividing by the count of numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    Input\n    4\n    4\n    8 8 8 8\n    Output\n    6\n    Explanation:\n    In this case, any pair of elements can be removed since all of them are equal. So, there are 6 possible pairs to remove.\n\n    Input\n    3\n    50 20 10\n    Output\n    0\n    Explanation:\n    There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input\n    5\n    1 4 7 3 5\n    Output\n    2\n    Explanation:\n    It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the mean of the original array\",\n    \"Identify pairs of positions [i, j] where removing elements will keep the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers in the array\",\n    \"Step 4\": \"Calculate the mean of the original array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing elements will keep the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Print the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mean': The average value of a set of numbers, calculated by summing all the numbers and dividing by the count of numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    Input\n    4\n    4\n    8 8 8 8\n    Output\n    6\n    Explanation:\n    In this case, any pair of elements can be removed since all of them are equal, resulting in 6 possible pairs.\n    \n    Input\n    3\n    50 20 10\n    Output\n    0\n    Explanation:\n    There is no way to delete two elements so the mathematic mean doesn't change.\n    \n    Input\n    5\n    1 4 7 3 5\n    Output\n    2\n    Explanation:\n    It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_sum = sum(a)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - a[i] - a[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    total_sum = sum(a)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - a[i] - a[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers representing the array\",\n    \"Step 4\": \"Calculate the average value (k) of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value': The average value of the elements in the array, denoted as k, may not be an integer. It is calculated as the sum of the elements divided by their count.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation: Any pair of elements can be removed since all of them are equal.\n    \n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n    \n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.", "Round_0": {"code": "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers representing the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value (k) of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize a counter for the number of pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j] where i < j\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the sum of elements excluding positions i and j\n            total = sum(arr) - arr[i] - arr[j]\n            \n            # Calculate the new average after removing elements at positions i and j\n            new_k = total / (n - 2)\n            \n            # Check if the new average is equal to k\n            if new_k == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 39)"}, "Round_1": {"code": "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers representing the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value (k) of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize a counter for the number of pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j] where i < j\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the sum of elements excluding positions i and j\n            total = sum(arr) - arr[i] - arr[j]\n            \n            # Calculate the new average after removing elements at positions i and j\n            new_k = total / (n - 2)\n            \n            # Check if the new average is equal to k\n            if new_k == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers in the array\",\n    \"Step 4\": \"Calculate the average value (k) of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value': The average value of the elements in the array, denoted as 'k'.\n    'pairs of positions': Denoting positions [i, j] in the array where elements can be removed to keep the mean unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    Test Case 1:\n    4\n    8 8 8 8\n    Output: 6\n    Explanation: Any pair of elements can be removed since all of them are equal, resulting in 6 pairs.\n    \n    Test Case 2:\n    3\n    50 20 10\n    Output: 0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n    \n    Test Case 3:\n    5\n    1 4 7 3 5\n    Output: 2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers in the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value (k) of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize count of pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j]\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the mean of (n-2) remaining elements after removing elements at positions i and j\n            mean = (sum(arr) - arr[i] - arr[j]) / (n - 2)\n            \n            # Check if the mean is equal to k\n            if mean == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 36)"}, "Round_1": {"code": "# Read the number of testcases\nt = int(input())\n\n# Iterate over each testcase\nfor _ in range(t):\n    # Read the number of elements in the array\n    n = int(input())\n    \n    # Read the sequence of integers in the array\n    arr = list(map(int, input().split()))\n    \n    # Calculate the average value (k) of the elements in the array\n    k = sum(arr) / n\n    \n    # Initialize count of pairs\n    pairs = 0\n    \n    # Iterate over all pairs of positions [i, j]\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the mean of (n-2) remaining elements after removing elements at positions i and j\n            mean = (sum(arr) - arr[i] - arr[j]) / (n - 2)\n            \n            # Check if the mean is equal to k\n            if mean == k:\n                pairs += 1\n    \n    # Output the total number of pairs for each testcase\n    print(pairs)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers representing the array\",\n    \"Step 4\": \"Calculate the average value of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value': The average value of the elements in the array, denoted as k, may not be an integer. It is calculated as the sum of the elements divided by their count.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation:\n    In this case, any pair of elements can be removed since all of them are equal, and the mean will remain unchanged.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation:\n    There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation:\n    It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    prefix_sum = 0\n    prefix_count = 0\n    for i in range(n):\n        prefix_sum += arr[i]\n        prefix_count += 1\n        if prefix_sum / prefix_count == k:\n            count += i\n    \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 26)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    prefix_sum = 0\n    prefix_count = 0\n    for i in range(n):\n        prefix_sum += arr[i]\n        prefix_count += 1\n        if prefix_sum / prefix_count == k:\n            count += i\n    \n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers in the array\",\n    \"Step 4\": \"Calculate the average value (k) of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value': The average value of the elements in the array, denoted as 'k'.\n    'pairs of positions': Denoting positions [i, j] in the array where elements can be removed to keep the mean unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation: Any pair of elements can be removed since all of them are equal.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "from collections import defaultdict\n\ndef calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n    \n    def find_pairs(arr, k):\n        count = 0\n        prefix_sum = [0]\n        for num in arr:\n            prefix_sum.append(prefix_sum[-1] + num)\n        \n        freq = defaultdict(int)\n        for i in range(1, len(prefix_sum)):\n            freq[prefix_sum[i]] += 1\n        \n        for i in range(1, len(prefix_sum)):\n            count += freq[prefix_sum[i] - k]\n            freq[prefix_sum[i]] -= 1\n        \n        return count\n    \n    results = []\n    for i in range(t):\n        n = testcases[i][0]\n        arr = testcases[i][1]\n        k = calculate_mean(arr)\n        pairs = find_pairs(arr, k)\n        results.append(pairs)\n    \n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = calculate_pairs(t, testcases)\nfor res in results:\n    print(res)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 51)"}, "Round_1": {"code": "from collections import defaultdict\n\ndef calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n    \n    def find_pairs(arr, k):\n        count = 0\n        prefix_sum = [0]\n        for num in arr:\n            prefix_sum.append(prefix_sum[-1] + num)\n        \n        freq = defaultdict(int)\n        for i in range(1, len(prefix_sum)):\n            freq[prefix_sum[i]] += 1\n        \n        for i in range(1, len(prefix_sum)):\n            count += freq[prefix_sum[i] - k]\n            freq[prefix_sum[i]] -= 1\n        \n        return count\n    \n    results = []\n    for i in range(t):\n        n = testcases[i][0]\n        arr = testcases[i][1]\n        k = calculate_mean(arr)\n        pairs = find_pairs(arr, k)\n        results.append(pairs)\n    \n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = calculate_pairs(t, testcases)\nfor res in results:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mean of the original array\",\n    \"Identify pairs of positions [i, j] where removing elements will keep the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the array elements\",\n    \"Step 4\": \"Calculate the mean of the original array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing elements will keep the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Print the count of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mean': The average value of a set of numbers, calculated by summing all the numbers and dividing by the count of numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    Input\n    4\n    4\n    8 8 8 8\n    Output\n    6\n    Explanation:\n    In this case, any pair of elements can be removed since all of them are equal. So, the number of pairs is 6.\n    \n    Input\n    3\n    50 20 10\n    Output\n    0\n    Explanation:\n    There is no way to delete two elements so the mathematic mean doesn't change.\n    \n    Input\n    5\n    1 4 7 3 5\n    Output\n    2\n    Explanation:\n    It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers in the array\",\n    \"Step 4\": \"Calculate the average value (k) of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value': The average value of the elements in the array, denoted as 'k', which might not be an integer.\n    'pairs of positions': Denoting positions [i, j] in the array where removing the elements at those positions will keep the mean unchanged.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as mentioned in the plan.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation: Any pair of elements can be removed since all of them are equal.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "def calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n\n    def find_pairs(arr, k):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (sum(arr) - arr[i] - arr[j]) / (len(arr) - 2) == k:\n                    count += 1\n        return count\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        pairs = find_pairs(arr, k)\n        results.append(pairs)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Get results\nresults = calculate_pairs(t, testcases)\n\n# Output\nfor res in results:\n    print(res)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 43)"}, "Round_1": {"code": "def calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n\n    def find_pairs(arr, k):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (sum(arr) - arr[i] - arr[j]) / (len(arr) - 2) == k:\n                    count += 1\n        return count\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        pairs = find_pairs(arr, k)\n        results.append(pairs)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Get results\nresults = calculate_pairs(t, testcases)\n\n# Output\nfor res in results:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] where removing the elements at those positions keeps the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers in the array\",\n    \"Step 4\": \"Calculate the average value of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing the elements at those positions keeps the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value': The average value of the elements in the array, denoted as k, may not be an integer. It is calculated as the sum of the elements divided by their count.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as described in the plan.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation: Any pair of elements can be removed since all of them are equal.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.", "Round_0": {"code": "def calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n\n    def find_pairs(arr, mean):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (arr[i] + arr[j]) / 2 == mean:\n                    count += 1\n        return count\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        mean = calculate_mean(arr)\n        pairs = find_pairs(arr, mean)\n        results.append(pairs)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = calculate_pairs(t, testcases)\nfor res in results:\n    print(res)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 41)"}, "Round_1": {"code": "def calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n\n    def find_pairs(arr, mean):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (arr[i] + arr[j]) / 2 == mean:\n                    count += 1\n        return count\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        mean = calculate_mean(arr)\n        pairs = find_pairs(arr, mean)\n        results.append(pairs)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = calculate_pairs(t, testcases)\nfor res in results:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the average value of the elements in the array\",\n    \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers representing the array\",\n    \"Step 4\": \"Calculate the average value (k) of the elements in the array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing the elements at those positions will keep the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Output the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average value'\n    Explanation: The average value of the elements in the array, denoted as k, may not be an integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. All steps should be followed sequentially as outlined in the plan.\n\n# [edge case] \n    Input:\n    4\n    4\n    8 8 8 8\n    Output:\n    6\n    Explanation: Any pair of elements can be removed since all of them are equal.\n\n    Input:\n    3\n    50 20 10\n    Output:\n    0\n    Explanation: There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input:\n    5\n    1 4 7 3 5\n    Output:\n    2\n    Explanation: It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.", "Round_0": {"code": "def calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n\n    def find_pairs(arr, k):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (arr[i] + arr[j]) / 2 == k:\n                    count += 1\n        return count\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        pairs = find_pairs(arr, k)\n        results.append(pairs)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = calculate_pairs(t, testcases)\nfor res in results:\n    print(res)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 41)"}, "Round_1": {"code": "def calculate_pairs(t, testcases):\n    def calculate_mean(arr):\n        return sum(arr) / len(arr)\n\n    def find_pairs(arr, k):\n        count = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (arr[i] + arr[j]) / 2 == k:\n                    count += 1\n        return count\n\n    results = []\n    for _ in range(t):\n        n = testcases[_][0]\n        arr = testcases[_][1]\n        k = calculate_mean(arr)\n        pairs = find_pairs(arr, k)\n        results.append(pairs)\n\n    return results\n\n# Input\nt = int(input())\ntestcases = []\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    testcases.append((n, arr))\n\n# Calculate and output results\nresults = calculate_pairs(t, testcases)\nfor res in results:\n    print(res)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the mean of the original array\",\n    \"Identify pairs of positions [i, j] where removing elements will keep the mean unchanged\",\n    \"Count the number of such pairs\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of testcases (t)\",\n    \"Step 2\": \"For each testcase, read the number of elements in the array (n)\",\n    \"Step 3\": \"Read the sequence of integers in the array\",\n    \"Step 4\": \"Calculate the mean of the original array\",\n    \"Step 5\": \"Identify pairs of positions [i, j] where removing elements will keep the mean unchanged\",\n    \"Step 6\": \"Count the number of such pairs\",\n    \"Step 7\": \"Print the total number of pairs for each testcase\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'mean': The average value of a set of numbers, calculated by summing all numbers and dividing by the count of numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    Input\n    4\n    4\n    8 8 8 8\n    Output\n    6\n    Explanation:\n    In this case, any pair of elements can be removed since all of them are equal. So, there are 6 possible pairs to remove.\n\n    Input\n    3\n    50 20 10\n    Output\n    0\n    Explanation:\n    There is no way to delete two elements so the mathematic mean doesn't change.\n\n    Input\n    5\n    1 4 7 3 5\n    Output\n    2\n    Explanation:\n    It is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 23)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    \n    total_sum = sum(arr)\n    k = total_sum / n\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - arr[i] - arr[j]) / (n - 2) == k:\n                count += 1\n    \n    print(count)\n"}}], "scores": [], "pass_results": [true, false, true, false, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 149, "prompt": "Monocarp's array a consists of n integers. Let's denote k as the average value of these elements (note that k might not be an integer).\n\nMonocarp is interested in removing exactly two entries from array a in a way that keeps the mean of the leftover (n - 2) items unchanged at k, which represents the mean of an n-sized array, defined by the sum of the elements divided by their count (i.e., sum divided by n).\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "mutate_method": "rephrase_one", "save_node": false, "parent_index": 103}
