{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing and has a one-minute songs, b two-minute songs, and c three-minute songs. He wants to make the absolute difference of durations of the concerts as small as possible, with the duration of the concert being the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider the edge cases where all songs have the same duration.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to make the absolute difference of durations of the concerts as small as possible by choosing the optimal number of one-minute, two-minute, and three-minute songs. Determine the minimal possible difference in minutes between the concerts durations, including the scenario where all songs have the same duration.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing and has a one-minute songs, b two-minute songs, and wants to make the absolute difference of durations of the concerts as small as possible, with the duration of the concert being the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider the edge cases where all songs have the same duration.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_duration(a, b, c)\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "completions": ["# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We need to find the combination that minimizes the absolute difference in durations\n    # The difference will be minimized when we evenly distribute the songs between the two concerts\n    # If all songs have the same duration, the difference will be 0\n    # Otherwise, we distribute the songs as evenly as possible\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    if total_duration % 2 == 1:\n        min_diff = min(min_diff, abs(half_duration + 1 - (a + 2*b)))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We need to find the combination that minimizes the absolute difference in durations\n    # The difference will be minimized when we evenly distribute the songs between the two concerts\n    # If the total duration is even, we can evenly distribute the songs, else we distribute them as evenly as possible\n    half_duration = total_duration // 2\n    if total_duration % 2 == 0:\n        min_diff = 0\n    else:\n        min_diff = min(abs(half_duration + 1 - total_duration), abs(half_duration - total_duration))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate all possible combinations and find the one closest to half_duration\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration = i + 2*j + 3*k\n                diff = abs(duration - half_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum duration of the concerts\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the minimum and maximum durations\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for the test case\n    print(abs_diff)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    duration_concert1 = a + b*2 + c*3\n    duration_concert2 = b + a*2 + c*3\n    \n    # Calculate the absolute difference in duration between the two concerts\n    absolute_difference = abs(duration_concert1 - duration_concert2)\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(absolute_difference)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We need to find the combination that minimizes the absolute difference in durations\n    # The difference can be minimized by distributing the songs as evenly as possible between the two concerts\n    # We can achieve this by distributing the songs with the highest duration first\n    # If all songs have the same duration, the difference will be 0\n    # If not, we can distribute the songs in a way that minimizes the difference\n    \n    # Calculate the difference in duration between the concerts\n    # The difference will be the absolute difference between the total duration of all songs and half of that total duration\n    # This is because we want to minimize the difference between the two concerts\n    difference = abs(total_duration - total_duration // 2)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(difference)\n\nmain()", "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate the minimal possible difference by trying all combinations\n    minimal_difference = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "from itertools import product\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Handle edge case where all songs have the same duration\n    if a == b == c:\n        print(0)\n    else:\n        min_diff = float('inf')\n        \n        # Generate all possible combinations of songs for each concert\n        for combo in product(range(a+1), range(b+1), range(c+1)):\n            duration_concert1 = combo[0] + 2*combo[1] + 3*combo[2]\n            duration_concert2 = (a-combo[0]) + 2*(b-combo[1]) + 3*(c-combo[2])\n            min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n        \n        print(min_diff)\n\nmain()", "def calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_duration(a, b, c)\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in duration between the two concerts\",\n    \"Find the minimal possible difference in minutes between the concerts durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of each concert by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for each concert using a recursive function\",\n    \"step_3\": \"Calculate the absolute difference in duration between the two concerts by subtracting the total duration of one concert from the other\",\n    \"step_4\": \"Find the minimal possible difference in minutes between the concerts durations by iterating through all possible combinations and keeping track of the minimum difference\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values, regardless of their order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible value among the options.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: In this case, Luntik can have one concert with a one-minute and a two-minute song, and another concert with a three-minute song. The difference will be 0.\n    \n    5 5 5\n    Output: 0\n    Explanation: All songs have the same duration, so Luntik can distribute them equally between the two concerts, resulting in a difference of 0.\n    \n    1 1 2\n    Output: 1\n    Explanation: Luntik can have one concert with two one-minute songs and one two-minute song, and another concert with one three-minute song. The difference will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers scenarios where all songs have the same duration.", "Round_0": {"code": "def calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_duration(a, b, c)\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_duration(a, b, c)\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs for each test case\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs for the test case\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference of durations': The difference between the total duration of songs in two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference in durations.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as per the plan.\n\n# [edge case] \n    1. 1 1 1\n       Expected Output: 0\n       Explanation: All songs have the same duration, so they can be evenly distributed between the two concerts resulting in 0 difference.\n       \n    2. 5 5 5\n       Expected Output: 0\n       Explanation: All songs have the same duration, so they can be evenly distributed between the two concerts resulting in 0 difference.\n       \n    3. 1 1 2\n       Expected Output: 1\n       Explanation: One two-minute song can be added to the first concert and the remaining songs can be added to the second concert, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to evenly distribute songs between concerts can handle scenarios where all songs have the same duration.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We need to find the combination that minimizes the absolute difference in durations\n    # The difference will be minimized when we evenly distribute the songs between the two concerts\n    # If all songs have the same duration, the difference will be 0\n    # Otherwise, we distribute the songs as evenly as possible\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We need to find the combination that minimizes the absolute difference in durations\n    # The difference will be minimized when we evenly distribute the songs between the two concerts\n    # If all songs have the same duration, the difference will be 0\n    # Otherwise, we distribute the songs as evenly as possible\n    min_diff = abs((total_duration + 1) // 2 - (total_duration // 2))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Calculate the total duration of each concert based on the number of one-minute, two-minute, and three-minute songs\",\n      \"Determine all possible combinations of songs for each concert\",\n      \"Calculate the absolute difference in duration between the two concerts for each combination\",\n      \"Find the minimum absolute difference among all combinations\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases from input\",\n      \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n      \"Calculate the total duration of each concert\",\n      \"Generate all possible combinations of songs for each concert\",\n      \"Calculate the absolute difference in duration between the two concerts for each combination\",\n      \"Find the minimum absolute difference among all combinations\",\n      \"Print the minimal possible difference in minutes between the concerts durations for each test case\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The difference between two values without considering the direction of the difference.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible value.\n\n# [code logic]\n    The major steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: In this case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    5 5 5 = 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios adequately.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    if total_duration % 2 == 1:\n        min_diff = min(min_diff, abs(half_duration + 1 - (a + 2*b)))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 25)"}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    min_diff = abs(half_duration - (a + 2*b))\n    if total_duration % 2 == 1:\n        min_diff = min(min_diff, abs(half_duration + 1 - (a + 2*b)))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs for each test case\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs for the test case\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts\",\n    \"Step 6\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference of durations': The difference between the total duration of songs in two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the absolute difference in durations.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as per the plan.\n\n# [edge case] \n    1. 1 1 1\n       Expected Output: 0\n       Explanation: All songs have the same duration, so they can be evenly distributed between the two concerts resulting in 0 difference.\n       \n    2. 5 5 5\n       Expected Output: 0\n       Explanation: All songs have the same duration, so they can be evenly distributed between the two concerts resulting in 0 difference.\n       \n    3. 1 1 2\n       Expected Output: 1\n       Explanation: One 1-minute and one 2-minute song can be in one concert, and the 2-minute song in the other concert, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to distribute songs evenly between concerts can handle cases where all songs have the same duration.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We need to find the combination that minimizes the absolute difference in durations\n    # The difference will be minimized when we evenly distribute the songs between the two concerts\n    # If the total duration is even, we can evenly distribute the songs, else we distribute them as evenly as possible\n    half_duration = total_duration // 2\n    if total_duration % 2 == 0:\n        min_diff = 0\n    else:\n        min_diff = min(abs(half_duration + 1 - total_duration), abs(half_duration - total_duration))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 30)"}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We need to find the combination that minimizes the absolute difference in durations\n    # The difference will be minimized when we evenly distribute the songs between the two concerts\n    # If the total duration is even, we can evenly distribute the songs, else we distribute them as evenly as possible\n    half_duration = total_duration // 2\n    if total_duration % 2 == 0:\n        min_diff = 0\n    else:\n        min_diff = min(abs(half_duration + 1 - total_duration), abs(half_duration - total_duration))\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the number of one-minute, two-minute, and three-minute songs\",\n    \"Determine all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in duration between the two concerts for each combination\",\n    \"Find the minimum absolute difference among all combinations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible combinations of songs for each concert\",\n    \"step_4\": \"Calculate the absolute difference in duration between the two concerts for each combination\",\n    \"step_5\": \"Find the minimum absolute difference among all combinations\",\n    \"step_6\": \"Output the minimal possible difference in minutes between the concerts durations for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The difference between two values without considering the direction of the difference.\n    'minimal possible difference': The smallest absolute difference that can be achieved.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum value.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve different calculations and comparisons.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    Input: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference between them is |7-6| = 1.\n    \n    Test Case 3:\n    Input: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally among the concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios effectively.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate all possible combinations and find the one closest to half_duration\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration = i + 2*j + 3*k\n                diff = abs(duration - half_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate all possible combinations and find the one closest to half_duration\n    min_diff = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                duration = i + 2*j + 3*k\n                diff = abs(duration - half_duration)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs for each test case\",\n    \"Determine the minimum and maximum duration of the concerts\",\n    \"Calculate the absolute difference between the minimum and maximum durations\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c)\",\n    \"Step 3\": \"Calculate the total duration of all songs for the test case (total_duration = a + 2*b + 3*c)\",\n    \"Step 4\": \"Determine the minimum and maximum duration of the concerts (min_duration = total_duration/2, max_duration = total_duration - min_duration)\",\n    \"Step 5\": \"Calculate the absolute difference between the minimum and maximum durations (abs_diff = |max_duration - min_duration|)\",\n    \"Step 6\": \"Print the absolute difference for the test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The difference between two values without considering which one is larger.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible value.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. All steps should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: All songs have the same duration, so Luntik can split them equally between the two concerts resulting in 0 difference.\n    \n    5 5 5\n    Output: 0\n    Explanation: All songs have the same duration, so Luntik can split them equally between the two concerts resulting in 0 difference.\n    \n    1 1 2\n    Output: 1\n    Explanation: In this case, Luntik can have one concert with two one-minute songs and one two-minute song, and the other concert with one three-minute song. The difference will be 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios where all songs have the same duration.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum duration of the concerts\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the minimum and maximum durations\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for the test case\n    print(abs_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the minimum and maximum duration of the concerts\n    min_duration = total_duration // 2\n    max_duration = total_duration - min_duration\n    \n    # Calculate the absolute difference between the minimum and maximum durations\n    abs_diff = abs(max_duration - min_duration)\n    \n    # Print the absolute difference for the test case\n    print(abs_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert by summing the durations of all songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c)\",\n    \"Step 3\": \"Calculate the total duration of each concert by summing the durations of all songs\",\n    \"Step 4\": \"Find all possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the absolute difference in duration between the two concerts\",\n    \"Step 6\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values without considering their direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest or least possible value.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. All steps should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: In this case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    5 5 5\n    Output: 0\n    Explanation: In this scenario, all songs have the same duration, so Luntik can distribute them equally between the two concerts resulting in a difference of 0.\n    \n    1 1 2\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song in the first concert, and a three-minute song in the second concert. The duration of the first concert will be 1 + 1 + 2 = 4, and the duration of the second concert will be 2. The absolute difference is |4 - 2| = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers scenarios where all songs have the same duration.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    duration_concert1 = a + b*2 + c*3\n    duration_concert2 = b + a*2 + c*3\n    \n    # Calculate the absolute difference in duration between the two concerts\n    absolute_difference = abs(duration_concert1 - duration_concert2)\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(absolute_difference)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    duration_concert1 = a + b*2 + c*3\n    duration_concert2 = b + a*2 + c*3\n    \n    # Calculate the absolute difference in duration between the two concerts\n    absolute_difference = abs(duration_concert1 - duration_concert2)\n    \n    # Print the minimal possible difference in minutes between the concerts durations\n    print(absolute_difference)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs for each test case\",\n    \"Determine the possible combinations of songs for each concert\",\n    \"Calculate the difference in duration between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs for the test case\",\n    \"Step 4\": \"Determine the possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the difference in duration between the concerts\",\n    \"Step 6\": \"Output the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference of durations': The difference between the total duration of songs in two concerts should be minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference in durations between the concerts.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve calculations based on previous results.\n\n# [edge case] \n    1. 1 1 1\n       Expected Output: 0\n       Explanation: All songs have the same duration, so they can be evenly distributed between the two concerts resulting in 0 difference.\n       \n    2. 5 5 5\n       Expected Output: 0\n       Explanation: All songs have the same duration, so they can be evenly distributed between the two concerts resulting in 0 difference.\n       \n    3. 1 1 2\n       Expected Output: 1\n       Explanation: One two-minute song can be added to the first concert and the remaining songs can be added to the second concert, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to evenly distribute songs between concerts can handle scenarios where all songs have the same duration.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We need to find the combination that minimizes the absolute difference in durations\n    # The difference can be minimized by distributing the songs as evenly as possible between the two concerts\n    # We can achieve this by distributing the songs with the highest duration first\n    # If all songs have the same duration, the difference will be 0\n    # If not, we can distribute the songs in a way that minimizes the difference\n    \n    # Calculate the difference in duration between the concerts\n    # The difference will be the absolute difference between the total duration of all songs and half of that total duration\n    # This is because we want to minimize the difference between the two concerts\n    difference = abs(total_duration - total_duration // 2)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(difference)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of all songs for the test case\n    total_duration = a + 2*b + 3*c\n    \n    # Determine the possible combinations of songs for each concert\n    # We need to find the combination that minimizes the absolute difference in durations\n    # The difference can be minimized by distributing the songs as evenly as possible between the two concerts\n    # We can achieve this by distributing the songs with the highest duration first\n    # If all songs have the same duration, the difference will be 0\n    # If not, we can distribute the songs in a way that minimizes the difference\n    \n    # Calculate the difference in duration between the concerts\n    # The difference will be the absolute difference between the total duration of all songs and half of that total duration\n    # This is because we want to minimize the difference between the two concerts\n    difference = abs(total_duration - total_duration // 2)\n    \n    # Output the minimal possible difference in minutes between the concerts durations\n    print(difference)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the number of one-minute, two-minute, and three-minute songs\",\n    \"Determine all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in duration between the two concerts for each combination\",\n    \"Find the combination that results in the minimal possible difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, parse the input to get the number of one-minute, two-minute, and three-minute songs\",\n    \"step_3\": \"Calculate the total duration of each concert by multiplying the number of songs by their respective durations\",\n    \"step_4\": \"Generate all possible combinations of songs for each concert\",\n    \"step_5\": \"Calculate the absolute difference in duration between the two concerts for each combination\",\n    \"step_6\": \"Find the combination that results in the minimal possible difference in duration\",\n    \"step_7\": \"Output the minimal possible difference in duration for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The difference between two values without considering the direction of the difference.\n    'minimal possible difference': The smallest absolute difference that can be achieved.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the smallest value.\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve calculations and comparisons that depend on previous results.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    Input: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference between them is |7-6| = 1.\n    \n    Test Case 3:\n    Input: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers scenarios where all songs have the same duration and calculates the minimal possible difference accordingly.", "Round_0": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate the minimal possible difference by trying all combinations\n    minimal_difference = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Function to calculate the minimal possible difference in minutes between the concerts durations\ndef calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    \n    # Calculate the minimal possible difference by trying all combinations\n    minimal_difference = float('inf')\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                difference = abs(concert1_duration - concert2_duration)\n                minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Input the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert by summing the durations of all songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in duration between the two concerts\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases (t)\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs (a, b, c)\",\n    \"Step 3\": \"Calculate the total duration of each concert by summing the durations of all songs\",\n    \"Step 4\": \"Find all possible combinations of songs for each concert\",\n    \"Step 5\": \"Calculate the absolute difference in duration between the two concerts\",\n    \"Step 6\": \"Print the minimal possible difference in minutes between the concerts durations\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values without considering their direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal possible': Indicates the smallest or minimum value that can be achieved.\n\n# [code logic]\n    The steps 3, 4, and 5 should be implemented simultaneously:\n    - Calculate the total duration of each concert by summing the durations of all songs\n    - Find all possible combinations of songs for each concert\n    - Calculate the absolute difference in duration between the two concerts\n\n    This can be achieved by generating all possible combinations of songs for each concert and calculating the total duration for each combination. Then, find the combination that minimizes the absolute difference between the two concerts' durations.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: Since all songs have the same duration, Luntik can distribute them equally between the two concerts, resulting in 0 difference.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song in one concert, and two three-minute songs in the other concert, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == b == c:\n            print(0)\n        else:\n            (other code)", "Round_0": {"code": "from itertools import product\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Handle edge case where all songs have the same duration\n    if a == b == c:\n        print(0)\n    else:\n        min_diff = float('inf')\n        \n        # Generate all possible combinations of songs for each concert\n        for combo in product(range(a+1), range(b+1), range(c+1)):\n            duration_concert1 = combo[0] + 2*combo[1] + 3*combo[2]\n            duration_concert2 = (a-combo[0]) + 2*(b-combo[1]) + 3*(c-combo[2])\n            min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n        \n        print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from itertools import product\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs\n    a, b, c = map(int, input().split())\n    \n    # Handle edge case where all songs have the same duration\n    if a == b == c:\n        print(0)\n    else:\n        min_diff = float('inf')\n        \n        # Generate all possible combinations of songs for each concert\n        for combo in product(range(a+1), range(b+1), range(c+1)):\n            duration_concert1 = combo[0] + 2*combo[1] + 3*combo[2]\n            duration_concert2 = (a-combo[0]) + 2*(b-combo[1]) + 3*(c-combo[2])\n            min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n        \n        print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible combinations of songs for each concert\",\n    \"Calculate the absolute difference in duration between the two concerts\",\n    \"Find the minimal possible difference in minutes between the concerts durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of each concert by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible combinations of songs for each concert using a recursive function\",\n    \"step_3\": \"Calculate the absolute difference in duration between the two concerts by subtracting the total duration of one concert from the other\",\n    \"step_4\": \"Find the minimal possible difference in minutes between the concerts durations by iterating through all possible combinations and keeping track of the minimum difference\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values, regardless of their order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible value among the options.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    1 1 1\n    Output: 0\n    Explanation: In this case, Luntik can have one concert with a one-minute and a two-minute song, and another concert with a three-minute song. The difference will be 0.\n    \n    5 5 5\n    Output: 0\n    Explanation: All songs have the same duration, so Luntik can distribute them equally between the two concerts, resulting in a difference of 0.\n    \n    1 1 2\n    Output: 1\n    Explanation: Luntik can have one concert with two one-minute songs and one two-minute song, and another concert with one three-minute song. The difference will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers scenarios where all songs have the same duration.", "Round_0": {"code": "def calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_duration(a, b, c)\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_duration(a, b, c):\n    return a + 2*b + 3*c\n\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_duration(a, b, c)\n    half_duration = total_duration // 2\n    \n    min_diff = abs(total_duration - 2*half_duration)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"}}], "scores": [], "pass_results": [false, false, false, false, true, true, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 151, "prompt": "Luntik has decided to try singing and has a one-minute songs, b two-minute songs, and c three-minute songs. He wants to make the absolute difference of durations of the concerts as small as possible, with the duration of the concert being the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider the edge cases where all songs have the same duration.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "save_node": false, "parent_index": 104}
