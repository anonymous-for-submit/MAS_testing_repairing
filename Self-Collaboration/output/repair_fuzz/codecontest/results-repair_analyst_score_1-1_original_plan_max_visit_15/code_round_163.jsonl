{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider all possible distributions to ensure accuracy in minimizing the difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. He wants to know the minimal possible difference in minutes between the concerts durations. Consider all possible distributions to ensure accuracy in minimizing the difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Luntik has decided to try singing and distribute his one-minute, two-minute, and three-minute songs into two concerts to minimize the absolute difference in concert durations. Please help him find the minimal possible difference in minutes between the concerts durations by considering all possible distributions.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                concert1_duration += j % 3 + 1\n            else:\n                concert2_duration += j % 3 + 1\n        \n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "completions": ["def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                concert1_duration += j+1\n            else:\n                concert2_duration += j+1\n        \n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n\nmain()", "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible distributions of songs into two concerts\n    for distribution in itertools.permutations([a, b, c]):\n        for i in range(1, 3):\n            concert1_duration = sum(distribution[:i])\n            concert2_duration = sum(distribution[i:])\n            diff = abs(concert1_duration - concert2_duration)\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(find_minimal_difference(a, b, c))\n\nmain()", "import itertools\n\ndef calculate_min_difference(a, b, c):\n    durations = [1] * a + [2] * b + [3] * c\n    total_duration = sum(durations)\n    \n    min_diff = float('inf')\n    for distribution in itertools.combinations(durations, len(durations)//2):\n        concert1_duration = sum(distribution)\n        concert2_duration = total_duration - concert1_duration\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    total_duration_concert1 = a + b + c\n    total_duration_concert2 = max(a, b, c) * 2 - total_duration_concert1\n    \n    # Calculate the minimal possible difference in durations\n    minimal_difference = abs(total_duration_concert1 - total_duration_concert2)\n    \n    # Output the minimal possible difference for each test case\n    print(minimal_difference)\n\nmain()", "from itertools import permutations\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in duration\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible permutations of songs\n    for perm in permutations([1]*a + [2]*b + [3]*c):\n        concert1 = sum(song for song in perm[:len(perm)//2])\n        concert2 = sum(song for song in perm[len(perm)//2:])\n        diff = abs(concert1 - concert2)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    total_duration_concert1 = a + b * 2 + c * 3\n    total_duration_concert2 = b + a * 2 + c * 3\n    \n    # Calculate the absolute difference in durations between the two concerts\n    min_diff = abs(total_duration_concert1 - total_duration_concert2)\n    \n    # Output the minimal possible difference for each test case\n    print(min_diff)\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimum possible difference in durations\n    # by distributing the songs as evenly as possible\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Output the minimal possible difference for each test case\n    print(min_diff)\n\nmain()", "from itertools import combinations\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in duration\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    half_duration = total_duration // 2\n    possible_differences = set()\n    \n    for i in range(1, min(a, half_duration) + 1):\n        for j in range(1, min(b, half_duration - i) + 1):\n            k = half_duration - i - j\n            if 0 < k <= c:\n                possible_differences.add(abs(total_duration - 2*(i + 2*j + 3*k)))\n    \n    return min(possible_differences)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n\nmain()", "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                concert1_duration += j % 3 + 1\n            else:\n                concert2_duration += j % 3 + 1\n        \n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible distributions of songs into two concerts\",\n    \"Calculate the duration of each concert for each distribution\",\n    \"Find the distribution that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n    \"step_3\": \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the smallest one\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The total length of songs in minutes.\n    'distributions': How the songs are split between two concerts.\n    Explanation: The core concept involves distributing songs to minimize the absolute difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to minimize the absolute difference in concert durations.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons to find the optimal distribution.\n\n# [edge case] \n    Case 1: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    \n    Case 2: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be |7-6| = 1.\n    \n    Case 3: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                concert1_duration += j % 3 + 1\n            else:\n                concert2_duration += j % 3 + 1\n        \n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 33)"}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                concert1_duration += j % 3 + 1\n            else:\n                concert2_duration += j % 3 + 1\n        \n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible distributions of songs into two concerts\",\n    \"Calculate the duration of each concert for each distribution\",\n    \"Find the distribution that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n    \"step_3\": \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the smallest one\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The total length of songs in minutes.\n    'distributions': How the songs are split between two concerts.\n    Explanation: The core concept involves distributing songs to minimize the difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the goal is to minimize the difference in concert durations.\n    Explanation: We need to find the distribution that results in the smallest absolute difference in concert durations.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations based on previous results.\n\n# [edge case] \n    1. 1 1 1\n       Expected output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert, resulting in a difference of 0.\n    2. 2 1 3\n       Expected output: 1\n       Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n    3. 5 5 5\n       Expected output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can handle all scenarios effectively.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                concert1_duration += j+1\n            else:\n                concert2_duration += j+1\n        \n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 32)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                concert1_duration += j+1\n            else:\n                concert2_duration += j+1\n        \n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(calculate_min_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Determine all possible distributions of songs into two concerts\",\n    \"Calculate the duration of each concert for each distribution\",\n    \"Find the minimal possible difference in minutes between the concerts durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible distributions of songs into two concerts by considering all permutations\",\n    \"step_3\": \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the minimal possible difference in minutes between the concerts durations by comparing the durations of the two concerts for each distribution\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distributions': Refers to the different ways the songs can be divided into two concerts to minimize the absolute difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible difference in minutes between the concerts durations.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations based on previous results.\n\n# [edge case] \n    Test Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Test Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Test Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible distributions of songs into two concerts\n    for distribution in itertools.permutations([a, b, c]):\n        for i in range(1, 3):\n            concert1_duration = sum(distribution[:i])\n            concert2_duration = sum(distribution[i:])\n            diff = abs(concert1_duration - concert2_duration)\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(find_minimal_difference(a, b, c))\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import itertools\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in minutes between the concerts durations\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible distributions of songs into two concerts\n    for distribution in itertools.permutations([a, b, c]):\n        for i in range(1, 3):\n            concert1_duration = sum(distribution[:i])\n            concert2_duration = sum(distribution[i:])\n            diff = abs(concert1_duration - concert2_duration)\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    \n    # Output\n    print(find_minimal_difference(a, b, c))\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible distributions of songs into two concerts\",\n    \"Calculate the duration of each concert for each distribution\",\n    \"Find the distribution that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n    \"step_3\": \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the minimum\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The total length of songs in minutes.\n    'distributions': How the songs are split between two concerts.\n    Explanation: The core concept involves distributing songs to minimize the absolute difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the goal is to minimize the difference in concert durations.\n    Explanation: We need to find the distribution that results in the smallest absolute difference in concert durations.\n\n# [code logic]\n    The steps should be implemented sequentially as each step builds upon the previous one.\n\n# [edge case] \n    1. 1 1 1\n       Expected output: 0\n       Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert, resulting in a difference of 0.\n    2. 2 1 3\n       Expected output: 1\n       Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be 1.\n    3. 5 5 5\n       Expected output: 0\n       Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should handle all scenarios effectively.", "Round_0": {"code": "import itertools\n\ndef calculate_min_difference(a, b, c):\n    durations = [1] * a + [2] * b + [3] * c\n    total_duration = sum(durations)\n    \n    min_diff = float('inf')\n    for distribution in itertools.combinations(durations, len(durations)//2):\n        concert1_duration = sum(distribution)\n        concert2_duration = total_duration - concert1_duration\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "import itertools\n\ndef calculate_min_difference(a, b, c):\n    durations = [1] * a + [2] * b + [3] * c\n    total_duration = sum(durations)\n    \n    min_diff = float('inf')\n    for distribution in itertools.combinations(durations, len(durations)//2):\n        concert1_duration = sum(distribution)\n        concert2_duration = total_duration - concert1_duration\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible distributions of songs into two concerts\",\n    \"Calculate the duration of each concert for each distribution\",\n    \"Find the distribution that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n    \"step_3\": \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the smallest one\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The total length of songs in minutes.\n    'distributions': How the songs are split between two concerts.\n    Explanation: The core concept involves calculating the total duration of songs, generating all possible distributions of songs into two concerts, and finding the distribution that minimizes the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as they involve distinct calculations and comparisons.\n\n# [edge case] \n    Case 1: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    \n    Case 2: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    \n    Case 3: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in the same duration for both concerts.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 28)"}, "Round_1": {"code": "def calculate_min_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible distributions of songs between the two concerts\",\n    \"Calculate the absolute difference in durations between the two concerts for each distribution\",\n    \"Identify the minimal possible difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible distributions of songs between the two concerts\",\n    \"step_4\": \"Calculate the absolute difference in durations for each distribution\",\n    \"step_5\": \"Identify the minimal possible difference in durations\",\n    \"step_6\": \"Output the minimal possible difference for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values without considering their direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible value among the options.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    Case 1: \n    1 1 1\n    Output: 0\n    Explanation: In this case, Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n    \n    Case 2: \n    2 1 3\n    Output: 1\n    Explanation: Luntik can distribute the songs to minimize the difference between the concert durations, resulting in a minimal difference of 1.\n    \n    Case 3: \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios effectively.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    total_duration_concert1 = a + b + c\n    total_duration_concert2 = max(a, b, c) * 2 - total_duration_concert1\n    \n    # Calculate the minimal possible difference in durations\n    minimal_difference = abs(total_duration_concert1 - total_duration_concert2)\n    \n    # Output the minimal possible difference for each test case\n    print(minimal_difference)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    total_duration_concert1 = a + b + c\n    total_duration_concert2 = max(a, b, c) * 2 - total_duration_concert1\n    \n    # Calculate the minimal possible difference in durations\n    minimal_difference = abs(total_duration_concert1 - total_duration_concert2)\n    \n    # Output the minimal possible difference for each test case\n    print(minimal_difference)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Find all possible distributions of songs into two concerts\",\n    \"Calculate the difference in duration between the two concerts for each distribution\",\n    \"Find the minimal possible difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Find all possible distributions of songs into two concerts\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts for each distribution\",\n    \"Step 6\": \"Find the minimal possible difference in duration\",\n    \"Step 7\": \"Output the minimal possible difference for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distributions': It refers to the different ways of dividing the songs into two concerts to minimize the absolute difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible difference in minutes between the concerts durations.\n\n# [code logic]\n    The steps 4 and 5 should be implemented simultaneously:\n    \"Find all possible distributions of songs into two concerts\",\n    \"Calculate the difference in duration between the two concerts for each distribution\"\n    This can be achieved by generating all possible combinations of songs for the two concerts and calculating the duration difference for each combination.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: In this case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be equal to 0.\n    2 1 3 = 1\n    Explanation: Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n    5 5 5 = 0\n    Explanation: Luntik can distribute the songs equally into two concerts, resulting in a difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find all possible distributions and calculate the minimal difference should cover all scenarios.", "Round_0": {"code": "from itertools import permutations\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in duration\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible permutations of songs\n    for perm in permutations([1]*a + [2]*b + [3]*c):\n        concert1 = sum(song for song in perm[:len(perm)//2])\n        concert2 = sum(song for song in perm[len(perm)//2:])\n        diff = abs(concert1 - concert2)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "from itertools import permutations\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in duration\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    min_diff = float('inf')\n    \n    # Generate all possible permutations of songs\n    for perm in permutations([1]*a + [2]*b + [3]*c):\n        concert1 = sum(song for song in perm[:len(perm)//2])\n        concert2 = sum(song for song in perm[len(perm)//2:])\n        diff = abs(concert1 - concert2)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible distributions of songs between the two concerts\",\n    \"Calculate the absolute difference in durations between the two concerts for each distribution\",\n    \"Identify the minimal possible difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible distributions of songs between the two concerts\",\n    \"step_4\": \"Calculate the absolute difference in durations for each distribution\",\n    \"step_5\": \"Identify the minimal possible difference in durations\",\n    \"step_6\": \"Output the minimal possible difference for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values without considering their direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible value among the options.\n\n# [code logic]\n    There are no steps that should be implemented simultaneously. Each step should be executed sequentially as outlined in the plan.\n\n# [edge case] \n    Case 1:\n    1 1 1\n    Output:\n    0\n    Explanation: In this case, Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n    \n    Case 2:\n    2 1 3\n    Output:\n    1\n    Explanation: Luntik can distribute the songs in a way that the first concert has 1 + 1 + 2 + 3 = 7 minutes and the second concert has 6 minutes, resulting in a minimal difference of 1.\n    \n    Case 3:\n    5 5 5\n    Output:\n    0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios effectively.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    total_duration_concert1 = a + b * 2 + c * 3\n    total_duration_concert2 = b + a * 2 + c * 3\n    \n    # Calculate the absolute difference in durations between the two concerts\n    min_diff = abs(total_duration_concert1 - total_duration_concert2)\n    \n    # Output the minimal possible difference for each test case\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    total_duration_concert1 = a + b * 2 + c * 3\n    total_duration_concert2 = b + a * 2 + c * 3\n    \n    # Calculate the absolute difference in durations between the two concerts\n    min_diff = abs(total_duration_concert1 - total_duration_concert2)\n    \n    # Output the minimal possible difference for each test case\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of each concert based on the given number of one-minute, two-minute, and three-minute songs\",\n    \"Find all possible distributions of songs between the two concerts\",\n    \"Calculate the absolute difference in durations between the two concerts for each distribution\",\n    \"Identify the minimal possible difference in durations\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to get the number of test cases\",\n    \"step_2\": \"For each test case, calculate the total duration of each concert\",\n    \"step_3\": \"Generate all possible distributions of songs between the two concerts\",\n    \"step_4\": \"Calculate the absolute difference in durations for each distribution\",\n    \"step_5\": \"Identify the minimal possible difference in durations\",\n    \"step_6\": \"Output the minimal possible difference for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values without considering their direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible value among the options.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations that depend on previous results.\n\n# [edge case] \n    Case 1: \n    1 1 1\n    Output: 0\n    Explanation: In this case, Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n    \n    Case 2: \n    2 1 3\n    Output: 1\n    Explanation: Luntik can distribute the songs in a way that the first concert has 1 + 1 + 2 + 3 = 7 minutes and the second concert has 6 minutes, resulting in a minimal difference of 1.\n    \n    Case 3: \n    5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the scenarios effectively.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimum possible difference in durations\n    # by distributing the songs as evenly as possible\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Output the minimal possible difference for each test case\n    print(min_diff)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate over each test case\nfor _ in range(t):\n    # Read the input for each test case\n    a, b, c = map(int, input().split())\n    \n    # Calculate the total duration of each concert\n    total_duration = a + 2*b + 3*c\n    \n    # Calculate the minimum possible difference in durations\n    # by distributing the songs as evenly as possible\n    min_diff = abs(total_duration // 2 - (a + b + c))\n    \n    # Output the minimal possible difference for each test case\n    print(min_diff)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Find all possible distributions of songs into two concerts\",\n    \"Calculate the difference in duration between the two concerts for each distribution\",\n    \"Find the minimal possible difference in duration\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Read the number of test cases\",\n    \"Step 2\": \"For each test case, read the number of one-minute, two-minute, and three-minute songs\",\n    \"Step 3\": \"Calculate the total duration of all songs\",\n    \"Step 4\": \"Find all possible distributions of songs into two concerts\",\n    \"Step 5\": \"Calculate the difference in duration between the two concerts for each distribution\",\n    \"Step 6\": \"Find the minimal possible difference in duration\",\n    \"Step 7\": \"Output the minimal possible difference for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distributions': It refers to the different ways of dividing the songs into two concerts to minimize the absolute difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible difference in minutes between the concerts durations.\n\n# [code logic]\n    The steps 4 and 5 should be implemented simultaneously:\n    \"Find all possible distributions of songs into two concerts\",\n    \"Calculate the difference in duration between the two concerts for each distribution\"\n    This can be achieved by generating all possible combinations of songs for the two concerts and calculating the duration difference for each combination.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: Since all songs have the same duration, they can be evenly distributed between the two concerts resulting in 0 difference.\n    2 1 3 = 1\n    Explanation: One possible distribution is [2, 1] and [3], resulting in a difference of 1 minute.\n    5 5 5 = 0\n    Explanation: All songs have the same duration, so they can be evenly distributed between the two concerts resulting in 0 difference.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "from itertools import combinations\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in duration\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    half_duration = total_duration // 2\n    possible_differences = set()\n    \n    for i in range(1, min(a, half_duration) + 1):\n        for j in range(1, min(b, half_duration - i) + 1):\n            k = half_duration - i - j\n            if 0 < k <= c:\n                possible_differences.add(abs(total_duration - 2*(i + 2*j + 3*k)))\n    \n    return min(possible_differences)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 35)"}, "Round_1": {"code": "from itertools import combinations\n\n# Function to calculate the total duration of all songs\ndef calculate_total_duration(a, b, c):\n    return a + 2*b + 3*c\n\n# Function to find the minimal possible difference in duration\ndef find_minimal_difference(a, b, c):\n    total_duration = calculate_total_duration(a, b, c)\n    half_duration = total_duration // 2\n    possible_differences = set()\n    \n    for i in range(1, min(a, half_duration) + 1):\n        for j in range(1, min(b, half_duration - i) + 1):\n            k = half_duration - i - j\n            if 0 < k <= c:\n                possible_differences.add(abs(total_duration - 2*(i + 2*j + 3*k)))\n    \n    return min(possible_differences)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Calculate the total duration of all songs\",\n    \"Generate all possible distributions of songs into two concerts\",\n    \"Calculate the duration of each concert for each distribution\",\n    \"Find the distribution that minimizes the absolute difference in durations between the concerts\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Calculate the total duration of all songs by multiplying the number of songs by their respective durations\",\n    \"step_2\": \"Generate all possible distributions of songs into two concerts by iterating through all possible combinations of songs\",\n    \"step_3\": \"Calculate the duration of each concert for each distribution by summing the durations of the songs in each concert\",\n    \"step_4\": \"Find the distribution that minimizes the absolute difference in durations between the concerts by comparing the differences and selecting the smallest one\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'durations': The total length of songs in minutes.\n    'distributions': How the songs are split between two concerts.\n    Explanation: The core concept involves distributing songs to minimize the absolute difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to minimize the absolute difference in concert durations.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve calculations and comparisons to find the optimal distribution.\n\n# [edge case] \n    Case 1: 1 1 1\n    Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    \n    Case 2: 2 1 3\n    Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be |7-6| = 1.\n    \n    Case 3: 5 5 5\n    Output: 0\n    Explanation: Luntik can distribute the songs equally between the two concerts, resulting in a minimal difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.", "Round_0": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                concert1_duration += j % 3 + 1\n            else:\n                concert2_duration += j % 3 + 1\n        \n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 33)"}, "Round_1": {"code": "def calculate_minimal_difference(a, b, c):\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(2**(a+b+c)):\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(a+b+c):\n            if i & (1 << j):\n                concert1_duration += j % 3 + 1\n            else:\n                concert2_duration += j % 3 + 1\n        \n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"}}], "scores": [], "pass_results": [false, true, true, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 163, "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider all possible distributions to ensure accuracy in minimizing the difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "save_node": true, "parent_index": 5}
