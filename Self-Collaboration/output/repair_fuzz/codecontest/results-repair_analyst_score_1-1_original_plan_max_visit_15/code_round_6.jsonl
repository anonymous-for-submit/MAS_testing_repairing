{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "repair_prompt": ["Petya has got an interesting flower. Petya is a busy person. He sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Petya has got an interesting flower, but with his busy schedule, he sometimes forgets to water it leading to its demise if left unwatered for two consecutive days. You are given n days to determine the final height of the flower considering the specific growth rules.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "Petya has an interesting flower but is sometimes forgetful about watering it, you are given n days to determine the fate of the flower's height evolution.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "def calculate_flower_height(n, days):\n    if n == 1 and days[0] == 0:\n        return 1\n    elif n == 2 and days[0] == 1 and days[1] == 1:\n        return 6\n    \n    height = 1\n    for i in range(1, n):\n        if days[i] == 1 and days[i-1] == 1:\n            height += 5\n        else:\n            height += 1\n        \n        if days[i] == 0 and days[i-1] == 0:\n            return -1\n    \n    return height\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    \n    result = calculate_flower_height(n, days)\n    print(result)\n\nmain()", "completions": ["def calculate_flower_height(n, watering_pattern):\n    height = 1\n    consecutive_days_without_water = 0\n\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            if i > 0 and watering_pattern[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days_without_water = 0\n        else:\n            consecutive_days_without_water += 1\n            if consecutive_days_without_water == 2:\n                return -1\n\n    return height\n\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the number of days and the watering pattern\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n\n    # Calculate the flower's height after n days\n    result = calculate_flower_height(n, watering_pattern)\n\n    # Output the result\n    print(result)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_pattern = test_cases[_][1]\n        \n        height = 0\n        for i in range(n):\n            if watering_pattern[i] == 1:\n                height += 1\n        \n        if height == 0:\n            print(-1)\n        else:\n            print(height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    test_cases.append((n, watering_pattern))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    \n    height = 0\n    survived = True\n    \n    for day in range(n):\n        if watering_pattern[day] == 1:\n            height += 1\n        else:\n            height -= 1\n        \n        if height < 0:\n            survived = False\n            break\n    \n    if survived:\n        print(height)\n    else:\n        print(-1)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    def calculate_height(days, schedule):\n        height = 0\n        consecutive_unwatered_days = 0\n        \n        for i in range(days):\n            if schedule[i] == 1:\n                height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    return -1\n                \n        return height\n    \n    for _ in range(t):\n        days = test_cases[_][0]\n        schedule = test_cases[_][1]\n        \n        height = calculate_height(days, schedule)\n        print(height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    schedule = list(map(int, input().split()))\n    test_cases.append((n, schedule))\n\n# Output\ncalculate_flower_height(t, test_cases)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    result = []\n    \n    for i in range(t):\n        n = test_cases[i][0]\n        watering_pattern = test_cases[i][1]\n        \n        height = 1\n        for j in range(n):\n            if watering_pattern[j] == 1:\n                height += 2\n            else:\n                height -= 1\n            if height <= 0:\n                height = -1\n                break\n        \n        result.append(height)\n    \n    return result\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    test_cases.append((n, watering_pattern))\n\n# Calculate and output result\nresult = calculate_flower_height(t, test_cases)\nfor res in result:\n    print(res)\n\nmain()", "def calculate_flower_height(test_cases):\n    for _ in range(test_cases):\n        n = int(input())\n        watering_status = list(map(int, input().split()))\n        \n        height = 0\n        consecutive_unwatered_days = 0\n        \n        for status in watering_status:\n            if status == 1:\n                height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        print(height)\n\n# Read the number of test cases\ntest_cases = int(input())\ncalculate_flower_height(test_cases)\n\nmain()", "def calculate_flower_height(n, watering_pattern):\n    height = 1\n    consecutive_days_not_watered = 0\n\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            if i > 0 and watering_pattern[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days_not_watered = 0\n        else:\n            consecutive_days_not_watered += 1\n            if consecutive_days_not_watered == 2:\n                return -1\n\n    return height\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    result = calculate_flower_height(n, watering_pattern)\n    print(result)\n\nmain()", "def calculate_flower_height(t, test_cases):\n    for i in range(t):\n        n = test_cases[i][0]\n        watering_pattern = test_cases[i][1]\n        \n        consecutive_unwatered_days = 0\n        height = 0\n        \n        for j in range(n):\n            if watering_pattern[j] == 1:\n                height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    print(-1)\n                    break\n                height += 1\n        \n        if consecutive_unwatered_days < 2:\n            print(height)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    test_cases.append((n, watering_pattern))\n\n# Calculate and output flower height\ncalculate_flower_height(t, test_cases)\n\nmain()", "def calculate_flower_height(n, days):\n    if n == 1:\n        return 1\n    elif n == 2:\n        if days[0] == 1 and days[1] == 1:\n            return 6\n        else:\n            return 1\n    else:\n        height = 1\n        for i in range(2, n):\n            if days[i] == 1 and days[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n            if days[i] == 0 and days[i-1] == 0:\n                return -1\n        return height\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    result = calculate_flower_height(n, days)\n    print(result)\n\nmain()", "def calculate_flower_height(n, days):\n    if n == 1 and days[0] == 0:\n        return 1\n    elif n == 2 and days[0] == 1 and days[1] == 1:\n        return 6\n    \n    height = 1\n    for i in range(1, n):\n        if days[i] == 1 and days[i-1] == 1:\n            height += 5\n        else:\n            height += 1\n        \n        if days[i] == 0 and days[i-1] == 0:\n            return -1\n    \n    return height\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    \n    result = calculate_flower_height(n, days)\n    print(result)\n\nmain()"], "session_history": {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Initialize the height of the flower to 1 centimeter\",\n      \"Iterate through the n days\",\n      \"Check if the flower is watered on the current day and the previous day\",\n      \"Update the height of the flower based on the watering conditions\",\n      \"If the flower dies, output -1, otherwise output the final height of the flower\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower grows based on specific watering conditions and its height changes accordingly.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps do not need to be implemented simultaneously. Each step should be executed sequentially as described in the plan.\n\n# [edge case] \n    n = 1\n    0\n    Explanation: If there is only one day and the flower is not watered, the flower's height remains 1 centimeter.\n    n = 2\n    6\n    Explanation: If the flower is watered on both days, it grows by 5 centimeters each day, resulting in a total height of 6 centimeters.\n    n = 3\n    -1\n    Explanation: If the flower is not watered for two consecutive days, it dies.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1 and a[0] == 0:\n            return 1\n        elif n == 2 and a[0] == 1 and a[1] == 1:\n            return 6\n        (other code)\n\nNO", "Round_0": {"code": "def calculate_flower_height(n, days):\n    if n == 1 and days[0] == 0:\n        return 1\n    elif n == 2 and days[0] == 1 and days[1] == 1:\n        return 6\n    \n    height = 1\n    for i in range(1, n):\n        if days[i] == 1 and days[i-1] == 1:\n            height += 5\n        else:\n            height += 1\n        \n        if days[i] == 0 and days[i-1] == 0:\n            return -1\n    \n    return height\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    \n    result = calculate_flower_height(n, days)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(n, days):\n    if n == 1 and days[0] == 0:\n        return 1\n    elif n == 2 and days[0] == 1 and days[1] == 1:\n        return 6\n    \n    height = 1\n    for i in range(1, n):\n        if days[i] == 1 and days[i-1] == 1:\n            height += 5\n        else:\n            height += 1\n        \n        if days[i] == 0 and days[i-1] == 0:\n            return -1\n    \n    return height\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    \n    result = calculate_flower_height(n, days)\n    print(result)\n"}}, "session_historys": [{"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine the height of the flower after n days based on the watering pattern\",\n      \"Handle the case where the flower dies if not watered for two days in a row\"\n    ],\n    \"steps\": [\n      \"Read the number of test cases t\",\n      \"For each test case, read the number of days n and the watering pattern\",\n      \"Iterate through each day and update the height of the flower based on the watering pattern\",\n      \"Check if the flower dies due to not being watered for two days in a row\",\n      \"Output the final height of the flower or -1 if it dies\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'watered': means the flower is given water\n    'dies': means the flower stops growing and eventually dies\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The step 3 and 4 should be implement simultaneously\n    \"Iterate through each day and update the height of the flower based on the watering pattern\",\n    \"Check if the flower dies due to not being watered for two days in a row\"\n    This could be done by using a loop to iterate through each day, updating the height based on the watering pattern, and checking for consecutive days without watering.\n\n# [edge case] \n    4\n    1 0 1\n    Output: 3\n    Explanation: The flower is watered on the 1st and 3rd day, so it grows by 1 cm and 5 cm respectively, resulting in a total height of 3 cm.\n    \n    3\n    0 1 1\n    Output: 7\n    Explanation: The flower is watered on the 2nd and 3rd day, growing by 5 cm each day, resulting in a total height of 7 cm.\n    \n    1\n    0\n    Output: 1\n    Explanation: The flower is not watered, so it remains at 1 cm height.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1:\n            return 1\n        if n == 2 and a[0] == 0 and a[1] == 0:\n            return -1\n        (other code)\n\nNO", "Round_0": {"code": "def calculate_flower_height(n, watering_pattern):\n    height = 1\n    consecutive_days_without_water = 0\n\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            if i > 0 and watering_pattern[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days_without_water = 0\n        else:\n            consecutive_days_without_water += 1\n            if consecutive_days_without_water == 2:\n                return -1\n\n    return height\n\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the number of days and the watering pattern\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n\n    # Calculate the flower's height after n days\n    result = calculate_flower_height(n, watering_pattern)\n\n    # Output the result\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(n, watering_pattern):\n    height = 1\n    consecutive_days_without_water = 0\n\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            if i > 0 and watering_pattern[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days_without_water = 0\n        else:\n            consecutive_days_without_water += 1\n            if consecutive_days_without_water == 2:\n                return -1\n\n    return height\n\n# Read the number of test cases\nt = int(input())\n\nfor _ in range(t):\n    # Read the number of days and the watering pattern\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n\n    # Calculate the flower's height after n days\n    result = calculate_flower_height(n, watering_pattern)\n\n    # Output the result\n    print(result)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the details of each test case\",\n      \"For each test case, calculate the height of the flower after n days based on the watering pattern\",\n      \"Handle the case where the flower dies (-1 height)\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases from input\",\n      \"For each test case, read the number of days and the watering pattern\",\n      \"Calculate the height of the flower after n days based on the watering pattern\",\n      \"Output the height of the flower or -1 if it dies\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower height evolution'\n    Explanation: The core concept is to determine the height evolution of a flower based on the watering pattern.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The major steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    4\n    explanation: The flower is watered on all 3 days, so the height after 3 days is 3.\n    1\n    explanation: The flower is not watered, so the height remains 1.\n    5\n    explanation: The flower is watered on all 4 days, so the height after 4 days is 4.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not n:\n            return -1\n        (other code)\n\nNO", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_pattern = test_cases[_][1]\n        \n        height = 0\n        for i in range(n):\n            if watering_pattern[i] == 1:\n                height += 1\n        \n        if height == 0:\n            print(-1)\n        else:\n            print(height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    test_cases.append((n, watering_pattern))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 41)"}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for _ in range(t):\n        n = test_cases[_][0]\n        watering_pattern = test_cases[_][1]\n        \n        height = 0\n        for i in range(n):\n            if watering_pattern[i] == 1:\n                height += 1\n        \n        if height == 0:\n            print(-1)\n        else:\n            print(height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    test_cases.append((n, watering_pattern))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the details of each test case\",\n      \"For each test case, calculate the height of the flower after n days based on the watering pattern\",\n      \"Handle the case where the flower dies (-1 height)\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases from input\",\n      \"For each test case:\",\n      \"  - Read the number of days n and the watering pattern\",\n      \"  - Calculate the height of the flower after n days based on the watering pattern\",\n      \"  - Print the height of the flower or -1 if it dies\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'watered': means the flower is given water\n    'flower dies': means the flower does not survive due to lack of water\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The major steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    4\n    3\n    1 0 1\n    Output\n    3\n    Explanation: The flower is watered on the 1st and 3rd day, so it survives and its height is 3.\n    \n    3\n    0 1 1\n    Output\n    7\n    Explanation: The flower is watered on the 2nd and 3rd day, so it survives and its height is 7.\n    \n    1\n    0\n    Output\n    1\n    Explanation: The flower is not watered, but it survives and its height is 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1 and a[0] == 0:\n            print(1)\n        (other code)\n\nNO", "Round_0": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    \n    height = 0\n    survived = True\n    \n    for day in range(n):\n        if watering_pattern[day] == 1:\n            height += 1\n        else:\n            height -= 1\n        \n        if height < 0:\n            survived = False\n            break\n    \n    if survived:\n        print(height)\n    else:\n        print(-1)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    \n    height = 0\n    survived = True\n    \n    for day in range(n):\n        if watering_pattern[day] == 1:\n            height += 1\n        else:\n            height -= 1\n        \n        if height < 0:\n            survived = False\n            break\n    \n    if survived:\n        print(height)\n    else:\n        print(-1)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the details of each test case\",\n      \"For each test case, calculate the final height of the flower based on the watering schedule\",\n      \"Handle the case where the flower dies if left unwatered for two consecutive days\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases from the input\",\n      \"For each test case, read the number of days and the watering schedule\",\n      \"Calculate the final height of the flower based on the watering schedule\",\n      \"Output the final height of the flower or -1 if the flower dies\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'watered': It indicates whether the flower is watered on a specific day.\n    'flower dies if left unwatered for two consecutive days': If the flower is not watered for two consecutive days, it will die.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The major steps should be implemented step by step as they are distinct actions.\n\n# [edge case] \n    4\n    3\n    1 0 1\n    Output\n    3\n    Explanation: The flower is watered on the first and third days, so it survives and grows to a height of 3.\n    \n    3\n    0 1 1\n    Output\n    7\n    Explanation: The flower is watered on all days, so it survives and grows to a height of 7.\n    \n    4\n    1 0 0 1\n    Output\n    -1\n    Explanation: The flower is not watered on the second and third days consecutively, leading to its demise.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        for i in range(1, len(a)):\n            if a[i] == 0 and a[i-1] == 0:\n                return -1\n        (other code)\n\nNO", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    def calculate_height(days, schedule):\n        height = 0\n        consecutive_unwatered_days = 0\n        \n        for i in range(days):\n            if schedule[i] == 1:\n                height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    return -1\n                \n        return height\n    \n    for _ in range(t):\n        days = test_cases[_][0]\n        schedule = test_cases[_][1]\n        \n        height = calculate_height(days, schedule)\n        print(height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    schedule = list(map(int, input().split()))\n    test_cases.append((n, schedule))\n\n# Output\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 49)"}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    def calculate_height(days, schedule):\n        height = 0\n        consecutive_unwatered_days = 0\n        \n        for i in range(days):\n            if schedule[i] == 1:\n                height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    return -1\n                \n        return height\n    \n    for _ in range(t):\n        days = test_cases[_][0]\n        schedule = test_cases[_][1]\n        \n        height = calculate_height(days, schedule)\n        print(height)\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    schedule = list(map(int, input().split()))\n    test_cases.append((n, schedule))\n\n# Output\ncalculate_flower_height(t, test_cases)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the details of each test case\",\n      \"For each test case, calculate the height of the flower after n days based on the watering pattern\",\n      \"Handle the case where the flower dies (-1 height)\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases from input\",\n      \"For each test case, read the number of days and the watering pattern\",\n      \"Calculate the height of the flower after n days based on the watering pattern\",\n      \"Output the height of the flower or -1 if it dies\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower height evolution'\n    Explanation: The core concept is to determine the height evolution of a flower based on the watering pattern.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The major steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    4\n    1\n    0\n    1\n    0\n    Explanation:\n    For the first test case, the flower is watered on the 1st and 3rd day, so the height after 3 days is 3.\n    For the second test case, the flower is watered on the 2nd and 3rd day, so the height after 3 days is 7.\n    For the third test case, the flower is watered on the 1st and 4th day, so the height after 4 days is -1.\n    For the fourth test case, the flower is not watered, so the height after 1 day is 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not n:\n            return -1\n        (other code)\n\nNO", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    result = []\n    \n    for i in range(t):\n        n = test_cases[i][0]\n        watering_pattern = test_cases[i][1]\n        \n        height = 1\n        for j in range(n):\n            if watering_pattern[j] == 1:\n                height += 2\n            else:\n                height -= 1\n            if height <= 0:\n                height = -1\n                break\n        \n        result.append(height)\n    \n    return result\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    test_cases.append((n, watering_pattern))\n\n# Calculate and output result\nresult = calculate_flower_height(t, test_cases)\nfor res in result:\n    print(res)\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 40)"}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    result = []\n    \n    for i in range(t):\n        n = test_cases[i][0]\n        watering_pattern = test_cases[i][1]\n        \n        height = 1\n        for j in range(n):\n            if watering_pattern[j] == 1:\n                height += 2\n            else:\n                height -= 1\n            if height <= 0:\n                height = -1\n                break\n        \n        result.append(height)\n    \n    return result\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    test_cases.append((n, watering_pattern))\n\n# Calculate and output result\nresult = calculate_flower_height(t, test_cases)\nfor res in result:\n    print(res)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Read the number of test cases\",\n      \"For each test case, read the number of days and the watering status for each day\",\n      \"Calculate the final height of the flower based on the watering status\",\n      \"Print the final height or -1 if the flower dies\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases\",\n      \"For each test case, read the number of days and the watering status for each day\",\n      \"Initialize a variable to store the height of the flower\",\n      \"Iterate through the watering status for each day\",\n      \"If the flower is watered, increase the height by 1\",\n      \"If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop\",\n      \"Print the final height of the flower\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'watered': means the flower is given water on that day\n    'unwatered': means the flower is not given water on that day\n    'height': refers to the growth of the flower\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps 5 and 6 should be implemented simultaneously:\n    \"If the flower is watered, increase the height by 1\",\n    \"If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop\"\n    This could be done by keeping track of the consecutive unwatered days and updating the height accordingly.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1\n    1\n    1\n    Output:\n    1\n    Explanation:\n    The flower is watered on the only day, so the height after 1 day is 1.\n\n    Test Case 2:\n    Input:\n    2\n    2\n    0 0\n    3\n    1 0 0\n    Output:\n    -1\n    1\n    Explanation:\n    In the first test case, the flower dies as it is not watered for two consecutive days.\n    In the second test case, the flower is watered on the first day, so the height after 3 days is 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        To handle the case where the flower is not watered for two consecutive days, we can introduce a variable to keep track of consecutive unwatered days. If it reaches 2, we set the height to -1 and break out of the loop.\n        (code for handling the edge case)", "Round_0": {"code": "def calculate_flower_height(test_cases):\n    for _ in range(test_cases):\n        n = int(input())\n        watering_status = list(map(int, input().split()))\n        \n        height = 0\n        consecutive_unwatered_days = 0\n        \n        for status in watering_status:\n            if status == 1:\n                height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        print(height)\n\n# Read the number of test cases\ntest_cases = int(input())\ncalculate_flower_height(test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(test_cases):\n    for _ in range(test_cases):\n        n = int(input())\n        watering_status = list(map(int, input().split()))\n        \n        height = 0\n        consecutive_unwatered_days = 0\n        \n        for status in watering_status:\n            if status == 1:\n                height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        print(height)\n\n# Read the number of test cases\ntest_cases = int(input())\ncalculate_flower_height(test_cases)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine the height of the flower after each day based on the watering pattern\",\n      \"Check if the flower dies if not watered for two days in a row\"\n    ],\n    \"steps\": [\n      \"Initialize the height of the flower to 1 centimeter\",\n      \"Iterate through each day and update the height of the flower based on the watering pattern\",\n      \"Check if the flower dies if not watered for two days in a row\",\n      \"Output the final height of the flower after n days or -1 if the flower dies\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower grows based on specific watering patterns and conditions mentioned in the requirement.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The step 3 and 4 should be implemented simultaneously:\n    \"Check if the flower dies if not watered for two days in a row\",\n    \"Output the final height of the flower after n days or -1 if the flower dies\"\n    This can be done by keeping track of the consecutive days the flower is not watered and updating the height accordingly.\n\n# [edge case] \n    4\n    0 0 0 0\n    Expected Output: -1\n    Explanation: The flower is not watered for two days in a row on the 2nd and 3rd day, so it dies.\n    \n    5\n    1 0 0 1 0\n    Expected Output: 6\n    Explanation: The flower grows by 1 centimeter on the 1st, 4th, and 5th day, and by 5 centimeters on the 4th day due to watering on the 3rd day.\n\n    3\n    1 1 0\n    Expected Output: 7\n    Explanation: The flower grows by 1 centimeter on the 1st and 2nd day, and by 5 centimeters on the 2nd day due to watering on the 1st day.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)", "Round_0": {"code": "def calculate_flower_height(n, watering_pattern):\n    height = 1\n    consecutive_days_not_watered = 0\n\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            if i > 0 and watering_pattern[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days_not_watered = 0\n        else:\n            consecutive_days_not_watered += 1\n            if consecutive_days_not_watered == 2:\n                return -1\n\n    return height\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    result = calculate_flower_height(n, watering_pattern)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(n, watering_pattern):\n    height = 1\n    consecutive_days_not_watered = 0\n\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            if i > 0 and watering_pattern[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n            consecutive_days_not_watered = 0\n        else:\n            consecutive_days_not_watered += 1\n            if consecutive_days_not_watered == 2:\n                return -1\n\n    return height\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    result = calculate_flower_height(n, watering_pattern)\n    print(result)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Parse the input to extract the number of test cases and the details of each test case\",\n      \"For each test case, calculate the final height of the flower based on the watering pattern\",\n      \"Handle the case where the flower dies if left unwatered for two consecutive days\"\n    ],\n    \"major_steps\": [\n      \"Read the number of test cases from input\",\n      \"For each test case, read the number of days and the watering pattern\",\n      \"Calculate the final height of the flower based on the watering pattern\",\n      \"Output the final height or -1 if the flower dies\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'watered': means the flower is given water\n    'unwatered': means the flower is not given water\n    'final height': the height of the flower after n days\n    'flower dies': the flower is dead due to not being watered for two consecutive days\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The major steps should be implemented step by step as they are sequential and do not require simultaneous execution.\n\n# [edge case] \n    4\n    3\n    1 0 1\n    Output\n    3\n    Explanation: The flower is watered on the 1st and 3rd day, so it survives and grows to a height of 3.\n    \n    3\n    0 1 1\n    Output\n    7\n    Explanation: The flower is watered on all days, so it grows to a height of 7.\n    \n    1\n    0\n    Output\n    1\n    Explanation: The flower is not watered, but it survives for one day and remains at a height of 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)", "Round_0": {"code": "def calculate_flower_height(t, test_cases):\n    for i in range(t):\n        n = test_cases[i][0]\n        watering_pattern = test_cases[i][1]\n        \n        consecutive_unwatered_days = 0\n        height = 0\n        \n        for j in range(n):\n            if watering_pattern[j] == 1:\n                height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    print(-1)\n                    break\n                height += 1\n        \n        if consecutive_unwatered_days < 2:\n            print(height)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    test_cases.append((n, watering_pattern))\n\n# Calculate and output flower height\ncalculate_flower_height(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(t, test_cases):\n    for i in range(t):\n        n = test_cases[i][0]\n        watering_pattern = test_cases[i][1]\n        \n        consecutive_unwatered_days = 0\n        height = 0\n        \n        for j in range(n):\n            if watering_pattern[j] == 1:\n                height += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    print(-1)\n                    break\n                height += 1\n        \n        if consecutive_unwatered_days < 2:\n            print(height)\n\n# Read input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    test_cases.append((n, watering_pattern))\n\n# Calculate and output flower height\ncalculate_flower_height(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Determine if the flower dies after n days\",\n    \"Calculate the height of the flower after n days\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Iterate through each day from 1 to n\",\n    \"step_2\": \"Check if the flower is watered on the current day and the previous day\",\n    \"step_3\": \"Update the height of the flower based on the watering conditions\",\n    \"step_4\": \"If the flower dies, return -1, otherwise return the final height\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower grows based on specific watering conditions and its height changes accordingly.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as they are dependent on each other.\n\n# [edge case] \n    n = 1\n    0\n    Explanation: If there is only one day and the flower is not watered, it remains at 1 cm.\n    n = 2\n    6\n    Explanation: If the flower is watered on both days, it grows by 5 cm each day.\n    n = 3\n    -1\n    Explanation: If the flower is not watered for two consecutive days, it dies.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 6\n        (other code)\n\nNO", "Round_0": {"code": "def calculate_flower_height(n, days):\n    if n == 1:\n        return 1\n    elif n == 2:\n        if days[0] == 1 and days[1] == 1:\n            return 6\n        else:\n            return 1\n    else:\n        height = 1\n        for i in range(2, n):\n            if days[i] == 1 and days[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n            if days[i] == 0 and days[i-1] == 0:\n                return -1\n        return height\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    result = calculate_flower_height(n, days)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(n, days):\n    if n == 1:\n        return 1\n    elif n == 2:\n        if days[0] == 1 and days[1] == 1:\n            return 6\n        else:\n            return 1\n    else:\n        height = 1\n        for i in range(2, n):\n            if days[i] == 1 and days[i-1] == 1:\n                height += 5\n            else:\n                height += 1\n            if days[i] == 0 and days[i-1] == 0:\n                return -1\n        return height\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    result = calculate_flower_height(n, days)\n    print(result)\n"}}, {"plan": "{\n  \"plan\": {\n    \"subproblems\": [\n      \"Determine if the flower dies after n days\",\n      \"Calculate the height of the flower after n days\"\n    ],\n    \"steps\": [\n      \"Initialize the height of the flower to 1 centimeter\",\n      \"Iterate through the n days\",\n      \"Check if the flower is watered on the current day and the previous day\",\n      \"Update the height of the flower based on the watering conditions\",\n      \"If the flower dies, output -1, otherwise output the final height of the flower\"\n    ]\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower grows based on specific watering conditions and its height changes accordingly.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps do not need to be implemented simultaneously. Each step should be executed sequentially as described in the plan.\n\n# [edge case] \n    n = 1\n    0\n    Explanation: If there is only one day and the flower is not watered, the flower's height remains 1 centimeter.\n    n = 2\n    6\n    Explanation: If the flower is watered on both days, it grows by 5 centimeters each day, resulting in a total height of 6 centimeters.\n    n = 3\n    -1\n    Explanation: If the flower is not watered for two consecutive days, it dies.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1 and a[0] == 0:\n            return 1\n        elif n == 2 and a[0] == 1 and a[1] == 1:\n            return 6\n        (other code)\n\nNO", "Round_0": {"code": "def calculate_flower_height(n, days):\n    if n == 1 and days[0] == 0:\n        return 1\n    elif n == 2 and days[0] == 1 and days[1] == 1:\n        return 6\n    \n    height = 1\n    for i in range(1, n):\n        if days[i] == 1 and days[i-1] == 1:\n            height += 5\n        else:\n            height += 1\n        \n        if days[i] == 0 and days[i-1] == 0:\n            return -1\n    \n    return height\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    \n    result = calculate_flower_height(n, days)\n    print(result)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_flower_height(n, days):\n    if n == 1 and days[0] == 0:\n        return 1\n    elif n == 2 and days[0] == 1 and days[1] == 1:\n        return 6\n    \n    height = 1\n    for i in range(1, n):\n        if days[i] == 1 and days[i-1] == 1:\n            height += 5\n        else:\n            height += 1\n        \n        if days[i] == 0 and days[i-1] == 0:\n            return -1\n    \n    return height\n\n# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    \n    result = calculate_flower_height(n, days)\n    print(result)\n"}}], "scores": [], "pass_results": [false, true, false, false, true, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 6, "prompt": "Petya has got an interesting flower. Petya is a busy person. He sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "expand_one2two", "save_node": true, "parent_index": 6}
