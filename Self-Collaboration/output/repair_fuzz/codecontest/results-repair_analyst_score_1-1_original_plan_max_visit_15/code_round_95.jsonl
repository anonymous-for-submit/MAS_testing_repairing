{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "repair_prompt": ["The robot is positioned on a checkered rectangular board with dimensions n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot has the ability to move from the current cell to one of the four adjacent cells. These adjacent cells are placed next to each other by side. This means the robot can move in four possible directions at any point.\n\nThe sequence of commands s executed by the robot is provided. Each command is represented by one of the symbols 'L', 'R', 'D' or 'U', and causes movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot begins its journey from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nFind out the cell the robot should start its journey from in order to carry out the maximum possible commands.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks.\n\nThe robot has the ability to move from the current cell to one of the four adjacent cells. These adjacent cells are placed next to each other by side. This means the robot can move in four possible directions at any point. \n\nThe sequence of commands s executed by the robot is provided. Each command is represented by one of the symbols 'L', 'R', 'D' or 'U', and causes movement to left, right, down or up, respectively. \n\nFind out the cell the robot should start its journey from in order to carry out the maximum possible commands.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.", "The robot is positioned on a checkered rectangular board with dimensions n \u00d7 m (n rows, m columns), and has the ability to move in four possible directions at any point.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed."], "completion": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                current_commands += 1\n\n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n\n    print(start_cell[0], start_cell[1])\n\nmain()", "completions": ["def calculate_starting_cell(n, m, commands):\n    row, col = 1, 1\n    for command in commands:\n        if command == 'L':\n            col -= 1\n        elif command == 'R':\n            col += 1\n        elif command == 'U':\n            row -= 1\n        elif command == 'D':\n            row += 1\n\n        if row < 1:\n            row = 1\n        elif row > n:\n            row = n\n\n        if col < 1:\n            col = 1\n        elif col > m:\n            col = m\n\n    return row, col\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = calculate_starting_cell(n, m, commands)\n    print(r, c)\n\nmain()", "# Function to find the cell from which the robot should start its journey to perform the maximum possible commands\ndef find_starting_cell(n, m, s):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            commands = 0\n            x, y = i, j\n            \n            for command in s:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'D':\n                    x += 1\n                elif command == 'U':\n                    x -= 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                commands += 1\n            \n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n    \n    return start_cell\n\n# Input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    \n    # Find the starting cell for each test case\n    start_cell = find_starting_cell(n, m, s)\n    \n    # Output\n    print(start_cell[0], start_cell[1])\n\nmain()", "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the dimensions of the board and the sequence of commands\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Initialize variables to store the maximum number of commands and the starting cell\n    max_commands = 0\n    start_cell = (1, 1)\n\n    # Iterate through each cell on the board\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n\n            # Simulate the robot movement based on the commands\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                # Check if the robot falls off the board\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                current_commands += 1\n\n            # Update the maximum number of commands and the starting cell if needed\n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n\n    # Output the coordinates of the starting cell\n    print(start_cell[0], start_cell[1])\n\nmain()", "# Function to find the cell from which the robot should start its journey\ndef find_starting_cell(n, m, s):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            commands = 0\n            x, y = i, j\n            \n            for command in s:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                commands += 1\n            \n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n    \n    return start_cell\n\n# Input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    \n    # Find the starting cell\n    start_cell = find_starting_cell(n, m, s)\n    \n    # Output\n    print(start_cell[0], start_cell[1])\n\nmain()", "# Function to calculate the final position of the robot based on the sequence of commands\ndef calculate_final_position(n, m, commands):\n    row, col = 1, 1\n    \n    for command in commands:\n        if command == 'L':\n            col -= 1\n        elif command == 'R':\n            col += 1\n        elif command == 'U':\n            row -= 1\n        elif command == 'D':\n            row += 1\n        \n        # Ensure the robot stays within the bounds of the board\n        row = max(1, min(row, n))\n        col = max(1, min(col, m))\n    \n    return row, col\n\n# Main function to process the test cases\ndef process_test_cases():\n    t = int(input())\n    \n    for _ in range(t):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        final_row, final_col = calculate_final_position(n, m, commands)\n        print(final_row, final_col)\n\n# Run the main function\nif __name__ == \"__main__\":\n    process_test_cases()\n\nmain()", "def find_starting_cell(n, m, s):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            x, y = i, j\n            commands = 0\n            \n            for command in s:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                commands += 1\n            \n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n    \n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    \n    result = find_starting_cell(n, m, s)\n    print(result[0], result[1])\n\nmain()", "# Function to find the cell the robot should start its journey from\ndef find_starting_cell(t, test_cases):\n    for i in range(t):\n        n, m = test_cases[i][0]\n        commands = test_cases[i][1]\n        \n        max_commands = 0\n        start_cell = (1, 1)\n        \n        for row in range(1, n+1):\n            for col in range(1, m+1):\n                curr_row, curr_col = row, col\n                commands_executed = 0\n                \n                for command in commands:\n                    if command == 'L':\n                        curr_col -= 1\n                    elif command == 'R':\n                        curr_col += 1\n                    elif command == 'U':\n                        curr_row -= 1\n                    elif command == 'D':\n                        curr_row += 1\n                    \n                    if curr_row < 1 or curr_row > n or curr_col < 1 or curr_col > m:\n                        break\n                    commands_executed += 1\n                \n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    start_cell = (row, col)\n        \n        print(start_cell[0], start_cell[1])\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append(((n, m), commands))\n\n# Find and output the starting cell for each test case\nfind_starting_cell(t, test_cases)\n\nmain()", "# Function to calculate the final position of the robot based on the sequence of commands\ndef calculate_final_position(n, m, commands):\n    row, col = 1, 1\n    \n    for command in commands:\n        if command == 'L':\n            col -= 1\n        elif command == 'R':\n            col += 1\n        elif command == 'U':\n            row -= 1\n        elif command == 'D':\n            row += 1\n        \n        # Ensure the robot stays within the boundaries of the board\n        row = max(1, min(row, n))\n        col = max(1, min(col, m))\n    \n    return row, col\n\n# Main function to process the test cases\ndef process_test_cases():\n    t = int(input())\n    \n    for _ in range(t):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        row, col = calculate_final_position(n, m, commands)\n        print(row, col)\n\n# Run the main function\nprocess_test_cases()\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            commands_executed = 0\n\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                commands_executed += 1\n\n            if commands_executed > max_commands:\n                max_commands = commands_executed\n                start_cell = (i, j)\n\n    print(start_cell[0], start_cell[1])\n\nmain()", "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                current_commands += 1\n\n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n\n    print(start_cell[0], start_cell[1])\n\nmain()"], "session_history": {"plan": "{\n  \"subproblems\": [\n    \"Identify the dimensions of the board and the sequence of commands for each test case\",\n    \"Determine the starting cell that allows the robot to execute the maximum number of commands without falling off the board\"\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the dimensions of the board and the sequence of commands for each test case\",\n    \"Iterate through each test case and calculate the maximum number of commands that can be executed from each cell on the board\",\n    \"Output the coordinates of the cell that allows the robot to execute the maximum number of commands\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept involves the movement of a robot on a checkered rectangular board based on a sequence of commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, iterating through test cases, and calculating the maximum number of commands that can be executed from each cell on the board.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 L\n    Output: 1 1\n    Explanation: The robot starts at the only cell and executes the command 'L'.\n    \n    Test Case 2:\n    Input: 1 2 L\n    Output: 1 2\n    Explanation: The robot starts at the second cell and executes the command 'L'.\n    \n    Test Case 3:\n    Input: 3 3 RRDLUU\n    Output: 2 1\n    Explanation: The robot starts at cell (2, 1) and executes all commands successfully.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the dimensions of the board and the sequence of commands\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Initialize variables to keep track of the maximum number of commands and the starting cell\n    max_commands = 0\n    start_cell = (1, 1)\n\n    # Iterate through each cell on the board\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n\n            # Simulate the robot's movement based on the commands\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                # Check if the robot falls off the board\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                current_commands += 1\n\n            # Update the maximum number of commands and the starting cell if needed\n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n\n    # Output the coordinates of the starting cell\n    print(start_cell[0], start_cell[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 53)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                current_commands += 1\n\n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n\n    print(start_cell[0], start_cell[1])\n"}}, "session_historys": [{"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the descriptions of each test case\",\n    \"For each test case, extract the dimensions of the board, the sequence of commands, and calculate the final position of the robot\",\n    \"Output the coordinates of the cell from which the robot should start moving to perform as many commands as possible\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, extract the dimensions of the board and the sequence of commands\",\n    \"Step 3\": \"Implement a function to calculate the final position of the robot based on the sequence of commands\",\n    \"Step 4\": \"Implement a function to find the cell from which the robot should start moving to perform as many commands as possible\",\n    \"Step 5\": \"Output the coordinates of the cell for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'Parse the input': Extract necessary information from the input data to process the test cases effectively.\n    'Calculate the final position of the robot': Determine the final coordinates of the robot after executing a sequence of commands.\n    'Output the coordinates': Display the starting cell coordinates for the robot to maximize command execution.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as outlined in the plan.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    L\n    Output:\n    1 1\n    Explanation:\n    The robot starts at cell (1, 1) and moves left. Since there is only one cell, the starting cell is (1, 1).\n\n    Test Case 2:\n    Input:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation:\n    The robot starts at cell (1, 2) and moves left. The starting cell is (1, 2).\n\n    Test Case 3:\n    Input:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation:\n    The robot starts at cell (2, 1) and executes the sequence of commands. The starting cell is (2, 1).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the test cases.", "Round_0": {"code": "def calculate_starting_cell(n, m, commands):\n    row, col = 1, 1\n    for command in commands:\n        if command == 'L':\n            col -= 1\n        elif command == 'R':\n            col += 1\n        elif command == 'U':\n            row -= 1\n        elif command == 'D':\n            row += 1\n\n        if row < 1:\n            row = 1\n        elif row > n:\n            row = n\n\n        if col < 1:\n            col = 1\n        elif col > m:\n            col = m\n\n    return row, col\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = calculate_starting_cell(n, m, commands)\n    print(r, c)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "def calculate_starting_cell(n, m, commands):\n    row, col = 1, 1\n    for command in commands:\n        if command == 'L':\n            col -= 1\n        elif command == 'R':\n            col += 1\n        elif command == 'U':\n            row -= 1\n        elif command == 'D':\n            row += 1\n\n        if row < 1:\n            row = 1\n        elif row > n:\n            row = n\n\n        if col < 1:\n            col = 1\n        elif col > m:\n            col = m\n\n    return row, col\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    r, c = calculate_starting_cell(n, m, commands)\n    print(r, c)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Identify the maximum number of commands that can be executed starting from each cell\",\n    \"Determine the cell from which the robot should start its journey to perform the maximum possible commands\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, parse the input to extract the field dimensions and the sequence of commands\",\n    \"Step 3\": \"Iterate through each cell in the field and simulate the robot's movement based on the sequence of commands\",\n    \"Step 4\": \"Track the maximum number of commands that can be executed starting from each cell\",\n    \"Step 5\": \"Identify the cell with the maximum number of commands and output its coordinates\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'movement': refers to the action of the robot moving in one of the four directions (left, right, down, up) based on the given commands.\n    Explanation: The core concept here is to simulate the movement of the robot based on the provided commands and determine the starting cell for maximum possible commands execution.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as they involve parsing input, iterating through cells, simulating movement, tracking commands, and identifying the cell with the maximum commands.\n\n# [edge case] \n    Test Case 1:\n    1 1\n    L\n    Output: 1 1\n    Explanation: The robot starts at cell (1, 1) and can only move left. Since it can only move in one direction, it will execute the command from the starting cell.\n    \n    Test Case 2:\n    1 2\n    L\n    Output: 1 2\n    Explanation: The robot starts at cell (1, 2) and moves left. It can execute the command from the starting cell.\n    \n    Test Case 3:\n    3 3\n    RRDLUU\n    Output: 2 1\n    Explanation: The robot can start at cell (2, 1) to perform the maximum possible commands as it can move in all four directions from this cell.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle the given requirements.", "Round_0": {"code": "# Function to find the cell from which the robot should start its journey to perform the maximum possible commands\ndef find_starting_cell(n, m, s):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            commands = 0\n            x, y = i, j\n            \n            for command in s:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'D':\n                    x += 1\n                elif command == 'U':\n                    x -= 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                commands += 1\n            \n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n    \n    return start_cell\n\n# Input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    \n    # Find the starting cell for each test case\n    start_cell = find_starting_cell(n, m, s)\n    \n    # Output\n    print(start_cell[0], start_cell[1])\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 49)"}, "Round_1": {"code": "# Function to find the cell from which the robot should start its journey to perform the maximum possible commands\ndef find_starting_cell(n, m, s):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            commands = 0\n            x, y = i, j\n            \n            for command in s:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'D':\n                    x += 1\n                elif command == 'U':\n                    x -= 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                commands += 1\n            \n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n    \n    return start_cell\n\n# Input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    \n    # Find the starting cell for each test case\n    start_cell = find_starting_cell(n, m, s)\n    \n    # Output\n    print(start_cell[0], start_cell[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Identify the dimensions of the board and the sequence of commands for each test case\",\n    \"Determine the starting cell that allows the robot to execute the maximum number of commands without falling off the board\"\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the dimensions of the board and the sequence of commands for each test case\",\n    \"Iterate through each test case and calculate the maximum number of commands that can be executed from each cell on the board\",\n    \"Output the coordinates of the cell that allows the robot to execute the maximum number of commands\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept involves the movement of a robot on a checkered rectangular board based on a sequence of commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, iterating through test cases, and calculating the maximum number of commands that can be executed from each cell on the board.\n\n# [edge case] \n    Test Case 1:\n    1 1\n    L\n    Output: 1 1\n    Explanation: With only one cell on the board and a single command 'L', the robot can only start from the initial cell.\n    \n    Test Case 2:\n    1 2\n    L\n    Output: 1 2\n    Explanation: The robot can start from the first cell and execute the command 'L'.\n    \n    Test Case 3:\n    3 3\n    RRDLUU\n    Output: 2 1\n    Explanation: Starting from cell (2, 1) allows the robot to execute all commands successfully.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic should consider all possible starting cells and calculate the maximum number of commands that can be executed.", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the dimensions of the board and the sequence of commands\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Initialize variables to store the maximum number of commands and the starting cell\n    max_commands = 0\n    start_cell = (1, 1)\n\n    # Iterate through each cell on the board\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n\n            # Simulate the robot movement based on the commands\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                # Check if the robot falls off the board\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                current_commands += 1\n\n            # Update the maximum number of commands and the starting cell if needed\n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n\n    # Output the coordinates of the starting cell\n    print(start_cell[0], start_cell[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 48)"}, "Round_1": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the dimensions of the board and the sequence of commands\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Initialize variables to store the maximum number of commands and the starting cell\n    max_commands = 0\n    start_cell = (1, 1)\n\n    # Iterate through each cell on the board\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n\n            # Simulate the robot movement based on the commands\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                # Check if the robot falls off the board\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                current_commands += 1\n\n            # Update the maximum number of commands and the starting cell if needed\n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n\n    # Output the coordinates of the starting cell\n    print(start_cell[0], start_cell[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Identify the maximum number of commands that can be executed starting from each cell\",\n    \"Determine the cell from which the robot should start its journey to perform the maximum possible commands\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the number of test cases\",\n    \"Step 2\": \"For each test case, parse the input to extract the field dimensions and the sequence of commands\",\n    \"Step 3\": \"Iterate through each cell in the field and simulate the robot's movement based on the sequence of commands\",\n    \"Step 4\": \"Track the maximum number of commands that can be executed starting from each cell\",\n    \"Step 5\": \"Identify the cell with the maximum number of commands and output its coordinates\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'movement': refers to the action of the robot moving in one of the four directions based on the given commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    All steps should be implemented step by step as they involve parsing input, iterating through cells, simulating movements, tracking maximum commands, and identifying the starting cell with the maximum commands.\n\n# [edge case] \n    Test Case 1:\n    1 1\n    L\n    Output:\n    1 1\n    Explanation:\n    The robot starts at cell (1, 1) and can only move left. Since it's the only cell, it should start from there.\n\n    Test Case 2:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation:\n    The robot starts at cell (1, 2) and moves left. It can only start from this cell.\n\n    Test Case 3:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation:\n    The robot can start at cell (2, 1) to perform the maximum possible commands.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to handle all scenarios.", "Round_0": {"code": "# Function to find the cell from which the robot should start its journey\ndef find_starting_cell(n, m, s):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            commands = 0\n            x, y = i, j\n            \n            for command in s:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                commands += 1\n            \n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n    \n    return start_cell\n\n# Input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    \n    # Find the starting cell\n    start_cell = find_starting_cell(n, m, s)\n    \n    # Output\n    print(start_cell[0], start_cell[1])\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 49)"}, "Round_1": {"code": "# Function to find the cell from which the robot should start its journey\ndef find_starting_cell(n, m, s):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            commands = 0\n            x, y = i, j\n            \n            for command in s:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                commands += 1\n            \n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n    \n    return start_cell\n\n# Input\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    \n    # Find the starting cell\n    start_cell = find_starting_cell(n, m, s)\n    \n    # Output\n    print(start_cell[0], start_cell[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the descriptions of each test case\",\n    \"For each test case, extract the dimensions of the board, the sequence of commands, and calculate the final position of the robot\",\n    \"Output the coordinates of the cell from which the robot should start moving to perform as many commands as possible\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases\",\n    \"step_2\": \"For each test case, extract the dimensions of the board and the sequence of commands\",\n    \"step_3\": \"Simulate the movement of the robot based on the sequence of commands\",\n    \"step_4\": \"Calculate the final position of the robot\",\n    \"step_5\": \"Output the coordinates of the cell from which the robot should start moving to perform as many commands as possible\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'test cases'\n    Explanation: The requirement involves processing multiple test cases, each consisting of the dimensions of the board and a sequence of commands for a robot.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, simulating robot movement, and calculating final positions.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    L\n    Output:\n    1 1\n    Explanation: The robot starts at cell (1, 1) and performs the only command 'L', which keeps it in the same cell.\n    \n    Test Case 2:\n    Input:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation: The robot starts at cell (1, 2) and moves left, staying in the same cell.\n    \n    Test Case 3:\n    Input:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation: The robot starts at cell (2, 1) and follows the sequence of commands to move around the board.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.", "Round_0": {"code": "# Function to calculate the final position of the robot based on the sequence of commands\ndef calculate_final_position(n, m, commands):\n    row, col = 1, 1\n    \n    for command in commands:\n        if command == 'L':\n            col -= 1\n        elif command == 'R':\n            col += 1\n        elif command == 'U':\n            row -= 1\n        elif command == 'D':\n            row += 1\n        \n        # Ensure the robot stays within the bounds of the board\n        row = max(1, min(row, n))\n        col = max(1, min(col, m))\n    \n    return row, col\n\n# Main function to process the test cases\ndef process_test_cases():\n    t = int(input())\n    \n    for _ in range(t):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        final_row, final_col = calculate_final_position(n, m, commands)\n        print(final_row, final_col)\n\n# Run the main function\nif __name__ == \"__main__\":\n    process_test_cases()\n", "report": "The compilation output of the preceding code is: Code Test Passed."}}, {"plan": "{\n  \"subproblems\": [\n    \"Identify the maximum number of commands that can be executed starting from each cell\",\n    \"Determine the cell from which the robot should start its journey to perform as many commands as possible\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Iterate through each cell in the field\",\n    \"Step 2\": \"For each cell, simulate the robot's movement based on the sequence of commands provided\",\n    \"Step 3\": \"Count the number of commands that can be executed starting from each cell\",\n    \"Step 4\": \"Identify the cell with the maximum number of commands that can be executed\",\n    \"Step 5\": \"Output the coordinates of the identified cell\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'movement': The robot moves in four possible directions (left, right, down, up) based on the sequence of commands provided.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum possible': Indicates the need to find the cell from which the robot can perform the maximum number of commands.\n\n# [code logic]\n    The steps should be implemented sequentially as they involve iterating through cells and simulating movements. Each step is crucial for determining the starting cell for maximum commands.\n\n# [edge case] \n    Test Case 1:\n    1 1\n    L\n    Output: 1 1\n    Explanation: The robot can only start at cell 1 1 and perform the single command 'L'.\n    \n    Test Case 2:\n    1 2\n    L\n    Output: 1 2\n    Explanation: The robot can start at cell 1 2 and perform the command 'L'.\n    \n    Test Case 3:\n    3 3\n    RRDLUU\n    Output: 2 1\n    Explanation: The robot can start at cell 2 1 to perform the commands 'RRDLUU' for the maximum possible commands.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the scenarios effectively.", "Round_0": {"code": "def find_starting_cell(n, m, s):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            x, y = i, j\n            commands = 0\n            \n            for command in s:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                commands += 1\n            \n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n    \n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    \n    result = find_starting_cell(n, m, s)\n    print(result[0], result[1])\n", "report": "The compilation output of the preceding code is: invalid syntax (<string>, line 44)"}, "Round_1": {"code": "def find_starting_cell(n, m, s):\n    max_commands = 0\n    start_cell = (1, 1)\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            x, y = i, j\n            commands = 0\n            \n            for command in s:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n                \n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n                \n                commands += 1\n            \n            if commands > max_commands:\n                max_commands = commands\n                start_cell = (i, j)\n    \n    return start_cell\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    \n    result = find_starting_cell(n, m, s)\n    print(result[0], result[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Identify the dimensions of the board and the sequence of commands for each test case\",\n    \"Determine the starting cell that allows the robot to execute the maximum number of commands without falling off the board\"\n  ],\n  \"high_level_plan\": {\n    \"Step 1\": \"Parse the input to extract the dimensions of the board and the sequence of commands for each test case\",\n    \"Step 2\": \"Iterate through each test case and calculate the maximum number of commands that can be executed without falling off the board from each possible starting cell\",\n    \"Step 3\": \"Output the coordinates of the cell that allows the robot to perform the maximum number of commands for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept is about the movement of a robot on a checkered rectangular board based on a sequence of commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as described in the plan.\n\n# [edge case] \n    Test Case 1:\n    1 1\n    L\n    Output: 1 1\n    Explanation: With only one cell, the robot can only start from that cell to execute the command.\n    \n    Test Case 2:\n    1 2\n    L\n    Output: 1 2\n    Explanation: The robot can start from the only available cell to execute the command.\n    \n    Test Case 3:\n    3 3\n    RRDLUU\n    Output: 2 1\n    Explanation: Starting from cell (2, 1) allows the robot to execute all commands successfully.\n    \n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic should cover all scenarios. \n\nNO", "Round_0": {"code": "# Function to find the cell the robot should start its journey from\ndef find_starting_cell(t, test_cases):\n    for i in range(t):\n        n, m = test_cases[i][0]\n        commands = test_cases[i][1]\n        \n        max_commands = 0\n        start_cell = (1, 1)\n        \n        for row in range(1, n+1):\n            for col in range(1, m+1):\n                curr_row, curr_col = row, col\n                commands_executed = 0\n                \n                for command in commands:\n                    if command == 'L':\n                        curr_col -= 1\n                    elif command == 'R':\n                        curr_col += 1\n                    elif command == 'U':\n                        curr_row -= 1\n                    elif command == 'D':\n                        curr_row += 1\n                    \n                    if curr_row < 1 or curr_row > n or curr_col < 1 or curr_col > m:\n                        break\n                    commands_executed += 1\n                \n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    start_cell = (row, col)\n        \n        print(start_cell[0], start_cell[1])\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append(((n, m), commands))\n\n# Find and output the starting cell for each test case\nfind_starting_cell(t, test_cases)\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Function to find the cell the robot should start its journey from\ndef find_starting_cell(t, test_cases):\n    for i in range(t):\n        n, m = test_cases[i][0]\n        commands = test_cases[i][1]\n        \n        max_commands = 0\n        start_cell = (1, 1)\n        \n        for row in range(1, n+1):\n            for col in range(1, m+1):\n                curr_row, curr_col = row, col\n                commands_executed = 0\n                \n                for command in commands:\n                    if command == 'L':\n                        curr_col -= 1\n                    elif command == 'R':\n                        curr_col += 1\n                    elif command == 'U':\n                        curr_row -= 1\n                    elif command == 'D':\n                        curr_row += 1\n                    \n                    if curr_row < 1 or curr_row > n or curr_col < 1 or curr_col > m:\n                        break\n                    commands_executed += 1\n                \n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    start_cell = (row, col)\n        \n        print(start_cell[0], start_cell[1])\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append(((n, m), commands))\n\n# Find and output the starting cell for each test case\nfind_starting_cell(t, test_cases)\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Parse the input to extract the number of test cases and the descriptions of each test case\",\n    \"For each test case, extract the dimensions of the board, the sequence of commands, and calculate the final position of the robot\",\n    \"Output the coordinates of the cell from which the robot should start moving to perform as many commands as possible\"\n  ],\n  \"high_level_plan\": {\n    \"step_1\": \"Parse the input to extract the number of test cases\",\n    \"step_2\": \"For each test case, extract the dimensions of the board and the sequence of commands\",\n    \"step_3\": \"Simulate the movement of the robot based on the sequence of commands\",\n    \"step_4\": \"Calculate the final position of the robot\",\n    \"step_5\": \"Output the coordinates of the cell from which the robot should start moving to perform as many commands as possible\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'test cases'\n    Explanation: The requirement involves processing multiple test cases, each consisting of the dimensions of the board and a sequence of commands for a robot.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, simulating robot movement, and calculating final positions.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1 1\n    L\n    Output:\n    1 1\n    Explanation: The robot starts at cell (1, 1) and moves left, staying at the same position.\n    \n    Test Case 2:\n    Input:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation: The robot starts at cell (1, 2) and moves left, staying at the same position.\n\n    Test Case 3:\n    Input:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation: The robot moves right twice, down once, left once, up twice, ending at cell (2, 1).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should handle all scenarios effectively.", "Round_0": {"code": "# Function to calculate the final position of the robot based on the sequence of commands\ndef calculate_final_position(n, m, commands):\n    row, col = 1, 1\n    \n    for command in commands:\n        if command == 'L':\n            col -= 1\n        elif command == 'R':\n            col += 1\n        elif command == 'U':\n            row -= 1\n        elif command == 'D':\n            row += 1\n        \n        # Ensure the robot stays within the boundaries of the board\n        row = max(1, min(row, n))\n        col = max(1, min(col, m))\n    \n    return row, col\n\n# Main function to process the test cases\ndef process_test_cases():\n    t = int(input())\n    \n    for _ in range(t):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        row, col = calculate_final_position(n, m, commands)\n        print(row, col)\n\n# Run the main function\nprocess_test_cases()\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "# Function to calculate the final position of the robot based on the sequence of commands\ndef calculate_final_position(n, m, commands):\n    row, col = 1, 1\n    \n    for command in commands:\n        if command == 'L':\n            col -= 1\n        elif command == 'R':\n            col += 1\n        elif command == 'U':\n            row -= 1\n        elif command == 'D':\n            row += 1\n        \n        # Ensure the robot stays within the boundaries of the board\n        row = max(1, min(row, n))\n        col = max(1, min(col, m))\n    \n    return row, col\n\n# Main function to process the test cases\ndef process_test_cases():\n    t = int(input())\n    \n    for _ in range(t):\n        n, m = map(int, input().split())\n        commands = input().strip()\n        \n        row, col = calculate_final_position(n, m, commands)\n        print(row, col)\n\n# Run the main function\nprocess_test_cases()\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Identify the dimensions of the board and the sequence of commands for each test case\",\n    \"Determine the starting cell that allows the robot to execute the maximum number of commands without falling off the board\"\n  ],\n  \"high-level plan\": {\n    \"Step 1\": \"Parse the input to extract the dimensions of the board and the sequence of commands for each test case\",\n    \"Step 2\": \"Iterate through each test case and calculate the maximum number of commands the robot can execute without falling off the board\",\n    \"Step 3\": \"Output the starting cell coordinates that allow the robot to perform the maximum number of commands for each test case\"\n  }\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept involves the movement of a robot on a checkered rectangular board based on a sequence of commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps should be implemented sequentially as described in the plan.\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1 1\n    L\n    Output:\n    1 1\n    Explanation: With only one cell on the board and a single command 'L', the robot can only start from the same cell.\n    \n    Test Case 2:\n    Input:\n    1 2\n    L\n    Output:\n    1 2\n    Explanation: The robot can start from the only available cell to execute the command 'L'.\n    \n    Test Case 3:\n    Input:\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation: Starting from cell (2, 1) allows the robot to execute all commands successfully.\n    \n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic should be able to handle all scenarios effectively. \n\nNO", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the dimensions of the board and the sequence of commands\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Initialize variables to keep track of the maximum number of commands and the starting cell\n    max_commands = 0\n    start_cell = (1, 1)\n\n    # Iterate through each cell on the board to find the starting cell that allows the robot to execute the maximum number of commands\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            commands_executed = 0\n\n            # Simulate the robot's movement based on the commands\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                # Check if the robot falls off the board\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                commands_executed += 1\n\n            # Update the maximum number of commands and the starting cell if a better solution is found\n            if commands_executed > max_commands:\n                max_commands = commands_executed\n                start_cell = (i, j)\n\n    # Output the starting cell coordinates for the current test case\n    print(start_cell[0], start_cell[1])\n", "report": "The compilation output of the preceding code is: "}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            commands_executed = 0\n\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                commands_executed += 1\n\n            if commands_executed > max_commands:\n                max_commands = commands_executed\n                start_cell = (i, j)\n\n    print(start_cell[0], start_cell[1])\n"}}, {"plan": "{\n  \"subproblems\": [\n    \"Identify the dimensions of the board and the sequence of commands for each test case\",\n    \"Determine the starting cell that allows the robot to execute the maximum number of commands without falling off the board\"\n  ],\n  \"high_level_plan\": [\n    \"Parse the input to extract the dimensions of the board and the sequence of commands for each test case\",\n    \"Iterate through each test case and calculate the maximum number of commands that can be executed from each cell on the board\",\n    \"Output the coordinates of the cell that allows the robot to execute the maximum number of commands\"\n  ]\n}\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept involves the movement of a robot on a checkered rectangular board based on a sequence of commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The steps in the plan should be implemented sequentially as they involve parsing input, iterating through test cases, and calculating the maximum number of commands that can be executed from each cell on the board.\n\n# [edge case] \n    Test Case 1:\n    Input: 1 1 L\n    Output: 1 1\n    Explanation: The robot starts at the only cell and executes the command 'L'.\n    \n    Test Case 2:\n    Input: 1 2 L\n    Output: 1 2\n    Explanation: The robot starts at the second cell and executes the command 'L'.\n    \n    Test Case 3:\n    Input: 3 3 RRDLUU\n    Output: 2 1\n    Explanation: The robot starts at cell (2, 1) and executes all commands successfully.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case) \n\nNO", "Round_0": {"code": "# Read the number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Read the dimensions of the board and the sequence of commands\n    n, m = map(int, input().split())\n    commands = input()\n\n    # Initialize variables to keep track of the maximum number of commands and the starting cell\n    max_commands = 0\n    start_cell = (1, 1)\n\n    # Iterate through each cell on the board\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n\n            # Simulate the robot's movement based on the commands\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                # Check if the robot falls off the board\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                current_commands += 1\n\n            # Update the maximum number of commands and the starting cell if needed\n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n\n    # Output the coordinates of the starting cell\n    print(start_cell[0], start_cell[1])\n", "report": "The compilation output of the preceding code is: EOL while scanning string literal (<string>, line 53)"}, "Round_1": {"code": "t = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n\n    max_commands = 0\n    start_cell = (1, 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            x, y = i, j\n            current_commands = 0\n\n            for command in commands:\n                if command == 'L':\n                    y -= 1\n                elif command == 'R':\n                    y += 1\n                elif command == 'U':\n                    x -= 1\n                elif command == 'D':\n                    x += 1\n\n                if x < 1 or x > n or y < 1 or y > m:\n                    break\n\n                current_commands += 1\n\n            if current_commands > max_commands:\n                max_commands = current_commands\n                start_cell = (i, j)\n\n    print(start_cell[0], start_cell[1])\n"}}], "scores": [], "pass_results": [false, true, true, true, true, false, true, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 95, "prompt": "The robot is positioned on a checkered rectangular board with dimensions n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot has the ability to move from the current cell to one of the four adjacent cells. These adjacent cells are placed next to each other by side. This means the robot can move in four possible directions at any point.\n\nThe sequence of commands s executed by the robot is provided. Each command is represented by one of the symbols 'L', 'R', 'D' or 'U', and causes movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot begins its journey from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nFind out the cell the robot should start its journey from in order to carry out the maximum possible commands.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "expand_one2two", "save_node": false, "parent_index": 80}
