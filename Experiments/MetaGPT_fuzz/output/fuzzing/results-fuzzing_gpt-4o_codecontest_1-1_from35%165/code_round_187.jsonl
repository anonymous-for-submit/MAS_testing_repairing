{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, arranging them in non-descending order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, arranging them in non-descending order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted array of sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a sorted list of integers.\n\n    Returns:\n        A list of lists, where each inner list is the restored original array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The original array has n elements, and the sorted array has n+2 elements.\n        n = len(case) - 2\n        # The largest element in the sorted array is the sum of the original array.\n        total_sum = case[-1]\n        # The original array can be restored by excluding the two smallest elements and the largest element.\n        original_array = case[1:-1]\n        results.append(original_array)\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    \n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the given list of sums.\n\n    Args:\n        b (List[int]): A list of integers representing the sums of the original array elements.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # Sort the list to easily identify the smallest, second smallest, and largest sums\n    b.sort()\n    \n    # The smallest element in the sorted list is the smallest number in the original array\n    a1 = b[0]\n    \n    # The second smallest element in the sorted list is the second number in the original array\n    a2 = b[1]\n    \n    # The largest element in the sorted list is the sum of all three numbers\n    a3 = b[-1] - a1 - a2\n    \n    return [a1, a2, a3]\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nimport sys\nimport typing\n\ndef restore_original_array(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[typing.Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given subsequence sums.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing the original array of 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the case to ensure the properties hold\n        case.sort()\n        # Deduce the original array using the properties of subsequence sums\n        a1 = case[0]  # The smallest element is the smallest number in the original array\n        a2 = case[1]  # The second smallest element is the second smallest number in the original array\n        a3 = case[-1] - a1 - a2  # The largest element is the sum of all three numbers\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the given list of sums b.\n\n    Args:\n        b (List[int]): A list of integers representing sums of elements from the original array.\n\n    Returns:\n        List[int]: The original array a.\n    \"\"\"\n    # Sort the list to easily identify the smallest, second smallest, and largest sums\n    b.sort()\n    \n    # The smallest element in b is a_1\n    a1 = b[0]\n    # The second smallest element in b is a_2\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements a_1 + a_2 + a_3\n    a3 = b[-1] - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to read input, process each test case, and output the results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(result)\n    \n    for res in results:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers.\n\n    Returns:\n        List[List[int]]: A list of original arrays corresponding to each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to easily identify the elements\n        b.sort()\n        # The smallest element in b is one of the original elements a\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements of a\n        sum_all = b[-1]\n        # The second largest element in b is the sum of the two largest elements of a\n        sum_two_largest = b[-2]\n        \n        # Deduce the original elements\n        a3 = sum_all - sum_two_largest\n        a2 = sum_two_largest - a1\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input()).split())) for i in range(num_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given test cases.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array 'b'.\n\n    Returns:\n        List[List[int]]: List of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to easily find the smallest and largest elements\n        b.sort()\n        \n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        \n        # The largest element in b is the sum of all elements of a\n        sum_a = b[-1]\n        \n        # The second smallest element in b is also one of the elements of a\n        a2 = b[1]\n        \n        # Calculate the third element of a using the sum\n        a3 = sum_a - a1 - a2\n        \n        # Append the restored array a to the results\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given test cases.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array to easily identify the smallest three numbers and the largest number\n        sorted_case = sorted(case)\n        \n        # The smallest three numbers are the elements of the original array 'a'\n        a1, a2, a3 = sorted_case[0], sorted_case[1], sorted_case[2]\n        \n        # The largest number is the sum of the elements of 'a'\n        sum_a = sorted_case[-1]\n        \n        # Verify the sum to ensure correctness\n        if a1 + a2 + a3 == sum_a:\n            results.append([a1, a2, a3])\n        else:\n            # In case of any discrepancy, handle gracefully (though not expected in valid input)\n            results.append([])  # Return an empty list indicating an error in reconstruction\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nimport sys\nimport typing\n\ndef restore_array(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[typing.Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three numbers from the given sorted array of seven numbers.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a sorted list of seven integers.\n\n    Returns:\n        A list of tuples, each containing three integers representing the original array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The largest number in the sorted array is the sum of the three original numbers\n        sum_of_originals = case[-1]\n        \n        # The smallest number is one of the original numbers\n        a = case[0]\n        \n        # The second smallest number is another original number\n        b = case[1]\n        \n        # The third original number can be found by subtracting the sum of the two smallest numbers from the total sum\n        c = sum_of_originals - a - b\n        \n        results.append((a, b, c))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().split()\n    t = int(input_data[0])\n    test_cases = [list(map(int, input_data[i:i+7])) for i in range(1, len(input_data), 7)]\n    \n    results = restore_array(t, test_cases)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        # Since b is sorted, the smallest element is the smallest number in a\n        a1 = b[0]\n        # The second smallest element is the second smallest number in a\n        a2 = b[1]\n        # The third smallest element is the third smallest number in a\n        a3 = b[2]\n        # The largest element is the sum of all three numbers in a\n        sum_a = b[6]\n        \n        # Deduce the original array a\n        a = [a1, a2, a3]\n        \n        # Verify the sum of a matches the largest element in b\n        if sum(a) != sum_a:\n            # If the sum does not match, adjust the third element\n            a[2] = sum_a - a1 - a2\n        \n        results.append(a)\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' which contains\n    all possible sums of non-empty subsequences of 'a'.\n\n    Args:\n        b (List[int]): A sorted list of integers representing all possible sums\n                       of non-empty subsequences of the array 'a'.\n\n    Returns:\n        List[int]: The original array 'a'.\n    \"\"\"\n    # Since b is sorted, the smallest three numbers are the individual elements of a\n    # and the largest number is the sum of all three elements.\n    # Let's denote the elements of a as a1, a2, a3.\n    # Then, b[0] = a1, b[1] = a2, b[2] = a3, and b[-1] = a1 + a2 + a3.\n    \n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[2]\n    \n    # Return the original array a\n    return [a1, a2, a3]\n\n# Input and output interface\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n"], "plans": ["requirement analysis:\nThe problem requires restoring an original array of three integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest elements in the sorted subsequence sums, which correspond to the individual elements and their combinations. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for clarity and maintainability.\n- Handle edge cases and large integer values correctly.\n- Provide detailed comments and documentation for the solution.\nWe will solve the problem by leveraging the properties of the sorted array b. The smallest element in b is the smallest element of a, the second smallest element in b is the second smallest element of a, and the largest element in b is the sum of all elements of a. This allows us to deduce the original array a by simple arithmetic operations. The solution will efficiently handle up to 5000 test cases by iterating through each test case and applying this logic.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest elements in the sorted list of sums, which correspond to the individual elements and their combinations. The solution must handle up to 5000 test cases efficiently.\nrequirement pool:\n- Develop a function to extract the original array from the given sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the code for readability and maintainability.\n- Test the solution against a variety of test cases.\n- Document the solution approach and edge cases.\nWe will solve the problem by identifying the smallest, second smallest, and largest elements in the sorted list of sums, which correspond to the individual elements and their combinations. The smallest element is the smallest number in the original array, the second smallest is the second number, and the largest element is the sum of all three numbers. This approach is efficient and straightforward, ensuring that we can handle up to 5000 test cases efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted and easy to interpret.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums.\n- Ensure the solution handles maximum constraints effectively.\n- Provide clear and concise output formatting.\n- Optimize for speed and performance.\n- Include error handling for edge cases.\nWe will solve the problem by leveraging the properties of the subsequence sums. Given the sorted array b of 7 integers, the smallest element is the smallest number in the original array a. The largest element in b is the sum of all three numbers in a. The second largest element in b is the sum of the two largest numbers in a. Using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest sums in the sorted array b, which correspond to the individual elements and their combinations. The solution must handle up to 5000 test cases efficiently.\nrequirement pool:\n- Implement the main algorithm to restore the array a from b.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is easy to read and maintain.\n- Include comprehensive test cases to validate the solution.\n- Document the code for better understanding and future maintenance.\nWe will solve the problem by identifying the smallest, second smallest, and largest sums in the sorted array b. These correspond to the individual elements and their combinations. Specifically, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. Using these, we can deduce the original array a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide clear documentation for the solution\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a from b. This approach is efficient and works well within the constraints provided.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which contains sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and provide accurate results for each. The input and output format must be strictly followed to ensure compatibility with automated testing.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format consistency\n- Optimize for large integer values\n- Provide clear documentation for the solution\nWe will solve the problem by recognizing that the smallest element in array b is one of the elements of array a, and the largest element in b is the sum of all elements of a. The second smallest element in b is also one of the elements of a. By using these observations, we can deduce the three elements of a. We will use Python's built-in capabilities to handle large integers efficiently.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a sorted list of sums of its non-empty subsequences. The key observation is that the largest number in the list is the sum of all three integers, and the smallest three numbers are the individual integers. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main logic to extract the original array a from the given array b.\n- Ensure the solution handles all edge cases and constraints.\n- Optimize the solution for performance with large inputs.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge case handling.\nWe will solve the problem by leveraging the properties of the array b. The largest number in b is the sum of all three numbers in a. The smallest three numbers in b are the individual elements of a. By identifying these numbers, we can reconstruct the original array a. This approach is efficient and works well within the given constraints.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The key observation is that the largest number in the sorted array b is the sum of all three numbers in array a. The smallest number is one of the original numbers. The second smallest number is another original number. The third smallest number is the sum of the two smallest numbers. Using these observations, we can deduce the original array.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Ensure the solution is efficient for large input sizes\n- Provide clear and accurate output formatting\n- Handle edge cases and constraints effectively\n- Optimize for readability and maintainability\nWe will use the observation that the largest number in the sorted array b is the sum of all three numbers in array a. The smallest number is one of the original numbers, and the second smallest number is another original number. The third smallest number is the sum of the two smallest numbers. Using these observations, we can deduce the original array efficiently without needing complex data structures.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The constraints ensure that a valid solution always exists, allowing for straightforward deduction of the original array.\nrequirement pool:\n- Efficiently process up to 5000 test cases\n- Correctly deduce the original array from the given sums\n- Ensure the solution is easy to understand and maintain\n- Handle edge cases and large numbers effectively\n- Provide clear and concise output for each test case\nWe will solve the problem by leveraging the properties of the sums of non-empty subsequences of a three-element array. Given the sorted array b of 7 integers, the smallest element is the smallest number in the original array a, and the largest element is the sum of all three numbers in a. The second smallest element in b is the second smallest number in a, and the third smallest element in b is the third smallest number in a. By using these properties, we can efficiently deduce the original array a from b.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The key is to identify the three smallest elements in the sorted array, which represent the individual elements of the original array, and the largest element, which is the sum of all three.\nrequirement pool:\n- Restore the original array from the given sums\n- Handle multiple test cases efficiently\n- Ensure the solution is easy to understand\n- Optimize for large input sizes\n- Provide detailed comments and documentation\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of the array a. The smallest three numbers in b are the individual elements of a, and the largest number is the sum of all three elements. This allows us to directly deduce the values of a from b.\n"], "scores": [], "pass_results": [false, true, true, false, false, true, true, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 187, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 88}
