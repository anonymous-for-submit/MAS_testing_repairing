{"name": "1615_B. And It's Non-Zero", "description": "You are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "tags": ["bitmasks", "greedy", "math"], "difficulty": 8, "id": 1615, "sample_io": [{"input": "5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n", "output": ["1\n3\n0\n2\n31072\n"]}], "test_list": [{"input": "5\n1 2\n2 8\n4 5\n2 5\n100000 200000\n", "output": ["1\n3\n0\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n100000 200000\n", "output": ["1\n3\n0\n0\n31072\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 5\n100000 200000\n", "output": ["1\n4\n0\n2\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100000 200000\n", "output": ["0\n3\n0\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n110000 200000\n", "output": ["1\n3\n0\n0\n21072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100100 200000\n", "output": ["0\n3\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 10\n110000 200000\n", "output": ["1\n3\n0\n3\n21072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n1 5\n100001 200000\n", "output": ["1\n3\n0\n2\n31071\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n100000 104325\n", "output": ["1\n3\n0\n0\n0\n"]}, {"input": "5\n2 2\n2 8\n1 5\n2 5\n100000 200000\n", "output": ["0\n3\n2\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 12\n110000 200000\n", "output": ["1\n3\n0\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n100100 200000\n", "output": ["0\n3\n1\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n4 9\n1 5\n100000 200000\n", "output": ["1\n3\n2\n2\n31072\n"]}, {"input": "5\n2 2\n2 12\n1 5\n2 5\n100000 200000\n", "output": ["0\n5\n2\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n110000 200000\n", "output": ["2\n3\n0\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 7\n100100 200000\n", "output": ["1\n3\n0\n2\n30972\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n101100 200000\n", "output": ["0\n3\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n100000 200000\n", "output": ["1\n3\n1\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 7\n100100 200000\n", "output": ["1\n2\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101000 200000\n", "output": ["1\n3\n1\n2\n30072\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n101000 200000\n", "output": ["1\n2\n1\n2\n30072\n"]}, {"input": "5\n2 4\n1 8\n4 5\n2 7\n100100 200000\n", "output": ["1\n4\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n101100 200000\n", "output": ["1\n2\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n4 5\n3 5\n100000 200000\n", "output": ["1\n3\n0\n1\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n4 5\n100000 200000\n", "output": ["0\n3\n0\n0\n31072\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 1\n100000 200000\n", "output": ["1\n4\n0\n0\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n4 5\n110000 200000\n", "output": ["0\n3\n0\n0\n21072\n"]}, {"input": "5\n2 2\n2 16\n4 5\n2 5\n100100 200000\n", "output": ["0\n7\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 7\n4 5\n4 10\n110000 200000\n", "output": ["1\n2\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 7\n4 6\n2 5\n100100 200000\n", "output": ["0\n2\n0\n2\n30972\n"]}, {"input": "5\n2 2\n2 8\n1 5\n4 5\n100000 200000\n", "output": ["0\n3\n2\n0\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 6\n4 5\n110001 200000\n", "output": ["1\n3\n0\n0\n21071\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 7\n100110 200000\n", "output": ["0\n3\n0\n2\n30962\n"]}, {"input": "5\n1 2\n2 8\n4 5\n7 12\n110000 200000\n", "output": ["1\n3\n0\n1\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 4\n100100 200000\n", "output": ["0\n3\n1\n1\n30972\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 5\n100000 200000\n", "output": ["1\n3\n3\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n010000 200000\n", "output": ["2\n3\n0\n0\n91697\n"]}, {"input": "5\n1 2\n2 4\n4 5\n4 13\n110000 200000\n", "output": ["1\n1\n0\n4\n21072\n"]}, {"input": "5\n2 2\n1 8\n3 6\n2 5\n101100 200000\n", "output": ["0\n4\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n100000 200000\n", "output": ["1\n3\n1\n5\n31072\n"]}, {"input": "5\n1 4\n1 7\n4 5\n2 7\n100100 200000\n", "output": ["2\n3\n0\n2\n30972\n"]}, {"input": "5\n1 4\n1 8\n4 5\n2 7\n100100 200000\n", "output": ["2\n4\n0\n2\n30972\n"]}, {"input": "5\n2 4\n2 5\n4 5\n2 7\n100100 123776\n", "output": ["1\n2\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 10\n110000 200000\n", "output": ["1\n2\n0\n2\n21072\n"]}, {"input": "5\n2 2\n2 8\n1 6\n4 5\n100000 200000\n", "output": ["0\n3\n3\n0\n31072\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 7\n100110 200000\n", "output": ["0\n4\n0\n2\n30962\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 4\n100101 200000\n", "output": ["0\n3\n1\n1\n30971\n"]}, {"input": "5\n2 2\n1 1\n3 6\n2 5\n101100 200000\n", "output": ["0\n0\n1\n2\n29972\n"]}, {"input": "5\n1 2\n1 8\n7 9\n1 10\n100000 200000\n", "output": ["1\n4\n1\n5\n31072\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101010 188450\n", "output": ["1\n3\n1\n2\n30062\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 20\n110000 200000\n", "output": ["1\n2\n0\n7\n21072\n"]}, {"input": "5\n2 2\n2 8\n1 2\n4 5\n100000 200000\n", "output": ["0\n3\n1\n0\n31072\n"]}, {"input": "5\n2 2\n2 5\n3 6\n2 4\n100101 200000\n", "output": ["0\n2\n1\n1\n30971\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101011 188450\n", "output": ["1\n3\n1\n2\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 5\n101000 200000\n", "output": ["1\n1\n1\n2\n30072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 5\n101011 188450\n", "output": ["1\n3\n3\n2\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 5\n101001 200000\n", "output": ["1\n1\n1\n2\n30071\n"]}, {"input": "5\n1 1\n1 8\n7 10\n1 10\n100000 186611\n", "output": ["0\n4\n1\n5\n31072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 2\n101011 188450\n", "output": ["1\n3\n3\n1\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 7\n101001 200000\n", "output": ["1\n1\n1\n3\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n101001 200000\n", "output": ["2\n1\n1\n3\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n111001 200000\n", "output": ["2\n1\n1\n3\n20071\n"]}, {"input": "5\n1 4\n1 6\n7 9\n1 7\n111001 200000\n", "output": ["2\n3\n1\n3\n20071\n"]}, {"input": "5\n1 4\n2 6\n7 9\n1 7\n111001 200000\n", "output": ["2\n2\n1\n3\n20071\n"]}, {"input": "5\n2 4\n3 6\n7 9\n1 7\n111001 200000\n", "output": ["1\n1\n1\n3\n20071\n"]}, {"input": "5\n2 8\n3 6\n7 9\n1 7\n111001 200000\n", "output": ["3\n1\n1\n3\n20071\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 4\n100001 200000\n", "output": ["1\n3\n0\n0\n31071\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100000 101573\n", "output": ["0\n3\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 4\n4 5\n4 5\n110000 200000\n", "output": ["1\n1\n0\n0\n21072\n"]}, {"input": "5\n1 2\n1 8\n4 5\n4 10\n110000 200000\n", "output": ["1\n4\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n100100 200000\n", "output": ["0\n6\n0\n2\n30972\n"]}, {"input": "5\n1 2\n4 8\n4 5\n1 5\n100000 200000\n", "output": ["1\n1\n0\n2\n31072\n"]}, {"input": "5\n2 2\n2 8\n1 5\n2 5\n100000 161404\n", "output": ["0\n3\n2\n2\n30333\n"]}, {"input": "5\n1 2\n2 8\n3 6\n4 5\n110000 200000\n", "output": ["1\n3\n1\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 10\n100100 200000\n", "output": ["1\n3\n0\n4\n30972\n"]}, {"input": "5\n1 1\n2 8\n4 5\n4 12\n110000 200000\n", "output": ["0\n3\n0\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n100101 200000\n", "output": ["0\n3\n1\n2\n30971\n"]}, {"input": "5\n1 1\n2 8\n7 9\n1 5\n100000 200000\n", "output": ["0\n3\n1\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 11\n4 5\n110000 200000\n", "output": ["2\n3\n4\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 7\n100101 200000\n", "output": ["1\n3\n0\n2\n30971\n"]}, {"input": "5\n1 2\n2 8\n2 5\n4 13\n110000 200000\n", "output": ["1\n3\n2\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 11\n2 5\n101100 200000\n", "output": ["0\n3\n4\n2\n29972\n"]}, {"input": "5\n1 2\n2 13\n7 9\n1 5\n100000 200000\n", "output": ["1\n6\n1\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 7\n000100 200000\n", "output": ["1\n2\n0\n2\n99933\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101000 135172\n", "output": ["1\n3\n1\n2\n4101\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n100000 200000\n", "output": ["1\n2\n1\n2\n31072\n"]}, {"input": "5\n1 4\n2 7\n7 9\n1 5\n101100 200000\n", "output": ["2\n2\n1\n2\n29972\n"]}, {"input": "5\n2 2\n2 10\n4 5\n4 5\n100000 200000\n", "output": ["0\n4\n0\n0\n31072\n"]}, {"input": "5\n2 4\n2 16\n4 5\n2 5\n100100 200000\n", "output": ["1\n7\n0\n2\n30972\n"]}, {"input": "5\n1 3\n2 2\n4 6\n2 5\n100000 200000\n", "output": ["1\n0\n0\n2\n31072\n"]}, {"input": "5\n2 2\n1 8\n1 5\n4 5\n100000 200000\n", "output": ["0\n4\n2\n0\n31072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n4 4\n100100 200000\n", "output": ["0\n3\n1\n0\n30972\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 8\n100000 200000\n", "output": ["1\n3\n3\n4\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n010001 200000\n", "output": ["2\n3\n0\n0\n91696\n"]}, {"input": "5\n2 2\n1 15\n3 6\n2 5\n101100 200000\n", "output": ["0\n7\n1\n2\n29972\n"]}, {"input": "5\n1 4\n1 8\n4 5\n4 7\n100100 200000\n", "output": ["2\n4\n0\n0\n30972\n"]}, {"input": "5\n4 4\n2 5\n4 5\n2 7\n100100 123776\n", "output": ["0\n2\n0\n2\n0\n"]}, {"input": "5\n1 2\n3 7\n4 5\n6 10\n110000 200000\n", "output": ["1\n1\n0\n2\n21072\n"]}, {"input": "5\n2 2\n2 7\n4 6\n2 11\n100100 200000\n", "output": ["0\n2\n0\n4\n30972\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 3\n100110 200000\n", "output": ["0\n4\n0\n0\n30962\n"]}, {"input": "5\n2 2\n2 10\n3 6\n2 4\n100101 200000\n", "output": ["0\n4\n1\n1\n30971\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 20\n100000 200000\n", "output": ["1\n2\n0\n7\n31072\n"]}, {"input": "5\n2 2\n2 5\n3 6\n2 4\n100101 108244\n", "output": ["0\n2\n1\n1\n0\n"]}, {"input": "5\n2 3\n1 1\n3 6\n2 5\n111100 200000\n", "output": ["0\n0\n1\n2\n19972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n101011 188450\n", "output": ["1\n3\n1\n5\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 14\n101001 200000\n", "output": ["1\n1\n1\n7\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n110001 200000\n", "output": ["2\n1\n1\n3\n21071\n"]}, {"input": "5\n1 4\n3 6\n7 9\n1 13\n111001 200000\n", "output": ["2\n1\n1\n6\n20071\n"]}, {"input": "5\n1 2\n2 13\n4 5\n1 2\n100000 200000\n", "output": ["1\n6\n0\n1\n31072\n"]}, {"input": "5\n2 2\n2 8\n3 5\n2 5\n100000 101573\n", "output": ["0\n3\n1\n2\n0\n"]}, {"input": "5\n1 2\n1 13\n4 5\n4 10\n110000 200000\n", "output": ["1\n6\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n100100 138386\n", "output": ["0\n6\n0\n2\n7315\n"]}, {"input": "5\n1 2\n2 8\n3 8\n4 5\n110000 200000\n", "output": ["1\n3\n2\n0\n21072\n"]}, {"input": "5\n2 2\n2 2\n3 6\n2 5\n100101 200000\n", "output": ["0\n0\n1\n2\n30971\n"]}, {"input": "5\n1 4\n2 5\n4 11\n4 5\n110000 200000\n", "output": ["2\n2\n4\n0\n21072\n"]}, {"input": "5\n1 4\n2 8\n4 5\n2 7\n100101 200000\n", "output": ["2\n3\n0\n2\n30971\n"]}, {"input": "5\n2 2\n1 8\n3 11\n2 5\n101100 200000\n", "output": ["0\n4\n4\n2\n29972\n"]}, {"input": "5\n2 4\n2 7\n4 5\n1 7\n000100 200000\n", "output": ["1\n2\n0\n3\n99933\n"]}, {"input": "5\n1 2\n2 4\n7 9\n1 5\n101000 135172\n", "output": ["1\n1\n1\n2\n4101\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n100001 200000\n", "output": ["1\n2\n1\n2\n31071\n"]}, {"input": "5\n2 2\n2 8\n2 4\n4 5\n110000 200000\n", "output": ["0\n3\n1\n0\n21072\n"]}, {"input": "5\n2 4\n1 16\n4 5\n2 5\n100100 200000\n", "output": ["1\n8\n0\n2\n30972\n"]}, {"input": "5\n2 2\n1 8\n1 5\n4 5\n100000 150693\n", "output": ["0\n4\n2\n0\n19622\n"]}, {"input": "5\n1 2\n2 8\n3 5\n4 5\n110001 200000\n", "output": ["1\n3\n1\n0\n21071\n"]}, {"input": "5\n1 3\n2 8\n4 5\n2 12\n110000 200000\n", "output": ["1\n3\n0\n5\n21072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 8\n100010 200000\n", "output": ["1\n3\n3\n4\n31062\n"]}, {"input": "5\n1 1\n2 4\n4 5\n4 15\n110000 200000\n", "output": ["0\n1\n0\n4\n21072\n"]}, {"input": "5\n1 4\n1 8\n4 5\n3 7\n100100 200000\n", "output": ["2\n4\n0\n1\n30972\n"]}, {"input": "5\n2 2\n3 7\n4 5\n6 10\n110000 200000\n", "output": ["0\n1\n0\n2\n21072\n"]}, {"input": "5\n2 3\n2 8\n1 6\n4 5\n100100 200000\n", "output": ["0\n3\n3\n0\n30972\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 3\n101110 200000\n", "output": ["0\n4\n0\n0\n29962\n"]}, {"input": "5\n1 2\n4 8\n7 9\n2 5\n101011 188450\n", "output": ["1\n1\n1\n2\n30061\n"]}, {"input": "5\n1 2\n4 7\n4 5\n6 20\n100000 200000\n", "output": ["1\n0\n0\n7\n31072\n"]}, {"input": "5\n2 3\n1 2\n3 6\n2 5\n111100 200000\n", "output": ["0\n1\n1\n2\n19972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n101010 188450\n", "output": ["1\n3\n1\n5\n30062\n"]}, {"input": "5\n1 4\n1 3\n7 15\n1 5\n101000 200000\n", "output": ["2\n1\n1\n2\n30072\n"]}, {"input": "5\n1 1\n1 8\n7 8\n1 10\n100010 186611\n", "output": ["0\n4\n1\n5\n31062\n"]}, {"input": "5\n1 2\n1 4\n7 9\n1 14\n101001 200000\n", "output": ["1\n2\n1\n7\n30071\n"]}, {"input": "5\n1 4\n1 3\n9 9\n1 7\n110001 200000\n", "output": ["2\n1\n0\n3\n21071\n"]}, {"input": "5\n1 4\n1 8\n7 9\n1 7\n111001 200000\n", "output": ["2\n4\n1\n3\n20071\n"]}, {"input": "5\n1 4\n3 6\n7 9\n1 9\n111001 200000\n", "output": ["2\n1\n1\n4\n20071\n"]}, {"input": "5\n2 3\n1 8\n4 5\n2 5\n100100 185068\n", "output": ["0\n4\n0\n2\n30972\n"]}, {"input": "5\n1 2\n1 13\n4 5\n1 10\n110000 200000\n", "output": ["1\n6\n0\n5\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n000100 138386\n", "output": ["0\n6\n0\n2\n69139\n"]}, {"input": "5\n1 2\n2 14\n3 8\n4 5\n110000 200000\n", "output": ["1\n6\n2\n0\n21072\n"]}, {"input": "5\n1 2\n2 5\n4 11\n4 5\n110000 200000\n", "output": ["1\n2\n4\n0\n21072\n"]}, {"input": "5\n1 4\n2 5\n4 5\n2 7\n100101 200000\n", "output": ["2\n2\n0\n2\n30971\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 8\n100001 200000\n", "output": ["1\n2\n1\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 4\n4 5\n110000 200000\n", "output": ["0\n0\n1\n0\n21072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 14\n100010 200000\n", "output": ["1\n3\n3\n7\n31062\n"]}, {"input": "5\n1 1\n2 5\n4 5\n4 15\n110000 200000\n", "output": ["0\n2\n0\n4\n21072\n"]}, {"input": "5\n2 2\n3 9\n4 5\n6 10\n110000 200000\n", "output": ["0\n3\n0\n2\n21072\n"]}, {"input": "5\n1 2\n4 8\n7 9\n3 5\n101011 188450\n", "output": ["1\n1\n1\n1\n30061\n"]}, {"input": "5\n1 4\n4 7\n4 5\n6 20\n100000 200000\n", "output": ["2\n0\n0\n7\n31072\n"]}, {"input": "5\n2 3\n1 2\n1 6\n2 5\n111100 200000\n", "output": ["0\n1\n3\n2\n19972\n"]}, {"input": "5\n1 1\n1 8\n7 8\n2 10\n100010 186611\n", "output": ["0\n4\n1\n4\n31062\n"]}, {"input": "5\n1 2\n1 4\n7 9\n1 14\n100001 200000\n", "output": ["1\n2\n1\n7\n31071\n"]}, {"input": "5\n1 4\n1 3\n9 9\n2 7\n110001 200000\n", "output": ["2\n1\n0\n2\n21071\n"]}, {"input": "5\n1 4\n1 8\n7 9\n1 2\n111001 200000\n", "output": ["2\n4\n1\n1\n20071\n"]}, {"input": "5\n1 2\n3 14\n3 8\n4 5\n110000 200000\n", "output": ["1\n5\n2\n0\n21072\n"]}, {"input": "5\n1 4\n2 5\n4 5\n2 8\n100101 200000\n", "output": ["2\n2\n0\n3\n30971\n"]}, {"input": "5\n1 2\n2 12\n7 9\n1 8\n100001 200000\n", "output": ["1\n5\n1\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 4\n4 5\n110100 200000\n", "output": ["0\n0\n1\n0\n20972\n"]}, {"input": "5\n1 1\n4 5\n4 5\n4 15\n110000 200000\n", "output": ["0\n0\n0\n4\n21072\n"]}, {"input": "5\n1 4\n1 16\n4 7\n3 7\n100100 200000\n", "output": ["2\n8\n0\n1\n30972\n"]}, {"input": "5\n1 2\n3 9\n4 5\n6 10\n110000 200000\n", "output": ["1\n3\n0\n2\n21072\n"]}, {"input": "5\n2 3\n1 2\n1 6\n2 5\n101100 200000\n", "output": ["0\n1\n3\n2\n29972\n"]}, {"input": "5\n1 4\n1 3\n9 9\n2 7\n111001 200000\n", "output": ["2\n1\n0\n2\n20071\n"]}, {"input": "5\n1 4\n1 5\n7 9\n1 2\n111001 200000\n", "output": ["2\n2\n1\n1\n20071\n"]}, {"input": "5\n2 2\n2 5\n3 5\n2 5\n101000 129464\n", "output": ["0\n2\n1\n2\n0\n"]}, {"input": "5\n1 2\n2 12\n4 9\n1 8\n100001 200000\n", "output": ["1\n5\n2\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 8\n4 5\n110100 200000\n", "output": ["0\n0\n3\n0\n20972\n"]}, {"input": "5\n1 2\n4 8\n3 5\n4 7\n110001 200000\n", "output": ["1\n1\n1\n0\n21071\n"]}, {"input": "5\n2 3\n2 8\n3 5\n4 12\n110000 200000\n", "output": ["0\n3\n1\n4\n21072\n"]}, {"input": "5\n1 1\n4 5\n4 5\n4 15\n110010 200000\n", "output": ["0\n0\n0\n4\n21062\n"]}, {"input": "5\n1 1\n1 8\n7 14\n2 16\n100010 186611\n", "output": ["0\n4\n1\n7\n31062\n"]}, {"input": "5\n1 6\n1 5\n7 9\n1 2\n111001 200000\n", "output": ["3\n2\n1\n1\n20071\n"]}, {"input": "5\n2 2\n2 5\n3 9\n2 5\n101000 129464\n", "output": ["0\n2\n3\n2\n0\n"]}, {"input": "5\n1 1\n2 12\n4 9\n1 8\n100001 200000\n", "output": ["0\n5\n2\n4\n31071\n"]}, {"input": "5\n1 2\n4 8\n3 5\n1 7\n110001 200000\n", "output": ["1\n1\n1\n3\n21071\n"]}, {"input": "5\n2 3\n2 8\n3 5\n4 12\n010000 200000\n", "output": ["0\n3\n1\n4\n91697\n"]}, {"input": "5\n2 3\n1 3\n1 6\n2 8\n101100 200000\n", "output": ["0\n1\n3\n3\n29972\n"]}, {"input": "5\n1 1\n1 8\n6 14\n2 16\n100010 186611\n", "output": ["0\n4\n2\n7\n31062\n"]}, {"input": "5\n1 6\n1 10\n7 9\n1 2\n111001 200000\n", "output": ["3\n5\n1\n1\n20071\n"]}, {"input": "5\n1 1\n2 12\n4 13\n1 8\n100001 200000\n", "output": ["0\n5\n4\n4\n31071\n"]}, {"input": "5\n1 2\n4 4\n3 5\n1 7\n110001 200000\n", "output": ["1\n0\n1\n3\n21071\n"]}, {"input": "5\n2 3\n1 5\n1 6\n2 8\n101100 200000\n", "output": ["0\n2\n3\n3\n29972\n"]}, {"input": "5\n1 6\n1 10\n9 9\n1 2\n111001 200000\n", "output": ["3\n5\n0\n1\n20071\n"]}, {"input": "5\n1 1\n2 12\n4 13\n1 8\n100000 200000\n", "output": ["0\n5\n4\n4\n31072\n"]}, {"input": "5\n1 2\n4 4\n3 8\n1 7\n110001 200000\n", "output": ["1\n0\n2\n3\n21071\n"]}, {"input": "5\n1 2\n4 4\n3 8\n2 7\n110001 200000\n", "output": ["1\n0\n2\n2\n21071\n"]}, {"input": "5\n2 3\n2 5\n1 6\n2 8\n101101 200000\n", "output": ["0\n2\n3\n3\n29971\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 5\n100000 121445\n", "output": ["1\n4\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n110010 200000\n", "output": ["1\n3\n0\n0\n21062\n"]}, {"input": "5\n1 2\n2 10\n4 5\n4 12\n110000 200000\n", "output": ["1\n4\n0\n4\n21072\n"]}, {"input": "5\n2 2\n4 8\n3 6\n2 5\n100100 200000\n", "output": ["0\n1\n1\n2\n30972\n"]}, {"input": "5\n2 2\n2 7\n1 5\n2 5\n100000 200000\n", "output": ["0\n2\n2\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 13\n100100 200000\n", "output": ["1\n2\n0\n6\n30972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 1\n101000 200000\n", "output": ["1\n3\n1\n0\n30072\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n111100 200000\n", "output": ["1\n2\n1\n2\n19972\n"]}], "task_id": "codecontest/120", "prompt": "You are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits. The challenge is to identify the optimal subset of elements for deletion while achieving a non-zero bitwise AND. Consider edge cases where the range includes very small or very large integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "repair_prompt": ["You are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits. The challenge is to identify the optimal subset of elements for deletion while achieving a non-zero bitwise AND. Consider edge cases where the range includes very small or very large integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_for_non_zero_and(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to achieve a non-zero bitwise AND for each test case.\n\n    Args:\n        test_cases (List[Tuple[int, int]]): A list of tuples, each containing two integers l and r.\n\n    Returns:\n        List[int]: A list of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Find the largest power of two less than or equal to r\n        largest_power_of_two = 1\n        while largest_power_of_two <= r:\n            largest_power_of_two <<= 1\n        largest_power_of_two >>= 1\n        \n        # Calculate the number of deletions\n        if largest_power_of_two < l:\n            # If the largest power of two is less than l, all numbers in the range [l, r] need to be deleted\n            results.append(r - l + 1)\n        else:\n            # Otherwise, calculate the number of deletions needed to make the AND non-zero\n            results.append(max(0, l - largest_power_of_two))\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_for_non_zero_and(test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\ndef min_deletions_to_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        cases (List[Tuple[int, int]]): List of tuples where each tuple contains two integers l and r.\n\n    Returns:\n        List[int]: List of results for each test case, representing the minimum deletions required.\n    \"\"\"\n    results = []\n    \n    for l, r in cases:\n        # Initialize the minimum deletions to the maximum possible value\n        min_deletions = r - l + 1\n        \n        # Iterate over each possible number in the range\n        for i in range(l, r + 1):\n            # Calculate the bitwise AND of the range [l, r]\n            current_and = i\n            for j in range(i + 1, r + 1):\n                current_and &= j\n                if current_and == 0:\n                    break\n            \n            # If the AND is non-zero, calculate deletions needed\n            if current_and != 0:\n                deletions = i - l\n                min_deletions = min(min_deletions, deletions)\n        \n        results.append(min_deletions)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process it, and output the results.\"\"\"\n    input_data = sys.stdin.read().strip().split()\n    t = int(input_data[0])\n    cases = [(int(input_data[i]), int(input_data[i+1])) for i in range(1, len(input_data), 2)]\n    \n    results = min_deletions_to_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of a range of integers non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        cases (List[Tuple[int, int]]): List of tuples, each containing the start and end of the range.\n\n    Returns:\n        List[int]: List of minimum deletions required for each test case.\n    \"\"\"\n    results = []\n    \n    for start, end in cases:\n        # Initialize the result for this range\n        min_deletions = end - start + 1\n        \n        # Iterate over all possible bit positions\n        for bit in range(31):  # Assuming 32-bit integers\n            # Count numbers with the current bit set\n            count_with_bit_set = 0\n            \n            for num in range(start, end + 1):\n                if num & (1 << bit):\n                    count_with_bit_set += 1\n            \n            # Calculate deletions needed to make the AND non-zero\n            deletions_needed = (end - start + 1) - count_with_bit_set\n            min_deletions = min(min_deletions, deletions_needed)\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_to_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of a range of integers non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples, each containing two integers (l, r) representing the range.\n\n    Returns:\n        List[int]: List of results, each representing the minimum deletions for the corresponding test case.\n    \"\"\"\n    results = []\n    \n    for l, r in test_cases:\n        # Initialize the minimum deletions to the maximum possible value\n        min_deletions = r - l + 1\n        \n        # Iterate over each possible starting point in the range\n        for start in range(l, r + 1):\n            current_and = start\n            deletions = 0\n            \n            # Iterate over the range starting from 'start'\n            for num in range(start, r + 1):\n                current_and &= num\n                if current_and == 0:\n                    deletions += 1\n                else:\n                    # If we find a non-zero AND, update the minimum deletions\n                    min_deletions = min(min_deletions, deletions)\n                    break\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_to_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples where each tuple contains two integers l and r.\n\n    Returns:\n        List[int]: List of integers representing the minimum deletions required for each test case.\n    \"\"\"\n    results = []\n    \n    for l, r in test_cases:\n        # Initialize the minimum deletions to the maximum possible value\n        min_deletions = r - l + 1\n        \n        # Iterate over each bit position (assuming 32-bit integers)\n        for bit in range(32):\n            # Count numbers in the range [l, r] that have the current bit set\n            count_with_bit_set = 0\n            for i in range(l, r + 1):\n                if i & (1 << bit):\n                    count_with_bit_set += 1\n            \n            # Calculate deletions needed to make this bit non-zero in the AND result\n            deletions_needed = (r - l + 1) - count_with_bit_set\n            min_deletions = min(min_deletions, deletions_needed)\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().split()\n    t = int(data[0])\n    test_cases = [(int(data[i]), int(data[i+1])) for i in range(1, len(data), 2)]\n    \n    # Output interface\n    results = min_deletions_to_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of a range of integers non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples, each containing the start and end of a range.\n\n    Returns:\n        List[int]: List of minimum deletions required for each test case.\n    \"\"\"\n    results = []\n    \n    for start, end in test_cases:\n        # If the range is a single number, the AND is the number itself, no deletions needed\n        if start == end:\n            results.append(0)\n            continue\n        \n        # Calculate the bitwise AND of the entire range\n        current_and = start\n        for num in range(start + 1, end + 1):\n            current_and &= num\n            # If at any point the AND becomes zero, we need to consider deletions\n            if current_and == 0:\n                break\n        \n        # If the AND is already non-zero, no deletions are needed\n        if current_and != 0:\n            results.append(0)\n        else:\n            # Calculate the minimum deletions needed\n            # We need to find the smallest number of deletions to make the AND non-zero\n            # This can be done by checking the AND of subsets of the range\n            min_deletions = end - start  # Start with the maximum possible deletions\n            for i in range(start, end + 1):\n                current_and = i\n                for j in range(i + 1, end + 1):\n                    current_and &= j\n                    if current_and != 0:\n                        min_deletions = min(min_deletions, j - i)\n                        break\n            results.append(min_deletions)\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_to_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_for_non_zero_and(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of a range of integers non-zero.\n\n    Args:\n        test_cases (List[Tuple[int, int]]): A list of tuples, each containing two integers representing the range [l, r].\n\n    Returns:\n        List[int]: A list of integers where each integer is the minimum number of deletions required for the corresponding test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Initialize the result for this test case\n        min_deletions = float('inf')\n        \n        # Iterate over all possible numbers in the range\n        for i in range(l, r + 1):\n            # Calculate the bitwise AND of the range [l, i]\n            current_and = i\n            for j in range(i + 1, r + 1):\n                current_and &= j\n                if current_and == 0:\n                    break\n            \n            # If the AND is non-zero, calculate deletions needed\n            if current_and != 0:\n                deletions = (i - l) + (r - i)\n                min_deletions = min(min_deletions, deletions)\n        \n        # If no valid AND was found, it means all need to be deleted\n        if min_deletions == float('inf'):\n            min_deletions = r - l + 1\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_for_non_zero_and(test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\ndef min_deletions_to_non_zero_and(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to achieve a non-zero bitwise AND for each test case.\n\n    Args:\n        test_cases (List[Tuple[int, int]]): A list of tuples, each containing two integers l and r.\n\n    Returns:\n        List[int]: A list of integers representing the minimum deletions for each test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Initialize the minimum deletions to the size of the range\n        min_deletions = r - l + 1\n        \n        # Iterate over each number in the range [l, r]\n        for i in range(l, r + 1):\n            # Calculate the bitwise AND of the range [i, r]\n            current_and = i\n            for j in range(i + 1, r + 1):\n                current_and &= j\n                if current_and == 0:\n                    break\n            \n            # If the AND is non-zero, calculate deletions\n            if current_and != 0:\n                deletions = i - l\n                min_deletions = min(min_deletions, deletions)\n        \n        results.append(min_deletions)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split()\n    t = int(input_data[0])\n    test_cases = [(int(input_data[i]), int(input_data[i+1])) for i in range(1, len(input_data), 2)]\n    \n    results = min_deletions_to_non_zero_and(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of a range of integers non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples, each containing the start and end of a range.\n\n    Returns:\n        List[int]: List of minimum deletions required for each test case.\n    \"\"\"\n    results = []\n    \n    for start, end in test_cases:\n        # Initialize the result for this test case\n        min_deletions = end - start + 1\n        \n        # Iterate over all possible numbers in the range\n        for i in range(start, end + 1):\n            current_and = i\n            deletions = 0\n            \n            for j in range(start, end + 1):\n                if j != i:\n                    current_and &= j\n            \n            # If current_and is non-zero, calculate deletions\n            if current_and != 0:\n                deletions = (end - start + 1) - 1  # All except one number\n            \n            # Update the minimum deletions if a better solution is found\n            min_deletions = min(min_deletions, deletions)\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_to_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of a range of integers non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        cases (List[Tuple[int, int]]): List of tuples, each containing two integers (l, r) representing the range.\n\n    Returns:\n        List[int]: List of integers representing the minimum deletions for each test case.\n    \"\"\"\n    results = []\n    \n    for l, r in cases:\n        # If l equals r, the AND is the number itself, which is non-zero if l is not zero.\n        if l == r:\n            results.append(0 if l != 0 else 1)\n            continue\n        \n        # Calculate the bitwise AND of the entire range [l, r]\n        current_and = l\n        for num in range(l + 1, r + 1):\n            current_and &= num\n            # If at any point the AND becomes zero, we need to consider deletions\n            if current_and == 0:\n                break\n        \n        # If the AND is non-zero, no deletions are needed\n        if current_and != 0:\n            results.append(0)\n        else:\n            # If the AND is zero, we need to find the minimum deletions\n            # The strategy is to find the smallest number of deletions to make the AND non-zero\n            # This can be done by checking the AND of smaller sub-ranges\n            min_deletions = r - l + 1  # Start with the maximum possible deletions\n            for start in range(l, r + 1):\n                current_and = start\n                for end in range(start + 1, r + 1):\n                    current_and &= end\n                    if current_and != 0:\n                        min_deletions = min(min_deletions, start - l + r - end)\n                        break\n            results.append(min_deletions)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_to_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe requirement is to determine the minimum number of deletions needed to achieve a non-zero bitwise AND for a given range of integers. The solution must efficiently handle up to 10,000 test cases and ranges up to 200,000 integers. Edge cases, such as very small or very large ranges, must be considered to ensure robustness.\nrequirement pool:\n- Efficiently compute bitwise AND for large ranges\n- Optimize deletion strategy for minimal removals\n- Handle edge cases effectively\n- Ensure solution scalability for multiple test cases\n- Provide clear output format\nWe will use a mathematical approach to determine the minimum number of deletions required to achieve a non-zero bitwise AND. The key observation is that the bitwise AND of a range [l, r] is non-zero if there exists a number in the range that has all bits set in positions where the AND operation results in 1. We will calculate the number of deletions by finding the largest power of two less than or equal to r and checking the range [l, r] against this power of two.\n", "requirement analysis:\nThe problem requires finding the minimum number of deletions to achieve a non-zero bitwise AND for a given range of integers. The solution must efficiently handle up to 10,000 test cases and ranges up to 200,000. Edge cases, such as small ranges and large ranges, must be considered to ensure accuracy.\nrequirement pool:\n- Implement the main algorithm to solve the problem\n- Optimize the solution for large input sizes\n- Ensure the solution handles edge cases correctly\n- Test the solution against diverse test cases\n- Provide clear documentation for the solution\nWe will iterate over each test case, generate the array from l to r, and determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has all bits set in positions where the AND operation results in zero. We will use bit manipulation to efficiently determine the minimum deletions required.\n", "requirement analysis:\nThe problem requires finding the minimum number of deletions to achieve a non-zero bitwise AND for a given range of integers. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000, ensuring performance and correctness.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently.\n- Ensure the solution handles edge cases, such as small and large ranges.\n- Optimize the solution for performance given the constraints.\n- Test the solution against a variety of test cases to ensure accuracy.\n- Document the solution approach and edge case handling.\nWe will implement a function that calculates the minimum number of deletions required to make the bitwise AND of a range of integers non-zero. The approach involves iterating over the range and checking the bitwise AND of subsets to determine the minimum deletions needed. Given the constraints, we need an efficient algorithm that can handle up to 10,000 test cases with ranges up to 200,000. We will use bit manipulation techniques to optimize the solution.\n", "requirement analysis:\nThe problem requires finding the minimum number of deletions to make the bitwise AND of a range of integers non-zero. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000. Edge cases include small ranges and large ranges, requiring careful consideration of bitwise operations and optimization techniques.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently.\n- Ensure the solution handles edge cases, such as very small or very large ranges.\n- Optimize the solution for performance given the constraints.\n- Develop comprehensive test cases to validate the solution.\n- Document the solution approach and edge case handling.\nWe will implement a function that calculates the minimum number of deletions required to make the bitwise AND of a range of integers non-zero. The approach involves iterating over the range and checking the bitwise AND of subsets to determine the minimum deletions needed. Given the constraints, we will optimize the solution to handle up to 10,000 test cases efficiently.\n", "requirement analysis:\nThe problem requires determining the minimum number of deletions needed to make the bitwise AND of a range of integers non-zero. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000, considering both small and large integer values.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently.\n- Ensure the solution handles edge cases, such as small and large ranges, effectively.\n- Optimize the solution for performance to handle the maximum constraints.\n- Develop comprehensive test cases to validate the solution.\n- Document the solution approach and edge case handling.\nWe will iterate over each test case, and for each range [l, r], we will determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has all bits set in positions where the AND operation results in zero. We will use bit manipulation to efficiently determine the minimum deletions required.\n", "requirement analysis:\nThe problem requires determining the minimum number of deletions needed to achieve a non-zero bitwise AND for a given range of integers. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000, necessitating an optimized approach to avoid timeouts.\nrequirement pool:\n- Implement an efficient algorithm to solve the problem within the given constraints.\n- Ensure the solution handles edge cases, such as very small or very large ranges.\n- Optimize the solution to minimize computational complexity.\n- Provide clear documentation and comments within the code for maintainability.\n- Consider potential improvements for future scalability.\nWe will implement a function that calculates the minimum number of deletions required to make the bitwise AND of a range of integers non-zero. The approach involves iterating over the range and checking the bitwise AND of subsets to determine the minimum deletions needed. Given the constraints, we need an efficient algorithm that can handle up to 10,000 test cases with ranges up to 200,000. We will use bit manipulation techniques to optimize the solution.\n", "requirement analysis:\nThe problem requires determining the minimum number of deletions needed to achieve a non-zero bitwise AND for a given range of integers. The solution must efficiently handle up to 10,000 test cases with ranges as large as 200,000. The key challenge is optimizing the algorithm to minimize deletions while ensuring the bitwise AND is non-zero.\nrequirement pool:\n- Develop an efficient algorithm to compute the minimum deletions for a non-zero bitwise AND.\n- Ensure the solution handles the maximum constraints effectively.\n- Optimize the code for performance and readability.\n- Provide clear documentation and examples for users.\n- Implement additional test cases to validate edge scenarios.\nWe will implement a function that calculates the minimum number of deletions required to make the bitwise AND of a range of integers non-zero. The approach involves iterating over the range and using bitwise operations to determine the optimal subset of elements to delete. We will leverage efficient bitwise manipulation techniques to ensure the solution is optimal and can handle the maximum constraints effectively.\n", "requirement analysis:\nThe problem requires identifying the minimum number of deletions to achieve a non-zero bitwise AND for a given range of integers. The solution must efficiently handle up to 10^4 test cases and consider edge cases with very small or large integers.\nrequirement pool:\n- Implement efficient bitwise operations to determine the minimum deletions.\n- Optimize the solution to handle large ranges and multiple test cases.\n- Ensure the solution is robust against edge cases.\n- Provide clear documentation and examples for understanding the solution.\n- Enhance performance for large input sizes.\nWe will iterate over each test case, generate the array from l to r, and determine the minimum number of deletions required to achieve a non-zero bitwise AND. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has all bits set in positions where the AND operation results in zero. We will use bit manipulation to efficiently determine the minimum deletions.\n", "requirement analysis:\nThe problem requires finding the minimum number of deletions to achieve a non-zero bitwise AND for a given range of integers. The solution must efficiently handle up to 10,000 test cases and ranges up to 200,000. Edge cases include small ranges and large ranges, requiring careful consideration of the bitwise properties of numbers.\nrequirement pool:\n- Implement efficient algorithm to solve the problem\n- Ensure solution handles edge cases correctly\n- Optimize for large input sizes\n- Provide clear output format\n- Maintain code readability and extensibility\nWe will implement a function that calculates the minimum number of deletions required to make the bitwise AND of a range of integers non-zero. The approach involves iterating over the range and using bitwise operations to determine the optimal deletions. We will leverage Python's built-in capabilities for handling large integers and efficient bitwise operations.\n", "requirement analysis:\nThe problem requires finding the minimum number of deletions to achieve a non-zero bitwise AND for a given range of integers. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000, considering both small and large integer values.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently.\n- Ensure the solution handles edge cases, such as small and large ranges.\n- Optimize the solution for performance given the constraints.\n- Test the solution against a variety of test cases to ensure accuracy.\n- Document the solution approach and edge case handling.\nWe will implement a function that calculates the minimum number of deletions required to make the bitwise AND of a range of integers non-zero. The approach involves iterating over the range and checking the bitwise AND of subsets to determine the minimum deletions needed. Given the constraints, we will optimize the solution to handle up to 10,000 test cases efficiently. We will use Python's built-in capabilities for bitwise operations and list manipulations.\n"], "scores": [], "pass_results": [false, false, false, true, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 139, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "mutate_method": "add_1_sentence_at_end", "parent_index": 50}
