{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements. Your goal is to determine how to systematically approach reconstructing array a from the sorted subsequence sums in array b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements. Your goal is to determine how to systematically approach reconstructing array a from the sorted subsequence sums in array b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the sorted array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list 'b' of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in 'b' is a1\n        a1 = case[0]\n        # The second smallest element in 'b' is a2\n        a2 = case[1]\n        # The largest element in 'b' is a1 + a2 + a3\n        a3 = case[-1] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nimport sys\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    \n    # Process the test cases\n    results = reconstruct_array(t, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the sorted list of sums.\n\n    Args:\n        b (List[int]): A sorted list of sums of the original array elements.\n\n    Returns:\n        List[int]: The original array.\n    \"\"\"\n    # The smallest element in b is the smallest element of the original array a\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements of a\n    a3 = b[-1] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Reconstructs the original array 'a' from the sorted array 'b' which contains\n    all possible non-empty subsequence sums of 'a'.\n\n    Args:\n        b (List[int]): A sorted list of integers representing subsequence sums.\n\n    Returns:\n        List[int]: The original array 'a' consisting of three elements.\n    \"\"\"\n    # Since b is sorted, the smallest element is the smallest element of a\n    # and the largest element is the sum of all elements of a.\n    # The second smallest element in b is the sum of the two smallest elements of a.\n    \n    # Extract the elements of the original array a\n    a1 = b[0]  # The smallest element in b is the smallest element of a\n    a2 = b[1] - a1  # The second smallest element minus the smallest gives the second element of a\n    a3 = b[-1] - (a1 + a2)  # The largest element minus the sum of the first two gives the third element of a\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = reconstruct_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the array 'a' from the array 'b' which contains all possible non-empty subsequence sums of 'a'.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the array 'b'.\n\n    Returns:\n        List[List[int]]: List of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to easily find the smallest and largest sums\n        b.sort()\n        \n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        \n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        \n        # Deduce the other two elements of a\n        # Since b contains all possible non-empty subsequence sums, the second smallest element in b\n        # is either a1 + a2 or a1 + a3, and the second largest element is a2 + a3.\n        # We can use these properties to deduce a2 and a3.\n        a2 = b[1] - a1\n        a3 = sum_a - a1 - a2\n        \n        # Append the reconstructed array to the results\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the results from the reconstruct_array function\n    results = reconstruct_array(t, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef reconstruct_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Reconstructs the original array 'a' from the list 'b' which contains\n    all possible sums of non-empty subsequences of 'a'.\n\n    Args:\n        b (List[int]): A list of integers representing all possible sums of\n                       non-empty subsequences of a three-element array 'a'.\n\n    Returns:\n        List[int]: The original array 'a'.\n    \"\"\"\n    # Sort the list 'b' to ensure the smallest and largest elements are at the ends\n    b.sort()\n    \n    # The smallest element in 'b' is the smallest element in 'a'\n    a1 = b[0]\n    \n    # The largest element in 'b' is the sum of all elements in 'a'\n    a_sum = b[-1]\n    \n    # The second smallest element in 'b' is either a1 + a2 or a1 + a3\n    # The second largest element in 'b' is either a2 + a3 or a1 + a3\n    # We can deduce a2 and a3 by solving these equations\n    a2 = b[1] - a1\n    a3 = a_sum - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = reconstruct_array_from_sums(b)\n        results.append(' '.join(map(str, result)))\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the sorted subsequence sums 'b'.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers representing the sorted subsequence sums.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case) - 1  # Since b has n+1 elements, where n is the length of the original array a\n        case.sort()  # Ensure the subsequence sums are sorted\n        original_array = case[:n]  # The first n elements are the original array elements\n        results.append(original_array)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    result = reconstruct_array(t, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the sorted array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is one of the elements of a\n        smallest = case[0]\n        # The largest element in b is the sum of all elements of a\n        total_sum = case[-1]\n        # Calculate the other two elements of a\n        a1 = smallest\n        a2 = case[1]\n        a3 = total_sum - a1 - a2\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    cases = [list(map(int, input().split())) for _ in range(t)]\n    # Call the function\n    results = reconstruct_array(t, cases)\n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the array a from the given test cases.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays a for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        # Sort the case to easily access the smallest and largest elements\n        case.sort()\n        \n        # The smallest two elements are the first two elements in the sorted list\n        a1 = case[0]\n        a2 = case[1]\n        \n        # The largest element is the last element in the sorted list\n        # The third element of array a is the difference between the largest element\n        # and the sum of the two smallest elements\n        a3 = case[-1] - a1 - a2\n        \n        # Append the reconstructed array a to the results\n        results.append([a1, a2, a3])\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    cases = [list(map(int, input()).split())) for i in range(t)]\n    \n    # Call the function\n    results = reconstruct_array(t, cases)\n    \n    # Output each result\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array from the given test cases.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing the array b.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays a for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array b to easily find the smallest and largest elements\n        case.sort()\n        \n        # The smallest element in b is the smallest element in a\n        a1 = case[0]\n        \n        # The second smallest element in b is the second smallest element in a\n        a2 = case[1]\n        \n        # The largest element in b is the sum of all elements in a\n        a3 = case[-1] - a1 - a2\n        \n        # Append the reconstructed array a to the results\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the results from the reconstruct_array function\n    results = reconstruct_array(t, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Reconstructs the original array from the sorted list of subsequence sums.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a sorted list of subsequence sums.\n\n    Returns:\n        A list of tuples, each representing the reconstructed array for a test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        # Sort the list to ensure it is in ascending order\n        case.sort()\n        \n        # The smallest element in the sorted list is the smallest element in the original array\n        a1 = case[0]\n        \n        # The second smallest element in the sorted list is the second smallest element in the original array\n        a2 = case[1]\n        \n        # The largest element in the sorted list is the sum of all elements in the original array\n        sum_all = case[-1]\n        \n        # Calculate the third element using the sum of all elements\n        a3 = sum_all - a1 - a2\n        \n        # Append the reconstructed array as a tuple to the results\n        results.append((a1, a2, a3))\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    \n    # Call the function and get the result\n    result = reconstruct_array(t, test_cases)\n    \n    # Output the result\n    for res in result:\n        print(' '.join(map(str, res)))\n"], "plans": ["requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correctness and performance.\nrequirement pool:\n- Reconstruct array a from array b efficiently\n- Ensure solution handles all edge cases\n- Optimize for performance with large inputs\n- Provide clear documentation of the solution\n- Integrate solution into existing systems easily\nWe will leverage the fact that the smallest element in the sorted array b is one of the elements of array a, and the largest element is the sum of all three elements of a. By using these properties, we can deduce the three elements of a by simple arithmetic operations. This approach is efficient and handles all edge cases due to the constraints provided.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The key is to identify the smallest, second smallest, and largest sums in the list, which correspond to the individual elements and their combinations. The solution must handle up to 5000 test cases efficiently, ensuring that the approach is both time and space efficient.\nrequirement pool:\n- Develop an efficient algorithm to reconstruct the array from subsequence sums.\n- Ensure the solution handles the maximum constraints effectively.\n- Optimize the code for readability and maintainability.\n- Include comprehensive test cases to validate the solution.\n- Document the solution approach and edge cases considered.\nWe will leverage the fact that the smallest element in the sorted list of sums, b, is the smallest element of the original array a. The second smallest element in b is the second smallest element of a. The largest element in b is the sum of all three elements of a. Using these observations, we can reconstruct the original array a by identifying these key elements in b. This approach is efficient and straightforward, ensuring clarity and performance.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Develop an algorithm to reconstruct the original array from subsequence sums.\n- Ensure the solution is efficient and handles large inputs within constraints.\n- Provide clear and correctly formatted output for each test case.\n- Optimize the solution for readability and maintainability.\n- Include comments and documentation for better understanding.\nWe will leverage the fact that the array b is sorted and represents all possible non-empty subsequence sums of a three-element array a. The smallest element in b is the smallest element of a, and the largest element in b is the sum of all elements of a. By using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correctness and performance.\nrequirement pool:\n- Reconstruct array a from array b\n- Ensure solution handles all edge cases\n- Optimize for performance\n- Provide clear documentation of the solution\n- Implement additional test cases for validation\nWe will leverage the fact that the array b is composed of all possible non-empty subsequence sums of array a, which consists of three distinct integers. The smallest element in b is the smallest element in a, and the largest element in b is the sum of all elements in a. By using these properties, we can deduce the elements of a by simple arithmetic operations on the sorted array b.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correctly formatted for each test case.\nrequirement pool:\n- Develop an algorithm to reconstruct the original array from subsequence sums.\n- Ensure the solution is efficient and handles up to 5000 test cases.\n- Optimize the solution for large integer values up to 10^9.\n- Provide clear and concise output for each test case.\n- Include detailed comments and documentation for the code.\nWe will leverage the fact that the array b is composed of all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, and the largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Develop an algorithm to reconstruct the original array from subsequence sums.\n- Ensure the solution is efficient and handles large inputs within constraints.\n- Format the output correctly for each test case.\n- Optimize the solution for memory usage.\n- Provide documentation and comments for code clarity.\nWe will use a straightforward approach to reconstruct the original array 'a' from the sorted subsequence sums 'b'. Given the constraints, the smallest element in 'b' is one of the elements of 'a', and the largest element in 'b' is the sum of all elements in 'a'. The second smallest element in 'b' is the second element of 'a', and the third smallest element in 'b' is the third element of 'a'. This approach is efficient and handles large inputs well.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correctness and performance.\nrequirement pool:\n- Reconstruct array a from array b\n- Handle edge cases and large numbers\n- Optimize for performance\n- Ensure solution is scalable\n- Provide clear output format\nWe will leverage the fact that the smallest element in the sorted array b is one of the elements of array a. The largest element in b is the sum of all elements of a. By using these properties, we can deduce the three elements of a by simple arithmetic operations. This approach is efficient and handles the constraints well.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Reconstruct array a from array b\n- Handle multiple test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide error handling for edge cases\nWe will leverage the fact that the smallest element in array b is one of the elements of array a, and the largest element in array b is the sum of all elements of array a. By using these properties, we can deduce the elements of array a. Specifically, the three elements of array a can be found by taking the smallest element, the second smallest element, and the difference between the largest element and the sum of the two smallest elements.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be in a specific format, and multiple correct solutions may exist for each test case.\nrequirement pool:\n- Implement the main algorithm to reconstruct array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Validate the solution against edge cases and large inputs.\n- Provide detailed comments and documentation for the code.\nWe will leverage the fact that the array b is composed of all possible sums of the non-empty subsequences of array a, which consists of three distinct integers. The smallest element in b is the smallest element in a. The largest element in b is the sum of all elements in a. The second smallest element in b is the second smallest element in a. By using these observations, we can reconstruct array a efficiently.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The approach should be systematic and robust, ensuring all constraints are met.\nrequirement pool:\n- Reconstruct array a from array b efficiently\n- Handle multiple test cases correctly\n- Ensure solution is easy to understand\n- Optimize for large integer values\n- Provide clear documentation and examples\nWe will use a straightforward approach to reconstruct the array 'a' from the sorted list of subsequence sums 'b'. Given the constraints, the smallest element in 'b' is the smallest element in 'a', and the largest element in 'b' is the sum of all elements in 'a'. The second smallest element in 'b' is the second smallest element in 'a'. By leveraging these properties, we can efficiently determine the elements of 'a'.\n"], "scores": [], "pass_results": [true, false, true, false, true, false, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 285, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 72}
