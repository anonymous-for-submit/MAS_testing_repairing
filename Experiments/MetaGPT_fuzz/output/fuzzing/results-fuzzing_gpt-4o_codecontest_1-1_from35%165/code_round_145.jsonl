{"name": "1613_A. Long Comparison", "description": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "tags": ["implementation", "math"], "difficulty": 7, "id": 1613, "sample_io": [{"input": "5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}], "test_list": [{"input": "1\n2000 0\n2 3\n", "output": ["=\n"]}, {"input": "1\n1 6\n1000000 0\n", "output": ["=\n"]}, {"input": "3\n1 3\n100 1\n2 3\n200 1\n6 3\n600 1\n", "output": ["=\n=\n=\n"]}, {"input": "1\n1201 0\n12 2\n", "output": [">\n"]}, {"input": "1\n50 2\n500 1\n", "output": ["=\n"]}, {"input": "1\n21 4\n210010 0\n", "output": ["<\n"]}, {"input": "1\n12 2\n1205 0\n", "output": ["<\n"]}, {"input": "1\n12 2\n1204 0\n", "output": ["<\n"]}, {"input": "1\n100000 1\n1000000 0\n", "output": ["=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "1\n1000000 10\n1000000 10\n", "output": ["=\n"]}, {"input": "1\n1 5\n101 3\n", "output": ["<\n"]}, {"input": "1\n105 0\n1 2\n", "output": [">\n"]}, {"input": "1\n402 2\n4 4\n", "output": [">\n"]}, {"input": "1\n1011 2\n1023 2\n", "output": ["<\n"]}, {"input": "2\n4 0\n7 0\n5 0\n6 0\n", "output": ["<\n<\n"]}, {"input": "1\n12 2\n1201 0\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 62\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n=\n=\n=\n"]}, {"input": "1\n1 6\n10101 2\n", "output": ["<\n"]}, {"input": "1\n999999 0\n999999 0\n", "output": ["=\n"]}, {"input": "1\n999999 0\n1000000 0\n", "output": ["<\n"]}, {"input": "5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}, {"input": "1\n4 4\n402 2\n", "output": ["<\n"]}, {"input": "1\n12 5\n1204 3\n", "output": ["<\n"]}, {"input": "1\n100000 1\n100 4\n", "output": ["=\n"]}, {"input": "1\n1562 0\n2 3\n", "output": ["<\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n6 3\n600 1\n", "output": ["=\n>\n=\n"]}, {"input": "1\n21 4\n72620 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n7 0\n5 0\n1 0\n", "output": ["<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n362 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n=\n=\n"]}, {"input": "5\n2 1\n19 1\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n=\n<\n=\n<\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n5 3\n600 1\n", "output": ["=\n>\n<\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n7 0\n5 -1\n1 0\n", "output": ["<\n<\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": ["<\n=\n<\n=\n>\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n5 3\n465 1\n", "output": ["=\n>\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n=\n<\n=\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 7\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n6 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n>\n=\n>\n>\n=\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 1\n5 0\n465 1\n", "output": ["=\n<\n<\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n6 3\n300 1\n5 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n>\n>\n>\n>\n=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1010000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n>\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "3\n1 3\n100 1\n2 3\n200 1\n11 3\n600 1\n", "output": ["=\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1010000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n>\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n59 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n2 0\n5 0\n6 0\n", "output": [">\n<\n"]}, {"input": "5\n3 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 0\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 2\n362 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n<\n=\n=\n"]}, {"input": "5\n2 1\n19 1\n3 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n<\n<\n=\n<\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 0\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": ["<\n>\n<\n=\n>\n"]}, {"input": "3\n1 3\n110 1\n4 3\n200 1\n5 3\n600 1\n", "output": ["<\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000010 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 10\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n<\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n>\n>\n>\n=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10001 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 6\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n362 1\n6 3\n316 1\n1 2\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n<\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 0\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n>\n<\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n3 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1001000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 7\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 5\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n>\n=\n=\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 1\n99 0\n1 0\n", "output": [">\n=\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 2\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n<\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 1\n1 0\n29 0\n1 0\n", "output": [">\n=\n>\n>\n>\n"]}, {"input": "3\n2 3\n100 1\n8 0\n200 1\n5 0\n465 1\n", "output": [">\n<\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n839388 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "5\n2 1\n33 -1\n4 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n2 0\n", "output": [">\n<\n>\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 5\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n>\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1010000 4\n10000 2\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1010000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 0\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n>\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n59 1\n3 3\n300 1\n4 3\n400 1\n5 3\n200 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n2 0\n5 0\n6 -1\n", "output": [">\n>\n"]}, {"input": "5\n3 1\n19 0\n10 2\n101 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n<\n<\n=\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 8\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n>\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 0\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1010 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n>\n=\n=\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 14\n1000010 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 0\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 10\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n<\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 8\n", "output": ["=\n=\n=\n>\n>\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10001 6\n1000000 4\n1000 7\n1000000 3\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n<\n=\n<\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 6\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 2\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n=\n=\n<\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n462 1\n4 3\n362 1\n6 3\n316 1\n1 2\n1000000 4\n", "output": ["=\n=\n=\n<\n>\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n3 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n110 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 5\n200 1\n3 3\n300 1\n4 2\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n>\n=\n<\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 2\n1999 0\n2 0\n1 0\n1 1\n99 0\n1 0\n", "output": [">\n<\n>\n<\n>\n"]}, {"input": "3\n2 3\n100 1\n8 3\n200 1\n5 -1\n465 1\n", "output": [">\n>\n<\n"]}, {"input": "23\n1 3\n100 0\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 2\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": [">\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n<\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n121 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n839388 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n>\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 1\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1010011 1\n999999 1\n999998 1\n1793536 1\n45690 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 2\n1101 7\n1010000 4\n10000 2\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n>\n>\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n1201 -1\n12 2\n", "output": ["<\n"]}, {"input": "1\n50 1\n500 1\n", "output": ["<\n"]}, {"input": "1\n12 2\n1205 1\n", "output": ["<\n"]}, {"input": "1\n5 2\n1204 0\n", "output": ["<\n"]}, {"input": "1\n100000 1\n1000000 -1\n", "output": [">\n"]}, {"input": "1\n1100000 10\n1000000 10\n", "output": [">\n"]}, {"input": "1\n2 5\n101 3\n", "output": [">\n"]}, {"input": "1\n105 -1\n1 2\n", "output": ["<\n"]}, {"input": "1\n402 0\n4 4\n", "output": ["<\n"]}, {"input": "1\n1011 2\n1023 3\n", "output": ["<\n"]}, {"input": "1\n12 2\n802 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n12 2\n", "output": [">\n"]}, {"input": "1\n1 6\n11101 2\n", "output": ["<\n"]}, {"input": "1\n1603908 0\n999999 0\n", "output": [">\n"]}, {"input": "1\n999999 0\n1001000 0\n", "output": ["<\n"]}, {"input": "1\n4 3\n402 2\n", "output": ["<\n"]}, {"input": "1\n21 5\n1204 3\n", "output": [">\n"]}, {"input": "1\n100100 1\n100 4\n", "output": [">\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n=\n<\n=\n<\n"]}, {"input": "1\n1562 -1\n2 3\n", "output": ["<\n"]}, {"input": "1\n1201 -1\n20 2\n", "output": ["<\n"]}, {"input": "1\n83 2\n500 1\n", "output": [">\n"]}, {"input": "1\n21 4\n114481 0\n", "output": [">\n"]}, {"input": "1\n2 2\n1205 1\n", "output": ["<\n"]}, {"input": "1\n5 4\n1204 0\n", "output": [">\n"]}, {"input": "1\n100100 1\n1000000 -1\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n1100000 19\n1000000 10\n", "output": [">\n"]}, {"input": "1\n2 5\n111 3\n", "output": [">\n"]}, {"input": "1\n105 -1\n2 2\n", "output": ["<\n"]}, {"input": "1\n402 0\n1 4\n", "output": ["<\n"]}, {"input": "1\n1111 2\n1023 3\n", "output": ["<\n"]}, {"input": "1\n12 2\n802 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 3\n", "output": [">\n"]}, {"input": "1\n1 6\n11100 2\n", "output": ["<\n"]}, {"input": "1\n1603908 0\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n999999 0\n1001010 0\n", "output": ["<\n"]}, {"input": "1\n5 4\n402 2\n", "output": [">\n"]}, {"input": "1\n25 5\n1204 3\n", "output": [">\n"]}, {"input": "1\n100100 1\n110 4\n", "output": ["<\n"]}, {"input": "1\n1927 -1\n20 2\n", "output": ["<\n"]}, {"input": "1\n83 2\n952 1\n", "output": ["<\n"]}, {"input": "1\n21 4\n114481 -1\n", "output": [">\n"]}, {"input": "1\n2 2\n743 1\n", "output": ["<\n"]}, {"input": "1\n5 5\n1204 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n111 5\n", "output": ["<\n"]}, {"input": "1\n402 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 2\n1023 0\n", "output": [">\n"]}, {"input": "1\n12 2\n831 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 0\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "1\n1 1\n11100 2\n", "output": ["<\n"]}, {"input": "1\n1603908 -1\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n362052 0\n1001010 0\n", "output": ["<\n"]}, {"input": "1\n25 4\n1204 3\n", "output": ["<\n"]}, {"input": "1\n100100 1\n010 4\n", "output": [">\n"]}, {"input": "3\n1 3\n100 1\n8 3\n200 1\n5 3\n465 1\n", "output": ["=\n>\n>\n"]}, {"input": "1\n1927 -1\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n952 1\n", "output": [">\n"]}, {"input": "1\n21 4\n177954 -1\n", "output": [">\n"]}, {"input": "1\n2 4\n743 1\n", "output": [">\n"]}, {"input": "1\n5 5\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n011 5\n", "output": ["<\n"]}, {"input": "1\n468 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 3\n1023 0\n", "output": [">\n"]}, {"input": "1\n7 2\n831 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n18 0\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "1\n1 1\n11100 0\n", "output": ["<\n"]}, {"input": "1\n2992743 -1\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n362052 0\n1001011 0\n", "output": ["<\n"]}, {"input": "1\n25 4\n1990 3\n", "output": ["<\n"]}, {"input": "3\n1 3\n100 1\n8 3\n200 1\n5 0\n465 1\n", "output": ["=\n>\n<\n"]}, {"input": "1\n1927 -2\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n1561 1\n", "output": ["<\n"]}, {"input": "1\n2 4\n768 1\n", "output": [">\n"]}, {"input": "1\n5 9\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n010 5\n", "output": ["<\n"]}, {"input": "1\n15 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 3\n533 0\n", "output": [">\n"]}, {"input": "1\n7 2\n1076 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n11 0\n", "output": [">\n"]}, {"input": "1\n1 1\n11100 1\n", "output": ["<\n"]}, {"input": "1\n2992743 0\n1801851 0\n", "output": [">\n"]}, {"input": "1\n122308 0\n1001011 0\n", "output": ["<\n"]}, {"input": "1\n25 5\n1990 3\n", "output": [">\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n1 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "1\n1927 -3\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n2693 1\n", "output": ["<\n"]}, {"input": "1\n2 4\n768 0\n", "output": [">\n"]}, {"input": "1\n5 14\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 2\n011 5\n", "output": ["<\n"]}, {"input": "1\n7 0\n1 1\n", "output": ["<\n"]}, {"input": "1\n1111 3\n950 0\n", "output": [">\n"]}, {"input": "1\n7 2\n1076 2\n", "output": ["<\n"]}, {"input": "1\n12001 59\n11 1\n", "output": [">\n"]}, {"input": "1\n1 0\n11100 1\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n1801851 0\n", "output": [">\n"]}, {"input": "1\n25 4\n1990 0\n", "output": [">\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n2 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 0\n5 0\n465 1\n", "output": ["=\n<\n<\n"]}, {"input": "1\n132 2\n73 1\n", "output": [">\n"]}, {"input": "1\n5 19\n1216 0\n", "output": [">\n"]}, {"input": "1\n2 1\n011 5\n", "output": ["<\n"]}, {"input": "1\n7 0\n1 2\n", "output": ["<\n"]}, {"input": "1\n1111 3\n1246 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n11 2\n", "output": [">\n"]}, {"input": "1\n1 0\n11100 0\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n28222 0\n", "output": [">\n"]}, {"input": "1\n34 4\n1990 0\n", "output": [">\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 0\n5 0\n465 2\n", "output": ["=\n<\n<\n"]}, {"input": "1\n132 1\n73 1\n", "output": [">\n"]}, {"input": "1\n5 19\n1216 1\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n7 0\n2 2\n", "output": ["<\n"]}, {"input": "1\n1111 3\n2222 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n21 2\n", "output": [">\n"]}, {"input": "1\n1 0\n11000 1\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n28222 1\n", "output": [">\n"]}, {"input": "1\n7 4\n1990 0\n", "output": [">\n"]}, {"input": "1\n229 1\n73 1\n", "output": [">\n"]}, {"input": "1\n2 19\n1216 1\n", "output": [">\n"]}], "task_id": "codecontest/113", "prompt": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him? Remember to take into account that the numbers could be very large due to the appended zeros.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "repair_prompt": ["Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him? Remember to take into account that the numbers could be very large due to the appended zeros.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of appended zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and x2 are the base integers, p1 and p2 are the number of zeros appended.\n\n    Returns:\n        A list of strings, each being '>' if the first number is greater, '<' if the second number is greater,\n        or '=' if they are equal.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective length of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the base numbers directly\n            # Adjust the numbers to have the same number of digits by appending zeros\n            # to the shorter one for comparison purposes\n            if x1 * (10 ** (p1 - p2)) > x2:\n                results.append('>')\n            elif x1 * (10 ** (p1 - p2)) < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = []\n    for i in range(1, 2 * t, 2):\n        x1, p1 = map(int, data[i].split())\n        x2, p2 = map(int, data[i + 1].split())\n        test_cases.append((x1, p1, x2, p2))\n\n    # Output interface\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of appended zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and x2 are the base integers, p1 and p2 are the number of zeros appended.\n\n    Returns:\n        A list of strings, each being \">\" if the first number is greater, \"<\" if the second number is greater,\n        or \"=\" if they are equal.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective lengths of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append(\">\")\n        elif len1 < len2:\n            results.append(\"<\")\n        else:\n            # If lengths are equal, compare the base numbers directly\n            if x1 > x2:\n                results.append(\">\")\n            elif x1 < x2:\n                results.append(\"<\")\n            else:\n                results.append(\"=\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares pairs of numbers represented by a base number and a power of ten.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and x2 are the base numbers, p1 and p2 are the powers of ten.\n\n    Returns:\n        A list of strings, each being \">\" if the first number is greater, \"<\" if the second\n        number is greater, or \"=\" if they are equal.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective lengths of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append(\">\")\n        elif len1 < len2:\n            results.append(\"<\")\n        else:\n            # If lengths are equal, compare the numbers directly\n            # Adjust the numbers to have the same length by appending zeros\n            # to the shorter one\n            if p1 > p2:\n                x2 *= 10 ** (p1 - p2)\n            elif p2 > p1:\n                x1 *= 10 ** (p2 - p1)\n\n            if x1 > x2:\n                results.append(\">\")\n            elif x1 < x2:\n                results.append(\"<\")\n            else:\n                results.append(\"=\")\n\n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n\n    # Output interface\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares pairs of numbers based on their effective lengths and values.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n\n    Returns:\n        A list of strings, each being '>' if the first number is greater, '<' if the second number is greater,\n        or '=' if they are equal.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate effective lengths\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n        \n        # Compare based on effective lengths\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the base values\n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares pairs of numbers represented by a base number and a power of ten.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and x2 are the base numbers, p1 and p2 are the powers of ten.\n\n    Returns:\n        A list of strings, each being '<', '>', or '=' indicating the comparison result\n        of the two numbers in each test case.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective length of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the base numbers directly\n            # Adjust the numbers to have the same length by appending zeros\n            # to the shorter one\n            if p1 > p2:\n                x2 *= 10 ** (p1 - p2)\n            elif p2 > p1:\n                x1 *= 10 ** (p2 - p1)\n\n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of appended zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and x2 are the base integers, p1 and p2 are the number of zeros appended.\n\n    Returns:\n        A list of strings, each being \">\", \"<\", or \"=\" indicating the comparison result of the two numbers.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective length of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append(\">\")\n        elif len1 < len2:\n            results.append(\"<\")\n        else:\n            # If lengths are equal, compare the base numbers directly\n            if x1 > x2:\n                results.append(\">\")\n            elif x1 < x2:\n                results.append(\"<\")\n            else:\n                results.append(\"=\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef compare_numbers(t: int, test_cases: list[tuple[int, int, int, int]]) -> list[str]:\n    \"\"\"Compares numbers formed by appending zeros to given integers.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[tuple[int, int, int, int]]): List of tuples, each containing four integers (x1, p1, x2, p2).\n\n    Returns:\n        list[str]: List of strings indicating comparison results ('<' if first number is less, '>' if greater, '=' if equal).\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate effective lengths\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the base numbers\n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    # Call the function and print results\n    results = compare_numbers(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of zeros appended to it.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and x2 are the base integers, p1 and p2 are the number of zeros to append.\n\n    Returns:\n        A list of strings, each being '<', '>', or '=' indicating the comparison result of the two numbers.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective length of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the numbers directly\n            # Normalize the numbers by appending zeros to make them the same length\n            num1 = str(x1) + '0' * p1\n            num2 = str(x2) + '0' * p2\n\n            if num1 > num2:\n                results.append('>')\n            elif num1 < num2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of appended zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and x2 are the base integers, p1 and p2 are the number of zeros appended.\n\n    Returns:\n        A list of strings, each being '>' if the first number is greater, '<' if the second number is greater,\n        or '=' if they are equal.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective length of each number\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the numbers directly\n            if x1 * (10 ** p1) > x2 * (10 ** p2):\n                results.append('>')\n            elif x1 * (10 ** p1) < x2 * (10 ** p2):\n                results.append('<')\n            else:\n                results.append('=')\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of zeros appended to it.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and x2 are the base numbers, p1 and p2 are the number of zeros to append.\n\n    Returns:\n        A list of strings, each being \">\", \"<\", or \"=\" indicating the comparison result of the two numbers.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective length of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append(\">\")\n        elif len1 < len2:\n            results.append(\"<\")\n        else:\n            # If lengths are equal, compare the base numbers directly\n            if x1 > x2:\n                results.append(\">\")\n            elif x1 < x2:\n                results.append(\"<\")\n            else:\n                results.append(\"=\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires comparing two numbers that are represented by a base integer and a number of appended zeros. The challenge lies in efficiently handling potentially very large numbers due to the zeros, ensuring accurate comparisons across multiple test cases.\nrequirement pool:\n- Implement efficient comparison logic for large numbers\n- Optimize performance for handling up to 10,000 test cases\n- Ensure accurate output format as per requirements\n- Handle edge cases where numbers are extremely large\n- Provide clear documentation for the solution\nWe will implement a function that compares two numbers represented by a base integer and a number of appended zeros. The approach will involve comparing the effective lengths of the numbers first, and if they are equal, comparing the base integers directly. This avoids constructing large numbers explicitly, ensuring efficient handling of large inputs.\n", "requirement analysis:\nThe requirement is to compare two numbers that are represented by a base integer and a number of zeros appended. The challenge is to handle very large numbers efficiently without converting them to actual integers, which could lead to performance issues or overflow errors. The solution should be optimized to handle up to 10,000 test cases quickly and accurately.\nrequirement pool:\n- Efficiently compare numbers with appended zeros without overflow.\n- Handle up to 10,000 test cases in a single run.\n- Provide clear and correct output for each comparison.\n- Optimize performance for high input limits.\n- Ensure the solution is easy to understand and maintain.\nWe will compare the numbers by considering their lengths first, which is the sum of the number of digits in the base integer and the number of appended zeros. If the lengths are different, the longer number is larger. If the lengths are the same, we compare the base integers directly. This approach avoids converting the numbers into large integers, thus preventing overflow and ensuring efficient performance.\n", "requirement analysis:\nThe requirement is to compare two numbers that are represented by a base integer and a number of appended zeros. The challenge is to handle very large numbers efficiently without directly constructing them, as they can be extremely large due to the zeros. The solution should be optimized to handle up to 10,000 test cases efficiently.\nrequirement pool:\n- Efficiently compare numbers with appended zeros without constructing them.\n- Handle up to 10,000 test cases efficiently.\n- Ensure the solution is optimized for performance.\n- Provide accurate and reliable output for all edge cases.\n- Maintain simplicity in the implementation.\nWe will compare the numbers by considering their lengths first, which is the sum of the number of digits in x and the number of zeros p. If the lengths are different, the longer number is larger. If the lengths are the same, we compare the numbers directly by considering the integer part x. This approach avoids constructing the full number with zeros, which is efficient for very large numbers.\n", "requirement analysis:\nThe requirement is to compare two numbers that are represented by a base integer and a number of zeros appended to it. The challenge is to handle very large numbers efficiently without converting them to actual integers, which could lead to overflow or performance issues. The solution should focus on comparing the numbers based on their length and value without direct conversion.\nrequirement pool:\n- Efficiently compare numbers with appended zeros\n- Handle up to 10,000 test cases\n- Optimize for performance with large inputs\n- Ensure accurate output for each comparison\n- Provide clear documentation and examples\nWe will compare the numbers by considering their effective lengths and values without converting them into actual integers. This can be achieved by comparing the lengths of the numbers first (x + p) and then comparing the base values if the lengths are equal. This approach avoids overflow and ensures efficient handling of large numbers.\n", "requirement analysis:\nThe task requires comparing two numbers that are represented by a base integer and a number of appended zeros. The challenge lies in efficiently handling potentially very large numbers due to the zeros, without actually constructing the full number, which could be computationally expensive and prone to overflow errors. The solution should focus on comparing the effective lengths and values of the numbers.\nrequirement pool:\n- Implement efficient comparison logic for large numbers with appended zeros.\n- Ensure the solution handles up to 10,000 test cases efficiently.\n- Optimize the solution to avoid constructing large numbers explicitly.\n- Provide clear and concise output for each test case.\n- Consider edge cases such as numbers with the same base but different zeros.\nWe will compare the numbers by considering their effective lengths and values without constructing the full numbers. The key is to compare the length of the numbers first (base number length plus appended zeros) and then compare the base numbers if necessary. This avoids overflow and handles large numbers efficiently.\n", "requirement analysis:\nThe requirement is to compare two numbers that are represented by a base integer and a number of appended zeros. The challenge lies in handling very large numbers efficiently and accurately. The solution must be able to process up to 10^4 test cases quickly and provide correct comparison results.\nrequirement pool:\n- Implement efficient comparison logic for large numbers\n- Optimize input handling for multiple test cases\n- Ensure output format is clear and concise\n- Handle edge cases such as equal numbers\n- Provide user-friendly error messages for invalid input\nWe will implement a function to compare two numbers represented by a base integer and a number of appended zeros. The approach will involve comparing the effective lengths of the numbers first, and if they are equal, comparing the base integers directly. This avoids constructing the full number, which is efficient for very large numbers. We will use Python's built-in capabilities for handling integers and comparisons.\n", "requirement analysis:\nThe requirement is to compare two numbers that are represented by a base integer and a number of zeros appended to it. The challenge lies in handling very large numbers efficiently without converting them to actual integers, which could be computationally expensive. The solution should focus on comparing the numbers based on their effective length and value without direct conversion.\nrequirement pool:\n- Efficiently compare numbers with large appended zeros.\n- Handle up to 10,000 test cases efficiently.\n- Provide clear and correct output for each comparison.\n- Optimize for performance with large input sizes.\n- Ensure the solution is easy to understand and maintain.\nWe will use a simple comparison approach by considering the effective length of the numbers formed by appending zeros. Instead of converting the numbers to their full integer form, we will compare the length of the numbers first and then compare the base integers if the lengths are equal. This avoids the computational overhead of handling very large integers directly.\n", "requirement analysis:\nThe requirement is to compare two numbers that are represented by a base integer and a number of zeros appended to it. The challenge is to handle very large numbers efficiently without converting them to actual integers, which could lead to overflow or performance issues. The solution should be able to handle up to 10,000 test cases efficiently.\nrequirement pool:\n- Implement efficient comparison logic for large numbers.\n- Optimize performance for handling up to 10,000 test cases.\n- Ensure accurate output for all edge cases.\n- Provide clear and concise output format.\n- Consider user-friendly error messages for invalid inputs.\nWe will implement a function that compares two numbers represented by a base integer and a number of zeros appended to it. Instead of converting these numbers into actual integers, which could be very large, we will compare them based on their length and value. This approach avoids overflow and ensures efficient handling of up to 10,000 test cases.\n", "requirement analysis:\nThe requirement is to compare two numbers that are represented by a base integer and a number of appended zeros. The challenge lies in handling very large numbers efficiently and accurately. The solution must be able to process up to 10,000 test cases and provide correct comparison results for each.\nrequirement pool:\n- Implement efficient comparison logic for large numbers\n- Optimize input handling for multiple test cases\n- Ensure output format is clear and concise\n- Test performance with maximum input size\n- Consider edge cases with very large numbers\nWe will implement a function that compares two numbers represented by a base integer and a number of appended zeros. The challenge is to handle very large numbers efficiently. We will avoid constructing the full number by comparing the lengths and values directly. Python's native integer handling will be sufficient for this task due to its support for arbitrary precision.\n", "requirement analysis:\nThe requirement is to compare two numbers that are represented by a base integer and a number of zeros appended to it. The challenge is to handle very large numbers efficiently without actually constructing them, as they can be extremely large due to the zeros. The solution should be able to handle up to 10,000 test cases efficiently.\nrequirement pool:\n- Efficiently compare two large numbers without constructing them.\n- Handle up to 10,000 test cases quickly.\n- Provide clear output for each comparison.\n- Ensure the solution is robust against edge cases.\n- Optimize for minimal memory usage.\nWe will implement a function that compares two numbers represented by a base integer and a number of zeros appended to it. Instead of constructing the large numbers, we will compare their lengths first (base length plus zeros) and then compare the base numbers if necessary. This approach avoids overflow and handles large numbers efficiently. We will use Python's built-in capabilities for handling integers and comparisons.\n"], "scores": [], "pass_results": [false, false, false, true, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 145, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "mutate_method": "add_1_sentence_at_end", "parent_index": 19}
