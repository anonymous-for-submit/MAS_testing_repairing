{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers, and he wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order to get an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a by considering the constraints of the problem carefully to ensure an accurate restoration of the original array, assuming that array a is composed of distinct elements.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers, and he wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order to get an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a by considering the constraints of the problem carefully to ensure an accurate restoration of the original array, assuming that array a is composed of distinct elements.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted array of sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a sorted list of integers.\n\n    Returns:\n        A list of lists, where each inner list is the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three elements of a\n        sum_all = b[-1]\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[2]\n        # Calculate the third element using the sum of all three\n        a3 = sum_all - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the case to ensure the smallest elements are at the beginning\n        case.sort()\n        # The smallest three numbers in the sorted list are the individual elements of the original array\n        a = case[0]\n        b = case[1]\n        c = case[2]\n        # The largest number is the sum of all three elements\n        # We can verify this by checking if a + b + c equals the largest number\n        if a + b + c == case[-1]:\n            results.append((a, b, c))\n        else:\n            # If the assumption fails, it means the original array might be different\n            # We need to adjust the selection of a, b, c\n            # The correct a, b, c should satisfy a + b + c = case[-1]\n            # Since the list is sorted, we can try different combinations\n            for i in range(3):\n                for j in range(i + 1, 4):\n                    for k in range(j + 1, 5):\n                        if case[i] + case[j] + case[k] == case[-1]:\n                            results.append((case[i], case[j], case[k]))\n                            break\n                    if len(results) > len(test_cases) - 1:\n                        break\n                if len(results) > len(test_cases) - 1:\n                    break\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input()).split())) for i in range(n)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the sorted subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing 7 integers representing\n                    the sorted subsequence sums.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the input list to ensure it is in ascending order\n        b.sort()\n        \n        # The smallest three numbers are the individual elements of the original array\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[2]\n        \n        # The largest number is the sum of all three elements\n        sum_a = b[-1]\n        \n        # Calculate the third element using the sum\n        a3 = sum_a - a1 - a2\n        \n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Process the test cases\n    results = restore_original_array(test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a sorted list of integers.\n\n    Returns:\n        A list of lists, where each list is the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        n = int((len(b) - 1) ** 0.5)  # Calculate the size of the original array\n        original_array = []\n        \n        # The smallest element in b is the smallest element of a\n        original_array.append(b[0])\n        \n        # The second smallest element in b is the second smallest element of a\n        original_array.append(b[1])\n        \n        # Deduce the remaining elements of the original array\n        for i in range(2, n):\n            # The i-th smallest element in b is the i-th smallest element of a\n            original_array.append(b[i] - sum(original_array))\n        \n        results.append(original_array)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for i in range(num_cases)]\n    \n    results = restore_original_array(test_cases)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each representing the original array a.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the case to easily identify the smallest and largest elements\n        case.sort()\n        # The largest element in the sorted list is the sum of all three elements of array a\n        sum_all = case[-1]\n        # The smallest and second smallest elements are two of the elements of array a\n        a1 = case[0]\n        a2 = case[1]\n        # The third element can be found by subtracting the smallest and second smallest from the largest\n        a3 = sum_all - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the given array b.\n\n    Args:\n        b (List[int]): A list of 7 integers where the largest number is the sum of the original array a,\n                       and the smallest three numbers are the individual elements of a.\n\n    Returns:\n        List[int]: The original array a consisting of three integers.\n    \"\"\"\n    # Sort the array b to easily access the smallest and largest elements\n    b.sort()\n    \n    # The original array a consists of the smallest three elements in b\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[2]\n    \n    # The largest element in b is the sum of a1, a2, and a3\n    # We can verify this by checking if a1 + a2 + a3 equals the largest element\n    assert a1 + a2 + a3 == b[-1], \"The largest element should be the sum of the smallest three elements.\"\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: int, subsequence_sums: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array from the given subsequence sums.\n\n    Args:\n        test_cases (int): The number of test cases.\n        subsequence_sums (List[List[int]]): A list of lists, where each list contains the subsequence sums for a test case.\n\n    Returns:\n        List[List[int]]: A list of lists, where each list is the reconstructed original array for a test case.\n    \"\"\"\n    result = []\n    for sums in subsequence_sums:\n        # Sort the subsequence sums to find the smallest three elements\n        sums.sort()\n        # The smallest three elements are the original array elements\n        original_array = sums[:3]\n        result.append(original_array)\n    return result\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    subsequence_sums = [list(map(int, input().split())) for _ in range(t)]\n    result = restore_original_array(t, subsequence_sums)\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Restores the original array from the given subsequence sums.\n\n    Args:\n        b (list[int]): A list of integers representing the subsequence sums.\n\n    Returns:\n        tuple[int, int, int]: A tuple containing the three elements of the original array.\n    \"\"\"\n    # Sort the list to easily access the smallest and largest elements\n    b.sort()\n    \n    # The largest element in b is the sum of all three elements of a\n    sum_all = b[-1]\n    \n    # The smallest element in b is one of the elements of a\n    a1 = b[0]\n    \n    # The other two elements can be deduced as follows:\n    # a2 = b[1] - a1\n    # a3 = sum_all - a1 - a2\n    a2 = b[1] - a1\n    a3 = sum_all - a1 - a2\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_original_array(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' which contains\n    the elements of 'a' and the sum of all elements of 'a'.\n\n    Args:\n        b (List[int]): The sorted array containing elements of 'a' and their sum.\n\n    Returns:\n        List[int]: The original array 'a'.\n    \"\"\"\n    # The length of b is n + 1, where n is the length of the original array a.\n    n = len(b) - 1\n    \n    # Sort the array b to ensure it is in non-decreasing order.\n    b.sort()\n    \n    # The sum of the original array a is the largest element in b.\n    total_sum = b[-1]\n    \n    # The original array a consists of the first n elements of b.\n    # We need to find the element in b that is not part of a, which is the sum.\n    # This can be done by checking which element, when removed, results in the sum.\n    for i in range(n + 1):\n        if sum(b[:i] + b[i+1:n+1]) == total_sum:\n            return b[:i] + b[i+1:n+1]\n    \n    # If no such element is found, return an empty list (should not happen with valid input).\n    return []\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(result)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the given sorted sums.\n\n    Args:\n        b (List[int]): A list of integers representing sorted sums.\n\n    Returns:\n        List[int]: The original array of integers.\n    \"\"\"\n    # The smallest three numbers in the sorted list are the individual elements\n    # of the original array. The largest number is the sum of all three elements.\n    # We can deduce the original array using these observations.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[2]\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read input from standard input\n    input_data = sys.stdin.read().strip().split('\\n')\n    \n    # Number of test cases\n    t = int(input_data[0])\n    \n    # List to store results for each test case\n    results = []\n    \n    # Process each test case\n    for i in range(1, t + 1):\n        # Convert the input line to a list of integers\n        b = list(map(int, input_data[i].split()))\n        \n        # Restore the original array\n        result = restore_original_array(b)\n        \n        # Append the result to the results list\n        results.append(result)\n    \n    # Output the results\n    for res in results:\n        print(' '.join(map(str, res)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output is correct and formatted as specified. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Format the output correctly for each test case.\n- Optimize the solution for large integer values.\n- Provide a user-friendly interface for input and output.\nWe will solve the problem by leveraging the properties of the sorted array of sums. The largest number in the array b is the sum of all three elements of a. The smallest three numbers in b are the individual elements of a. By using these properties, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly for each test case.\nrequirement pool:\n- Restore the original array accurately from the given sums.\n- Ensure the solution is efficient for up to 5000 test cases.\n- Handle large integer values correctly.\n- Provide output in the specified format.\n- Consider edge cases and ensure robustness.\nWe will solve the problem by leveraging the properties of the sorted array of sums. The largest number in the sorted array b is the sum of all three elements of the original array a. The smallest three numbers in b are the individual elements of a. By using these properties, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure the solution works with large integer values\n- Provide output in the specified format\n- Optimize for both speed and memory usage\nWe will solve the problem by leveraging the properties of the sorted subsequence sums. Given the sorted array b of 7 integers, the smallest three numbers in b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. By using these properties, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe problem requires restoring an original array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases, each with large integer values. The key is to identify the smallest, second smallest, and largest values in the sorted list to reconstruct the original array.\nrequirement pool:\n- Efficiently process up to 5000 test cases\n- Accurately restore the original array from subsequence sums\n- Handle large integer values up to 10^9\n- Provide clear and correct output format\n- Optimize for edge cases and unusual inputs\nWe will leverage the fact that the sorted array b contains all possible sums of the non-empty subsequences of the original array a. The smallest element in b is the smallest element of a, the second smallest is the second smallest element of a, and the largest element in b is the sum of all elements of a. This allows us to deduce the original array a efficiently.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three distinct integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly for each test case.\nrequirement pool:\n- Efficiently process up to 5000 test cases.\n- Correctly reconstruct the original array from the given subsequence sums.\n- Handle large integer values up to 10^9.\n- Ensure the output format is consistent and correct.\n- Provide a solution that is easy to understand and maintain.\nWe will use the property that the largest number in the sorted array b is the sum of all three elements of array a. The smallest number in b is one of the elements of a. The second smallest number in b is another element of a. The third element of a can be found by subtracting the smallest and second smallest elements from the largest element in b. This approach ensures that we efficiently reconstruct the original array a from the given subsequence sums.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output is correctly formatted and easy to interpret.\nrequirement pool:\n- Efficiently process up to 5000 test cases.\n- Correctly restore the original array from the given sums.\n- Handle large integer values up to 10^9.\n- Ensure the output format is consistent and clear.\n- Optimize for both time and space complexity.\nWe will leverage the fact that the largest number in the sorted array b is the sum of all three elements of the original array a. The smallest three numbers in b are the individual elements of a. By using these properties, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three distinct integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be correctly formatted and handle potential multiple valid solutions.\nrequirement pool:\n- Efficiently process up to 5000 test cases.\n- Correctly reconstruct the original array from subsequence sums.\n- Handle large integer values up to 10^9.\n- Ensure output is formatted correctly for each test case.\n- Consider multiple valid solutions and output any valid one.\nWe will use a straightforward approach to reconstruct the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b represent the individual elements of the original array a. This is because the smallest element in b is the smallest element in a, the second smallest element in b is the second smallest element in a, and the third smallest element in b is the third smallest element in a. This approach is efficient and handles the constraints well.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be correctly formatted and handle potential multiple valid solutions.\nrequirement pool:\n- Efficiently process up to 5000 test cases\n- Correctly restore the original array from subsequence sums\n- Handle large integer values efficiently\n- Provide clear and correctly formatted output\n- Support multiple valid solutions\nWe will use a simple mathematical approach to restore the original array from the given subsequence sums. The key observation is that the largest number in the sorted list b is the sum of all three elements of the original array a. The smallest number in b is one of the elements of a. By using these observations, we can deduce the other two elements of a. This approach is efficient and straightforward, allowing us to handle up to 5000 test cases quickly.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be correctly formatted and handle potential multiple correct answers.\nrequirement pool:\n- Efficiently process up to 5000 test cases\n- Correctly restore the original array from the given sums\n- Handle large integer values up to 10^9\n- Provide clear and correctly formatted output\n- Consider multiple correct answers and handle them appropriately\nWe will use a straightforward approach to restore the original array 'a' from the sorted array 'b'. Given the constraints, the smallest element in 'b' is one of the elements of 'a', and the largest element in 'b' is the sum of all elements in 'a'. The second smallest element in 'b' is another element of 'a'. By using these properties, we can efficiently deduce the original array 'a'.\n", "requirement analysis:\nThe task is to deduce the original array of three distinct integers from the sorted list of sums of all non-empty subsequences. The constraints ensure that the input is valid and that a solution exists. The solution must be efficient to handle up to 5000 test cases, each with large integer values.\nrequirement pool:\n- Restore the original array from the given sums.\n- Ensure the solution is efficient for up to 5000 test cases.\n- Handle large integer values up to 10^9.\n- Provide clear and correctly formatted output.\n- Consider multiple valid outputs if applicable.\nWe will use a straightforward approach to deduce the original array from the given sorted sums. The key observation is that the smallest three numbers in the sorted list correspond to the individual elements of the original array. The largest number in the list is the sum of all three elements. By using these observations, we can efficiently restore the original array for each test case.\n"], "scores": [], "pass_results": [false, false, false, false, true, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 353, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 199}
