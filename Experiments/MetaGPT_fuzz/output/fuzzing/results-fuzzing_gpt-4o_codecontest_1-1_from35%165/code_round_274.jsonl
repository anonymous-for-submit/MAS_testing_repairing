{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive integers. He wrote down the sums of all non-empty subsequences of this array, arranged them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive integers. He wrote down the sums of all non-empty subsequences of this array, arranged them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the given sorted list of sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of integers representing all possible sums of the non-empty subsequences\n                       of a three-element array.\n\n    Returns:\n        List[int]: The original three-element array.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements of a\n    a3 = b[-1] - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        b (List[int]): A sorted list of integers where the smallest element is\n                       the smallest element of the original array 'a', the largest\n                       element is the sum of all elements in 'a', and the second\n                       largest element is the sum of the two largest elements in 'a'.\n\n    Returns:\n        List[int]: The original array 'a'.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    smallest = b[0]\n    # The largest element in b is the sum of all elements in a\n    total_sum = b[-1]\n    # The second largest element in b is the sum of the two largest elements in a\n    sum_of_two_largest = b[-2]\n\n    # Calculate the largest element in a\n    largest = sum_of_two_largest - smallest\n    # Calculate the second largest element in a\n    second_largest = total_sum - largest - smallest\n\n    # Construct the original array a\n    a = [smallest, second_largest, largest]\n\n    return a\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the given list of sums.\n\n    Args:\n        b (List[int]): A list of integers where the first three are the elements\n                       of the original array and the last one is the sum of these\n                       three elements.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # Sort the list to ensure the largest element is at the end\n    b.sort()\n    \n    # The original array elements are the first two elements and the difference\n    # between the largest element and the sum of the first two elements\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[3] - a1 - a2\n    \n    return [a1, a2, a3]\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing\n                                      the sorted sums of non-empty subsequences of the original array.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted array is the smallest number in the original array.\n        a1 = case[0]\n        # The largest element in the sorted array is the sum of all three numbers in the original array.\n        a1_a2_a3 = case[6]\n        # The second largest element in the sorted array is the sum of the two largest numbers in the original array.\n        a2_a3 = case[5]\n        \n        # Deduce the original numbers using the properties of the sums.\n        a3 = a1_a2_a3 - case[4]  # a3 = a1_a2_a3 - (a1 + a2)\n        a2 = a2_a3 - a3          # a2 = a2_a3 - a3\n        a1 = case[0]             # a1 is already known as the smallest element\n        \n        # Append the restored array to the results list.\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the given list of sums.\n\n    Args:\n        b (List[int]): A list of integers where the first three are the elements\n                       of the original array and the last is their sum.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # Sort the list to easily access the smallest three numbers and the largest sum\n    b.sort()\n    # The original array can be deduced as follows:\n    # a1 = b[0], a2 = b[1], a3 = b[3] - (b[0] + b[1])\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[3] - (a1 + a2)\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Reads input, processes each test case, and outputs the results.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])  # Number of test cases\n    results = []\n    for i in range(1, t + 1):\n        b = list(map(int, data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(' '.join(map(str, result)))\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given sorted sums array.\n\n    Args:\n        test_cases: A list of test cases, each containing a sorted list of integers.\n\n    Returns:\n        A list of tuples, each representing the original array (a1, a2, a3) for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted array is a1\n        a1 = case[0]\n        # The second smallest element in the sorted array is a2\n        a2 = case[1]\n        # The largest element in the sorted array is the sum of a1, a2, and a3\n        sum_a = case[-1]\n        # Calculate a3 using the sum\n        a3 = sum_a - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    n = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    # Get the results from the restore function\n    results = restore_array_from_sums(test_cases)\n    # Print the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of integers representing sums of non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in the sorted array are the individual elements of the original array.\n    a1 = b[0]\n    a2 = b[1]\n    # The sum of all three elements is the largest number in the sorted array.\n    sum_all = b[-1]\n    \n    # Deduce the third element by subtracting the first two from the sum of all three\n    a3 = sum_all - a1 - a2\n    \n    # Return the original array\n    original_array = [a1, a2, a3]\n    \n    return original_array\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read input from standard input\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])  # Number of test cases\n    results = []\n    \n    for i in range(1, t + 1):\n        # Parse each test case\n        b = list(map(int, input_data[i].split()))\n        # Restore the original array\n        result = restore_original_array(b)\n        # Append the result for this test case\n        results.append(result)\n    \n    # Output results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of integers representing the sums of non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    a1_a2_a3 = b[-1]\n    # The second smallest element in b is the sum of the two smallest original integers\n    a1_a2 = b[1]\n    # The second largest element in b is the sum of the two largest original integers\n    a2_a3 = b[-2]\n    \n    # Calculate the original integers\n    a2 = a1_a2 - a1\n    a3 = a2_a3 - a2\n    # a1 is already known as b[0]\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to read input, process each test case, and output the results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(result)\n    \n    for res in results:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing a sorted array.\n\n    Returns:\n        list[tuple[int, int, int]]: List of tuples representing the original array for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted array is the smallest element of the original array.\n        smallest = case[0]\n        # The largest element in the sorted array is the sum of all elements in the original array.\n        total_sum = case[-1]\n        # Deduce the second element of the original array.\n        second_element = total_sum - sum(case[:-1])\n        # Append the result as a tuple (smallest, second_element, total_sum)\n        results.append((smallest, second_element, total_sum))\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    import sys\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given array 'b' which contains\n    the sums of all pairs of elements from 'a' and the sum of all three elements.\n\n    Args:\n        b (List[int]): A list of integers containing the sums of pairs and the total sum.\n\n    Returns:\n        List[int]: The original array 'a' with three integers.\n    \"\"\"\n    # Sort the list to easily access the smallest and largest elements\n    b.sort()\n    \n    # The smallest three numbers in the sorted list are the individual elements of 'a'\n    # The largest number is the sum of all three elements\n    a1 = b[0]  # Smallest element\n    a2 = b[1]  # Second smallest element\n    a3 = b[3] - a1 - a2  # The third element is derived from the largest number minus the sum of the first two\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing an original array of three integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest values in the sorted subsequence sums to deduce the original integers. The solution must handle up to 5000 test cases efficiently, ensuring that the approach is both time and space efficient.\nrequirement pool:\n- Implement the main logic to deduce the original array from the subsequence sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is easy to read and maintain.\n- Include comprehensive test cases to validate the solution.\n- Document the solution approach and edge cases considered.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array. The smallest element in b is the smallest element of a, the second smallest element is the second smallest element of a, and the largest element in b is the sum of all three elements of a. This allows us to deduce the original array a by selecting the smallest, second smallest, and largest elements from b.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for multiple test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize for speed and clarity\nWe will solve the problem by recognizing that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. The second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a from b. This approach is efficient and works well within the given constraints.\n", "requirement analysis:\nThe task is to deduce the original array of three integers from the given sorted sums of all non-empty subsequences. The key observation is that the smallest three numbers in the sorted list are the individual elements of the array, and the largest number is the sum of all three elements.\nrequirement pool:\n- Implement the main logic to deduce the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for readability and maintainability.\n- Include edge case handling for maximum and minimum input values.\n- Provide detailed comments and documentation for the code.\nWe will leverage the observation that the smallest three numbers in the sorted list are the individual elements of the array, and the largest number is the sum of all three elements. This allows us to deduce the original array by selecting the first element, the second element, and the difference between the largest element and the sum of the first two elements.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The constraints ensure that a valid solution always exists.\nrequirement pool:\n- Efficiently handle up to 5000 test cases\n- Correctly restore the original array from the given sums\n- Ensure the solution is easy to understand and maintain\n- Optimize for both speed and simplicity\n- Provide detailed comments and documentation\nWe will use a straightforward approach to solve the problem by leveraging the properties of the sums of non-empty subsequences. Given the sorted array b, the smallest element b[0] is the smallest number in the original array a. The largest element b[6] is the sum of all three numbers in a. The second largest element b[5] is the sum of the two largest numbers in a. Using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task is to deduce the original array of three integers from the given sorted sums of all non-empty subsequences. The key observation is that the smallest three numbers in the sorted list are the individual elements of the array, and the largest number is the sum of all three elements.\nrequirement pool:\n- Implement the solution to restore the original array from the given sums.\n- Optimize the solution for handling up to 5000 test cases efficiently.\n- Ensure the solution is easy to read and maintain.\n- Handle edge cases where the input values are at their maximum limits.\n- Provide detailed comments and documentation for the code.\nWe will leverage the observation that the smallest three numbers in the sorted list are the individual elements of the array, and the largest number is the sum of all three elements. This allows us to deduce the original array by selecting the first, second, and last elements of the sorted list.\n", "requirement analysis:\nThe task requires restoring the original array from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest values in the sorted array b, which correspond to the individual elements of array a. The solution must efficiently handle up to 5000 test cases and large integer values.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure clarity and accuracy in output\n- Optimize for large integer values\n- Provide a user-friendly interface for input and output\nWe will solve the problem by leveraging the properties of the sorted array b. The smallest element in b is the smallest element of a, the second smallest element in b is the second smallest element of a, and the largest element in b is the sum of all elements of a. This approach is efficient and straightforward, allowing us to handle up to 5000 test cases efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide clear documentation and comments in code\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. This allows us to deduce the original array efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct and clear output for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output is correctly formatted\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and restores the original array of three integers. The key observation is that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently deduce the original array.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The constraints ensure that a valid solution always exists, allowing for straightforward extraction of the original integers.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Handle multiple test cases efficiently.\n- Ensure the solution is easy to understand and maintain.\n- Provide accurate results for all test cases.\n- Optimize for edge cases and large input sizes.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting appropriate elements from b.\n", "requirement analysis:\nThe task is to deduce the original array of three integers from the given sorted sums of all non-empty subsequences. The key observation is that the smallest three numbers in the sorted list are the individual elements of the array, and the largest number is the sum of all three elements.\nrequirement pool:\n- Implement the solution to restore the original array from the given sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is tested against a variety of test cases.\n- Document the solution approach and edge cases considered.\n- Explore alternative approaches for solving the problem.\nWe will leverage the observation that the smallest three numbers in the sorted list b are the individual elements of the array a, and the largest number is the sum of all three elements. This allows us to deduce the original array a by selecting the first element as the smallest number, the second element as the second smallest number, and the third element as the difference between the largest number and the sum of the first two elements.\n"], "scores": [], "pass_results": [false, false, true, false, false, true, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 274, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 88}
