{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He ended up with an array b consisting of 7 integers. \n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements. Make sure to account for the fact that the elements of array a are positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He ended up with an array b consisting of 7 integers. \n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements. Make sure to account for the fact that the elements of array a are positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three distinct positive integers from the sorted list of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of sums of non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three distinct positive integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three integers\n    sum_all = b[-1]\n    # The second smallest element in b is the sum of two of the original integers\n    sum_two = b[1]\n    # Deduce the other two integers\n    a2 = sum_two - a1\n    a3 = sum_all - sum_two\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read input from standard input\n    data = sys.stdin.read().strip().split('\\n')\n    # Number of test cases\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        # Parse the list of sums for each test case\n        b = list(map(int, data[i].split()))\n        # Restore the original array\n        result = restore_array_from_sums(b)\n        # Store the result\n        results.append(result)\n    # Output the results\n    for res in results:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted list of all non-empty subsequence sums.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a sorted list of subsequence sums.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of tuples representing the restored array a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element of a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements of a\n        a1_a2_a3 = b[-1]\n        # The second largest element in b is the sum of the two largest elements of a\n        a2_a3 = b[-2]\n        \n        # Deduce the elements of a\n        a3 = a1_a2_a3 - a2_a3\n        a2 = a2_a3 - a3\n        # a1 is already known as b[0]\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    result = restore_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array a from the given array b of sums.\n\n    Args:\n        b (List[int]): A list of integers representing the sums of pairs of elements from array a.\n\n    Returns:\n        Tuple[int, int, int]: The original array a consisting of three integers.\n    \"\"\"\n    # Sort the array b to easily identify the largest sum and smallest elements\n    b.sort()\n    \n    # The largest element in b is the sum of all three elements of a\n    total_sum = b[-1]\n    \n    # The smallest element in b is one of the elements of a\n    a1 = b[0]\n    \n    # Calculate the other two elements of a\n    a2 = b[1] - a1\n    a3 = total_sum - a1 - a2\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array a from the given array b of sums.\n\n    Args:\n        b (List[int]): A list of integers representing the sums of pairs of elements from array a.\n\n    Returns:\n        Tuple[int, int, int]: A tuple representing the original array a.\n    \"\"\"\n    # Sort the array b to easily identify the largest and smallest elements\n    b.sort()\n    \n    # The largest element in b is the sum of all three elements of a\n    total_sum = b[-1]\n    \n    # The smallest element in b is one of the elements of a\n    a1 = b[0]\n    \n    # Calculate the other two elements of a\n    a2 = b[1]\n    a3 = total_sum - a1 - a2\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array of three distinct positive integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a sorted array of sums.\n\n    Returns:\n        List[List[int]]: List of reconstructed arrays for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a\n        sum_a = b[-1]\n        # Calculate the third element\n        a3 = sum_a - a1 - a2\n        # Reconstruct the original array a\n        a = [a1, a2, a3]\n        results.append(a)\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        test_cases: A list of test cases, each containing 7 integers.\n\n    Returns:\n        A list of lists, where each inner list is the restored original array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array to easily identify the elements\n        case.sort()\n        # The smallest three numbers are the original elements\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[2]\n        # The largest number is the sum of the original elements\n        # We can verify this by checking if a1 + a2 + a3 equals the largest number\n        if a1 + a2 + a3 == case[-1]:\n            results.append([a1, a2, a3])\n        else:\n            # If the sum doesn't match, it indicates an error in input\n            # However, based on the problem statement, we assume the input is always valid\n            # So we don't handle this case explicitly\n            pass\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    num_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n    \n    # Process the test cases\n    results = restore_original_array(test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array a from the given array b of sums.\n\n    Args:\n        b (List[int]): A list of four integers representing the sums of three elements of array a.\n\n    Returns:\n        Tuple[int, int, int]: A tuple containing the three integers of the original array a.\n    \"\"\"\n    # Sort the array b to easily identify the largest sum and the smallest elements\n    b.sort()\n    \n    # The largest number in b is the sum of all three elements of a\n    largest_sum = b[3]\n    \n    # The smallest two numbers in b are two of the elements of a\n    a1 = b[0]\n    a2 = b[1]\n    \n    # The third element of a can be found by subtracting the smallest and second smallest numbers from the largest sum\n    a3 = largest_sum - a1 - a2\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array 'a' from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each representing the original array 'a' for a test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to find the smallest three numbers and the largest number\n        b.sort()\n        # The original array a can be deduced as follows:\n        # a1 = b[0], a2 = b[1], a3 = b[2]\n        # The largest number b[-1] is the sum of a1, a2, and a3\n        a1, a2, a3 = b[0], b[1], b[2]\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    number_of_test_cases = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(number_of_test_cases)]\n    \n    # Process the test cases\n    results = restore_original_array(test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The largest number in 'b' is the sum of the original three numbers in 'a'\n        sum_of_a = case[-1]\n        # The smallest and second smallest numbers in 'b' are two of the original numbers in 'a'\n        a1 = case[0]\n        a2 = case[1]\n        # The third number in 'a' is found by subtracting a1 and a2 from the sum_of_a\n        a3 = sum_of_a - a1 - a2\n        # Append the restored array to the results\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the results from the restore_array function\n    results = restore_array(t, test_cases)\n    \n    # Print each result array\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array of four integers.\n\n    Returns:\n        List[List[int]]: A list of original arrays, each containing three integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The largest number in the sorted array is the sum of the original three numbers.\n        sum_of_original = case[-1]\n        \n        # The smallest number in the sorted array is one of the original numbers.\n        # We can find the other two by subtracting the smallest from the sum.\n        a = case[0]\n        b = case[1]\n        c = sum_of_original - a - b\n        \n        # Append the result as a list of the original numbers.\n        results.append([a, b, c])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the results from the restore_original_array function\n    results = restore_original_array(test_cases)\n    \n    # Output each restored array\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an array of three distinct positive integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate and consistent output.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution handles up to 5000 test cases efficiently\n- Optimize for large integer values\n- Maintain consistent output format\n- Provide clear documentation and code comments\nWe will implement a function that takes the sorted list of sums of non-empty subsequences and restores the original array of three distinct positive integers. The approach is based on the observation that the smallest element in the sorted list is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently deduce the original array.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct positive integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values.\nrequirement pool:\n- Implement the main algorithm to restore array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for performance.\n- Validate the solution against edge cases.\n- Provide clear documentation and comments in the code.\nWe will leverage the fact that the array b is the sorted list of all non-empty subsequence sums of array a, which consists of three distinct positive integers. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these observations, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct positive integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate and clear output.\nrequirement pool:\n- Restore the original array from the given sums\n- Ensure the solution is efficient for multiple test cases\n- Handle large integer values accurately\n- Provide clear output format\n- Optimize for scalability\nWe will leverage the fact that the largest number in the sorted array b is the sum of all three elements of the original array a. The smallest number is one of the elements of a. By using these properties, we can deduce the other two elements by subtracting the smallest element from the next two smallest sums in b. This approach is efficient and straightforward, allowing us to handle up to 5000 test cases efficiently.\n", "requirement analysis:\nThe task requires restoring an array of three distinct positive integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array.\nrequirement pool:\n- Restore the original array from the given sums\n- Ensure the solution handles multiple test cases efficiently\n- Optimize for large integer values\n- Provide clear and accurate output\n- Handle edge cases gracefully\nWe will leverage the fact that the largest number in the sorted array b is the sum of all three elements of array a. The smallest number is one of the elements of a. By subtracting the smallest number from the largest, we can find the sum of the other two elements. Using these insights, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct positive integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers, ensuring correctness and performance.\nrequirement pool:\n- Implement the main algorithm to reconstruct array a from array b.\n- Optimize the solution for handling large input sizes efficiently.\n- Ensure the solution is robust and handles all edge cases.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge case handling.\nWe will implement a function that takes the sorted array b of sums of non-empty subsequences and reconstructs the original array a of three distinct positive integers. The key observation is that the smallest three numbers in b are the individual elements of a, and the largest number in b is the sum of all three elements of a. This allows us to deduce the values of a efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct positive integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution works with large integer values.\n- Provide clear and correctly formatted output.\n- Optimize for performance and readability.\nWe will leverage the fact that the largest number in the sorted array b is the sum of all three elements of array a. The smallest three numbers in b are the individual elements of a. By using these properties, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe task requires restoring an array of three distinct positive integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring quick and accurate results.\nrequirement pool:\n- Efficiently compute the original array from the given sums\n- Handle large integer values without overflow or errors\n- Provide clear and understandable output\n- Ensure robustness against edge cases\n- Optimize for quick processing of multiple test cases\nWe will solve the problem by recognizing that the largest number in the sorted array b is the sum of all three elements of array a. The smallest number is one of the elements of a. The second smallest number is another element of a. The third element of a can be found by subtracting the smallest and second smallest numbers from the largest number. This approach is efficient and works within the constraints provided.\n", "requirement analysis:\nThe task is to deduce the original array of three distinct positive integers from the given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array a from the given array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide clear and correct output format.\n- Consider multiple valid outputs if applicable.\nWe will leverage the fact that the largest number in the sorted array b is the sum of all three elements of array a. The smallest three numbers in b are the individual elements of a. By using these properties, we can efficiently deduce the original array a for each test case.\n", "requirement analysis:\nThe task requires restoring an array of three distinct positive integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct and prompt output.\nrequirement pool:\n- Efficiently compute the original array from the given sums\n- Ensure the solution handles large integers effectively\n- Provide clear and concise output for each test case\n- Optimize for performance with multiple test cases\n- Maintain simplicity in implementation\nWe will use a straightforward approach to restore the original array 'a' from the given sorted array 'b'. The key observation is that the largest number in 'b' is the sum of all three numbers in 'a'. The smallest number in 'b' is one of the numbers in 'a'. The second smallest number in 'b' is another number in 'a'. By subtracting these from the largest number, we can find the third number in 'a'. This approach is efficient and handles large integers effectively.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct positive integers from a sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure the solution handles large numbers and multiple test cases\n- Provide clear and concise output for each test case\n- Optimize for speed and scalability\n- Maintain simplicity in implementation\nWe will leverage the fact that the largest number in the sorted array b is the sum of all three elements of the original array a. The smallest number is one of the elements of a. By using these properties, we can deduce the original array a by simple arithmetic operations. This approach is efficient and straightforward, ensuring clarity and scalability for up to 5000 test cases.\n"], "scores": [], "pass_results": [false, true, false, false, false, true, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 248, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 121}
