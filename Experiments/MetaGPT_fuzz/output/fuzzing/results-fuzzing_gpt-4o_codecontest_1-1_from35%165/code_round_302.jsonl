{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive integers. He wrote down the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive integers. He wrote down the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b'.\n\n    Args:\n        b (List[int]): A sorted list of integers representing sums of elements from the original array.\n\n    Returns:\n        List[int]: The original array 'a' consisting of three integers.\n    \"\"\"\n    # Since b is sorted, the smallest element is one of the original elements of a.\n    # The largest element in b is the sum of all three elements of a.\n    # The second largest element in b is the sum of the two largest elements of a.\n    \n    # Extract the elements from b\n    x = b[0]  # The smallest element, which is one of the original elements\n    y = b[1]  # The second smallest element, which is the sum of two elements\n    z = b[2]  # The largest element, which is the sum of all three elements\n    \n    # Calculate the original elements\n    a1 = x\n    a2 = z - y\n    a3 = y - x\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read input from standard input\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])  # Number of test cases\n    results = []\n    \n    for i in range(1, t + 1):\n        # Parse each test case\n        b = list(map(int, input_data[i].split()))\n        # Restore the original array\n        result = restore_original_array(b)\n        # Append the result as a space-separated string\n        results.append(' '.join(map(str, result)))\n    \n    # Output the results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the given array b of sums.\n\n    Args:\n        b (List[int]): A list of integers representing the sums of elements of array a.\n\n    Returns:\n        List[int]: The original array a.\n    \"\"\"\n    # Sort the array b to identify the smallest, second smallest, and largest sums\n    b.sort()\n    \n    # The smallest element in b is a_1\n    a1 = b[0]\n    \n    # The second smallest element in b is a_2\n    a2 = b[1]\n    \n    # The largest element in b is the sum of all three elements a_1 + a_2 + a_3\n    a3 = b[-1] - a1 - a2\n    \n    # Return the original array a\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The sorted list `case` contains the sums of all non-empty subsequences of the array [a1, a2, a3].\n        # The smallest element is a1, the second smallest is a2, and the largest is a1 + a2 + a3.\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[-1] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list is the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to ensure it is in ascending order\n        b.sort()\n        \n        # Deduce the original array a\n        # a1 is the smallest element in b\n        a1 = b[0]\n        # a2 is the second largest element minus the largest element\n        a2 = b[-2] - a1\n        # a3 is the largest element minus the sum of a1 and a2\n        a3 = b[-1] - a1 - a2\n        \n        # Append the deduced array to results\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input()).split())) for i in range(num_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing all possible sums of non-empty subsequences\n                       of a three-element array.\n\n    Returns:\n        List[int]: The original three-element array.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    a1_a2_a3 = b[-1]\n    # The second largest element in b is the sum of the two largest elements in a\n    a2_a3 = b[-2]\n    \n    # Deduce the elements of the original array\n    a3 = a1_a2_a3 - a2_a3\n    a2 = a2_a3 - a1\n    a1 = a1  # Already known\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the given subsequence sums\n        case.sort()\n        # The smallest three numbers are the individual elements of the original array\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[2]\n        # The largest number is the sum of all three elements\n        a_sum = case[6]\n        # Calculate the third element using the sum\n        a3 = a_sum - a1 - a2\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    result = restore_array(t, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted array of sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of integers\n                    representing the sorted array of sums.\n\n    Returns:\n        A list of lists, where each inner list is the original array of three integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The original array a can be deduced as follows:\n        # a1, a2, a3 are the three smallest elements in the sorted array\n        # The largest element in the sorted array is the sum of a1, a2, a3\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[2]\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers.\n\n    Returns:\n        List[List[int]]: A list of original arrays restored from the test cases.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array to easily find the smallest and largest elements\n        b.sort()\n        # The smallest element in b is a1\n        a1 = b[0]\n        # The second smallest element in b is a2\n        a2 = b[1]\n        # The largest element in b is the sum of a1, a2, and a3\n        a3 = b[-1] - a1 - a2\n        # Append the restored array [a1, a2, a3] to the results\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read the number of test cases\n    n = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    # Restore the original arrays\n    results = restore_original_array(test_cases)\n    # Output each restored array\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a sorted array of sums.\n\n    Returns:\n        List[List[int]]: List of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted array is the smallest element of the original array\n        smallest_element = case[0]\n        \n        # The largest element in the sorted array is the sum of all elements of the original array\n        sum_of_all_elements = case[-1]\n        \n        # The second largest element in the sorted array is the sum of the two largest elements of the original array\n        sum_of_two_largest_elements = case[-2]\n        \n        # Deduce the largest element\n        largest_element = sum_of_all_elements - sum_of_two_largest_elements\n        \n        # Deduce the second largest element\n        second_largest_element = sum_of_two_largest_elements - largest_element\n        \n        # Construct the original array\n        original_array = [smallest_element, second_largest_element, largest_element]\n        \n        results.append(original_array)\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    cases = [list(map(int, input().split())) for _ in range(t)]\n    \n    # Call the function\n    results = restore_array(t, cases)\n    \n    # Output results\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport sys\nimport typing\n\ndef restore_original_array(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[typing.Tuple[int, int, int]]:\n    \"\"\"Restore the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing sorted sums of non-empty subsequences.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of tuples representing the original arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted list is the smallest element of the original array\n        a1 = case[0]\n        # The largest element in the sorted list is the sum of all elements of the original array\n        a1_a2_a3 = case[-1]\n        # The second largest element in the sorted list is the sum of the two largest elements of the original array\n        a2_a3 = case[-2]\n        \n        # Deduce the original elements\n        a3 = a1_a2_a3 - a2_a3\n        a2 = a2_a3 - a3\n        # a1 is already known as the smallest element\n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output must be correct and formatted as specified.\nrequirement pool:\n- Restore the original array from the given sums\n- Handle multiple test cases efficiently\n- Ensure the solution is robust against edge cases\n- Optimize for large integer values\n- Provide clear and maintainable code\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a from b. This approach is efficient and works well within the given constraints.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest sums in the sorted array b, which correspond to the individual elements and their combinations. The solution must handle up to 5000 test cases efficiently.\nrequirement pool:\n- Implement the main algorithm to restore the array a from b.\n- Optimize the solution for large input sizes.\n- Ensure the solution is easy to read and maintain.\n- Handle edge cases and validate input constraints.\n- Document the code for better understanding.\nWe will solve the problem by identifying the smallest, second smallest, and largest sums in the sorted array b. These correspond to the individual elements and their combinations. Specifically, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. Using these, we can deduce the original array a.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main logic to reconstruct the array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Validate the input to ensure it meets the problem constraints.\n- Provide detailed comments and documentation for the code.\nWe will solve the problem by leveraging the properties of the sums of non-empty subsequences of a three-element array. Given the sorted array b, the smallest element is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. Using these properties, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle large input sizes efficiently\n- Ensure output is correctly formatted\n- Provide clear documentation for the solution\n- Optimize for speed and scalability\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these observations, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires restoring an array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large integer values up to 10^9\n- Ensure the solution is scalable for up to 5000 test cases\n- Provide clear and correct output format\n- Optimize for speed and accuracy\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted and easy to interpret.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large input sizes and integer values within constraints\n- Ensure output clarity and correct formatting\n- Optimize for speed and performance\n- Provide multiple valid outputs if possible\nWe will use a simple mathematical approach to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. This allows us to deduce the original array efficiently without complex computations.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Develop a function to restore the original array from the given sums.\n- Ensure the solution handles multiple test cases efficiently.\n- Optimize the solution for large input sizes.\n- Write clear and maintainable code.\n- Consider edge cases and validate the solution thoroughly.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a_1, a_2, or a_3. The largest element in b is the sum of all three original elements. By using these properties, we can deduce the original array a. Specifically, the three smallest elements in b are the individual elements of a, and the largest element is their sum. This approach is efficient and straightforward, allowing us to handle up to 5000 test cases efficiently.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output for each case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is clear and correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of a, and the largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a. Specifically, the three elements of a can be found as follows: a1 is the smallest element in b, a2 is the second smallest element in b, and a3 can be found by subtracting a1 and a2 from the largest element in b.\n", "requirement analysis:\nThe problem requires restoring an array of three integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases, ensuring correct restoration of the original array for each test case.\nrequirement pool:\n- Implement the main algorithm to restore array a from array b.\n- Ensure the solution handles all edge cases and constraints.\n- Optimize the solution for performance with large inputs.\n- Provide clear and concise output formatting.\n- Document the solution for maintainability and understanding.\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of the array a. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these observations, we can deduce the original array a.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output must be consistent with the input format and constraints.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format consistency\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these properties, we can deduce the original array a efficiently.\n"], "scores": [], "pass_results": [true, false, true, true, false, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 302, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 174}
