{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, arranged them in non-descending order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, arranged them in non-descending order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b' for each test case.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        n = len(b) - 1  # Since b is of length n+1\n        total_sum = b[-1]  # The largest element in b is the sum of all elements in a\n        smallest_element = b[0]  # The smallest element in b is the smallest element in a\n\n        # Deduce the original array 'a'\n        a = []\n        current_sum = 0\n        for i in range(n):\n            if current_sum + b[i] <= total_sum:\n                a.append(b[i])\n                current_sum += b[i]\n            else:\n                break\n\n        results.append(a)\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for i in range(num_cases)]\n\n    results = restore_original_array(test_cases)\n    for i, result in enumerate(results):\n        print(f\"Restored array a for test case {i+1}: {' '.join(map(str, result))}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Restores the original array a from the given sorted array b.\n\n    Args:\n        b (list[int]): A sorted list of integers where the largest number is the sum\n                       of the three numbers in the original array a.\n\n    Returns:\n        tuple[int, int, int]: The original array a as a tuple of three integers.\n    \"\"\"\n    # The largest number in b is the sum of the original array a\n    sum_a = b[-1]\n    \n    # The smallest number in b is one of the original numbers\n    a1 = b[0]\n    \n    # The second smallest number in b is another original number\n    a2 = b[1]\n    \n    # The third number in the original array can be found by subtracting\n    # the sum of the two smallest numbers from the total sum\n    a3 = sum_a - a1 - a2\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_original_array(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array `b`.\n\n    Returns:\n        List[List[int]]: A list of original arrays `a` for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        a_3 = b[-1] - a_1 - a_2\n        # Append the original array [a_1, a_2, a_3] to results\n        results.append([a_1, a_2, a_3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    n = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    # Get the results for each test case\n    results = restore_original_array(test_cases)\n    # Output each result\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b'.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: A list of original arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements a\n        x = b[0]\n        # The largest element in b is the sum of all three elements of a\n        sum_all = b[-1]\n        # The second largest element in b is the sum of the two largest elements of a\n        sum_two_largest = b[-2]\n        \n        # Deduce the original elements\n        a1 = x\n        a2 = sum_two_largest - x\n        a3 = sum_all - sum_two_largest\n        \n        results.append([a1, a2, a3])\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b' of sums.\n\n    Args:\n        b (List[int]): A sorted list of integers representing sums of elements of 'a'.\n\n    Returns:\n        List[int]: The original array 'a'.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all elements of a\n    sum_a = b[-1]\n    # The third element of a can be found by subtracting a1 and a2 from sum_a\n    a3 = sum_a - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(result)\n    \n    for res in results:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each representing the restored array 'a' for a test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is the smallest element of a\n        smallest = case[0]\n        # The largest element in b is the sum of all elements of a\n        total_sum = case[-1]\n        # The second largest element in b is the sum of the two largest elements of a\n        sum_two_largest = case[-2]\n        \n        # Deduce the largest element of a\n        largest = total_sum - sum_two_largest\n        # Deduce the second largest element of a\n        second_largest = sum_two_largest - largest\n        \n        # Append the result as a tuple\n        results.append((smallest, second_largest, largest))\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Deduces the original array of three integers from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A sorted list of integers representing the subsequence sums.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in the sorted array are the individual elements of the original array.\n    # The largest number is the sum of all three elements.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[-1] - a1 - a2  # Correctly deduce the third element using the largest number.\n    \n    # Return the original array\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n\n    results = []\n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = restore_original_array(b)\n        results.append(result)\n\n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three elements from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of integers representing the sums of all non-empty subsequences of an array with three elements.\n\n    Returns:\n        Tuple[int, int, int]: The original array of three elements.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of a\n    a1 = b[0]\n    a2 = b[1]\n    # The largest number is the sum of all three elements\n    a3 = b[-1] - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Reads input, processes each test case, and outputs the result.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(result)\n    for res in results:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from a sorted array of 7 integers.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted array is one of the original integers\n        a1 = case[0]\n        # The largest element in the sorted array is the sum of the original three integers\n        sum_a = case[-1]\n        # The second largest element is the sum of two of the original integers\n        a2 = case[-2] - a1\n        # The third largest element is the sum of the other two original integers\n        a3 = sum_a - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b'.\n\n    Args:\n        b (List[int]): The sorted array from which the original array is to be restored.\n\n    Returns:\n        List[int]: The original array 'a'.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    smallest = b[0]\n    \n    # The largest element in b is the sum of all elements in a\n    total_sum = b[-1]\n    \n    # The second largest element in b is the sum of the two largest elements in a\n    sum_two_largest = b[-2]\n    \n    # Deduce the largest element in a\n    largest = sum_two_largest - smallest\n    \n    # Deduce the second largest element in a\n    second_largest = total_sum - largest\n    \n    # Deduce the original array a\n    a = [smallest, second_largest, largest]\n    \n    return a\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read input from standard input\n    input_data = sys.stdin.read().strip().split('\\n')\n    \n    # Number of test cases\n    t = int(input_data[0])\n    \n    # Prepare results for each test case\n    results = []\n    for i in range(1, t + 1):\n        # Parse the sorted array b for each test case\n        b = list(map(int, input_data[i].split()))\n        \n        # Restore the original array a\n        result = restore_original_array(b)\n        \n        # Append the result as a space-separated string\n        results.append(' '.join(map(str, result)))\n    \n    # Output the results for each test case\n    for result in results:\n        print(result)\n\n# Entry point for the script\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of seven integers, which represent all possible non-empty subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution is efficient for the maximum constraints.\n- Provide clear and concise output for each test case.\n- Handle edge cases and large numbers effectively.\n- Optimize for both speed and simplicity.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting appropriate elements from b.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output must strictly follow the specified format.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution works with large integer values up to 10^9.\n- Provide clear and concise output for each test case.\n- Optimize for performance and memory usage.\nWe will use the property that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. The second smallest number in b is another original number. The third smallest number in b is the sum of the two smallest numbers in a. Using these properties, we can efficiently restore the original array a for each test case.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of a, and the largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a. Specifically, the three elements of a can be found as follows: a_1 is the smallest element in b, a_2 is the second smallest element in b, and a_3 can be found by subtracting a_1 and a_2 from the largest element in b.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output is correctly formatted\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. Using these observations, we can deduce the original array a by simple arithmetic operations. This approach is efficient and works well within the constraints provided.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output is correctly formatted\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of a, and the largest element in b is the sum of all elements of a. By using these properties, we can deduce the original array a. Specifically, a1 is the smallest element, a2 is the second smallest element, and a3 can be found by subtracting a1 and a2 from the largest element in b.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output formatting.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output is correctly formatted\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve the problem by leveraging the properties of the sorted array b. The smallest element in b is the smallest element of a. The largest element in b is the sum of all elements of a. The second largest element in b is the sum of the two largest elements of a. Using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide clear documentation for the solution\nWe will implement a function that takes the sorted array of subsequence sums and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. This allows us to deduce the original array efficiently without complex computations.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of its non-empty subsequences. Given the constraints, the solution must efficiently handle up to 5000 test cases with large integer values. The key insight is that the smallest three numbers in the sorted list of sums correspond to the individual elements of the array, and the largest number is the sum of all three elements.\nrequirement pool:\n- Implement the main algorithm to restore the array from the given sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is robust against edge cases.\n- Provide clear documentation and comments in the code.\n- Include test cases to verify the solution's correctness.\nWe will leverage the fact that the array b is sorted and represents the sums of all non-empty subsequences of an array a with three elements. The smallest three numbers in b are the individual elements of a, and the largest number is the sum of all three elements. Thus, we can deduce the elements of a by taking the smallest element as a1, the second smallest as a2, and the difference between the largest element and the sum of a1 and a2 as a3.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output format is crucial and must be adhered to strictly.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide clear documentation for the solution\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the smallest element in b is one of the original integers, and the largest element in b is the sum of all three original integers. By using these observations, we can efficiently restore the original array a.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate and consistent output.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is consistent and clear\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve the problem by recognizing that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. The second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a from b. This approach is efficient and works within the constraints provided.\n"], "scores": [], "pass_results": [true, true, false, false, true, false, true, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 96, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 25}
