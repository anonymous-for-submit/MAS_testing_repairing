{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a made up of 3 positive numbers and wrote out the sums of all non-empty subsequences of this array, arranged them in non-descending order, resulting in an array b of 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8 and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a. He only has the array b left. Assist him in retrieving the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a made up of 3 positive numbers and wrote out the sums of all non-empty subsequences of this array, arranged them in non-descending order, resulting in an array b of 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8 and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a. He only has the array b left. Assist him in retrieving the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_original_array(b: List[int]) -> List[int]:\n    \"\"\"Reconstruct the original array from the given subsequence sums.\n\n    Args:\n        b (List[int]): A list of integers representing the subsequence sums.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # Sort the list to easily access the smallest and largest elements\n    b.sort()\n    \n    # The smallest element in the sorted list is one of the original numbers\n    a1 = b[0]\n    \n    # The second smallest element is another original number\n    a2 = b[1]\n    \n    # The largest element is the sum of all three original numbers\n    sum_all = b[-1]\n    \n    # The third original number can be found by subtracting the sum of the first two from the total sum\n    a3 = sum_all - a1 - a2\n    \n    # Return the original array\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = reconstruct_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef reconstruct_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Reconstructs the original array 'a' from the sorted array 'b' of sums of non-empty subsequences of 'a'.\n\n    Args:\n        b (List[int]): A sorted list representing all possible sums of non-empty subsequences of a three-element array 'a'.\n\n    Returns:\n        List[int]: The reconstructed array 'a'.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    a1_a2_a3 = b[-1]\n    # The second largest element in b is the sum of the two largest elements in a\n    a2_a3 = b[-2]\n    \n    # Calculate the elements of array a\n    a2 = a1_a2_a3 - a1 - (a2_a3 - a1)\n    a3 = a2_a3 - a2\n    a = [a1, a2, a3]\n    \n    return a\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    data = sys.stdin.read().strip().split('\\n')\n    t = int(data[0])  # Number of test cases\n    results = []\n    \n    for i in range(1, t + 1):\n        b = list(map(int, data[i].split()))\n        result = reconstruct_array_from_sums(b)\n        results.append(' '.join(map(str, result)))\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Reconstructs the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list 'b' \n                                      which represents the sums of all non-empty subsequences of 'a'.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each representing the reconstructed array 'a'.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        # Since b is sorted, the smallest element is the smallest element of 'a'\n        a1 = b[0]\n        # The second smallest element in 'b' is the second smallest element of 'a'\n        a2 = b[1]\n        # The largest element in 'b' is the sum of all elements of 'a'\n        sum_a = b[-1]\n        # The third element of 'a' can be found by subtracting a1 and a2 from sum_a\n        a3 = sum_a - a1 - a2\n        \n        # Append the reconstructed array as a tuple\n        results.append((a1, a2, a3))\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Output interface\n    results = reconstruct_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef retrieve_original_array(b: List[int]) -> List[int]:\n    \"\"\"Retrieve the original array from the given list of integers.\n\n    Args:\n        b (List[int]): A list of four integers where the first three are the \n                       smallest elements of the original array and the fourth \n                       is the sum of all three elements.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # Sort the list to ensure the first three are the smallest elements\n    b.sort()\n    \n    # The original array can be deduced as follows:\n    # a1 = b[0], a2 = b[1], a3 = b[3] - b[0] - b[1]\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[3] - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = retrieve_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef retrieve_original_array(b: List[int]) -> List[int]:\n    \"\"\"Reconstructs the original array a from the given array b.\n\n    Args:\n        b (List[int]): A list of integers where the smallest three numbers\n                       are the elements of the original array a, and the\n                       largest number is the sum of all three elements of a.\n\n    Returns:\n        List[int]: The original array a.\n    \"\"\"\n    # Sort the array b to easily access the smallest three numbers and the largest number\n    b.sort()\n    \n    # The original array a consists of the smallest three numbers in b\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[2]\n    \n    # The largest number in b is the sum of all three elements of a\n    sum_a = b[3]\n    \n    # Return the original array a\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read input from standard input\n    input_data = sys.stdin.read().strip().split('\\n')\n    \n    # First line of input is the number of test cases\n    t = int(input_data[0])\n    \n    # Prepare a list to store results for each test case\n    results = []\n    \n    # Process each test case\n    for i in range(1, t + 1):\n        # Convert the current line of input into a list of integers\n        b = list(map(int, input_data[i].split()))\n        \n        # Retrieve the original array a from b\n        result = retrieve_original_array(b)\n        \n        # Append the result as a space-separated string\n        results.append(' '.join(map(str, result)))\n    \n    # Output the results for each test case\n    for result in results:\n        print(result)\n\n# Entry point for the script\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array a from the sorted array b which contains all non-empty subsequences of a.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of integers.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays a for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is the smallest element of a\n        a1 = case[0]\n        # The second smallest element in b is the second element of a\n        a2 = case[1]\n        # The largest element in b is the sum of all three elements of a\n        a3 = case[-1] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and print results.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Process each test case\n    results = reconstruct_array(t, test_cases)\n    \n    # Output the reconstructed array a for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array a from the given test cases.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array to easily find the smallest and largest elements\n        case.sort()\n        # The smallest three numbers are a_1, a_2, a_3\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[2]\n        # The largest number is a_1 + a_2 + a_3\n        a_sum = case[-1]\n        # Reconstruct the original array a\n        reconstructed_a = [a1, a2, a_sum - a1 - a2]\n        results.append(reconstructed_a)\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the results from the reconstruct_array function\n    results = reconstruct_array(t, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef retrieve_original_array(b: List[int]) -> List[int]:\n    \"\"\"Retrieve the original array 'a' from the given array 'b'.\n\n    Args:\n        b (List[int]): The array containing sums of non-empty subsequences.\n\n    Returns:\n        List[int]: The original array 'a'.\n    \"\"\"\n    # Sort the array 'b' to deduce the original array 'a'\n    b.sort()\n    \n    # The smallest element in 'b' is the smallest element of 'a'\n    # The second smallest element in 'b' is the second smallest element of 'a'\n    # The largest element in 'b' is the sum of all elements of 'a'\n    n = len(b) - 1  # Since b contains 2^n - 1 elements, n is the length of a\n    a = b[:n]  # The first n elements of sorted b are the elements of a\n    \n    return a\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])  # Number of test cases\n\n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = retrieve_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Reconstructs the original array from the given sums.\n\n    Args:\n        b (List[int]): A list of integers where the first three are the original elements\n                       and the fourth is the sum of these three elements.\n\n    Returns:\n        List[int]: The reconstructed original array.\n    \"\"\"\n    # Sort the list to ensure the smallest three numbers are the original elements\n    b_sorted = sorted(b)\n    \n    # The original array elements are the first three elements of the sorted list\n    a1, a2, a3 = b_sorted[0], b_sorted[1], b_sorted[2]\n    \n    # Return the reconstructed array\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    for _ in range(t):\n        # Read the array b from input\n        b = list(map(int, input().split()))\n        \n        # Call the function to reconstruct the array\n        result = reconstruct_array_from_sums(b)\n        \n        # Print the result\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array from the given test cases.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of sums of all non-empty subsequences.\n\n    Returns:\n        List[List[int]]: A list of reconstructed original arrays for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = int((len(case) - 1) ** 0.5)  # Calculate the size of the original array\n        case.sort()  # Ensure the case is sorted\n        original_array = []\n        \n        # The smallest element in the sorted list is the smallest element of the original array\n        smallest_element = case[0]\n        original_array.append(smallest_element)\n        \n        # Remove the smallest element from the list\n        case.remove(smallest_element)\n        \n        # The largest element in the sorted list is the sum of all elements of the original array\n        sum_of_elements = case[-1]\n        \n        # Deduce the remaining elements of the original array\n        for _ in range(n - 1):\n            # The next smallest element in the list is the next element of the original array\n            next_element = case[0]\n            original_array.append(next_element)\n            \n            # Remove the next element and its combinations from the list\n            new_case = []\n            for x in case:\n                if x != next_element:\n                    new_case.append(x)\n                else:\n                    next_element = None  # Ensure only one instance is removed\n            case = new_case\n        \n        results.append(original_array)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    \n    results = reconstruct_array(t, test_cases)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires reconstructing an original array of three numbers from the sums of its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases, each with large integer values.\nrequirement pool:\n- Efficiently process up to 5000 test cases\n- Correctly reconstruct the original array from the given sums\n- Handle large integer values up to 10^9\n- Provide clear and correctly formatted output\n- Optimize for both time and space complexity\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original numbers, and the largest element is the sum of all three original numbers. The second smallest element is another original number. By subtracting these from the largest element, we can find the third original number. This approach is efficient and works within the constraints provided.\n", "requirement analysis:\nThe problem requires reconstructing an array of three positive integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main logic to reconstruct the array a from b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Validate the input format and constraints.\n- Provide detailed comments and documentation for the code.\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can reconstruct the array a efficiently.\n", "requirement analysis:\nThe task requires reconstructing the original array of three numbers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly to match the expected results.\nrequirement pool:\n- Implement the algorithm to reconstruct array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the code for performance with large integer values.\n- Provide clear and concise output formatting.\n- Include error handling for unexpected input formats.\nWe will reconstruct the original array 'a' from the given array 'b' by leveraging the properties of the sums of subsequences. Since 'b' is sorted and contains the sums of all non-empty subsequences of 'a', the smallest element in 'b' is the smallest element of 'a'. The largest element in 'b' is the sum of all elements of 'a'. The second smallest element in 'b' is the second smallest element of 'a'. By using these properties, we can deduce the three elements of 'a'.\n", "requirement analysis:\nThe problem requires reconstructing an array of three positive integers from a sorted list of sums of its non-empty subsequences. The key observation is that the smallest three numbers in the sorted list correspond to the individual elements of the original array. The largest number is the sum of all three elements. This allows us to deduce the original array efficiently.\nrequirement pool:\n- Implement the main logic to deduce the original array from the sorted sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for performance and memory usage.\n- Provide clear documentation and comments in the code.\n- Consider edge cases and validate input constraints.\nWe will leverage the observation that the smallest three numbers in the sorted list correspond to the individual elements of the original array, and the largest number is the sum of all three elements. This allows us to deduce the original array efficiently. We will use Python's built-in capabilities to handle large integers and ensure the solution is efficient for the maximum constraints.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three numbers from the sums of its non-empty subsequences. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of array a. The largest number in b is the sum of all three elements of a. This allows us to deduce the values of a efficiently.\nrequirement pool:\n- Implement the main algorithm to deduce array a from array b\n- Optimize the solution for large input sizes\n- Ensure the solution handles edge cases correctly\n- Provide clear documentation and comments in the code\n- Test the solution with various test cases for accuracy\nWe will leverage the observation that the smallest three numbers in the sorted array b correspond to the individual elements of array a. The largest number in b is the sum of all three elements of a. This allows us to deduce the values of a efficiently. We will use simple arithmetic operations to reconstruct the original array a from b.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three numbers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest sums in the sorted array b, which correspond to the individual elements and their pairwise sums. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement a function to extract the original array from the given sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for clarity and maintainability.\n- Test the solution against edge cases and large inputs.\n- Document the solution approach and edge case handling.\nWe will leverage the fact that the array b is sorted and represents all non-empty subsequences of an array a with three elements. The smallest element in b is the smallest element of a, the second smallest is the second element of a, and the largest element in b is the sum of all three elements of a. By using these properties, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three numbers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and the largest sum in the sorted array b, which correspond to the individual elements and the sum of all three elements respectively.\nrequirement pool:\n- Implement the function to reconstruct the array a from b.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is robust against edge cases.\n- Provide detailed comments and documentation for the code.\n- Implement additional test cases to verify the solution.\nWe will leverage the fact that the smallest three numbers in the sorted array b correspond to the individual elements of array a, and the largest number in b is the sum of all three elements of a. By identifying these values, we can reconstruct the original array a. Specifically, the smallest number in b is a_1, the second smallest is a_2, and the largest number is a_1 + a_2 + a_3. The third smallest number in b is a_3, which can be derived by subtracting a_1 and a_2 from the largest number.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and the largest sum in the sorted array b, which correspond to the individual elements and their pairwise sums.\nrequirement pool:\n- Implement the main logic to deduce array a from array b.\n- Optimize the solution for large input sizes.\n- Ensure the solution is easy to read and maintain.\n- Test the solution against edge cases.\n- Document the solution approach and logic.\nWe will deduce the original array 'a' from the given array 'b' by leveraging the properties of sums of non-empty subsequences. The smallest element in 'b' is the smallest element of 'a', the second smallest element in 'b' is the second smallest element of 'a', and the largest element in 'b' is the sum of all elements of 'a'. This approach is efficient and straightforward, ensuring that we can handle the maximum constraints effectively.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a sorted list of sums of its non-empty subsequences. The key observation is that the smallest three numbers in the sorted list are the individual elements of the array, and the largest number is the sum of all three elements. This allows us to deduce the original array efficiently.\nrequirement pool:\n- Implement a function to reconstruct the array from the given sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is easy to read and maintain.\n- Provide detailed comments and documentation for the code.\n- Consider edge cases and validate the solution against them.\nWe will leverage the observation that the smallest three numbers in the sorted list are the individual elements of the array, and the largest number is the sum of all three elements. This allows us to deduce the original array efficiently. We will use simple arithmetic operations to reconstruct the array from the given sums.\n", "requirement analysis:\nThe task requires reconstructing an original array of three positive integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, ensuring that the input-output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Implement the main algorithm to reconstruct array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Validate input format and handle edge cases.\n- Optimize the code for performance and readability.\n- Provide detailed comments and documentation for the code.\nWe will use the properties of the sorted array b to reconstruct the original array a. Since b contains the sums of all non-empty subsequences of a, we can deduce that the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements of a. By using these properties, we can efficiently determine the values of a.\n"], "scores": [], "pass_results": [true, false, false, false, false, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 230, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 102}
