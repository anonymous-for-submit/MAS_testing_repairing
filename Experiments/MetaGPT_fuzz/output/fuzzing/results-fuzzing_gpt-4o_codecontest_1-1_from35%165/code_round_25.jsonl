{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restore the original array 'a' from the sorted array 'b' which represents\n    all possible sums of the non-empty subsequences of 'a'.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: List of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = int((len(case) - 1) ** 0.5)  # Calculate the length of the original array 'a'\n        case.sort()  # Ensure the array is sorted\n        original_array = case[:n]  # The first n elements are the original array 'a'\n        results.append(original_array)\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all possible subsequences\n                       of the original array of three integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    sum_all = b[-1]\n    # The second smallest element in b is the sum of the two smallest original integers\n    a2 = b[1] - a1\n    # The third smallest element in b is the sum of the two largest original integers\n    a3 = sum_all - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport typing\nimport sys\n\ndef restore_original_array(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[typing.Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a sorted list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing the original array of three integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted array is the smallest number in the original array.\n        a = case[0]\n        # The second smallest element is the second smallest number in the original array.\n        b = case[1]\n        # The largest element is the sum of all three numbers in the original array.\n        sum_abc = case[-1]\n        # Calculate the third number using the sum of all three numbers.\n        c = sum_abc - a - b\n        results.append((a, b, c))\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing all possible sums of non-empty subsequences of a three-element array.\n\n    Returns:\n        List[int]: The original three-element array.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    a_sum = b[-1]\n    # The second largest element in b is the sum of the two largest elements in a\n    a2_plus_a3 = b[-2]\n    \n    # Calculate the second element of a\n    a2 = a_sum - a2_plus_a3\n    # Calculate the third element of a\n    a3 = a_sum - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of integers.\n\n    Returns:\n        A list of lists, where each inner list is the restored original array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array to easily access the smallest and largest elements\n        case.sort()\n        \n        # The smallest element in the sorted array is one of the original elements\n        a1 = case[0]\n        \n        # The largest element in the sorted array is the sum of all three original elements\n        sum_all = case[-1]\n        \n        # The second largest element is the sum of the two largest original elements\n        sum_two_largest = case[-2]\n        \n        # Deduce the original elements\n        a2 = sum_two_largest - a1\n        a3 = sum_all - sum_two_largest\n        \n        # Append the restored array to the results\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the results from the restore_original_array function\n    results = restore_original_array(test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restore the original array from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers.\n\n    Returns:\n        List[List[int]]: A list of original arrays deduced from each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to ensure the order is correct\n        b.sort()\n        # Deduce the original array a\n        a1 = b[0]  # The smallest element in b is one of the original elements\n        a2 = b[1]  # The second smallest element in b is another original element\n        a3 = b[-1] - a1 - a2  # The largest element in b is the sum of all three elements of a\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted array.\n\n    Args:\n        test_cases: A list of test cases, each containing a sorted list of integers.\n\n    Returns:\n        A list of lists, where each inner list is the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements a\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements of a\n        a_sum = b[-1]\n        # The second largest element in b is the sum of the two largest elements of a\n        a2_plus_a3 = b[-2]\n        \n        # Calculate the original elements\n        a2 = a2_plus_a3 - a1\n        a3 = a_sum - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the results from the restore_original_array function\n    results = restore_original_array(test_cases)\n    \n    # Output each original array\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_array(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Restores the original array from the given list.\n\n    Args:\n        b: A list of four integers where the first three are the elements of the original array\n           and the fourth is the sum of these three elements.\n\n    Returns:\n        A tuple containing the three integers of the original array.\n    \"\"\"\n    # Sort the list to ensure the smallest three numbers are the original elements\n    b.sort()\n    # The original array elements are the first three numbers in the sorted list\n    return (b[0], b[1], b[2])\n\nimport sys\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])  # Number of test cases\n    results = []\n\n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        a = restore_array(b)\n        results.append(f'{a[0]} {a[1]} {a[2]}')\n\n    for result in results:\n        print(result)\n\nif __name__ == '__main__':\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restore the original array from the given sorted array.\n\n    Args:\n        test_cases: A list of test cases, each containing a sorted list of integers.\n\n    Returns:\n        A list of lists, where each list is the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array to ensure the smallest and largest elements are correctly identified\n        b.sort()\n        # Deduce the original array 'a' from the sorted array 'b'\n        a1 = b[0]  # The smallest element in 'b' is one of the original elements 'a'\n        a2 = b[-1] - b[-2]  # The second largest element in 'b' is the sum of the two largest elements of 'a'\n        a3 = b[-1] - a1 - a2  # The largest element in 'b' is the sum of all three elements of 'a'\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n\n    # Process the test cases and get the results\n    results = restore_original_array(test_cases)\n\n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array to easily find the largest and smallest elements\n        case.sort()\n        \n        # The largest number in the sorted array is the sum of the original three numbers\n        sum_of_original = case[-1]\n        \n        # The smallest number in the sorted array is one of the original numbers\n        a1 = case[0]\n        \n        # The second smallest number in the sorted array is another original number\n        a2 = case[1]\n        \n        # The third original number can be found by subtracting the first two from the sum\n        a3 = sum_of_original - a1 - a2\n        \n        # Append the restored array to the results\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the result from the restore_array function\n    result = restore_array(t, test_cases)\n    \n    # Output the result\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of all its non-empty subsequences. The key is to identify the smallest, second smallest, and largest elements from the sorted list of sums, which correspond to the individual elements and their combinations.\nrequirement pool:\n- Implement the solution to reconstruct the array a from the given array b.\n- Optimize the solution to handle the upper limits of input constraints efficiently.\n- Ensure the solution is well-documented and easy to understand.\n- Test the solution with a variety of test cases to ensure accuracy.\n- Consider edge cases and validate the solution against them.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of array a. The smallest element in b is the smallest element in a, the second smallest is the second smallest element in a, and the largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a.\n", "requirement analysis:\nThe task requires reconstructing an array of three integers from the sums of its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main algorithm to restore the original array.\n- Ensure the solution is efficient for large inputs.\n- Format the output correctly for each test case.\n- Optimize the code for readability and maintainability.\n- Handle edge cases and validate input constraints.\nWe will implement a function that takes the sorted array of sums of subsequences and deduces the original array of three integers. The key observation is that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently reconstruct the original array.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure the solution handles large input sizes within constraints\n- Provide clear and accurate output for each test case\n- Optimize for both small and large input sizes\n- Maintain simplicity in implementation\nWe will solve the problem by leveraging the properties of the sorted array of sums. Given the sorted array b of 7 integers, the smallest element is the smallest number in the original array a. The largest element is the sum of all three numbers in a. The second smallest element is the second smallest number in a. By using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires reconstructing an original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output.\nrequirement pool:\n- Implement the main algorithm to restore the original array.\n- Optimize the solution for handling large numbers efficiently.\n- Ensure the solution can process up to 5000 test cases quickly.\n- Provide clear and formatted output for each test case.\n- Test the solution against edge cases and large inputs.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these insights, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The constraints ensure that a valid solution always exists.\nrequirement pool:\n- Develop a function to restore the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for clarity and maintainability.\n- Include edge case handling for large integer values.\n- Provide detailed comments and documentation for the code.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values up to 10^9\n- Provide clear and correctly formatted output\n- Optimize for performance in terms of time complexity\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a from b. This approach is efficient and works well within the constraints provided.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted list of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output is correct and formatted as specified.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution works with large integer values.\n- Provide clear and correctly formatted output.\n- Optimize for performance and memory usage.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a from b. We will iterate over each test case, extract the necessary elements from b, and print the result.\n", "requirement analysis:\nThe task is to deduce the original array of three integers from the sorted list of sums of all non-empty subsequences. The key observation is that the smallest three numbers in the sorted list are the individual elements of the array, and the largest number is the sum of all three elements.\nrequirement pool:\n- Implement the main algorithm to deduce the original array from the given sums.\n- Optimize the solution for handling up to 5000 test cases efficiently.\n- Ensure the solution is easy to read and maintain.\n- Handle edge cases where the input values are at their maximum constraints.\n- Provide detailed comments and documentation for the code.\nWe will leverage the observation that the smallest three numbers in the sorted list are the individual elements of the array, and the largest number is the sum of all three elements. This allows us to deduce the original array efficiently without complex computations.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output is correctly formatted and meets the constraints provided.\nrequirement pool:\n- Efficiently process up to 5000 test cases.\n- Correctly restore the original array from the given subsequence sums.\n- Ensure the solution handles large integer values efficiently.\n- Provide clear and correctly formatted output.\n- Optimize for both performance and usability.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a from b efficiently.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid solutions if possible\nWe will use the property that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. By using these properties, we can efficiently deduce the original array a from b.\n"], "scores": [], "pass_results": [false, false, false, false, true, false, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 25, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 25}
