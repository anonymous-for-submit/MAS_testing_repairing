{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume the elements in array a are distinct.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume the elements in array a are distinct.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nimport typing\nimport sys\n\ndef restore_original_array(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[typing.Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given sorted array of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of sums.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each representing the original array for a test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted list is the smallest element in the original array\n        a1 = case[0]\n        # The largest element in the sorted list is the sum of all elements in the original array\n        a1_a2_a3 = case[-1]\n        # The second largest element in the sorted list is the sum of the two largest elements in the original array\n        a2_a3 = case[-2]\n        \n        # Calculate the elements of the original array\n        a3 = a1_a2_a3 - a2_a3\n        a2 = a2_a3 - a1\n        # a1 is already known as the smallest element\n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process each test case, and output the results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the given sorted array b of sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing sums of subsequences.\n\n    Returns:\n        List[int]: The original array a of 3 integers.\n    \"\"\"\n    # Since b is sorted, the smallest element is the smallest number in a\n    a1 = b[0]\n    # The second and third smallest elements in b are the other two numbers in a\n    a2 = b[1]\n    a3 = b[2]\n    # The largest element in b is the sum of all three numbers in a\n    # We can verify this by checking if a1 + a2 + a3 equals the largest element\n    assert a1 + a2 + a3 == b[-1], \"The sum of a1, a2, and a3 should match the largest element in b\"\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing sums of elements from array a.\n\n    Returns:\n        List[int]: The original array a consisting of 3 integers.\n    \"\"\"\n    # The smallest element in b is one of the original elements of a\n    a1 = b[0]\n    # The second smallest element in b is another original element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements of a\n    sum_a = b[-1]\n    # The third element of a can be found by subtracting a1 and a2 from the sum\n    a3 = sum_a - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the sorted array 'b'.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: List of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array to ensure the smallest three numbers are the individual elements of 'a'\n        case.sort()\n        # The smallest three numbers are the elements of 'a'\n        a1, a2, a3 = case[0], case[1], case[2]\n        # The largest number is the sum of all three elements of 'a'\n        sum_a = case[-1]\n        # Reconstruct the array 'a'\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Call the function to reconstruct arrays\n    results = reconstruct_array(t, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Reconstructs the original array a from the sorted array b which contains\n    all possible sums of the non-empty subsequences of a three-element array a.\n\n    Args:\n        b (List[int]): A sorted list of integers representing all possible sums\n                       of non-empty subsequences of a three-element array a.\n\n    Returns:\n        List[int]: The original three-element array a.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    a1_a2_a3 = b[-1]\n    # The second largest element in b is the sum of the two largest elements in a\n    a2_a3 = b[-2]\n    \n    # Calculate the individual elements of a\n    a3 = a1_a2_a3 - b[1]  # a3 = a1_a2_a3 - (a1 + a2)\n    a2 = a2_a3 - a3       # a2 = a2_a3 - a3\n    a1 = a1               # a1 is already known as b[0]\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted array of sums.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of integers.\n\n    Returns:\n        List[List[int]]: A list of original arrays for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements a\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements of a\n        sum_a = b[-1]\n        # The second smallest element in b is the sum of two of the original elements\n        a2 = b[1] - a1\n        # The third element can be found by subtracting the known elements from the total sum\n        a3 = sum_a - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nnumber_of_test_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(number_of_test_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the sorted array of sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing\n                    the sorted array of sums of non-empty subsequences of a three-element array.\n\n    Returns:\n        A list of tuples, each containing three integers representing the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is the smallest element in a\n        a1 = b[0]\n        # The largest element is the sum of all elements in a\n        a_sum = b[-1]\n        # The second largest element is the sum of the two largest elements in a\n        a2_a3_sum = b[-2]\n        \n        # Deduce the elements of the original array\n        a2 = a2_a3_sum - a1\n        a3 = a_sum - a2_a3_sum\n        \n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Process the test cases\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport sys\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[list[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing a sorted array.\n\n    Returns:\n        list[list[int]]: List of original arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted array is the smallest element of the original array\n        smallest = case[0]\n        # The largest element in the sorted array is the sum of all elements in the original array\n        total_sum = case[-1]\n        # Deduce the original array by excluding the smallest and largest elements\n        original_array = [x for x in case if x != smallest and x != total_sum]\n        results.append(original_array)\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    \n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given sorted array of sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each representing the restored array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the case to ensure the smallest and largest elements are correctly identified\n        case.sort()\n        # The smallest element is a, the second smallest is b, and the largest is a + b + c\n        a = case[0]\n        b = case[1]\n        c = case[-1] - a - b\n        results.append((a, b, c))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of subsequence sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element is a_1\n        a1 = case[0]\n        # The second smallest element is a_2\n        a2 = case[1]\n        # The largest element is the sum of all three elements a_1 + a_2 + a_3\n        sum_all = case[-1]\n        # Calculate a_3\n        a3 = sum_all - a1 - a2\n        # Append the restored array to results\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array of three distinct integers from the sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted and easy to interpret.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output is correctly formatted\n- Optimize for large integer values\n- Provide clear documentation for the solution\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these insights, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three distinct integers from the sorted sums of all its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers, ensuring that the output is correct and adheres to the constraints provided.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums.\n- Optimize the solution for handling large input sizes efficiently.\n- Ensure the solution is easy to understand and maintain.\n- Handle edge cases and validate input constraints.\n- Provide detailed comments and documentation for the code.\nWe will solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b of 7 integers, the smallest element is the smallest number in the original array a. The largest element in b is the sum of all three numbers in a. The second and third smallest elements in b are the other two numbers in a. This approach is efficient and straightforward, ensuring clarity and performance.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from the sorted sums of all its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The constraints ensure that a valid solution always exists, allowing for straightforward extraction of the original integers.\nrequirement pool:\n- Develop a function to extract the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for clarity and maintainability.\n- Include edge case handling for large integer values.\n- Provide detailed comments and documentation for the code.\nWe will leverage the fact that the smallest element in the sorted array b is one of the original elements of array a. The largest element in b is the sum of all three elements of a. By using these properties, we can deduce the original array a by simple arithmetic operations. This approach is efficient and straightforward, ensuring clarity and maintainability.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values, and produce correct outputs for each test case.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Optimize the solution for handling large numbers efficiently.\n- Ensure the solution can process the maximum number of test cases quickly.\n- Provide clear and concise output for each test case.\n- Handle edge cases and ensure robustness of the solution.\nWe will implement a function that reconstructs the array 'a' from the sorted array 'b'. The key observation is that the smallest three numbers in 'b' are the individual elements of 'a', and the largest number in 'b' is the sum of all three elements of 'a'. This allows us to deduce the elements of 'a' directly from 'b'.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers, ensuring that the output is correct and adheres to the input-output format.\nrequirement pool:\n- Efficiently process up to 5000 test cases\n- Correctly reconstruct the original array from the given sums\n- Handle edge cases such as large integer values\n- Ensure the output format is clear and concise\n- Optimize for both time and space complexity\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these insights, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Restore original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure correct output format\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the fact that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. By using these properties, we can deduce the original array a by simple arithmetic operations. This approach is efficient and works well within the constraints provided.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output is correctly formatted\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these properties, we can efficiently deduce the original array a.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is consistent and correct.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values without performance degradation\n- Maintain correct output format for easy verification\n- Optimize computational complexity\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting appropriate elements from b.\n", "requirement analysis:\nThe problem requires restoring an array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The key is to identify the smallest, second smallest, and largest sums in the list to reconstruct the original array.\nrequirement pool:\n- Efficiently process up to 5000 test cases\n- Correctly identify and reconstruct the original array a\n- Handle edge cases such as large integer values\n- Ensure the solution is easy to understand and maintain\n- Optimize for performance without sacrificing clarity\nWe will leverage the fact that the smallest element in the sorted array b is one of the original elements of array a. The second smallest element in b is another element of a, and the largest element in b is the sum of all three elements of a. By using these observations, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct and prompt output.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is robust against edge cases.\n- Provide clear documentation and comments in the code.\n- Implement additional test cases to verify the solution.\nWe will solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b, the smallest element is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. We can deduce a_3 by subtracting a_1 and a_2 from the largest element in b. This approach is efficient and handles the constraints well.\n"], "scores": [], "pass_results": [false, false, true, false, false, false, true, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 37, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 51}
