{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a made up of 3 positive numbers. He wrote out the sums of all non-empty subsequences of this array, arranged them in non-descending order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b, which consists of the elements {1, 3, 4, 4, 5, 7, 8}. He created the array b that contains all the sums of possible subsequences.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Assist him in retrieving the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a made up of 3 positive numbers. He wrote out the sums of all non-empty subsequences of this array, arranged them in non-descending order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b, which consists of the elements {1, 3, 4, 4, 5, 7, 8}. He created the array b that contains all the sums of possible subsequences.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Assist him in retrieving the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the sorted array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        n = int((len(b) - 1) ** 0.5)  # Calculate the size of the original array 'a'\n        b.sort()  # Ensure b is sorted\n        a = []\n        \n        # The smallest element in b is one of the elements of a\n        a.append(b[0])\n        \n        # Remove the smallest element from b\n        b.remove(b[0])\n        \n        # Reconstruct the array 'a'\n        for _ in range(1, n):\n            # The next smallest element in b is the next element of a\n            next_element = b[0]\n            a.append(next_element)\n            \n            # Remove all occurrences of the next_element from b\n            # which are sums involving the next_element\n            for i in range(len(a) - 1):\n                b.remove(a[i] + next_element)\n            b.remove(next_element)\n        \n        results.append(a)\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    results = reconstruct_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the given test cases.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is a1\n        a1 = case[0]\n        # The second smallest element in b is a2\n        a2 = case[1]\n        # The largest element in b is the sum of a1, a2, and a3\n        a3 = case[-1] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    results = reconstruct_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef retrieve_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Retrieve the original array of three integers from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing four integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the original three integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array to find the smallest three numbers and the largest number\n        sorted_case = sorted(case)\n        # The original numbers are the smallest three numbers\n        a1, a2, a3 = sorted_case[0], sorted_case[1], sorted_case[2]\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    number_of_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(number_of_test_cases)]\n    \n    # Process the test cases\n    results = retrieve_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef retrieve_original_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in 'b' are the individual elements of 'a'\n        a1, a2, a3 = b[0], b[1], b[2]\n        # The largest number in 'b' is the sum of all three elements of 'a'\n        sum_a = b[-1]\n        # Calculate the third element using the sum\n        a3 = sum_a - a1 - a2\n        # Append the reconstructed array 'a' to results\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Retrieve the original arrays\n    result = retrieve_original_array(t, test_cases)\n    \n    # Output the result for each test case\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef retrieve_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Retrieve the original array from the given test cases.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: List of tuples, each representing the original array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array to easily find the smallest and largest elements\n        case.sort()\n        # The smallest element is a1, the second smallest is a2, and the largest is a1 + a2 + a3\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Process the test cases\n    results = retrieve_original_array(n, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef retrieve_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the given properties of the sorted array 'b'.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        n = int((len(b) - 1) ** 0.5)  # Calculate the size of the original array 'a'\n        smallest = b[0]  # The smallest element in 'b' is the smallest element in 'a'\n        largest = b[-1]  # The largest element in 'b' is the sum of all elements in 'a'\n        second_largest = b[-2]  # The second largest element in 'b' is the sum of the two largest elements in 'a'\n        \n        # Calculate the sum of all elements in 'a'\n        sum_a = largest\n        \n        # Calculate the sum of the two largest elements in 'a'\n        sum_two_largest = second_largest\n        \n        # Calculate the largest element in 'a'\n        largest_a = sum_a - sum_two_largest\n        \n        # Calculate the second largest element in 'a'\n        second_largest_a = sum_two_largest - largest_a\n        \n        # Initialize the original array 'a' with the smallest, second largest, and largest elements\n        a = [smallest, second_largest_a, largest_a]\n        \n        # Calculate the remaining elements of 'a'\n        remaining_sum = sum_a - sum(a)\n        remaining_elements = n - len(a)\n        \n        # Distribute the remaining sum equally among the remaining elements\n        if remaining_elements > 0:\n            remaining_value = remaining_sum // remaining_elements\n            a.extend([remaining_value] * remaining_elements)\n        \n        results.append(a)\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split('\\n')\nt = int(data[0])\ntest_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n\n# Output interface\nresults = retrieve_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef retrieve_original_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 4 integers.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array to find the smallest three numbers and the largest number\n        case.sort()\n        # The original array 'a' can be reconstructed as follows:\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[3] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process each test case, and output the results.\"\"\"\n    # Read input from standard input\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    \n    # Retrieve the original arrays for each test case\n    result = retrieve_original_array(t, test_cases)\n    \n    # Output the result for each test case\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef retrieve_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Retrieve the original array a from the given sorted array b for each test case.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array b.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The original array a can be deduced as follows:\n        # a1 is the smallest element in b\n        # a2 is the second smallest element in b\n        # a3 is the largest element in b minus the sum of a1 and a2\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    results = retrieve_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the sorted array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list 'b'.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the case to ensure it is in the correct order\n        case.sort()\n        # The smallest two elements are part of the original array 'a'\n        a1 = case[0]\n        a2 = case[1]\n        # The largest element is the sum of all three elements of 'a'\n        sum_a = case[-1]\n        # Calculate the third element of 'a'\n        a3 = sum_a - a1 - a2\n        # Append the reconstructed array to results\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the result from the reconstruct_array function\n    result = reconstruct_array(t, test_cases)\n    \n    # Output the results\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef retrieve_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Retrieve the original array from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers.\n\n    Returns:\n        List[List[int]]: A list of original arrays deduced from the test cases.\n    \"\"\"\n    original_arrays = []\n    for case in test_cases:\n        # Sort the array to ensure the smallest three numbers are the individual elements\n        # and the largest number is the sum of these three.\n        case.sort()\n        # Deduce the original array a from sorted array b\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[-1] - a1 - a2\n        original_arrays.append([a1, a2, a3])\n    return original_arrays\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read input from standard input\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n\n    # Retrieve the original arrays\n    results = retrieve_original_array(test_cases)\n\n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing an array of three positive integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Ensure the solution is optimized for large inputs and multiple test cases.\n- Validate the input to ensure it meets the problem constraints.\n- Format the output correctly for each test case.\n- Handle edge cases where the input values are at their minimum or maximum.\nWe will use a simple mathematical approach to reconstruct the array 'a' from the sorted array 'b'. Since 'b' contains all possible sums of non-empty subsequences of 'a', the smallest element in 'b' is one of the elements of 'a'. The largest element in 'b' is the sum of all elements of 'a'. By using these properties, we can deduce the values of 'a'.\n", "requirement analysis:\nThe problem requires reconstructing an array of three positive integers from the sums of all non-empty subsequences. The constraints ensure that the input is valid and there is at least one solution. The solution must handle multiple test cases efficiently and produce the correct output format.\nrequirement pool:\n- Implement the main logic to reconstruct array a from array b\n- Ensure the solution handles multiple test cases efficiently\n- Optimize the solution for large input values\n- Verify the solution against provided examples\n- Handle edge cases and ensure robustness\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the elements of array a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the three elements of a. Specifically, a1 is the smallest element in b, a2 is the second smallest element in b, and a3 can be found by subtracting a1 and a2 from the largest element in b.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of all its non-empty subsequences. The key observation is that the smallest three numbers in the sorted array b are the individual elements of a, and the largest number is the sum of all three elements.\nrequirement pool:\n- Implement the main logic to extract array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large values of b_i.\n- Validate the input format and constraints before processing.\n- Provide detailed comments and documentation for the code.\nWe will leverage the observation that the smallest three numbers in the sorted array b are the individual elements of a, and the largest number is the sum of all three elements. This allows us to directly extract the elements of a from b.\n", "requirement analysis:\nThe problem requires reconstructing the original array of three numbers from the given sorted array of sums of all non-empty subsequences. The key observation is that the smallest three numbers in the sorted array b are the individual elements of array a, and the largest number is the sum of all three elements of a.\nrequirement pool:\n- Implement the function to extract array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large values of b_i.\n- Write clear and maintainable code.\n- Consider edge cases and validate the input constraints.\nWe will use a simple approach to reconstruct the original array 'a' from the given sorted array 'b'. The key observation is that the smallest three numbers in 'b' are the individual elements of 'a', and the largest number in 'b' is the sum of all three elements of 'a'. This allows us to directly extract the elements of 'a' from 'b'.\n", "requirement analysis:\nThe problem requires reconstructing an array of three positive integers from the sums of all its non-empty subsequences. The key is to identify the smallest, second smallest, and largest elements in the sorted array b, which correspond to the individual elements and their pairwise sums.\nrequirement pool:\n- Develop a function to extract the original array a from the given array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for readability and maintainability.\n- Include edge case handling for maximum and minimum input values.\n- Document the solution with comments for better understanding.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements of array a. The second smallest element is another element of a, and the largest element in b is the sum of all three elements of a. By subtracting the smallest and second smallest elements from the largest element, we can find the third element of a. This approach is efficient and straightforward, ensuring clarity and performance.\n", "requirement analysis:\nThe task requires identifying the original array a from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and ensure accurate retrieval of the array a for each test case.\nrequirement pool:\n- Efficiently process up to 5000 test cases\n- Accurately retrieve the original array a\n- Optimize for performance and memory usage\n- Handle edge cases effectively\n- Provide clear and concise output\nWe will solve the problem by leveraging the properties of the sorted array b. Since b contains all possible sums of the non-empty subsequences of a, we can deduce that the smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these properties, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe problem requires reconstructing the original array of three numbers from the given sorted array of sums of all non-empty subsequences. The key observation is that the smallest three numbers in the sorted array b are the individual elements of array a, and the largest number is the sum of all three elements.\nrequirement pool:\n- Implement the function to extract array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large values of b_i.\n- Write clear and maintainable code.\n- Consider edge cases and validate the input constraints.\nWe will leverage the observation that the smallest three numbers in the sorted array b are the individual elements of array a, and the largest number is the sum of all three elements. This allows us to efficiently reconstruct the original array a from b by selecting the first element, the second element, and the difference between the largest element and the sum of the first two elements.\n", "requirement analysis:\nThe problem requires determining the original array of three numbers from the given sorted array of sums of all non-empty subsequences. The key is to identify the smallest, second smallest, and largest elements in the sorted array b, which correspond to the individual elements and their combinations in the original array a.\nrequirement pool:\n- Implement the main logic to extract array a from array b.\n- Optimize the solution for handling up to 5000 test cases efficiently.\n- Ensure the solution is robust against edge cases.\n- Write clear and maintainable code.\n- Provide comprehensive test coverage.\nWe will solve the problem by leveraging the properties of the sorted array b. The smallest element in b is the smallest element of a, the second smallest element in b is the second smallest element of a, and the largest element in b is the sum of all elements of a. This allows us to directly deduce the elements of a from b.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest elements in the sorted list of sums, which correspond to the individual elements and their pairwise sums.\nrequirement pool:\n- Implement the main algorithm to reconstruct array a from array b.\n- Optimize the solution for large input sizes.\n- Ensure the solution handles edge cases effectively.\n- Improve code readability and maintainability.\n- Validate the solution with extensive test cases.\nWe will use a straightforward approach to reconstruct the array 'a' from the sorted array 'b'. The smallest element in 'b' is one of the elements of 'a', the second smallest is another, and the largest element in 'b' is the sum of all three elements of 'a'. This allows us to deduce the values of 'a' efficiently.\n", "requirement analysis:\nThe problem requires determining the original array of three numbers from the given sorted array of sums of all non-empty subsequences. The key observation is that the smallest three numbers in the sorted array b are the individual elements of array a, and the largest number is the sum of all three elements of a.\nrequirement pool:\n- Implement the function to extract array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for readability and maintainability.\n- Include edge case handling for large numbers.\n- Provide detailed comments and documentation.\nWe will leverage the observation that the smallest three numbers in the sorted array b are the individual elements of array a, and the largest number is the sum of all three elements of a. This allows us to directly deduce the original array a from b by selecting the first element, the second element, and the last element minus the first two elements.\n"], "scores": [], "pass_results": [false, false, false, true, true, false, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 149, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 96}
