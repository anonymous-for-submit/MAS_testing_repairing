{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, then sorted them in non-decreasing order to get an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements. Make sure to account for the fact that the elements of array a are positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, then sorted them in non-decreasing order to get an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements. Make sure to account for the fact that the elements of array a are positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from its subsequence sums.\n\n    Args:\n        b (List[int]): A list of integers representing the sums of all possible\n                       subsequences of the original array of size 3.\n\n    Returns:\n        List[int]: The original array of size 3.\n    \"\"\"\n    # Sort the list to easily access the smallest and largest elements\n    b.sort()\n    \n    # The smallest element in b is a_1\n    a_1 = b[0]\n    \n    # The second smallest element in b is a_2\n    a_2 = b[1]\n    \n    # The largest element in b is the sum of a_1, a_2, and a_3\n    # Therefore, a_3 can be found by subtracting a_1 and a_2 from this sum\n    a_3 = b[-1] - a_1 - a_2\n    \n    return [a_1, a_2, a_3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted array of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        # The smallest element in the sorted list is the smallest element in the original array\n        a1 = case[0]\n        # The largest element in the sorted list is the sum of all elements in the original array\n        a1_a2_a3 = case[-1]\n        # The second largest element in the sorted list is the sum of the two largest elements in the original array\n        a2_a3 = case[-2]\n        \n        # Calculate the elements of the original array\n        a3 = a1_a2_a3 - a2_a3\n        a2 = a2_a3 - a3\n        # a1 is already known as the smallest element\n        a = [a1, a2, a3]\n        \n        results.append(a)\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted array b for each test case.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array b.\n\n    Returns:\n        List[List[int]]: A list of original arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        n = len(b) - 1  # Since b contains n+1 elements\n        smallest = b[0]\n        largest = b[-1]\n        \n        # Deduce the original array a\n        a = []\n        sum_a = 0\n        for i in range(n):\n            if sum_a + b[i] <= largest:\n                a.append(b[i])\n                sum_a += b[i]\n        \n        results.append(a)\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Output interface\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array of three distinct positive integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of sums of all non-empty subsequences of the original array.\n\n    Returns:\n        List[int]: The original array of three distinct positive integers.\n    \"\"\"\n    # The smallest three numbers in the sorted list are the individual elements of the original array.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[2]\n    \n    # The largest number is the sum of all three elements.\n    sum_all = b[-1]\n    \n    # Deduce the original array elements\n    a = [a1, a2, a3]\n    \n    # Check if the sum of the three smallest numbers equals the largest number\n    if a1 + a2 + a3 == sum_all:\n        return a\n    else:\n        # If not, adjust the elements based on the given sorted list\n        # Since a1, a2, a3 are distinct, we can deduce the correct elements\n        # by checking the sums in the list\n        a = [a1, a2, sum_all - a1 - a2]\n        return a\n\ndef main():\n    \"\"\"Main function to read input, process each test case, and print the results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(result)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original three-element array from its sorted subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the sorted list of subsequences.\n\n    Returns:\n        List[List[int]]: List of restored three-element arrays for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        a_sum = b[-1]\n        # The second largest element in b is the sum of the two largest elements in a\n        a2_plus_a3 = b[-2]\n        \n        # Deduce the elements of a\n        a2 = a2_plus_a3 - a1\n        a3 = a_sum - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get results from restore_array function\n    results = restore_array(t, test_cases)\n    \n    # Output results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restore the original array from the given sorted array.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing a sorted array.\n\n    Returns:\n        list[tuple[int, int, int]]: List of tuples representing the original array for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted array is the smallest element of the original array.\n        a1 = case[0]\n        # The largest element in the sorted array is the sum of all elements in the original array.\n        sum_all = case[-1]\n        # The second largest element in the sorted array is the sum of the two largest elements in the original array.\n        sum_two_largest = case[-2]\n        \n        # Deduce the original array elements\n        a2 = sum_two_largest - a1\n        a3 = sum_all - a1 - a2\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from its subsequence sums.\n\n    Args:\n        b (List[int]): A list of integers representing the sums of all possible\n                       non-empty subsequences of the original array.\n\n    Returns:\n        List[int]: The original array.\n    \"\"\"\n    # Sort the list of sums\n    b.sort()\n    \n    # The smallest element in b is the smallest element of the original array\n    smallest_element = b[0]\n    \n    # The largest element in b is the sum of all elements of the original array\n    sum_of_all_elements = b[-1]\n    \n    # The second largest element in b is the sum of the two largest elements of the original array\n    sum_of_two_largest_elements = b[-2]\n    \n    # Deduce the largest element of the original array\n    largest_element = sum_of_all_elements - sum_of_two_largest_elements\n    \n    # Deduce the second largest element of the original array\n    second_largest_element = sum_of_two_largest_elements - largest_element\n    \n    # The original array is composed of the smallest, second largest, and largest elements\n    original_array = [smallest_element, second_largest_element, largest_element]\n    \n    return original_array\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(' '.join(map(str, result)))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three distinct positive integers from the sorted list of all non-empty subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of subsequence sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted list is the smallest element of the original array\n        a1 = case[0]\n        # The largest element in the sorted list is the sum of all elements of the original array\n        a1_a2_a3 = case[-1]\n        # The second largest element in the sorted list is the sum of the two largest elements of the original array\n        a2_a3 = case[-2]\n        \n        # Calculate the second element of the original array\n        a2 = a2_a3 - a1\n        # Calculate the third element of the original array\n        a3 = a1_a2_a3 - a2_a3\n        \n        # Append the restored array to the results\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Reconstructs the original array 'a' from the sorted array 'b'.\n\n    Args:\n        b: A list of integers representing all possible sums of non-empty subsequences of 'a'.\n\n    Returns:\n        A tuple containing the three integers of the original array 'a'.\n    \"\"\"\n    # Sort the array 'b' to ensure the smallest elements are the individual elements of 'a'\n    b.sort()\n    \n    # The smallest three elements in 'b' are the individual elements of 'a'\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[2]\n    \n    # The largest element in 'b' is the sum of all three elements of 'a'\n    total_sum = b[-1]\n    \n    # Verify the sum to ensure correctness\n    assert total_sum == a1 + a2 + a3, \"The sum of elements does not match the largest element in 'b'.\"\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_array_from_sums(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Restore the original array from the given subsequence sums.\n\n    Args:\n        b (list[int]): A list of integers representing the sums of subsequences.\n\n    Returns:\n        tuple[int, int, int]: A tuple representing the original array.\n    \"\"\"\n    # Sort the list to easily identify the smallest and largest sums\n    b.sort()\n    \n    # The smallest three numbers in the sorted list are the individual elements\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[2]\n    \n    # The largest number is the sum of all three elements\n    total_sum = b[-1]\n    \n    # Calculate the third element using the total sum\n    a3 = total_sum - a1 - a2\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    # First line contains the number of test cases\n    t = int(data[0])\n    results = []\n    \n    # Process each test case\n    for i in range(1, t + 1):\n        b = list(map(int, data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(result)\n    \n    # Output results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three distinct positive integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and prompt output.\nrequirement pool:\n- Efficiently compute the original array from the subsequence sums.\n- Ensure the solution is optimized for large input values.\n- Provide clear and concise output for each test case.\n- Handle edge cases where the input values are at their maximum constraints.\n- Allow flexibility in output format if multiple solutions exist.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of a, and the largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a. Specifically, the three elements of a can be found as follows: a_1 is the smallest element in b, a_2 is the second smallest element in b, and a_3 can be found by subtracting a_1 and a_2 from the largest element in b.\n", "requirement analysis:\nThe task requires restoring an array of three distinct positive integers from a sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output for each test case.\nrequirement pool:\n- Restore the original array a from the given array b.\n- Handle large integer values efficiently.\n- Ensure the solution works for all edge cases.\n- Optimize for performance with multiple test cases.\n- Provide clear and concise output.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the elements of a.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct positive integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution works with large integer values.\n- Provide clear and correctly formatted output.\n- Optimize for performance and memory usage.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting the appropriate elements from b.\n", "requirement analysis:\nThe task is to deduce the original array of three distinct positive integers from the given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct and formatted output for each test case.\nrequirement pool:\n- Implement the main logic to deduce the original array from the given sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Format the output correctly for each test case.\n- Optimize the solution for performance.\n- Provide clear documentation and comments in the code.\nWe will implement a function that takes the sorted list of sums of all non-empty subsequences and deduces the original array of three distinct positive integers. The key observation is that the smallest three numbers in the sorted list are the individual elements of the original array. The largest number is the sum of all three elements. Using these observations, we can efficiently restore the original array.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct positive integers from the sorted sums of all its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values.\nrequirement pool:\n- Implement the main logic to reconstruct the array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Provide clear documentation and comments in the code.\n- Include additional test cases to verify edge cases.\nWe will leverage the fact that the array b is the sorted list of all non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the elements of a.\n", "requirement analysis:\nThe task is to reconstruct the original array of three distinct positive integers from the given sorted array of sums of all non-empty subsequences. The solution must handle multiple test cases efficiently and adhere to the constraints provided.\nrequirement pool:\n- The main code should efficiently reconstruct the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases within the time limits.\n- The solution should be robust against edge cases, such as large integer values.\n- The output format must strictly follow the specified requirements.\n- Consider optimizing for memory usage if necessary.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. The second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a by simple arithmetic operations.\n", "requirement analysis:\nThe task is to deduce the original array of three distinct positive integers from the sorted list of their subsequence sums. The constraints ensure that a valid solution always exists, and the solution must be efficient enough to handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main logic to deduce the original array from subsequence sums.\n- Ensure the solution is efficient and handles the maximum constraints.\n- Provide clear and concise output for each test case.\n- Optimize the solution for readability and maintainability.\n- Consider edge cases and validate the input constraints.\nWe will leverage the fact that the smallest element in the sorted list of sums, b, is the smallest element of the original array a. The largest element in b is the sum of all elements of a. The second largest element in b is the sum of the two largest elements of a. Using these observations, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct positive integers from the sorted sums of all its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers, and produce the original array for each test case. The constraints ensure that a valid solution always exists.\nrequirement pool:\n- Implement the main logic to reconstruct the array a from the given array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Validate the input to ensure it meets the problem constraints.\n- Format the output correctly for each test case.\n- Optimize the solution for edge cases and large numbers.\nWe will leverage the fact that the array b is the sorted list of all non-empty subsequence sums of the array a. Since a consists of three distinct positive integers, the smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these observations, we can reconstruct a by selecting the smallest element, the second smallest element, and the difference between the largest element and the second largest element in b.\n", "requirement analysis:\nThe task requires reconstructing an original array of three distinct positive integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle up to 5000 test cases with large integer values\n- Ensure output is correctly formatted for each test case\n- Optimize for both speed and simplicity\n- Provide clear documentation and comments in the code\nWe will use a simple mathematical approach to reconstruct the original array 'a' from the sorted array 'b'. Since 'b' contains all possible sums of non-empty subsequences of 'a', the smallest three elements in 'b' are the individual elements of 'a'. The largest element in 'b' is the sum of all three elements of 'a'. By using these properties, we can efficiently determine the original array 'a'.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct positive integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be correctly formatted for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution works with large integer values.\n- Provide correctly formatted output for each test case.\n- Optimize for both speed and memory usage.\nWe will use a straightforward approach to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of array a. The largest number in b is the sum of all three elements of a. By using these observations, we can efficiently deduce the original array a for each test case.\n"], "scores": [], "pass_results": [true, false, false, false, true, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 209, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 121}
