{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\ndef restore_original_array(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Restore the original array of three distinct integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        b (list[int]): A sorted list of integers representing the sums of non-empty subsequences.\n\n    Returns:\n        tuple[int, int, int]: A tuple containing the three distinct integers of the original array.\n    \"\"\"\n    # The smallest three numbers in the sorted array are the individual elements of the original array.\n    a1 = b[0]\n    a2 = b[1]\n    \n    # The largest number is the sum of all three elements.\n    sum_all = b[-1]\n    \n    # Calculate the third element using the sum of all three elements.\n    a3 = sum_all - a1 - a2\n    \n    # Return the original array elements.\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_original_array(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A sorted list of integers representing the sums of all \n                       possible subsequences of the original array.\n\n    Returns:\n        List[int]: The original array of integers.\n    \"\"\"\n    # The smallest element in b is one of the original elements\n    a1 = b[0]\n    # The largest element in b is the sum of all three original elements\n    sum_all = b[-1]\n    # The second largest element in b is the sum of two of the original elements\n    sum_two = b[-2]\n    \n    # Calculate the other two elements\n    a2 = sum_two - a1\n    a3 = sum_all - sum_two\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    \n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Reconstructs the original array from the given subsequence sums.\n\n    Args:\n        b: A list of integers representing the sums of subsequences.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # Sort the list to easily access the smallest and largest elements\n    b.sort()\n    \n    # The smallest three numbers are the individual elements of the original array\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[2]\n    \n    # The largest number is the sum of all three elements\n    # We can verify this by checking if a1 + a2 + a3 equals the largest element\n    assert a1 + a2 + a3 == b[-1], \"The largest element should be the sum of all three elements.\"\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array a from the sorted array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array b.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays a for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Since b is sorted, the smallest element is one of the elements of a\n        # and the largest element is the sum of all three elements of a.\n        # b = [a1, a2, a3, a1+a2, a1+a3, a2+a3, a1+a2+a3]\n        # Sorted b: [a1, a2, a3, a1+a2, a1+a3, a2+a3, a1+a2+a3]\n        \n        # The original array a can be deduced as follows:\n        a1 = case[0]  # The smallest element\n        a2 = case[1]  # The second smallest element\n        a3 = case[6] - a1 - a2  # The largest element minus a1 and a2 gives a3\n        \n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    result = reconstruct_array(t, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport sys\nimport typing\n\ndef restore_array(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[typing.Tuple[int, int, int]]:\n    \"\"\"Restore the original array from the given sums of subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing sorted sums of subsequences.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of tuples representing the restored arrays.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted list is the smallest element of the original array\n        a1 = case[0]\n        # The second smallest element in the sorted list is the second element of the original array\n        a2 = case[1]\n        # The largest element in the sorted list is the sum of all elements of the original array\n        sum_all = case[-1]\n        # Deduce the third element of the original array\n        a3 = sum_all - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the sorted array 'b'.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list 'b'.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three elements in 'b' are the elements of 'a'\n        # The largest element in 'b' is the sum of all elements of 'a'\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[2]\n        # The sum of a1, a2, a3 is b[-1], so we can verify by a1 + a2 + a3 = b[-1]\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Process the test cases\n    results = reconstruct_array(t, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the given sorted array of sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing all possible sums of the non-empty\n                       subsequences of a three-element array.\n\n    Returns:\n        List[int]: The original three-element array.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    a1_a2_a3 = b[-1]\n    # The second largest element in b is the sum of the two largest elements in a\n    a2_a3 = b[-2]\n    \n    # Calculate the individual elements of a\n    a2 = a2_a3 - a1\n    a3 = a1_a2_a3 - a2_a3\n    \n    # Return the original array\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored original arrays.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array to easily find the smallest, second smallest, and largest numbers\n        b.sort()\n        # The original array a can be deduced as follows:\n        # a1 = b[0], a2 = b[1], a3 = b[6] - (b[0] + b[1])\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - (a1 + a2)\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original three-element array from the sorted array of all possible sums of its non-empty subsequences.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of integers.\n\n    Returns:\n        List[List[int]]: A list of original three-element arrays for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        a1_a2_a3 = b[-1]\n        # The second largest element in b is the sum of the two largest elements in a\n        a2_a3 = b[-2]\n        \n        # Deduce the original elements\n        a2 = a2_a3 - a1\n        a3 = a1_a2_a3 - a2_a3\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Output interface\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given test cases.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list 'b'.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        # The smallest element in b is the smallest element in a\n        smallest = case[0]\n        # The largest element in b is the sum of all elements in a\n        largest = case[-1]\n        \n        # We need to find the three distinct elements of a\n        # Since b is sorted, the second smallest element in b is the second smallest element in a\n        second_smallest = case[1]\n        \n        # Calculate the third element of a\n        # Since a1 + a2 + a3 = largest, we can find a3\n        third_element = largest - smallest - second_smallest\n        \n        # Append the result for this test case\n        results.append([smallest, second_smallest, third_element])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array of three distinct integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and deduces the original array of three distinct integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. This approach is efficient and straightforward, leveraging the properties of subsequences.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide clear and concise output for each test case.\n- Consider edge cases and ensure robustness.\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b of subsequence sums, the smallest element in b is one of the original elements. The largest element in b is the sum of all three original elements. By subtracting the smallest element from the largest, we can find the sum of the other two elements. Using these insights, we can efficiently deduce the original array a.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output for each case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution handles large input sizes efficiently\n- Provide clear and correctly formatted output\n- Optimize for speed and performance\n- Handle edge cases and ensure accuracy\nWe will leverage the fact that the largest number in the sorted array b is the sum of all three elements of array a. The smallest three numbers in b are the individual elements of a. By using these properties, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Provide detailed comments and documentation for the code.\n- Include test cases to validate the solution.\nWe will use the properties of the sorted array b to reconstruct the original array a. Since a consists of three distinct integers, the smallest element in b is one of the elements of a, and the largest element in b is the sum of all three elements of a. By analyzing the sorted array b, we can deduce the values of a by considering the sums of pairs and individual elements.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest elements from the sorted list of sums, which correspond to the individual elements and their pairwise sums.\nrequirement pool:\n- Implement the main logic to deduce array a from array b.\n- Optimize the solution to handle the upper limits of input constraints efficiently.\n- Ensure the solution is robust against edge cases and unusual inputs.\n- Provide clear documentation and comments within the code.\n- Implement additional test cases to verify the solution's correctness.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of array a. The smallest element in b is the smallest element of a, the second smallest is the second element of a, and the largest element in b is the sum of all elements of a. By subtracting the smallest and second smallest elements from the largest, we can deduce the third element of a.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b\n- Ensure the solution handles the maximum constraints efficiently\n- Optimize the solution for speed and memory usage\n- Validate the input format and handle edge cases\n- Provide detailed comments and documentation for the code\nWe will implement a function that reconstructs the array 'a' from the given sorted array 'b'. The key observation is that the smallest three elements in 'b' are the individual elements of 'a', and the largest element in 'b' is the sum of all three elements of 'a'. This allows us to deduce the values of 'a' directly from 'b'.\n", "requirement analysis:\nThe problem requires restoring an original array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output for each test case.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution is robust against edge cases.\n- Provide clear and correct output format.\n- Optimize for large integer values.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe problem requires restoring an original array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Restore the original array from subsequence sums.\n- Handle multiple test cases efficiently.\n- Ensure output is correctly formatted.\n- Optimize for large integer values.\n- Provide clear documentation and examples.\nWe will solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b of 7 integers, the smallest three numbers in b are the individual elements of a, and the largest number in b is the sum of all three elements of a. This allows us to deduce the original array a by selecting the smallest, second smallest, and the largest number in b. This approach is efficient and works within the constraints provided.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure correct output format for each test case\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these properties, we can efficiently deduce the original array a.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three distinct integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Provide detailed comments and documentation for the code.\n- Include additional test cases to verify edge cases.\nWe will solve the problem by leveraging the properties of the sorted array b. Since b contains all possible sums of non-empty subsequences of a, we can deduce that the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements of a. By analyzing the sorted array b, we can identify the three distinct elements of a.\n"], "scores": [], "pass_results": [false, true, true, false, false, true, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 67, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 51}
