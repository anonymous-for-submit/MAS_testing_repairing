{"name": "1623_A. Robot Cleaner", "description": "A robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom, and columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n", "tags": ["brute force", "implementation", "math"], "difficulty": 7, "id": 1623, "sample_io": [{"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}], "test_list": [{"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 2 1\n17 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n15\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n15\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n27\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n3\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n9\n3\n1\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 4 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n9\n1\n1\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 2\n6 16 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n8\n3\n0\n"]}, {"input": "5\n6 10 6 1 2 8\n10 10 9 9 2 1\n14 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["4\n9\n9\n3\n0\n"]}, {"input": "5\n18 10 1 1 2 8\n10 10 9 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n10\n9\n3\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n8 8 5 8 2 1\n6 9 4 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n7\n1\n1\n"]}, {"input": "5\n7 10 1 1 2 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n9\n9\n3\n0\n"]}, {"input": "5\n7 10 1 1 4 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["3\n9\n9\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n7 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n7\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 5 6 3 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n26\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 12 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n21\n3\n0\n"]}, {"input": "5\n10 10 2 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 2\n6 16 2 2 5 8\n2 2 1 1 2 1\n", "output": ["0\n10\n8\n3\n0\n"]}, {"input": "5\n18 10 6 2 2 8\n10 10 9 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["6\n10\n9\n3\n0\n"]}, {"input": "5\n6 10 6 1 2 8\n10 10 5 9 2 1\n14 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["4\n10\n9\n3\n0\n"]}, {"input": "5\n7 10 1 1 4 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 2 2 1 8\n2 1 1 1 2 1\n", "output": ["3\n9\n9\n6\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n7 8 5 6 3 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n6\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n7\n15\n3\n0\n"]}, {"input": "5\n10 10 6 2 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n8 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["6\n10\n9\n3\n1\n"]}, {"input": "5\n7 10 1 1 4 8\n10 10 9 9 1 1\n11 8 9 6 1 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["3\n10\n9\n3\n0\n"]}, {"input": "5\n25 10 5 1 2 8\n10 10 9 9 2 1\n17 11 5 6 2 1\n6 9 3 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n15\n2\n1\n"]}, {"input": "5\n14 10 5 1 4 8\n10 10 9 5 4 1\n17 11 5 6 2 1\n6 9 2 2 5 4\n2 2 1 1 2 1\n", "output": ["7\n7\n15\n2\n0\n"]}, {"input": "5\n18 10 1 2 2 8\n10 10 9 9 1 1\n25 8 7 6 2 1\n6 9 3 1 5 8\n2 1 2 1 2 1\n", "output": ["1\n10\n9\n2\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 9 3 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n2\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 2 1\n17 8 5 6 2 1\n6 9 2 2 2 8\n2 2 1 1 2 1\n", "output": ["7\n9\n9\n0\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 8 5 1 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n0\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 3\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["2\n9\n27\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 6 8\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n4\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 4 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n7\n27\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 6 2 2\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n26\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n14 8 5 6 2 1\n6 9 1 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n9\n4\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 15 5 6 2 1\n6 9 4 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n11\n1\n1\n"]}, {"input": "5\n7 10 1 1 2 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 1 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n9\n9\n4\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 12 2 1\n6 9 2 2 3 8\n2 2 1 2 2 2\n", "output": ["7\n9\n21\n1\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 2 2 1\n8 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n11\n3\n1\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 16 2 2 2 8\n2 2 2 1 2 1\n", "output": ["7\n10\n9\n0\n0\n"]}, {"input": "5\n18 17 11 1 2 8\n10 10 9 9 2 1\n17 17 5 8 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n25\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n6 8 5 6 2 1\n6 9 4 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n5\n1\n1\n"]}, {"input": "5\n25 10 2 1 2 8\n10 10 9 9 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["0\n9\n15\n3\n1\n"]}, {"input": "5\n18 10 1 2 2 8\n10 10 9 9 1 1\n25 13 7 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n10\n19\n3\n0\n"]}, {"input": "5\n14 10 1 1 4 8\n10 10 9 5 4 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["3\n7\n15\n3\n0\n"]}, {"input": "5\n18 10 1 2 2 8\n10 10 9 9 1 1\n25 8 7 6 2 1\n6 9 6 1 5 8\n2 1 2 1 2 1\n", "output": ["1\n10\n9\n1\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n17 8 2 6 2 1\n6 9 3 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n0\n2\n0\n"]}, {"input": "5\n14 10 6 1 2 3\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 1 8\n2 2 1 2 2 2\n", "output": ["2\n9\n27\n6\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 8 1 6 2 1\n6 16 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n1\n3\n0\n"]}, {"input": "5\n6 10 6 1 4 8\n10 10 9 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["2\n10\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n12 10 9 5 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n13\n15\n3\n0\n"]}, {"input": "5\n14 17 11 1 2 8\n10 10 9 9 2 1\n17 28 3 6 2 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n29\n3\n0\n"]}, {"input": "5\n18 17 11 1 2 11\n10 10 9 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n9\n27\n3\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 2 2 3 8\n2 1 1 1 2 1\n", "output": ["1\n9\n9\n1\n0\n"]}, {"input": "5\n7 10 2 1 2 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 1 2 5 8\n2 1 1 1 2 1\n", "output": ["0\n9\n9\n4\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 5 6 2 1\n6 9 2 2 5 0\n2 2 1 2 2 1\n", "output": ["7\n7\n15\n3\n1\n"]}, {"input": "5\n8 10 5 1 2 8\n10 10 9 9 2 1\n17 16 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n25\n3\n1\n"]}, {"input": "5\n7 10 1 1 2 8\n10 10 9 9 1 1\n11 8 9 7 1 1\n6 9 2 2 5 8\n2 1 2 1 2 1\n", "output": ["1\n10\n8\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 7 5 4 1\n17 11 5 6 2 1\n6 9 4 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n15\n1\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 9 5 1 2 1\n6 9 2 2 5 8\n2 2 1 1 2 0\n", "output": ["7\n9\n0\n3\n1\n"]}, {"input": "5\n6 10 6 1 4 8\n10 10 10 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["2\n9\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n13 10 9 5 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n14\n15\n3\n0\n"]}, {"input": "5\n14 17 11 1 2 8\n14 10 9 9 2 1\n17 28 3 6 2 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["7\n10\n29\n3\n0\n"]}, {"input": "5\n18 17 11 1 2 11\n10 10 5 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n10\n27\n3\n0\n"]}, {"input": "5\n18 10 1 1 2 8\n10 19 9 9 1 1\n25 8 5 1 1 1\n6 9 2 2 5 3\n2 1 1 1 2 1\n", "output": ["1\n10\n0\n1\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n10 10 9 9 2 1\n5 8 5 6 1 1\n6 9 2 2 3 8\n2 1 1 1 2 1\n", "output": ["1\n9\n4\n1\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 1 6 2 1\n6 9 2 2 5 0\n2 2 1 2 2 1\n", "output": ["7\n7\n1\n3\n1\n"]}, {"input": "5\n14 16 6 1 2 8\n15 10 9 9 2 1\n17 17 5 6 3 1\n6 9 2 3 5 8\n2 2 1 2 2 2\n", "output": ["7\n10\n26\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n6 8 5 6 2 2\n6 9 4 2 5 8\n2 2 1 1 1 2\n", "output": ["7\n10\n5\n1\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 9 9 9 5 1\n17 11 5 6 4 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n6\n15\n3\n0\n"]}, {"input": "5\n18 10 1 2 2 7\n10 10 9 9 1 1\n25 13 7 6 2 2\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n10\n18\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 21 2 3 3 1\n5 9 2 2 5 8\n2 2 0 2 2 2\n", "output": ["7\n9\n1\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 1\n10 10 9 9 2 1\n17 9 5 1 2 1\n6 9 2 2 5 8\n2 2 1 1 2 0\n", "output": ["0\n9\n0\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 4 1\n17 17 5 5 2 1\n6 15 2 2 5 8\n3 2 1 2 2 1\n", "output": ["7\n7\n27\n3\n1\n"]}, {"input": "5\n14 17 11 1 2 8\n14 10 9 9 2 1\n17 28 3 1 2 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["7\n10\n0\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 1 6 2 1\n6 9 2 2 6 0\n2 2 1 2 2 1\n", "output": ["7\n7\n1\n4\n1\n"]}, {"input": "5\n18 8 6 2 2 8\n10 10 6 9 1 1\n25 8 5 6 2 2\n6 9 2 2 5 8\n2 1 0 1 2 1\n", "output": ["6\n10\n8\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 9 9 9 5 1\n17 11 5 6 4 2\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n6\n14\n3\n0\n"]}, {"input": "5\n18 10 1 3 2 8\n10 10 9 9 1 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 2 1 2 1\n", "output": ["1\n10\n9\n7\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 2 1\n25 8 5 6 1 1\n6 9 2 2 3 9\n2 1 1 1 0 1\n", "output": ["7\n9\n9\n1\n0\n"]}, {"input": "5\n18 20 11 1 2 11\n10 10 5 9 2 1\n17 17 3 6 2 2\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n10\n26\n3\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n10 10 9 9 2 1\n5 8 1 6 1 1\n6 9 2 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n9\n0\n1\n0\n"]}, {"input": "5\n9 10 6 1 2 8\n10 10 1 9 2 1\n17 21 2 3 3 1\n5 9 2 2 5 8\n2 2 0 2 2 2\n", "output": ["7\n1\n1\n3\n0\n"]}, {"input": "5\n18 10 1 3 1 8\n10 10 9 9 1 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 2 1 2 1\n", "output": ["0\n10\n9\n7\n0\n"]}, {"input": "5\n14 17 11 1 2 8\n10 10 9 9 2 1\n34 28 3 1 2 1\n6 9 4 1 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n0\n1\n0\n"]}, {"input": "5\n18 10 2 3 1 8\n10 10 9 9 1 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 0 1 2 1\n", "output": ["5\n10\n9\n7\n0\n"]}, {"input": "5\n14 17 11 1 2 8\n10 10 9 9 2 1\n34 28 3 1 2 1\n6 9 4 1 1 8\n2 2 1 2 2 2\n", "output": ["7\n9\n0\n7\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n20 10 9 9 2 1\n5 12 1 6 1 1\n6 8 4 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n10\n0\n5\n0\n"]}, {"input": "5\n7 10 1 2 1 8\n20 10 9 9 2 1\n5 12 1 6 1 1\n6 9 4 2 3 8\n3 1 1 1 2 1\n", "output": ["0\n10\n0\n5\n0\n"]}, {"input": "5\n10 10 1 2 1 8\n20 14 9 9 2 1\n5 21 1 6 1 1\n6 9 4 2 3 8\n3 1 1 1 2 1\n", "output": ["0\n18\n0\n5\n0\n"]}, {"input": "5\n10 10 1 2 1 8\n20 14 9 9 2 1\n5 21 1 6 1 1\n6 9 4 2 3 5\n3 1 1 1 2 1\n", "output": ["0\n18\n0\n3\n0\n"]}, {"input": "5\n13 10 1 2 1 8\n19 14 9 9 2 1\n5 21 1 12 1 1\n6 9 4 1 2 5\n3 1 1 1 2 1\n", "output": ["0\n18\n0\n4\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 32 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n29\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 5 2 1\n17 11 5 6 2 2\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n14\n3\n1\n"]}, {"input": "5\n6 10 6 1 2 8\n10 10 9 9 3 1\n14 8 5 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["4\n8\n9\n3\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n8 8 5 8 2 1\n6 9 4 2 1 8\n2 2 1 1 2 2\n", "output": ["7\n10\n7\n6\n1\n"]}, {"input": "5\n7 10 1 1 2 8\n10 10 9 9 1 1\n11 8 5 5 1 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n10\n10\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 12 2 1\n6 9 2 2 5 2\n2 2 1 2 2 2\n", "output": ["7\n9\n21\n0\n0\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n7 8 5 6 2 1\n8 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n10\n7\n3\n1\n"]}, {"input": "5\n6 10 6 1 2 8\n10 10 5 9 2 1\n14 8 5 6 2 1\n6 9 4 2 5 8\n2 2 1 1 2 1\n", "output": ["4\n10\n9\n1\n0\n"]}, {"input": "5\n18 10 1 1 0 8\n10 10 9 9 1 1\n25 8 5 6 1 1\n6 9 1 2 5 8\n2 1 1 1 2 1\n", "output": ["7\n10\n9\n4\n0\n"]}, {"input": "5\n14 10 6 1 2 5\n10 10 9 9 2 1\n17 17 5 3 3 1\n6 9 2 2 5 8\n2 2 0 2 2 2\n", "output": ["4\n9\n26\n3\n0\n"]}, {"input": "5\n23 10 6 2 2 8\n17 10 9 9 1 1\n25 8 5 4 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["6\n10\n11\n3\n0\n"]}, {"input": "5\n7 10 1 1 2 0\n10 10 9 9 2 1\n11 13 5 6 2 1\n6 9 2 2 5 8\n3 1 1 1 2 1\n", "output": ["1\n9\n15\n3\n0\n"]}, {"input": "5\n18 10 1 2 2 8\n9 10 9 9 1 1\n25 8 7 6 2 1\n12 9 3 1 5 8\n2 1 2 1 2 1\n", "output": ["1\n8\n9\n2\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 9 3 2 2 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n6\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 8 4 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n24\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 5 5 2 1\n6 9 2 2 2 8\n2 2 1 2 2 1\n", "output": ["7\n9\n27\n0\n1\n"]}, {"input": "5\n14 10 6 1 2 3\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 4 2 5 8\n2 2 1 2 2 2\n", "output": ["2\n9\n27\n1\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 3 1\n17 17 3 6 2 2\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n8\n26\n3\n1\n"]}, {"input": "5\n18 10 1 1 2 8\n11 19 9 9 1 1\n25 8 5 6 1 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["1\n12\n9\n3\n0\n"]}, {"input": "5\n14 16 6 1 2 15\n10 10 9 9 2 1\n17 17 5 6 3 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["14\n9\n26\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 1 12 2 1\n6 9 2 2 3 8\n2 2 1 2 2 2\n", "output": ["7\n9\n1\n1\n0\n"]}, {"input": "5\n7 10 1 1 2 0\n10 10 9 1 2 1\n11 8 5 6 2 1\n6 9 2 3 5 8\n3 1 1 1 2 1\n", "output": ["1\n0\n9\n3\n0\n"]}, {"input": "5\n18 10 6 2 2 8\n10 10 9 9 2 1\n17 8 5 6 2 1\n6 9 2 0 2 8\n2 2 1 1 2 1\n", "output": ["6\n9\n9\n0\n0\n"]}, {"input": "5\n14 10 2 1 2 3\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 1 8\n2 2 1 2 2 2\n", "output": ["0\n9\n27\n6\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 5 1 2 1\n6 9 2 2 6 8\n3 2 1 2 2 2\n", "output": ["7\n9\n0\n4\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n12 10 9 5 2 1\n17 11 5 6 2 1\n6 9 2 2 2 8\n2 2 1 2 2 2\n", "output": ["7\n13\n15\n0\n0\n"]}, {"input": "5\n18 17 11 1 2 7\n10 10 9 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["6\n9\n27\n3\n0\n"]}, {"input": "5\n18 10 1 1 2 8\n10 10 9 5 1 2\n25 8 5 6 2 1\n6 9 2 2 2 8\n2 1 1 1 2 1\n", "output": ["1\n10\n9\n0\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 2 6 2 1\n6 9 2 2 5 0\n2 2 1 1 2 1\n", "output": ["7\n7\n0\n3\n0\n"]}, {"input": "5\n23 10 6 2 3 8\n10 10 9 9 1 1\n25 8 5 5 2 1\n6 9 2 2 5 8\n2 1 1 1 0 1\n", "output": ["6\n10\n10\n3\n0\n"]}, {"input": "5\n6 10 6 1 4 8\n10 10 10 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 0\n", "output": ["2\n9\n9\n3\n1\n"]}, {"input": "5\n14 17 11 1 2 8\n14 10 9 9 2 1\n17 28 3 6 1 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["7\n10\n30\n3\n0\n"]}, {"input": "5\n18 17 11 1 2 11\n10 13 5 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n13\n27\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 2\n6 8 5 6 2 2\n6 9 4 2 5 8\n2 2 1 1 1 2\n", "output": ["7\n9\n5\n1\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n10 10 9 9 3 1\n5 8 5 6 1 1\n6 9 2 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n8\n4\n1\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 9 9 9 5 1\n17 11 5 6 4 2\n6 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n6\n14\n3\n1\n"]}, {"input": "5\n25 10 3 1 2 8\n10 10 9 9 2 2\n17 11 1 6 2 1\n6 9 2 2 5 6\n2 2 1 2 2 1\n", "output": ["7\n9\n1\n3\n1\n"]}, {"input": "5\n18 20 11 1 2 11\n10 10 5 9 2 1\n17 17 3 10 2 2\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n10\n22\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 9 9 9 5 1\n17 11 5 6 4 2\n6 9 4 2 5 6\n2 2 1 1 2 1\n", "output": ["7\n6\n14\n1\n0\n"]}, {"input": "5\n9 10 6 1 2 8\n10 10 1 9 4 1\n17 21 2 3 3 1\n5 9 2 2 5 8\n2 2 0 2 2 2\n", "output": ["7\n3\n1\n3\n0\n"]}, {"input": "5\n14 17 11 1 2 7\n10 10 9 9 2 1\n34 28 3 1 2 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["6\n9\n0\n3\n0\n"]}, {"input": "5\n18 10 1 3 1 8\n10 10 9 9 2 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 0 1 2 1\n", "output": ["0\n9\n9\n7\n0\n"]}, {"input": "5\n18 36 11 1 2 11\n10 10 5 9 2 2\n17 17 3 6 2 2\n6 9 2 2 5 8\n5 2 1 2 2 2\n", "output": ["10\n9\n26\n3\n0\n"]}, {"input": "5\n7 13 1 1 1 8\n14 10 9 4 1 1\n11 8 9 7 1 1\n6 26 2 2 5 8\n2 1 2 1 2 1\n", "output": ["0\n15\n8\n3\n0\n"]}, {"input": "5\n18 10 2 6 1 8\n10 10 9 9 1 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 0 1 2 1\n", "output": ["2\n10\n9\n7\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n20 10 9 10 2 1\n5 12 1 6 1 1\n6 9 4 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n9\n0\n5\n0\n"]}, {"input": "5\n10 10 1 2 1 8\n20 14 9 9 2 1\n5 21 1 6 1 1\n6 9 4 2 3 3\n3 1 1 1 2 1\n", "output": ["0\n18\n0\n1\n0\n"]}, {"input": "5\n13 10 1 2 1 8\n19 14 9 9 2 2\n5 21 1 12 1 1\n6 9 4 2 2 5\n3 1 1 1 2 1\n", "output": ["0\n17\n0\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 5 1 1\n17 11 5 6 2 2\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n10\n14\n3\n1\n"]}, {"input": "5\n7 10 1 1 2 8\n10 10 9 9 1 1\n11 8 5 5 1 1\n6 9 2 2 2 8\n2 1 1 1 2 1\n", "output": ["1\n10\n10\n0\n0\n"]}, {"input": "5\n18 10 6 1 2 2\n10 10 9 9 1 1\n7 8 5 6 2 1\n6 9 2 2 5 8\n2 2 0 1 2 1\n", "output": ["1\n10\n7\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 6\n10 10 9 9 2 1\n17 17 3 12 2 1\n6 9 2 2 5 2\n2 2 1 2 2 2\n", "output": ["5\n9\n21\n0\n0\n"]}, {"input": "5\n18 10 6 2 2 8\n10 10 1 9 1 1\n25 8 3 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["6\n0\n9\n3\n0\n"]}, {"input": "5\n18 17 11 1 2 3\n10 10 9 9 2 1\n17 17 5 1 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["2\n9\n0\n3\n0\n"]}, {"input": "5\n18 10 0 1 0 8\n10 10 9 9 1 1\n25 8 5 6 1 1\n6 9 1 2 5 8\n2 1 1 1 2 1\n", "output": ["0\n10\n9\n4\n0\n"]}, {"input": "5\n18 17 11 1 2 8\n10 10 9 2 2 1\n17 12 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 1 2\n", "output": ["7\n9\n17\n3\n0\n"]}, {"input": "5\n7 10 1 1 4 8\n10 10 9 9 1 1\n11 8 9 6 1 1\n6 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["3\n10\n9\n3\n1\n"]}, {"input": "5\n14 10 6 1 2 5\n10 10 9 9 2 1\n17 17 5 3 3 1\n6 9 1 2 5 8\n2 2 0 2 2 2\n", "output": ["4\n9\n26\n4\n0\n"]}, {"input": "5\n23 10 6 2 2 8\n17 10 9 9 1 1\n25 8 5 4 2 1\n6 9 2 2 5 4\n2 1 1 1 2 1\n", "output": ["6\n10\n11\n2\n0\n"]}, {"input": "5\n23 10 11 2 2 8\n17 10 2 9 1 1\n25 8 5 1 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["6\n10\n0\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 8 4 2 1\n6 9 2 2 5 8\n2 2 1 2 1 1\n", "output": ["7\n9\n24\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 17 3 5 2 1\n6 9 2 2 2 8\n2 2 1 2 2 1\n", "output": ["7\n9\n28\n0\n1\n"]}, {"input": "5\n14 10 6 1 2 6\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 4 2 5 8\n2 2 1 2 2 2\n", "output": ["5\n9\n27\n1\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 3 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n8\n27\n3\n1\n"]}, {"input": "5\n14 17 11 1 2 8\n10 10 9 9 2 2\n17 17 3 6 2 1\n6 9 2 1 5 2\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n1\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n25 6 5 6 1 2\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["7\n10\n4\n3\n0\n"]}, {"input": "5\n6 10 6 1 2 8\n10 10 9 6 2 1\n14 8 5 6 2 1\n6 9 2 2 5 8\n3 2 1 2 2 1\n", "output": ["4\n9\n9\n3\n1\n"]}, {"input": "5\n18 17 11 1 2 8\n10 10 9 9 4 1\n17 17 3 6 2 1\n6 9 2 2 4 8\n3 2 1 2 2 2\n", "output": ["7\n7\n27\n2\n0\n"]}, {"input": "5\n7 10 1 1 2 8\n19 10 9 9 2 1\n11 8 5 6 1 1\n6 9 1 2 5 8\n2 1 0 1 2 1\n", "output": ["1\n10\n9\n4\n0\n"]}, {"input": "5\n10 10 6 1 2 6\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 16 2 2 1 8\n2 2 2 1 2 1\n", "output": ["5\n10\n9\n6\n0\n"]}, {"input": "5\n14 10 3 1 4 8\n10 9 9 9 4 1\n17 19 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["1\n7\n27\n3\n0\n"]}, {"input": "5\n18 10 1 2 2 8\n12 10 9 9 1 1\n25 13 7 6 2 1\n6 9 2 2 2 8\n2 1 1 1 2 1\n", "output": ["1\n10\n19\n0\n0\n"]}, {"input": "5\n25 10 3 1 2 8\n10 15 9 9 2 1\n17 11 5 6 2 1\n6 9 3 2 4 8\n2 2 1 2 2 1\n", "output": ["7\n9\n15\n1\n1\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 14 8 6 2 2\n10 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n20\n3\n0\n"]}, {"input": "5\n14 10 2 1 2 3\n10 10 9 9 1 1\n17 17 5 6 2 1\n6 9 2 2 1 8\n2 2 1 2 2 2\n", "output": ["0\n10\n27\n6\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 5 1 2 1\n6 9 2 2 4 8\n3 2 1 2 2 2\n", "output": ["7\n9\n0\n2\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n12 10 9 10 2 1\n17 11 5 6 2 1\n6 9 2 2 2 8\n2 2 1 2 2 2\n", "output": ["7\n9\n15\n0\n0\n"]}, {"input": "5\n14 17 11 1 4 10\n10 10 9 9 2 1\n17 28 3 6 2 1\n6 9 2 1 5 8\n2 2 1 2 2 2\n", "output": ["9\n9\n29\n3\n0\n"]}, {"input": "5\n18 10 1 1 2 8\n10 19 9 9 1 1\n25 10 5 6 1 1\n6 9 2 2 5 5\n2 1 1 1 2 1\n", "output": ["1\n10\n13\n3\n0\n"]}, {"input": "5\n8 10 5 1 2 7\n10 10 9 9 2 1\n17 16 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 1 1\n", "output": ["6\n9\n25\n3\n0\n"]}, {"input": "5\n7 10 1 3 4 8\n10 10 9 9 2 1\n11 8 5 6 1 1\n6 9 2 2 1 6\n2 1 0 1 2 1\n", "output": ["3\n9\n9\n4\n0\n"]}, {"input": "5\n18 10 1 2 2 7\n10 10 9 9 1 1\n25 13 7 11 2 1\n6 9 2 2 5 8\n2 1 1 1 1 1\n", "output": ["1\n10\n14\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 10 9 9 4 1\n17 11 1 8 2 1\n6 9 3 2 5 0\n2 2 1 2 2 1\n", "output": ["7\n7\n1\n2\n1\n"]}, {"input": "5\n18 10 1 2 2 7\n10 10 9 9 1 1\n19 13 7 6 2 2\n6 9 2 2 4 8\n2 1 1 1 2 1\n", "output": ["1\n10\n18\n2\n0\n"]}, {"input": "5\n18 10 1 3 1 8\n19 10 9 9 1 1\n9 8 7 6 2 1\n6 9 6 1 5 8\n2 1 2 1 2 1\n", "output": ["0\n10\n9\n1\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n10 10 9 9 3 1\n5 8 3 6 1 1\n6 9 2 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n8\n6\n1\n0\n"]}, {"input": "5\n18 20 11 1 2 11\n10 10 5 9 2 1\n17 17 3 10 2 1\n6 9 2 2 5 8\n3 2 1 2 2 2\n", "output": ["10\n10\n23\n3\n0\n"]}, {"input": "5\n14 10 6 1 4 8\n10 9 9 9 5 1\n17 11 5 6 4 2\n6 9 3 2 5 6\n2 2 1 1 2 1\n", "output": ["7\n6\n14\n2\n0\n"]}, {"input": "5\n9 10 6 1 2 8\n10 10 1 9 4 1\n17 21 2 3 3 1\n5 9 2 2 3 8\n2 2 0 2 2 2\n", "output": ["7\n3\n1\n1\n0\n"]}, {"input": "5\n18 10 2 3 1 8\n10 10 9 9 2 1\n9 8 7 6 2 1\n10 9 6 1 5 8\n2 1 0 1 2 1\n", "output": ["5\n9\n9\n7\n0\n"]}, {"input": "5\n18 36 11 1 2 11\n10 10 5 9 2 2\n17 17 3 6 3 2\n6 9 2 2 5 8\n5 2 1 2 2 2\n", "output": ["10\n9\n0\n3\n0\n"]}, {"input": "5\n7 10 1 2 2 8\n20 10 9 9 2 2\n5 12 1 6 2 1\n6 8 2 2 3 8\n3 1 1 1 2 1\n", "output": ["1\n9\n1\n1\n0\n"]}, {"input": "5\n15 10 1 2 1 8\n19 14 9 9 2 1\n5 21 1 6 1 1\n6 9 4 3 2 5\n3 1 1 1 2 1\n", "output": ["0\n18\n0\n2\n0\n"]}, {"input": "5\n13 10 1 2 1 8\n19 14 9 9 2 3\n5 21 1 12 1 1\n6 9 4 2 2 5\n3 1 1 1 2 1\n", "output": ["0\n16\n0\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 5 1 1\n17 11 5 6 2 2\n6 9 2 2 6 8\n2 2 1 2 2 1\n", "output": ["7\n10\n14\n4\n1\n"]}, {"input": "5\n10 10 6 1 1 8\n9 10 9 9 1 1\n7 8 5 6 2 1\n8 9 2 2 5 8\n2 2 1 1 2 2\n", "output": ["7\n8\n7\n3\n1\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n17 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n9\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n3\n0\n"]}, {"input": "5\n14 10 11 1 2 8\n10 10 9 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n27\n3\n1\n"]}, {"input": "5\n10 10 6 1 2 8\n10 10 9 9 1 1\n17 8 5 6 2 1\n6 16 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 9 2 1\n14 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n", "output": ["7\n9\n9\n3\n0\n"]}, {"input": "5\n14 10 6 1 2 8\n10 10 9 5 2 1\n17 11 5 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 1\n", "output": ["7\n9\n15\n3\n1\n"]}, {"input": "5\n14 17 11 1 2 8\n10 10 9 9 2 1\n17 17 3 6 2 1\n6 9 2 2 5 8\n2 2 1 2 2 2\n", "output": ["7\n9\n27\n3\n0\n"]}, {"input": "5\n18 10 6 1 2 8\n10 10 9 9 1 1\n25 8 5 6 2 1\n6 9 2 2 5 8\n2 1 1 1 2 1\n", "output": ["7\n10\n9\n3\n0\n"]}], "task_id": "codecontest/160", "prompt": "A robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom. Columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n", "repair_prompt": ["A robot cleaner is placed on the floor of a rectangle room, surrounded by walls. The floor consists of n rows and m columns. The rows of the floor are numbered from 1 to n from top to bottom. Columns of the floor are numbered from 1 to m from left to right. The cell on the intersection of the r-th row and the c-th column is denoted as (r,c). The initial position of the robot is (r_b, c_b).\n\nIn one second, the robot moves by dr rows and dc columns, that is, after one second, the robot moves from the cell (r, c) to (r + dr, c + dc). Initially dr = 1, dc = 1. If there is a vertical wall (the left or the right walls) in the movement direction, dc is reflected before the movement, so the new value of dc is -dc. And if there is a horizontal wall (the upper or lower walls), dr is reflected before the movement, so the new value of dr is -dr.\n\nEach second (including the moment before the robot starts moving), the robot cleans every cell lying in the same row or the same column as its position. There is only one dirty cell at (r_d, c_d). The job of the robot is to clean that dirty cell.\n\n<image> Illustration for the first example. The blue arc is the robot. The red star is the target dirty cell. Each second the robot cleans a row and a column, denoted by yellow stripes.\n\nGiven the floor size n and m, the robot's initial position (r_b, c_b) and the dirty cell's position (r_d, c_d), find the time for the robot to do its job.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_cleaning_time(test_cases: List[Tuple[int, int, int, int, int, int]]) -> List[int]:\n    \"\"\"Calculate the time taken for a robot to reach a dirty cell in a grid.\n\n    Args:\n        test_cases: A list of tuples, each containing:\n            - n (int): Number of rows in the grid.\n            - m (int): Number of columns in the grid.\n            - x (int): Initial row position of the robot.\n            - y (int): Initial column position of the robot.\n            - d (int): Direction of the robot (0: right, 1: down, 2: left, 3: up).\n            - t (int): Time taken to move one step.\n\n    Returns:\n        A list of integers representing the time taken for each test case.\n    \"\"\"\n    results = []\n    \n    for n, m, x, y, d, t in test_cases:\n        # Initialize direction vectors for right, down, left, up\n        direction_vectors = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        \n        # Initialize current position and direction\n        current_x, current_y = x, y\n        current_direction = d\n        time_elapsed = 0\n        \n        # Simulate the robot's movement\n        while True:\n            # Calculate next position\n            next_x = current_x + direction_vectors[current_direction][0]\n            next_y = current_y + direction_vectors[current_direction][1]\n            \n            # Check if the robot hits a wall\n            if next_x < 0 or next_x >= n or next_y < 0 or next_y >= m:\n                # Reflect the direction\n                current_direction = (current_direction + 2) % 4\n            else:\n                # Move to the next position\n                current_x, current_y = next_x, next_y\n                time_elapsed += t\n            \n            # Check if the robot has reached the dirty cell\n            if current_x == 0 and current_y == 0:\n                results.append(time_elapsed)\n                break\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = calculate_cleaning_time(test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef time_to_clean(t: int, test_cases: List[Tuple[int, int, int, int, int, int]]) -> List[int]:\n    \"\"\"Calculate the time taken for a robot to reach a dirty cell in a room.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int, int, int, int]]): Each test case contains:\n            - n (int): Number of rows in the room.\n            - m (int): Number of columns in the room.\n            - rb (int): Initial row position of the robot.\n            - cb (int): Initial column position of the robot.\n            - rd (int): Row position of the dirty cell.\n            - cd (int): Column position of the dirty cell.\n\n    Returns:\n        List[int]: List of times taken for each test case.\n    \"\"\"\n    results = []\n\n    for case in test_cases:\n        n, m, rb, cb, rd, cd = case\n\n        # Calculate the time to reach the dirty cell\n        time = 0\n        dr, dc = 1, 1  # Initial direction: down and right\n\n        while rb != rd and cb != cd:\n            if rb == rd or cb == cd:\n                break\n\n            # Move the robot\n            if rb + dr > n or rb + dr < 1:\n                dr *= -1\n            if cb + dc > m or cb + dc < 1:\n                dc *= -1\n\n            rb += dr\n            cb += dc\n            time += 1\n\n        # Calculate the remaining time if the robot is aligned with the dirty cell\n        if rb == rd:\n            time += abs(cb - cd)\n        elif cb == cd:\n            time += abs(rb - rd)\n\n        results.append(time)\n\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n\n    results = time_to_clean(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef time_to_clean(n: int, m: int, r_b: int, c_b: int, r_d: int, c_d: int) -> int:\n    \"\"\"Calculate the time for the robot to reach the dirty cell.\n\n    Args:\n        n (int): Number of rows in the grid.\n        m (int): Number of columns in the grid.\n        r_b (int): Initial row position of the robot.\n        c_b (int): Initial column position of the robot.\n        r_d (int): Row position of the dirty cell.\n        c_d (int): Column position of the dirty cell.\n\n    Returns:\n        int: Time taken for the robot to reach the dirty cell.\n    \"\"\"\n    # Calculate the time to reach the dirty cell directly\n    # The robot moves diagonally, so it will take the maximum of the row or column distance\n    if r_b <= r_d and c_b <= c_d:\n        return max(r_d - r_b, c_d - c_b)\n    elif r_b <= r_d and c_b > c_d:\n        return max(r_d - r_b, c_b - c_d)\n    elif r_b > r_d and c_b <= c_d:\n        return max(r_b - r_d, c_d - c_b)\n    else:\n        return max(r_b - r_d, c_b - c_d)\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        n, m, r_b, c_b, r_d, c_d = map(int, data[i].split())\n        result = time_to_clean(n, m, r_b, c_b, r_d, c_d)\n        results.append(result)\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef time_to_clean(n: int, m: int, r_b: int, c_b: int, r_d: int, c_d: int) -> int:\n    \"\"\"Calculate the time it takes for the robot to clean the dirty cell.\n\n    Args:\n        n (int): Number of rows in the grid.\n        m (int): Number of columns in the grid.\n        r_b (int): Initial row position of the robot.\n        c_b (int): Initial column position of the robot.\n        r_d (int): Row position of the dirty cell.\n        c_d (int): Column position of the dirty cell.\n\n    Returns:\n        int: Time taken to reach the dirty cell.\n    \"\"\"\n    # Initial direction of movement\n    dr, dc = 1, 1\n    time = 0\n\n    while True:\n        # Check if the robot is at the dirty cell\n        if r_b == r_d or c_b == c_d:\n            return time\n\n        # Move the robot\n        r_b += dr\n        c_b += dc\n        time += 1\n\n        # Reflect off the walls if necessary\n        if r_b == 1 or r_b == n:\n            dr *= -1\n        if c_b == 1 or c_b == m:\n            dc *= -1\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    t = int(data[0])\n    index = 1\n    results = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index+1])\n        r_b = int(data[index+2])\n        c_b = int(data[index+3])\n        r_d = int(data[index+4])\n        c_d = int(data[index+5])\n        index += 6\n        result = time_to_clean(n, m, r_b, c_b, r_d, c_d)\n        results.append(result)\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\ndef time_to_clean(n: int, m: int, r_b: int, c_b: int, r_d: int, c_d: int) -> int:\n    \"\"\"Calculate the time taken for the robot to clean the specified dirty cell.\n\n    Args:\n        n (int): Number of rows in the room.\n        m (int): Number of columns in the room.\n        r_b (int): Initial row position of the robot.\n        c_b (int): Initial column position of the robot.\n        r_d (int): Row position of the dirty cell.\n        c_d (int): Column position of the dirty cell.\n\n    Returns:\n        int: Time taken for the robot to reach the dirty cell.\n    \"\"\"\n    # Initialize direction of movement\n    dr, dc = 1, 1  # dr: row direction, dc: column direction\n    time = 0\n\n    while True:\n        # Check if the robot is on the same row or column as the dirty cell\n        if r_b == r_d or c_b == c_d:\n            return time\n\n        # Move the robot\n        if r_b + dr > n or r_b + dr < 1:\n            dr *= -1  # Reverse row direction if hitting a wall\n        if c_b + dc > m or c_b + dc < 1:\n            dc *= -1  # Reverse column direction if hitting a wall\n\n        r_b += dr\n        c_b += dc\n        time += 1\n\ndef main():\n    \"\"\"Main function to read input and output the result for each test case.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n\n    for i in range(1, t + 1):\n        n, m, r_b, c_b, r_d, c_d = map(int, input_data[i].split())\n        result = time_to_clean(n, m, r_b, c_b, r_d, c_d)\n        results.append(result)\n\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_cleaning_time(test_cases: List[Tuple[int, int, int, int, int, int]]) -> List[int]:\n    \"\"\"Calculate the time it takes for the robot to reach the dirty cell.\n\n    Args:\n        test_cases: A list of tuples, each containing:\n            - n: The number of rows in the grid.\n            - m: The number of columns in the grid.\n            - x: The initial row position of the robot.\n            - y: The initial column position of the robot.\n            - d_x: The row position of the dirty cell.\n            - d_y: The column position of the dirty cell.\n\n    Returns:\n        A list of integers representing the time taken for each test case.\n    \"\"\"\n    results = []\n    for n, m, x, y, d_x, d_y in test_cases:\n        time = 0\n        dx, dy = 1, 1  # Initial direction is diagonally down-right\n\n        while (x != d_x) or (y != d_y):\n            # Calculate next position\n            next_x = x + dx\n            next_y = y + dy\n\n            # Check for boundary reflection\n            if next_x < 1 or next_x > n:\n                dx *= -1\n                next_x = x + dx\n            if next_y < 1 or next_y > m:\n                dy *= -1\n                next_y = y + dy\n\n            # Update position and time\n            x, y = next_x, next_y\n            time += 1\n\n        results.append(time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    \n    results = calculate_cleaning_time(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\ndef time_to_clean(n: int, m: int, r_b: int, c_b: int, r_d: int, c_d: int) -> int:\n    \"\"\"Calculate the time taken for the robot to clean the dirty cell.\n\n    The robot moves in a straight line and changes direction upon hitting a wall.\n    The function simulates the robot's path and checks when it cleans the dirty cell.\n\n    Args:\n        n (int): Number of rows in the grid.\n        m (int): Number of columns in the grid.\n        r_b (int): Initial row position of the robot.\n        c_b (int): Initial column position of the robot.\n        r_d (int): Row position of the dirty cell.\n        c_d (int): Column position of the dirty cell.\n\n    Returns:\n        int: Time taken to clean the dirty cell.\n    \"\"\"\n    # If the robot starts on the dirty cell, return 0 immediately\n    if r_b == r_d and c_b == c_d:\n        return 0\n\n    # Calculate the time to reach the dirty cell\n    # The robot moves diagonally, so it will take the maximum of the row or column distance\n    row_distance = abs(r_d - r_b)\n    col_distance = abs(c_d - c_b)\n\n    # The robot will hit a wall and reflect if it reaches the grid boundary\n    # Calculate the effective distance considering wall reflections\n    if r_b <= r_d:\n        row_time = row_distance\n    else:\n        row_time = (2 * n - r_b - r_d)\n\n    if c_b <= c_d:\n        col_time = col_distance\n    else:\n        col_time = (2 * m - c_b - c_d)\n\n    # The time to clean the dirty cell is the maximum of the row and column times\n    return max(row_time, col_time)\n\ndef main():\n    \"\"\"Main function to read input and output the result.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    for i in range(1, t + 1):\n        n, m, r_b, c_b, r_d, c_d = map(int, input_data[i].split())\n        result = time_to_clean(n, m, r_b, c_b, r_d, c_d)\n        results.append(result)\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef time_to_clean(n: int, m: int, r_b: int, c_b: int, r_d: int, c_d: int) -> int:\n    \"\"\"Calculate the time taken for the robot to clean the dirty cell.\n\n    Args:\n        n (int): Number of rows in the grid.\n        m (int): Number of columns in the grid.\n        r_b (int): Initial row position of the robot.\n        c_b (int): Initial column position of the robot.\n        r_d (int): Row position of the dirty cell.\n        c_d (int): Column position of the dirty cell.\n\n    Returns:\n        int: Time taken to clean the dirty cell.\n    \"\"\"\n    # If the robot starts on the dirty cell, return 0\n    if r_b == r_d and c_b == c_d:\n        return 0\n\n    # Calculate the time to reach the dirty cell\n    # The robot moves in a straight line, reflecting off walls\n    # Calculate the time based on the row and column movements\n    row_time = abs(r_d - r_b)\n    col_time = abs(c_d - c_b)\n\n    # The robot can move directly to the dirty cell if no walls are in the way\n    if (r_d >= r_b and c_d >= c_b) or (r_d <= r_b and c_d <= c_b):\n        return max(row_time, col_time)\n\n    # If the robot needs to reflect off walls, calculate the additional time\n    # Reflecting off walls means the robot will take additional time\n    # Calculate the time considering the grid boundaries\n    row_reflect_time = (n - 1 - r_b) + (n - 1 - r_d) if r_d < r_b else r_b + r_d\n    col_reflect_time = (m - 1 - c_b) + (m - 1 - c_d) if c_d < c_b else c_b + c_d\n\n    return min(row_reflect_time, col_reflect_time)\n\ndef main():\n    \"\"\"Main function to read input, process each test case, and output results.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        n, m, r_b, c_b, r_d, c_d = map(int, data[i].split())\n        result = time_to_clean(n, m, r_b, c_b, r_d, c_d)\n        results.append(result)\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef time_to_clean(n: int, m: int, r_b: int, c_b: int, r_d: int, c_d: int) -> int:\n    \"\"\"Calculate the time taken for the robot to clean the specified dirty cell.\n\n    Args:\n        n (int): Number of rows in the room.\n        m (int): Number of columns in the room.\n        r_b (int): Initial row position of the robot.\n        c_b (int): Initial column position of the robot.\n        r_d (int): Row position of the dirty cell.\n        c_d (int): Column position of the dirty cell.\n\n    Returns:\n        int: Time taken to reach the dirty cell.\n    \"\"\"\n    # If the robot is already at the dirty cell, return 0\n    if r_b == r_d and c_b == c_d:\n        return 0\n\n    # Calculate the time to reach the dirty cell\n    # The robot moves diagonally, reflecting off walls\n    time = 0\n    dr, dc = 1, 1  # Initial direction: down-right\n\n    while True:\n        # Check if the robot can reach the dirty cell in the current direction\n        if r_b == r_d or c_b == c_d:\n            return time\n\n        # Calculate next position\n        next_r_b = r_b + dr\n        next_c_b = c_b + dc\n\n        # Reflect off the walls if necessary\n        if next_r_b < 1 or next_r_b > n:\n            dr *= -1\n        else:\n            r_b = next_r_b\n\n        if next_c_b < 1 or next_c_b > m:\n            dc *= -1\n        else:\n            c_b = next_c_b\n\n        # Increment time\n        time += 1\n\ndef main():\n    \"\"\"Main function to read input and output the result.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        n, m, r_b, c_b, r_d, c_d = map(int, data[i].split())\n        result = time_to_clean(n, m, r_b, c_b, r_d, c_d)\n        results.append(result)\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef time_to_clean(n: int, m: int, r_b: int, c_b: int, r_d: int, c_d: int) -> int:\n    \"\"\"Calculate the minimum time for the robot to clean the dirty cell.\n\n    Args:\n        n (int): Number of rows in the room.\n        m (int): Number of columns in the room.\n        r_b (int): Initial row position of the robot.\n        c_b (int): Initial column position of the robot.\n        r_d (int): Row position of the dirty cell.\n        c_d (int): Column position of the dirty cell.\n\n    Returns:\n        int: Minimum time to reach the dirty cell.\n    \"\"\"\n    # If the robot starts on the dirty cell, return 0\n    if r_b == r_d and c_b == c_d:\n        return 0\n\n    # Initialize direction of movement\n    dr, dc = 1, 1  # dr: row direction, dc: column direction\n    time = 0\n\n    while True:\n        # Check if the robot can move directly to the dirty cell\n        if r_b == r_d or c_b == c_d:\n            return time + abs(r_b - r_d) + abs(c_b - c_d)\n\n        # Move the robot\n        if r_b + dr > n or r_b + dr < 1:\n            dr *= -1  # Reflect row direction\n        if c_b + dc > m or c_b + dc < 1:\n            dc *= -1  # Reflect column direction\n\n        r_b += dr\n        c_b += dc\n        time += 1\n\ndef main():\n    \"\"\"Main function to read input and output results.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        n, m, r_b, c_b, r_d, c_d = map(int, data[i].split())\n        result = time_to_clean(n, m, r_b, c_b, r_d, c_d)\n        results.append(result)\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires simulating the movement of a robot cleaner in a bounded grid environment. The robot must clean a specific cell by moving in a predictable pattern and reflecting off walls. The solution must efficiently compute the time taken for the robot to clean the target cell across multiple test cases.\nrequirement pool:\n- Implement the robot movement simulation.\n- Optimize the algorithm for handling up to 10,000 test cases.\n- Ensure the solution is computationally efficient for large grid sizes.\n- Provide clear and correct output for each test case.\n- Consider edge cases where the robot starts on the dirty cell.\nWe will simulate the robot's movement in a grid environment, reflecting its direction upon hitting walls. The key challenge is efficiently calculating the time taken for the robot to reach the dirty cell, especially given the constraints of up to 10,000 test cases. We will use a straightforward simulation approach, leveraging simple arithmetic to determine the robot's path and reflections. This approach will ensure that we handle each test case quickly and accurately.\n", "requirement analysis:\nThe robot must navigate a rectangular room, reflecting off walls to eventually clean a specified dirty cell. The algorithm should efficiently calculate the time taken for the robot to clean the cell, considering its initial position and movement pattern.\nrequirement pool:\n- Implement the robot's movement logic\n- Calculate the time taken to clean the dirty cell\n- Optimize the algorithm for large number of test cases\n- Ensure accurate reflection logic at walls\n- Provide detailed output for debugging\nWe will implement a function that simulates the robot's movement in the room. The robot will move in a straight line, reflecting off walls when necessary, until it cleans the dirty cell. The function will calculate the time taken for the robot to reach the dirty cell by considering the initial position, the direction of movement, and the room's boundaries. The algorithm will efficiently handle multiple test cases by iterating through each test case and computing the result using simple arithmetic operations.\n", "requirement analysis:\nThe problem requires simulating the movement of a robot cleaner in a bounded grid environment. The robot must clean a specific dirty cell by moving in a predictable pattern, reflecting off walls. The solution must efficiently handle up to 10,000 test cases, ensuring that the robot's path is calculated correctly and the time to clean the dirty cell is accurately determined.\nrequirement pool:\n- Implement the robot movement and cleaning logic.\n- Optimize the solution for large input sizes.\n- Ensure the solution handles edge cases effectively.\n- Provide clear documentation and examples.\n- Consider potential extensions for more complex room shapes.\nWe will implement a simulation of the robot's movement on a grid, reflecting off walls as described. The robot will move in a predictable pattern, and we will calculate the time it takes to reach the dirty cell. The solution will be optimized to handle up to 10,000 test cases efficiently by using simple arithmetic operations to determine the time to reach the dirty cell.\n", "requirement analysis:\nThe robot must efficiently navigate the room, reflecting off walls as needed, to clean the dirty cell. The algorithm should handle up to 10,000 test cases and provide accurate results for each. The movement logic must account for room boundaries and ensure the robot eventually cleans the dirty cell.\nrequirement pool:\n- Implement efficient robot movement logic\n- Handle multiple test cases with optimized performance\n- Ensure accurate output for each test case\n- Reflect movement direction upon hitting walls\n- Provide clear documentation for the algorithm\nWe will implement a function that simulates the robot's movement and calculates the time it takes to clean the dirty cell. The robot moves in a straight line and reflects off walls, changing its direction when it hits a boundary. The algorithm will efficiently handle multiple test cases by iterating through each one and calculating the time based on the robot's initial position and the position of the dirty cell.\n", "requirement analysis:\nThe requirements focus on simulating the robot's movement within a bounded room and ensuring it cleans a specified dirty cell. The solution must efficiently compute the time taken for the robot to clean the cell, considering reflections off walls and multiple test cases.\nrequirement pool:\n- Implement the robot's movement algorithm considering wall reflections\n- Ensure the solution handles up to 10,000 test cases efficiently\n- Optimize the algorithm for quick computation\n- Provide clear and accurate output for each test case\n- Handle edge cases such as the robot starting on the dirty cell\nWe will implement a simulation of the robot's movement within a bounded room using simple arithmetic operations to reflect the robot's direction when it encounters walls. The algorithm will efficiently compute the time taken for the robot to clean the specified dirty cell by simulating its path and checking when it aligns with the dirty cell's row or column. Given the constraints, no complex data structures or third-party libraries are necessary, ensuring quick computation and clarity.\n", "requirement analysis:\nThe problem requires simulating the movement of a robot cleaner in a grid-based room. The robot moves diagonally and reflects off walls, cleaning rows and columns it passes through. The goal is to determine the time taken for the robot to clean a specific dirty cell. The solution must handle up to 10,000 test cases efficiently, with room dimensions up to 100x100.\nrequirement pool:\n- Implement the robot movement and reflection logic.\n- Calculate the time taken for the robot to clean the dirty cell.\n- Optimize the solution for large input sizes.\n- Ensure the solution handles edge cases, such as the robot starting on the dirty cell.\n- Provide detailed output for debugging and analysis.\nWe will implement a simulation of the robot's movement on a grid. The robot moves diagonally and reflects off walls, changing its direction when it hits a boundary. The key challenge is to efficiently calculate the time it takes for the robot to reach the dirty cell, considering the constraints of up to 10,000 test cases and room dimensions of up to 100x100. We will use simple arithmetic operations to determine the time based on the robot's initial position, the dirty cell's position, and the room's dimensions.\n", "requirement analysis:\nThe problem requires simulating a robot's movement in a bounded grid and determining the time it takes to clean a specific cell. The robot's movement is influenced by walls, causing direction changes. The solution must efficiently handle up to 10,000 test cases, ensuring quick computation and correct output for each scenario.\nrequirement pool:\n- Implement the robot's movement logic considering wall reflections.\n- Calculate the time taken for the robot to clean the dirty cell.\n- Optimize the solution for handling the maximum number of test cases efficiently.\n- Ensure the output format is clear and adheres to the requirements.\n- Consider edge cases where the robot starts on the dirty cell.\nWe will implement a simulation of the robot's movement on a grid, considering wall reflections. The robot will move in a straight line, changing direction upon hitting a wall. The algorithm will efficiently calculate the time taken for the robot to clean the dirty cell by simulating its path and checking when it cleans the dirty cell. Given the constraints, the solution will be optimized to handle up to 10,000 test cases efficiently using simple arithmetic operations.\n", "requirement analysis:\nThe problem requires simulating the movement of a robot cleaner in a bounded grid environment. The robot must clean a specific dirty cell by moving in a pattern that reflects off walls. The solution must efficiently calculate the time taken for the robot to clean the dirty cell for multiple test cases.\nrequirement pool:\n- Implement the robot movement simulation algorithm.\n- Optimize the solution for handling up to 10,000 test cases.\n- Ensure the solution is robust and handles edge cases.\n- Provide clear documentation and comments in the code.\n- Consider potential extensions for more complex room shapes.\nWe will simulate the robot's movement in a grid environment, reflecting its direction when it encounters walls. The robot cleans all cells in the same row and column as it moves. The key challenge is to efficiently calculate the time taken for the robot to clean the dirty cell, especially given the constraints of up to 10,000 test cases. We will use a simple simulation approach, leveraging the symmetry of the problem to avoid unnecessary calculations.\n", "requirement analysis:\nThe requirements focus on simulating a robot cleaner's movement in a bounded room and ensuring it cleans a specified dirty cell. The robot's movement is constrained by walls, requiring reflection logic for direction changes. The solution must efficiently compute the time taken for the robot to clean the dirty cell across multiple test cases.\nrequirement pool:\n- Implement robot movement logic with wall reflection\n- Calculate time taken to clean the dirty cell\n- Optimize for large number of test cases\n- Ensure accurate input/output handling\n- Consider edge cases and constraints\nWe will implement a function that simulates the robot's movement in a bounded room. The robot will move in a straight line, reflecting off walls when necessary. The function will calculate the time taken for the robot to clean the specified dirty cell by checking if the robot's current row or column matches the dirty cell's position. The algorithm will be optimized to handle up to 10,000 test cases efficiently.\n", "requirement analysis:\nThe problem requires simulating the movement of a robot cleaner in a bounded grid and determining the time it takes to clean a specific dirty cell. The robot moves diagonally and reflects off walls, which requires careful handling of direction changes. The solution must efficiently handle up to 10,000 test cases with room sizes up to 100x100.\nrequirement pool:\n- Implement the robot movement and reflection logic.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is robust against edge cases.\n- Provide clear documentation and comments in the code.\n- Consider potential extensions for more complex room shapes.\nWe will implement a simulation of the robot's movement using simple arithmetic operations to handle the reflection logic when the robot encounters walls. The solution will iterate through each test case, updating the robot's position and direction until it cleans the dirty cell. Given the constraints, the algorithm will be optimized to handle up to 10,000 test cases efficiently without using complex data structures.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 199, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nA test case consists of only one line, containing six integers n, m, r_b, c_b, r_d, and c_d (1 \u2264 n, m \u2264 100, 1 \u2264 r_b, r_d \u2264 n, 1 \u2264 c_b, c_d \u2264 m) \u2014 the sizes of the room, the initial position of the robot and the position of the dirt cell.\n\nOutput\n\nFor each test case, print an integer \u2014 the time for the robot to clean the dirty cell. We can show that the robot always cleans the dirty cell eventually.\n\nExample\n\nInput\n\n\n5\n10 10 6 1 2 8\n10 10 9 9 1 1\n9 8 5 6 2 1\n6 9 2 2 5 8\n2 2 1 1 2 1\n\n\nOutput\n\n\n7\n10\n9\n3\n0\n\nNote\n\nIn the first example, the floor has the size of 10\u00d7 10. The initial position of the robot is (6, 1) and the position of the dirty cell is (2, 8). See the illustration of this example in the problem statement.\n\nIn the second example, the floor is the same, but the initial position of the robot is now (9, 9), and the position of the dirty cell is (1, 1). In this example, the robot went straight to the dirty cell and clean it. \n\n<image>\n\nIn the third example, the floor has the size 9 \u00d7 8. The initial position of the robot is (5, 6), and the position of the dirty cell is (2, 1). \n\n<image>\n\nIn the fourth example, the floor has the size 6 \u00d7 9. The initial position of the robot is (2, 2) and the position of the dirty cell is (5, 8). \n\n<image>\n\nIn the last example, the robot was already standing in the same column as the dirty cell, so it can clean the cell right away. \n", "mutate_method": "expand_one2two", "parent_index": 34}
