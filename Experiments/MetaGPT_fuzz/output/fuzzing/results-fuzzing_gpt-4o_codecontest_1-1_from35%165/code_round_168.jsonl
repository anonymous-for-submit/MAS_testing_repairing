{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements. Make sure to account for the fact that the elements of array a are positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements. Make sure to account for the fact that the elements of array a are positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the sorted list of all non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a sorted list of subsequences.\n\n    Returns:\n        List[List[int]]: List of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted list is the smallest element in the original array.\n        smallest = case[0]\n        # The largest element in the sorted list is the sum of all elements in the original array.\n        largest = case[-1]\n        # The second largest element in the sorted list is the sum of the two largest elements in the original array.\n        second_largest = case[-2]\n        \n        # Calculate the three distinct elements of the original array.\n        a = smallest\n        b = second_largest - smallest\n        c = largest - second_largest\n        \n        # Append the restored array to the results.\n        results.append([a, b, c])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the restored arrays\n    results = restore_array(t, test_cases)\n    \n    # Output each restored array\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: List of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is a_1\n        a_1 = case[0]\n        # The second smallest element in b is a_2\n        a_2 = case[1]\n        # The largest element in b is a_1 + a_2 + a_3\n        a_3 = case[-1] - a_1 - a_2\n        # Construct the original array a\n        a = [a_1, a_2, a_3]\n        results.append(a)\n    return results\n\n# Input interface\nimport sys\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    \n    # Call the restore_array function\n    results = restore_array(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three elements from the given sorted array of four elements.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of four integers.\n\n    Returns:\n        List[List[int]]: A list of original arrays, each containing three integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted array is one of the original elements\n        a = case[0]\n        # The largest element in the sorted array is the sum of all three original elements\n        sum_abc = case[3]\n        # The other two elements can be found by subtracting the smallest element from the other two\n        b = case[1] - a\n        c = case[2] - a\n        # Append the original array to the results\n        results.append([a, b, c])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Process the test cases\n    results = restore_original_array(test_cases)\n    \n    # Output each original array\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest three elements in 'b' are the individual elements of 'a'\n        # because they are the sums of single elements from 'a'.\n        a = sorted(case)[:3]\n        results.append(a)\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted array of sums of non-empty subsequences.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of sums.\n\n    Returns:\n        List[List[int]]: A list of original arrays for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        a1_a2_a3 = b[-1]\n        # The second largest element in b is the sum of the two largest elements in a\n        a2_a3 = b[-2]\n        \n        # Deduce the original elements\n        a2 = a2_a3 - a1\n        a3 = a1_a2_a3 - a2_a3\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of integers representing all possible sums of the non-empty subsequences\n                       of a three-element array.\n\n    Returns:\n        List[int]: The original three-element array.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements of a\n    a1_a2_a3 = b[-1]\n    # The second largest element in b is the sum of the two largest elements of a\n    a2_a3 = b[-2]\n    \n    # Calculate the individual elements of the original array\n    a2 = a2_a3 - a1\n    a3 = a1_a2_a3 - a2_a3\n    \n    return [a1, a2, a3]\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given sorted array of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of sums.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each representing the restored original array.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        # The smallest element in the sorted list is the smallest element of the original array\n        a1 = case[0]\n        # The second smallest element in the sorted list is the second smallest element of the original array\n        a2 = case[1]\n        # The largest element in the sorted list is the sum of all elements of the original array\n        a3 = case[-1] - a1 - a2\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    \n    # Process and output results\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted array of sums of all non-empty subsequences.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of integers.\n\n    Returns:\n        List[List[int]]: A list of restored original arrays for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element of a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements of a\n        a1_a2_a3 = b[-1]\n        # The second largest element in b is the sum of the two largest elements of a\n        a2_a3 = b[-2]\n        \n        # Calculate the elements of the original array\n        a3 = a1_a2_a3 - a2_a3\n        a2 = a2_a3 - a1\n        a = [a1, a2, a3]\n        \n        results.append(a)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given test cases.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of integers b.\n\n    Returns:\n        A list of tuples, each containing three integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to find the smallest three numbers and the largest number\n        b.sort()\n        # The smallest three numbers are the elements of a\n        a1, a2, a3 = b[0], b[1], b[2]\n        # The largest number in b is the sum of all elements of a\n        # We can verify this by checking if a1 + a2 + a3 equals the largest number\n        if a1 + a2 + a3 == b[-1]:\n            results.append((a1, a2, a3))\n        else:\n            # If the sum doesn't match, it means the largest number is not the sum of a1, a2, a3\n            # In this case, we need to adjust the selection of a1, a2, a3\n            # Since the problem guarantees at least one valid solution, we can choose any valid solution\n            # Here, we assume the problem is well-formed and the first three smallest numbers are correct\n            results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Reconstructs the original array 'a' from the sorted array 'b' which contains\n    the sums of all non-empty subsequences of 'a'.\n\n    Args:\n        b (List[int]): A sorted list of integers representing the sums of all non-empty subsequences of 'a'.\n\n    Returns:\n        List[int]: The original array 'a'.\n    \"\"\"\n    # The length of the original array 'a' can be deduced from the length of 'b'\n    n = int((len(b) - 1) ** 0.5)\n    \n    # The smallest n elements in 'b' are the elements of 'a'\n    a = b[:n]\n    \n    return a\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing an array of three distinct positive integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values.\nrequirement pool:\n- Implement the main algorithm to reconstruct array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Validate the input to ensure it meets the problem constraints.\n- Provide detailed comments and documentation for the code.\nWe will leverage the fact that the array b is the sorted list of all non-empty subsequences of array a. Since a consists of three distinct positive integers, the smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can reconstruct a by identifying these key elements in b.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct positive integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values, ensuring correct output format.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Validate the solution against edge cases and large inputs.\n- Provide detailed comments and documentation for the code.\nWe will solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b, the smallest element is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. By using these properties, we can efficiently reconstruct the array a for each test case.\n", "requirement analysis:\nThe task requires restoring an array of three distinct positive integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution handles up to 5000 test cases efficiently\n- Optimize for large integer values\n- Maintain correct output format\n- Provide multiple valid outputs if possible\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements in a. The largest element in b is the sum of all three elements in a. By using these observations, we can deduce the three elements of a by simple arithmetic operations. This approach is efficient and can handle the constraints provided.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct positive integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output.\nrequirement pool:\n- Implement the main algorithm to restore the original array.\n- Ensure the solution handles large input values efficiently.\n- Optimize the solution for speed and memory usage.\n- Provide clear and concise output formatting.\n- Include error handling for unexpected input formats.\nWe will use a straightforward approach to restore the original array 'a' from the given sorted array 'b'. Since 'b' contains the sums of all non-empty subsequences of 'a', the smallest three elements in 'b' will be the individual elements of 'a'. This is because the smallest elements in 'b' are the sums of single elements from 'a'. We will extract these elements directly from 'b'.\n", "requirement analysis:\nThe task is to deduce the original array of three distinct positive integers from the given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly, with each test case's result on a new line.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution is efficient for up to 5000 test cases.\n- Handle large integer values up to 10^9.\n- Provide clear and correctly formatted output.\n- Consider edge cases where multiple solutions may exist.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a.\n", "requirement analysis:\nThe task requires reconstructing an original array of three distinct positive integers from a sorted list of their subsequence sums. The solution must handle up to 5000 test cases efficiently, ensuring that the output is correct and formatted as specified. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Efficiently process up to 5000 test cases\n- Correctly reconstruct the original array from subsequence sums\n- Handle large integer values up to 10^9\n- Ensure output is formatted correctly\n- Provide multiple valid outputs if possible\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these properties, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct positive integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The key is to identify the three smallest elements in the sorted list, which correspond to the individual elements of the original array.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Validate the solution against edge cases.\n- Provide detailed comments and documentation for the code.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of array a. The smallest element in b is the smallest element of a, the second smallest element in b is the second smallest element of a, and the largest element in b is the sum of all elements of a. This allows us to deduce the elements of a by simple arithmetic operations on the elements of b.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct positive integers from a sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure correct output format for each test case\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these properties, we can efficiently deduce the original array a.\n", "requirement analysis:\nThe task requires restoring the original array of three distinct positive integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Restore original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure correct output format\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the fact that the largest number in the sorted array b is the sum of all three elements of array a. The smallest three numbers in b are the individual elements of a. By using these properties, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct positive integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases, each with 7 integers representing the sorted sums of subsequences.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for clarity and maintainability.\n- Test the solution against edge cases and large inputs.\n- Document the solution approach and edge case handling.\nWe will solve the problem by leveraging the properties of the sorted array b. Since b contains the sums of all non-empty subsequences of a, we can deduce that the smallest element in b is the smallest element in a, the second smallest element in b is the second smallest element in a, and the largest element in b is the sum of all elements in a. By using these properties, we can efficiently reconstruct the array a.\n"], "scores": [], "pass_results": [false, false, false, false, true, false, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 168, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 72}
