{"name": "1615_B. And It's Non-Zero", "description": "You are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "tags": ["bitmasks", "greedy", "math"], "difficulty": 8, "id": 1615, "sample_io": [{"input": "5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n", "output": ["1\n3\n0\n2\n31072\n"]}], "test_list": [{"input": "5\n1 2\n2 8\n4 5\n2 5\n100000 200000\n", "output": ["1\n3\n0\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n100000 200000\n", "output": ["1\n3\n0\n0\n31072\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 5\n100000 200000\n", "output": ["1\n4\n0\n2\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100000 200000\n", "output": ["0\n3\n0\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n110000 200000\n", "output": ["1\n3\n0\n0\n21072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100100 200000\n", "output": ["0\n3\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 10\n110000 200000\n", "output": ["1\n3\n0\n3\n21072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n1 5\n100001 200000\n", "output": ["1\n3\n0\n2\n31071\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n100000 104325\n", "output": ["1\n3\n0\n0\n0\n"]}, {"input": "5\n2 2\n2 8\n1 5\n2 5\n100000 200000\n", "output": ["0\n3\n2\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 12\n110000 200000\n", "output": ["1\n3\n0\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n100100 200000\n", "output": ["0\n3\n1\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n4 9\n1 5\n100000 200000\n", "output": ["1\n3\n2\n2\n31072\n"]}, {"input": "5\n2 2\n2 12\n1 5\n2 5\n100000 200000\n", "output": ["0\n5\n2\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n110000 200000\n", "output": ["2\n3\n0\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 7\n100100 200000\n", "output": ["1\n3\n0\n2\n30972\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n101100 200000\n", "output": ["0\n3\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n100000 200000\n", "output": ["1\n3\n1\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 7\n100100 200000\n", "output": ["1\n2\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101000 200000\n", "output": ["1\n3\n1\n2\n30072\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n101000 200000\n", "output": ["1\n2\n1\n2\n30072\n"]}, {"input": "5\n2 4\n1 8\n4 5\n2 7\n100100 200000\n", "output": ["1\n4\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n101100 200000\n", "output": ["1\n2\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n4 5\n3 5\n100000 200000\n", "output": ["1\n3\n0\n1\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n4 5\n100000 200000\n", "output": ["0\n3\n0\n0\n31072\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 1\n100000 200000\n", "output": ["1\n4\n0\n0\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n4 5\n110000 200000\n", "output": ["0\n3\n0\n0\n21072\n"]}, {"input": "5\n2 2\n2 16\n4 5\n2 5\n100100 200000\n", "output": ["0\n7\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 7\n4 5\n4 10\n110000 200000\n", "output": ["1\n2\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 7\n4 6\n2 5\n100100 200000\n", "output": ["0\n2\n0\n2\n30972\n"]}, {"input": "5\n2 2\n2 8\n1 5\n4 5\n100000 200000\n", "output": ["0\n3\n2\n0\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 6\n4 5\n110001 200000\n", "output": ["1\n3\n0\n0\n21071\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 7\n100110 200000\n", "output": ["0\n3\n0\n2\n30962\n"]}, {"input": "5\n1 2\n2 8\n4 5\n7 12\n110000 200000\n", "output": ["1\n3\n0\n1\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 4\n100100 200000\n", "output": ["0\n3\n1\n1\n30972\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 5\n100000 200000\n", "output": ["1\n3\n3\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n010000 200000\n", "output": ["2\n3\n0\n0\n91697\n"]}, {"input": "5\n1 2\n2 4\n4 5\n4 13\n110000 200000\n", "output": ["1\n1\n0\n4\n21072\n"]}, {"input": "5\n2 2\n1 8\n3 6\n2 5\n101100 200000\n", "output": ["0\n4\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n100000 200000\n", "output": ["1\n3\n1\n5\n31072\n"]}, {"input": "5\n1 4\n1 7\n4 5\n2 7\n100100 200000\n", "output": ["2\n3\n0\n2\n30972\n"]}, {"input": "5\n1 4\n1 8\n4 5\n2 7\n100100 200000\n", "output": ["2\n4\n0\n2\n30972\n"]}, {"input": "5\n2 4\n2 5\n4 5\n2 7\n100100 123776\n", "output": ["1\n2\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 10\n110000 200000\n", "output": ["1\n2\n0\n2\n21072\n"]}, {"input": "5\n2 2\n2 8\n1 6\n4 5\n100000 200000\n", "output": ["0\n3\n3\n0\n31072\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 7\n100110 200000\n", "output": ["0\n4\n0\n2\n30962\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 4\n100101 200000\n", "output": ["0\n3\n1\n1\n30971\n"]}, {"input": "5\n2 2\n1 1\n3 6\n2 5\n101100 200000\n", "output": ["0\n0\n1\n2\n29972\n"]}, {"input": "5\n1 2\n1 8\n7 9\n1 10\n100000 200000\n", "output": ["1\n4\n1\n5\n31072\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101010 188450\n", "output": ["1\n3\n1\n2\n30062\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 20\n110000 200000\n", "output": ["1\n2\n0\n7\n21072\n"]}, {"input": "5\n2 2\n2 8\n1 2\n4 5\n100000 200000\n", "output": ["0\n3\n1\n0\n31072\n"]}, {"input": "5\n2 2\n2 5\n3 6\n2 4\n100101 200000\n", "output": ["0\n2\n1\n1\n30971\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101011 188450\n", "output": ["1\n3\n1\n2\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 5\n101000 200000\n", "output": ["1\n1\n1\n2\n30072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 5\n101011 188450\n", "output": ["1\n3\n3\n2\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 5\n101001 200000\n", "output": ["1\n1\n1\n2\n30071\n"]}, {"input": "5\n1 1\n1 8\n7 10\n1 10\n100000 186611\n", "output": ["0\n4\n1\n5\n31072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 2\n101011 188450\n", "output": ["1\n3\n3\n1\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 7\n101001 200000\n", "output": ["1\n1\n1\n3\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n101001 200000\n", "output": ["2\n1\n1\n3\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n111001 200000\n", "output": ["2\n1\n1\n3\n20071\n"]}, {"input": "5\n1 4\n1 6\n7 9\n1 7\n111001 200000\n", "output": ["2\n3\n1\n3\n20071\n"]}, {"input": "5\n1 4\n2 6\n7 9\n1 7\n111001 200000\n", "output": ["2\n2\n1\n3\n20071\n"]}, {"input": "5\n2 4\n3 6\n7 9\n1 7\n111001 200000\n", "output": ["1\n1\n1\n3\n20071\n"]}, {"input": "5\n2 8\n3 6\n7 9\n1 7\n111001 200000\n", "output": ["3\n1\n1\n3\n20071\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 4\n100001 200000\n", "output": ["1\n3\n0\n0\n31071\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100000 101573\n", "output": ["0\n3\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 4\n4 5\n4 5\n110000 200000\n", "output": ["1\n1\n0\n0\n21072\n"]}, {"input": "5\n1 2\n1 8\n4 5\n4 10\n110000 200000\n", "output": ["1\n4\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n100100 200000\n", "output": ["0\n6\n0\n2\n30972\n"]}, {"input": "5\n1 2\n4 8\n4 5\n1 5\n100000 200000\n", "output": ["1\n1\n0\n2\n31072\n"]}, {"input": "5\n2 2\n2 8\n1 5\n2 5\n100000 161404\n", "output": ["0\n3\n2\n2\n30333\n"]}, {"input": "5\n1 2\n2 8\n3 6\n4 5\n110000 200000\n", "output": ["1\n3\n1\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 10\n100100 200000\n", "output": ["1\n3\n0\n4\n30972\n"]}, {"input": "5\n1 1\n2 8\n4 5\n4 12\n110000 200000\n", "output": ["0\n3\n0\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n100101 200000\n", "output": ["0\n3\n1\n2\n30971\n"]}, {"input": "5\n1 1\n2 8\n7 9\n1 5\n100000 200000\n", "output": ["0\n3\n1\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 11\n4 5\n110000 200000\n", "output": ["2\n3\n4\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 7\n100101 200000\n", "output": ["1\n3\n0\n2\n30971\n"]}, {"input": "5\n1 2\n2 8\n2 5\n4 13\n110000 200000\n", "output": ["1\n3\n2\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 11\n2 5\n101100 200000\n", "output": ["0\n3\n4\n2\n29972\n"]}, {"input": "5\n1 2\n2 13\n7 9\n1 5\n100000 200000\n", "output": ["1\n6\n1\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 7\n000100 200000\n", "output": ["1\n2\n0\n2\n99933\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101000 135172\n", "output": ["1\n3\n1\n2\n4101\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n100000 200000\n", "output": ["1\n2\n1\n2\n31072\n"]}, {"input": "5\n1 4\n2 7\n7 9\n1 5\n101100 200000\n", "output": ["2\n2\n1\n2\n29972\n"]}, {"input": "5\n2 2\n2 10\n4 5\n4 5\n100000 200000\n", "output": ["0\n4\n0\n0\n31072\n"]}, {"input": "5\n2 4\n2 16\n4 5\n2 5\n100100 200000\n", "output": ["1\n7\n0\n2\n30972\n"]}, {"input": "5\n1 3\n2 2\n4 6\n2 5\n100000 200000\n", "output": ["1\n0\n0\n2\n31072\n"]}, {"input": "5\n2 2\n1 8\n1 5\n4 5\n100000 200000\n", "output": ["0\n4\n2\n0\n31072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n4 4\n100100 200000\n", "output": ["0\n3\n1\n0\n30972\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 8\n100000 200000\n", "output": ["1\n3\n3\n4\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n010001 200000\n", "output": ["2\n3\n0\n0\n91696\n"]}, {"input": "5\n2 2\n1 15\n3 6\n2 5\n101100 200000\n", "output": ["0\n7\n1\n2\n29972\n"]}, {"input": "5\n1 4\n1 8\n4 5\n4 7\n100100 200000\n", "output": ["2\n4\n0\n0\n30972\n"]}, {"input": "5\n4 4\n2 5\n4 5\n2 7\n100100 123776\n", "output": ["0\n2\n0\n2\n0\n"]}, {"input": "5\n1 2\n3 7\n4 5\n6 10\n110000 200000\n", "output": ["1\n1\n0\n2\n21072\n"]}, {"input": "5\n2 2\n2 7\n4 6\n2 11\n100100 200000\n", "output": ["0\n2\n0\n4\n30972\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 3\n100110 200000\n", "output": ["0\n4\n0\n0\n30962\n"]}, {"input": "5\n2 2\n2 10\n3 6\n2 4\n100101 200000\n", "output": ["0\n4\n1\n1\n30971\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 20\n100000 200000\n", "output": ["1\n2\n0\n7\n31072\n"]}, {"input": "5\n2 2\n2 5\n3 6\n2 4\n100101 108244\n", "output": ["0\n2\n1\n1\n0\n"]}, {"input": "5\n2 3\n1 1\n3 6\n2 5\n111100 200000\n", "output": ["0\n0\n1\n2\n19972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n101011 188450\n", "output": ["1\n3\n1\n5\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 14\n101001 200000\n", "output": ["1\n1\n1\n7\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n110001 200000\n", "output": ["2\n1\n1\n3\n21071\n"]}, {"input": "5\n1 4\n3 6\n7 9\n1 13\n111001 200000\n", "output": ["2\n1\n1\n6\n20071\n"]}, {"input": "5\n1 2\n2 13\n4 5\n1 2\n100000 200000\n", "output": ["1\n6\n0\n1\n31072\n"]}, {"input": "5\n2 2\n2 8\n3 5\n2 5\n100000 101573\n", "output": ["0\n3\n1\n2\n0\n"]}, {"input": "5\n1 2\n1 13\n4 5\n4 10\n110000 200000\n", "output": ["1\n6\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n100100 138386\n", "output": ["0\n6\n0\n2\n7315\n"]}, {"input": "5\n1 2\n2 8\n3 8\n4 5\n110000 200000\n", "output": ["1\n3\n2\n0\n21072\n"]}, {"input": "5\n2 2\n2 2\n3 6\n2 5\n100101 200000\n", "output": ["0\n0\n1\n2\n30971\n"]}, {"input": "5\n1 4\n2 5\n4 11\n4 5\n110000 200000\n", "output": ["2\n2\n4\n0\n21072\n"]}, {"input": "5\n1 4\n2 8\n4 5\n2 7\n100101 200000\n", "output": ["2\n3\n0\n2\n30971\n"]}, {"input": "5\n2 2\n1 8\n3 11\n2 5\n101100 200000\n", "output": ["0\n4\n4\n2\n29972\n"]}, {"input": "5\n2 4\n2 7\n4 5\n1 7\n000100 200000\n", "output": ["1\n2\n0\n3\n99933\n"]}, {"input": "5\n1 2\n2 4\n7 9\n1 5\n101000 135172\n", "output": ["1\n1\n1\n2\n4101\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n100001 200000\n", "output": ["1\n2\n1\n2\n31071\n"]}, {"input": "5\n2 2\n2 8\n2 4\n4 5\n110000 200000\n", "output": ["0\n3\n1\n0\n21072\n"]}, {"input": "5\n2 4\n1 16\n4 5\n2 5\n100100 200000\n", "output": ["1\n8\n0\n2\n30972\n"]}, {"input": "5\n2 2\n1 8\n1 5\n4 5\n100000 150693\n", "output": ["0\n4\n2\n0\n19622\n"]}, {"input": "5\n1 2\n2 8\n3 5\n4 5\n110001 200000\n", "output": ["1\n3\n1\n0\n21071\n"]}, {"input": "5\n1 3\n2 8\n4 5\n2 12\n110000 200000\n", "output": ["1\n3\n0\n5\n21072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 8\n100010 200000\n", "output": ["1\n3\n3\n4\n31062\n"]}, {"input": "5\n1 1\n2 4\n4 5\n4 15\n110000 200000\n", "output": ["0\n1\n0\n4\n21072\n"]}, {"input": "5\n1 4\n1 8\n4 5\n3 7\n100100 200000\n", "output": ["2\n4\n0\n1\n30972\n"]}, {"input": "5\n2 2\n3 7\n4 5\n6 10\n110000 200000\n", "output": ["0\n1\n0\n2\n21072\n"]}, {"input": "5\n2 3\n2 8\n1 6\n4 5\n100100 200000\n", "output": ["0\n3\n3\n0\n30972\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 3\n101110 200000\n", "output": ["0\n4\n0\n0\n29962\n"]}, {"input": "5\n1 2\n4 8\n7 9\n2 5\n101011 188450\n", "output": ["1\n1\n1\n2\n30061\n"]}, {"input": "5\n1 2\n4 7\n4 5\n6 20\n100000 200000\n", "output": ["1\n0\n0\n7\n31072\n"]}, {"input": "5\n2 3\n1 2\n3 6\n2 5\n111100 200000\n", "output": ["0\n1\n1\n2\n19972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n101010 188450\n", "output": ["1\n3\n1\n5\n30062\n"]}, {"input": "5\n1 4\n1 3\n7 15\n1 5\n101000 200000\n", "output": ["2\n1\n1\n2\n30072\n"]}, {"input": "5\n1 1\n1 8\n7 8\n1 10\n100010 186611\n", "output": ["0\n4\n1\n5\n31062\n"]}, {"input": "5\n1 2\n1 4\n7 9\n1 14\n101001 200000\n", "output": ["1\n2\n1\n7\n30071\n"]}, {"input": "5\n1 4\n1 3\n9 9\n1 7\n110001 200000\n", "output": ["2\n1\n0\n3\n21071\n"]}, {"input": "5\n1 4\n1 8\n7 9\n1 7\n111001 200000\n", "output": ["2\n4\n1\n3\n20071\n"]}, {"input": "5\n1 4\n3 6\n7 9\n1 9\n111001 200000\n", "output": ["2\n1\n1\n4\n20071\n"]}, {"input": "5\n2 3\n1 8\n4 5\n2 5\n100100 185068\n", "output": ["0\n4\n0\n2\n30972\n"]}, {"input": "5\n1 2\n1 13\n4 5\n1 10\n110000 200000\n", "output": ["1\n6\n0\n5\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n000100 138386\n", "output": ["0\n6\n0\n2\n69139\n"]}, {"input": "5\n1 2\n2 14\n3 8\n4 5\n110000 200000\n", "output": ["1\n6\n2\n0\n21072\n"]}, {"input": "5\n1 2\n2 5\n4 11\n4 5\n110000 200000\n", "output": ["1\n2\n4\n0\n21072\n"]}, {"input": "5\n1 4\n2 5\n4 5\n2 7\n100101 200000\n", "output": ["2\n2\n0\n2\n30971\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 8\n100001 200000\n", "output": ["1\n2\n1\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 4\n4 5\n110000 200000\n", "output": ["0\n0\n1\n0\n21072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 14\n100010 200000\n", "output": ["1\n3\n3\n7\n31062\n"]}, {"input": "5\n1 1\n2 5\n4 5\n4 15\n110000 200000\n", "output": ["0\n2\n0\n4\n21072\n"]}, {"input": "5\n2 2\n3 9\n4 5\n6 10\n110000 200000\n", "output": ["0\n3\n0\n2\n21072\n"]}, {"input": "5\n1 2\n4 8\n7 9\n3 5\n101011 188450\n", "output": ["1\n1\n1\n1\n30061\n"]}, {"input": "5\n1 4\n4 7\n4 5\n6 20\n100000 200000\n", "output": ["2\n0\n0\n7\n31072\n"]}, {"input": "5\n2 3\n1 2\n1 6\n2 5\n111100 200000\n", "output": ["0\n1\n3\n2\n19972\n"]}, {"input": "5\n1 1\n1 8\n7 8\n2 10\n100010 186611\n", "output": ["0\n4\n1\n4\n31062\n"]}, {"input": "5\n1 2\n1 4\n7 9\n1 14\n100001 200000\n", "output": ["1\n2\n1\n7\n31071\n"]}, {"input": "5\n1 4\n1 3\n9 9\n2 7\n110001 200000\n", "output": ["2\n1\n0\n2\n21071\n"]}, {"input": "5\n1 4\n1 8\n7 9\n1 2\n111001 200000\n", "output": ["2\n4\n1\n1\n20071\n"]}, {"input": "5\n1 2\n3 14\n3 8\n4 5\n110000 200000\n", "output": ["1\n5\n2\n0\n21072\n"]}, {"input": "5\n1 4\n2 5\n4 5\n2 8\n100101 200000\n", "output": ["2\n2\n0\n3\n30971\n"]}, {"input": "5\n1 2\n2 12\n7 9\n1 8\n100001 200000\n", "output": ["1\n5\n1\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 4\n4 5\n110100 200000\n", "output": ["0\n0\n1\n0\n20972\n"]}, {"input": "5\n1 1\n4 5\n4 5\n4 15\n110000 200000\n", "output": ["0\n0\n0\n4\n21072\n"]}, {"input": "5\n1 4\n1 16\n4 7\n3 7\n100100 200000\n", "output": ["2\n8\n0\n1\n30972\n"]}, {"input": "5\n1 2\n3 9\n4 5\n6 10\n110000 200000\n", "output": ["1\n3\n0\n2\n21072\n"]}, {"input": "5\n2 3\n1 2\n1 6\n2 5\n101100 200000\n", "output": ["0\n1\n3\n2\n29972\n"]}, {"input": "5\n1 4\n1 3\n9 9\n2 7\n111001 200000\n", "output": ["2\n1\n0\n2\n20071\n"]}, {"input": "5\n1 4\n1 5\n7 9\n1 2\n111001 200000\n", "output": ["2\n2\n1\n1\n20071\n"]}, {"input": "5\n2 2\n2 5\n3 5\n2 5\n101000 129464\n", "output": ["0\n2\n1\n2\n0\n"]}, {"input": "5\n1 2\n2 12\n4 9\n1 8\n100001 200000\n", "output": ["1\n5\n2\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 8\n4 5\n110100 200000\n", "output": ["0\n0\n3\n0\n20972\n"]}, {"input": "5\n1 2\n4 8\n3 5\n4 7\n110001 200000\n", "output": ["1\n1\n1\n0\n21071\n"]}, {"input": "5\n2 3\n2 8\n3 5\n4 12\n110000 200000\n", "output": ["0\n3\n1\n4\n21072\n"]}, {"input": "5\n1 1\n4 5\n4 5\n4 15\n110010 200000\n", "output": ["0\n0\n0\n4\n21062\n"]}, {"input": "5\n1 1\n1 8\n7 14\n2 16\n100010 186611\n", "output": ["0\n4\n1\n7\n31062\n"]}, {"input": "5\n1 6\n1 5\n7 9\n1 2\n111001 200000\n", "output": ["3\n2\n1\n1\n20071\n"]}, {"input": "5\n2 2\n2 5\n3 9\n2 5\n101000 129464\n", "output": ["0\n2\n3\n2\n0\n"]}, {"input": "5\n1 1\n2 12\n4 9\n1 8\n100001 200000\n", "output": ["0\n5\n2\n4\n31071\n"]}, {"input": "5\n1 2\n4 8\n3 5\n1 7\n110001 200000\n", "output": ["1\n1\n1\n3\n21071\n"]}, {"input": "5\n2 3\n2 8\n3 5\n4 12\n010000 200000\n", "output": ["0\n3\n1\n4\n91697\n"]}, {"input": "5\n2 3\n1 3\n1 6\n2 8\n101100 200000\n", "output": ["0\n1\n3\n3\n29972\n"]}, {"input": "5\n1 1\n1 8\n6 14\n2 16\n100010 186611\n", "output": ["0\n4\n2\n7\n31062\n"]}, {"input": "5\n1 6\n1 10\n7 9\n1 2\n111001 200000\n", "output": ["3\n5\n1\n1\n20071\n"]}, {"input": "5\n1 1\n2 12\n4 13\n1 8\n100001 200000\n", "output": ["0\n5\n4\n4\n31071\n"]}, {"input": "5\n1 2\n4 4\n3 5\n1 7\n110001 200000\n", "output": ["1\n0\n1\n3\n21071\n"]}, {"input": "5\n2 3\n1 5\n1 6\n2 8\n101100 200000\n", "output": ["0\n2\n3\n3\n29972\n"]}, {"input": "5\n1 6\n1 10\n9 9\n1 2\n111001 200000\n", "output": ["3\n5\n0\n1\n20071\n"]}, {"input": "5\n1 1\n2 12\n4 13\n1 8\n100000 200000\n", "output": ["0\n5\n4\n4\n31072\n"]}, {"input": "5\n1 2\n4 4\n3 8\n1 7\n110001 200000\n", "output": ["1\n0\n2\n3\n21071\n"]}, {"input": "5\n1 2\n4 4\n3 8\n2 7\n110001 200000\n", "output": ["1\n0\n2\n2\n21071\n"]}, {"input": "5\n2 3\n2 5\n1 6\n2 8\n101101 200000\n", "output": ["0\n2\n3\n3\n29971\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 5\n100000 121445\n", "output": ["1\n4\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n110010 200000\n", "output": ["1\n3\n0\n0\n21062\n"]}, {"input": "5\n1 2\n2 10\n4 5\n4 12\n110000 200000\n", "output": ["1\n4\n0\n4\n21072\n"]}, {"input": "5\n2 2\n4 8\n3 6\n2 5\n100100 200000\n", "output": ["0\n1\n1\n2\n30972\n"]}, {"input": "5\n2 2\n2 7\n1 5\n2 5\n100000 200000\n", "output": ["0\n2\n2\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 13\n100100 200000\n", "output": ["1\n2\n0\n6\n30972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 1\n101000 200000\n", "output": ["1\n3\n1\n0\n30072\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n111100 200000\n", "output": ["1\n2\n1\n2\n19972\n"]}], "task_id": "codecontest/120", "prompt": "You receive an array that includes all integers ranging from [l, r]. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What is the fewest number of elements you can remove from the array? How can you make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits. The challenge is to identify the optimal subset of elements for deletion while achieving a non-zero bitwise AND.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "repair_prompt": ["You receive an array that includes all integers ranging from [l, r]. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What is the fewest number of elements you can remove from the array? How can you make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits. The challenge is to identify the optimal subset of elements for deletion while achieving a non-zero bitwise AND.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements."], "completions": ["from typing import List\n## main.py\n\ndef min_removals_for_non_zero_and(t: int, test_cases: list[tuple[int, int]]) -> list[int]:\n    \"\"\"Calculate the minimum number of elements to remove to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[tuple[int, int]]): List of tuples, each containing two integers l and r.\n\n    Returns:\n        list[int]: List of results for each test case, representing the minimum number of elements to remove.\n    \"\"\"\n    results = []\n    \n    for l, r in test_cases:\n        # Initialize the minimum removals to the maximum possible, which is the size of the range\n        min_removals = r - l + 1\n        \n        # Iterate over each bit position\n        for bit in range(31):  # Assuming 32-bit integers\n            # Calculate the mask for the current bit\n            mask = 1 << bit\n            \n            # Count numbers in the range [l, r] that have the current bit set\n            count_with_bit_set = 0\n            for num in range(l, r + 1):\n                if num & mask:\n                    count_with_bit_set += 1\n            \n            # Calculate the number of removals needed if we want this bit to be set in the AND result\n            removals_needed = (r - l + 1) - count_with_bit_set\n            \n            # Update the minimum removals\n            min_removals = min(min_removals, removals_needed)\n        \n        # Append the result for this test case\n        results.append(min_removals)\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_removals_for_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_for_non_zero_and(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove from each range [l, r]\n    to achieve a non-zero bitwise AND.\n\n    Args:\n        test_cases (List[Tuple[int, int]]): A list of tuples where each tuple contains\n                                            two integers l and r representing the range.\n\n    Returns:\n        List[int]: A list of integers where each integer is the minimum number of elements\n                   to remove from the corresponding range to achieve a non-zero bitwise AND.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Initialize the result for this test case\n        min_removals = float('inf')\n        \n        # Iterate over each bit position\n        for bit in range(32):  # Assuming 32-bit integers\n            # Calculate the mask for the current bit\n            mask = 1 << bit\n            \n            # Count numbers in the range [l, r] that have the current bit set\n            count_with_bit_set = 0\n            for num in range(l, r + 1):\n                if num & mask:\n                    count_with_bit_set += 1\n            \n            # Calculate the number of removals needed to make the AND non-zero\n            # If at least one number has the bit set, we can keep those numbers\n            # and remove the rest\n            removals = (r - l + 1) - count_with_bit_set\n            min_removals = min(min_removals, removals)\n        \n        # Append the result for this test case\n        results.append(min_removals)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    n = int(input())\n    \n    # Read each test case\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Get results for each test case\n    results = min_removals_for_non_zero_and(test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_for_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove from each test case\n    to achieve a non-zero bitwise AND.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples, each containing two integers.\n\n    Returns:\n        List[int]: List of results for each test case, representing the minimum\n                   number of elements to remove.\n    \"\"\"\n    results = []\n    \n    for n, m in test_cases:\n        # Convert the numbers to binary and count the number of 1s\n        n_bin = bin(n)[2:]\n        m_bin = bin(m)[2:]\n        \n        # Pad the shorter binary number with leading zeros\n        max_len = max(len(n_bin), len(m_bin))\n        n_bin = n_bin.zfill(max_len)\n        m_bin = m_bin.zfill(max_len)\n        \n        # Calculate the number of positions where both have 0s\n        zero_positions = sum(1 for i in range(max_len) if n_bin[i] == '0' and m_bin[i] == '0')\n        \n        # The minimum removals needed is the number of zero positions\n        results.append(zero_positions)\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    test_cases = [(int(data[i]), int(data[i+1])) for i in range(1, len(data), 2)]\n    \n    results = min_removals_for_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_for_non_zero_and(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove from an array to achieve a non-zero bitwise AND.\n\n    Args:\n        test_cases (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers (l, r).\n\n    Returns:\n        List[int]: A list of integers representing the minimum number of elements to remove for each test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Calculate the number of elements in the range [l, r]\n        num_elements = r - l + 1\n        \n        # Initialize the minimum removals to the number of elements\n        min_removals = num_elements\n        \n        # Iterate over each bit position\n        for bit in range(32):  # Assuming 32-bit integers\n            # Count how many numbers have the current bit set\n            count_with_bit_set = 0\n            for num in range(l, r + 1):\n                if num & (1 << bit):\n                    count_with_bit_set += 1\n            \n            # Calculate removals needed to make this bit contribute to a non-zero AND\n            removals_for_bit = num_elements - count_with_bit_set\n            min_removals = min(min_removals, removals_for_bit)\n        \n        results.append(min_removals)\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_removals_for_non_zero_and(test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_for_non_zero_and(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove from each range [l, r]\n    to achieve a non-zero bitwise AND of the remaining elements.\n\n    Args:\n        test_cases (List[Tuple[int, int]]): A list of tuples, each containing two integers l and r.\n\n    Returns:\n        List[int]: A list of integers where each integer is the minimum number of elements\n                   to remove for the corresponding test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Initialize the minimum removals to the maximum possible, which is the size of the range\n        min_removals = r - l + 1\n        \n        # Iterate over each bit position\n        for bit in range(31):  # Assuming 32-bit integers\n            # Calculate the mask for the current bit\n            mask = 1 << bit\n            \n            # Count numbers in the range [l, r] that have the current bit set\n            count_with_bit_set = 0\n            for num in range(l, r + 1):\n                if num & mask:\n                    count_with_bit_set += 1\n            \n            # Calculate the number of removals needed to make the AND non-zero\n            # by keeping only numbers with the current bit set\n            removals = (r - l + 1) - count_with_bit_set\n            min_removals = min(min_removals, removals)\n        \n        results.append(min_removals)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    results = min_removals_for_non_zero_and(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers, n and m.\n\n    Returns:\n        List[int]: A list of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    \n    for n, m in test_cases:\n        # Calculate the bitwise AND of all numbers from 1 to m\n        current_and = m\n        for i in range(m - 1, 0, -1):\n            current_and &= i\n            if current_and == 0:\n                break\n        \n        # If the AND is non-zero, no deletions are needed\n        if current_and != 0:\n            results.append(0)\n        else:\n            # If the AND is zero, we need to find the minimum deletions\n            # We need to find the smallest number of elements to remove\n            # such that the AND of the remaining elements is non-zero\n            min_deletions = n\n            for i in range(1, m + 1):\n                current_and = i\n                for j in range(i + 1, m + 1):\n                    current_and &= j\n                    if current_and == 0:\n                        break\n                if current_and != 0:\n                    deletions = n - (m - i + 1)\n                    min_deletions = min(min_deletions, deletions)\n            results.append(min_deletions)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [tuple(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    results = min_deletions_to_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_for_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to achieve a non-zero bitwise AND for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        cases (List[Tuple[int, int]]): A list of tuples, each containing two integers l and r.\n\n    Returns:\n        List[int]: A list of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    \n    for l, r in cases:\n        # Initialize the minimum deletions to the maximum possible, which is the size of the range\n        min_deletions = r - l + 1\n        \n        # Iterate over each bit position\n        for bit in range(31):  # Assuming 32-bit integers\n            # Calculate the mask for the current bit\n            mask = 1 << bit\n            \n            # Count numbers in the range [l, r] that have the current bit set\n            count_with_bit_set = 0\n            for num in range(l, r + 1):\n                if num & mask:\n                    count_with_bit_set += 1\n            \n            # Calculate deletions needed to make the AND non-zero for this bit\n            deletions_needed = (r - l + 1) - count_with_bit_set\n            \n            # Update the minimum deletions\n            min_deletions = min(min_deletions, deletions_needed)\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_for_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of removals required to make the bitwise AND of a range non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples, each containing the start and end of a range.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of removals for each test case.\n    \"\"\"\n    results = []\n    \n    for start, end in test_cases:\n        # Initialize the bitwise AND result with the first number in the range\n        current_and = start\n        removals = 0\n        \n        # Iterate over the range and calculate the bitwise AND\n        for number in range(start + 1, end + 1):\n            current_and &= number\n            # If the AND becomes zero, increment the removal count\n            if current_and == 0:\n                removals += 1\n                # Reset the current_and to the next number to continue checking\n                current_and = number\n        \n        results.append(removals)\n    \n    return results\n\n# Input interface\nimport sys\n\ndef main():\n    input_data = sys.stdin.read().split()\n    t = int(input_data[0])\n    test_cases = [(int(input_data[i]), int(input_data[i+1])) for i in range(1, len(input_data), 2)]\n    \n    # Compute results for each test case\n    results = min_removals_to_non_zero_and(t, test_cases)\n    \n    # Output results via standard output\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_for_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove from the array such that the bitwise AND of the remaining elements is non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): Each test case is a tuple (l, r) representing the range [l, r].\n\n    Returns:\n        List[int]: A list of integers where each integer is the minimum number of removals for the corresponding test case.\n    \"\"\"\n    results = []\n    \n    for l, r in test_cases:\n        # Initialize the minimum removals to the maximum possible value\n        min_removals = r - l + 1\n        \n        # Iterate over each possible bit position\n        for bit in range(31, -1, -1):\n            # Count how many numbers in the range [l, r] have the current bit set\n            count_with_bit_set = 0\n            for num in range(l, r + 1):\n                if num & (1 << bit):\n                    count_with_bit_set += 1\n            \n            # Calculate the number of removals needed if we want this bit to be set in the result\n            removals_needed = (r - l + 1) - count_with_bit_set\n            min_removals = min(min_removals, removals_needed)\n        \n        results.append(min_removals)\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().split()\n    t = int(data[0])\n    test_cases = [(int(data[i]), int(data[i+1])) for i in range(1, len(data), 2)]\n    \n    # Output interface\n    results = min_removals_for_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_for_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove from each range to achieve a non-zero bitwise AND.\n\n    Args:\n        t (int): The number of test cases.\n        cases (List[Tuple[int, int]]): A list of tuples, each containing two integers l and r.\n\n    Returns:\n        List[int]: A list of integers where each integer represents the minimum number of elements to remove\n                   for the corresponding test case to achieve a non-zero bitwise AND.\n    \"\"\"\n    results = []\n    \n    for l, r in cases:\n        # Initialize the minimum removals to the maximum possible, which is the size of the range\n        min_removals = r - l + 1\n        \n        # Iterate over each bit position\n        for bit in range(32):  # Assuming 32-bit integers\n            # Count numbers with this bit set\n            count_with_bit_set = 0\n            for i in range(l, r + 1):\n                if i & (1 << bit):\n                    count_with_bit_set += 1\n            \n            # Calculate removals needed to ensure non-zero AND for this bit\n            removals_for_bit = (r - l + 1) - count_with_bit_set\n            \n            # Update minimum removals\n            min_removals = min(min_removals, removals_for_bit)\n        \n        results.append(min_removals)\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split()\n    t = int(data[0])\n    cases = [(int(data[i]), int(data[i+1])) for i in range(1, len(data), 2)]\n    \n    # Output results\n    results = min_removals_for_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires determining the minimum number of elements to remove from an array to ensure the bitwise AND of the remaining elements is non-zero. The solution must efficiently handle up to 10,000 test cases with array ranges up to 200,000.\nrequirement pool:\n- Implement an efficient algorithm to solve the problem for large input sizes.\n- Ensure the solution is optimal and provides the correct output for each test case.\n- Optimize the solution to handle edge cases and large ranges effectively.\n- Provide clear documentation and comments within the code for maintainability.\n- Consider potential improvements for future versions, such as handling additional constraints.\nWe will iterate over each test case, generate the array from l to r, and determine the minimum number of elements to remove to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has all bits set in positions where the AND result is non-zero. We will use bit manipulation to efficiently find the solution.\n", "requirement analysis:\nThe problem requires identifying the minimum number of elements to remove from an array to achieve a non-zero bitwise AND. The solution must efficiently handle up to 10,000 test cases with array sizes up to 200,000 elements. The challenge lies in optimizing the subset selection for deletion while ensuring the bitwise AND is non-zero.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently\n- Optimize the solution for large input sizes\n- Ensure the solution handles edge cases correctly\n- Provide detailed documentation and comments in the code\n- Test the solution with a variety of test cases\nWe will iterate over each test case, generate the array from l to r, and determine the minimum number of elements to remove to achieve a non-zero bitwise AND. The key observation is that the bitwise AND of a range of numbers is non-zero if there is a common bit set in all numbers. We can use bit manipulation to efficiently find the minimum number of elements to remove.\n", "requirement analysis:\nThe problem requires identifying the minimum number of elements to remove from an array to achieve a non-zero bitwise AND. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000, ensuring performance and memory optimization.\nrequirement pool:\n- Efficiently compute the bitwise AND for large ranges.\n- Optimize the solution for performance and memory usage.\n- Ensure the solution is scalable for multiple test cases.\n- Provide clear and concise output for each test case.\n- Maintain code readability and maintainability.\nWe will use a greedy algorithm to determine the minimum number of elements to remove from the array to achieve a non-zero bitwise AND. The approach involves iterating through the array and checking the bitwise AND of subsets, removing elements that contribute to a zero result. We will leverage Python's built-in capabilities for bitwise operations and efficient list manipulation.\n", "requirement analysis:\nThe problem requires identifying the minimum number of elements to remove from an array to achieve a non-zero bitwise AND. The solution must efficiently handle up to 10,000 test cases with array sizes up to 200,000 elements. The challenge lies in optimizing the subset selection to minimize removals while ensuring the bitwise AND is non-zero.\nrequirement pool:\n- Implement efficient algorithm to compute minimal removals for non-zero bitwise AND.\n- Ensure solution handles large input sizes within time constraints.\n- Provide clear output format for each test case.\n- Optimize code for readability and maintainability.\n- Include comments and documentation for understanding the solution approach.\nWe will implement a function that calculates the minimum number of elements to remove from an array to achieve a non-zero bitwise AND. The approach involves iterating over the range [l, r] and determining the optimal subset of elements to remove. We will use bit manipulation techniques to efficiently compute the result for each test case.\n", "requirement analysis:\nThe problem requires finding the minimum number of elements to remove from an array to achieve a non-zero bitwise AND. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000. The key challenge is optimizing the subset selection for deletion while ensuring the bitwise AND is non-zero.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently\n- Ensure the solution handles edge cases and large input sizes\n- Optimize the code for performance and memory usage\n- Provide clear documentation and comments in the code\n- Develop test cases to validate the solution\nWe will iterate over each test case, generate the array from l to r, and determine the minimum number of elements to remove to achieve a non-zero bitwise AND. The key observation is that the bitwise AND of a range of numbers is non-zero if there is a common bit set in all numbers. We can use bit manipulation to efficiently find the minimum number of elements to remove.\n", "requirement analysis:\nThe problem requires determining the minimum number of elements to remove from a range of integers such that the bitwise AND of the remaining elements is non-zero. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000.\nrequirement pool:\n- Implement an efficient algorithm to solve the problem for large input sizes.\n- Ensure the solution outputs the correct minimum number of deletions for each test case.\n- Optimize the algorithm to reduce execution time.\n- Handle edge cases where l equals r or the range is minimal.\n- Provide detailed comments and documentation for the code.\nWe will use a mathematical approach to determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a bit set in a position where all other numbers also have that bit set. We will iterate over the range and calculate the bitwise AND progressively, keeping track of the minimum number of deletions required.\n", "requirement analysis:\nThe problem requires identifying the minimum number of elements to remove from an array to achieve a non-zero bitwise AND. The solution must efficiently handle up to 10,000 test cases with array ranges up to 200,000. The key challenge is optimizing the subset selection to minimize deletions while ensuring the bitwise AND is non-zero.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently\n- Ensure the solution handles edge cases and large inputs\n- Optimize the solution for performance and memory usage\n- Test the solution against a variety of test cases\n- Provide clear documentation and comments in the code\nWe will iterate over each test case, generate the array from l to r, and then determine the minimum number of elements to remove to achieve a non-zero bitwise AND. The key observation is that the bitwise AND of a range of numbers is non-zero if there is a common bit set in all numbers. We can use bit manipulation to efficiently find the minimum number of deletions required.\n", "requirement analysis:\nThe problem requires finding the minimum number of elements to remove from a range of integers such that the bitwise AND of the remaining elements is non-zero. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently.\n- Ensure the solution handles edge cases and large inputs.\n- Optimize the solution for performance and memory usage.\n- Write comprehensive test cases to validate the solution.\n- Document the code for maintainability and clarity.\nWe will use a greedy approach to solve the problem. The key observation is that the bitwise AND of a range of numbers is zero if there exists a pair of numbers in the range whose AND is zero. To make the AND non-zero, we need to remove elements that cause the AND to be zero. We will iterate over the range and calculate the bitwise AND, removing elements as necessary to achieve a non-zero result. This approach will efficiently handle large ranges and multiple test cases.\n", "requirement analysis:\nThe problem requires determining the minimum number of elements to remove from a given range of integers such that the bitwise AND of the remaining elements is non-zero. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently.\n- Ensure the solution can handle the maximum input constraints.\n- Optimize the algorithm for speed and memory usage.\n- Provide detailed comments and documentation for the code.\n- Include additional test cases to cover edge scenarios.\nWe will implement a function that calculates the minimum number of elements to remove from the array such that the bitwise AND of the remaining elements is non-zero. The approach involves iterating through the range and checking the bitwise AND of subsets, leveraging efficient bit manipulation techniques to minimize computational overhead. Given the constraints, we will focus on optimizing the algorithm to handle large ranges and multiple test cases efficiently.\n", "requirement analysis:\nThe problem requires finding the minimum number of elements to remove from an array to make the bitwise AND of the remaining elements non-zero. The solution must efficiently handle up to 10,000 test cases with array ranges up to 200,000.\nrequirement pool:\n- Develop an algorithm to determine the minimum number of elements to remove.\n- Ensure the solution is optimized for large input sizes.\n- Provide detailed comments and documentation for the code.\n- Implement comprehensive test cases to validate the solution.\n- Explore alternative algorithms for potential optimization.\nWe will iterate over each test case, generate the array from l to r, and determine the minimum number of elements to remove to achieve a non-zero bitwise AND. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a bit set in all positions where the numbers in the range have bits set. We will use bit manipulation to efficiently find the minimum number of elements to remove.\n"], "scores": [], "pass_results": [true, false, true, true, false, false, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 213, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "mutate_method": "rephrase_one", "parent_index": 120}
