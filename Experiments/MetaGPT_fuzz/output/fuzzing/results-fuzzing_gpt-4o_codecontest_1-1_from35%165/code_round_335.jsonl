{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive integers. He wrote down the sums of all non-empty subsequences of this array. He arranged them in ascending order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive integers. He wrote down the sums of all non-empty subsequences of this array. He arranged them in ascending order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers 'b'.\n\n    Returns:\n        List[List[int]]: A list of lists, where each list is the original array 'a' for the corresponding test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to easily identify the elements of a\n        b.sort()\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # The smallest three elements in b are the elements of a\n        a = b[:3]\n        # Verify that the sum of a matches the largest element in b\n        if sum(a) == sum_a:\n            results.append(a)\n        else:\n            # If the sum does not match, it indicates an error in input\n            # This should not happen as per problem statement\n            raise ValueError(\"Invalid input: sum of smallest three elements does not match the largest element.\")\n    return results\n\n# Input interface\nnum_test_cases = int(input())\ntest_cases = [list(map(int, input().split())) for i in range(num_test_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of four integers.\n\n    Returns:\n        List[List[int]]: A list of original arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the case to easily identify the smallest and largest elements\n        case.sort()\n        # The smallest two elements are the first two in the sorted list\n        a1 = case[0]\n        a2 = case[1]\n        # The largest element is the sum of the original three elements\n        sum_a = case[3]\n        # The third element of the original array can be found by subtracting the sum of the first two from the total sum\n        a3 = sum_a - a1 - a2\n        # Append the result as a list of the original array\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n\n    # Get the results from the restore_original_array function\n    results = restore_original_array(test_cases)\n\n    # Output each original array\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the list to easily find the smallest and largest sums\n        case.sort()\n        \n        # The smallest three numbers are the individual elements of the original array\n        a1 = case[0]\n        a2 = case[1]\n        \n        # The largest number is the sum of all three elements\n        sum_all = case[-1]\n        \n        # Calculate the third element using the sum of all three\n        a3 = sum_all - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a sorted array 'b'.\n\n    Returns:\n        List[List[int]]: List of restored arrays 'a' for each test case.\n    \"\"\"\n    restored_arrays = []\n    \n    for case in test_cases:\n        # The smallest three numbers in 'b' are the individual elements of 'a'\n        # The largest number in 'b' is the sum of all three elements of 'a'\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[2]\n        # The sum of a1, a2, a3 is the largest element in 'b'\n        sum_a = case[-1]\n        \n        # Restore the original array 'a'\n        restored_array = [a1, a2, a3]\n        restored_arrays.append(restored_array)\n    \n    return restored_arrays\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    result = restore_array(t, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given array 'b' which contains\n    the smallest, second smallest, and the sum of all elements of 'a'.\n\n    Args:\n        b (List[int]): A list of 7 integers where the first two are the smallest\n                       elements of 'a' and the last is the sum of all elements of 'a'.\n\n    Returns:\n        List[int]: The restored array 'a' of 4 integers.\n    \"\"\"\n    # Sort the array b to ensure the smallest and second smallest elements are at the start\n    b.sort()\n    \n    # The smallest element in b is the smallest element of a\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element of a\n    a2 = b[1]\n    # The sum of all elements of a is the largest element in b\n    sum_a = b[-1]\n    \n    # Calculate the remaining two elements of a\n    # a3 + a4 = sum_a - a1 - a2\n    a3_plus_a4 = sum_a - a1 - a2\n    \n    # The third element of a is the third smallest element in b\n    a3 = b[2]\n    \n    # Calculate the fourth element of a\n    a4 = a3_plus_a4 - a3\n    \n    return [a1, a2, a3, a4]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of sums of all non-empty subsequences of the original array.\n\n    Returns:\n        List[int]: The original array.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    smallest = b[0]\n    \n    # The largest element in b is the sum of all elements in a\n    total_sum = b[-1]\n    \n    # The second largest element in b is the sum of the two largest elements in a\n    second_largest_sum = b[-2]\n    \n    # Deduce the three elements of a\n    a1 = smallest\n    a2 = second_largest_sum - smallest\n    a3 = total_sum - second_largest_sum\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array 'a' from the given array 'b' which contains\n    the sorted elements of 'a' and the sum of all elements of 'a'.\n\n    Args:\n        b (List[int]): The input list containing sorted elements of 'a' and the sum of 'a'.\n\n    Returns:\n        List[int]: The original array 'a'.\n    \"\"\"\n    # The original array 'a' is derived by excluding the last element of 'b',\n    # which is the sum of all elements of 'a'.\n    return b[:-1]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])  # Number of test cases\n    results = []\n    \n    for i in range(1, t + 1):\n        b = list(map(int, data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(' '.join(map(str, result)))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array from the given sorted array b.\n\n    Args:\n        b (List[int]): A sorted list of integers representing sums of elements.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original elements a.\n    a1 = b[0]\n    # The largest element in b is the sum of all three elements of a.\n    sum_all = b[-1]\n    # The second largest element in b is the sum of the two largest elements of a.\n    sum_two_largest = b[-2]\n    \n    # Deduce the original elements\n    a2 = sum_two_largest - a1\n    a3 = sum_all - sum_two_largest\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read input from standard input\n    data = sys.stdin.read().strip().split('\\n')\n    t = int(data[0])  # Number of test cases\n    results = []\n    \n    for i in range(1, t + 1):\n        # Parse the input for each test case\n        b = list(map(int, data[i].split()))\n        # Restore the original array\n        result = restore_original_array(b)\n        # Append the result as a space-separated string\n        results.append(' '.join(map(str, result)))\n    \n    # Print all results for each test case\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given test cases.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array to easily identify the smallest three numbers and the largest number\n        sorted_case = sorted(case)\n        # The smallest three numbers are the original elements\n        a1, a2, a3 = sorted_case[0], sorted_case[1], sorted_case[2]\n        # The largest number is the sum of the original elements\n        sum_a = sorted_case[-1]\n        # Append the restored array to results\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the results from the restore_array function\n    results = restore_array(t, test_cases)\n    \n    # Print each result in the required format\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array from the given sorted array of sums.\n\n    Args:\n        b (List[int]): A sorted list of integers representing sums of elements.\n\n    Returns:\n        List[int]: The original array of integers.\n    \"\"\"\n    # The smallest element in b is one of the original elements a\n    a1 = b[0]\n    # The largest element in b is the sum of all three elements of a\n    a1_a2_a3 = b[-1]\n    # The second largest element in b is the sum of the two largest elements of a\n    a2_a3 = b[-2]\n    \n    # Calculate the original elements\n    a2 = a2_a3 - a1\n    a3 = a1_a2_a3 - a2_a3\n    \n    return [a1, a2, a3]\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        b = list(map(int, data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(' '.join(map(str, result)))\n    for res in results:\n        print(res)\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output format must be clear and adhere to the specified format.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide clear and accurate output format\n- Optimize computational resources\nWe will solve the problem by leveraging the properties of the subsequence sums. The largest number in the sorted array b is the sum of all elements in a. The smallest three numbers in b are the individual elements of a. By identifying these elements, we can reconstruct the original array a. This approach is efficient and straightforward, ensuring scalability for up to 5000 test cases.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output format must be consistent and clear.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution handles up to 5000 test cases efficiently\n- Format output correctly for each test case\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. By using these observations, we can deduce the original array a by selecting the smallest, second smallest, and the difference between the largest and the sum of the smallest two elements in b.\n", "requirement analysis:\nThe task requires reconstructing an array of three integers from the sums of its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases, each with 7 integers.\nrequirement pool:\n- Develop a function to restore the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for clarity and maintainability.\n- Include edge case handling for large integer values.\n- Provide detailed comments and documentation for the code.\nWe will use a straightforward approach to reconstruct the original array from the given sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. By using these observations, we can efficiently determine the values of a_1, a_2, and a_3.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output.\nrequirement pool:\n- Efficiently compute the original array from the given sums.\n- Ensure the solution handles maximum constraints smoothly.\n- Provide clear and correct output for each test case.\n- Optimize the solution for large integer values.\n- Document the solution for better understanding.\nWe will use a straightforward approach to restore the original array 'a' from the given sorted array 'b'. The key observation is that the smallest three numbers in 'b' are the individual elements of 'a', and the largest number in 'b' is the sum of all three elements of 'a'. This allows us to directly deduce the values of 'a' from 'b'.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest sums in the sorted array b, which correspond to the individual elements and their pairwise sums.\nrequirement pool:\n- Implement the main algorithm to restore the array a from b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values in b.\n- Provide clear documentation and comments in the code.\n- Include additional test cases to cover edge scenarios.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of a, the second smallest element in b is the second smallest element of a, and the largest element in b is the sum of all elements of a. This allows us to directly deduce the elements of a from b.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from the sums of its non-empty subsequences. Given the constraints, the solution must efficiently handle up to 5000 test cases with large integer values. The approach should leverage the properties of subsequences and sorted sums to deduce the original integers.\nrequirement pool:\n- Implement the main algorithm to deduce the original array from the given sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is robust against edge cases and provides correct output.\n- Provide clear documentation and comments within the code for maintainability.\n- Consider additional test cases to validate the solution's correctness.\nWe will leverage the properties of the sorted array b to deduce the original array a. Since b is the sorted list of all non-empty subsequences of a, the smallest element in b is the smallest element in a. The largest element in b is the sum of all elements in a. The second largest element in b is the sum of the two largest elements in a. Using these properties, we can deduce the three elements of a.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest sums in the sorted array b, which correspond to the individual elements and their combinations. The solution must handle up to 5000 test cases efficiently.\nrequirement pool:\n- Implement the main algorithm to restore the array a from b.\n- Optimize the solution for large input sizes.\n- Ensure the solution is easy to read and maintain.\n- Handle edge cases and validate input constraints.\n- Provide detailed comments and documentation.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of a, the second smallest element in b is the second smallest element of a, and the largest element in b is the sum of all elements of a. This allows us to directly deduce the original array a from b.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and quick computation.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution is easy to understand and maintain.\n- Optimize for both speed and memory usage.\n- Provide detailed comments and documentation.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a. We will use Python's built-in capabilities to handle input and output efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output should be clear and adhere to the specified format.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution is robust against edge cases.\n- Provide clear and concise output for each test case.\n- Optimize the solution for large integer values.\nWe will solve the problem by recognizing that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these observations, we can efficiently restore the original array a for each test case.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from the sums of its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases, each with large integer values.\nrequirement pool:\n- Efficiently process up to 5000 test cases.\n- Correctly restore the original array from the given subsequence sums.\n- Handle large integer values up to 10^9.\n- Ensure the output format is clear and correct.\n- Provide a user-friendly interface for input and output.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a from b efficiently. We will use basic list operations and arithmetic to achieve this, ensuring the solution is efficient enough to handle up to 5000 test cases.\n"], "scores": [], "pass_results": [true, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 335, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 189}
