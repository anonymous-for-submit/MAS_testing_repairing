{"name": "1615_B. And It's Non-Zero", "description": "You are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "tags": ["bitmasks", "greedy", "math"], "difficulty": 8, "id": 1615, "sample_io": [{"input": "5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n", "output": ["1\n3\n0\n2\n31072\n"]}], "test_list": [{"input": "5\n1 2\n2 8\n4 5\n2 5\n100000 200000\n", "output": ["1\n3\n0\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n100000 200000\n", "output": ["1\n3\n0\n0\n31072\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 5\n100000 200000\n", "output": ["1\n4\n0\n2\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100000 200000\n", "output": ["0\n3\n0\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n110000 200000\n", "output": ["1\n3\n0\n0\n21072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100100 200000\n", "output": ["0\n3\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 10\n110000 200000\n", "output": ["1\n3\n0\n3\n21072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n1 5\n100001 200000\n", "output": ["1\n3\n0\n2\n31071\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n100000 104325\n", "output": ["1\n3\n0\n0\n0\n"]}, {"input": "5\n2 2\n2 8\n1 5\n2 5\n100000 200000\n", "output": ["0\n3\n2\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 12\n110000 200000\n", "output": ["1\n3\n0\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n100100 200000\n", "output": ["0\n3\n1\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n4 9\n1 5\n100000 200000\n", "output": ["1\n3\n2\n2\n31072\n"]}, {"input": "5\n2 2\n2 12\n1 5\n2 5\n100000 200000\n", "output": ["0\n5\n2\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n110000 200000\n", "output": ["2\n3\n0\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 7\n100100 200000\n", "output": ["1\n3\n0\n2\n30972\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n101100 200000\n", "output": ["0\n3\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n100000 200000\n", "output": ["1\n3\n1\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 7\n100100 200000\n", "output": ["1\n2\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101000 200000\n", "output": ["1\n3\n1\n2\n30072\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n101000 200000\n", "output": ["1\n2\n1\n2\n30072\n"]}, {"input": "5\n2 4\n1 8\n4 5\n2 7\n100100 200000\n", "output": ["1\n4\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n101100 200000\n", "output": ["1\n2\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n4 5\n3 5\n100000 200000\n", "output": ["1\n3\n0\n1\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n4 5\n100000 200000\n", "output": ["0\n3\n0\n0\n31072\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 1\n100000 200000\n", "output": ["1\n4\n0\n0\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n4 5\n110000 200000\n", "output": ["0\n3\n0\n0\n21072\n"]}, {"input": "5\n2 2\n2 16\n4 5\n2 5\n100100 200000\n", "output": ["0\n7\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 7\n4 5\n4 10\n110000 200000\n", "output": ["1\n2\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 7\n4 6\n2 5\n100100 200000\n", "output": ["0\n2\n0\n2\n30972\n"]}, {"input": "5\n2 2\n2 8\n1 5\n4 5\n100000 200000\n", "output": ["0\n3\n2\n0\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 6\n4 5\n110001 200000\n", "output": ["1\n3\n0\n0\n21071\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 7\n100110 200000\n", "output": ["0\n3\n0\n2\n30962\n"]}, {"input": "5\n1 2\n2 8\n4 5\n7 12\n110000 200000\n", "output": ["1\n3\n0\n1\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 4\n100100 200000\n", "output": ["0\n3\n1\n1\n30972\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 5\n100000 200000\n", "output": ["1\n3\n3\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n010000 200000\n", "output": ["2\n3\n0\n0\n91697\n"]}, {"input": "5\n1 2\n2 4\n4 5\n4 13\n110000 200000\n", "output": ["1\n1\n0\n4\n21072\n"]}, {"input": "5\n2 2\n1 8\n3 6\n2 5\n101100 200000\n", "output": ["0\n4\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n100000 200000\n", "output": ["1\n3\n1\n5\n31072\n"]}, {"input": "5\n1 4\n1 7\n4 5\n2 7\n100100 200000\n", "output": ["2\n3\n0\n2\n30972\n"]}, {"input": "5\n1 4\n1 8\n4 5\n2 7\n100100 200000\n", "output": ["2\n4\n0\n2\n30972\n"]}, {"input": "5\n2 4\n2 5\n4 5\n2 7\n100100 123776\n", "output": ["1\n2\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 10\n110000 200000\n", "output": ["1\n2\n0\n2\n21072\n"]}, {"input": "5\n2 2\n2 8\n1 6\n4 5\n100000 200000\n", "output": ["0\n3\n3\n0\n31072\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 7\n100110 200000\n", "output": ["0\n4\n0\n2\n30962\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 4\n100101 200000\n", "output": ["0\n3\n1\n1\n30971\n"]}, {"input": "5\n2 2\n1 1\n3 6\n2 5\n101100 200000\n", "output": ["0\n0\n1\n2\n29972\n"]}, {"input": "5\n1 2\n1 8\n7 9\n1 10\n100000 200000\n", "output": ["1\n4\n1\n5\n31072\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101010 188450\n", "output": ["1\n3\n1\n2\n30062\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 20\n110000 200000\n", "output": ["1\n2\n0\n7\n21072\n"]}, {"input": "5\n2 2\n2 8\n1 2\n4 5\n100000 200000\n", "output": ["0\n3\n1\n0\n31072\n"]}, {"input": "5\n2 2\n2 5\n3 6\n2 4\n100101 200000\n", "output": ["0\n2\n1\n1\n30971\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101011 188450\n", "output": ["1\n3\n1\n2\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 5\n101000 200000\n", "output": ["1\n1\n1\n2\n30072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 5\n101011 188450\n", "output": ["1\n3\n3\n2\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 5\n101001 200000\n", "output": ["1\n1\n1\n2\n30071\n"]}, {"input": "5\n1 1\n1 8\n7 10\n1 10\n100000 186611\n", "output": ["0\n4\n1\n5\n31072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 2\n101011 188450\n", "output": ["1\n3\n3\n1\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 7\n101001 200000\n", "output": ["1\n1\n1\n3\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n101001 200000\n", "output": ["2\n1\n1\n3\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n111001 200000\n", "output": ["2\n1\n1\n3\n20071\n"]}, {"input": "5\n1 4\n1 6\n7 9\n1 7\n111001 200000\n", "output": ["2\n3\n1\n3\n20071\n"]}, {"input": "5\n1 4\n2 6\n7 9\n1 7\n111001 200000\n", "output": ["2\n2\n1\n3\n20071\n"]}, {"input": "5\n2 4\n3 6\n7 9\n1 7\n111001 200000\n", "output": ["1\n1\n1\n3\n20071\n"]}, {"input": "5\n2 8\n3 6\n7 9\n1 7\n111001 200000\n", "output": ["3\n1\n1\n3\n20071\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 4\n100001 200000\n", "output": ["1\n3\n0\n0\n31071\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100000 101573\n", "output": ["0\n3\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 4\n4 5\n4 5\n110000 200000\n", "output": ["1\n1\n0\n0\n21072\n"]}, {"input": "5\n1 2\n1 8\n4 5\n4 10\n110000 200000\n", "output": ["1\n4\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n100100 200000\n", "output": ["0\n6\n0\n2\n30972\n"]}, {"input": "5\n1 2\n4 8\n4 5\n1 5\n100000 200000\n", "output": ["1\n1\n0\n2\n31072\n"]}, {"input": "5\n2 2\n2 8\n1 5\n2 5\n100000 161404\n", "output": ["0\n3\n2\n2\n30333\n"]}, {"input": "5\n1 2\n2 8\n3 6\n4 5\n110000 200000\n", "output": ["1\n3\n1\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 10\n100100 200000\n", "output": ["1\n3\n0\n4\n30972\n"]}, {"input": "5\n1 1\n2 8\n4 5\n4 12\n110000 200000\n", "output": ["0\n3\n0\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n100101 200000\n", "output": ["0\n3\n1\n2\n30971\n"]}, {"input": "5\n1 1\n2 8\n7 9\n1 5\n100000 200000\n", "output": ["0\n3\n1\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 11\n4 5\n110000 200000\n", "output": ["2\n3\n4\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 7\n100101 200000\n", "output": ["1\n3\n0\n2\n30971\n"]}, {"input": "5\n1 2\n2 8\n2 5\n4 13\n110000 200000\n", "output": ["1\n3\n2\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 11\n2 5\n101100 200000\n", "output": ["0\n3\n4\n2\n29972\n"]}, {"input": "5\n1 2\n2 13\n7 9\n1 5\n100000 200000\n", "output": ["1\n6\n1\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 7\n000100 200000\n", "output": ["1\n2\n0\n2\n99933\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101000 135172\n", "output": ["1\n3\n1\n2\n4101\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n100000 200000\n", "output": ["1\n2\n1\n2\n31072\n"]}, {"input": "5\n1 4\n2 7\n7 9\n1 5\n101100 200000\n", "output": ["2\n2\n1\n2\n29972\n"]}, {"input": "5\n2 2\n2 10\n4 5\n4 5\n100000 200000\n", "output": ["0\n4\n0\n0\n31072\n"]}, {"input": "5\n2 4\n2 16\n4 5\n2 5\n100100 200000\n", "output": ["1\n7\n0\n2\n30972\n"]}, {"input": "5\n1 3\n2 2\n4 6\n2 5\n100000 200000\n", "output": ["1\n0\n0\n2\n31072\n"]}, {"input": "5\n2 2\n1 8\n1 5\n4 5\n100000 200000\n", "output": ["0\n4\n2\n0\n31072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n4 4\n100100 200000\n", "output": ["0\n3\n1\n0\n30972\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 8\n100000 200000\n", "output": ["1\n3\n3\n4\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n010001 200000\n", "output": ["2\n3\n0\n0\n91696\n"]}, {"input": "5\n2 2\n1 15\n3 6\n2 5\n101100 200000\n", "output": ["0\n7\n1\n2\n29972\n"]}, {"input": "5\n1 4\n1 8\n4 5\n4 7\n100100 200000\n", "output": ["2\n4\n0\n0\n30972\n"]}, {"input": "5\n4 4\n2 5\n4 5\n2 7\n100100 123776\n", "output": ["0\n2\n0\n2\n0\n"]}, {"input": "5\n1 2\n3 7\n4 5\n6 10\n110000 200000\n", "output": ["1\n1\n0\n2\n21072\n"]}, {"input": "5\n2 2\n2 7\n4 6\n2 11\n100100 200000\n", "output": ["0\n2\n0\n4\n30972\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 3\n100110 200000\n", "output": ["0\n4\n0\n0\n30962\n"]}, {"input": "5\n2 2\n2 10\n3 6\n2 4\n100101 200000\n", "output": ["0\n4\n1\n1\n30971\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 20\n100000 200000\n", "output": ["1\n2\n0\n7\n31072\n"]}, {"input": "5\n2 2\n2 5\n3 6\n2 4\n100101 108244\n", "output": ["0\n2\n1\n1\n0\n"]}, {"input": "5\n2 3\n1 1\n3 6\n2 5\n111100 200000\n", "output": ["0\n0\n1\n2\n19972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n101011 188450\n", "output": ["1\n3\n1\n5\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 14\n101001 200000\n", "output": ["1\n1\n1\n7\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n110001 200000\n", "output": ["2\n1\n1\n3\n21071\n"]}, {"input": "5\n1 4\n3 6\n7 9\n1 13\n111001 200000\n", "output": ["2\n1\n1\n6\n20071\n"]}, {"input": "5\n1 2\n2 13\n4 5\n1 2\n100000 200000\n", "output": ["1\n6\n0\n1\n31072\n"]}, {"input": "5\n2 2\n2 8\n3 5\n2 5\n100000 101573\n", "output": ["0\n3\n1\n2\n0\n"]}, {"input": "5\n1 2\n1 13\n4 5\n4 10\n110000 200000\n", "output": ["1\n6\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n100100 138386\n", "output": ["0\n6\n0\n2\n7315\n"]}, {"input": "5\n1 2\n2 8\n3 8\n4 5\n110000 200000\n", "output": ["1\n3\n2\n0\n21072\n"]}, {"input": "5\n2 2\n2 2\n3 6\n2 5\n100101 200000\n", "output": ["0\n0\n1\n2\n30971\n"]}, {"input": "5\n1 4\n2 5\n4 11\n4 5\n110000 200000\n", "output": ["2\n2\n4\n0\n21072\n"]}, {"input": "5\n1 4\n2 8\n4 5\n2 7\n100101 200000\n", "output": ["2\n3\n0\n2\n30971\n"]}, {"input": "5\n2 2\n1 8\n3 11\n2 5\n101100 200000\n", "output": ["0\n4\n4\n2\n29972\n"]}, {"input": "5\n2 4\n2 7\n4 5\n1 7\n000100 200000\n", "output": ["1\n2\n0\n3\n99933\n"]}, {"input": "5\n1 2\n2 4\n7 9\n1 5\n101000 135172\n", "output": ["1\n1\n1\n2\n4101\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n100001 200000\n", "output": ["1\n2\n1\n2\n31071\n"]}, {"input": "5\n2 2\n2 8\n2 4\n4 5\n110000 200000\n", "output": ["0\n3\n1\n0\n21072\n"]}, {"input": "5\n2 4\n1 16\n4 5\n2 5\n100100 200000\n", "output": ["1\n8\n0\n2\n30972\n"]}, {"input": "5\n2 2\n1 8\n1 5\n4 5\n100000 150693\n", "output": ["0\n4\n2\n0\n19622\n"]}, {"input": "5\n1 2\n2 8\n3 5\n4 5\n110001 200000\n", "output": ["1\n3\n1\n0\n21071\n"]}, {"input": "5\n1 3\n2 8\n4 5\n2 12\n110000 200000\n", "output": ["1\n3\n0\n5\n21072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 8\n100010 200000\n", "output": ["1\n3\n3\n4\n31062\n"]}, {"input": "5\n1 1\n2 4\n4 5\n4 15\n110000 200000\n", "output": ["0\n1\n0\n4\n21072\n"]}, {"input": "5\n1 4\n1 8\n4 5\n3 7\n100100 200000\n", "output": ["2\n4\n0\n1\n30972\n"]}, {"input": "5\n2 2\n3 7\n4 5\n6 10\n110000 200000\n", "output": ["0\n1\n0\n2\n21072\n"]}, {"input": "5\n2 3\n2 8\n1 6\n4 5\n100100 200000\n", "output": ["0\n3\n3\n0\n30972\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 3\n101110 200000\n", "output": ["0\n4\n0\n0\n29962\n"]}, {"input": "5\n1 2\n4 8\n7 9\n2 5\n101011 188450\n", "output": ["1\n1\n1\n2\n30061\n"]}, {"input": "5\n1 2\n4 7\n4 5\n6 20\n100000 200000\n", "output": ["1\n0\n0\n7\n31072\n"]}, {"input": "5\n2 3\n1 2\n3 6\n2 5\n111100 200000\n", "output": ["0\n1\n1\n2\n19972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n101010 188450\n", "output": ["1\n3\n1\n5\n30062\n"]}, {"input": "5\n1 4\n1 3\n7 15\n1 5\n101000 200000\n", "output": ["2\n1\n1\n2\n30072\n"]}, {"input": "5\n1 1\n1 8\n7 8\n1 10\n100010 186611\n", "output": ["0\n4\n1\n5\n31062\n"]}, {"input": "5\n1 2\n1 4\n7 9\n1 14\n101001 200000\n", "output": ["1\n2\n1\n7\n30071\n"]}, {"input": "5\n1 4\n1 3\n9 9\n1 7\n110001 200000\n", "output": ["2\n1\n0\n3\n21071\n"]}, {"input": "5\n1 4\n1 8\n7 9\n1 7\n111001 200000\n", "output": ["2\n4\n1\n3\n20071\n"]}, {"input": "5\n1 4\n3 6\n7 9\n1 9\n111001 200000\n", "output": ["2\n1\n1\n4\n20071\n"]}, {"input": "5\n2 3\n1 8\n4 5\n2 5\n100100 185068\n", "output": ["0\n4\n0\n2\n30972\n"]}, {"input": "5\n1 2\n1 13\n4 5\n1 10\n110000 200000\n", "output": ["1\n6\n0\n5\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n000100 138386\n", "output": ["0\n6\n0\n2\n69139\n"]}, {"input": "5\n1 2\n2 14\n3 8\n4 5\n110000 200000\n", "output": ["1\n6\n2\n0\n21072\n"]}, {"input": "5\n1 2\n2 5\n4 11\n4 5\n110000 200000\n", "output": ["1\n2\n4\n0\n21072\n"]}, {"input": "5\n1 4\n2 5\n4 5\n2 7\n100101 200000\n", "output": ["2\n2\n0\n2\n30971\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 8\n100001 200000\n", "output": ["1\n2\n1\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 4\n4 5\n110000 200000\n", "output": ["0\n0\n1\n0\n21072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 14\n100010 200000\n", "output": ["1\n3\n3\n7\n31062\n"]}, {"input": "5\n1 1\n2 5\n4 5\n4 15\n110000 200000\n", "output": ["0\n2\n0\n4\n21072\n"]}, {"input": "5\n2 2\n3 9\n4 5\n6 10\n110000 200000\n", "output": ["0\n3\n0\n2\n21072\n"]}, {"input": "5\n1 2\n4 8\n7 9\n3 5\n101011 188450\n", "output": ["1\n1\n1\n1\n30061\n"]}, {"input": "5\n1 4\n4 7\n4 5\n6 20\n100000 200000\n", "output": ["2\n0\n0\n7\n31072\n"]}, {"input": "5\n2 3\n1 2\n1 6\n2 5\n111100 200000\n", "output": ["0\n1\n3\n2\n19972\n"]}, {"input": "5\n1 1\n1 8\n7 8\n2 10\n100010 186611\n", "output": ["0\n4\n1\n4\n31062\n"]}, {"input": "5\n1 2\n1 4\n7 9\n1 14\n100001 200000\n", "output": ["1\n2\n1\n7\n31071\n"]}, {"input": "5\n1 4\n1 3\n9 9\n2 7\n110001 200000\n", "output": ["2\n1\n0\n2\n21071\n"]}, {"input": "5\n1 4\n1 8\n7 9\n1 2\n111001 200000\n", "output": ["2\n4\n1\n1\n20071\n"]}, {"input": "5\n1 2\n3 14\n3 8\n4 5\n110000 200000\n", "output": ["1\n5\n2\n0\n21072\n"]}, {"input": "5\n1 4\n2 5\n4 5\n2 8\n100101 200000\n", "output": ["2\n2\n0\n3\n30971\n"]}, {"input": "5\n1 2\n2 12\n7 9\n1 8\n100001 200000\n", "output": ["1\n5\n1\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 4\n4 5\n110100 200000\n", "output": ["0\n0\n1\n0\n20972\n"]}, {"input": "5\n1 1\n4 5\n4 5\n4 15\n110000 200000\n", "output": ["0\n0\n0\n4\n21072\n"]}, {"input": "5\n1 4\n1 16\n4 7\n3 7\n100100 200000\n", "output": ["2\n8\n0\n1\n30972\n"]}, {"input": "5\n1 2\n3 9\n4 5\n6 10\n110000 200000\n", "output": ["1\n3\n0\n2\n21072\n"]}, {"input": "5\n2 3\n1 2\n1 6\n2 5\n101100 200000\n", "output": ["0\n1\n3\n2\n29972\n"]}, {"input": "5\n1 4\n1 3\n9 9\n2 7\n111001 200000\n", "output": ["2\n1\n0\n2\n20071\n"]}, {"input": "5\n1 4\n1 5\n7 9\n1 2\n111001 200000\n", "output": ["2\n2\n1\n1\n20071\n"]}, {"input": "5\n2 2\n2 5\n3 5\n2 5\n101000 129464\n", "output": ["0\n2\n1\n2\n0\n"]}, {"input": "5\n1 2\n2 12\n4 9\n1 8\n100001 200000\n", "output": ["1\n5\n2\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 8\n4 5\n110100 200000\n", "output": ["0\n0\n3\n0\n20972\n"]}, {"input": "5\n1 2\n4 8\n3 5\n4 7\n110001 200000\n", "output": ["1\n1\n1\n0\n21071\n"]}, {"input": "5\n2 3\n2 8\n3 5\n4 12\n110000 200000\n", "output": ["0\n3\n1\n4\n21072\n"]}, {"input": "5\n1 1\n4 5\n4 5\n4 15\n110010 200000\n", "output": ["0\n0\n0\n4\n21062\n"]}, {"input": "5\n1 1\n1 8\n7 14\n2 16\n100010 186611\n", "output": ["0\n4\n1\n7\n31062\n"]}, {"input": "5\n1 6\n1 5\n7 9\n1 2\n111001 200000\n", "output": ["3\n2\n1\n1\n20071\n"]}, {"input": "5\n2 2\n2 5\n3 9\n2 5\n101000 129464\n", "output": ["0\n2\n3\n2\n0\n"]}, {"input": "5\n1 1\n2 12\n4 9\n1 8\n100001 200000\n", "output": ["0\n5\n2\n4\n31071\n"]}, {"input": "5\n1 2\n4 8\n3 5\n1 7\n110001 200000\n", "output": ["1\n1\n1\n3\n21071\n"]}, {"input": "5\n2 3\n2 8\n3 5\n4 12\n010000 200000\n", "output": ["0\n3\n1\n4\n91697\n"]}, {"input": "5\n2 3\n1 3\n1 6\n2 8\n101100 200000\n", "output": ["0\n1\n3\n3\n29972\n"]}, {"input": "5\n1 1\n1 8\n6 14\n2 16\n100010 186611\n", "output": ["0\n4\n2\n7\n31062\n"]}, {"input": "5\n1 6\n1 10\n7 9\n1 2\n111001 200000\n", "output": ["3\n5\n1\n1\n20071\n"]}, {"input": "5\n1 1\n2 12\n4 13\n1 8\n100001 200000\n", "output": ["0\n5\n4\n4\n31071\n"]}, {"input": "5\n1 2\n4 4\n3 5\n1 7\n110001 200000\n", "output": ["1\n0\n1\n3\n21071\n"]}, {"input": "5\n2 3\n1 5\n1 6\n2 8\n101100 200000\n", "output": ["0\n2\n3\n3\n29972\n"]}, {"input": "5\n1 6\n1 10\n9 9\n1 2\n111001 200000\n", "output": ["3\n5\n0\n1\n20071\n"]}, {"input": "5\n1 1\n2 12\n4 13\n1 8\n100000 200000\n", "output": ["0\n5\n4\n4\n31072\n"]}, {"input": "5\n1 2\n4 4\n3 8\n1 7\n110001 200000\n", "output": ["1\n0\n2\n3\n21071\n"]}, {"input": "5\n1 2\n4 4\n3 8\n2 7\n110001 200000\n", "output": ["1\n0\n2\n2\n21071\n"]}, {"input": "5\n2 3\n2 5\n1 6\n2 8\n101101 200000\n", "output": ["0\n2\n3\n3\n29971\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 5\n100000 121445\n", "output": ["1\n4\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n110010 200000\n", "output": ["1\n3\n0\n0\n21062\n"]}, {"input": "5\n1 2\n2 10\n4 5\n4 12\n110000 200000\n", "output": ["1\n4\n0\n4\n21072\n"]}, {"input": "5\n2 2\n4 8\n3 6\n2 5\n100100 200000\n", "output": ["0\n1\n1\n2\n30972\n"]}, {"input": "5\n2 2\n2 7\n1 5\n2 5\n100000 200000\n", "output": ["0\n2\n2\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 13\n100100 200000\n", "output": ["1\n2\n0\n6\n30972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 1\n101000 200000\n", "output": ["1\n3\n1\n0\n30072\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n111100 200000\n", "output": ["1\n2\n1\n2\n19972\n"]}], "task_id": "codecontest/120", "prompt": "You are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What is the fewest number of elements you can remove from the array? How can you make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that processes two binary representations of equal length by performing the AND operation on each pair of bits. The challenge is to identify the optimal subset of elements for deletion while achieving a non-zero bitwise AND.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "repair_prompt": ["You are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What is the fewest number of elements you can remove from the array? How can you make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that processes two binary representations of equal length by performing the AND operation on each pair of bits. The challenge is to identify the optimal subset of elements for deletion while achieving a non-zero bitwise AND.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport sys\n\ndef min_removals_for_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove such that the bitwise AND of the remaining elements is non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples, each containing the range [l, r].\n\n    Returns:\n        List[int]: List of results for each test case, representing the minimum number of removals.\n    \"\"\"\n    results = []\n    \n    for l, r in test_cases:\n        # If l and r are the same, no removal is needed as the AND is non-zero\n        if l == r:\n            results.append(0)\n            continue\n        \n        # Calculate the number of bits in the range\n        num_bits = r.bit_length()\n        \n        # Initialize the minimum removals to the size of the range\n        min_removals = r - l + 1\n        \n        # Iterate over each bit position\n        for bit in range(num_bits):\n            # Calculate the mask for the current bit\n            mask = 1 << bit\n            \n            # Check if the current bit is set in both l and r\n            if (l & mask) == (r & mask):\n                # If the bit is set in both, no need to remove elements for this bit\n                continue\n            \n            # Calculate the number of elements to remove to make the AND non-zero\n            # Remove elements from the start of the range until the bit is set\n            removals_start = (l | mask) - l\n            # Remove elements from the end of the range until the bit is set\n            removals_end = r - (r & ~mask)\n            \n            # Update the minimum removals\n            min_removals = min(min_removals, removals_start, removals_end)\n        \n        results.append(min_removals)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().split()\n    t = int(input_data[0])\n    test_cases = [(int(input_data[i]), int(input_data[i+1])) for i in range(1, len(input_data), 2)]\n    \n    results = min_removals_for_non_zero_and(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_for_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required for each test case\n    to ensure the bitwise AND of the remaining elements is non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples, each containing two integers\n            representing the start and end of a range of consecutive integers.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of deletions\n        required for each test case.\n    \"\"\"\n    results = []\n    \n    for start, end in test_cases:\n        # Calculate the bitwise AND of the entire range\n        current_and = start\n        for num in range(start + 1, end + 1):\n            current_and &= num\n            if current_and == 0:\n                break\n        \n        # If the AND is already non-zero, no deletions are needed\n        if current_and != 0:\n            results.append(0)\n            continue\n        \n        # Otherwise, calculate the minimum deletions required\n        # We need to find the longest prefix of numbers whose AND is non-zero\n        min_deletions = end - start + 1  # Start with the maximum possible deletions\n        \n        # Iterate over the range to find the longest prefix with non-zero AND\n        for i in range(start, end + 1):\n            prefix_and = i\n            deletions = 0\n            for j in range(i + 1, end + 1):\n                prefix_and &= j\n                if prefix_and == 0:\n                    break\n                deletions += 1\n            \n            # Calculate deletions needed to achieve non-zero AND\n            min_deletions = min(min_deletions, (end - start + 1) - (deletions + 1))\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_for_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_for_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove from each range [l, r]\n    to achieve a non-zero bitwise AND.\n\n    Args:\n        t (int): Number of test cases.\n        cases (List[Tuple[int, int]]): List of tuples, each containing the range [l, r].\n\n    Returns:\n        List[int]: List of results for each test case, representing the minimum number\n                   of elements to remove to achieve a non-zero bitwise AND.\n    \"\"\"\n    results = []\n    \n    for l, r in cases:\n        # Initialize the minimum removals to the size of the range\n        min_removals = r - l + 1\n        \n        # Iterate over each bit position\n        for bit in range(32):  # Assuming 32-bit integers\n            # Find the first number in the range with the current bit set\n            first_with_bit_set = None\n            for num in range(l, r + 1):\n                if num & (1 << bit):\n                    first_with_bit_set = num\n                    break\n            \n            if first_with_bit_set is not None:\n                # Calculate the number of elements to remove\n                # All elements before `first_with_bit_set` need to be removed\n                removals = first_with_bit_set - l\n                min_removals = min(min_removals, removals)\n        \n        results.append(min_removals)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    results = min_removals_for_non_zero_and(n, cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        cases (List[Tuple[int, int]]): List of tuples, each containing two integers representing the range.\n\n    Returns:\n        List[int]: List of results for each test case, representing the minimum deletions required.\n    \"\"\"\n    results = []\n    \n    for case in cases:\n        l, r = case\n        # Initialize the minimum deletions to the maximum possible value\n        min_deletions = r - l + 1\n        \n        # Iterate over the range to find the minimum deletions\n        for i in range(l, r + 1):\n            current_and = i\n            deletions = 0\n            \n            for j in range(l, r + 1):\n                if i & j == 0:\n                    deletions += 1\n            \n            # Update the minimum deletions if a better solution is found\n            min_deletions = min(min_deletions, deletions)\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    cases = [tuple(map(int, input(): \").split())) for _ in range(t)]\n    results = min_deletions_to_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_for_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove from each range [l, r]\n    such that the bitwise AND of the remaining elements is non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        cases (List[Tuple[int, int]]): List of tuples, each containing the range [l, r].\n\n    Returns:\n        List[int]: List of minimum removals for each test case.\n    \"\"\"\n    results = []\n    \n    for l, r in cases:\n        # Initialize the result for this case\n        min_removals = float('inf')\n        \n        # Iterate over each bit position\n        for bit in range(31):  # Assuming 32-bit integers\n            # Count numbers in the range [l, r] that have the current bit set\n            count_with_bit_set = 0\n            for num in range(l, r + 1):\n                if num & (1 << bit):\n                    count_with_bit_set += 1\n            \n            # Calculate the number of removals needed if we want this bit to be set\n            removals_needed = (r - l + 1) - count_with_bit_set\n            min_removals = min(min_removals, removals_needed)\n        \n        results.append(min_removals)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_removals_for_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_for_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove from an array of consecutive integers\n    such that the bitwise AND of the remaining elements is non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        cases (List[Tuple[int, int]]): List of tuples, each containing two integers l and r.\n\n    Returns:\n        List[int]: List of results for each test case, representing the minimum deletions required.\n    \"\"\"\n    results = []\n    \n    for l, r in cases:\n        # Initialize the minimum deletions to the maximum possible, which is the length of the range\n        min_deletions = r - l + 1\n        \n        # Iterate over all possible starting points of the subarray\n        for start in range(l, r + 1):\n            current_and = start\n            deletions = 0\n            \n            # Iterate over the rest of the elements in the range\n            for num in range(start + 1, r + 1):\n                current_and &= num\n                if current_and == 0:\n                    # If AND becomes zero, break as further elements will not help\n                    break\n                deletions += 1\n            \n            # Calculate deletions needed to achieve non-zero AND\n            total_deletions = (r - l + 1) - (deletions + 1)\n            min_deletions = min(min_deletions, total_deletions)\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_for_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_to_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        cases (List[Tuple[int, int]]): List of tuples, each containing the range [l, r].\n\n    Returns:\n        List[int]: List of results for each test case, representing the minimum number of elements to remove.\n    \"\"\"\n    results = []\n    \n    for l, r in cases:\n        # Initialize the minimum removals to the maximum possible, which is the size of the range\n        min_removals = r - l + 1\n        \n        # Iterate over each bit position (assuming 32-bit integers)\n        for bit in range(32):\n            # Count numbers in the range [l, r] that have the current bit set\n            count_with_bit_set = 0\n            for num in range(l, r + 1):\n                if num & (1 << bit):\n                    count_with_bit_set += 1\n            \n            # Calculate the number of removals needed if we want this bit to be the distinguishing bit\n            removals_needed = (r - l + 1) - count_with_bit_set\n            min_removals = min(min_removals, removals_needed)\n        \n        results.append(min_removals)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_removals_to_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_for_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove such that the bitwise AND of the remaining elements is non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples, each containing two integers l and r.\n\n    Returns:\n        List[int]: List of results for each test case, representing the minimum number of removals.\n    \"\"\"\n    results = []\n    \n    for l, r in test_cases:\n        # Initialize the result for this test case\n        min_removals = r - l + 1  # Start with the maximum possible removals\n        \n        # Iterate over all possible subarrays\n        for start in range(l, r + 1):\n            current_and = start\n            for end in range(start, r + 1):\n                current_and &= end\n                if current_and != 0:\n                    # Calculate the number of removals needed\n                    removals = (start - l) + (r - end)\n                    min_removals = min(min_removals, removals)\n        \n        results.append(min_removals)\n    \n    return results\n\n# Input interface\nif __name__ == '__main__':\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_removals_for_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_removals_for_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of elements to remove from each range [l, r]\n    to achieve a non-zero bitwise AND.\n\n    Args:\n        t (int): Number of test cases.\n        cases (List[Tuple[int, int]]): List of tuples, each containing the range [l, r].\n\n    Returns:\n        List[int]: List of minimum removals for each test case.\n    \"\"\"\n    results = []\n    \n    for l, r in cases:\n        # Initialize the minimum removals to the size of the range\n        min_removals = r - l + 1\n        \n        # Iterate over each bit position\n        for bit in range(32):  # Assuming 32-bit integers\n            # Count numbers with the current bit set\n            count_with_bit_set = 0\n            \n            for num in range(l, r + 1):\n                if num & (1 << bit):\n                    count_with_bit_set += 1\n            \n            # Calculate removals needed if we want this bit to be the distinguishing bit\n            removals = (r - l + 1) - count_with_bit_set\n            \n            # Update the minimum removals\n            min_removals = min(min_removals, removals)\n        \n        results.append(min_removals)\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_removals_for_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of a range non-zero.\n\n    Args:\n        t (int): The number of test cases.\n        cases (List[Tuple[int, int]]): A list of tuples, each containing two integers l and r.\n\n    Returns:\n        List[int]: A list of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    \n    for l, r in cases:\n        # Initialize the minimum deletions to the maximum possible, which is the size of the range\n        min_deletions = r - l + 1\n        \n        # Iterate over each bit position\n        for bit in range(32):  # Assuming 32-bit integers\n            # Count numbers in the range [l, r] that have the current bit set\n            count_with_bit_set = 0\n            for num in range(l, r + 1):\n                if num & (1 << bit):\n                    count_with_bit_set += 1\n            \n            # Calculate deletions needed if we want to keep numbers with this bit set\n            deletions_needed = (r - l + 1) - count_with_bit_set\n            min_deletions = min(min_deletions, deletions_needed)\n        \n        results.append(min_deletions)\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_to_non_zero_and(t, cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe problem requires identifying the minimum number of elements to remove from an array to achieve a non-zero bitwise AND. The solution must efficiently handle up to 10,000 test cases with array sizes up to 200,000 elements. The key challenge is optimizing the subset selection for deletion while ensuring the bitwise AND is non-zero.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently\n- Ensure the solution handles edge cases and large input sizes\n- Optimize the solution for performance and accuracy\n- Provide clear and concise output for each test case\n- Maintain code readability and ease of maintenance\nWe will implement a function that iterates over the range [l, r] and calculates the bitwise AND for subsets of the array. The goal is to find the minimum number of elements to remove such that the bitwise AND of the remaining elements is non-zero. We will use efficient bit manipulation techniques to achieve this, ensuring the solution handles up to 10,000 test cases efficiently.\n", "requirement analysis:\nThe problem requires finding the minimum number of elements to remove from an array of consecutive integers such that the bitwise AND of the remaining elements is non-zero. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000.\nrequirement pool:\n- Develop an algorithm to find the minimum number of deletions for a non-zero bitwise AND.\n- Ensure the solution is optimized for large input sizes.\n- Provide clear documentation and examples for understanding the solution.\n- Implement error handling for edge cases.\n- Optimize the solution for specific patterns in input data.\nWe will develop an efficient algorithm to determine the minimum number of elements to remove from an array of consecutive integers such that the bitwise AND of the remaining elements is non-zero. The approach involves analyzing the binary representation of the numbers in the range and identifying the optimal subset of elements for deletion. We will use Python's built-in capabilities for bitwise operations and efficient list handling.\n", "requirement analysis:\nThe problem requires identifying the minimum number of elements to remove from an array to achieve a non-zero bitwise AND. The solution must efficiently handle up to 10,000 test cases and ranges up to 200,000, ensuring performance and correctness.\nrequirement pool:\n- Implement the main algorithm to solve the problem\n- Optimize the solution for large input sizes\n- Ensure the solution handles edge cases\n- Test the solution with multiple test cases\n- Document the solution and approach\nWe will iterate over each test case, and for each range [l, r], we will determine the minimum number of elements to remove to achieve a non-zero bitwise AND. The key observation is that the bitwise AND of a range is non-zero if there exists a number in the range that has a bit set in all numbers. We will use bit manipulation to efficiently find the solution.\n", "requirement analysis:\nThe problem requires determining the minimum number of elements to remove from an array of consecutive integers such that the bitwise AND of the remaining elements is non-zero. The solution must efficiently handle up to 10,000 test cases with input sizes up to 200,000.\nrequirement pool:\n- Implement an efficient algorithm to determine the minimum deletions required.\n- Ensure the solution handles the maximum constraints effectively.\n- Optimize the solution for performance and scalability.\n- Provide clear and concise output for each test case.\n- Consider edge cases and ensure robustness of the solution.\nWe will implement an efficient algorithm to determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a bit set in all positions where the numbers in the range have bits set. We will iterate over the range and calculate the bitwise AND, keeping track of the minimum number of deletions required. The solution will be optimized to handle up to 10,000 test cases efficiently.\n", "requirement analysis:\nThe problem requires finding the minimum number of elements to remove from an array of consecutive integers such that the bitwise AND of the remaining elements is non-zero. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently.\n- Ensure the solution handles edge cases and large inputs effectively.\n- Optimize the algorithm for performance and memory usage.\n- Provide detailed comments and documentation for the code.\n- Create a set of test cases to validate the solution.\nWe will iterate over each test case, and for each range [l, r], we will determine the minimum number of elements to remove such that the bitwise AND of the remaining elements is non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a bit set in a position where all other numbers in the range also have that bit set. We can use bit manipulation to efficiently determine the minimum number of elements to remove.\n", "requirement analysis:\nThe problem requires determining the minimum number of elements to remove from an array of consecutive integers such that the bitwise AND of the remaining elements is non-zero. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000.\nrequirement pool:\n- Implement an efficient algorithm to solve the problem for large input sizes\n- Ensure the solution handles edge cases, such as the smallest and largest possible values of l and r\n- Optimize the solution to minimize execution time and memory usage\n- Provide detailed comments and documentation for the code\n- Include test cases to validate the solution against known outputs\nWe will implement a function that calculates the minimum number of elements to remove from an array of consecutive integers [l, r] such that the bitwise AND of the remaining elements is non-zero. The approach involves iterating over the range and checking the bitwise AND properties to determine the minimum deletions required. The solution will be optimized to handle up to 10,000 test cases efficiently.\n", "requirement analysis:\nThe problem requires finding the minimum number of elements to remove from an array to make the bitwise AND of the remaining elements non-zero. The solution must efficiently handle up to 10,000 test cases with array sizes up to 200,000.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently.\n- Ensure the solution handles edge cases and large inputs.\n- Optimize the algorithm for speed and memory usage.\n- Provide detailed comments and documentation for the code.\n- Develop test cases to validate the solution.\nWe will iterate over each test case, and for each range [l, r], we will determine the minimum number of elements to remove to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a bit set in a position where all other numbers in the range have it unset. We will use bit manipulation to efficiently determine the minimum number of elements to remove.\n", "requirement analysis:\nThe problem requires identifying the minimum number of elements to remove from an array to achieve a non-zero bitwise AND. The solution must efficiently handle up to 10,000 test cases with array sizes up to 200,000 elements.\nrequirement pool:\n- Implement efficient algorithm to solve the problem\n- Ensure solution handles maximum input constraints\n- Optimize for speed and accuracy\n- Provide clear documentation of the solution\n- Include edge case handling\nWe will implement a function that iterates over the range [l, r] and calculates the bitwise AND of the elements. The goal is to find the minimum number of elements to remove such that the bitwise AND of the remaining elements is non-zero. We will use a greedy approach to identify the optimal subset of elements for deletion. The solution will efficiently handle up to 10,000 test cases with array sizes up to 200,000 elements.\n", "requirement analysis:\nThe problem requires finding the minimum number of elements to remove from an array to achieve a non-zero bitwise AND. The solution must efficiently handle up to 10,000 test cases with array sizes up to 200,000. The key challenge is optimizing the subset selection for deletion while ensuring the bitwise AND is non-zero.\nrequirement pool:\n- Implement the main algorithm to solve the problem\n- Optimize the solution for large input sizes\n- Ensure the solution handles edge cases\n- Verify the correctness of the output\n- Test the solution against multiple test cases\nWe will iterate over each test case, and for each range [l, r], we will determine the minimum number of elements to remove to achieve a non-zero bitwise AND. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a bit set in a position where all other numbers in the range have it unset. We will use bit manipulation to efficiently determine the minimum number of elements to remove.\n", "requirement analysis:\nThe problem requires finding the minimum number of elements to remove from an array to make the bitwise AND of the remaining elements non-zero. The solution must efficiently handle up to 10,000 test cases with input ranges up to 200,000. The algorithm should focus on identifying patterns or properties of numbers that can help reduce the problem size or simplify the computation.\nrequirement pool:\n- Develop an algorithm to find the minimum number of elements to remove.\n- Ensure the solution is optimized for large input sizes.\n- Provide clear and concise output for each test case.\n- Handle edge cases and ensure robustness of the solution.\n- Document the solution approach and any assumptions made.\nWe will iterate over each test case and for each range [l, r], we will determine the minimum number of elements to remove to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a bit set in all positions where the numbers in the range have bits set. We will use bit manipulation to efficiently determine the minimum number of deletions required.\n"], "scores": [], "pass_results": [true, false, false, false, true, false, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 295, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "mutate_method": "rephrase_one", "parent_index": 120}
