{"name": "1622_A. Construct a Rectangle", "description": "There are three sticks with integer lengths l_1, l_2 and l_3.\n\nYou are asked to break exactly one of them into two pieces in such a way that: \n\n  * both pieces have positive (strictly greater than 0) integer length; \n  * the total length of the pieces is equal to the original length of the stick; \n  * it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. \n\n\n\nA square is also considered a rectangle.\n\nDetermine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "tags": ["geometry", "math"], "difficulty": 7, "id": 1622, "sample_io": [{"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["YES\nNO\nYES\nYES\n"]}], "test_list": [{"input": "2\n1 2 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 99\n", "output": ["YES\n"]}, {"input": "3\n1 1 1\n2 1 3\n5 6 7\n", "output": ["NO\nYES\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 10 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nYES\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n7 101 108\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n12344 1 1\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 5 6\n", "output": ["YES\nNO\n"]}, {"input": "2\n1 3 3\n2 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n1 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100000 100000 100100\n", "output": ["YES\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 1 3\n4 5 6\n", "output": ["NO\nNO\n"]}, {"input": "4\n6 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["YES\nNO\nYES\nYES\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n2 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 1\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n2 1 3\n1 5 6\n", "output": ["YES\nYES\n"]}, {"input": "4\n6 1 10\n2 6 2\n2 4 2\n7 101 144\n", "output": ["NO\nYES\nYES\nNO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "68\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 3\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n", "output": ["YES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"]}, {"input": "2\n1 2 3\n4 8 6\n", "output": ["YES\nNO\n"]}, {"input": "3\n1 1 1\n1 1 2\n5 6 12\n", "output": ["NO\nYES\nNO\n"]}, {"input": "4\n6 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["NO\nYES\nNO\nNO\n"]}, {"input": "3\n2 1 1\n1 1 2\n5 6 12\n", "output": ["YES\nYES\nNO\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n2 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 9\n", "output": ["NO\nNO\nYES\n"]}, {"input": "6\n2 2 4\n1 1 1\n3 5 18\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n1 1 10\n2 6 2\n3 4 2\n7 101 144\n", "output": ["YES\nYES\nNO\nNO\n"]}, {"input": "3\n3 1 1\n2 2 2\n1 8 9\n", "output": ["NO\nYES\nYES\n"]}, {"input": "1\n12344 2 1\n", "output": ["NO\n"]}, {"input": "1\n2 98 186\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 6 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "1\n100010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n1 5 6\n", "output": ["NO\nYES\n"]}, {"input": "1\n2 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n100110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 4 1\n", "output": ["NO\n"]}, {"input": "1\n1 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 2\n3 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100110 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n20237 3 1\n", "output": ["NO\n"]}, {"input": "1\n100111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n1 8 12\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n100011 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 3 2\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 101001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n100011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111001\n", "output": ["NO\n"]}, {"input": "1\n100011 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 111111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 000011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011100\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011000\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010011 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001100\n", "output": ["NO\n"]}, {"input": "1\n010111 100011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001000\n", "output": ["NO\n"]}, {"input": "1\n010111 000011 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 001001\n", "output": ["NO\n"]}, {"input": "1\n010111 100010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000001\n", "output": ["NO\n"]}, {"input": "1\n010111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 000011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 100011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101011\n", "output": ["NO\n"]}, {"input": "1\n000111 000010 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 000011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 100011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101011 101010\n", "output": ["NO\n"]}, {"input": "1\n000111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101001 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 101101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n010111 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n010101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101010\n", "output": ["NO\n"]}, {"input": "1\n110101 001101 101110\n", "output": ["NO\n"]}, {"input": "1\n110101 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101101 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101100 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101110\n", "output": ["NO\n"]}, {"input": "1\n110111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101010\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 101011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100011\n", "output": ["NO\n"]}, {"input": "1\n111111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n011111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 101100 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 111110 100010\n", "output": ["NO\n"]}, {"input": "1\n010111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n100111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001111 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n001101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011110 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011111 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 011101 100010\n", "output": ["NO\n"]}, {"input": "1\n000101 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100011\n", "output": ["NO\n"]}, {"input": "1\n000001 111101 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100000\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 100010\n", "output": ["NO\n"]}, {"input": "1\n000001 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n000011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000011\n", "output": ["NO\n"]}, {"input": "1\n100011 111001 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 000010\n", "output": ["NO\n"]}, {"input": "1\n100011 111101 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 001010\n", "output": ["NO\n"]}, {"input": "1\n100011 111100 011010\n", "output": ["NO\n"]}, {"input": "1\n100011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101011 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n001111 110100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011110\n", "output": ["NO\n"]}, {"input": "1\n101111 010100 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 011010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111010\n", "output": ["NO\n"]}, {"input": "1\n101111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111011\n", "output": ["NO\n"]}, {"input": "1\n001111 010000 111001\n", "output": ["NO\n"]}, {"input": "2\n1 4 3\n2 2 4\n", "output": ["YES\nYES\n"]}, {"input": "1\n1 98 108\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 6 7\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100010 100000 100000\n", "output": ["YES\n"]}, {"input": "1\n2465 1 1\n", "output": ["NO\n"]}, {"input": "4\n6 2 5\n2 5 2\n2 4 2\n5 5 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "2\n1 3 3\n4 2 4\n", "output": ["NO\nYES\n"]}, {"input": "1\n3 98 186\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n5 6 7\n", "output": ["YES\nNO\nNO\n"]}, {"input": "6\n2 2 4\n1 1 2\n3 5 10\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n6 1 10\n2 3 2\n2 4 2\n7 101 108\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "1\n100010 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n19251 2 1\n", "output": ["NO\n"]}, {"input": "2\n1 1 3\n4 5 1\n", "output": ["NO\nYES\n"]}, {"input": "4\n9 1 5\n2 5 2\n2 4 2\n5 9 4\n", "output": ["NO\nNO\nYES\nYES\n"]}, {"input": "6\n2 2 6\n1 1 2\n3 10 6\n1 2 3\n6 7 8\n10 11 20\n", "output": ["YES\nYES\nNO\nYES\nNO\nNO\n"]}, {"input": "4\n10 1 10\n2 5 2\n2 4 2\n7 101 179\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n110010 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n8323 2 1\n", "output": ["NO\n"]}, {"input": "1\n3 98 239\n", "output": ["NO\n"]}, {"input": "3\n1 1 1\n2 1 4\n5 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "4\n6 1 9\n2 5 2\n2 4 2\n7 101 144\n", "output": ["NO\nNO\nYES\nNO\n"]}, {"input": "1\n101110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n21283 4 1\n", "output": ["NO\n"]}, {"input": "2\n2 1 3\n1 5 5\n", "output": ["YES\nNO\n"]}, {"input": "1\n1 98 468\n", "output": ["NO\n"]}, {"input": "1\n110110 100000 100100\n", "output": ["NO\n"]}, {"input": "1\n35510 2 1\n", "output": ["NO\n"]}, {"input": "3\n2 1 1\n2 1 2\n3 8 17\n", "output": ["YES\nNO\nNO\n"]}, {"input": "1\n110111 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n12451 3 1\n", "output": ["NO\n"]}, {"input": "3\n3 1 1\n2 1 2\n1 8 12\n", "output": ["NO\nNO\nNO\n"]}, {"input": "1\n100001 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n21851 2 2\n", "output": ["NO\n"]}, {"input": "1\n100010 101000 100100\n", "output": ["NO\n"]}, {"input": "1\n100011 100001 100000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 100010\n", "output": ["NO\n"]}, {"input": "1\n110011 000001 110000\n", "output": ["NO\n"]}, {"input": "1\n101011 001001 110000\n", "output": ["NO\n"]}, {"input": "1\n110011 001001 111000\n", "output": ["NO\n"]}, {"input": "1\n101011 001101 111000\n", "output": ["NO\n"]}, {"input": "1\n100011 011101 111001\n", "output": ["NO\n"]}, {"input": "1\n100001 001101 111011\n", "output": ["NO\n"]}, {"input": "1\n100011 001111 011011\n", "output": ["NO\n"]}, {"input": "1\n101011 001110 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 001110 110011\n", "output": ["YES\n"]}, {"input": "1\n110111 001010 111011\n", "output": ["NO\n"]}, {"input": "1\n010011 001011 111011\n", "output": ["NO\n"]}, {"input": "1\n110111 000011 111011\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011111\n", "output": ["NO\n"]}, {"input": "1\n010011 000011 011111\n", "output": ["NO\n"]}, {"input": "1\n110011 010011 011101\n", "output": ["NO\n"]}, {"input": "1\n110010 100011 011101\n", "output": ["NO\n"]}, {"input": "1\n110011 100011 011110\n", "output": ["NO\n"]}, {"input": "1\n111011 100011 011000\n", "output": ["YES\n"]}, {"input": "1\n110011 000011 001100\n", "output": ["NO\n"]}, {"input": "1\n010110 100011 001100\n", "output": ["NO\n"]}], "task_id": "codecontest/154", "prompt": "There are three sticks with integer lengths l_1, l_2 and l_3. You are asked to break exactly one of them into two pieces in such a way that both pieces have positive (strictly greater than 0) integer length and the total length of the pieces is equal to the original length of the stick, and it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. A square is also considered a rectangle. Determine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "repair_prompt": ["There are three sticks with integer lengths l_1, l_2 and l_3. You are asked to break exactly one of them into two pieces in such a way that both pieces have positive (strictly greater than 0) integer length and the total length of the pieces is equal to the original length of the stick, and it's possible to construct a rectangle from the resulting four sticks such that each stick is used as exactly one of its sides. A square is also considered a rectangle. Determine if it's possible to do that.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_form_rectangle(t: int, test_cases: List[List[int]]) -> List[str]:\n    \"\"\"Determines if a rectangle can be formed by breaking one of the sticks in each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing three integers representing stick lengths.\n\n    Returns:\n        List[str]: A list of strings 'YES' or 'NO' for each test case indicating if a rectangle can be formed.\n    \"\"\"\n    results = []\n    \n    for sticks in test_cases:\n        # Sort the sticks to simplify the comparison\n        sticks.sort()\n        \n        # Check if we can form a rectangle by breaking one of the sticks\n        # Scenario 1: Break the first stick\n        if sticks[0] == sticks[1] or sticks[1] == sticks[2]:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nimport sys\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split()\n    t = int(input_data[0])\n    test_cases = [list(map(int, input_data[i:i+3])) for i in range(1, len(input_data), 3)]\n    \n    # Get results from the can_form_rectangle function\n    results = can_form_rectangle(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_form_rectangle(t: int, test_cases: List[List[int]]) -> List[str]:\n    \"\"\"Determines if a rectangle can be formed by breaking one of the three sticks into two pieces.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing three integers representing the lengths of the sticks.\n\n    Returns:\n        List[str]: A list of strings, each being \"YES\" if a rectangle can be formed for the corresponding test case, otherwise \"NO\".\n    \"\"\"\n    results = []\n    for case in test_cases:\n        a, b, c = sorted(case)\n        # Check if any two sticks can be paired with the two pieces of the broken stick to form a rectangle\n        if a == b or b == c or (a + b == c):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    t = int(data[0])\n    test_cases = [list(map(int, data[i:i+3])) for i in range(1, len(data), 3)]\n    \n    results = can_form_rectangle(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_form_rectangle(t: int, test_cases: List[List[int]]) -> List[str]:\n    \"\"\"Determine if a rectangle can be formed from given stick lengths.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing three integers representing stick lengths.\n\n    Returns:\n        List[str]: A list of strings, 'YES' or 'NO', for each test case indicating if a rectangle can be formed.\n    \"\"\"\n    results = []\n    \n    for sticks in test_cases:\n        # Sort the stick lengths to simplify the logic\n        sticks.sort()\n        \n        # Check if the first two sticks can form one side and the last two can form the other side\n        if sticks[0] == sticks[1] or sticks[1] == sticks[2]:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nimport sys\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().split()\n    t = int(input_data[0])\n    test_cases = [list(map(int, input_data[i:i+3])) for i in range(1, len(input_data), 3)]\n    \n    # Get results from the can_form_rectangle function\n    results = can_form_rectangle(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_form_rectangle(sticks: List[int]) -> str:\n    \"\"\"Determine if a rectangle can be formed by breaking one of the three sticks into two parts.\n\n    Args:\n        sticks (List[int]): A list of three integers representing the lengths of the sticks.\n\n    Returns:\n        str: 'YES' if a rectangle can be formed, otherwise 'NO'.\n    \"\"\"\n    # Sort the sticks to simplify the logic\n    sticks.sort()\n    \n    # Check if the two smaller sticks are equal or if the largest stick can be split\n    if sticks[0] == sticks[1] or sticks[1] == sticks[2] or sticks[0] + sticks[1] == sticks[2]:\n        return 'YES'\n    return 'NO'\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    # First element is the number of test cases\n    t = int(data[0])\n    results = []\n    \n    # Process each test case\n    for i in range(t):\n        l1, l2, l3 = map(int, data[1 + i * 3: 4 + i * 3])\n        result = can_form_rectangle([l1, l2, l3])\n        results.append(result)\n    \n    # Output results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_form_rectangle(test_cases: List[List[int]]) -> List[str]:\n    \"\"\"Determine if a rectangle can be formed from given stick lengths.\n\n    Args:\n        test_cases: A list of test cases, each containing three integers representing stick lengths.\n\n    Returns:\n        A list of strings, each being \"YES\" or \"NO\" indicating if a rectangle can be formed for each test case.\n    \"\"\"\n    results = []\n    for sticks in test_cases:\n        a, b, c = sorted(sticks)\n        # Check if any two sticks are equal and the third can be split into two equal parts\n        if a == b or b == c:\n            results.append(\"YES\")\n        # Check if the sum of any two sticks equals the third stick\n        elif a + b == c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return results\n\n# Input interface\nimport sys\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n\n    # Process test cases\n    results = can_form_rectangle(test_cases)\n\n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_form_rectangle(t: int, test_cases: List[List[int]]) -> List[str]:\n    \"\"\"Determine if it's possible to form a rectangle from four sticks.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing four integers representing stick lengths.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    for sticks in test_cases:\n        # Sort the stick lengths to easily check for pairs\n        sticks.sort()\n        \n        # Check if the first two and last two sticks form pairs\n        if sticks[0] == sticks[1] and sticks[2] == sticks[3]:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = can_form_rectangle(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_form_rectangle(t: int, test_cases: List[List[int]]) -> List[str]:\n    \"\"\"Determine if it's possible to form a rectangle by breaking one of the sticks.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): Each test case contains three integers representing the lengths of the sticks.\n\n    Returns:\n        List[str]: A list of strings, each being \"YES\" or \"NO\" for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        a, b, c = case\n        # Check if we can form a rectangle by breaking one of the sticks\n        if (a == b and c % 2 == 0) or (a == c and b % 2 == 0) or (b == c and a % 2 == 0):\n            results.append(\"YES\")\n        elif (a + b == c) or (a + c == b) or (b + c == a):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split()\n    t = int(data[0])\n    test_cases = [list(map(int, data[i:i+3])) for i in range(1, len(data), 3)]\n    \n    # Output interface\n    results = can_form_rectangle(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_form_rectangle(test_cases: List[List[int]]) -> List[str]:\n    \"\"\"Determine if a rectangle can be formed by breaking one of the three sticks into two parts.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing three integers representing stick lengths.\n\n    Returns:\n        List[str]: A list of strings, each being 'YES' or 'NO' indicating if a rectangle can be formed for each test case.\n    \"\"\"\n    results = []\n    for sticks in test_cases:\n        # Sort the stick lengths\n        sticks.sort()\n        # Check if the two smaller sticks can form a rectangle with the larger one\n        if sticks[0] + sticks[1] == sticks[2] or sticks[0] == sticks[1]:\n            results.append('YES')\n        else:\n            results.append('NO')\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and print results.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = can_form_rectangle(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_form_rectangle(test_cases: List[List[int]]) -> List[str]:\n    \"\"\"Determine if it's possible to form a rectangle from given stick lengths.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing four integers representing stick lengths.\n\n    Returns:\n        List[str]: A list of strings, each being 'YES' if a rectangle can be formed, otherwise 'NO'.\n    \"\"\"\n    results = []\n    for sticks in test_cases:\n        # Count the frequency of each stick length\n        length_count = {}\n        for length in sticks:\n            if length in length_count:\n                length_count[length] += 1\n            else:\n                length_count[length] = 1\n        \n        # Check if we can form two pairs of equal lengths\n        pairs = 0\n        for count in length_count.values():\n            pairs += count // 2\n        \n        # If we have at least two pairs, we can form a rectangle\n        if pairs >= 2:\n            results.append('YES')\n        else:\n            results.append('NO')\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    results = can_form_rectangle(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_form_rectangle(t: int, test_cases: List[List[int]]) -> List[str]:\n    \"\"\"Determine if a rectangle can be formed by breaking one of the three sticks into two parts.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing three integers representing stick lengths.\n\n    Returns:\n        List[str]: A list of strings, each being \"YES\" or \"NO\" indicating if a rectangle can be formed for each test case.\n    \"\"\"\n    results = []\n    for sticks in test_cases:\n        # Sort the stick lengths to simplify the logic\n        sticks.sort()\n        \n        # Check if the two smaller sticks can be paired with a part of the largest stick\n        if sticks[0] == sticks[1] or sticks[1] == sticks[2] or sticks[0] + sticks[1] == sticks[2]:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().split()\n    t = int(data[0])\n    test_cases = [list(map(int, data[i:i+3])) for i in range(1, len(data), 3)]\n    \n    # Output interface\n    results = can_form_rectangle(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires determining if a rectangle can be formed by breaking one of the three given sticks into two parts. The solution must efficiently handle up to 10,000 test cases and large stick lengths. The output should be 'YES' or 'NO' for each test case, indicating the possibility of forming a rectangle.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Correctly determine if a rectangle can be formed from the given stick lengths.\n- Optimize the algorithm for large stick lengths.\n- Ensure the output format is clear and consistent.\n- Provide detailed comments and documentation for the code.\nWe will iterate through each test case and check if it's possible to break one of the sticks such that the resulting four sticks can form a rectangle. A rectangle can be formed if there are two pairs of equal lengths. We will check three scenarios for each test case: breaking the first stick, the second stick, and the third stick. For each scenario, we will check if the resulting lengths can form two pairs of equal lengths.\n", "requirement analysis:\nThe problem requires determining if a rectangle can be formed by breaking one of three sticks into two pieces. The solution must efficiently handle up to 10,000 test cases and stick lengths up to 100 million. The output should be 'YES' or 'NO' based on the possibility of forming a rectangle.\nrequirement pool:\n- Implement the main logic to determine rectangle formation.\n- Optimize the solution for large input sizes.\n- Ensure the output format is consistent and clear.\n- Handle edge cases such as minimum and maximum stick lengths.\n- Provide detailed comments and documentation for the code.\nWe will implement a function that checks if a rectangle can be formed by breaking one of the three sticks into two pieces. The approach involves checking if any two sticks can be paired with the two pieces of the broken stick to form a rectangle. This can be done by ensuring that two pairs of sticks have equal lengths. We will use simple arithmetic operations to achieve this, ensuring the solution is efficient for large input sizes.\n", "requirement analysis:\nThe task requires breaking one stick into two parts and checking if a rectangle can be formed with the resulting four sticks. The solution must efficiently handle up to 10,000 test cases and stick lengths up to 100 million. The output should be 'YES' or 'NO' based on the possibility of forming a rectangle.\nrequirement pool:\n- Implement efficient algorithm to determine rectangle formation.\n- Ensure solution handles maximum input sizes within constraints.\n- Optimize code for quick execution.\n- Provide clear and consistent output format.\n- Include error handling for invalid inputs.\nWe will implement a function that checks if it's possible to break one of the sticks into two pieces such that a rectangle can be formed. The approach involves checking combinations of stick lengths to see if they can form pairs of equal lengths, which is necessary for forming a rectangle. We will use simple arithmetic operations to determine the possibility, ensuring the solution is efficient for large input sizes.\n", "requirement analysis:\nThe problem requires determining if a rectangle can be formed by breaking one of the three sticks into two parts. The solution must efficiently handle up to 10,000 test cases and large stick lengths. The key is to check if any two sticks can be paired with the two parts of a broken stick to form a rectangle.\nrequirement pool:\n- Implement the main algorithm to check rectangle formation.\n- Optimize the solution for large input sizes.\n- Ensure the output format is clear and adheres to the requirements.\n- Handle edge cases such as maximum stick lengths.\n- Provide detailed comments and documentation for the code.\nWe will implement a function that checks if a rectangle can be formed by breaking one of the three sticks into two parts. The key observation is that a rectangle can be formed if two pairs of equal lengths can be obtained. We will use simple arithmetic checks to determine if any stick can be split to achieve this condition. The solution will efficiently handle up to 10,000 test cases using basic operations.\n", "requirement analysis:\nThe problem requires determining if a rectangle can be formed by breaking one of the three sticks into two parts. The solution must efficiently handle up to 10,000 test cases and large stick lengths. The key is to check if any two sticks can be paired with the two parts of a broken stick to form a rectangle.\nrequirement pool:\n- Implement the main logic to determine if a rectangle can be formed.\n- Optimize the solution to handle large inputs efficiently.\n- Ensure the output format is consistent with the requirements.\n- Test the solution with edge cases and large inputs.\n- Document the solution approach and edge cases considered.\nWe will iterate over each test case and check if it's possible to form a rectangle by breaking one of the sticks. The key observation is that a rectangle can be formed if we can have two pairs of equal lengths. For each test case, we will check the following conditions: 1) If any two sticks are equal, we can break the third stick into two equal parts. 2) If the sum of any two sticks equals the third stick, we can break the third stick into two parts such that one part equals one of the other sticks. This approach ensures that we efficiently handle up to 10,000 test cases.\n", "requirement analysis:\nThe requirement is to determine if a rectangle can be formed by breaking one of the three sticks into two pieces. The solution must efficiently handle up to 10,000 test cases and provide a clear 'YES' or 'NO' output for each case. The challenge lies in ensuring the solution is scalable and handles large integer values effectively.\nrequirement pool:\n- Implement the main logic to determine rectangle formation\n- Optimize the solution for large input sizes\n- Ensure the solution handles edge cases\n- Provide clear and concise output formatting\n- Test the solution against diverse test cases\nWe will iterate through each test case and check if it's possible to break one of the sticks such that the resulting four sticks can form a rectangle. A rectangle can be formed if there are two pairs of equal lengths. We will use a simple approach to check all possible ways to break one stick and see if the resulting lengths can form a rectangle.\n", "requirement analysis:\nThe problem requires determining if a rectangle can be formed by breaking one of the three sticks into two parts. The solution must efficiently handle up to 10,000 test cases with stick lengths as large as 100 million. The output should be a simple 'YES' or 'NO' for each test case, indicating whether forming a rectangle is possible.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Output 'YES' or 'NO' for each test case.\n- Ensure code readability and maintainability.\n- Optimize for large stick lengths.\n- Provide detailed comments and documentation.\nWe will iterate through each test case and check if it's possible to break one of the sticks such that the resulting four sticks can form a rectangle. A rectangle can be formed if there are two pairs of equal lengths. We will use a simple approach to check combinations of breaking each stick and verify if the resulting lengths can form a rectangle.\n", "requirement analysis:\nThe problem requires determining if a rectangle can be formed by breaking one of the three sticks into two parts. The solution must efficiently handle up to 10,000 test cases and large stick lengths. The output should be a simple 'YES' or 'NO' for each test case, ensuring clarity and correctness.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Provide clear 'YES' or 'NO' output for each test case.\n- Optimize for large stick lengths up to 10^8.\n- Ensure the solution handles edge cases effectively.\n- Maintain simplicity in logic for ease of understanding.\nWe will implement a function that checks if a rectangle can be formed by breaking one of the three sticks into two parts. The approach involves checking if any two sticks can be equal after breaking one of the sticks into two parts. This can be efficiently done by sorting the stick lengths and checking possible combinations. The solution will handle up to 10,000 test cases and large stick lengths efficiently.\n", "requirement analysis:\nThe task requires determining if a rectangle can be formed by breaking one of the three sticks into two parts. The solution must efficiently handle up to 10,000 test cases with stick lengths up to 100 million. The output should be 'YES' or 'NO' for each test case, indicating whether a rectangle can be formed.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Output 'YES' or 'NO' for each test case.\n- Ensure code readability and maintainability.\n- Optimize for large input sizes.\n- Include comments and documentation in the code.\nWe will iterate through each test case and check if it's possible to break one of the sticks such that the resulting four sticks can form a rectangle. A rectangle can be formed if there are two pairs of equal lengths. We will use a simple approach to check all possible ways to break one stick and see if the resulting lengths can form a rectangle.\n", "requirement analysis:\nThe problem requires determining if a rectangle can be formed by breaking one of the three sticks into two parts. The solution must efficiently handle up to 10,000 test cases and large stick lengths. The output should be clear and consistent with the input format.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Correctly determine if a rectangle can be formed.\n- Optimize for large stick lengths.\n- Ensure output clarity and consistency.\n- Handle edge cases effectively.\nWe will implement a function that checks if a rectangle can be formed by breaking one of the three sticks into two parts. The approach involves checking combinations of stick lengths to see if they can form pairs of equal lengths, which is necessary for forming a rectangle. We will use simple arithmetic operations to determine possible combinations and ensure the solution is efficient for up to 10,000 test cases.\n"], "scores": [], "pass_results": [false, false, false, false, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 32, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe only line of each testcase contains three integers l_1, l_2, l_3 (1 \u2264 l_i \u2264 10^8) \u2014 the lengths of the sticks.\n\nOutput\n\nFor each testcase, print \"YES\" if it's possible to break one of the sticks into two pieces with positive integer length in such a way that it's possible to construct a rectangle from the resulting four sticks. Otherwise, print \"NO\".\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as a positive answer).\n\nExample\n\nInput\n\n\n4\n6 1 5\n2 5 2\n2 4 2\n5 5 4\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nIn the first testcase, the first stick can be broken into parts of length 1 and 5. We can construct a rectangle with opposite sides of length 1 and 5.\n\nIn the second testcase, breaking the stick of length 2 can only result in sticks of lengths 1, 1, 2, 5, which can't be made into a rectangle. Breaking the stick of length 5 can produce results 2, 3 or 1, 4 but neither of them can't be put into a rectangle.\n\nIn the third testcase, the second stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 2 (which is a square).\n\nIn the fourth testcase, the third stick can be broken into parts of length 2 and 2. The resulting rectangle has opposite sides 2 and 5.", "mutate_method": "condense_two2one", "parent_index": 32}
