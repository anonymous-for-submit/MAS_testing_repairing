{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements. Your goal is to determine how to systematically approach reconstructing array a from the sorted subsequence sums in array b. You should consider the constraints of the problem carefully to ensure an accurate restoration of the original array.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. Then he sorted them in non-decreasing order. He got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that array a is composed of distinct elements. Your goal is to determine how to systematically approach reconstructing array a from the sorted subsequence sums in array b. You should consider the constraints of the problem carefully to ensure an accurate restoration of the original array.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sorted sums of subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the case to ensure the properties hold\n        case.sort()\n        \n        # Deduce the original array elements\n        a1 = case[0]  # The smallest element in the original array\n        a2 = case[1]  # The second smallest element in the original array\n        a3 = case[6] - case[5]  # The third element deduced from the sum of all elements minus the sum of the two largest\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input()).split())) for i in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef reconstruct_array(b: List[int]) -> List[int]:\n    \"\"\"Reconstruct the original array from the given subsequence sums.\n\n    Args:\n        b (List[int]): A list of integers representing the subsequence sums.\n\n    Returns:\n        List[int]: The reconstructed original array.\n    \"\"\"\n    # Sort the list to easily find the smallest and largest elements\n    b.sort()\n    \n    # The smallest element in b is the smallest element of the original array a\n    smallest = b[0]\n    \n    # The largest element in b is the sum of all elements in a\n    total_sum = b[-1]\n    \n    # Calculate the number of elements in the original array\n    n = len(b) - 1\n    \n    # Calculate the sum of the original array elements\n    sum_of_a = total_sum - smallest\n    \n    # Calculate the average value of the original array elements\n    average_value = sum_of_a // (n - 1)\n    \n    # Reconstruct the original array\n    a = [smallest] + [average_value] * (n - 1)\n    \n    return a\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    \n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = reconstruct_array(b)\n        results.append(result)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array from its subsequence sums.\n\n    Args:\n        b (List[int]): A list containing the sums of subsequences of the original array.\n\n    Returns:\n        List[int]: The original array.\n    \"\"\"\n    # Sort the array to easily access the smallest and largest elements\n    b.sort()\n    \n    # The smallest element in b is one of the original elements\n    a1 = b[0]\n    \n    # The largest element in b is the sum of all three elements of the original array\n    a2 = b[-1] - a1\n    \n    # The second largest element in b is the sum of the two largest elements of the original array\n    a3 = b[-2] - a1\n    \n    return [a1, a2, a3]\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b' of sums.\n\n    Args:\n        b (List[int]): A sorted list of integers representing sums of elements from the original array.\n\n    Returns:\n        List[int]: The original array 'a' of three integers.\n    \"\"\"\n    # Since b is sorted, the smallest element is the smallest element of a\n    a1 = b[0]\n    # The second smallest element in b is either the second smallest element of a or the sum of the smallest and second smallest\n    a2 = b[1] - a1\n    # The largest element in b is the sum of all three elements of a\n    a3 = b[2] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output operations.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    results = []\n    for i in range(1, t + 1):\n        b = list(map(int, input_data[i].split()))\n        result = restore_array_from_sums(b)\n        results.append(' '.join(map(str, result)))\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array from the given subsequence sums.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of reconstructed arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the subsequence sums to easily identify the smallest and largest sums\n        case.sort()\n        \n        # The smallest element in the sorted list is the smallest element in the original array\n        a1 = case[0]\n        \n        # The second smallest element in the sorted list is the second smallest element in the original array\n        a2 = case[1]\n        \n        # The largest element in the sorted list is the sum of all three elements of the original array\n        sum_a = case[-1]\n        \n        # Calculate the third element using the sum of all three elements\n        a3 = sum_a - a1 - a2\n        \n        # Append the reconstructed array to the results\n        results.append([a1, a2, a3])\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    \n    # Call the function to restore arrays\n    results = restore_array(t, test_cases)\n    \n    # Output the reconstructed arrays\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given list of sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of integers\n                    representing the sorted list of sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the\n        original array.\n    \"\"\"\n    results = []\n    for sums in test_cases:\n        # The smallest element in the sorted list of sums is the smallest element of the original array.\n        a = sums[0]\n        # The largest element in the sorted list of sums is the sum of all elements of the original array.\n        a_plus_b_plus_c = sums[-1]\n        # The second largest element in the sorted list of sums is the sum of the two largest elements of the original array.\n        b_plus_c = sums[-2]\n        \n        # Calculate the elements of the original array\n        b = a_plus_b_plus_c - b_plus_c\n        c = b_plus_c - b\n        results.append((a, b, c))\n    \n    return results\n\n# Input interface\nnumber_of_test_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(number_of_test_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' of sums of subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing sums of subsequences.\n\n    Returns:\n        List[int]: The original array 'a' of 3 integers.\n    \"\"\"\n    # Since b is sorted, the smallest element is the smallest element of a\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all elements in a\n    sum_a = b[-1]\n    # Calculate the third element of a using the sum of all elements\n    a3 = sum_a - a1 - a2\n    \n    return [a1, a2, a3]\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array from the sorted subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers\n                                      representing the sorted subsequence sums.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        # The smallest element in the sorted list is one of the original elements\n        a = case[0]\n        # The largest element is the sum of all three original elements\n        sum_all = case[6]\n        # The sum of the other two elements\n        sum_two = sum_all - a\n        \n        # The two smallest sums of two elements\n        b_plus_c = case[1]\n        a_plus_b = case[2]\n        \n        # Calculate the other two elements\n        b = a_plus_b - a\n        c = b_plus_c - b\n        \n        # Append the reconstructed array to results\n        results.append([a, b, c])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Output interface\n    result = reconstruct_array(t, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef reconstruct_array_from_sums(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Reconstructs the original array from its subsequence sums.\n\n    Args:\n        b (list[int]): A list of integers representing the subsequence sums.\n\n    Returns:\n        tuple[int, int, int]: A tuple containing the three distinct integers of the original array.\n    \"\"\"\n    # Sort the list to easily access the smallest and largest elements\n    b.sort()\n    \n    # The smallest element in b is one of the elements of a\n    a1 = b[0]\n    \n    # The largest element in b is the sum of all three elements of a\n    sum_all = b[-1]\n    \n    # The second largest element in b minus the smallest element gives another element of a\n    a2 = b[-2] - a1\n    \n    # The third element can be found by subtracting the smallest element from the largest element in b\n    a3 = sum_all - a1 - a2\n    \n    return a1, a2, a3\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = reconstruct_array_from_sums(b)\n        print(a1, a2, a3)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the sorted subsequence sums 'b'.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing the sorted subsequence sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the case to ensure it is in the correct order\n        case.sort()\n        \n        # The smallest element in 'b' is the smallest element in 'a'\n        a1 = case[0]\n        \n        # The second smallest element in 'b' is the second smallest element in 'a'\n        a2 = case[1]\n        \n        # The largest element in 'b' is the sum of all elements in 'a'\n        sum_a = case[-1]\n        \n        # The third element in 'a' can be found by subtracting the sum of the two smallest elements from the total sum\n        a3 = sum_a - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nimport sys\ninput = sys.stdin.read\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    # Get the results from the restore_array function\n    results = restore_array(t, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a sorted list of subsequence sums. The constraints ensure that the solution is feasible for large numbers and multiple test cases. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array.\nrequirement pool:\n- Accurate restoration of array a from subsequence sums\n- Efficient handling of up to 5000 test cases\n- Optimization for large integer values\n- Clear and concise output format\n- Robustness against edge cases\nWe will solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b of 7 integers, the smallest element b[0] is the smallest element of the original array a. The largest element b[6] is the sum of all elements of a. The second largest element b[5] is the sum of the two largest elements of a. Using these properties, we can deduce the three elements of a by simple arithmetic operations.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Efficiently reconstruct the original array from the given subsequence sums.\n- Ensure the solution handles the maximum constraints effectively.\n- Provide a clear and concise output format for the reconstructed arrays.\n- Optimize the algorithm for speed and accuracy.\n- Consider edge cases and validate input constraints.\nWe will use a straightforward mathematical approach to reconstruct the original array from the given subsequence sums. The key observation is that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these observations, we can deduce the original array efficiently without complex computations.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be correct and formatted as specified.\nrequirement pool:\n- Efficiently reconstruct the original array from the given subsequence sums.\n- Handle up to 5000 test cases with large integer values.\n- Ensure the solution is easy to understand and maintain.\n- Provide clear and correct output for each test case.\n- Optimize for both speed and memory usage.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The key is to identify the smallest, second smallest, and the largest sum to deduce the original integers. The solution must handle up to 5000 test cases efficiently, with each integer in the range of 1 to 10^9.\nrequirement pool:\n- Implement the main logic to deduce the original array from the subsequence sums.\n- Ensure the solution is efficient for the maximum input constraints.\n- Handle edge cases where the input numbers are very large.\n- Provide clear and concise output formatting.\n- Optimize the solution for readability and maintainability.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The second smallest element in b is the second smallest element of a or the sum of the smallest and second smallest elements of a. The largest element in b is the sum of all three elements of a. By using these observations, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and ensure accurate restoration for each case. The constraints guarantee that a valid array a exists for each test case.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Ensure accurate restoration of array a\n- Optimize performance for large input sizes\n- Provide clear logic explanation\n- Handle edge cases robustly\nWe will leverage the properties of the subsequence sums to reconstruct the original array. Given that the array a consists of three distinct integers, the smallest element in b is the smallest element in a. The largest element in b is the sum of all three elements of a. The second smallest element in b is the second smallest element in a. By using these properties, we can efficiently determine the original array a from b.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Develop an algorithm to restore the original array from subsequence sums.\n- Ensure the solution is efficient for the maximum input constraints.\n- Format the output correctly for each test case.\n- Handle edge cases where numbers are very large or very small.\n- Optimize for readability and maintainability of the code.\nWe will use the property that the smallest element in the sorted list of sums, b, is the smallest element of the original array a. The largest element in b is the sum of all elements of a. The second largest element in b is the sum of the two largest elements of a. Using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a sorted list of subsequence sums. The constraints ensure that the input is valid and that a solution exists. The solution must efficiently handle up to 5000 test cases and large integer values.\nrequirement pool:\n- Accurately restore array a from array b\n- Ensure solution handles large input sizes efficiently\n- Provide clear and concise output format\n- Optimize for performance in competitive programming environments\n- Handle edge cases and ensure robustness\nWe will leverage the properties of the sums of subsequences of a three-element array. Given the sorted array b of 7 elements, the smallest element is the smallest element of the original array a. The largest element in b is the sum of all elements in a. The second smallest element in b is the second smallest element of a. By using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The constraints ensure that the input is valid and there is always a solution. The challenge lies in efficiently determining the original array from the given sums.\nrequirement pool:\n- Develop an algorithm to reconstruct the original array from subsequence sums.\n- Ensure the solution is efficient for the maximum input size.\n- Provide clear documentation and examples for users.\n- Optimize the solution for readability and maintainability.\n- Consider edge cases and validate input constraints.\nWe will use a straightforward approach to reconstruct the original array from the sorted subsequence sums. Given the sorted array b, the smallest element b[0] is one of the original elements. The largest element b[6] is the sum of all three original elements. By subtracting b[0] from b[6], we can find the sum of the other two elements. Using b[1] and b[2], which are the smallest sums of two elements, we can deduce the other two elements. This approach is efficient and simple, leveraging basic arithmetic operations.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly for each test case.\nrequirement pool:\n- Efficiently reconstruct the original array from the subsequence sums.\n- Handle up to 5000 test cases with large integer values.\n- Ensure the solution is easy to understand and maintain.\n- Provide clear and correct output for each test case.\n- Optimize for both speed and accuracy.\nWe will leverage the properties of the subsequence sums to reconstruct the original array. Given that the array a consists of three distinct integers, the smallest element in the sorted array b will be one of the elements of a. The largest element in b will be the sum of all three elements of a. By subtracting the smallest element from the second largest element in b, we can find another element of a. The third element can be found by subtracting the smallest element from the largest element in b. This approach is efficient and straightforward, allowing us to handle up to 5000 test cases efficiently.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Efficiently reconstruct the original array from the given subsequence sums.\n- Handle up to 5000 test cases with large integer values.\n- Ensure the solution is easy to understand and maintain.\n- Provide clear and correctly formatted output for each test case.\n- Optimize for both speed and memory usage.\nWe will use a straightforward approach to reconstruct the original array 'a' from the sorted subsequence sums 'b'. Given that 'b' contains the sums of all non-empty subsequences of 'a', we can deduce that the smallest element in 'b' is one of the elements of 'a'. The largest element in 'b' is the sum of all elements in 'a'. By examining the sorted list 'b', we can identify the three distinct elements of 'a' as follows: the smallest element, the second smallest element, and the difference between the largest element and the sum of the two smallest elements. This approach is efficient and handles large numbers well.\n"], "scores": [], "pass_results": [false, true, false, false, false, true, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 320, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 180}
