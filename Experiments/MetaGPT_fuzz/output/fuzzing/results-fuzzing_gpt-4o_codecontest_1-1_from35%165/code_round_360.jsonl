{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive integers and wrote down the sums of all non-empty subsequences of this array, arranged them in non-decreasing order, resulting in an array b of 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Consider edge cases where elements might be repeated or minimal.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive integers and wrote down the sums of all non-empty subsequences of this array, arranged them in non-decreasing order, resulting in an array b of 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Consider edge cases where elements might be repeated or minimal.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the sorted subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of subsequence sums.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each representing the restored original array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted list is a_1\n        a1 = case[0]\n        # The second smallest element is a_2\n        a2 = case[1]\n        # The largest element is the sum of all three elements a_1 + a_2 + a_3\n        a3 = case[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        case = list(map(int, input().split()))\n        test_cases.append(case)\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the sorted list of sums 'b'.\n\n    Args:\n        b (List[int]): A sorted list of sums of all non-empty subsequences of 'a'.\n\n    Returns:\n        List[int]: The original array 'a'.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    smallest_element = b[0]\n    \n    # The largest element in b is the sum of all elements in a\n    sum_of_elements = b[-1]\n    \n    # The second largest element in b is the sum of the two largest elements in a\n    sum_of_two_largest = b[-2]\n    \n    # Calculate the largest element in a\n    largest_element = sum_of_elements - sum_of_two_largest\n    \n    # Calculate the second largest element in a\n    second_largest_element = sum_of_two_largest - largest_element\n    \n    # The original array 'a' consists of the smallest element, the second largest element, and the largest element\n    a = [smallest_element, second_largest_element, largest_element]\n    \n    return a\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array b of 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of tuples representing the restored array a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to easily identify the smallest and largest elements\n        b_sorted = sorted(b)\n        \n        # The smallest element in b is a_1\n        a_1 = b_sorted[0]\n        \n        # The second smallest element in b is a_2\n        a_2 = b_sorted[1]\n        \n        # The largest element in b is a_1 + a_2 + a_3\n        sum_a = b_sorted[-1]\n        \n        # Calculate a_3 by subtracting a_1 and a_2 from the sum\n        a_3 = sum_a - a_1 - a_2\n        \n        # Append the result as a tuple (a_1, a_2, a_3)\n        results.append((a_1, a_2, a_3))\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(\"Restored array:\", *result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array from its sorted array of sums.\n\n    Args:\n        b (List[int]): A sorted list of sums of the original array.\n\n    Returns:\n        List[int]: The original array that corresponds to the given sums.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    smallest_element = b[0]\n    \n    # The largest element in b is the sum of all elements of a\n    largest_element = b[-1]\n    \n    # Calculate the original array\n    # Since b is sorted, the original array can be deduced by subtracting\n    # the smallest element from each of the other elements in b\n    original_array = [largest_element - x for x in b[:-1]]\n    \n    return original_array\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\ndef restore_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted list of all non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing a sorted list of subsequences.\n\n    Returns:\n        list[tuple[int, int, int]]: List of tuples representing the restored arrays for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in the sorted subsequences is a_1\n        a_1 = case[0]\n        # The second smallest element is a_2\n        a_2 = case[1]\n        # The largest element is the sum of all three elements a_1 + a_2 + a_3\n        sum_a = case[-1]\n        # Calculate a_3 using the sum\n        a_3 = sum_a - a_1 - a_2\n        # Append the restored array as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\n# Input interface\nimport sys\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n\n    # Process the test cases\n    results = restore_array(t, test_cases)\n\n    # Output the restored array a for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        b (List[int]): A sorted array of 7 integers.\n\n    Returns:\n        List[int]: The original array 'a' of 4 integers.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    smallest = b[0]\n    \n    # The largest element in b is the sum of all elements in a\n    total_sum = b[-1]\n    \n    # The second largest element in b is the sum of the two largest elements in a\n    sum_two_largest = b[-2]\n    \n    # Deduce the largest element in a\n    largest = total_sum - sum_two_largest\n    \n    # Deduce the second largest element in a\n    second_largest = sum_two_largest - largest\n    \n    # Deduce the third largest element in a\n    third_largest = total_sum - (smallest + largest + second_largest)\n    \n    # Return the original array a\n    return [smallest, third_largest, second_largest, largest]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array from the given subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted subsequence sums.\n\n    Returns:\n        Tuple[int, int, int]: A tuple containing the original array elements.\n    \"\"\"\n    # The smallest element in b is the smallest number in the original array\n    a1 = b[0]\n    # The second smallest element in b is the second smallest number in the original array\n    a2 = b[1]\n    # The largest element in b is the sum of all three numbers\n    total_sum = b[-1]\n    # Deduce the third number using the total sum\n    a3 = total_sum - a1 - a2\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given array 'b' which contains\n    sums of elements of 'a'.\n\n    Args:\n        b (List[int]): A list of 7 integers representing sums of elements of 'a'.\n\n    Returns:\n        List[int]: The original array 'a' of 4 integers.\n    \"\"\"\n    # Sort the array b to easily access the smallest and largest elements\n    b.sort()\n    \n    # The smallest element in b is the smallest element of the original array a\n    a1 = b[0]\n    \n    # The largest element in b is the sum of all elements in a\n    sum_a = b[-1]\n    \n    # Calculate the other elements of a using the properties of b\n    a2 = b[1] - a1\n    a3 = b[2] - a1\n    a4 = sum_a - (a1 + a2 + a3)\n    \n    return [a1, a2, a3, a4]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport sys\nimport typing\n\ndef restore_original_array(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[typing.Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given sorted array of sums of subsequences.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing the restored original array of 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the case to ensure the properties hold\n        case.sort()\n        # Deduce the original array a\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[6] - case[5]\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    input_data = sys.stdin.read().strip().split('\\n')\n    t = int(input_data[0])\n    test_cases = [list(map(int, line.split())) for line in input_data[1:t+1]]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport sys\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array from the given sorted array of sums.\n\n    Args:\n        b (List[int]): A sorted list of integers where the smallest elements\n                       represent the smallest elements of the original array,\n                       and the largest element is the sum of all elements of\n                       the original array.\n\n    Returns:\n        List[int]: The original array of integers.\n    \"\"\"\n    # The length of the original array a is len(b) - 1\n    n = len(b) - 1\n    \n    # The sum of all elements in the original array a is the largest element in b\n    total_sum = b[-1]\n    \n    # The original array a can be deduced by subtracting the smallest elements\n    # from the total sum\n    a = [total_sum - b[i] for i in range(n)]\n    \n    return a\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read input from standard input\n    input_data = sys.stdin.read().strip().split('\\n')\n    \n    # First line of input is the number of test cases\n    t = int(input_data[0])\n    \n    results = []\n    \n    # Process each test case\n    for i in range(1, t + 1):\n        # Convert the line of input into a list of integers\n        b = list(map(int, input_data[i].split()))\n        \n        # Restore the original array from the given sums\n        result = restore_array_from_sums(b)\n        \n        # Append the result to the results list\n        results.append(result)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires restoring an array of three integers from a given sorted array of seven integers, which represent all possible non-empty subsequence sums. The solution must efficiently handle up to 5000 test cases, each with large integer values, and provide correct outputs for all possible edge cases.\nrequirement pool:\n- Implement the main logic to restore array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Handle edge cases where elements in array b might be repeated.\n- Provide a user-friendly output format.\nWe will leverage the properties of the sorted array b, which contains all possible non-empty subsequence sums of the array a. The smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. Using these properties, we can deduce the values of a_1, a_2, and a_3 efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, with each test case containing large integers up to 10^9. The solution should be robust against edge cases, such as repeated elements or minimal values, and provide clear and consistent output.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large numbers and multiple test cases efficiently\n- Ensure clarity and consistency in output\n- Gracefully handle edge cases with repeated or minimal elements\n- Optimize for speed and responsiveness\nWe will solve the problem by leveraging the properties of the sorted array b. Since b is the sorted list of all non-empty subsequences of a, we can deduce that the smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these properties, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe problem requires restoring an array of three integers from a sorted list of sums of its non-empty subsequences. The key is to identify the smallest elements and the largest element in the list, which correspond to the individual elements and the sum of all three elements, respectively. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main algorithm to restore array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for edge cases with repeated elements.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge case handling.\nWe will leverage the fact that the smallest element in the array b is one of the original elements of array a, and the largest element in b is the sum of all three elements of a. By identifying these, we can deduce the original array a. Specifically, the smallest element in b is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. The third element a_3 can be found by subtracting a_1 and a_2 from the largest element.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values, and provide consistent output. Edge cases with repeated or minimal elements must be considered.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large integer values and multiple test cases\n- Ensure output clarity and consistency\n- Consider edge cases with repeated or minimal elements\n- Optimize for speed and responsiveness\nWe will solve the problem by leveraging the properties of the sorted array of sums. The smallest element in the array b is the smallest element of a. The largest element in b is the sum of all elements of a. By using these properties, we can deduce the original array a. We will use Python's built-in capabilities to handle input and output efficiently.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values, and ensure correct output for all possible configurations of the input array.\nrequirement pool:\n- Efficiently process up to 5000 test cases.\n- Correctly restore the original array a from array b.\n- Handle edge cases with repeated elements.\n- Ensure the solution is robust and handles large integer values.\n- Provide clear and concise output for each test case.\nWe will solve the problem by leveraging the properties of the sorted array b. Since b is the sorted list of all non-empty subsequences of a, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. Using these properties, we can deduce the original array a by selecting the smallest, second smallest, and using the largest to find the third element.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The main challenge is ensuring the solution is both correct and performant, especially for edge cases with repeated or minimal elements.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Handle up to 5000 test cases efficiently\n- Optimize for large integer values\n- Ensure correctness for edge cases\n- Provide clear and maintainable code\nWe will solve the problem by recognizing that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. The second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a from b. This approach is efficient and handles edge cases well.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct restoration even in edge cases with repeated or minimal elements.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle edge cases with repeated or minimal elements\n- Ensure the solution is scalable for large inputs\n- Provide clear and consistent input-output handling\n- Optimize for performance and user experience\nWe will use the properties of the subsequence sums to deduce the original array. Given the sorted array b of 7 integers, the smallest element is the smallest number in the original array, the second smallest element is the second smallest number, and the largest element is the sum of all three numbers. This allows us to deduce the original array by simple arithmetic.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers, and produce the correct original array for each test case. The constraints ensure that a valid solution always exists.\nrequirement pool:\n- Efficiently process up to 5000 test cases.\n- Correctly restore the original array from the given sums.\n- Handle edge cases such as repeated elements or minimal values.\n- Ensure the solution is robust and handles large numbers.\n- Provide clear and concise output for each test case.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting appropriate elements from b.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The constraints ensure that a valid solution always exists, allowing for straightforward deduction of the original array. The solution should be optimized for performance and clarity, ensuring it handles edge cases such as repeated elements.\nrequirement pool:\n- Efficiently handle up to 5000 test cases.\n- Correctly deduce the original array from the given sums.\n- Handle edge cases with repeated elements.\n- Ensure the solution is fast and responsive.\n- Provide clear and concise output for each test case.\nWe will solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b of 7 integers, the smallest element b[0] is the smallest element of the original array a. The largest element b[6] is the sum of all elements of a. The second largest element b[5] is the sum of the two largest elements of a. Using these properties, we can deduce the original array a as follows: a_1 = b[0], a_2 = b[1], and a_3 = b[6] - b[5]. This approach is efficient and handles all edge cases, including repeated elements.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from the sums of its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main logic to deduce the original array from the given subsequence sums.\n- Ensure the solution handles edge cases, such as repeated elements.\n- Optimize the solution for performance to handle the maximum input size efficiently.\n- Provide clear and concise output formatting.\n- Include comments and documentation for code clarity.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The second smallest element in b is the second smallest element of a, and the largest element in b is the sum of all elements of a. Using these observations, we can deduce the original array a by simple arithmetic operations.\n"], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 360, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 214}
