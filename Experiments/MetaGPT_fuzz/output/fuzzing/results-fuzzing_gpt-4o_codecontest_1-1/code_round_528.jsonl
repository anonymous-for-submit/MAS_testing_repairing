{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive numbers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, and 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the given array b always consists of integers such that it correctly maps to a valid array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive numbers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, and 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the given array b always consists of integers such that it correctly maps to a valid array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        b (List[int]): A sorted list of sums of all non-empty subsequences of 'a'.\n\n    Returns:\n        List[int]: The original array 'a' consisting of 3 positive numbers.\n    \"\"\"\n    # The smallest three elements in 'b' are the individual elements of 'a'.\n    # The largest element in 'b' is the sum of all three elements of 'a'.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of a.\n\n    Returns:\n        List[int]: The original array a consisting of 3 positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements of a\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is one of the original elements\n        a1 = case[0]\n        # The largest element in b is the sum of all three original elements\n        a2 = case[1]\n        # The second smallest element in b is another original element\n        a3 = case[-1] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given subsequence sums.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing the sorted subsequence sums.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements of a\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array a.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Since the array b is sorted, the smallest element is a_1,\n        # the second smallest is a_2, and the largest element is a_1 + a_2 + a_3.\n        a_1 = case[0]\n        a_2 = case[1]\n        a_3 = case[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b' of sums of all non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of tuples, each containing the restored array 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three elements in 'b' are the individual elements of 'a'\n        a1 = b[0]\n        a2 = b[1]\n        # The largest element in 'b' is the sum of all three elements of 'a'\n        a3 = b[6] - (b[0] + b[1])\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport typing\n\ndef restore_array_from_sums(b: typing.List[int]) -> typing.Tuple[int, int, int]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' of sums of all non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of array 'a'.\n\n    Returns:\n        A tuple of three integers representing the original array 'a'.\n    \"\"\"\n    # The smallest three elements in 'b' are the individual elements of 'a'.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2  # The largest element in 'b' is the sum of all three elements of 'a'.\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the restored array a of 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[6] - a1 - a2  # The largest number in b is the sum of all three elements of a\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array from the given sorted list of sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list containing t test cases, each with 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the restored original array of 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is a1\n        a1 = case[0]\n        # The second smallest element in b is a2\n        a2 = case[1]\n        # The largest element in b is the sum of a1, a2, and a3\n        a3 = case[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\n# Input interface\nnum_test_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n\n# Output interface\nresults = restore_original_array(num_test_cases, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest three numbers in 'b' are the individual elements of 'a'\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[6] - a1 - a2  # The largest number in 'b' is the sum of all three elements of 'a'\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = reconstruct_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three positive integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and clear output for each case.\nrequirement pool:\n- Efficiently compute the original array from the subsequence sums.\n- Ensure the solution is optimized for large input values.\n- Provide a user-friendly output format.\n- Include error handling for unexpected input formats.\n- Optimize memory usage for handling multiple test cases.\nWe will use a straightforward approach to restore the original array 'a' from the given sorted array 'b'. Since 'b' is the sorted list of sums of all non-empty subsequences of 'a', we can deduce that the smallest three elements in 'b' are the individual elements of 'a'. The largest element in 'b' is the sum of all three elements of 'a'. By using these properties, we can efficiently compute the original array 'a'.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The constraints ensure that a valid solution always exists, simplifying the problem to finding the three smallest elements and the largest element in the list to deduce the original array.\nrequirement pool:\n- Implement the main algorithm to deduce the original array from the given sums.\n- Optimize the solution to handle the maximum input size efficiently.\n- Ensure the solution is robust and handles all edge cases.\n- Provide clear documentation and comments within the code.\n- Create test cases to validate the solution against various scenarios.\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element of a, the second smallest element in b is the second smallest element of a, and the largest element in b is the sum of all three elements of a. Using these observations, we can deduce the original array a by selecting the first element, the second element, and calculating the third element as the difference between the largest element and the sum of the first two elements.\n", "requirement analysis:\nThe problem requires reconstructing an array of three positive integers from the sums of all its non-empty subsequences. The input guarantees that such an array exists, and the solution must handle up to 5000 test cases efficiently. The output must be formatted correctly for each test case.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Validate the input to ensure it meets the problem constraints.\n- Format the output correctly for each test case.\n- Optimize the solution for edge cases and large numbers.\nWe will solve the problem by leveraging the properties of the sums of non-empty subsequences of a three-element array. Given the sorted array b, the smallest element is one of the original elements, and the largest element is the sum of all three original elements. The second smallest element is another original element, and the third smallest element is the third original element. This approach ensures that we can reconstruct the original array efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from the sums of its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Ensure the solution is efficient for the maximum input constraints\n- Handle edge cases and large numbers correctly\n- Provide clear and correctly formatted output\n- Optimize for performance and simplicity\nWe will use a straightforward approach to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. By using these observations, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe problem requires restoring an original array of three numbers from the sums of its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Restore the original array from the given sums.\n- Optimize the solution for large input sizes.\n- Ensure the solution is easy to understand and maintain.\n- Handle edge cases and provide accurate results.\n- Test the solution against multiple test cases.\nWe will use a straightforward approach to solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b, the smallest element is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. This allows us to directly deduce the values of a_1, a_2, and a_3 from the array b.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from the sums of its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution is efficient for the maximum input constraints.\n- Provide clear and concise output for each test case.\n- Handle edge cases and large numbers smoothly.\n- Optimize for both speed and simplicity.\nWe will use a simple approach to restore the original array 'a' from the given array 'b'. Since 'b' is sorted and consists of sums of all non-empty subsequences of 'a', the smallest three elements in 'b' are the individual elements of 'a'. The largest element in 'b' is the sum of all three elements of 'a'. Therefore, the original array 'a' can be derived as follows: a_1 = b[0], a_2 = b[1], a_3 = b[6] - (b[0] + b[1]). This approach is efficient and handles the constraints smoothly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and clear output for each case.\nrequirement pool:\n- Efficiently compute the original array from the subsequence sums\n- Ensure the solution handles the maximum constraints effectively\n- Provide clear and concise output formatting\n- Optimize for speed and performance\n- Include error handling for unexpected input formats\nWe will use a straightforward approach to restore the original array 'a' from the given sorted array 'b'. Since 'b' is the sorted list of sums of all non-empty subsequences of 'a', the smallest three elements in 'b' are the individual elements of 'a'. The largest element in 'b' is the sum of all three elements of 'a'. By using these properties, we can efficiently determine the original array 'a'.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases, each with large integer values, ensuring correctness and performance.\nrequirement pool:\n- Develop a function to restore the original array a from the given array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Implement robust error handling for edge cases.\n- Document the code for maintainability and clarity.\nWe will implement a function that takes the sorted array b of 7 integers and reconstructs the original array a of 3 integers. The approach is based on the observation that the smallest three numbers in b are the individual elements of a, and the largest number in b is the sum of all three elements of a. By using these observations, we can efficiently determine the values of a.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Implement the main algorithm to restore the original array from subsequence sums.\n- Ensure the solution can handle up to 5000 test cases efficiently.\n- Optimize the algorithm to handle large numbers without performance degradation.\n- Provide a clear and concise output format for the results.\n- Consider edge cases and validate input constraints.\nWe will use the property that the smallest element in the sorted list b is one of the original numbers, and the largest element is the sum of all three original numbers. By using these properties, we can deduce the original numbers by simple arithmetic operations. Specifically, the three numbers can be found as follows: a1 is the smallest number in b, a2 is the second smallest number, and a3 can be found by subtracting a1 and a2 from the largest number in b.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases, each with large integer values, and produce the correct output format.\nrequirement pool:\n- Implement the main algorithm to reconstruct array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for clarity and maintainability.\n- Test the solution against edge cases and large inputs.\n- Document the solution and provide usage examples.\nWe will implement a function that reconstructs the original array 'a' from the given sorted array 'b'. The key observation is that the smallest three numbers in 'b' are the individual elements of 'a', and the largest number in 'b' is the sum of all three elements of 'a'. This allows us to deduce the values of 'a' efficiently.\n"], "scores": [], "pass_results": [true, true, false, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 528, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 198}
