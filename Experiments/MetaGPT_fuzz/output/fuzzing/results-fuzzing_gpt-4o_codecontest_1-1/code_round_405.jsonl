{"name": "1582_G. Kuzya and Homework", "description": "Kuzya started going to school. He was given math homework in which he was given an array a of length n and an array of symbols b of length n, consisting of symbols '*' and '/'.\n\nLet's denote a path of calculations for a segment [l; r] (1 \u2264 l \u2264 r \u2264 n) in the following way: \n\n  * Let x=1 initially. For every i from l to r we will consequently do the following: if b_i= '*', x=x*a_i, and if b_i= '/', then x=(x)/(a_i). Let's call a path of calculations for the segment [l; r] a list of all x that we got during the calculations (the number of them is exactly r - l + 1). \n\n\n\nFor example, let a=[7, 12, 3, 5, 4, 10, 9], b=[/, *, /, /, /, *, *], l=2, r=6, then the path of calculations for that segment is [12, 4, 0.8, 0.2, 2].\n\nLet's call a segment [l;r] simple if the path of calculations for it contains only integer numbers. \n\nKuzya needs to find the number of simple segments [l;r] (1 \u2264 l \u2264 r \u2264 n). Since he obviously has no time and no interest to do the calculations for each option, he asked you to write a program to get to find that number!\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nThe third line contains n symbols without spaces between them \u2014 the array b_1, b_2 \u2026 b_n (b_i= '/' or b_i= '*' for every 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the number of simple segments [l;r].\n\nExamples\n\nInput\n\n\n3\n1 2 3\n*/*\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n7\n6 4 10 1 2 15 1\n*/*/*//\n\n\nOutput\n\n\n8", "tags": ["data structures", "number theory"], "difficulty": 13, "id": 1582, "sample_io": [{"input": "7\n6 4 10 1 2 15 1\n*/*/*//\n", "output": ["8\n"]}, {"input": "3\n1 2 3\n*/*\n", "output": ["2\n"]}], "test_list": [{"input": "20\n580570 26214 688069 348426 225262 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 269602 444392 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 510510 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["838\n"]}, {"input": "10\n442965 428095 895389 357686 456440 350881 915122 243260 46084 484178\n*//*******\n", "output": ["29\n"]}, {"input": "10\n7 70 30 14 105 3 35 2 3 105\n**/***/*/*\n", "output": ["19\n"]}, {"input": "2\n1000000 100000\n*/\n", "output": ["2\n"]}, {"input": "20\n3 5 2 49 70 70 3 10 30 2 15 105 14 6 14 49 15 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 225262 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 269602 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "10\n7 70 25 14 105 3 35 2 3 105\n**/***/*/*\n", "output": ["19\n"]}, {"input": "2\n1000000 100010\n*/\n", "output": ["1\n"]}, {"input": "20\n3 5 2 49 70 70 3 10 30 2 15 179 14 6 14 49 15 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "3\n1 4 3\n*/*\n", "output": ["2\n"]}, {"input": "10\n7 70 25 14 105 3 35 3 3 105\n**/***/*/*\n", "output": ["21\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 170170 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["772\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 170170 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["770\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["722\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["602\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["342\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 25456 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 147460 170170 510510 255255 510510 510510 510510 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["454\n"]}, {"input": "10\n442965 428095 895389 357686 456440 350881 915122 273564 46084 484178\n*//*******\n", "output": ["29\n"]}, {"input": "7\n6 4 10 1 4 15 1\n*/*/*//\n", "output": ["8\n"]}, {"input": "3\n2 2 3\n*/*\n", "output": ["4\n"]}, {"input": "10\n7 70 25 14 168 3 35 3 3 105\n**/***/*/*\n", "output": ["13\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 809148 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["810\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 14099 30030 158069 255255 30030 510510 30030 38981 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["500\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 170170 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 25725 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["738\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 400824 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["338\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 185505 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["341\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 199451 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["308\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 52562 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["331\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 92322 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["249\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 80652 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["239\n"]}, {"input": "50\n39270 170170 510510 86908 255255 46410 170170 510510 72930 59368 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["790\n"]}, {"input": "50\n39270 38106 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 809148 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["808\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 86470 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 51794 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["809\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 170170 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 25725 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 76910 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["663\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 9969 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 16800 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["769\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 114791 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 177096 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["340\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 358255 39270 52562 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["332\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 152883 850348 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["225\n"]}, {"input": "50\n39270 34008 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 86470 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 51794 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["855\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 15316 30030 29747 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 185505 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["251\n"]}, {"input": "20\n580570 26214 688069 348426 225262 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "2\n1000000 100010\n/*\n", "output": ["1\n"]}, {"input": "20\n3 5 2 49 70 70 3 10 30 2 15 179 14 6 14 52 15 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 141236 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "20\n3 5 2 49 70 70 3 10 30 2 15 179 14 6 14 52 6 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 141236 652088 143524 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "20\n3 5 2 49 70 29 3 10 30 2 15 179 14 6 14 52 6 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 265925 652088 143524 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "20\n580570 26214 688069 348426 265925 652088 212626 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "20\n484672 26214 688069 348426 265925 652088 212626 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "20\n484672 26214 688069 348426 265925 652088 212626 965480 940883 533073 565081 52449 751257 948695 302734 869043 196709 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["770\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["342\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 76194 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 39270 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 22865 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 22865 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 707044 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 707044 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 28044 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 28044 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 510510 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 30030 16256 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 16954 517 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 517 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 337 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 337 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 43242 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "20\n142529 26214 688069 348426 225262 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 269602 444392 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "10\n7 70 30 14 105 3 35 3 3 105\n**/***/*/*\n", "output": ["21\n"]}, {"input": "2\n1000000 110010\n*/\n", "output": ["1\n"]}, {"input": "20\n3 5 2 49 70 70 6 10 30 2 15 105 14 6 14 49 15 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "50\n39270 170170 510510 86908 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "10\n7 70 9 14 105 3 35 2 3 105\n**/***/*/*\n", "output": ["19\n"]}, {"input": "2\n1000000 000010\n/*\n", "output": ["1\n"]}, {"input": "20\n3 5 2 49 70 70 3 1 30 2 15 179 14 6 14 49 15 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "3\n1 3 3\n*/*\n", "output": ["2\n"]}, {"input": "20\n580570 26214 688069 348426 225262 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 107902 685115 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 879128 11081 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "20\n3 5 2 49 70 70 3 10 30 2 15 179 14 6 14 52 15 404 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 141236 652088 76512 965480 940883 533073 565081 645978 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 943154 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "20\n3 5 2 49 70 70 3 3 30 2 15 179 14 6 14 52 6 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 141236 652088 143524 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 191822\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 88356 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 170170 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["772\n"]}, {"input": "20\n3 6 2 49 70 29 3 10 30 2 15 179 14 6 14 52 6 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 265925 652088 143524 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 407970 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "20\n580570 26214 688069 348426 265925 652088 212626 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 692364\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 244943 72930 39270 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "20\n484672 26214 688069 348426 265925 652088 212626 965480 940883 533073 565081 52449 751257 948695 302734 190485 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 86470 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 498072 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 9969 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["770\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 55620 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["722\n"]}, {"input": "50\n39270 58747 942660 257011 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["602\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 508058 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 510510 72930 26571 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 114791 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["342\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 358044 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["342\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 15948 158069 255255 41929 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 30030 30030 58776 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 33850 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 25456 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 59161 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 850348 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 194042 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 931070 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 45258 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 83513 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 22725 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 939177 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39808 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 76194 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 540183 96659 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 762213 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 39270 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 764962 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 100957 180629 43645 102102 72930 623422 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 833296 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 4061 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 26160 510510 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 457078 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 32378 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 42556 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 18210 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 624478 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 22865 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 137744 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 22865 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 71699 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 12163 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 63856 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 46148 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 707044 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 328376 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 28058 510510 30030 25456 3936 39270 373 93644 869319 11081 707044 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 543316 102102 180629 43645 102102 28044 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 29093 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 28044 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 104871 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 47921 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 7689 39270 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 4008 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 517 93644 869319 11081 654752 43181 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 67728 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 361237 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 510510 30030 25456 3936 30149 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 51449 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 30030 16256 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 151583 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 16954 517 93644 869319 11081 654752 72930 123714 891109 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 16954 499 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 3443 158069 255255 61522 963706 41146 16256 3936 16954 517 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 126292 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 517 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 337 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 446891 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 138447 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 337 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 43242 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "20\n142529 26214 688069 348426 146194 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 269602 444392 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 27516 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 147460 170170 510510 255255 510510 510510 510510 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["454\n"]}, {"input": "10\n442965 428095 276099 357686 456440 350881 915122 273564 46084 484178\n*//*******\n", "output": ["29\n"]}, {"input": "10\n7 70 30 14 105 3 32 3 3 105\n**/***/*/*\n", "output": ["13\n"]}, {"input": "2\n1000000 110010\n/*\n", "output": ["1\n"]}, {"input": "20\n3 5 2 49 70 70 6 10 30 2 15 105 14 6 14 49 15 210 8 5\n********************\n", "output": ["210\n"]}], "task_id": "codecontest/35", "prompt": "Kuzya started attending school, where he was given math homework involving an array a of length n and an array of symbols b of length n, composed of characters '*' and '/'. Let's define a calculation path for a segment [l; r] (1 \u2264 l \u2264 r \u2264 n) as follows: * Start with x initialized to 1. For each i from l to r we will sequentially perform the following: if b_i is '*', then x becomes x multiplied by a_i, and if b_i is '/', x becomes (x) divided by (a_i), with the resulting calculation path for the segment [l; r] being a list of all x obtained during the calculations (the count of these is exactly r - l + 1). For instance, if a=[7, 12, 3, 5, 4, 10, 9], b=[/, *, /, /, /, *, *], l=2, r=6, then the calculation path for that section is [12, 4, 0.8, 0.2, 2]. A segment [l;r] is called simple if it contains only integers in the calculation path for it. Kuzya needs to determine the number of simple segments [l;r] (1 \u2264 l \u2264 r \u2264 n). Realizing he has neither the interest nor time to perform the calculations for each possibility, he requested your assistance in writing a program to find that number!\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nThe third line contains n symbols without spaces between them \u2014 the array b_1, b_2 \u2026 b_n (b_i= '/' or b_i= '*' for every 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the number of simple segments [l;r].\n\nExamples\n\nInput\n\n\n3\n1 2 3\n*/*\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n7\n6 4 10 1 2 15 1\n*/*/*//\n\n\nOutput\n\n\n8", "repair_prompt": ["Kuzya started attending school, where he was given math homework involving an array a of length n and an array of symbols b of length n, composed of characters '*' and '/'. Let's define a calculation path for a segment [l; r] (1 \u2264 l \u2264 r \u2264 n) as follows: * Start with x initialized to 1. For each i from l to r we will sequentially perform the following: if b_i is '*', then x becomes x multiplied by a_i, and if b_i is '/', x becomes (x) divided by (a_i), with the resulting calculation path for the segment [l; r] being a list of all x obtained during the calculations (the count of these is exactly r - l + 1). For instance, if a=[7, 12, 3, 5, 4, 10, 9], b=[/, *, /, /, /, *, *], l=2, r=6, then the calculation path for that section is [12, 4, 0.8, 0.2, 2]. A segment [l;r] is called simple if it contains only integers in the calculation path for it. Kuzya needs to determine the number of simple segments [l;r] (1 \u2264 l \u2264 r \u2264 n). Realizing he has neither the interest nor time to perform the calculations for each possibility, he requested your assistance in writing a program to find that number!\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nThe third line contains n symbols without spaces between them \u2014 the array b_1, b_2 \u2026 b_n (b_i= '/' or b_i= '*' for every 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the number of simple segments [l;r].\n\nExamples\n\nInput\n\n\n3\n1 2 3\n*/*\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n7\n6 4 10 1 2 15 1\n*/*/*//\n\n\nOutput\n\n\n8\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Calculate the number of simple segments in the array.\n\n    A segment [l; r] is simple if the calculation path contains only integers.\n    \n    Args:\n        n: The length of the arrays a and b.\n        a: The array of integers.\n        b: The array of symbols ('*' or '/').\n\n    Returns:\n        The number of simple segments [l; r].\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible starting points of segments\n    for start in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        is_simple = True  # Assume the segment is simple initially\n\n        # Iterate over all possible ending points of segments\n        for end in range(start, n):\n            if b[end] == '*':\n                x *= a[end]\n            elif b[end] == '/':\n                if x % a[end] != 0:\n                    is_simple = False\n                    break\n                x //= a[end]\n\n            # If the segment is still simple, count it\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Counts the number of simple segments in the given arrays.\n\n    A segment [l;r] is simple if all intermediate results in its calculation path are integers.\n\n    Args:\n        n: The length of the arrays.\n        a: The array of integers.\n        b: The array of symbols ('*' or '/').\n\n    Returns:\n        The number of simple segments [l;r].\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible start points of the segment\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment start\n        # Iterate over all possible end points of the segment\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:\n                    break  # If division does not result in an integer, break the loop\n                x //= a[r]\n            # If we reach here, all operations in the segment [l;r] resulted in integers\n            simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Calculate the number of simple segments in the given arrays.\n\n    A segment [l; r] is simple if the calculation path contains only integers.\n    \n    Args:\n        n: The length of the arrays.\n        a: The array of integers.\n        b: The array of symbols ('*' or '/').\n\n    Returns:\n        The number of simple segments.\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible segments [l; r]\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:\n                    break  # If division is not exact, break out of the loop\n                x //= a[r]\n            # If we reach here, the segment [l; r] is simple\n            simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Calculate the number of simple segments in the array.\n\n    Args:\n        n (int): The length of the array.\n        a (List[int]): The array of integers.\n        b (str): The array of symbols ('*' or '/').\n\n    Returns:\n        int: The number of simple segments [l;r].\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible segments [l; r]\n    for l in range(n):\n        x = 1\n        is_simple = True\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:\n                    is_simple = False\n                    break\n                x //= a[r]\n            \n            # If the segment is simple, increment the count\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = input().strip()\n\n    result = count_simple_segments(n, a, b)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Counts the number of simple segments in the given arrays a and b.\n\n    A segment [l; r] is simple if the calculation path contains only integers.\n    The calculation path is determined by the operations defined in b.\n\n    Args:\n        n: The length of the arrays a and b.\n        a: An array of integers.\n        b: A string of operations ('*' or '/').\n\n    Returns:\n        The number of simple segments [l; r].\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible starting points of the segment\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new starting point\n        # Iterate over all possible ending points of the segment\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:\n                    break  # If division does not result in an integer, break\n                x //= a[r]\n            # If we reach here, the segment [l; r] is simple\n            simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Calculate the number of simple segments in the array.\n\n    Args:\n        n (int): The length of the array.\n        a (List[int]): The array of integers.\n        b (str): The array of symbols ('*' or '/').\n\n    Returns:\n        int: The number of simple segments [l;r].\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible starting points of segments\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment starting point\n        is_simple = True  # Assume the segment is simple initially\n\n        # Iterate over all possible ending points of segments\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:\n                    is_simple = False\n                    break\n                x //= a[r]\n\n            # If the segment is still simple, increment the count\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport numpy as np\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Calculate the number of simple segments in the given arrays.\n\n    Args:\n        n (int): The length of the arrays.\n        a (List[int]): The array of integers.\n        b (str): The array of symbols ('*' or '/').\n\n    Returns:\n        int: The number of simple segments.\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible segments [l, r]\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if a[r] == 0:\n                    break  # Avoid division by zero\n                if x % a[r] != 0:\n                    break  # If division does not result in an integer, break\n                x //= a[r]\n            \n            # If we reach here, the segment [l, r] is simple\n            simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Calculate the number of simple segments in the array.\n\n    Args:\n        n: The length of the array.\n        a: List of integers representing the array.\n        b: String of symbols '*' and '/' representing operations.\n\n    Returns:\n        The number of simple segments [l;r] where the calculation path contains only integers.\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible segments [l;r]\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        is_simple = True  # Assume the segment is simple initially\n\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:  # Check if division results in an integer\n                    is_simple = False\n                    break\n                x //= a[r]\n\n            # If the segment is simple, increment the count\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Counts the number of simple segments in the given arrays.\n\n    A segment [l; r] is simple if the calculation path contains only integers.\n    The calculation path is determined by the operations defined in array b.\n\n    Args:\n        n: The length of the arrays a and b.\n        a: An array of integers.\n        b: An array of symbols ('*' or '/').\n\n    Returns:\n        The number of simple segments [l; r].\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible segments [l; r]\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        is_simple = True  # Assume the segment is simple initially\n\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:\n                    is_simple = False\n                    break\n                x //= a[r]\n\n            # If the segment is still simple, count it\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\nimport numpy as np\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Calculate the number of simple segments in the given arrays.\n\n    Args:\n        n (int): The length of the arrays.\n        a (List[int]): The array of integers.\n        b (str): The array of symbols ('*' or '/').\n\n    Returns:\n        int: The number of simple segments.\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible segments [l, r]\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        is_simple = True  # Assume the segment is simple initially\n\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:  # Check if division results in an integer\n                    is_simple = False\n                    break\n                x //= a[r]  # Perform integer division\n\n            # If the segment is still simple, increment the count\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = input().strip()\n\n    result = count_simple_segments(n, a, b)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement involves calculating the number of simple segments in an array based on mathematical operations defined by a second array of symbols. The challenge lies in efficiently processing potentially large input sizes while ensuring all calculations result in integers.\nrequirement pool:\n- Implement efficient algorithm to calculate simple segments.\n- Ensure all operations maintain integer results.\n- Optimize for performance with large datasets.\n- Validate results against multiple test cases.\n- Provide clear documentation for the solution.\nWe will implement an efficient algorithm to calculate simple segments using a single pass through the array. The algorithm will maintain a running product and check for integer results at each step. We will use Python's native integer type for calculations and handle division carefully to avoid non-integer results. The solution will be optimized for performance to handle large input sizes up to 10^6 elements.\n", "requirement analysis:\nThe task requires calculating the number of simple segments in an array based on operations defined by a second array of symbols. A segment is simple if all intermediate results are integers. The solution must efficiently handle large input sizes up to 10^6.\nrequirement pool:\n- Efficiently calculate the number of simple segments.\n- Ensure the solution is optimized for large input sizes.\n- Provide clear and accurate output for all test cases.\n- Include error handling for invalid inputs.\n- Optimize memory usage for handling large arrays.\nWe will use a sliding window approach to efficiently calculate the number of simple segments. The key challenge is to ensure that all intermediate results in a segment are integers, which can be checked by maintaining a running product and division count. We will utilize Python's native integer operations to handle large numbers and avoid floating-point inaccuracies. The solution will iterate over possible segment start and end points, updating the running product and checking for integer results.\n", "requirement analysis:\nThe program must efficiently calculate the number of simple segments in the given arrays. It should handle large input sizes up to 10^6 elements and ensure all operations result in integer values for a segment to be considered simple.\nrequirement pool:\n- Efficiently process arrays of size up to 10^6.\n- Ensure all calculations result in integer values for simple segments.\n- Optimize the algorithm for performance.\n- Provide accurate results for all test cases.\n- Include error handling for invalid inputs.\nWe will implement a function to calculate the number of simple segments in the given arrays. The function will iterate over all possible segments [l; r] and compute the calculation path for each segment. We will use integer arithmetic to ensure that all operations result in integer values. If any division results in a non-integer, the segment is not considered simple. The algorithm will be optimized to handle large input sizes efficiently by avoiding unnecessary calculations.\n", "requirement analysis:\nThe task requires calculating the number of simple segments in an array based on arithmetic operations defined by a second array of symbols. The solution must efficiently handle large inputs and ensure all calculations result in integers for a segment to be considered simple.\nrequirement pool:\n- Implement efficient calculation of simple segments\n- Ensure all operations result in integer values\n- Optimize for large input sizes\n- Validate input data for correctness\n- Provide detailed output for debugging\nWe will implement a function to calculate the number of simple segments in the array. The function will iterate over all possible segments [l; r] and compute the calculation path for each segment. We will use integer arithmetic to ensure that all operations result in integer values. The function will be optimized to handle large input sizes efficiently by avoiding unnecessary recalculations and using early termination when a non-integer result is encountered.\n", "requirement analysis:\nThe task requires developing an algorithm to determine the number of simple segments in an array based on given operations. The solution must efficiently handle large input sizes up to 10^6 elements, ensuring that the calculation path for each segment only contains integers. The output should be a single integer representing the count of such segments.\nrequirement pool:\n- Develop an efficient algorithm to calculate simple segments.\n- Ensure the solution can handle the maximum input size within time limits.\n- Optimize the code for readability and maintainability.\n- Include comprehensive test cases to validate the solution.\n- Document the code to explain the logic and approach used.\nWe will use a sliding window approach to efficiently calculate the number of simple segments. The algorithm will iterate over all possible segments and check if the calculation path contains only integers. We will leverage the properties of multiplication and division to ensure that the intermediate results remain integers. The use of Python's native integer type will help manage large numbers without overflow issues.\n", "requirement analysis:\nThe requirement is to determine the number of simple segments in an array based on mathematical operations defined by a second array of symbols. The solution must efficiently handle large input sizes and ensure all calculations result in integers for a segment to be considered simple.\nrequirement pool:\n- Implement efficient algorithm to calculate simple segments.\n- Ensure all operations maintain integer results for simplicity.\n- Optimize performance for handling maximum input size.\n- Validate solution against multiple test cases for accuracy.\n- Provide clear documentation for understanding the solution.\nWe will implement an efficient algorithm to calculate the number of simple segments in the array. The key challenge is to ensure that all operations within a segment result in integer values. We will iterate over all possible segments and use a running product to check if the segment remains simple. The algorithm will be optimized to handle large input sizes by avoiding unnecessary recalculations and using integer arithmetic to prevent floating-point inaccuracies.\n", "requirement analysis:\nThe task requires calculating the number of simple segments in an array based on mathematical operations defined by a second array of symbols. The solution must efficiently handle large input sizes and ensure all calculations result in integers for a segment to be considered simple.\nrequirement pool:\n- Implement efficient algorithm to calculate simple segments\n- Ensure all operations maintain integer results\n- Optimize for large input sizes\n- Handle edge cases such as division by zero\n- Provide clear output format\nWe will implement an efficient algorithm using Python to calculate the number of simple segments. The algorithm will iterate over all possible segments and check if the calculation path contains only integers. We will use the NumPy library to handle large arrays efficiently and perform mathematical operations accurately. Division by zero will be handled by checking the divisor before performing the division.\n", "requirement analysis:\nThe requirement is to determine the number of simple segments in an array based on mathematical operations defined by another array of symbols. The solution must efficiently handle large input sizes and ensure all calculations result in integers for a segment to be considered simple.\nrequirement pool:\n- Implement efficient algorithm to calculate simple segments.\n- Ensure all operations are performed accurately.\n- Optimize for performance with large datasets.\n- Provide clear output format as specified.\n- Include error handling for invalid inputs.\nWe will implement an efficient algorithm to calculate the number of simple segments in the array. The algorithm will iterate over all possible segments and check if the calculation path results in integers only. We will use Python's built-in capabilities for arithmetic operations and ensure that division operations are checked for integer results. Given the constraints, we will optimize the solution to handle large input sizes efficiently.\n", "requirement analysis:\nThe task requires developing an efficient algorithm to determine the number of simple segments in an array based on given operations. The solution must handle large input sizes up to 10^6 efficiently, ensuring that all calculations are performed accurately and quickly. The output should be a single integer representing the count of simple segments.\nrequirement pool:\n- Develop an efficient algorithm to calculate simple segments.\n- Ensure the solution can handle input sizes up to 10^6.\n- Optimize the code for performance and speed.\n- Provide clear and concise output.\n- Include comprehensive test cases for validation.\nWe will implement an efficient algorithm using a sliding window technique to calculate the number of simple segments. The algorithm will iterate over all possible segments and check if the calculation path contains only integers. We will use Python's built-in capabilities for handling large integers and ensure the solution is optimized for performance with large datasets.\n", "requirement analysis:\nThe task requires calculating the number of simple segments in an array based on mathematical operations defined by a second array of symbols. The challenge lies in efficiently handling large input sizes while ensuring the calculations remain accurate, especially when division is involved.\nrequirement pool:\n- Implement efficient segment calculation algorithm\n- Ensure accurate handling of division operations\n- Optimize for large input sizes\n- Handle edge cases such as division by zero\n- Provide clear output format\nWe will implement an efficient algorithm to calculate the number of simple segments by iterating over all possible segments and checking if the calculation path contains only integers. We will use Python's built-in capabilities for arithmetic operations and leverage NumPy for efficient array handling, especially for large input sizes.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 405, "examples": "\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nThe third line contains n symbols without spaces between them \u2014 the array b_1, b_2 \u2026 b_n (b_i= '/' or b_i= '*' for every 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the number of simple segments [l;r].\n\nExamples\n\nInput\n\n\n3\n1 2 3\n*/*\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n7\n6 4 10 1 2 15 1\n*/*/*//\n\n\nOutput\n\n\n8", "mutate_method": "condense_two2one", "parent_index": 60}
