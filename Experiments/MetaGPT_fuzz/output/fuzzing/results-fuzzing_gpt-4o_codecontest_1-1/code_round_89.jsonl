{"name": "1591_F. Non-equal Neighbours", "description": "You are given an array of n positive integers a_1, a_2, \u2026, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that: \n\n  * 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and \n  * b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1). \n\n\n\nThe number of such arrays can be very large, so print it modulo 998 244 353.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].", "tags": ["combinatorics", "data structures", "dp", "math"], "difficulty": 12, "id": 1591, "sample_io": [{"input": "3\n1 1 1\n", "output": ["0"]}, {"input": "2\n2 3\n", "output": ["4"]}, {"input": "3\n2 2 2\n", "output": ["2"]}], "test_list": [{"input": "1\n1000000000\n", "output": ["1755647"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 13 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["558513243"]}, {"input": "10\n10 10 7 9 8 3 3 10 7 3\n", "output": ["24763644"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["718512763\n"]}, {"input": "3\n2 1 1\n", "output": ["0\n"]}, {"input": "3\n4 2 2\n", "output": ["6\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["87686619\n"]}, {"input": "3\n2 2 1\n", "output": ["1\n"]}, {"input": "3\n4 2 3\n", "output": ["12\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["285122535\n"]}, {"input": "3\n4 2 6\n", "output": ["30\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["545014433\n"]}, {"input": "3\n1 2 6\n", "output": ["5\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["360285379\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["89495517\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["469650540\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["370736857\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["445730939\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["921294799\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["414690183\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["51240613\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["141209239\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["200471450\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 170 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["100240726\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["228126328\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 13 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 59 1 96 87 83 29 21 41 22\n", "output": ["213571064\n"]}, {"input": "10\n10 10 7 9 8 3 3 10 7 5\n", "output": ["41385816\n"]}, {"input": "2\n2 5\n", "output": ["8\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 143 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["653041901\n"]}, {"input": "3\n8 2 2\n", "output": ["14\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["705001937\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["673298806\n"]}, {"input": "3\n7 2 6\n", "output": ["60\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["902014388\n"]}, {"input": "3\n1 4 6\n", "output": ["15\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 93 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["779349856\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 44 22\n", "output": ["106830678\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["729851078\n"]}, {"input": "100\n23 39 85 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["292419933\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 40 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["97463527\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["289738077\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["882495350\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 111 29 21 41 22\n", "output": ["483820379\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["5228742\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["920479892\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 170 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 6 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["315849739\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["469671321\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 59 1 96 87 83 29 21 41 22\n", "output": ["372540891\n"]}, {"input": "10\n10 10 7 9 4 3 3 10 7 5\n", "output": ["17787600\n"]}, {"input": "2\n2 10\n", "output": ["18\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["598608508\n"]}, {"input": "3\n8 2 4\n", "output": ["42\n"]}, {"input": "100\n23 39 85 46 97 72 41 47 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["728085744\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["852869444\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["732213280\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 93 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["958631168\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 44 22\n", "output": ["642492635\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 102 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["991595446\n"]}, {"input": "100\n23 39 85 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["967606999\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["455851978\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["208172902\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["822724779\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 111 29 21 41 22\n", "output": ["192155988\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 7 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["844774035\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["248900717\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["555539977\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 22\n", "output": ["988554467\n"]}, {"input": "10\n10 10 7 15 4 3 3 10 7 5\n", "output": ["32729184\n"]}, {"input": "2\n2 6\n", "output": ["10\n"]}, {"input": "3\n1 3 2\n", "output": ["3\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["461278736\n"]}, {"input": "3\n8 2 5\n", "output": ["56\n"]}, {"input": "100\n23 39 85 46 97 72 41 47 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["329813604\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["516900758\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["713610799\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 93 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["901058285\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 44 22\n", "output": ["588482740\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["633885419\n"]}, {"input": "100\n23 39 85 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["81997207\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 54 29 21 41 22\n", "output": ["480680032\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 97 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["227236709\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["605941910\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 20 82 51 10 86 82 30 31 6 49 15 33 100 35 1 96 161 111 29 21 41 22\n", "output": ["317837051\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 7 14 70 47 100 40 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["133389964\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 4 41 22\n", "output": ["419760254\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 169 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["934658563\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 22\n", "output": ["855852873\n"]}, {"input": "10\n10 10 7 15 4 3 3 7 7 5\n", "output": ["20656944\n"]}, {"input": "3\n1 5 2\n", "output": ["7\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 41 22\n", "output": ["153546810\n"]}, {"input": "3\n7 2 5\n", "output": ["48\n"]}, {"input": "100\n23 39 85 46 97 72 41 47 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["505050061\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["182671371\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["224288551\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 93 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["867164784\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 44 22\n", "output": ["332591913\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["731679464\n"]}, {"input": "100\n23 39 20 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["146916844\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 54 29 21 41 22\n", "output": ["944706563\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 97 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["184873325\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 63 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["111563089\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 43 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 20 82 51 10 86 82 30 31 6 49 15 33 100 35 1 96 161 111 29 21 41 22\n", "output": ["995650057\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 7 14 70 47 100 40 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 37 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["935655766\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 4 41 22\n", "output": ["88170853\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 169 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 15 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["254096928\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 22\n", "output": ["571291489\n"]}, {"input": "10\n10 10 7 14 4 3 3 7 7 5\n", "output": ["19085220\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["355306089\n"]}, {"input": "100\n23 44 85 46 97 72 41 47 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["688465638\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 5 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["678152365\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["976792414\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 93 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["322011901\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 87 22\n", "output": ["412651438\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 42 30 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["198537403\n"]}, {"input": "100\n23 39 20 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 108 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["565839205\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 82 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 54 29 21 41 22\n", "output": ["867302506\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 184 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["484215409\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 63 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 108 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["375600460\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 26 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 43 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 20 82 51 10 86 82 30 31 6 49 15 33 100 35 1 96 161 111 29 21 41 22\n", "output": ["895087751\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 7 14 70 47 100 40 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 37 10 86 82 19 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["584645713\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 107 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 4 41 22\n", "output": ["709282325\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 169 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 22 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["670242821\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 32\n", "output": ["90409100\n"]}, {"input": "10\n10 10 7 14 4 3 3 7 11 5\n", "output": ["33956820\n"]}, {"input": "2\n7 6\n", "output": ["36\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 54 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["553775197\n"]}, {"input": "100\n23 44 85 46 97 72 41 47 37 18 8 40 24 61 12 79 51 78 61 66 95 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["107399434\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 110 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 5 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["973852033\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 110 35 1 96 161 83 29 21 41 22\n", "output": ["998126790\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 18 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["965895703\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 29 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 87 22\n", "output": ["666165613\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 42 60 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["24264123\n"]}, {"input": "100\n23 39 20 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 108 30 31 6 49 15 33 100 35 1 96 161 63 29 21 41 22\n", "output": ["372619075\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 82 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 78 161 54 29 21 41 22\n", "output": ["7807144\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 184 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 6 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["649696079\n"]}, {"input": "100\n23 39 85 46 97 72 38 70 37 18 8 40 24 63 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 108 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["600170187\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 26 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 43 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 20 82 51 10 86 82 30 31 6 49 15 33 100 35 1 98 161 111 29 21 41 22\n", "output": ["961023126\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 7 14 70 47 100 47 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 37 10 86 82 19 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["951846570\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 107 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 64 30 31 6 49 15 33 100 35 1 96 161 83 29 4 41 22\n", "output": ["331922767\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 169 78 14 30 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 22 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["287740311\n"]}, {"input": "100\n23 39 85 46 174 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 32\n", "output": ["399115642\n"]}, {"input": "10\n10 13 7 14 4 3 3 7 11 5\n", "output": ["46533420\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 24 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 54 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["129191858\n"]}, {"input": "100\n23 44 85 46 97 72 41 47 37 4 8 40 24 61 12 79 51 78 61 66 95 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["694511358\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 110 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 5 31 78 18 45 88 8 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["410344351\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 9 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 110 35 1 96 161 83 29 21 41 22\n", "output": ["637412028\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 18 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 104 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["770297946\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 8 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 29 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 87 22\n", "output": ["720547620\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 21 42 42 60 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["184835118\n"]}, {"input": "100\n23 39 20 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 136 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 108 30 31 6 49 15 33 100 35 1 96 161 63 29 21 41 22\n", "output": ["647251059\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 82 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 18 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 78 161 54 29 21 41 22\n", "output": ["78683600\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 184 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 8 20 57 6 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["724006256\n"]}, {"input": "100\n23 39 85 46 97 72 38 70 37 18 8 40 24 81 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 108 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["627339548\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 26 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 43 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 3 82 51 10 86 82 30 31 6 49 15 33 100 35 1 98 161 111 29 21 41 22\n", "output": ["434521061\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 62 7 14 70 47 100 47 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 37 10 86 82 19 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["812802852\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 107 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 64 30 31 6 49 15 33 100 18 1 96 161 83 29 4 41 22\n", "output": ["584894763\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 7 79 51 148 61 66 85 169 78 14 30 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 22 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["538125641\n"]}, {"input": "100\n23 39 85 46 174 72 41 70 74 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 32\n", "output": ["242550124\n"]}, {"input": "10\n14 13 7 14 4 3 3 7 11 5\n", "output": ["65398320\n"]}, {"input": "100\n23 39 85 46 97 113 41 70 37 24 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 54 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["292664386\n"]}, {"input": "100\n23 44 85 46 97 72 41 47 37 4 8 40 24 61 20 79 51 78 61 66 95 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["622951499\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 110 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 9 31 78 18 45 88 8 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["894004123\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 9 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 110 35 1 96 161 120 29 21 41 22\n", "output": ["557821120\n"]}, {"input": "100\n23 39 85 46 118 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 18 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 104 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["178410744\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 8 88 6 37 38 51 86 37 42 58 47 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 29 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 87 22\n", "output": ["827890758\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 11 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 21 42 42 60 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["953441508\n"]}, {"input": "100\n23 39 20 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 136 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 53 10 86 108 30 31 6 49 15 33 100 35 1 96 161 63 29 21 41 22\n", "output": ["95715949\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 82 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 18 30 79 56 50 14 61 18 24 21 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 78 161 54 29 21 41 22\n", "output": ["255131888\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 57 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 184 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 8 20 57 6 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["71115463\n"]}, {"input": "100\n23 39 85 46 97 72 38 70 37 18 8 40 24 81 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 108 3 93 15 24 74 63 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["408733195\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 26 19 30 14 14 82 56 15 6 68 24 97 61 31 78 18 45 88 6 43 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 3 82 51 10 86 82 30 31 6 49 15 33 100 35 1 98 161 111 29 21 41 22\n", "output": ["672398298\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 62 7 14 70 47 100 47 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 36 57 3 37 15 24 74 32 3 71 93 4 66 20 82 37 10 86 82 19 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["410977795\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 87 7 32 58 30 79 56 50 14 107 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 64 30 31 6 49 15 33 100 18 1 96 161 83 29 4 41 22\n", "output": ["383288115\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 7 79 51 148 61 66 85 169 78 14 30 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 22 24 74 32 3 71 93 4 66 20 17 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["930102680\n"]}, {"input": "100\n23 39 85 46 174 72 41 70 74 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 3 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 32\n", "output": ["470391907\n"]}, {"input": "10\n14 13 7 14 4 5 3 7 11 5\n", "output": ["141696360\n"]}, {"input": "2\n12 3\n", "output": ["33\n"]}, {"input": "100\n23 39 85 46 97 113 41 59 37 24 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 54 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["760404853\n"]}, {"input": "100\n23 44 85 46 97 72 41 20 37 4 8 40 24 61 20 79 51 78 61 66 95 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["639299422\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 92 61 66 85 97 78 14 70 47 110 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 9 31 78 18 45 88 8 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["616383833\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 9 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 8 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 110 35 1 96 161 120 29 21 41 22\n", "output": ["609137950\n"]}, {"input": "100\n23 39 85 46 118 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 18 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 71 37 42 58 30 79 56 50 14 104 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["650617595\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 8 88 6 37 48 51 86 37 42 58 47 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 29 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 87 22\n", "output": ["613223673\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 11 91 82 56 10 6 68 24 97 27 31 78 18 45 88 6 37 38 51 86 21 42 42 60 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["50873118\n"]}, {"input": "100\n23 39 33 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 136 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 53 10 86 108 30 31 6 49 15 33 100 35 1 96 161 63 29 21 41 22\n", "output": ["123748946\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 77 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 18 30 79 56 50 14 61 18 24 21 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 78 161 54 29 21 41 22\n", "output": ["652065060\n"]}, {"input": "100\n23 39 85 46 60 72 41 70 37 18 8 57 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 184 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 8 20 57 6 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["237513219\n"]}, {"input": "100\n23 39 85 46 97 72 38 70 37 18 8 40 24 81 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 48 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 108 3 93 15 24 74 63 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["137738047\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 26 19 30 14 14 82 56 15 6 68 24 97 61 31 78 18 45 88 6 16 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 3 82 51 10 86 82 30 31 6 49 15 33 100 35 1 98 161 111 29 21 41 22\n", "output": ["550954013\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 62 7 14 70 47 100 47 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 36 57 3 37 15 24 74 32 3 71 93 4 77 20 82 37 10 86 82 19 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["679579369\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 22 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 87 7 32 58 30 79 56 50 14 107 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 64 30 31 6 49 15 33 100 18 1 96 161 83 29 4 41 22\n", "output": ["621068200\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 7 79 51 148 61 66 85 169 78 14 30 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 20 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 22 24 74 32 3 71 93 4 66 20 17 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["781759080\n"]}, {"input": "100\n23 39 85 46 174 72 41 70 74 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 3 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 18 29 21 41 32\n", "output": ["398371399\n"]}, {"input": "2\n4 3\n", "output": ["9\n"]}, {"input": "100\n23 39 85 46 97 113 41 59 37 24 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 54 14 91 82 56 10 6 73 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["547643049\n"]}, {"input": "100\n23 44 85 46 97 72 41 20 37 4 8 40 24 61 20 79 51 78 61 66 95 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 122 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["361956682\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 92 61 66 114 97 78 14 70 47 110 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 9 31 78 18 45 88 8 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["335779619\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 9 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 8 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 110 35 1 96 161 120 29 21 41 3\n", "output": ["739351648\n"]}, {"input": "100\n23 39 85 46 118 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 18 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 71 37 42 58 30 79 56 50 14 104 18 24 20 57 3 93 15 24 74 32 21 71 93 8 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["905581936\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 8 88 6 37 48 51 86 37 42 58 47 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 29 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 58 21 87 22\n", "output": ["732799412\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 11 91 82 56 10 6 68 24 97 27 31 78 18 45 77 6 37 38 51 86 21 42 42 60 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["649493278\n"]}, {"input": "100\n23 39 33 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 136 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 70 10 86 108 30 31 6 49 15 33 100 35 1 96 161 63 29 21 41 22\n", "output": ["773258548\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 77 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 18 30 79 56 50 20 61 18 24 21 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 78 161 54 29 21 41 22\n", "output": ["428412692\n"]}], "task_id": "codecontest/50", "prompt": "You are given an array of n positive integers a_1, a_2, \u2026, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n) and b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1). \n\nThe number of such arrays can be very large, so print it modulo 998 244 353.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].", "repair_prompt": ["You are given an array of n positive integers a_1, a_2, \u2026, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n) and b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1). \n\nThe number of such arrays can be very large, so print it modulo 998 244 353.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that 1 \u2264 b_i \u2264 a_i and b_i \u2260 b_{i+1}.\n\n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of integers.\n\n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 1:\n        return a[0] % MOD\n\n    # Initialize dp array\n    dp = [0] * (max(a) + 1)\n    for i in range(1, a[0] + 1):\n        dp[i] = 1\n\n    # Iterate over each position in the array\n    for i in range(1, n):\n        new_dp = [0] * (max(a) + 1)\n        prefix_sum = 0\n\n        # Calculate prefix sums for the current dp array\n        for j in range(1, max(a) + 1):\n            prefix_sum = (prefix_sum + dp[j]) % MOD\n            if j <= a[i]:\n                new_dp[j] = prefix_sum\n\n        # Update dp array for the next iteration\n        dp = new_dp\n\n    # Sum up all valid sequences ending at the last position\n    result = sum(dp) % MOD\n    return result\n\n# Input and output interface\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMODULO = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that 1 \u2264 b_i \u2264 a_i and b_i \u2260 b_{i+1}.\n\n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of positive integers.\n\n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 1:\n        return a[0] % MODULO\n\n    # Initialize dp table\n    dp = [[0] * (max(a) + 1) for _ in range(n)]\n    \n    # Base case: first element can be any value from 1 to a[0]\n    for j in range(1, a[0] + 1):\n        dp[0][j] = 1\n\n    # Fill dp table\n    for i in range(1, n):\n        prefix_sum = [0] * (max(a) + 1)\n        for j in range(1, max(a) + 1):\n            prefix_sum[j] = (prefix_sum[j - 1] + dp[i - 1][j]) % MODULO\n\n        for j in range(1, a[i] + 1):\n            dp[i][j] = (prefix_sum[a[i]] - prefix_sum[j - 1]) % MODULO\n\n    # Calculate the result\n    result = sum(dp[n - 1][j] for j in range(1, a[n - 1] + 1)) % MODULO\n    return result\n\n# Interface using input() and print()\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"\n    Calculate the number of valid arrays b such that:\n    1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n)\n    b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1)\n    \n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of positive integers.\n    \n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    # Initialize the DP table\n    dp = [[0] * (max(a) + 1) for _ in range(n)]\n    \n    # Base case: for the first element, all values from 1 to a[0] are valid\n    for j in range(1, a[0] + 1):\n        dp[0][j] = 1\n    \n    # Fill the DP table\n    for i in range(1, n):\n        prefix_sum = [0] * (max(a) + 1)\n        \n        # Calculate prefix sums for the previous row\n        for j in range(1, max(a) + 1):\n            prefix_sum[j] = (prefix_sum[j - 1] + dp[i - 1][j]) % MOD\n        \n        # Update the current row in the DP table\n        for j in range(1, a[i] + 1):\n            dp[i][j] = (prefix_sum[a[i - 1]] - prefix_sum[j - 1] + MOD) % MOD\n    \n    # Calculate the result by summing up the last row of the DP table\n    result = sum(dp[n - 1][j] for j in range(1, a[n - 1] + 1)) % MOD\n    \n    return result\n\ndef main():\n    \"\"\"\n    Main function to read input, compute the result, and print it.\n    \"\"\"\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMODULO = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that 1 \u2264 b_i \u2264 a_i and b_i \u2260 b_{i+1}.\n\n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of positive integers.\n\n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    # Initialize the dynamic programming table\n    dp = [[0] * (max(a) + 1) for _ in range(n)]\n\n    # Base case: for the first element, all values from 1 to a[0] are valid\n    for value in range(1, a[0] + 1):\n        dp[0][value] = 1\n\n    # Fill the dynamic programming table\n    for i in range(1, n):\n        prefix_sum = [0] * (max(a) + 1)\n        for value in range(1, max(a) + 1):\n            prefix_sum[value] = (prefix_sum[value - 1] + dp[i - 1][value]) % MODULO\n\n        for value in range(1, a[i] + 1):\n            dp[i][value] = (prefix_sum[a[i - 1]] - prefix_sum[value - 1]) % MODULO\n\n    # Calculate the result by summing up the last row of the dp table\n    result = sum(dp[n - 1][value] for value in range(1, a[n - 1] + 1)) % MODULO\n\n    return result\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMODULO = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that 1 \u2264 b_i \u2264 a_i and b_i \u2260 b_{i+1}.\"\"\"\n    if n == 0:\n        return 0\n    \n    # Initialize dp array where dp[i][j] represents the number of valid arrays ending with j at position i\n    dp = [[0] * (max(a) + 1) for _ in range(n)]\n    \n    # Base case: for the first element, any value from 1 to a[0] is valid\n    for j in range(1, a[0] + 1):\n        dp[0][j] = 1\n    \n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(1, a[i] + 1):\n            # Sum all valid arrays ending with a different value at the previous position\n            dp[i][j] = sum(dp[i-1][k] for k in range(1, a[i-1] + 1) if k != j) % MODULO\n    \n    # Sum all valid arrays ending at the last position\n    result = sum(dp[n-1][j] for j in range(1, a[n-1] + 1)) % MODULO\n    \n    return result\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    \n    result = count_valid_arrays(n, a)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef count_valid_arrays(n: int, a: list) -> int:\n    \"\"\"Calculate the number of valid arrays b such that 1 \u2264 b_i \u2264 a_i and b_i \u2260 b_{i+1}.\n\n    Args:\n        n (int): The length of the array a.\n        a (list): A list of integers representing the maximum value for each position.\n\n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    MOD = 998244353\n\n    # Initialize a list to store the number of valid sequences ending with each possible value\n    dp = [0] * (max(a) + 1)\n\n    # Initialize the first position\n    for value in range(1, a[0] + 1):\n        dp[value] = 1\n\n    # Iterate over each position in the array\n    for i in range(1, n):\n        new_dp = [0] * (max(a) + 1)\n        cumulative_sum = 0\n\n        # Calculate cumulative sum for the current position\n        for value in range(1, max(a) + 1):\n            cumulative_sum = (cumulative_sum + dp[value]) % MOD\n            if value <= a[i]:\n                new_dp[value] = cumulative_sum\n\n        # Update dp for the next iteration\n        dp = new_dp\n\n    # Sum up all valid sequences for the last position\n    result = sum(dp) % MOD\n    return result\n\n# Provide the Interface using input() and print()\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    # Initialize the DP table\n    dp = [[0] * (max(a) + 1) for _ in range(n)]\n    \n    # Base case: for the first position, any number from 1 to a[0] is valid\n    for j in range(1, a[0] + 1):\n        dp[0][j] = 1\n    \n    # Fill the DP table\n    for i in range(1, n):\n        for j in range(1, a[i] + 1):\n            # Sum all valid arrays from the previous position where the last element is not j\n            dp[i][j] = sum(dp[i-1][k] for k in range(1, a[i-1] + 1) if k != j) % MOD\n    \n    # Calculate the result by summing up all valid arrays for the last position\n    result = sum(dp[n-1][j] for j in range(1, a[n-1] + 1)) % MOD\n    \n    return result\n\n# Input and output interface\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that 1 \u2264 b_i \u2264 a_i and b_i \u2260 b_{i+1}.\n\n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of integers a_1, a_2, ..., a_n.\n\n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 1:\n        # If there's only one element, any value from 1 to a[0] is valid\n        return a[0] % MOD\n\n    # Initialize dp arrays\n    dp_prev = [0] * (max(a) + 1)\n    dp_curr = [0] * (max(a) + 1)\n\n    # Base case: for the first element, any value from 1 to a[0] is valid\n    for b1 in range(1, a[0] + 1):\n        dp_prev[b1] = 1\n\n    # Fill dp table\n    for i in range(1, n):\n        # Reset current dp array\n        dp_curr = [0] * (max(a) + 1)\n        for bi in range(1, a[i] + 1):\n            # Sum all valid b_{i-1} values that are not equal to bi\n            dp_curr[bi] = (sum(dp_prev[bj] for bj in range(1, a[i-1] + 1) if bj != bi)) % MOD\n        # Move current dp to previous for the next iteration\n        dp_prev = dp_curr\n\n    # Sum all valid b_n values\n    result = sum(dp_prev[bi] for bi in range(1, a[n-1] + 1)) % MOD\n    return result\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = count_valid_arrays(n, a)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"\n    Calculate the number of valid arrays b such that:\n    1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n)\n    b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1)\n    The result is returned modulo 998244353.\n    \n    Args:\n    n (int): The length of the array a.\n    a (List[int]): The array of integers.\n    \n    Returns:\n    int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 1:\n        return a[0] % MOD\n\n    # Initialize dp array\n    dp = [0] * (max(a) + 1)\n    for i in range(1, a[0] + 1):\n        dp[i] = 1\n\n    # Iterate over each element in the array a\n    for i in range(1, n):\n        new_dp = [0] * (max(a) + 1)\n        prefix_sum = 0\n\n        # Calculate prefix sums for the current dp array\n        for j in range(1, max(a) + 1):\n            prefix_sum = (prefix_sum + dp[j]) % MOD\n            if j <= a[i]:\n                new_dp[j] = prefix_sum\n\n        # Update dp array for the next iteration\n        dp = new_dp\n\n    # Sum up all valid sequences ending with any number\n    result = sum(dp) % MOD\n    return result\n\n# Input and output interface\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMODULO = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that 1 \u2264 b_i \u2264 a_i and b_i \u2260 b_{i+1}.\n\n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of integers where each element a_i is the upper bound for b_i.\n\n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 1:\n        # If there's only one element, all values from 1 to a[0] are valid\n        return a[0] % MODULO\n\n    # Initialize dp arrays\n    dp_prev = [0] * (max(a) + 1)\n    dp_curr = [0] * (max(a) + 1)\n\n    # Base case: for the first element, all values from 1 to a[0] are valid\n    for i in range(1, a[0] + 1):\n        dp_prev[i] = 1\n\n    # Iterate over each element in the array a\n    for i in range(1, n):\n        # Calculate prefix sums for dp_prev to optimize the transition\n        prefix_sum = [0] * (max(a) + 1)\n        for j in range(1, max(a) + 1):\n            prefix_sum[j] = (prefix_sum[j - 1] + dp_prev[j]) % MODULO\n\n        # Calculate dp_curr for the current element\n        for j in range(1, a[i] + 1):\n            # The number of valid arrays ending with j is the total number of valid arrays\n            # ending with any number from 1 to a[i-1], minus those ending with j\n            dp_curr[j] = (prefix_sum[a[i - 1]] - prefix_sum[j] + dp_prev[j]) % MODULO\n\n        # Swap dp_prev and dp_curr for the next iteration\n        dp_prev, dp_curr = dp_curr, [0] * (max(a) + 1)\n\n    # The result is the sum of all valid arrays ending with any number from 1 to a[n-1]\n    result = sum(dp_prev[1:a[n - 1] + 1]) % MODULO\n    return result\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\n\n# Output interface\nresult = count_valid_arrays(n, a)\nprint(result)\n"], "plans": ["requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must be efficient to handle the upper constraint of n = 200,000 and a_i up to 10^9, with results given modulo 998,244,353.\nrequirement pool:\n- Implement an efficient algorithm to calculate the number of valid arrays.\n- Ensure the solution works within the given constraints of n and a_i.\n- Optimize the solution for time and space complexity.\n- Provide clear documentation and examples for understanding.\n- Consider edge cases and validate input.\nWe will use a dynamic programming approach to efficiently calculate the number of valid arrays. The key idea is to maintain a count of valid sequences ending with each possible value for each position in the array. We will iterate through the array and update these counts while ensuring that consecutive elements are not equal. The solution will be optimized to handle large inputs by using modular arithmetic to keep numbers within the required range.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is between 1 and a_i, and consecutive elements are not equal. The solution must handle large input sizes efficiently and return the result modulo 998 244 353.\nrequirement pool:\n- Implement an efficient algorithm to calculate the number of valid arrays.\n- Ensure the solution works within the given constraints of n and a_i.\n- Optimize the solution for time complexity.\n- Provide clear documentation and comments in the code.\n- Include edge case handling for minimum and maximum input values.\nWe will use dynamic programming to efficiently calculate the number of valid arrays. The key idea is to maintain a table that tracks the number of ways to form valid arrays up to each index, ensuring consecutive elements are not equal. We will leverage the modulo operation to handle large numbers and ensure the result fits within the constraints.\n", "requirement analysis:\nThe problem requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must handle large input sizes efficiently and return results modulo 998244353.\nrequirement pool:\n- Implement efficient algorithm to handle large n\n- Ensure results are correct modulo 998244353\n- Optimize for performance and memory usage\n- Provide comprehensive test coverage\n- Document constraints and edge cases clearly\nWe will use dynamic programming to efficiently compute the number of valid arrays. The key idea is to maintain a DP table where dp[i][j] represents the number of valid arrays ending with b_i = j. We will iterate through the array and update the DP table while ensuring consecutive elements are not equal. The modulo operation will be applied to keep the results within the required range.\n", "requirement analysis:\nThe requirement is to compute the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must handle large input sizes efficiently and return the result modulo 998 244 353.\nrequirement pool:\n- Implement the main algorithm to compute the number of valid arrays.\n- Ensure the solution handles edge cases such as minimum and maximum input sizes.\n- Optimize the algorithm for performance to handle large inputs efficiently.\n- Validate the output to ensure accuracy and correctness.\n- Document the code for maintainability and future improvements.\nWe will use a dynamic programming approach to efficiently calculate the number of valid arrays. The key challenge is to ensure that consecutive elements are not equal while considering the constraints of each element being within the range [1, a_i]. We will iterate through the array and use a dynamic programming table to keep track of the number of valid sequences ending with each possible value. The result will be computed modulo 998 244 353 to handle large numbers.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is between 1 and a_i, and consecutive elements are not equal. The solution must handle large input sizes efficiently and return the result modulo 998 244 353.\nrequirement pool:\n- Implement an efficient algorithm to calculate the number of valid arrays.\n- Ensure the solution works within the given constraints of n and a_i.\n- Optimize the solution for speed and clarity.\n- Handle edge cases where all elements are the same.\n- Provide detailed comments and documentation for the code.\nWe will use dynamic programming to efficiently calculate the number of valid arrays. The key idea is to maintain a count of valid arrays ending with each possible value for each position, ensuring consecutive elements are not equal. We will leverage the modulo operation to handle large numbers and ensure the result fits within the constraints.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is between 1 and a_i, and consecutive elements are not equal. The solution must handle large input sizes efficiently and return the result modulo 998 244 353.\nrequirement pool:\n- Implement an efficient algorithm to calculate the number of valid arrays.\n- Ensure the solution handles edge cases, such as all elements being the same.\n- Optimize the solution for performance to handle the upper constraint limits.\n- Provide detailed comments and documentation for the code.\n- Include test cases to validate the solution against various scenarios.\nWe will use a dynamic programming approach to efficiently calculate the number of valid arrays. The key idea is to maintain a count of valid sequences ending with each possible value for each position in the array. We will use a modulo operation to handle large numbers and ensure the result fits within the constraints. The solution will iterate over the array and update counts based on the previous position's counts, ensuring that consecutive elements are not equal.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is between 1 and a_i, and consecutive elements are not equal. The solution must handle large input sizes efficiently and return the result modulo 998 244 353.\nrequirement pool:\n- Implement an efficient algorithm to calculate the number of valid arrays.\n- Ensure the solution handles the maximum constraints of n and a_i.\n- Optimize the solution for performance and clarity.\n- Provide detailed comments and documentation for the code.\n- Include edge case handling and testing.\nWe will use a dynamic programming approach to efficiently calculate the number of valid arrays. The key observation is that for each position i, we can choose any number from 1 to a_i, but we must ensure that it is not equal to the number chosen for the previous position. We will maintain a DP table where dp[i][j] represents the number of valid arrays up to position i with the last element being j. The solution will iterate over each position and update the DP table based on the previous position's values, ensuring that consecutive elements are not equal. The final result will be the sum of valid arrays for the last position, taken modulo 998244353.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must handle large input sizes efficiently and return the result modulo 998 244 353.\nrequirement pool:\n- Implement an efficient algorithm to calculate the number of valid arrays.\n- Ensure the solution handles the maximum constraints of n and a_i.\n- Optimize the solution for time complexity.\n- Format the output correctly as specified.\n- Consider edge cases where all elements are the same.\nWe will use dynamic programming to efficiently calculate the number of valid arrays. The key idea is to maintain a table that tracks the number of valid arrays ending with each possible value for b_i, ensuring that consecutive elements are not equal. We will leverage the modulo operation to handle large numbers and ensure the result fits within the constraints.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must be efficient to handle up to 200,000 elements and large values of a_i, with results given modulo 998,244,353.\nrequirement pool:\n- Implement an efficient algorithm to calculate the number of valid arrays.\n- Ensure the solution works within the given constraints of n and a_i.\n- Optimize the solution for both time and space complexity.\n- Provide clear documentation and examples for users.\n- Consider edge cases and validate input thoroughly.\nWe will use dynamic programming to efficiently calculate the number of valid arrays. The key is to iterate through the array and maintain a count of valid sequences ending with each possible value, ensuring that consecutive elements are not equal. We will use modular arithmetic to handle large numbers, specifically using the modulo 998,244,353 as required.\n", "requirement analysis:\nThe problem requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must handle large input sizes efficiently and return the result modulo 998 244 353.\nrequirement pool:\n- Implement the main algorithm to calculate the number of valid arrays.\n- Optimize the algorithm for performance with large input sizes.\n- Ensure the solution handles edge cases, such as when all a_i are 1.\n- Provide detailed comments and documentation for the code.\n- Implement additional test cases to verify the solution.\nWe will use dynamic programming to efficiently calculate the number of valid arrays. The key idea is to maintain a count of valid arrays ending with each possible value for b_i, ensuring that consecutive elements are not equal. We will use the modulo operation to handle large numbers and ensure the result fits within the required constraints.\n"], "scores": [], "pass_results": [false, true, true, true, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 89, "examples": "\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].", "mutate_method": "condense_two2one", "parent_index": 20}
