{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive numbers and listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, and 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive numbers and listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, and 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements a\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements of a\n        a2 = b[-1] - a1\n        # The second largest element in b is the sum of the two largest elements of a\n        a3 = b[-2] - a1\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The second smallest element in b is another element of a\n        a2 = b[1]\n        # The largest element in b is the sum of all elements of a\n        a3 = b[-1] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n\n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the given subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sums of all non-empty subsequences\n                       of an array of 3 positive numbers, sorted in ascending order.\n\n    Returns:\n        List[int]: The original array of 3 positive numbers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array a.\n    # The largest number in b is the sum of all three elements of a.\n    # Therefore, the original array a can be reconstructed as follows:\n    a1 = b[0]  # The smallest element\n    a2 = b[1]  # The second smallest element\n    a3 = b[6] - a1 - a2  # The largest element minus the sum of the two smallest elements\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three positive numbers from the given sorted list of subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        List[int]: The original array of three positive numbers.\n    \"\"\"\n    # The smallest element in b is the smallest element of the original array.\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element of the original array.\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements of the original array.\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the restored array a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is a_1, the second smallest is a_2,\n        # and the largest element is the sum of all three elements a_1 + a_2 + a_3.\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_array_from_sums(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Restore the original array from the given sums.\n\n    Args:\n        b (list[int]): A list of 7 integers representing the sums of all non-empty subsequences of an array of 3 elements.\n\n    Returns:\n        tuple[int, int, int]: The original array of 3 integers.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements of a\n    a1_a2_a3 = b[6]\n    # The second largest element in b is the sum of the two largest elements of a\n    a2_a3 = b[5]\n    \n    # Calculate the individual elements\n    a2 = a2_a3 - a1\n    a3 = a1_a2_a3 - a2_a3\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    # Read number of test cases\n    t = int(data[0])\n    \n    results = []\n    for i in range(1, t + 1):\n        # Read the 7 integers for each test case\n        b = list(map(int, data[i].split()))\n        # Get the original array\n        a1, a2, a3 = restore_array_from_sums(b)\n        # Store the result\n        results.append(f\"{a1} {a2} {a3}\")\n    \n    # Print all results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array from the sorted sums of its subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        Tuple[int, int, int]: A tuple containing the three integers of the original array.\n    \"\"\"\n    # Deduce the original array elements from the properties of the subsequence sums\n    a1 = b[0]  # The smallest element in the original array\n    a2 = b[1]  # The second smallest element in the original array\n    a3 = b[6] - a1 - a2  # The largest element in the original array\n\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input().strip())  # Read the number of test cases\n    for _ in range(t):\n        b = list(map(int, input().strip().split()))  # Read the 7 integers for each test case\n        a1, a2, a3 = restore_array_from_sums(b)  # Restore the original array\n        print(a1, a2, a3)  # Output the restored array\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences of array a.\n\n    Returns:\n        List[int]: The original array a consisting of 3 positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    a1 = b[0]\n    # The second smallest element in b is the second element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all elements of a\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = case[0]\n        # The largest element in b is the sum of all elements in a\n        sum_all = case[6]\n        # The sum of the other two elements\n        sum_two = sum_all - a1\n        # The two smallest sums of two elements\n        b1, b2 = case[1], case[2]\n        \n        # Deduce the other two elements\n        a2 = b1 - a1\n        a3 = b2 - a1\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the given subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sums of all non-empty subsequences\n                       of an array of 3 positive numbers, sorted in ascending order.\n\n    Returns:\n        List[int]: The original array of 3 positive numbers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array a.\n    # The largest number in b is the sum of all three elements of a.\n    a1 = b[0]  # The smallest element\n    a2 = b[1]  # The second smallest element\n    a3 = b[6] - a1 - a2  # The largest element minus the sum of the two smallest gives the third element\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three integers from the given sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output formatting.\nrequirement pool:\n- Implement the algorithm to restore the original array from subsequence sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the solution for performance with large inputs.\n- Include error handling for unexpected input formats.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. Using these observations, we can deduce the original array a from b.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from the given sums of all non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main logic to restore the original array from the given subsequence sums.\n- Ensure the solution is optimized for handling the maximum input constraints.\n- Provide clear and concise output for each test case.\n- Consider edge cases and validate the input format.\n- Optimize the code for readability and maintainability.\nWe will use the properties of the sorted array b to deduce the original array a. Since b contains all possible sums of non-empty subsequences of a, the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements of a. By analyzing the sorted array b, we can determine the individual elements of a.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from the given sums of all non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main algorithm to restore the original array from subsequence sums.\n- Optimize the solution to handle the maximum input constraints efficiently.\n- Ensure the output format is clear and matches the required specifications.\n- Consider edge cases and validate the solution against them.\n- Document the code for better understanding and maintenance.\nWe will implement a simple function to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these observations, we can efficiently reconstruct the original array.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three numbers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest sums in the sorted list, which correspond to the individual elements and their combinations. The solution must handle up to 5000 test cases efficiently.\nrequirement pool:\n- Implement the main algorithm to restore the original array from subsequence sums.\n- Optimize the solution for handling the maximum number of test cases efficiently.\n- Ensure the code is easy to read and maintain.\n- Provide detailed comments and documentation for the solution.\n- Include test cases to verify the solution's correctness.\nWe will solve the problem by identifying the smallest, second smallest, and largest sums in the sorted list of subsequence sums. The smallest element in the list is the smallest element of the original array. The second smallest element is the second smallest element of the original array. The largest element in the list is the sum of all three elements of the original array. Using these insights, we can reconstruct the original array efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution is optimized for large input sizes.\n- Provide a user-friendly output format.\n- Handle edge cases and ensure robustness.\n- Include comments and documentation for code clarity.\nWe will use the property of the sorted array b, where the smallest element is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. This allows us to deduce the original array a by simple arithmetic operations.\n", "requirement analysis:\nThe problem requires restoring an original array of three positive integers from the sums of all its non-empty subsequences. The input consists of multiple test cases, each providing a sorted list of these sums. The solution must efficiently handle up to 5000 test cases and output the original array for each case. The constraints ensure that a valid solution always exists.\nrequirement pool:\n- Implement the main logic to restore the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the code for readability and maintainability.\n- Provide detailed comments and documentation for the code.\n- Consider edge cases and validate input constraints.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of a, the largest element is the sum of all elements of a, and the second largest element is the sum of the two largest elements of a. Using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from the given sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The approach should leverage the properties of subsequences and their sums to deduce the original array.\nrequirement pool:\n- Implement the algorithm to restore the original array from subsequence sums\n- Optimize the solution to handle the maximum constraints efficiently\n- Design a simple and intuitive interface for input and output\n- Ensure the solution is robust against edge cases\n- Provide detailed documentation and examples for users\nWe will leverage the properties of the subsequence sums to deduce the original array. Given the sorted array b of 7 integers, the smallest element b[0] is the smallest element of the original array a. The largest element b[6] is the sum of all elements of a. The second largest element b[5] is the sum of the two largest elements of a. Using these properties, we can deduce the three elements of a as follows: a1 = b[0], a2 = b[1], and a3 = b[6] - a1 - a2. This approach is efficient and works within the constraints provided.\n", "requirement analysis:\nThe problem requires restoring an original array of three positive integers from the sums of all its non-empty subsequences. The input consists of multiple test cases, each providing a sorted list of these sums. The solution must efficiently handle up to 5000 test cases, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Validate the input to ensure it meets the problem constraints.\n- Optimize the solution for large integer values.\n- Provide detailed comments and documentation for the code.\nWe will solve the problem by leveraging the properties of the sorted array b. The smallest element in b is the smallest element of a, and the largest element in b is the sum of all elements of a. By using these properties, we can deduce the original array a. Specifically, the first element of a is the smallest element of b, the second element is the second smallest element of b, and the third element can be found by subtracting the sum of the first two elements from the largest element of b.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from the sums of its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution is efficient for the maximum input constraints.\n- Provide clear and concise output for each test case.\n- Handle edge cases and large numbers effectively.\n- Optimize for both speed and simplicity.\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b of sums of all non-empty subsequences, the smallest element b[0] is the smallest number in the original array a. The largest element b[6] is the sum of all elements in a. By subtracting b[0] from b[6], we can find the sum of the other two elements. Using b[1] and b[2], which are the smallest sums of two elements, we can deduce the individual elements of a. This approach is efficient and handles large numbers well.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from the given sums of all non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main logic to restore the original array from subsequence sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the output format matches the specified requirements.\n- Test the solution with edge cases and large inputs.\n- Document the code for clarity and maintainability.\nWe will implement a simple function to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b are the individual elements of the original array a, and the largest number is the sum of all three elements. We can use this observation to efficiently reconstruct the array a.\n"], "scores": [], "pass_results": [false, true, true, true, true, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 401, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 198}
