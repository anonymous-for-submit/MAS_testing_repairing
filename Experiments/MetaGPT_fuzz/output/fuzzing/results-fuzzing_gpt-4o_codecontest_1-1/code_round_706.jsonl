{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed an array a of 3 positive integers, then he computed the sums of all non-empty subsequences of this array and arranged them in non-decreasing order; as a consequence, he obtained an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Consider edge cases where b might contain duplicate sums that can lead to multiple valid arrays a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed an array a of 3 positive integers, then he computed the sums of all non-empty subsequences of this array and arranged them in non-decreasing order; as a consequence, he obtained an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Consider edge cases where b might contain duplicate sums that can lead to multiple valid arrays a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of non-empty subsequences.\n\n    Returns:\n        A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest element b[0] is the smallest number in the original array a.\n    a1 = b[0]\n    # The second smallest element b[1] is the second smallest number in the original array a.\n    a2 = b[1]\n    # The largest element b[6] is the sum of all three numbers in a.\n    # The second largest element b[5] is the sum of the two largest numbers in a.\n    # Therefore, the third number a3 can be deduced as follows:\n    a3 = b[6] - b[5]\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read the number of test cases\n    n = int(input())\n    for _ in range(n):\n        # Read the array b for each test case\n        b = list(map(int, input().split()))\n        # Restore the original array a\n        result = restore_array_from_sums(b)\n        # Print the result\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element b[0] is the smallest number in the original array a.\n        a1 = b[0]\n        # The largest element b[6] is the sum of all elements in a.\n        sum_a = b[6]\n        # By subtracting b[0] from b[6], we get the sum of the other two elements in a.\n        sum_a2_a3 = sum_a - a1\n        # Using b[1] and b[2], which are the smallest sums of two elements, we can deduce the individual values.\n        a2 = b[1] - a1\n        a3 = sum_a2_a3 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is a_1, the second smallest is a_2,\n        # and the largest element is the sum of all elements in a.\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[-1] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a', each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in a\n        sum_all = b[-1]\n        # The smallest number in b is one of the numbers in a\n        a1 = b[0]\n        # The second largest number in b is the sum of two numbers in a\n        sum_two = b[-2]\n        # Calculate the other two numbers in a\n        a2 = sum_two - a1\n        a3 = sum_all - sum_two\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences of the original array.\n\n    Returns:\n        List[int]: The original array of 3 integers.\n    \"\"\"\n    # The smallest element in b is the smallest number in the original array a\n    a1 = b[0]\n    # The largest element in b is the sum of all three numbers in a\n    sum_all = b[6]\n    # The second smallest element in b is the sum of the smallest two numbers in a\n    sum_two_smallest = b[1]\n    \n    # Calculate the second and third numbers in the original array\n    a2 = sum_two_smallest - a1\n    a3 = sum_all - sum_two_smallest\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted list of subsequence sums b.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of array a.\n\n    Returns:\n        A list of 3 integers representing the original array a.\n    \"\"\"\n    # The smallest element in b is a_1\n    a_1 = b[0]\n    # The second smallest element in b is a_2\n    a_2 = b[1]\n    # The largest element in b is the sum of all three elements a_1 + a_2 + a_3\n    a_3 = b[-1] - a_1 - a_2\n    return [a_1, a_2, a_3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the sorted list of subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing\n                    the sorted sums of all non-empty subsequences of an array of three integers.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is the sum of all three elements a_1 + a_2 + a_3\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input().strip())\n    test_cases = [list(map(int, input().strip().split())) for _ in range(n)]\n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' which contains\n    all possible sums of non-empty subsequences of 'a'.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all\n                       non-empty subsequences of the original array 'a'.\n\n    Returns:\n        List[int]: A list of 3 integers representing the original array 'a'.\n    \"\"\"\n    # The smallest element in 'b' is one of the elements of 'a'\n    a1 = b[0]\n    # The largest element in 'b' is the sum of all elements of 'a'\n    sum_a = b[-1]\n    # The second largest element in 'b' is the sum of two elements of 'a'\n    sum_two = b[-2]\n    \n    # Calculate the other two elements of 'a'\n    a2 = sum_two - a1\n    a3 = sum_a - sum_two\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing\n        the restored array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in a\n        a3 = b[6]\n        # The smallest number in b is one of the numbers in a\n        a1 = b[0]\n        # The second smallest number in b is another number in a\n        a2 = b[1]\n        # Append the result for this test case\n        results.append([a1, a2, a3 - a1 - a2])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process each test case\n    result = restore_original_array(test_cases)\n    \n    # Output interface\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is a_1, the second smallest is a_2,\n        # and the largest element is the sum a_1 + a_2 + a_3.\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array of 3 integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The constraints ensure that a valid array always exists, simplifying the problem to finding one possible solution for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Consider edge cases with duplicate sums\n- Ensure solution is robust and fast\n- Provide clear and concise output format\nWe will use a simple mathematical approach to restore the original array from the sorted sums of its non-empty subsequences. Given the sorted array b, the smallest element b[0] is the smallest number in the original array a. The largest element b[6] is the sum of all three numbers in a. The second largest element b[5] is the sum of the two largest numbers in a. Using these observations, we can deduce the original array a as follows: a_1 = b[0], a_2 = b[1], and a_3 = b[6] - b[5]. This approach is efficient and handles edge cases with duplicate sums naturally.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must handle multiple test cases efficiently and consider edge cases with duplicate sums. The input constraints ensure that a valid solution always exists.\nrequirement pool:\n- Develop an algorithm to restore the original array from subsequence sums.\n- Ensure the solution is efficient for up to 5000 test cases.\n- Handle edge cases with duplicate sums effectively.\n- Provide clear and concise output for each test case.\n- Optimize the solution for large integer values.\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b of subsequence sums, the smallest element b[0] is the smallest number in the original array a. The largest element b[6] is the sum of all elements in a. By subtracting b[0] from b[6], we get the sum of the other two elements in a. Using b[1] and b[2], which are the smallest sums of two elements, we can deduce the individual values of the remaining elements in a. This approach is efficient and handles edge cases with duplicate sums effectively.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must handle multiple test cases efficiently and consider edge cases with duplicate sums. The output format must be strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle edge cases with duplicate sums\n- Ensure efficient processing for large numbers\n- Provide output in the correct format\n- Optimize for speed and accuracy\nWe will use a simple mathematical approach to restore the original array 'a' from the given array 'b'. Since 'b' is sorted and contains sums of all non-empty subsequences of 'a', the smallest element in 'b' is 'a_1', the second smallest is 'a_2', and the largest element is the sum of all elements in 'a'. By subtracting the smallest and second smallest elements from the largest, we can find 'a_3'. This approach is efficient and handles edge cases with duplicate sums.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The input constraints ensure that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Consider edge cases with duplicate sums\n- Ensure solution is robust and accurate\n- Optimize for large input values\nWe will use a straightforward approach to restore the original array 'a' from the given array 'b'. The key observation is that the largest number in 'b' is the sum of all three numbers in 'a'. The smallest number in 'b' is one of the numbers in 'a'. By subtracting the smallest number from the largest, we can find the sum of the other two numbers. Using these observations, we can efficiently reconstruct 'a' for each test case.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted array of seven integers representing sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle edge cases with duplicate sums\n- Optimize for large input sizes\n- Ensure consistent input-output format\n- Provide multiple valid outputs if possible\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b of sums, the smallest element b[0] is the smallest number in the original array a. The largest element b[6] is the sum of all three numbers in a. By subtracting b[0] from b[6], we get the sum of the other two numbers. Using b[1] and b[2], which are the smallest sums of two numbers, we can deduce the remaining numbers in a. This approach is efficient and handles edge cases with duplicate sums well.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases, considering edge cases with duplicate sums. The output must strictly follow the input-output format.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums.\n- Handle edge cases with duplicate sums.\n- Ensure the solution is scalable to handle up to 5000 test cases.\n- Maintain consistent input-output format.\n- Optimize for large integer values.\nWe will solve the problem by leveraging the properties of the sorted array b. Since b is the sorted list of all non-empty subsequence sums of a, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. By using these properties, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must handle up to 5000 test cases efficiently, considering edge cases with duplicate sums. The output format must be clear and consistent.\nrequirement pool:\n- Efficiently handle up to 5000 test cases\n- Accurately restore the original array from subsequence sums\n- Handle edge cases with duplicate sums\n- Ensure clarity in output format\n- Optimize for large numbers\nWe will leverage the fact that the array b is sorted and represents all possible non-empty subsequence sums of an array a with three elements. The smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all three elements a_1 + a_2 + a_3. Using these properties, we can efficiently deduce the original array a for each test case.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The output must adhere to the specified format.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums.\n- Handle edge cases with duplicate sums.\n- Ensure the solution is fast and can handle large inputs.\n- Provide clear and concise output format.\n- Optimize for readability and maintainability.\nWe will use a simple mathematical approach to restore the original array 'a' from the sorted array 'b'. Since 'b' contains all possible sums of non-empty subsequences of 'a', the smallest element in 'b' is one of the elements of 'a'. The largest element in 'b' is the sum of all elements of 'a'. By subtracting the smallest element from the largest, we can find the sum of the other two elements. Using these insights, we can efficiently determine the original array 'a'.\n", "requirement analysis:\nThe requirement is to restore the original array of 3 integers from the given sorted array of 7 integers, which represents the sums of all non-empty subsequences. The solution must handle up to 5000 test cases efficiently and consider edge cases with duplicate sums.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Consider edge cases with duplicate sums\n- Ensure the solution is fast and accurate\n- Provide clear output format\nWe will use a simple mathematical approach to restore the original array 'a' from the given sorted array 'b'. The key observation is that the largest number in 'b' is the sum of all three numbers in 'a'. The smallest number in 'b' is one of the numbers in 'a'. The second smallest number in 'b' is another number in 'a'. The third number in 'a' can be found by subtracting the smallest and second smallest numbers from the largest number in 'b'. This approach is efficient and handles edge cases with duplicate sums correctly.\n", "requirement analysis:\nThe requirement is to restore the original array of 3 integers from the given sorted array of subsequence sums. The solution must handle multiple test cases efficiently and consider edge cases with duplicate sums. The output must be clear and follow the specified format.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle edge cases with duplicate sums\n- Ensure solution efficiency for large inputs\n- Provide clear and correct output format\n- Optimize for speed and responsiveness\nWe will solve the problem by leveraging the properties of the sorted array b. Since b is derived from all non-empty subsequences of a, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. We can deduce a_3 by subtracting a_1 and a_2 from the largest element. This approach is efficient and handles edge cases with duplicate sums by focusing on the properties of sorted subsequence sums.\n"], "scores": [], "pass_results": [true, false, true, false, true, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 706, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 186}
