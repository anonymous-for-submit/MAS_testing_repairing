{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers, then he wrote out the sums of all non-empty subsequences of this array and sorted them in non-decreasing order, resulting in an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a and he only has the array b left, so help him to restore the array a considering edge cases where b might contain duplicate sums that can lead to multiple valid arrays a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers, then he wrote out the sums of all non-empty subsequences of this array and sorted them in non-decreasing order, resulting in an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a and he only has the array b left, so help him to restore the array a considering edge cases where b might contain duplicate sums that can lead to multiple valid arrays a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the sorted sums array 'b'.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of array 'a'.\n\n    Returns:\n        List[int]: A list of 3 integers representing the original array 'a'.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of a\n    # The largest number in b is the sum of all three elements of a\n    # Therefore, a can be deduced as follows:\n    a1 = b[0]  # The smallest element\n    a2 = b[1]  # The second smallest element\n    a3 = b[6] - a1 - a2  # The largest element minus the sum of the two smallest elements\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the given sorted sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest three numbers in the sorted array are the individual elements of the original array.\n        # The largest number is the sum of all three elements.\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    result = restore_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the given sorted array of sums of all non-empty subsequences.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        a1_a2_a3 = b[6]\n        # The second smallest element in b is the second smallest element in a\n        a2 = b[1]\n        # Calculate the third element\n        a3 = a1_a2_a3 - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element of a\n        a1 = b[0]\n        # The second element can be found by subtracting the first element from the second smallest sum in b\n        a2 = b[1] - a1\n        # The third element can be found by subtracting the sum of the first two elements from the largest element in b\n        a3 = b[-1] - (a1 + a2)\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function and print results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = case[0]\n        # The largest element in b is the sum of all elements in a\n        a1_a2_a3 = case[6]\n        # The second smallest element in b is the second smallest element in a\n        a2 = case[1]\n        # Calculate the third element\n        a3 = a1_a2_a3 - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Call the function and print results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The second smallest element in b is another original integer\n    a2 = b[1]\n    # The largest element in b is the sum of all three original integers\n    a3 = b[-1] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_array_from_sums(test_cases: int, sums: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of sums of its non-empty subsequences.\n\n    Args:\n        test_cases (int): The number of test cases.\n        sums (list[list[int]]): A list of lists, where each inner list contains 7 integers representing the sorted sums.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing 3 integers representing the restored array.\n    \"\"\"\n    results = []\n    for b in sums:\n        # The smallest element in b is the smallest element of a\n        a1 = b[0]\n        # The second smallest element in b is the second element of a\n        a2 = b[1]\n        # The largest element in b is the sum of all elements of a\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    num_test_cases = int(input())\n    sums = [list(map(int, input().split())) for _ in range(num_test_cases)]\n\n    # Process and output results\n    results = restore_array_from_sums(num_test_cases, sums)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of the original array of three integers.\n\n    Returns:\n        Tuple[int, int, int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in the sorted list are the individual elements of the original array.\n    # The largest number is the sum of all three elements.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in the sorted list are the individual elements of the original array.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - (a1 + a2)  # The largest number is the sum of all three elements.\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the given subsequence sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty\n           subsequences of the original array.\n\n    Returns:\n        A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array a.\n    # The largest number in b is the sum of all three elements of a.\n    # Therefore, the original array a can be reconstructed as follows:\n    a1 = b[0]  # The smallest element\n    a2 = b[1]  # The second smallest element\n    a3 = b[-1] - a1 - a2  # The third element calculated from the largest sum\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The constraints ensure that a valid array always exists.\nrequirement pool:\n- Restore the original array from the given sums\n- Handle edge cases with duplicate sums\n- Optimize for large input values\n- Ensure the solution is fast for up to 5000 test cases\n- Provide clear and concise output format\nWe will use a simple mathematical approach to restore the original array from the given sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of array a, and the largest number in b is the sum of all three elements of a. This allows us to deduce the values of a directly from b without complex calculations. We will implement this using basic Python operations, ensuring efficiency for up to 5000 test cases.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The output must strictly follow the format provided in the requirements.\nrequirement pool:\n- Restore the original array from the given sums\n- Handle edge cases with duplicate sums\n- Optimize for large input values\n- Ensure fast processing for up to 5000 test cases\n- Maintain consistent output format\nWe will use a simple mathematical approach to restore the original array from the given sums. The key observation is that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. By subtracting the smallest elements from the largest, we can deduce the individual elements of a. This approach is efficient and handles edge cases with duplicate sums effectively.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, considering edge cases with duplicate sums. The input constraints ensure that there is always at least one valid original array for each test case.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle edge cases with duplicate sums.\n- Ensure the solution is efficient for large inputs.\n- Provide a clear and concise output format.\n- Optimize for speed and responsiveness.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by simple arithmetic operations. This approach is efficient and handles edge cases with duplicate sums effectively.\n", "requirement analysis:\nThe problem requires restoring an array of three integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. Edge cases with duplicate sums should be considered, ensuring at least one valid solution exists for each test case.\nrequirement pool:\n- Implement the main algorithm to restore array a from array b.\n- Optimize the solution for handling large input sizes efficiently.\n- Ensure the solution handles edge cases with duplicate sums.\n- Provide clear input and output instructions.\n- Test the solution against a variety of test cases for accuracy.\nWe will solve the problem by leveraging the properties of the sorted array b. The smallest element in b is the smallest element of a, and the largest element in b is the sum of all elements of a. By using these properties, we can deduce the elements of a. Specifically, the first element of a is the smallest element of b, the second element can be found by subtracting the first element from the second smallest sum in b, and the third element can be found by subtracting the sum of the first two elements from the largest element in b.\n", "requirement analysis:\nThe task requires restoring the original array a from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correctness even with duplicate sums.\nrequirement pool:\n- Restore array a from array b efficiently.\n- Handle edge cases with duplicate sums.\n- Optimize for large integer values.\n- Ensure solution works within given constraints.\n- Provide clear and concise output format.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a efficiently. We will use simple arithmetic operations to derive the three elements of a from b.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The constraints ensure that a valid array always exists, simplifying the problem to finding one possible solution for each test case.\nrequirement pool:\n- Implement the main algorithm to restore the array from the sums\n- Optimize the solution for handling large numbers and multiple test cases\n- Ensure the solution is robust against edge cases with duplicate sums\n- Validate the solution against provided test cases\n- Document the solution and provide clear instructions for usage\nWe will implement a function that takes the sorted list of sums of all non-empty subsequences of an array of three integers and restores the original array. The key observation is that the smallest element in the sorted list is one of the original integers, the second smallest is another, and the largest element is the sum of all three integers. Using these observations, we can deduce the original array. We will use Python's built-in capabilities to handle large numbers efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The constraints ensure that at least one valid array exists for each test case.\nrequirement pool:\n- Efficiently compute the original array from the given sums\n- Handle edge cases with duplicate sums\n- Optimize for large input sizes\n- Ensure robustness and correctness of the solution\n- Provide clear and concise output format\nWe will solve the problem by leveraging the properties of the sorted array of sums. The smallest element in the array b is the smallest element of a. The largest element in b is the sum of all elements of a. By using these properties, we can deduce the original array a. Specifically, the first element of a is the smallest element in b, the second element is the second smallest element in b, and the third element can be calculated by subtracting the first two elements from the largest element in b.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The output must match the input format precisely.\nrequirement pool:\n- Efficiently compute the original array from the given sums.\n- Handle edge cases with duplicate sums.\n- Ensure the solution is fast for up to 5000 test cases.\n- Maintain consistent input-output format.\n- Provide clear documentation for the solution.\nWe will implement a function that takes the sorted list of sums and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted list are the individual elements of the original array, and the largest number is the sum of all three elements. This allows us to reconstruct the original array efficiently without needing complex algorithms or data structures.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The input constraints ensure that a valid array always exists.\nrequirement pool:\n- Efficiently compute the original array from the given sums.\n- Handle edge cases with duplicate sums to ensure valid outputs.\n- Optimize the solution for large numbers and multiple test cases.\n- Ensure the solution is user-friendly and easy to understand.\n- Provide detailed documentation for the solution.\nWe will implement a function that takes the sorted list of sums of non-empty subsequences and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted list are the individual elements of the original array, and the largest number is the sum of all three elements. This approach is efficient and handles edge cases with duplicate sums naturally.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must handle up to 5000 test cases efficiently, considering edge cases with duplicate sums. The output must match the input format precisely.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle edge cases with duplicate sums\n- Ensure solution efficiency for large test cases\n- Maintain consistent input-output format\n- Optimize for large integer values\nWe will use a simple mathematical approach to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. By using these observations, we can efficiently reconstruct the array a for each test case.\n"], "scores": [], "pass_results": [true, false, true, true, true, true, true, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 445, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 186}
