{"name": "1582_G. Kuzya and Homework", "description": "Kuzya started going to school. He was given math homework in which he was given an array a of length n and an array of symbols b of length n, consisting of symbols '*' and '/'.\n\nLet's denote a path of calculations for a segment [l; r] (1 \u2264 l \u2264 r \u2264 n) in the following way: \n\n  * Let x=1 initially. For every i from l to r we will consequently do the following: if b_i= '*', x=x*a_i, and if b_i= '/', then x=(x)/(a_i). Let's call a path of calculations for the segment [l; r] a list of all x that we got during the calculations (the number of them is exactly r - l + 1). \n\n\n\nFor example, let a=[7, 12, 3, 5, 4, 10, 9], b=[/, *, /, /, /, *, *], l=2, r=6, then the path of calculations for that segment is [12, 4, 0.8, 0.2, 2].\n\nLet's call a segment [l;r] simple if the path of calculations for it contains only integer numbers. \n\nKuzya needs to find the number of simple segments [l;r] (1 \u2264 l \u2264 r \u2264 n). Since he obviously has no time and no interest to do the calculations for each option, he asked you to write a program to get to find that number!\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nThe third line contains n symbols without spaces between them \u2014 the array b_1, b_2 \u2026 b_n (b_i= '/' or b_i= '*' for every 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the number of simple segments [l;r].\n\nExamples\n\nInput\n\n\n3\n1 2 3\n*/*\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n7\n6 4 10 1 2 15 1\n*/*/*//\n\n\nOutput\n\n\n8", "tags": ["data structures", "number theory"], "difficulty": 13, "id": 1582, "sample_io": [{"input": "7\n6 4 10 1 2 15 1\n*/*/*//\n", "output": ["8\n"]}, {"input": "3\n1 2 3\n*/*\n", "output": ["2\n"]}], "test_list": [{"input": "20\n580570 26214 688069 348426 225262 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 269602 444392 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 510510 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["838\n"]}, {"input": "10\n442965 428095 895389 357686 456440 350881 915122 243260 46084 484178\n*//*******\n", "output": ["29\n"]}, {"input": "10\n7 70 30 14 105 3 35 2 3 105\n**/***/*/*\n", "output": ["19\n"]}, {"input": "2\n1000000 100000\n*/\n", "output": ["2\n"]}, {"input": "20\n3 5 2 49 70 70 3 10 30 2 15 105 14 6 14 49 15 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 225262 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 269602 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "10\n7 70 25 14 105 3 35 2 3 105\n**/***/*/*\n", "output": ["19\n"]}, {"input": "2\n1000000 100010\n*/\n", "output": ["1\n"]}, {"input": "20\n3 5 2 49 70 70 3 10 30 2 15 179 14 6 14 49 15 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "3\n1 4 3\n*/*\n", "output": ["2\n"]}, {"input": "10\n7 70 25 14 105 3 35 3 3 105\n**/***/*/*\n", "output": ["21\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 170170 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["772\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 170170 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["770\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["722\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["602\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["342\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 25456 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 147460 170170 510510 255255 510510 510510 510510 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["454\n"]}, {"input": "10\n442965 428095 895389 357686 456440 350881 915122 273564 46084 484178\n*//*******\n", "output": ["29\n"]}, {"input": "7\n6 4 10 1 4 15 1\n*/*/*//\n", "output": ["8\n"]}, {"input": "3\n2 2 3\n*/*\n", "output": ["4\n"]}, {"input": "10\n7 70 25 14 168 3 35 3 3 105\n**/***/*/*\n", "output": ["13\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 809148 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["810\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 14099 30030 158069 255255 30030 510510 30030 38981 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["500\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 170170 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 25725 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["738\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 400824 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["338\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 185505 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["341\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 199451 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["308\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 52562 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["331\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 92322 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["249\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 80652 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["239\n"]}, {"input": "50\n39270 170170 510510 86908 255255 46410 170170 510510 72930 59368 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["790\n"]}, {"input": "50\n39270 38106 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 809148 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["808\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 86470 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 51794 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["809\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 170170 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 25725 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 76910 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["663\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 9969 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 16800 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["769\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 114791 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 177096 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["340\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 358255 39270 52562 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["332\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 152883 850348 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["225\n"]}, {"input": "50\n39270 34008 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 86470 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 51794 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["855\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 15316 30030 29747 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 185505 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["251\n"]}, {"input": "20\n580570 26214 688069 348426 225262 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "2\n1000000 100010\n/*\n", "output": ["1\n"]}, {"input": "20\n3 5 2 49 70 70 3 10 30 2 15 179 14 6 14 52 15 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 141236 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "20\n3 5 2 49 70 70 3 10 30 2 15 179 14 6 14 52 6 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 141236 652088 143524 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "20\n3 5 2 49 70 29 3 10 30 2 15 179 14 6 14 52 6 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 265925 652088 143524 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "20\n580570 26214 688069 348426 265925 652088 212626 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "20\n484672 26214 688069 348426 265925 652088 212626 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "20\n484672 26214 688069 348426 265925 652088 212626 965480 940883 533073 565081 52449 751257 948695 302734 869043 196709 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["770\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["342\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 76194 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 39270 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 22865 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 22865 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 707044 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 707044 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 28044 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 28044 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 510510 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 30030 16256 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 16954 517 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 517 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 337 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 337 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 43242 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "20\n142529 26214 688069 348426 225262 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 269602 444392 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "10\n7 70 30 14 105 3 35 3 3 105\n**/***/*/*\n", "output": ["21\n"]}, {"input": "2\n1000000 110010\n*/\n", "output": ["1\n"]}, {"input": "20\n3 5 2 49 70 70 6 10 30 2 15 105 14 6 14 49 15 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "50\n39270 170170 510510 86908 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "10\n7 70 9 14 105 3 35 2 3 105\n**/***/*/*\n", "output": ["19\n"]}, {"input": "2\n1000000 000010\n/*\n", "output": ["1\n"]}, {"input": "20\n3 5 2 49 70 70 3 1 30 2 15 179 14 6 14 49 15 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "3\n1 3 3\n*/*\n", "output": ["2\n"]}, {"input": "20\n580570 26214 688069 348426 225262 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 107902 685115 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 879128 11081 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "20\n3 5 2 49 70 70 3 10 30 2 15 179 14 6 14 52 15 404 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 141236 652088 76512 965480 940883 533073 565081 645978 751257 948695 302734 869043 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 30030 943154 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["830\n"]}, {"input": "20\n3 5 2 49 70 70 3 3 30 2 15 179 14 6 14 52 6 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 141236 652088 143524 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 191822\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 88356 39270 30030 510510 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 170170 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["772\n"]}, {"input": "20\n3 6 2 49 70 29 3 10 30 2 15 179 14 6 14 52 6 210 21 5\n********************\n", "output": ["210\n"]}, {"input": "20\n580570 26214 688069 348426 265925 652088 143524 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 407970 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "20\n580570 26214 688069 348426 265925 652088 212626 965480 940883 533073 565081 52449 751257 948695 302734 869043 107902 811934 653375 692364\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 244943 72930 39270 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 510510 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "20\n484672 26214 688069 348426 265925 652088 212626 965480 940883 533073 565081 52449 751257 948695 302734 190485 107902 811934 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 86470 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 39270 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "50\n39270 58747 510510 170170 255255 46410 170170 510510 72930 39270 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 498072 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["812\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 9969 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 255255 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["770\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 30030 158069 255255 30030 510510 30030 30030 30030 39270 55620 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["722\n"]}, {"input": "50\n39270 58747 942660 257011 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 481139 255255 170170 510510 255255 497310 510510 567143 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["602\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 21177 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 510510 11081 510510 72930 41289 510510 72930 170170 102102 344236 70105 510510 508058 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 510510 72930 26571 510510 72930 170170 102102 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["346\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 14099 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 114791 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["342\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 30030 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 358044 497310 510510 567143 102102 170170 43645 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["342\n"]}, {"input": "50\n39270 58747 942660 170170 255255 46410 13859 510510 72930 16187 15948 158069 255255 41929 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 170170 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 30030 30030 58776 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 30030 30030 39270 46410 510510 869319 11081 455302 72930 33850 510510 72930 170170 49340 344236 70105 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["337\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 41929 510510 30030 25456 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 59161 510510 481139 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 510510 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 850348 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 58747 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 510510 72930 170170 49340 344236 70105 510510 194042 85980 170170 510510 255255 497310 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 931070 510510 567143 102102 170170 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["247\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 30030 39270 45258 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 83513 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 46410 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 22725 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 255255 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 939177 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39808 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 76194 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 540183 96659 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 762213 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 39270 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 764962 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 510510 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["212\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 693637 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 100957 180629 43645 102102 72930 623422 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 833296 96659 40449 140397\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 4061 510510 72930 16187 12484 158069 255255 49206 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 26160 510510 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 2163 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 457078 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 32378 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 49340 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 42556 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 41289 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 18210 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 72930 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["190\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 624478 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 481139 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 98549 344236 70105 976972 22865 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 137744 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 22865 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 71699 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 12163 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 32567 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 63856 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 623422 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 455302 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 46148 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 707044 72930 68655 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 328376 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 28058 510510 30030 25456 3936 39270 373 93644 869319 11081 707044 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 128551 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 13859 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 543316 102102 180629 43645 102102 28044 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 29093 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 28044 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 46410 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 104871 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 373 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 47921 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 7689 39270 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 344236 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 4008 51851 170170 510510 476094 497310 510510 567143 102102 180629 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 39270 517 93644 869319 11081 654752 43181 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 202890 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 67728 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 12484 158069 255255 61522 510510 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 361237 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 510510 30030 25456 3936 30149 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 30030 25456 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 51449 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 30030 16256 3936 16954 517 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 151583 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 16954 517 93644 869319 11081 654752 72930 123714 891109 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 52283 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 16954 499 93644 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 3443 158069 255255 61522 963706 41146 16256 3936 16954 517 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 126292 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 517 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 523006 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 72930 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 337 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 446891 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "50\n39270 108944 621406 73563 255255 62774 6585 13675 138447 16187 2072 158069 255255 61522 963706 41146 16256 3936 6412 337 170093 869319 11081 654752 72930 123714 852626 72930 170170 90957 43242 70105 976972 37184 51851 170170 510510 476094 497310 510510 567143 102102 359868 43645 102102 101355 155008 96659 40449 108779\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["188\n"]}, {"input": "20\n142529 26214 688069 348426 146194 652088 143524 965480 940883 533073 565081 645978 751257 948695 302734 869043 269602 444392 653375 592631\n*****/*******/******\n", "output": ["64\n"]}, {"input": "50\n39270 170170 510510 170170 255255 46410 170170 510510 72930 39270 30030 510510 255255 27516 510510 30030 30030 30030 39270 46410 510510 510510 102102 510510 72930 170170 510510 72930 170170 102102 255255 39270 510510 255255 147460 170170 510510 255255 510510 510510 510510 102102 170170 39270 102102 72930 510510 39270 39270 255255\n**/*/*****/*****/***************/*/*******/**/*//*\n", "output": ["454\n"]}, {"input": "10\n442965 428095 276099 357686 456440 350881 915122 273564 46084 484178\n*//*******\n", "output": ["29\n"]}, {"input": "10\n7 70 30 14 105 3 32 3 3 105\n**/***/*/*\n", "output": ["13\n"]}, {"input": "2\n1000000 110010\n/*\n", "output": ["1\n"]}, {"input": "20\n3 5 2 49 70 70 6 10 30 2 15 105 14 6 14 49 15 210 8 5\n********************\n", "output": ["210\n"]}], "task_id": "codecontest/35", "prompt": "Kuzya began going to school. The math homework he received consisted of an array a with a length of n, and an array of symbols b with a length of n, containing characters '*' and '/'. \n\nLet's define a calculation path for a segment [l; r] (1 \u2264 l \u2264 r \u2264 n) as follows:\n\n  * Start with x initialized to 1. For each i from l to r we will sequentially perform the following: if b_i is '*', then x becomes x multiplied by a_i, and if b_i is '/', x becomes (x) divided by (a_i). We will refer to a calculation path for the segment [l; r] as a list of all x obtained during the calculations (the count of these is exactly r - l + 1).\n\nFor instance, if a=[7, 12, 3, 5, 4, 10, 9], b=[/, *, /, /, /, *, *], l=2, r=6, then the calculation path for that section is [12, 4, 0.8, 0.2, 2].\n\nA segment [l;r] is called simple if it contains only integers in the calculation path for it.\n\nKuzya needs to determine the count of simple segments [l;r] (1 \u2264 l \u2264 r \u2264 n). With no interest or time to compute each possible scenario, he asked for your help to write a program which finds that number!\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nThe third line contains n symbols without spaces between them \u2014 the array b_1, b_2 \u2026 b_n (b_i= '/' or b_i= '*' for every 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the number of simple segments [l;r].\n\nExamples\n\nInput\n\n\n3\n1 2 3\n*/*\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n7\n6 4 10 1 2 15 1\n*/*/*//\n\n\nOutput\n\n\n8", "repair_prompt": ["Kuzya began going to school. The math homework he received consisted of an array a with a length of n, and an array of symbols b with a length of n, containing characters '*' and '/'. \n\nLet's define a calculation path for a segment [l; r] (1 \u2264 l \u2264 r \u2264 n) as follows:\n\n  * Start with x initialized to 1. For each i from l to r we will sequentially perform the following: if b_i is '*', then x becomes x multiplied by a_i, and if b_i is '/', x becomes (x) divided by (a_i). We will refer to a calculation path for the segment [l; r] as a list of all x obtained during the calculations (the count of these is exactly r - l + 1).\n\nFor instance, if a=[7, 12, 3, 5, 4, 10, 9], b=[/, *, /, /, /, *, *], l=2, r=6, then the calculation path for that section is [12, 4, 0.8, 0.2, 2].\n\nA segment [l;r] is called simple if it contains only integers in the calculation path for it.\n\nKuzya needs to determine the count of simple segments [l;r] (1 \u2264 l \u2264 r \u2264 n). With no interest or time to compute each possible scenario, he asked for your help to write a program which finds that number!\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nThe third line contains n symbols without spaces between them \u2014 the array b_1, b_2 \u2026 b_n (b_i= '/' or b_i= '*' for every 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the number of simple segments [l;r].\n\nExamples\n\nInput\n\n\n3\n1 2 3\n*/*\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n7\n6 4 10 1 2 15 1\n*/*/*//\n\n\nOutput\n\n\n8\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Counts the number of simple segments in the given arrays.\n\n    A segment [l;r] is simple if all operations in its calculation path result in integers.\n\n    Args:\n        n: The length of the arrays a and b.\n        a: An array of integers.\n        b: An array of symbols ('*' or '/').\n\n    Returns:\n        The number of simple segments [l;r].\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible starting points of segments\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        is_simple = True  # Assume the segment is simple until proven otherwise\n\n        # Iterate over all possible ending points of segments starting from l\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:  # Check if division results in an integer\n                    is_simple = False\n                    break\n                x //= a[r]\n\n            # If the segment is still simple, count it\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Calculate the number of simple segments in the given arrays.\n\n    A segment [l;r] is called simple if it contains only integers in the calculation path.\n\n    Args:\n        n: The length of the arrays a and b.\n        a: An array of integers.\n        b: An array of symbols ('*' or '/').\n\n    Returns:\n        The number of simple segments [l;r].\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible starting points of segments\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment starting point\n        # Iterate over all possible ending points of segments\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:\n                    break  # If division does not result in an integer, break\n                x //= a[r]\n            # If we reach here, the segment [l;r] is simple\n            simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Counts the number of simple segments in the given arrays.\n\n    A segment [l; r] is called simple if it contains only integers in the calculation path.\n\n    Args:\n        n: The length of the arrays a and b.\n        a: An array of integers.\n        b: An array of symbols ('*' or '/').\n\n    Returns:\n        The number of simple segments [l; r].\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible starting points of segments\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        is_simple = True  # Assume the segment is simple initially\n\n        # Iterate over all possible ending points of segments\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:\n                    is_simple = False\n                    break\n                x //= a[r]\n\n            # If the segment is still simple, count it\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Calculate the number of simple segments in the given arrays.\n\n    Args:\n        n (int): The length of the arrays.\n        a (List[int]): The array of integers.\n        b (str): The array of symbols ('*' or '/').\n\n    Returns:\n        int: The number of simple segments.\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible segments [l;r]\n    for l in range(n):\n        product = 1\n        is_simple = True\n        for r in range(l, n):\n            if b[r] == '*':\n                product *= a[r]\n            elif b[r] == '/':\n                if product % a[r] != 0:\n                    is_simple = False\n                    break\n                product //= a[r]\n            \n            # If the segment is simple, increment the count\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = input().strip()\n\n    result = count_simple_segments(n, a, b)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Counts the number of simple segments in the given arrays.\n\n    A segment [l;r] is simple if all intermediate results in the calculation\n    path are integers.\n\n    Args:\n        n: The length of the arrays a and b.\n        a: An array of integers.\n        b: An array of characters, each either '*' or '/'.\n\n    Returns:\n        The number of simple segments [l;r].\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible starting points of segments\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new starting point\n        is_simple = True\n\n        # Iterate over all possible ending points of segments starting from l\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:\n                    is_simple = False\n                    break\n                x //= a[r]\n\n            # If the segment is still simple, count it\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport numpy as np\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Calculate the number of simple segments in the given arrays.\n\n    Args:\n        n (int): The length of the arrays.\n        a (List[int]): The array of integers.\n        b (str): The array of symbols ('*' or '/').\n\n    Returns:\n        int: The number of simple segments.\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible segments [l, r]\n    for l in range(n):\n        x = 1  # Initialize x for the segment\n        is_simple = True  # Assume the segment is simple initially\n\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:  # Check if division results in an integer\n                    is_simple = False\n                    break\n                x //= a[r]\n\n            # If the segment is still simple, increment the count\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = input().strip()\n\n    result = count_simple_segments(n, a, b)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Counts the number of simple segments in the given arrays.\n\n    A segment [l;r] is called simple if it contains only integers in the calculation path.\n    \n    Args:\n        n: The length of the arrays.\n        a: The array of integers.\n        b: The array of symbols ('*' or '/').\n\n    Returns:\n        The number of simple segments [l;r].\n    \"\"\"\n    simple_segments_count = 0\n    for start in range(n):\n        product = 1\n        is_simple = True\n        for end in range(start, n):\n            if b[end] == '*':\n                product *= a[end]\n            elif b[end] == '/':\n                if product % a[end] != 0:\n                    is_simple = False\n                    break\n                product //= a[end]\n            if is_simple:\n                simple_segments_count += 1\n    return simple_segments_count\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = input().strip()\n    \n    result = count_simple_segments(n, a, b)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef count_simple_segments(n: int, a: np.ndarray, b: str) -> int:\n    \"\"\"Counts the number of simple segments in the given arrays.\n\n    A segment [l; r] is called simple if it contains only integers in the calculation path.\n\n    Args:\n        n (int): The length of the arrays.\n        a (np.ndarray): An array of integers.\n        b (str): A string of operations ('*' or '/').\n\n    Returns:\n        int: The number of simple segments.\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible starting points of segments\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        is_simple = True  # Assume the segment is simple initially\n\n        # Iterate over all possible ending points of segments\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:  # Check if division results in an integer\n                    is_simple = False\n                    break\n                x //= a[r]\n\n            # If the segment is still simple, count it\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = np.array(list(map(int, input().split())))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Counts the number of simple segments in the given arrays.\n\n    A segment [l;r] is called simple if it contains only integers in the calculation path.\n\n    Args:\n        n: The length of the arrays.\n        a: The array of integers.\n        b: The array of operations ('*' or '/').\n\n    Returns:\n        The number of simple segments.\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible starting points of segments\n    for start in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        is_simple = True  # Assume the segment is simple initially\n\n        # Iterate over all possible ending points of segments\n        for end in range(start, n):\n            if b[end] == '*':\n                x *= a[end]\n            elif b[end] == '/':\n                if x % a[end] != 0:\n                    is_simple = False\n                    break\n                x //= a[end]\n\n            # If the segment is still simple, count it\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_simple_segments(n: int, a: List[int], b: str) -> int:\n    \"\"\"Counts the number of simple segments in the given arrays.\n\n    Args:\n        n: The length of the arrays.\n        a: List of integers representing the array a.\n        b: String of symbols representing the array b.\n\n    Returns:\n        The number of simple segments [l;r] where all calculations result in integers.\n    \"\"\"\n    simple_segments_count = 0\n\n    # Iterate over all possible starting points of segments\n    for l in range(n):\n        x = 1  # Initialize x to 1 for each new segment\n        is_simple = True  # Assume the segment is simple until proven otherwise\n\n        # Iterate over all possible ending points of segments\n        for r in range(l, n):\n            if b[r] == '*':\n                x *= a[r]\n            elif b[r] == '/':\n                if x % a[r] != 0:  # Check if division results in an integer\n                    is_simple = False\n                    break\n                x //= a[r]  # Perform integer division\n\n            # If the segment is simple, increment the count\n            if is_simple:\n                simple_segments_count += 1\n\n    return simple_segments_count\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nb = input().strip()\n\n# Output interface\nresult = count_simple_segments(n, a, b)\nprint(result)\n"], "plans": ["requirement analysis:\nThe program needs to efficiently calculate the number of simple segments in an array based on given operations. It should handle large inputs up to 10^6 elements and ensure all calculations result in integers for a segment to be considered simple.\nrequirement pool:\n- Efficiently calculate simple segments for large inputs\n- Ensure all calculations are accurate and result in integers\n- Optimize for performance to handle edge cases\n- Provide clear and concise output\n- Include comprehensive test cases for validation\nWe will use a sliding window approach to efficiently calculate the number of simple segments. The key challenge is ensuring that all operations within a segment result in integers. We will leverage Python's native integer operations and avoid floating-point arithmetic to maintain precision. The algorithm will iterate over possible segments and check if the result of each operation is an integer, using modular arithmetic to verify divisibility.\n", "requirement analysis:\nThe task requires determining the number of simple segments in an array based on arithmetic operations defined by a second array of symbols. The solution must efficiently handle large input sizes up to 10^6 elements, ensuring that all calculations are performed accurately and within a reasonable time frame. The primary challenge is to optimize the algorithm to avoid unnecessary computations and manage memory usage effectively.\nrequirement pool:\n- Efficiently handle input sizes up to 10^6.\n- Accurately calculate the number of simple segments.\n- Optimize for performance and memory usage.\n- Provide clear and concise output.\n- Include detailed logging for debugging purposes.\nWe will implement a function to calculate the number of simple segments in the given arrays. The function will iterate over all possible segments and check if the calculation path contains only integers. To optimize performance, we will use efficient iteration and avoid unnecessary calculations. Python's native integer and float operations will be used, and no additional libraries are required.\n", "requirement analysis:\nThe task requires calculating the number of simple segments in an array based on arithmetic operations. The main challenge is ensuring that the calculations remain integer-only, which requires careful handling of division operations. The solution must efficiently handle large input sizes up to 10^6 elements.\nrequirement pool:\n- Efficiently calculate simple segments for large input sizes.\n- Ensure all calculations maintain integer values to qualify as simple segments.\n- Optimize the algorithm to handle edge cases without performance degradation.\n- Provide clear and concise output as per the specified format.\n- Include error handling for invalid inputs.\nWe will use a sliding window approach to efficiently calculate the number of simple segments. The key challenge is ensuring that division operations result in integer values. We will leverage Python's integer division and modular arithmetic to maintain integer values during calculations. This approach will allow us to process large input sizes efficiently without degrading performance.\n", "requirement analysis:\nThe task requires determining the number of simple segments in an array based on arithmetic operations defined by a second array of symbols. The solution must efficiently handle large input sizes up to 10^6 elements, ensuring that all calculations remain within integer bounds to identify simple segments.\nrequirement pool:\n- Efficiently calculate the number of simple segments.\n- Handle large input sizes up to 10^6 elements.\n- Optimize the algorithm to run within time limits for edge cases.\n- Ensure the solution is robust and handles all possible input scenarios.\n- Provide clear and concise output as per the format requirements.\nWe will use a sliding window approach to efficiently calculate the number of simple segments. The key is to maintain a running product and check if the result remains an integer after each operation. This approach avoids recalculating the product for each segment from scratch, thus optimizing performance for large input sizes. Python's native integer handling will be sufficient for this task, and no additional libraries are required.\n", "requirement analysis:\nThe task requires efficiently determining the number of simple segments in an array based on arithmetic operations. The solution must handle large input sizes up to 10^6 and ensure that all calculations remain within integer bounds to qualify as simple segments.\nrequirement pool:\n- Efficiently calculate the number of simple segments.\n- Handle large input sizes up to 10^6.\n- Optimize the algorithm for performance.\n- Ensure the solution is robust against edge cases.\n- Provide clear and concise output.\nWe will use a sliding window approach to efficiently calculate the number of simple segments. The key is to maintain the product as an integer by checking divisibility before performing division. This ensures that all operations within a segment result in integers, thus qualifying it as a simple segment. We will iterate over all possible segments using nested loops, but optimize the inner loop to break early if a non-integer result is encountered.\n", "requirement analysis:\nThe task requires developing a program that efficiently calculates the number of simple segments in an array based on given operations. The solution must handle large input sizes up to 10^6 and ensure that all calculations are performed accurately to determine if the segment results in integers only.\nrequirement pool:\n- Efficiently calculate the number of simple segments.\n- Handle large input sizes up to 10^6.\n- Ensure accurate calculations for determining integer-only segments.\n- Provide clear and concise output.\n- Optimize for performance to handle edge cases.\nWe will use a sliding window approach to efficiently calculate the number of simple segments. By maintaining a running product and checking for integer results at each step, we can determine if a segment is simple without recalculating from scratch for each possible segment. This approach will leverage Python's native handling of integers and floats, ensuring accuracy and performance. We will also use the NumPy library for efficient array operations, which is well-suited for handling large input sizes.\n", "requirement analysis:\nThe program needs to efficiently compute the number of simple segments in an array based on given operations. It should handle large input sizes up to 10^6 and ensure all calculations result in integers for a segment to be considered simple.\nrequirement pool:\n- Efficiently compute the number of simple segments.\n- Handle large input sizes up to 10^6.\n- Ensure all calculations result in integers for simplicity.\n- Provide accurate results for all test cases.\n- Optimize for performance and memory usage.\nWe will use a two-pointer technique to efficiently find all simple segments. The key is to maintain a running product and ensure it remains an integer by checking divisibility before performing division. This approach will allow us to handle large input sizes up to 10^6 efficiently.\n", "requirement analysis:\nThe program needs to efficiently compute the number of simple segments in an array based on given operations. It should handle large input sizes up to 10^6 elements and ensure all calculations result in integers for a segment to be considered simple.\nrequirement pool:\n- Efficient computation of simple segments\n- Handle large input sizes effectively\n- Ensure accurate results for all test cases\n- Optimize for performance and memory usage\n- Provide clear error messages for invalid inputs\nWe will use a sliding window approach to efficiently compute the number of simple segments. The key challenge is ensuring that all operations within a segment result in integer values. We will leverage Python's integer division and multiplication to maintain integer results. Additionally, we will use the NumPy library for efficient array operations, which is well-suited for handling large input sizes.\n", "requirement analysis:\nThe requirement is to determine the number of simple segments in an array based on a calculation path defined by multiplication and division operations. The solution must efficiently handle large input sizes up to 10^6 elements, ensuring that all calculations result in integers for a segment to be considered simple.\nrequirement pool:\n- Efficiently calculate the number of simple segments.\n- Handle large input sizes up to 10^6 elements.\n- Ensure all calculations result in integers for a segment to be simple.\n- Optimize performance to handle edge cases.\n- Provide clear and concise output.\nWe will use a sliding window approach to efficiently calculate the number of simple segments. This approach will allow us to traverse the array while maintaining a running product and checking for integer results. We will utilize Python's native integer operations to ensure precision and avoid floating-point inaccuracies. The algorithm will be optimized to handle large input sizes up to 10^6 elements.\n", "requirement analysis:\nThe task requires developing an efficient algorithm to count simple segments in an array based on arithmetic operations defined by a second array. The solution must handle large input sizes up to 10^6 efficiently, ensuring that all calculations remain within integer bounds to determine simplicity.\nrequirement pool:\n- Develop an efficient algorithm to count simple segments.\n- Ensure the solution handles large input sizes up to 10^6.\n- Optimize the algorithm to minimize computational complexity.\n- Provide clear and concise output format.\n- Include edge case handling for minimum and maximum input values.\nWe will use a sliding window approach to efficiently determine the number of simple segments. By maintaining a running product and checking for integer results at each step, we can avoid recalculating the entire segment repeatedly. This approach will leverage Python's native integer handling and avoid floating-point operations to ensure accuracy and performance.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 348, "examples": "\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^6).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nThe third line contains n symbols without spaces between them \u2014 the array b_1, b_2 \u2026 b_n (b_i= '/' or b_i= '*' for every 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the number of simple segments [l;r].\n\nExamples\n\nInput\n\n\n3\n1 2 3\n*/*\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n7\n6 4 10 1 2 15 1\n*/*/*//\n\n\nOutput\n\n\n8", "mutate_method": "rephrase_one", "parent_index": 60}
