{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. He then sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. He then sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in the sorted array are the individual elements of the original array.\n    # The largest number is the sum of all three elements.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the sorted list of subsequence sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty\n           subsequences of the original array.\n\n    Returns:\n        A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest three numbers in the sorted list are the individual elements\n    # of the original array. The largest number is the sum of all three elements.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The smallest three numbers in the sorted array are the individual elements of the original array.\n    # The largest number is the sum of all three elements.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is a_1 + a_2 + a_3\n        a3 = b[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n\n    # Output interface\n    result = reconstruct_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array of three integers from the sorted array of sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    total_sum = b[-1]\n    # Deduce the other two integers using the properties of the sums\n    a2 = b[1]\n    a3 = total_sum - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The smallest three numbers in the sorted list are the individual elements of the original array.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[2]\n    \n    # The largest number is the sum of all three elements.\n    sum_all = b[6]\n    \n    # We can verify the sum of all three elements to ensure correctness.\n    assert a1 + a2 + a3 == sum_all, \"The sum of the elements does not match the expected total sum.\"\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of lists, where each inner list contains the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element b[0] is one of the original numbers\n        a1 = b[0]\n        # The largest element b[6] is the sum of all three original numbers\n        sum_all = b[6]\n        # The second number can be derived using the properties of the subsequences\n        # a2 + a3 = sum_all - a1\n        # a2 = b[1] - a1\n        a2 = b[1] - a1\n        # a3 = sum_all - a1 - a2\n        a3 = sum_all - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of the original array a.\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a.\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements a.\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements of a.\n        sum_a = b[6]\n        # The second largest element in b is the sum of the two largest elements of a.\n        sum_two_largest = b[5]\n        \n        # Deduce the other two elements of a\n        a2 = sum_two_largest - a1\n        a3 = sum_a - a1 - a2\n        \n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences of array a.\n\n    Returns:\n        List[int]: The original array a consisting of 3 positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element in a\n    a2 = b[1]\n    # The largest element in b is the sum of all elements in a\n    # Therefore, a3 can be deduced by subtracting a1 and a2 from the largest element\n    a3 = b[-1] - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Output the result in the specified format for each test case.\n- Handle large integer values up to 10^9.\n- Provide a scalable solution that can be adapted for similar problems.\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and restores the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. Using these observations, we can deduce the original array efficiently.\n", "requirement analysis:\nThe problem requires restoring an array of three integers from the sums of all non-empty subsequences, which are provided in sorted order. The key observation is that the smallest three numbers in the sorted list correspond to the individual elements of the original array. The largest number is the sum of all three elements. This allows us to deduce the original array efficiently.\nrequirement pool:\n- Implement the main logic to deduce the original array from the sorted subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Validate the output format for each test case.\n- Consider edge cases and additional constraints.\nWe will use the observation that the smallest three numbers in the sorted list correspond to the individual elements of the original array. The largest number is the sum of all three elements. This allows us to deduce the original array efficiently. We will implement a function that processes each test case and extracts the original array from the given subsequence sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring the output format is consistent and correct. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution handles up to 5000 test cases efficiently\n- Maintain consistent output format\n- Optimize for large integer values\n- Provide clear documentation and examples\nWe will implement a function that takes the sorted array of sums of subsequences and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. Using these observations, we can efficiently restore the original array. We will use Python's built-in list operations to achieve this.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values.\nrequirement pool:\n- Implement the main logic to reconstruct array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Provide detailed comments and documentation for the code.\n- Implement additional test cases to ensure robustness.\nWe will solve the problem by identifying the three integers a_1, a_2, and a_3 from the sorted array b. The smallest element in b is a_1, the second smallest element is a_2, and the largest element is a_1 + a_2 + a_3. Using these observations, we can reconstruct the original array a efficiently.\n", "requirement analysis:\nThe problem requires restoring an array of three integers from the sums of its non-empty subsequences. Given the sorted array of sums, the smallest element is one of the original integers, and the largest element is the sum of all three integers. The task is to identify the three integers efficiently for multiple test cases.\nrequirement pool:\n- Implement the main logic to restore the original array from the subsequence sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize the solution for large integer values\n- Validate the output format for each test case\n- Provide documentation for the solution approach\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these properties, we can efficiently restore the original array for each test case. The solution will handle up to 5000 test cases efficiently by iterating through each test case and applying the logic to deduce the original integers.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output format must be strictly followed.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Output the result in the specified format\n- Handle large integer values up to 10^9\n- Provide multiple valid outputs if possible\nWe will implement a function that takes the sorted list of sums of all non-empty subsequences and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted list are the individual elements of the original array, and the largest number is the sum of all three elements. We can use this observation to efficiently restore the original array.\n", "requirement analysis:\nThe task requires restoring the original array of 3 integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will use a simple mathematical approach to restore the original array from the sorted sums of its non-empty subsequences. Given the sorted array b, the smallest element b[0] is one of the original numbers, and the largest element b[6] is the sum of all three original numbers. The other two numbers can be derived using the properties of the subsequences. This approach is efficient and straightforward, suitable for handling up to 5000 test cases.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure output format is correct for each test case.\n- Optimize for large integer values.\n- Provide clear documentation and comments in the code.\nWe will solve the problem by recognizing that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Therefore, the three elements of a can be derived as follows: a1 = b[0], a2 = b[1], and a3 = b[6] - a1 - a2. This approach is efficient and works within the constraints provided.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate and clear output for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure scalability to handle up to 5000 test cases\n- Provide clear and correctly formatted output\n- Optimize performance for large integer values\n- Implement a user-friendly interface for input and output\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a efficiently. We will iterate over each test case, extract the necessary elements from b, and reconstruct a.\n", "requirement analysis:\nThe task requires restoring the original array from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct and clear output for each test case.\nrequirement pool:\n- Implement the main algorithm to restore the original array\n- Ensure the solution handles large numbers efficiently\n- Optimize the solution for multiple test cases\n- Provide clear output format for each test case\n- Consider edge cases and validate input constraints\nWe will use a straightforward approach to solve the problem. Given the sorted array b of sums of all non-empty subsequences of a, we can deduce that the smallest element in b is the smallest element in a, the second smallest element in b is the second smallest element in a, and the largest element in b is the sum of all elements in a. Therefore, the original array a can be restored by taking the first element, the second element, and the difference between the largest element and the sum of the first two elements in b.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, false, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 43, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 43}
