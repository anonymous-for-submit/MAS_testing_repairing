{"name": "1615_B. And It's Non-Zero", "description": "You are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "tags": ["bitmasks", "greedy", "math"], "difficulty": 8, "id": 1615, "sample_io": [{"input": "5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n", "output": ["1\n3\n0\n2\n31072\n"]}], "test_list": [{"input": "5\n1 2\n2 8\n4 5\n2 5\n100000 200000\n", "output": ["1\n3\n0\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n100000 200000\n", "output": ["1\n3\n0\n0\n31072\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 5\n100000 200000\n", "output": ["1\n4\n0\n2\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100000 200000\n", "output": ["0\n3\n0\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n110000 200000\n", "output": ["1\n3\n0\n0\n21072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100100 200000\n", "output": ["0\n3\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 10\n110000 200000\n", "output": ["1\n3\n0\n3\n21072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n1 5\n100001 200000\n", "output": ["1\n3\n0\n2\n31071\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n100000 104325\n", "output": ["1\n3\n0\n0\n0\n"]}, {"input": "5\n2 2\n2 8\n1 5\n2 5\n100000 200000\n", "output": ["0\n3\n2\n2\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 12\n110000 200000\n", "output": ["1\n3\n0\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n100100 200000\n", "output": ["0\n3\n1\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n4 9\n1 5\n100000 200000\n", "output": ["1\n3\n2\n2\n31072\n"]}, {"input": "5\n2 2\n2 12\n1 5\n2 5\n100000 200000\n", "output": ["0\n5\n2\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n110000 200000\n", "output": ["2\n3\n0\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 7\n100100 200000\n", "output": ["1\n3\n0\n2\n30972\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n101100 200000\n", "output": ["0\n3\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n100000 200000\n", "output": ["1\n3\n1\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 7\n100100 200000\n", "output": ["1\n2\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101000 200000\n", "output": ["1\n3\n1\n2\n30072\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n101000 200000\n", "output": ["1\n2\n1\n2\n30072\n"]}, {"input": "5\n2 4\n1 8\n4 5\n2 7\n100100 200000\n", "output": ["1\n4\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n101100 200000\n", "output": ["1\n2\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n4 5\n3 5\n100000 200000\n", "output": ["1\n3\n0\n1\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n4 5\n100000 200000\n", "output": ["0\n3\n0\n0\n31072\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 1\n100000 200000\n", "output": ["1\n4\n0\n0\n31072\n"]}, {"input": "5\n2 2\n2 8\n4 5\n4 5\n110000 200000\n", "output": ["0\n3\n0\n0\n21072\n"]}, {"input": "5\n2 2\n2 16\n4 5\n2 5\n100100 200000\n", "output": ["0\n7\n0\n2\n30972\n"]}, {"input": "5\n1 2\n2 7\n4 5\n4 10\n110000 200000\n", "output": ["1\n2\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 7\n4 6\n2 5\n100100 200000\n", "output": ["0\n2\n0\n2\n30972\n"]}, {"input": "5\n2 2\n2 8\n1 5\n4 5\n100000 200000\n", "output": ["0\n3\n2\n0\n31072\n"]}, {"input": "5\n1 2\n2 8\n4 6\n4 5\n110001 200000\n", "output": ["1\n3\n0\n0\n21071\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 7\n100110 200000\n", "output": ["0\n3\n0\n2\n30962\n"]}, {"input": "5\n1 2\n2 8\n4 5\n7 12\n110000 200000\n", "output": ["1\n3\n0\n1\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 4\n100100 200000\n", "output": ["0\n3\n1\n1\n30972\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 5\n100000 200000\n", "output": ["1\n3\n3\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n010000 200000\n", "output": ["2\n3\n0\n0\n91697\n"]}, {"input": "5\n1 2\n2 4\n4 5\n4 13\n110000 200000\n", "output": ["1\n1\n0\n4\n21072\n"]}, {"input": "5\n2 2\n1 8\n3 6\n2 5\n101100 200000\n", "output": ["0\n4\n1\n2\n29972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n100000 200000\n", "output": ["1\n3\n1\n5\n31072\n"]}, {"input": "5\n1 4\n1 7\n4 5\n2 7\n100100 200000\n", "output": ["2\n3\n0\n2\n30972\n"]}, {"input": "5\n1 4\n1 8\n4 5\n2 7\n100100 200000\n", "output": ["2\n4\n0\n2\n30972\n"]}, {"input": "5\n2 4\n2 5\n4 5\n2 7\n100100 123776\n", "output": ["1\n2\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 10\n110000 200000\n", "output": ["1\n2\n0\n2\n21072\n"]}, {"input": "5\n2 2\n2 8\n1 6\n4 5\n100000 200000\n", "output": ["0\n3\n3\n0\n31072\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 7\n100110 200000\n", "output": ["0\n4\n0\n2\n30962\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 4\n100101 200000\n", "output": ["0\n3\n1\n1\n30971\n"]}, {"input": "5\n2 2\n1 1\n3 6\n2 5\n101100 200000\n", "output": ["0\n0\n1\n2\n29972\n"]}, {"input": "5\n1 2\n1 8\n7 9\n1 10\n100000 200000\n", "output": ["1\n4\n1\n5\n31072\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101010 188450\n", "output": ["1\n3\n1\n2\n30062\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 20\n110000 200000\n", "output": ["1\n2\n0\n7\n21072\n"]}, {"input": "5\n2 2\n2 8\n1 2\n4 5\n100000 200000\n", "output": ["0\n3\n1\n0\n31072\n"]}, {"input": "5\n2 2\n2 5\n3 6\n2 4\n100101 200000\n", "output": ["0\n2\n1\n1\n30971\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101011 188450\n", "output": ["1\n3\n1\n2\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 5\n101000 200000\n", "output": ["1\n1\n1\n2\n30072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 5\n101011 188450\n", "output": ["1\n3\n3\n2\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 5\n101001 200000\n", "output": ["1\n1\n1\n2\n30071\n"]}, {"input": "5\n1 1\n1 8\n7 10\n1 10\n100000 186611\n", "output": ["0\n4\n1\n5\n31072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 2\n101011 188450\n", "output": ["1\n3\n3\n1\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 7\n101001 200000\n", "output": ["1\n1\n1\n3\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n101001 200000\n", "output": ["2\n1\n1\n3\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n111001 200000\n", "output": ["2\n1\n1\n3\n20071\n"]}, {"input": "5\n1 4\n1 6\n7 9\n1 7\n111001 200000\n", "output": ["2\n3\n1\n3\n20071\n"]}, {"input": "5\n1 4\n2 6\n7 9\n1 7\n111001 200000\n", "output": ["2\n2\n1\n3\n20071\n"]}, {"input": "5\n2 4\n3 6\n7 9\n1 7\n111001 200000\n", "output": ["1\n1\n1\n3\n20071\n"]}, {"input": "5\n2 8\n3 6\n7 9\n1 7\n111001 200000\n", "output": ["3\n1\n1\n3\n20071\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 4\n100001 200000\n", "output": ["1\n3\n0\n0\n31071\n"]}, {"input": "5\n2 2\n2 8\n4 5\n2 5\n100000 101573\n", "output": ["0\n3\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 4\n4 5\n4 5\n110000 200000\n", "output": ["1\n1\n0\n0\n21072\n"]}, {"input": "5\n1 2\n1 8\n4 5\n4 10\n110000 200000\n", "output": ["1\n4\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n100100 200000\n", "output": ["0\n6\n0\n2\n30972\n"]}, {"input": "5\n1 2\n4 8\n4 5\n1 5\n100000 200000\n", "output": ["1\n1\n0\n2\n31072\n"]}, {"input": "5\n2 2\n2 8\n1 5\n2 5\n100000 161404\n", "output": ["0\n3\n2\n2\n30333\n"]}, {"input": "5\n1 2\n2 8\n3 6\n4 5\n110000 200000\n", "output": ["1\n3\n1\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 10\n100100 200000\n", "output": ["1\n3\n0\n4\n30972\n"]}, {"input": "5\n1 1\n2 8\n4 5\n4 12\n110000 200000\n", "output": ["0\n3\n0\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n2 5\n100101 200000\n", "output": ["0\n3\n1\n2\n30971\n"]}, {"input": "5\n1 1\n2 8\n7 9\n1 5\n100000 200000\n", "output": ["0\n3\n1\n2\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 11\n4 5\n110000 200000\n", "output": ["2\n3\n4\n0\n21072\n"]}, {"input": "5\n2 4\n2 8\n4 5\n2 7\n100101 200000\n", "output": ["1\n3\n0\n2\n30971\n"]}, {"input": "5\n1 2\n2 8\n2 5\n4 13\n110000 200000\n", "output": ["1\n3\n2\n4\n21072\n"]}, {"input": "5\n2 2\n2 8\n3 11\n2 5\n101100 200000\n", "output": ["0\n3\n4\n2\n29972\n"]}, {"input": "5\n1 2\n2 13\n7 9\n1 5\n100000 200000\n", "output": ["1\n6\n1\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 7\n000100 200000\n", "output": ["1\n2\n0\n2\n99933\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 5\n101000 135172\n", "output": ["1\n3\n1\n2\n4101\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n100000 200000\n", "output": ["1\n2\n1\n2\n31072\n"]}, {"input": "5\n1 4\n2 7\n7 9\n1 5\n101100 200000\n", "output": ["2\n2\n1\n2\n29972\n"]}, {"input": "5\n2 2\n2 10\n4 5\n4 5\n100000 200000\n", "output": ["0\n4\n0\n0\n31072\n"]}, {"input": "5\n2 4\n2 16\n4 5\n2 5\n100100 200000\n", "output": ["1\n7\n0\n2\n30972\n"]}, {"input": "5\n1 3\n2 2\n4 6\n2 5\n100000 200000\n", "output": ["1\n0\n0\n2\n31072\n"]}, {"input": "5\n2 2\n1 8\n1 5\n4 5\n100000 200000\n", "output": ["0\n4\n2\n0\n31072\n"]}, {"input": "5\n2 2\n2 8\n3 6\n4 4\n100100 200000\n", "output": ["0\n3\n1\n0\n30972\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 8\n100000 200000\n", "output": ["1\n3\n3\n4\n31072\n"]}, {"input": "5\n1 4\n2 8\n4 6\n4 5\n010001 200000\n", "output": ["2\n3\n0\n0\n91696\n"]}, {"input": "5\n2 2\n1 15\n3 6\n2 5\n101100 200000\n", "output": ["0\n7\n1\n2\n29972\n"]}, {"input": "5\n1 4\n1 8\n4 5\n4 7\n100100 200000\n", "output": ["2\n4\n0\n0\n30972\n"]}, {"input": "5\n4 4\n2 5\n4 5\n2 7\n100100 123776\n", "output": ["0\n2\n0\n2\n0\n"]}, {"input": "5\n1 2\n3 7\n4 5\n6 10\n110000 200000\n", "output": ["1\n1\n0\n2\n21072\n"]}, {"input": "5\n2 2\n2 7\n4 6\n2 11\n100100 200000\n", "output": ["0\n2\n0\n4\n30972\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 3\n100110 200000\n", "output": ["0\n4\n0\n0\n30962\n"]}, {"input": "5\n2 2\n2 10\n3 6\n2 4\n100101 200000\n", "output": ["0\n4\n1\n1\n30971\n"]}, {"input": "5\n1 2\n2 7\n4 5\n6 20\n100000 200000\n", "output": ["1\n2\n0\n7\n31072\n"]}, {"input": "5\n2 2\n2 5\n3 6\n2 4\n100101 108244\n", "output": ["0\n2\n1\n1\n0\n"]}, {"input": "5\n2 3\n1 1\n3 6\n2 5\n111100 200000\n", "output": ["0\n0\n1\n2\n19972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n101011 188450\n", "output": ["1\n3\n1\n5\n30061\n"]}, {"input": "5\n1 2\n1 3\n7 9\n1 14\n101001 200000\n", "output": ["1\n1\n1\n7\n30071\n"]}, {"input": "5\n1 4\n1 3\n7 9\n1 7\n110001 200000\n", "output": ["2\n1\n1\n3\n21071\n"]}, {"input": "5\n1 4\n3 6\n7 9\n1 13\n111001 200000\n", "output": ["2\n1\n1\n6\n20071\n"]}, {"input": "5\n1 2\n2 13\n4 5\n1 2\n100000 200000\n", "output": ["1\n6\n0\n1\n31072\n"]}, {"input": "5\n2 2\n2 8\n3 5\n2 5\n100000 101573\n", "output": ["0\n3\n1\n2\n0\n"]}, {"input": "5\n1 2\n1 13\n4 5\n4 10\n110000 200000\n", "output": ["1\n6\n0\n3\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n100100 138386\n", "output": ["0\n6\n0\n2\n7315\n"]}, {"input": "5\n1 2\n2 8\n3 8\n4 5\n110000 200000\n", "output": ["1\n3\n2\n0\n21072\n"]}, {"input": "5\n2 2\n2 2\n3 6\n2 5\n100101 200000\n", "output": ["0\n0\n1\n2\n30971\n"]}, {"input": "5\n1 4\n2 5\n4 11\n4 5\n110000 200000\n", "output": ["2\n2\n4\n0\n21072\n"]}, {"input": "5\n1 4\n2 8\n4 5\n2 7\n100101 200000\n", "output": ["2\n3\n0\n2\n30971\n"]}, {"input": "5\n2 2\n1 8\n3 11\n2 5\n101100 200000\n", "output": ["0\n4\n4\n2\n29972\n"]}, {"input": "5\n2 4\n2 7\n4 5\n1 7\n000100 200000\n", "output": ["1\n2\n0\n3\n99933\n"]}, {"input": "5\n1 2\n2 4\n7 9\n1 5\n101000 135172\n", "output": ["1\n1\n1\n2\n4101\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n100001 200000\n", "output": ["1\n2\n1\n2\n31071\n"]}, {"input": "5\n2 2\n2 8\n2 4\n4 5\n110000 200000\n", "output": ["0\n3\n1\n0\n21072\n"]}, {"input": "5\n2 4\n1 16\n4 5\n2 5\n100100 200000\n", "output": ["1\n8\n0\n2\n30972\n"]}, {"input": "5\n2 2\n1 8\n1 5\n4 5\n100000 150693\n", "output": ["0\n4\n2\n0\n19622\n"]}, {"input": "5\n1 2\n2 8\n3 5\n4 5\n110001 200000\n", "output": ["1\n3\n1\n0\n21071\n"]}, {"input": "5\n1 3\n2 8\n4 5\n2 12\n110000 200000\n", "output": ["1\n3\n0\n5\n21072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 8\n100010 200000\n", "output": ["1\n3\n3\n4\n31062\n"]}, {"input": "5\n1 1\n2 4\n4 5\n4 15\n110000 200000\n", "output": ["0\n1\n0\n4\n21072\n"]}, {"input": "5\n1 4\n1 8\n4 5\n3 7\n100100 200000\n", "output": ["2\n4\n0\n1\n30972\n"]}, {"input": "5\n2 2\n3 7\n4 5\n6 10\n110000 200000\n", "output": ["0\n1\n0\n2\n21072\n"]}, {"input": "5\n2 3\n2 8\n1 6\n4 5\n100100 200000\n", "output": ["0\n3\n3\n0\n30972\n"]}, {"input": "5\n2 2\n2 9\n4 5\n2 3\n101110 200000\n", "output": ["0\n4\n0\n0\n29962\n"]}, {"input": "5\n1 2\n4 8\n7 9\n2 5\n101011 188450\n", "output": ["1\n1\n1\n2\n30061\n"]}, {"input": "5\n1 2\n4 7\n4 5\n6 20\n100000 200000\n", "output": ["1\n0\n0\n7\n31072\n"]}, {"input": "5\n2 3\n1 2\n3 6\n2 5\n111100 200000\n", "output": ["0\n1\n1\n2\n19972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 10\n101010 188450\n", "output": ["1\n3\n1\n5\n30062\n"]}, {"input": "5\n1 4\n1 3\n7 15\n1 5\n101000 200000\n", "output": ["2\n1\n1\n2\n30072\n"]}, {"input": "5\n1 1\n1 8\n7 8\n1 10\n100010 186611\n", "output": ["0\n4\n1\n5\n31062\n"]}, {"input": "5\n1 2\n1 4\n7 9\n1 14\n101001 200000\n", "output": ["1\n2\n1\n7\n30071\n"]}, {"input": "5\n1 4\n1 3\n9 9\n1 7\n110001 200000\n", "output": ["2\n1\n0\n3\n21071\n"]}, {"input": "5\n1 4\n1 8\n7 9\n1 7\n111001 200000\n", "output": ["2\n4\n1\n3\n20071\n"]}, {"input": "5\n1 4\n3 6\n7 9\n1 9\n111001 200000\n", "output": ["2\n1\n1\n4\n20071\n"]}, {"input": "5\n2 3\n1 8\n4 5\n2 5\n100100 185068\n", "output": ["0\n4\n0\n2\n30972\n"]}, {"input": "5\n1 2\n1 13\n4 5\n1 10\n110000 200000\n", "output": ["1\n6\n0\n5\n21072\n"]}, {"input": "5\n2 2\n2 14\n4 6\n2 5\n000100 138386\n", "output": ["0\n6\n0\n2\n69139\n"]}, {"input": "5\n1 2\n2 14\n3 8\n4 5\n110000 200000\n", "output": ["1\n6\n2\n0\n21072\n"]}, {"input": "5\n1 2\n2 5\n4 11\n4 5\n110000 200000\n", "output": ["1\n2\n4\n0\n21072\n"]}, {"input": "5\n1 4\n2 5\n4 5\n2 7\n100101 200000\n", "output": ["2\n2\n0\n2\n30971\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 8\n100001 200000\n", "output": ["1\n2\n1\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 4\n4 5\n110000 200000\n", "output": ["0\n0\n1\n0\n21072\n"]}, {"input": "5\n1 2\n2 8\n3 9\n1 14\n100010 200000\n", "output": ["1\n3\n3\n7\n31062\n"]}, {"input": "5\n1 1\n2 5\n4 5\n4 15\n110000 200000\n", "output": ["0\n2\n0\n4\n21072\n"]}, {"input": "5\n2 2\n3 9\n4 5\n6 10\n110000 200000\n", "output": ["0\n3\n0\n2\n21072\n"]}, {"input": "5\n1 2\n4 8\n7 9\n3 5\n101011 188450\n", "output": ["1\n1\n1\n1\n30061\n"]}, {"input": "5\n1 4\n4 7\n4 5\n6 20\n100000 200000\n", "output": ["2\n0\n0\n7\n31072\n"]}, {"input": "5\n2 3\n1 2\n1 6\n2 5\n111100 200000\n", "output": ["0\n1\n3\n2\n19972\n"]}, {"input": "5\n1 1\n1 8\n7 8\n2 10\n100010 186611\n", "output": ["0\n4\n1\n4\n31062\n"]}, {"input": "5\n1 2\n1 4\n7 9\n1 14\n100001 200000\n", "output": ["1\n2\n1\n7\n31071\n"]}, {"input": "5\n1 4\n1 3\n9 9\n2 7\n110001 200000\n", "output": ["2\n1\n0\n2\n21071\n"]}, {"input": "5\n1 4\n1 8\n7 9\n1 2\n111001 200000\n", "output": ["2\n4\n1\n1\n20071\n"]}, {"input": "5\n1 2\n3 14\n3 8\n4 5\n110000 200000\n", "output": ["1\n5\n2\n0\n21072\n"]}, {"input": "5\n1 4\n2 5\n4 5\n2 8\n100101 200000\n", "output": ["2\n2\n0\n3\n30971\n"]}, {"input": "5\n1 2\n2 12\n7 9\n1 8\n100001 200000\n", "output": ["1\n5\n1\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 4\n4 5\n110100 200000\n", "output": ["0\n0\n1\n0\n20972\n"]}, {"input": "5\n1 1\n4 5\n4 5\n4 15\n110000 200000\n", "output": ["0\n0\n0\n4\n21072\n"]}, {"input": "5\n1 4\n1 16\n4 7\n3 7\n100100 200000\n", "output": ["2\n8\n0\n1\n30972\n"]}, {"input": "5\n1 2\n3 9\n4 5\n6 10\n110000 200000\n", "output": ["1\n3\n0\n2\n21072\n"]}, {"input": "5\n2 3\n1 2\n1 6\n2 5\n101100 200000\n", "output": ["0\n1\n3\n2\n29972\n"]}, {"input": "5\n1 4\n1 3\n9 9\n2 7\n111001 200000\n", "output": ["2\n1\n0\n2\n20071\n"]}, {"input": "5\n1 4\n1 5\n7 9\n1 2\n111001 200000\n", "output": ["2\n2\n1\n1\n20071\n"]}, {"input": "5\n2 2\n2 5\n3 5\n2 5\n101000 129464\n", "output": ["0\n2\n1\n2\n0\n"]}, {"input": "5\n1 2\n2 12\n4 9\n1 8\n100001 200000\n", "output": ["1\n5\n2\n4\n31071\n"]}, {"input": "5\n2 2\n2 3\n2 8\n4 5\n110100 200000\n", "output": ["0\n0\n3\n0\n20972\n"]}, {"input": "5\n1 2\n4 8\n3 5\n4 7\n110001 200000\n", "output": ["1\n1\n1\n0\n21071\n"]}, {"input": "5\n2 3\n2 8\n3 5\n4 12\n110000 200000\n", "output": ["0\n3\n1\n4\n21072\n"]}, {"input": "5\n1 1\n4 5\n4 5\n4 15\n110010 200000\n", "output": ["0\n0\n0\n4\n21062\n"]}, {"input": "5\n1 1\n1 8\n7 14\n2 16\n100010 186611\n", "output": ["0\n4\n1\n7\n31062\n"]}, {"input": "5\n1 6\n1 5\n7 9\n1 2\n111001 200000\n", "output": ["3\n2\n1\n1\n20071\n"]}, {"input": "5\n2 2\n2 5\n3 9\n2 5\n101000 129464\n", "output": ["0\n2\n3\n2\n0\n"]}, {"input": "5\n1 1\n2 12\n4 9\n1 8\n100001 200000\n", "output": ["0\n5\n2\n4\n31071\n"]}, {"input": "5\n1 2\n4 8\n3 5\n1 7\n110001 200000\n", "output": ["1\n1\n1\n3\n21071\n"]}, {"input": "5\n2 3\n2 8\n3 5\n4 12\n010000 200000\n", "output": ["0\n3\n1\n4\n91697\n"]}, {"input": "5\n2 3\n1 3\n1 6\n2 8\n101100 200000\n", "output": ["0\n1\n3\n3\n29972\n"]}, {"input": "5\n1 1\n1 8\n6 14\n2 16\n100010 186611\n", "output": ["0\n4\n2\n7\n31062\n"]}, {"input": "5\n1 6\n1 10\n7 9\n1 2\n111001 200000\n", "output": ["3\n5\n1\n1\n20071\n"]}, {"input": "5\n1 1\n2 12\n4 13\n1 8\n100001 200000\n", "output": ["0\n5\n4\n4\n31071\n"]}, {"input": "5\n1 2\n4 4\n3 5\n1 7\n110001 200000\n", "output": ["1\n0\n1\n3\n21071\n"]}, {"input": "5\n2 3\n1 5\n1 6\n2 8\n101100 200000\n", "output": ["0\n2\n3\n3\n29972\n"]}, {"input": "5\n1 6\n1 10\n9 9\n1 2\n111001 200000\n", "output": ["3\n5\n0\n1\n20071\n"]}, {"input": "5\n1 1\n2 12\n4 13\n1 8\n100000 200000\n", "output": ["0\n5\n4\n4\n31072\n"]}, {"input": "5\n1 2\n4 4\n3 8\n1 7\n110001 200000\n", "output": ["1\n0\n2\n3\n21071\n"]}, {"input": "5\n1 2\n4 4\n3 8\n2 7\n110001 200000\n", "output": ["1\n0\n2\n2\n21071\n"]}, {"input": "5\n2 3\n2 5\n1 6\n2 8\n101101 200000\n", "output": ["0\n2\n3\n3\n29971\n"]}, {"input": "5\n1 2\n2 10\n4 5\n1 5\n100000 121445\n", "output": ["1\n4\n0\n2\n0\n"]}, {"input": "5\n1 2\n2 8\n4 5\n4 5\n110010 200000\n", "output": ["1\n3\n0\n0\n21062\n"]}, {"input": "5\n1 2\n2 10\n4 5\n4 12\n110000 200000\n", "output": ["1\n4\n0\n4\n21072\n"]}, {"input": "5\n2 2\n4 8\n3 6\n2 5\n100100 200000\n", "output": ["0\n1\n1\n2\n30972\n"]}, {"input": "5\n2 2\n2 7\n1 5\n2 5\n100000 200000\n", "output": ["0\n2\n2\n2\n31072\n"]}, {"input": "5\n2 4\n2 7\n4 5\n2 13\n100100 200000\n", "output": ["1\n2\n0\n6\n30972\n"]}, {"input": "5\n1 2\n2 8\n7 9\n1 1\n101000 200000\n", "output": ["1\n3\n1\n0\n30072\n"]}, {"input": "5\n1 2\n2 7\n7 9\n1 5\n111100 200000\n", "output": ["1\n2\n1\n2\n19972\n"]}], "task_id": "codecontest/120", "prompt": "You are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits, where each pair of corresponding bits is individually considered. It is important to consider the properties of binary numbers and their bitwise operations to solve this problem efficiently.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "repair_prompt": ["You are given an array consisting of all integers from [l, r] inclusive. For example, if l = 2 and r = 5, the array would be [2, 3, 4, 5]. What's the minimum number of elements you can delete to make the [bitwise AND](https://en.wikipedia.org/wiki/Bitwise_operation#AND) of the array non-zero?\n\nA bitwise AND is a binary operation that takes two equal-length binary representations and performs the AND operation on each pair of the corresponding bits, where each pair of corresponding bits is individually considered. It is important to consider the properties of binary numbers and their bitwise operations to solve this problem efficiently.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples where each tuple contains two integers l and r.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    \n    for l, r in test_cases:\n        # Calculate the maximum number in the range [l, r]\n        max_num = r\n        \n        # Calculate the number of bits in the maximum number\n        num_bits = max_num.bit_length()\n        \n        # Initialize the minimum deletions to the size of the range\n        min_deletions = r - l + 1\n        \n        # Iterate over each bit position\n        for bit in range(num_bits):\n            # Calculate the mask for the current bit position\n            mask = 1 << bit\n            \n            # Count numbers in the range [l, r] that have the current bit set\n            count_with_bit_set = sum(1 for num in range(l, r + 1) if num & mask)\n            \n            # Calculate deletions needed to make the AND non-zero for this bit position\n            deletions = (r - l + 1) - count_with_bit_set\n            \n            # Update the minimum deletions\n            min_deletions = min(min_deletions, deletions)\n        \n        # Append the result for the current test case\n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Compute results\n    results = min_deletions_to_non_zero_and(n, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport typing\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: typing.List[typing.Tuple[int, int]]) -> typing.List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing two integers l and r.\n\n    Returns:\n        A list of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Calculate the longest prefix of bits common across all numbers in the range [l, r]\n        # The key insight is to find the number of bits that need to be adjusted to make the AND operation non-zero\n        common_prefix_length = 0\n        while (l >> common_prefix_length) != (r >> common_prefix_length):\n            common_prefix_length += 1\n        \n        # Calculate the number of deletions required\n        # The number of deletions is the difference between r and the smallest number with the same prefix\n        min_deletions = r - (l | ((1 << common_prefix_length) - 1))\n        results.append(min_deletions)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = min_deletions_to_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples where each tuple contains two integers l and r.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    \n    for l, r in test_cases:\n        # Initialize the minimum deletions to the maximum possible, which is the length of the array\n        min_deletions = r - l + 1\n        \n        # Iterate over possible bit positions (0 to 19, since 2^20 > 2 * 10^5)\n        for bit_position in range(20):\n            # Count numbers with the current bit set\n            count_with_bit_set = 0\n            \n            for number in range(l, r + 1):\n                if number & (1 << bit_position):\n                    count_with_bit_set += 1\n            \n            # Calculate deletions needed to make the AND non-zero for this bit position\n            deletions_needed = (r - l + 1) - count_with_bit_set\n            \n            # Update the minimum deletions\n            min_deletions = min(min_deletions, deletions_needed)\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    \n    # Output interface\n    results = min_deletions_to_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to achieve a non-zero bitwise AND for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples where each tuple contains two integers l and r.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    \n    for l, r in test_cases:\n        # Initialize the minimum deletions to the maximum possible value\n        min_deletions = r - l + 1\n        \n        # Iterate over all possible bit positions\n        for bit_position in range(20):  # 20 bits are enough for numbers up to 2 * 10^5\n            # Calculate the mask for the current bit position\n            mask = 1 << bit_position\n            \n            # Count numbers in the range [l, r] that have the current bit set\n            count_set_bits = sum(1 for i in range(l, r + 1) if i & mask)\n            \n            # Calculate deletions needed to make the AND non-zero for this bit position\n            deletions = (r - l + 1) - count_set_bits\n            \n            # Update the minimum deletions\n            min_deletions = min(min_deletions, deletions)\n        \n        results.append(min_deletions)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    n = int(input())\n    \n    # Read each test case\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Get results for each test case\n    results = min_deletions_to_non_zero_and(n, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples, each containing two integers l and r.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Calculate the maximum number in the range [l, r]\n        max_num = r\n        # Calculate the number of bits in the maximum number\n        num_bits = max_num.bit_length()\n        \n        # Initialize the minimum deletions to the size of the range\n        min_deletions = r - l + 1\n        \n        # Iterate over each bit position\n        for bit in range(num_bits):\n            # Calculate the mask for the current bit position\n            mask = 1 << bit\n            # Count numbers in the range [l, r] that have the current bit set\n            count_set_bit = sum(1 for num in range(l, r + 1) if num & mask)\n            # Calculate deletions needed to make the AND non-zero for this bit position\n            deletions = (r - l + 1) - count_set_bit\n            # Update the minimum deletions\n            min_deletions = min(min_deletions, deletions)\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    \n    # Output interface\n    results = min_deletions_to_non_zero_and(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_for_non_zero_and(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        test_cases (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers l and r.\n\n    Returns:\n        List[int]: A list of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Initialize the minimum deletions to the maximum possible value\n        min_deletions = r - l + 1\n        \n        # Iterate over each possible number in the range [l, r]\n        for i in range(l, r + 1):\n            # Calculate the number of deletions required if we keep the number i\n            deletions = 0\n            for j in range(l, r + 1):\n                if (i & j) == 0:\n                    deletions += 1\n            # Update the minimum deletions\n            min_deletions = min(min_deletions, deletions)\n        \n        results.append(min_deletions)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = [tuple(map(int, input().strip().split())) for _ in range(t)]\n    results = min_deletions_for_non_zero_and(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples where each tuple contains two integers l and r.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Calculate the number of elements in the range [l, r]\n        num_elements = r - l + 1\n        \n        # Initialize the minimum deletions to the number of elements\n        min_deletions = num_elements\n        \n        # Iterate over possible bit positions\n        for bit_position in range(20):  # 20 is enough because r <= 2 * 10^5\n            # Calculate the mask for the current bit position\n            mask = 1 << bit_position\n            \n            # Count elements with the current bit set\n            count_with_bit_set = 0\n            for i in range(l, r + 1):\n                if i & mask:\n                    count_with_bit_set += 1\n            \n            # Calculate deletions needed to make the AND non-zero\n            deletions_needed = num_elements - count_with_bit_set\n            \n            # Update the minimum deletions\n            min_deletions = min(min_deletions, deletions_needed)\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = min_deletions_to_non_zero_and(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples where each tuple contains two integers l and r.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    \n    for l, r in test_cases:\n        # Calculate the number of elements in the range [l, r]\n        num_elements = r - l + 1\n        \n        # Initialize the minimum deletions to the number of elements\n        min_deletions = num_elements\n        \n        # Iterate over each possible bit position\n        for bit_position in range(20):  # 20 bits are enough for numbers up to 2 * 10^5\n            # Calculate the mask for the current bit position\n            mask = 1 << bit_position\n            \n            # Count numbers in the range [l, r] that have the current bit set\n            count_with_bit_set = 0\n            for number in range(l, r + 1):\n                if number & mask:\n                    count_with_bit_set += 1\n            \n            # Calculate deletions needed to make the AND non-zero for this bit position\n            deletions_for_this_bit = num_elements - count_with_bit_set\n            \n            # Update the minimum deletions\n            min_deletions = min(min_deletions, deletions_for_this_bit)\n        \n        # Append the result for this test case\n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = min_deletions_to_non_zero_and(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_for_non_zero_and(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        test_cases (List[Tuple[int, int]]): A list of tuples, each containing two integers l and r.\n\n    Returns:\n        List[int]: A list of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Calculate the number of elements in the range [l, r]\n        num_elements = r - l + 1\n        \n        # Initialize the minimum deletions to the number of elements\n        min_deletions = num_elements\n        \n        # Iterate over possible bit positions\n        for bit_position in range(20):  # 20 bits are enough for numbers up to 2 * 10^5\n            # Calculate the mask for the current bit position\n            mask = 1 << bit_position\n            \n            # Count how many numbers in the range have this bit set\n            count_with_bit_set = 0\n            for number in range(l, r + 1):\n                if number & mask:\n                    count_with_bit_set += 1\n            \n            # Calculate deletions needed if we want this bit to be set in the AND result\n            deletions_needed = num_elements - count_with_bit_set\n            \n            # Update the minimum deletions\n            min_deletions = min(min_deletions, deletions_needed)\n        \n        # Append the result for the current test case\n        results.append(min_deletions)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    \n    # Get results for each test case\n    results = min_deletions_for_non_zero_and(test_cases)\n    \n    # Print results\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef min_deletions_to_non_zero_and(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make the bitwise AND of the array non-zero.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int]]): List of tuples where each tuple contains two integers l and r.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of deletions for each test case.\n    \"\"\"\n    results = []\n    for l, r in test_cases:\n        # Calculate the number of elements in the range [l, r]\n        num_elements = r - l + 1\n        \n        # Initialize the minimum deletions to the number of elements\n        min_deletions = num_elements\n        \n        # Iterate over possible bit positions\n        for bit_position in range(20):  # 20 bits are enough for numbers up to 2 * 10^5\n            # Count numbers with the current bit set\n            count_with_bit_set = 0\n            for number in range(l, r + 1):\n                if number & (1 << bit_position):\n                    count_with_bit_set += 1\n            \n            # Calculate deletions needed to make the AND non-zero for this bit position\n            deletions_needed = num_elements - count_with_bit_set\n            min_deletions = min(min_deletions, deletions_needed)\n        \n        results.append(min_deletions)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = min_deletions_to_non_zero_and(n, test_cases)\nfor result in results:\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimum number of deletions to make the bitwise AND of a range of integers non-zero. The solution must efficiently handle up to 10,000 test cases with ranges up to 200,000, necessitating an algorithm that can quickly determine the optimal deletions.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently.\n- Ensure the solution handles edge cases and large inputs.\n- Optimize the algorithm for speed and memory usage.\n- Provide detailed comments and documentation for the code.\n- Create a user-friendly interface for input and output.\nWe will use a mathematical approach to determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a common bit set with all other numbers. We will leverage the properties of binary numbers and bitwise operations to efficiently compute the result for each test case.\n", "requirement analysis:\nThe problem requires understanding of bitwise operations and efficient handling of arrays with potentially large ranges. The solution must minimize deletions to achieve a non-zero bitwise AND result.\nrequirement pool:\n- Implement efficient bitwise operations to solve the problem\n- Ensure the solution handles large input sizes effectively\n- Optimize the algorithm for speed and accuracy\n- Provide clear documentation and comments in the code\n- Test the solution against edge cases and large datasets\nWe will use bitwise operations to efficiently determine the minimum number of deletions required to achieve a non-zero bitwise AND for the given range of integers. The key insight is to find the longest prefix of bits that are common across all numbers in the range [l, r]. This can be done by analyzing the binary representation of l and r and determining the number of bits that need to be adjusted to make the AND operation non-zero.\n", "requirement analysis:\nThe problem requires determining the minimum number of deletions needed to make the bitwise AND of a range of integers non-zero. This involves understanding the properties of bitwise operations and efficiently handling large input sizes. The solution must be optimized to handle up to 10,000 test cases with ranges up to 200,000.\nrequirement pool:\n- Develop an algorithm to calculate the minimum deletions for non-zero bitwise AND\n- Ensure the solution is optimized for large input sizes\n- Provide detailed comments and documentation for the code\n- Implement comprehensive test cases to validate the solution\n- Explore alternative algorithms for potential optimization\nWe will use a mathematical approach to determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a bit set in a position where all other numbers in the range have the same bit set. We will iterate over the range and calculate the number of deletions required by checking the bitwise properties of the numbers.\n", "requirement analysis:\nThe problem requires understanding of bitwise operations and efficient handling of large input sizes. The solution should minimize deletions to achieve a non-zero bitwise AND result.\nrequirement pool:\n- Implement efficient bitwise operations to solve the problem\n- Optimize the solution for handling large input sizes\n- Ensure accurate output for each test case\n- Provide clear documentation of the solution approach\n- Include edge case handling in the solution\nWe will use bitwise operations to efficiently determine the minimum number of deletions required to achieve a non-zero bitwise AND for the given range of integers. The approach involves analyzing the binary representation of numbers and identifying the common bits that can result in a non-zero AND. We will leverage Python's built-in bitwise operators and optimize the solution to handle large input sizes effectively.\n", "requirement analysis:\nThe problem requires determining the minimum number of deletions needed to make the bitwise AND of a range of integers non-zero. This involves understanding the properties of bitwise operations and efficiently handling large input sizes. The solution must be optimized to handle up to 10,000 test cases with ranges up to 200,000.\nrequirement pool:\n- Implement the main algorithm to solve the problem efficiently.\n- Ensure the solution handles edge cases and large inputs effectively.\n- Optimize the algorithm for performance and speed.\n- Provide detailed comments and documentation for the code.\n- Create a user-friendly interface for input and output.\nWe will use a mathematical approach to determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a bit set in a position where all other numbers in the range have the same bit set. We will leverage the properties of binary numbers and bitwise operations to efficiently compute the result for each test case.\n", "requirement analysis:\nThe problem requires determining the minimum number of deletions needed to make the bitwise AND of a range of integers non-zero. This involves understanding the properties of bitwise operations and efficiently handling large input sizes.\nrequirement pool:\n- Develop an algorithm to calculate the minimum deletions for non-zero bitwise AND\n- Ensure the solution is optimized for large input sizes\n- Provide detailed comments and documentation for the code\n- Implement comprehensive test cases to validate the solution\n- Explore alternative algorithms for potential improvements\nWe will iterate over each test case, generate the array from l to r, and calculate the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has all bits set in common with others. We will use bit manipulation to efficiently determine the minimum deletions required.\n", "requirement analysis:\nThe problem requires understanding of bitwise operations and efficient handling of large input sizes. The solution must ensure that the bitwise AND of the array is non-zero by deleting the minimum number of elements. The output format must be strictly followed.\nrequirement pool:\n- Implement efficient bitwise operations to solve the problem\n- Ensure the solution handles up to 10,000 test cases\n- Optimize for large ranges up to 200,000\n- Provide clear and concise output\n- Document the solution approach for future reference\nWe will use bitwise operations to efficiently determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key insight is to find the smallest number of elements that can be removed such that the remaining elements have a non-zero bitwise AND. We will leverage properties of binary numbers and bitwise operations to achieve this efficiently, especially for large ranges.\n", "requirement analysis:\nThe problem requires finding the minimum number of deletions to make the bitwise AND of a range of integers non-zero. This involves understanding the properties of bitwise operations and efficiently handling large input sizes.\nrequirement pool:\n- Develop the main algorithm to solve the problem efficiently.\n- Ensure the solution can handle the maximum constraints of the input size.\n- Optimize the solution for time complexity.\n- Provide detailed comments and documentation for the code.\n- Create test cases to validate the solution.\nWe will use a mathematical approach to determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has a non-zero bit in a position where all other numbers have zero bits. We will iterate over the range and calculate the bitwise AND, keeping track of the minimum number of deletions required.\n", "requirement analysis:\nThe problem requires determining the minimum number of deletions needed to make the bitwise AND of a range of integers non-zero. This involves understanding the properties of bitwise operations and efficiently handling large input sizes.\nrequirement pool:\n- Develop an algorithm to calculate the minimum deletions for non-zero bitwise AND\n- Ensure the solution is optimized for large input ranges\n- Provide detailed comments and documentation for the code\n- Implement comprehensive test cases to validate the solution\n- Explore alternative algorithms for potential improvements\nWe will iterate over each test case, and for each range [l, r], we will determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is non-zero if there exists a number in the range that has all bits set in common with others. We will use bit manipulation to efficiently determine the minimum deletions required.\n", "requirement analysis:\nThe problem requires understanding of bitwise operations and efficient handling of large input sizes. The solution must determine the minimum number of deletions needed to achieve a non-zero bitwise AND for each test case.\nrequirement pool:\n- Implement efficient bitwise operations to solve the problem.\n- Ensure the solution can handle up to 10,000 test cases.\n- Optimize the solution for large ranges of integers.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge cases.\nWe will use bitwise operations to efficiently determine the minimum number of deletions required to make the bitwise AND of the array non-zero. The key observation is that the bitwise AND of a range of numbers is zero if there exists a number in the range that has a bit set to zero in all other numbers. We will iterate over the range and check the bitwise AND of subsets to find the minimum deletions required.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 331, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains two integers l and r (1 \u2264 l \u2264 r \u2264 2 \u22c5 10^5) \u2014 the description of the array.\n\nOutput\n\nFor each test case, output a single integer \u2014 the answer to the problem.\n\nExample\n\nInput\n\n\n5\n1 2\n2 8\n4 5\n1 5\n100000 200000\n\n\nOutput\n\n\n1\n3\n0\n2\n31072\n\nNote\n\nIn the first test case, the array is [1, 2]. Currently, the bitwise AND is 0, as 1\\ \\& \\ 2 = 0. However, after deleting 1 (or 2), the array becomes [2] (or [1]), and the bitwise AND becomes 2 (or 1). This can be proven to be the optimal, so the answer is 1.\n\nIn the second test case, the array is [2, 3, 4, 5, 6, 7, 8]. Currently, the bitwise AND is 0. However, after deleting 4, 5, and 8, the array becomes [2, 3, 6, 7], and the bitwise AND becomes 2. This can be proven to be the optimal, so the answer is 3. Note that there may be other ways to delete 3 elements.", "mutate_method": "condense_two2one", "parent_index": 117}
