{"name": "1579_D. Productive Meeting", "description": "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several (as many as they want) times per meeting.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "tags": ["constructive algorithms", "graphs", "greedy"], "difficulty": 10, "id": 1579, "sample_io": [{"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}], "test_list": [{"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n7\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 1 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 3\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n2 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 1 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n3\n1 2\n1 2\n1 4\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 1\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["0\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n1 1 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 0\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n2\n2 3\n1 2\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 1\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 4\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 2\n5\n8 4 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 2\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 -1 0\n5\n5 0 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 5\n1 5\n1 5\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n0\n"]}, {"input": "8\n2\n1 3\n3\n0 0 5\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 10\n", "output": ["1\n2 1\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 1\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 1\n5\n6 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 0\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -2 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 0 2\n5\n5 3 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 2\n1 5\n1 2\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 1 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 1\n3 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n2\n2 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 5\n1 5\n1 2\n5 1\n2 4\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 0 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 2\n3 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 1 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 2\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 5 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 3 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 2\n3 4\n2 3\n4 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 4 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n3 4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n0 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 1 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n1\n3 2\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 2 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n2\n5 2\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 1 1 1\n5\n0 1 0 0 6\n", "output": ["0\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 3\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 3 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 3\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 4\n"]}, {"input": "8\n2\n2 3\n3\n1 2 0\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n2 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n2 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 1 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 1 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 4\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 1\n4\n1 4 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n2 4\n2 4\n2 4\n1 2\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n1 2 2 4\n3\n0 0 2\n2\n5 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n1 1 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n0 0 2\n2\n12 0\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n0\n0\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 2 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 8\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 1 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n0 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n0\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 2 0 1 1\n5\n0 1 0 0 0\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 1 4\n5\n13 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n1\n3 2\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 1 2 5\n3\n1 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 3\n4 1\n4 2\n4 3\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 1\n5\n5 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 1 4\n3\n0 0 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -2 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n3\n4 2\n4 2\n4 3\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n1 5\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 4\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 0 2\n5\n5 2 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 3 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 0\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n0 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 4 0 1 1\n5\n0 1 0 1 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 1 2\n5\n5 3 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n1\n3 2\n6\n1 5\n1 2\n1 5\n1 2\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 4\n4\n1 1 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n3\n3 1\n3 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 9\n", "output": ["1\n2 1\n2\n2 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 5\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n5 1\n5 1\n5 1\n2 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n2 1 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n1\n1 2\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n2 0 0\n2\n12 0\n3\n-1 0 0\n5\n1 4 -1 1 4\n5\n1 0 1 0 10\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n5\n2 5\n2 5\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n0 2 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n3\n5 2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 2 3\n4\n1 1 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 2\n3 2\n4\n4 3\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 7\n3\n0 0 2\n2\n6 3\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n6\n4 3\n4 2\n4 3\n4 1\n4 2\n4 3\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 1 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 2\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n12 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 5 4\n3\n0 0 2\n2\n6 0\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n0\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 0\n5\n8 3 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 3\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n1 1 0 0 1\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n1 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n0\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n0 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 8\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n9\n5 1\n5 1\n5 2\n5 1\n5 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 1 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n2\n3 1\n2 3\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 0 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n6 3\n3\n1 0 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 2\n3\n1 0 2\n5\n8 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n1\n3 1\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n1 2 2 4\n3\n0 0 2\n2\n5 2\n3\n0 0 2\n5\n8 2 0 1 3\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 1\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n3 1\n3 2\n3 1\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 2\n2\n12 4\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n4\n1 2\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 5\n3\n0 0 3\n4\n0 2 2 8\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n2 1\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 3\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n2 2 1 4\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n14 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 1\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 4 0 1 1\n5\n0 1 0 0 0\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 1 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n0 0 5\n4\n1 2 2 4\n3\n0 0 0\n2\n16 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 10\n", "output": ["1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 1\n3\n0 0 4\n5\n13 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n1\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 4\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n1 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 1\n3\n0 0 2\n5\n5 2 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n1\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 3 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 1\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n1 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 1 2\n5\n5 3 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n1\n3 2\n7\n1 5\n1 2\n1 5\n1 2\n4 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 4\n4\n1 1 3 1\n3\n1 0 0\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n3\n3 1\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 5\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n5 1\n5 1\n5 1\n2 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 3 2 4\n3\n2 1 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 2\n3 4\n2 3\n1\n1 2\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n1 3\n3\n0 2 3\n4\n1 1 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n2\n3 2\n3 2\n4\n4 3\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 0 7\n3\n0 0 2\n2\n6 3\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n3\n4 2\n4 1\n4 2\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 4\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 5 4\n3\n0 0 2\n2\n12 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 0\n5\n12 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 3\n4\n2 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 3\n2 3\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 5\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n0\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 2 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n1 2\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}], "task_id": "codecontest/16", "prompt": "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private, and the same two people can talk several (as many as they want) times per meeting. Each person has limited sociability; the sociability of the i-th person is a non-negative integer a_i, which means that after exactly a_i talks this person leaves the meeting and if a_i = 0, the i-th person leaves the meeting immediately after it starts. A meeting is considered most productive if the maximum possible number of talks took place during it. You are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible. Ensure the solution is optimal in terms of computational efficiency. Consider edge cases, such as when multiple people have the same sociability value.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "repair_prompt": ["An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private, and the same two people can talk several (as many as they want) times per meeting. Each person has limited sociability; the sociability of the i-th person is a non-negative integer a_i, which means that after exactly a_i talks this person leaves the meeting and if a_i = 0, the i-th person leaves the meeting immediately after it starts. A meeting is considered most productive if the maximum possible number of talks took place during it. You are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible. Ensure the solution is optimal in terms of computational efficiency. Consider edge cases, such as when multiple people have the same sociability value.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2"], "completions": ["from typing import List\n## main.py\n\nfrom heapq import heappush, heappop\n\ndef maximize_talks(t: int, test_cases: list) -> list:\n    \"\"\"Maximize the number of talks in a meeting using a greedy algorithm.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of people\n                           and their sociability values.\n\n    Returns:\n        list: A list of results for each test case, where each result is a tuple\n              containing the number of talks and a list of pairs of people who talked.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq\n        max_heap = []\n        for i, s in enumerate(sociability):\n            if s > 0:\n                heappush(max_heap, (-s, i + 1))  # Store negative sociability and 1-based index\n\n        talks = []\n        while len(max_heap) > 1:\n            # Pop two most sociable people\n            s1, p1 = heappop(max_heap)\n            s2, p2 = heappop(max_heap)\n\n            # Record the talk\n            talks.append((p1, p2))\n\n            # Decrease their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heappush(max_heap, (s1 + 1, p1))\n            if s2 + 1 < 0:\n                heappush(max_heap, (s2 + 1, p2))\n\n        results.append((len(talks), talks))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        print(result[0])  # number of talks\n        for talk in result[1]:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting by pairing people with the highest sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, each containing the number of talks and the pairs of people who talked.\n    \"\"\"\n    results = []\n\n    for n, a in test_cases:\n        # Create a max-heap using negative values to simulate max-heap behavior\n        max_heap = []\n        for i in range(n):\n            if a[i] > 0:\n                heapq.heappush(max_heap, (-a[i], i + 1))  # Store negative sociability and 1-based index\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract two people with the highest sociability\n            neg_sociability1, person1 = heapq.heappop(max_heap)\n            neg_sociability2, person2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((person1, person2))\n\n            # Decrease their sociability and push back if they can still talk\n            if neg_sociability1 + 1 < 0:\n                heapq.heappush(max_heap, (neg_sociability1 + 1, person1))\n            if neg_sociability2 + 1 < 0:\n                heapq.heappush(max_heap, (neg_sociability2 + 1, person2))\n\n        # Append the result for this test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n\n    # Output interface\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs of people who talked.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(heap)\n\n        talks = []\n        while len(heap) > 1:\n            # Extract two people with the highest sociability\n            s1, p1 = heapq.heappop(heap)\n            s2, p2 = heapq.heappop(heap)\n\n            # Record the talk\n            talks.append((p1, p2))\n\n            # Decrease their sociability and push them back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(heap, (s1 + 1, p1))\n            if s2 + 1 < 0:\n                heapq.heappush(heap, (s2 + 1, p2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of people and their sociability scores.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: For each test case, returns the maximum\n            number of talks and the pairs of people who will talk.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract two people with the highest sociability\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrease their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for this test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Output results\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        print(result[0])  # number of talks\n        for talk in result[1]:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"Maximize the number of talks in a meeting by pairing the most sociable people.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[List[Tuple[int, int]]]: List of results for each test case, where each result is a list of pairs of people who will talk.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n\n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrease their sociability and push them back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        results.append(talks)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Call the function\n    results = maximize_talks(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(len(result))\n        for i, j in result:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs of people who talked.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(heap)\n\n        talks = []\n        while len(heap) > 1:\n            # Extract two people with the highest sociability\n            s1, p1 = heapq.heappop(heap)\n            s2, p2 = heapq.heappop(heap)\n\n            # Record the talk\n            talks.append((p1, p2))\n\n            # Decrease their sociability and push them back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(heap, (s1 + 1, p1))\n            if s2 + 1 < 0:\n                heapq.heappush(heap, (s2 + 1, p2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting by pairing people with the highest sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs of people who talked.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap using negative values to simulate a priority queue\n        heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(heap)\n\n        talks = []\n        while len(heap) > 1:\n            # Extract two people with the highest sociability\n            s1, p1 = heapq.heappop(heap)\n            s2, p2 = heapq.heappop(heap)\n\n            # Record the talk\n            talks.append((p1, p2))\n\n            # Decrease their sociability and reinsert them if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(heap, (s1 + 1, p1))\n            if s2 + 1 < 0:\n                heapq.heappush(heap, (s2 + 1, p2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and pairs of people who talked.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(heap)\n\n        talks = []\n\n        while len(heap) > 1:\n            # Extract two people with the highest sociability\n            s1, p1 = heapq.heappop(heap)\n            s2, p2 = heapq.heappop(heap)\n\n            # Record the talk\n            talks.append((p1, p2))\n\n            # Decrease their sociability and reinsert them into the heap if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(heap, (s1 + 1, p1))\n            if s2 + 1 < 0:\n                heapq.heappush(heap, (s2 + 1, p2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Call the function\n    results = maximize_talks(t, test_cases)\n\n    # Output interface\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability of participants.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of participants and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs of participants.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative sociability values to simulate a priority queue\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract two most sociable participants\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrease their sociability and reinsert them if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Call the function\n    results = maximize_talks(t, test_cases)\n\n    # Output interface\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\n# Ensure the main function is called when the script is executed\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs of people talking.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        talks = []\n        total_talks = 0\n\n        # Create a list of tuples (sociability, index) and sort it in descending order\n        people = sorted([(s, i + 1) for i, s in enumerate(sociability)], reverse=True)\n\n        while len(people) > 1 and people[0][0] > 0 and people[1][0] > 0:\n            # Pair the two people with the highest sociability\n            person1 = people[0]\n            person2 = people[1]\n\n            # Record the talk\n            talks.append((person1[1], person2[1]))\n            total_talks += 1\n\n            # Decrease their sociability\n            people[0] = (person1[0] - 1, person1[1])\n            people[1] = (person2[0] - 1, person2[1])\n\n            # Re-sort the list to maintain the order\n            people.sort(reverse=True)\n\n        results.append((total_talks, talks))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement is to determine the optimal pairing of people in a meeting to maximize the number of talks, considering each person's sociability. The solution must be efficient given the constraints on input size and sociability values. Edge cases, such as multiple people having the same sociability, must be handled effectively.\nrequirement pool:\n- Develop an algorithm to maximize the number of talks based on sociability.\n- Ensure the solution is computationally efficient for large inputs.\n- Handle edge cases where multiple people have the same sociability.\n- Provide clear output format as specified in the requirements.\n- Consider user-friendly error messages for invalid inputs.\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two people with the highest remaining sociability until no more valid pairs can be formed. This approach ensures that we maximize the number of talks efficiently. We will use a priority queue (max-heap) to keep track of the sociability of each person, which allows us to efficiently retrieve and update the most sociable individuals.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks during a meeting while ensuring computational efficiency. The solution must handle edge cases, such as multiple people having the same sociability value, and large input sizes efficiently.\nrequirement pool:\n- Maximize the number of talks in the meeting.\n- Ensure computational efficiency for large inputs.\n- Handle edge cases effectively, such as multiple people with the same sociability.\n- Provide flexibility in choosing pairs for talks.\n- Offer multiple valid solutions if possible.\nWe will use a greedy approach to maximize the number of talks. The idea is to always pair the two people with the highest remaining sociability values until no more talks can be made. This ensures that the most sociable people are utilized to their maximum potential. We will use a priority queue (max-heap) to efficiently retrieve the two people with the highest sociability values. Python's heapq library can be used for this purpose, but since it provides a min-heap, we will store negative values to simulate a max-heap.\n", "requirement analysis:\nThe problem requires determining the optimal pairing of people in a meeting to maximize the number of talks, considering each person's sociability. The solution must be efficient given the constraints on input size and sociability values. Edge cases, such as multiple people with the same sociability, must be handled effectively.\nrequirement pool:\n- Develop an algorithm to maximize the number of talks.\n- Ensure the solution is computationally efficient.\n- Handle edge cases, such as identical sociability values.\n- Provide clear and correct output format.\n- Optimize for large input sizes.\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two people with the highest remaining sociability until no more talks can be made. This approach ensures computational efficiency and handles edge cases effectively, such as when multiple people have the same sociability value. We will use a priority queue (heap) to efficiently manage and retrieve the people with the highest sociability.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks during a meeting while ensuring computational efficiency. The solution must handle large inputs and edge cases, such as participants with the same sociability values or zero sociability.\nrequirement pool:\n- Maximize the number of talks in the meeting.\n- Ensure computational efficiency for large inputs.\n- Handle edge cases effectively, including zero sociability.\n- Provide flexibility in choosing pairs for talks.\n- Optimize the solution for multiple test cases.\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two people with the highest remaining sociability until no more talks can be made. This approach ensures that we are always making the most productive use of the remaining sociability. We will use a max-heap (priority queue) to efficiently get the two people with the highest sociability at each step. The heap operations will ensure computational efficiency, especially given the constraints.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks while ensuring computational efficiency. Edge cases, such as multiple people with the same sociability value, must be handled effectively. The solution should be optimal given the constraints on input size and sociability values.\nrequirement pool:\n- Maximize the number of talks in the meeting.\n- Ensure the solution is computationally efficient.\n- Handle edge cases, such as multiple people with the same sociability value.\n- Provide clear output format as specified.\n- Allow flexibility in choosing pairs for talks.\nWe will use a greedy approach to maximize the number of talks. The idea is to always pair the two most sociable people available, as this will maximize the number of talks. We will use a max-heap (priority queue) to efficiently retrieve the two people with the highest sociability. This approach ensures computational efficiency and handles edge cases effectively.\n", "requirement analysis:\nThe main requirement is to determine the optimal pairing of people for talks to maximize the number of interactions in a meeting. The solution must be efficient given the constraints on the number of people and their sociability. Edge cases, such as multiple people having the same sociability or some having zero sociability, must be handled effectively.\nrequirement pool:\n- Develop an algorithm to maximize the number of talks.\n- Ensure the solution is computationally efficient.\n- Handle edge cases such as zero sociability effectively.\n- Provide clear output format as specified.\n- Allow flexibility in choosing which pairs talk.\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two people with the highest remaining sociability until no more talks can be made. This approach ensures computational efficiency and handles edge cases effectively, such as when multiple people have the same sociability or some have zero sociability. We will use a priority queue (heap) to efficiently manage and retrieve the people with the highest sociability.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks while ensuring computational efficiency. Edge cases, such as participants with zero sociability, must be handled effectively. The solution should be able to process large inputs within the given constraints.\nrequirement pool:\n- Maximize the number of talks in the meeting.\n- Ensure computational efficiency for large inputs.\n- Handle edge cases like zero sociability.\n- Provide multiple valid solutions if possible.\n- Optimize for scenarios with multiple participants having the same sociability.\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two people with the highest remaining sociability until no more talks can be made. This approach ensures computational efficiency and handles edge cases effectively. We will use a priority queue (heap) to efficiently manage and retrieve the people with the highest sociability.\n", "requirement analysis:\nThe main requirement is to determine the optimal pairing of people for talks in a meeting to maximize the number of interactions. The solution must be computationally efficient given the constraints on the number of people and their sociability. Edge cases, such as multiple people having the same sociability value or some having zero sociability, must be handled effectively.\nrequirement pool:\n- Develop an algorithm to maximize the number of talks in a meeting.\n- Ensure the solution is computationally efficient for large inputs.\n- Handle edge cases such as zero sociability and duplicate sociability values.\n- Provide clear and detailed output for each test case.\n- Allow flexibility in choosing different optimal solutions if multiple exist.\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two people with the highest remaining sociability until no more talks can be made. This approach ensures that we are always making the most productive use of the remaining sociability. We will use a max-heap (priority queue) to efficiently retrieve the two people with the highest sociability at each step. The heap operations will ensure that the solution is computationally efficient, even for large inputs.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks during a meeting while ensuring computational efficiency. The solution must handle edge cases, such as participants with zero sociability, and provide optimal pairings for talks.\nrequirement pool:\n- Maximize the number of talks in each meeting.\n- Ensure the solution is computationally efficient.\n- Handle edge cases, such as zero sociability.\n- Provide optimal pairings for talks.\n- Allow flexibility in output format for multiple valid solutions.\nWe will use a greedy approach to maximize the number of talks. By sorting the participants based on their sociability, we can pair the most sociable individuals first, ensuring the maximum number of talks. We will use a priority queue to efficiently manage and update the sociability of participants after each talk. This approach ensures computational efficiency and handles edge cases effectively.\n", "requirement analysis:\nThe main requirement is to determine the maximum number of talks possible in a meeting given the sociability constraints of each participant. The solution must be efficient due to the large possible input size, and it should handle edge cases such as participants with zero sociability or multiple participants with the same sociability value.\nrequirement pool:\n- Determine the maximum number of talks possible.\n- Ensure the solution is computationally efficient.\n- Handle edge cases effectively, such as zero sociability.\n- Provide flexibility in choosing pairs for talks.\n- Optimize for scenarios with large numbers of participants.\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two people with the highest remaining sociability until no more talks can be made. This approach ensures computational efficiency and handles edge cases effectively, such as participants with zero sociability.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 216, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "mutate_method": "condense_two2one", "parent_index": 129}
