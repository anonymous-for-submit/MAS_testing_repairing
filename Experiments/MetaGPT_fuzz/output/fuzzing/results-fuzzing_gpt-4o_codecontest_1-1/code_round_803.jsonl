{"name": "1620_B. Triangles on a Rectangle", "description": "A rectangle with its opposite corners in (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\n\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "tags": ["geometry", "greedy", "math"], "difficulty": 8, "id": 1620, "sample_io": [{"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}], "test_list": [{"input": "1\n99 99\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["99\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["25\n70\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n78\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n77\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "1\n99 164\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["164\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n49\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 7\n2 2 4\n", "output": ["25\n42\n88\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["20\n70\n44\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n112\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 4\n", "output": ["25\n42\n210\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n49\n66\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["25\n42\n66\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n91\n42\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n77\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n18 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n126\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n63\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n72\n"]}, {"input": "3\n5 8\n2 1 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n70\n"]}, {"input": "1\n198 164\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["198\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n63\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 8\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n48\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 3 5 6\n25 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n75\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n70\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 1 10\n3 0 3 7\n2 2 4\n", "output": ["30\n42\n77\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 1\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n33\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n117\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n22 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n49\n132\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["45\n42\n66\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["45\n63\n66\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n182\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["32\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n17 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n51\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 8 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 7\n", "output": ["25\n70\n55\n"]}, {"input": "3\n4 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 4 4\n", "output": ["24\n117\n77\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["25\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n20 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 1 5 6\n11 5\n3 1 2 8\n3 2 1 10\n3 0 3 7\n2 2 4\n", "output": ["30\n50\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n56\n210\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 5 5\n20 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n84\n60\n"]}, {"input": "3\n2 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["24\n56\n210\n"]}, {"input": "1\n99 99\n2 1 2\n2 0 4\n2 5 6\n2 7 8\n", "output": ["396\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 7\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["40\n42\n77\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n20 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n60\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["75\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 13\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n156\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["24\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 9\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n54\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 16\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n60\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 6\n", "output": ["32\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 2\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n49\n33\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 1 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 7\n2 2 4\n", "output": ["25\n56\n88\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 11\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["50\n42\n77\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 2\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["24\n42\n77\n"]}, {"input": "3\n5 24\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 4\n", "output": ["48\n42\n210\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["25\n49\n66\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 7\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n33\n"]}, {"input": "3\n5 8\n2 1 5\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["32\n91\n42\n"]}, {"input": "3\n5 8\n2 1 4\n3 1 3 4\n3 0 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["30\n42\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["24\n70\n44\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n18 7\n2 5 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n54\n35\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n21 1\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n63\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 8\n2 2 4\n", "output": ["45\n42\n77\n"]}, {"input": "3\n10 8\n2 1 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 2 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["50\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 0\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 3\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n63\n33\n"]}, {"input": "3\n5 12\n2 2 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 16\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n84\n77\n"]}, {"input": "3\n5 8\n2 1 7\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["48\n42\n35\n"]}, {"input": "3\n5 9\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 3 5 6\n25 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["27\n42\n75\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 2\n3 7 5 6\n9 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n42\n90\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 10\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n60\n182\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 4\n2 4 4\n", "output": ["40\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 8\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 8 3\n20 5\n3 1 12 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["35\n84\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 16\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["20\n42\n75\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 6\n3 1 4 6\n2 4 5\n0 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["32\n42\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n42\n121\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 12\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n72\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 0 4\n", "output": ["20\n70\n77\n"]}, {"input": "3\n5 8\n2 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n78\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["25\n70\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 8\n2 4 2\n10 7\n2 0 4\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["35\n42\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 15\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n84\n72\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 4\n2 2 4\n", "output": ["24\n70\n55\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 4 9\n2 2 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n35\n77\n"]}, {"input": "3\n5 12\n2 2 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 4 16\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["45\n84\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 5\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 8 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 4 4\n2 2 4\n", "output": ["20\n70\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 0\n1 7\n2 3 9\n2 1 14\n3 1 3 5\n3 4 5 11\n16 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n112\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 10\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["30\n70\n182\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 2 7\n3 1 3 1\n3 4 5 5\n17 5\n3 1 6 8\n3 4 6 8\n3 1 3 3\n2 2 4\n", "output": ["25\n35\n35\n"]}, {"input": "3\n1 12\n2 1 6\n3 2 4 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 8\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 1\n", "output": ["60\n42\n112\n"]}, {"input": "3\n3 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 20\n2 2 3\n", "output": ["24\n56\n420\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 0 4 6\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 5 5\n20 5\n3 2 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n84\n60\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 0 6 8\n3 3 6 8\n3 2 4 4\n2 4 4\n", "output": ["40\n49\n80\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 8 3\n20 5\n3 1 12 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["75\n84\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 3 17\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 10 8\n3 1 3 4\n2 2 4\n", "output": ["75\n98\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n108\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n56\n33\n"]}, {"input": "3\n5 17\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 15\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["68\n84\n72\n"]}, {"input": "3\n9 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 4 9\n2 2 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["45\n35\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 9\n2 8 5\n10 7\n2 3 3\n2 1 11\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["40\n70\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 6 5 6\n11 6\n3 1 6 8\n3 3 6 8\n3 2 2 2\n2 2 4\n", "output": ["32\n42\n42\n"]}, {"input": "3\n5 8\n2 1 1\n3 1 3 4\n3 1 4 6\n2 4 0\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 7 8\n3 1 3 4\n2 2 7\n", "output": ["25\n63\n55\n"]}, {"input": "1\n53 164\n2 1 2\n2 0 4\n2 5 6\n2 9 8\n", "output": ["656\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n1 8\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 3 5\n3 0 3 3\n2 2 4\n", "output": ["24\n48\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 0 6\n2 4 5\n18 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n54\n121\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 2 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n108\n30\n"]}, {"input": "3\n5 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n13 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n56\n39\n"]}, {"input": "3\n5 17\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 28\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["68\n175\n72\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 9\n2 8 5\n10 7\n2 3 3\n2 1 15\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["40\n98\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 0 3 4\n3 1 4 3\n2 4 7\n10 7\n2 3 4\n2 1 7\n3 1 0 4\n3 1 5 6\n11 5\n3 1 6 8\n3 3 2 8\n3 0 3 3\n2 2 5\n", "output": ["32\n50\n35\n"]}, {"input": "3\n1 12\n2 1 6\n3 2 4 4\n3 1 4 7\n2 4 5\n10 7\n2 3 1\n2 1 7\n3 1 3 4\n3 7 5 6\n16 8\n3 1 6 8\n3 3 11 8\n3 0 3 13\n2 2 1\n", "output": ["60\n42\n208\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n19 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 6 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 7\n2 4 4\n", "output": ["25\n76\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 0 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 2 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 14\n3 4 6 1\n3 0 3 3\n2 2 4\n", "output": ["32\n42\n65\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 0\n3 1 4 6\n2 4 1\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n8 4\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 0 4\n", "output": ["25\n42\n32\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 0 6\n2 4 5\n18 7\n2 3 15\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n84\n121\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 7\n3 4 5 6\n11 5\n3 1 6 0\n3 3 10 8\n3 2 5 4\n2 2 6\n", "output": ["32\n60\n44\n"]}, {"input": "3\n10 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n13 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["50\n56\n39\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 10\n3 0 3 8\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 5\n3 1 3 7\n2 2 4\n", "output": ["25\n80\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 11\n2 8 5\n10 7\n2 3 3\n2 1 15\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["50\n98\n35\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n19 7\n2 3 10\n2 1 7\n3 -1 3 4\n3 4 6 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 7\n2 4 4\n", "output": ["25\n95\n70\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n20 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 0 6 8\n3 3 6 8\n3 2 4 4\n2 4 1\n", "output": ["40\n80\n80\n"]}, {"input": "1\n53 202\n2 1 2\n2 0 4\n2 3 6\n2 9 8\n", "output": ["808\n"]}, {"input": "3\n5 4\n2 1 4\n3 0 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 2 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 14\n3 4 6 1\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n65\n"]}, {"input": "3\n5 13\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n4 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 2 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["39\n108\n30\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 1 4\n3 7 5 6\n16 6\n3 2 6 0\n3 3 11 8\n3 0 3 6\n2 2 1\n", "output": ["36\n42\n96\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 10\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 8\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n77\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 0\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 3\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 3 5 6\n14 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 8\n2 1 1\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 1 10\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n78\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 0 4\n3 4 5 6\n11 5\n3 1 6 12\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 6\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n2 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 6 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 8 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 3\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 0 6 8\n3 0 3 4\n2 2 0\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 5\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["20\n70\n44\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 3\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n112\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n42\n210\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n12 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 6\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 0 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 11 8\n3 1 6 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 0 4\n3 1 8 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 5\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n77\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 6 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n18 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n126\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 0 2\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n63\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["32\n42\n70\n"]}], "task_id": "codecontest/148", "prompt": "A rectangle with its opposite corners at (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane. You are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. The points are positioned such that none of them occupies a corner. This arrangement ensures observations exclusively from the sides. There are at least two points on every side of a rectangle. Your task is to choose three points so that: \n\n  * exactly two of them are on the same side of a rectangle; \n  * the area of a triangle formed by them is as large as possible. \n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "repair_prompt": ["A rectangle with its opposite corners at (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane. You are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. The points are positioned such that none of them occupies a corner. This arrangement ensures observations exclusively from the sides. There are at least two points on every side of a rectangle. Your task is to choose three points so that: \n\n  * exactly two of them are on the same side of a rectangle; \n  * the area of a triangle formed by them is as large as possible. \n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6)."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): List of test cases, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x_coords_top (List[int]): X coordinates of points on the top side.\n            - x_coords_bottom (List[int]): X coordinates of points on the bottom side.\n            - y_coords_left (List[int]): Y coordinates of points on the left side.\n            - y_coords_right (List[int]): Y coordinates of points on the right side.\n\n    Returns:\n        List[int]: List of doubled maximum areas for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x_coords_top, x_coords_bottom, y_coords_left, y_coords_right in test_cases:\n        # Calculate maximum doubled area for horizontal sides\n        max_area_horizontal_top = (x_coords_top[-1] - x_coords_top[0]) * h\n        max_area_horizontal_bottom = (x_coords_bottom[-1] - x_coords_bottom[0]) * h\n\n        # Calculate maximum doubled area for vertical sides\n        max_area_vertical_left = (y_coords_left[-1] - y_coords_left[0]) * w\n        max_area_vertical_right = (y_coords_right[-1] - y_coords_right[0]) * w\n\n        # Determine the maximum doubled area\n        max_doubled_area = max(max_area_horizontal_top, max_area_horizontal_bottom,\n                               max_area_vertical_left, max_area_vertical_right)\n\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        w, h = map(int, input().split())\n        k_top = int(input())\n        x_coords_top = list(map(int, input().split()))\n        k_bottom = int(input())\n        x_coords_bottom = list(map(int, input().split()))\n        k_left = int(input())\n        y_coords_left = list(map(int, input().split()))\n        k_right = int(input())\n        y_coords_right = list(map(int, input().split()))\n        test_cases.append((w, h, x_coords_top, x_coords_bottom, y_coords_left, y_coords_right))\n\n    # Output interface\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples where each tuple contains:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): x-coordinates of points on the bottom side (y=0).\n            - x2 (List[int]): x-coordinates of points on the top side (y=h).\n            - y1 (List[int]): y-coordinates of points on the left side (x=0).\n            - y2 (List[int]): y-coordinates of points on the right side (x=w).\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area of the triangle for each test case.\n    \"\"\"\n    results = []\n    \n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base and height for triangles\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n        max_height_left = y1[-1] - y1[0]\n        max_height_right = y2[-1] - y2[0]\n        \n        # Calculate doubled area for each possible triangle configuration\n        max_area_bottom = max_base_bottom * h\n        max_area_top = max_base_top * h\n        max_area_left = max_height_left * w\n        max_area_right = max_height_right * w\n        \n        # Determine the maximum doubled area\n        max_doubled_area = max(max_area_bottom, max_area_top, max_area_left, max_area_right)\n        \n        results.append(max_doubled_area)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Output interface\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            Each test case contains:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: List of maximum doubled areas for each test case.\n    \"\"\"\n    results = []\n    \n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum doubled area for horizontal sides\n        max_area_horizontal = max(\n            (x1[-1] - x1[0]) * h,  # Bottom side\n            (x2[-1] - x2[0]) * h   # Top side\n        )\n        \n        # Calculate maximum doubled area for vertical sides\n        max_area_vertical = max(\n            (y1[-1] - y1[0]) * w,  # Left side\n            (y2[-1] - y2[0]) * w   # Right side\n        )\n        \n        # The maximum doubled area is the maximum of the two calculated areas\n        results.append(max(max_area_horizontal, max_area_vertical))\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Output interface\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): List of test cases, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: List of doubled maximum areas for each test case.\n    \"\"\"\n    results = []\n    \n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum doubled area for each side combination\n        max_area = 0\n        \n        # Bottom side (y=0) and top side (y=h)\n        max_area = max(max_area, (x1[-1] - x1[0]) * h)\n        max_area = max(max_area, (x2[-1] - x2[0]) * h)\n        \n        # Left side (x=0) and right side (x=w)\n        max_area = max(max_area, (y1[-1] - y1[0]) * w)\n        max_area = max(max_area, (y2[-1] - y2[0]) * w)\n        \n        results.append(max_area)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the doubled maximum area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of test cases, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: A list of doubled maximum areas for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base for horizontal sides\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n\n        # Calculate maximum base for vertical sides\n        max_base_left = y1[-1] - y1[0]\n        max_base_right = y2[-1] - y2[0]\n\n        # Calculate doubled area for each configuration\n        max_area_horizontal = max(max_base_bottom * h, max_base_top * h)\n        max_area_vertical = max(max_base_left * w, max_base_right * w)\n\n        # The maximum doubled area for this test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    test_cases = []\n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n\n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n\n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Output interface\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): x-coordinates of points on the bottom side.\n            - x2 (List[int]): x-coordinates of points on the top side.\n            - y1 (List[int]): y-coordinates of points on the left side.\n            - y2 (List[int]): y-coordinates of points on the right side.\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base for horizontal sides\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n        \n        # Calculate maximum base for vertical sides\n        max_base_left = y1[-1] - y1[0]\n        max_base_right = y2[-1] - y2[0]\n        \n        # Calculate maximum doubled area for each possible configuration\n        max_area_horizontal = max(max_base_bottom, max_base_top) * h\n        max_area_vertical = max(max_base_left, max_base_right) * w\n        \n        # Determine the maximum doubled area for this test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        \n        # Append the result for this test case\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Call the function and print results\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): x-coordinates of points on the bottom side.\n            - x2 (List[int]): x-coordinates of points on the top side.\n            - y1 (List[int]): y-coordinates of points on the left side.\n            - y2 (List[int]): y-coordinates of points on the right side.\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base for horizontal sides\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n        \n        # Calculate maximum base for vertical sides\n        max_base_left = y1[-1] - y1[0]\n        max_base_right = y2[-1] - y2[0]\n        \n        # Calculate doubled area for each possible triangle configuration\n        max_area_horizontal = max(max_base_bottom * h, max_base_top * h)\n        max_area_vertical = max(max_base_left * w, max_base_right * w)\n        \n        # The maximum doubled area for this test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        \n        # Append the result for this test case\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Output interface\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): x-coordinates of points on the bottom side.\n            - x2 (List[int]): x-coordinates of points on the top side.\n            - y1 (List[int]): y-coordinates of points on the left side.\n            - y2 (List[int]): y-coordinates of points on the right side.\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum distance on each side\n        max_x1 = x1[-1] - x1[0]\n        max_x2 = x2[-1] - x2[0]\n        max_y1 = y1[-1] - y1[0]\n        max_y2 = y2[-1] - y2[0]\n\n        # Calculate doubled area for each possible triangle\n        max_area = max(max_x1 * h, max_x2 * h, max_y1 * w, max_y2 * w)\n\n        # Append the result for the current test case\n        results.append(max_area)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n    \n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum doubled area for horizontal sides\n        max_area_horizontal = max(\n            (x1[-1] - x1[0]) * h,  # Bottom side\n            (x2[-1] - x2[0]) * h   # Top side\n        )\n        \n        # Calculate maximum doubled area for vertical sides\n        max_area_vertical = max(\n            (y1[-1] - y1[0]) * w,  # Left side\n            (y2[-1] - y2[0]) * w   # Right side\n        )\n        \n        # The maximum doubled area for the current test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        \n        results.append(max_doubled_area)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom horizontal side.\n            - x2 (List[int]): Points on the top horizontal side.\n            - y1 (List[int]): Points on the left vertical side.\n            - y2 (List[int]): Points on the right vertical side.\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base for horizontal sides\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n\n        # Calculate maximum height for vertical sides\n        max_height_left = y1[-1] - y1[0]\n        max_height_right = y2[-1] - y2[0]\n\n        # Calculate doubled area for each configuration\n        max_area_horizontal = max(max_base_bottom, max_base_top) * h\n        max_area_vertical = max(max_height_left, max_height_right) * w\n\n        # Determine the maximum doubled area\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    test_cases = []\n\n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n\n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n\n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe task requires selecting three points from the sides of a rectangle such that two points are on the same side and the area of the triangle formed is maximized. The solution must efficiently handle up to 10,000 test cases and a total of 200,000 points across all test cases. The output must be the doubled area of the largest triangle possible for each test case.\nrequirement pool:\n- Efficiently compute the maximum doubled area of a triangle for each test case\n- Ensure the solution handles large input sizes within constraints\n- Provide clear and accurate output for each test case\n- Optimize the algorithm for both small and large input sizes\n- Implement edge case handling for minimal and maximal input values\nWe will use a mathematical approach to calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle. The key observation is that the largest triangle will be formed by choosing two points on the same side that are farthest apart and one point on the opposite side. This can be efficiently computed by considering the maximum distance between points on each side and using the rectangle's dimensions.\n", "requirement analysis:\nThe task requires selecting three points from the sides of a rectangle such that two points are on the same side and the area of the triangle formed is maximized. The solution must efficiently handle large input sizes and ensure the output is an integer representing the doubled area.\nrequirement pool:\n- Efficiently handle up to 10^4 test cases\n- Accurately calculate the maximum triangle area\n- Optimize for large input sizes up to 2 \u22c5 10^5 points\n- Ensure output format is consistent and clear\n- Minimize computational complexity\nWe will use a straightforward approach to calculate the maximum triangle area by selecting points with maximum distance on one side and a point on an adjacent side. The key is to efficiently determine the maximum possible base and height for the triangle using the given lattice points. We will leverage Python's built-in functions for list manipulation and arithmetic operations to ensure accuracy and speed.\n", "requirement analysis:\nThe task requires selecting three points from the sides of a rectangle such that two points are on the same side and the area of the triangle formed is maximized. The solution must efficiently handle up to 10,000 test cases with large input sizes, ensuring the doubled area is computed accurately.\nrequirement pool:\n- Efficiently compute the maximum area of a triangle for each test case\n- Ensure the solution handles large input sizes up to 10^6\n- Provide accurate results for all test cases\n- Optimize the solution for fast computation\n- Handle edge cases gracefully\nWe will use a mathematical approach to calculate the maximum area of a triangle formed by three points on the sides of a rectangle. The key observation is that the maximum area is achieved when two points are on the same side and the third point is as far as possible from the line formed by these two points. We will utilize the formula for the area of a triangle given by three points and optimize the selection of points using simple arithmetic operations. The solution will efficiently handle large input sizes by focusing on the extreme points on each side.\n", "requirement analysis:\nThe problem requires selecting three points from the sides of a rectangle such that two points are on the same side and the area of the triangle formed is maximized. The solution must efficiently handle large input sizes and multiple test cases, ensuring that the output is always an integer as the doubled area of the triangle.\nrequirement pool:\n- Efficiently handle up to 10^4 test cases.\n- Compute the maximum doubled area of a triangle formed by three points.\n- Ensure the solution is optimized for large values of w and h.\n- Provide clear and concise output for each test case.\n- Handle edge cases where points are close to the corners.\nWe will use a straightforward approach to calculate the maximum doubled area of a triangle formed by three points on the sides of a rectangle. The key observation is that the largest triangle will be formed by choosing two points on the same side with the maximum distance between them and one point on the opposite side. This can be efficiently computed by considering the maximum and minimum coordinates on each side.\n", "requirement analysis:\nThe problem requires selecting three points from the sides of a rectangle such that two points are on the same side and the area of the triangle formed is maximized. The solution must efficiently handle large input sizes and ensure accurate calculations. The doubled area of the triangle must be printed for each test case.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases\n- Accurately calculate the maximum triangle area\n- Optimize performance for large values of w and h\n- Ensure solution adheres to input-output format\n- Provide clear and concise output for each test case\nWe will use a straightforward approach to calculate the maximum area of a triangle formed by three points on the sides of a rectangle. The key observation is that the largest triangle will be formed by choosing two points on the same side with the maximum distance between them and one point on the opposite side. We will iterate over each side and calculate the potential maximum area for each configuration, ensuring efficient handling of large input sizes using Python's built-in functions.\n", "requirement analysis:\nThe problem requires selecting three points such that two are on the same side of a rectangle and the area of the triangle formed is maximized. The solution must efficiently handle large input sizes and ensure accurate calculations. The constraints on the number of points and test cases necessitate an optimized approach.\nrequirement pool:\n- Efficiently handle up to 10^4 test cases.\n- Accurately calculate the maximum doubled area of a triangle.\n- Optimize the algorithm for performance with large input sizes.\n- Ensure the solution is robust against edge cases.\n- Provide clear and concise output for each test case.\nWe will implement a function that processes each test case independently. For each rectangle, we will calculate the maximum possible doubled area of a triangle by considering the longest possible base on each side and the maximum possible height. The function will iterate over the points on each side, calculate potential triangle areas, and keep track of the maximum area found. This approach ensures efficiency and accuracy, leveraging the properties of lattice points and the constraints provided.\n", "requirement analysis:\nThe task requires calculating the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle. The solution must efficiently handle up to 10,000 test cases and a total of 200,000 points across all test cases. The algorithm should focus on computational efficiency and accuracy, ensuring it can process large input sizes without performance degradation.\nrequirement pool:\n- Efficiently process multiple test cases\n- Accurately calculate the maximum doubled area of triangles\n- Handle large input sizes effectively\n- Ensure the solution is scalable\n- Optimize for computational efficiency\nWe will use a straightforward approach to calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle. The key observation is that the maximum area triangle will have its base as the longest possible segment on one side and the height as the maximum possible distance from this side to a point on the opposite side. We will iterate over each side, calculate the potential maximum area for triangles formed with points on that side, and keep track of the maximum area found. This approach ensures computational efficiency and accuracy, leveraging the properties of lattice points and the rectangle's geometry.\n", "requirement analysis:\nThe task requires selecting three points from the sides of a rectangle such that two points are on the same side and the area of the triangle formed is maximized. The solution must handle up to 10,000 test cases efficiently, with each test case containing up to 200,000 points. The output should be the doubled area of the largest possible triangle.\nrequirement pool:\n- Efficiently handle large input sizes and multiple test cases\n- Accurately calculate the maximum triangle area\n- Optimize the algorithm for performance\n- Ensure correct output formatting\n- Maintain code readability and simplicity\nWe will use a mathematical approach to calculate the maximum area of a triangle formed by lattice points on the sides of a rectangle. The key observation is that the largest triangle will be formed by choosing two points on the same side with the maximum distance between them and one point on the opposite side. This can be efficiently calculated using the difference between the maximum and minimum coordinates on each side.\n", "requirement analysis:\nThe problem requires selecting three points from the sides of a rectangle such that two points are on the same side and the area of the triangle formed is maximized. The solution must efficiently handle up to 10,000 test cases and a total of 200,000 points across all test cases. The output should be the doubled area of the largest triangle possible for each test case.\nrequirement pool:\n- Efficiently compute the maximum doubled area of a triangle for each test case\n- Ensure the solution handles large input sizes within constraints\n- Provide clear and accurate output for each test case\n- Optimize the algorithm for speed and memory usage\n- Implement edge case handling for minimal and maximal input values\nWe will use a straightforward approach to calculate the maximum doubled area of a triangle formed by three points on the sides of a rectangle. The key observation is that the maximum area is achieved by selecting the two farthest points on one side and the farthest point on the opposite side. This approach ensures that the solution is efficient and handles large input sizes within constraints. We will iterate over each test case, compute the maximum possible area for each side, and return the largest doubled area.\n", "requirement analysis:\nThe task requires selecting three points from the sides of a rectangle such that two points are on the same side and the area of the triangle formed is maximized. The solution must efficiently handle up to 10,000 test cases and a total of 200,000 points across all test cases. The output should be the doubled area of the largest triangle possible for each test case.\nrequirement pool:\n- Efficiently compute the maximum doubled area of a triangle for each test case\n- Ensure the solution handles large input sizes within constraints\n- Provide clear and accurate output for each test case\n- Optimize the algorithm for speed and scalability\n- Implement edge case handling for minimal and maximal input values\nWe will use a straightforward approach to calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle. The key observation is that the largest triangle will be formed by choosing two points on the same side with the maximum distance between them and a third point on the opposite side. This ensures the largest possible base and height for the triangle. We will iterate over each side and calculate the potential maximum area for each configuration.\n"], "scores": [], "pass_results": [true, false, false, false, true, false, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 803, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "mutate_method": "rephrase_one", "parent_index": 320}
