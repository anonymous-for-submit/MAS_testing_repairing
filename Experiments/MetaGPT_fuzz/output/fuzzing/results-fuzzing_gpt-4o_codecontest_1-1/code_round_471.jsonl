{"name": "1620_E. Replace the Numbers", "description": "You have an array of integers (initially empty).\n\nYou have to perform q queries. Each query is of one of two types: \n\n  * \"1 x\" \u2014 add the element x to the end of the array; \n  * \"2 x y\" \u2014 replace all occurrences of x in the array with y. \n\n\n\nFind the resulting array after performing all the queries.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].", "tags": ["constructive algorithms", "data structures", "dsu", "implementation"], "difficulty": 11, "id": 1620, "sample_io": [{"input": "8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n", "output": ["1 3 3 7 \n"]}, {"input": "4\n1 1\n1 2\n1 1\n2 2 2\n", "output": ["1 2 1 \n"]}, {"input": "7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n", "output": ["3 2 2 3 2 \n"]}], "test_list": [{"input": "1\n1 50\n", "output": ["50 \n"]}, {"input": "1\n1 114514\n", "output": ["114514 \n"]}, {"input": "1\n1 2002\n", "output": ["2002 \n"]}, {"input": "1\n1 500\n", "output": ["500 \n"]}, {"input": "1\n1 28\n", "output": ["28"]}, {"input": "1\n1 2887\n", "output": ["2887"]}, {"input": "1\n1 228\n", "output": ["228"]}, {"input": "1\n1 29\n", "output": ["29"]}, {"input": "1\n1 1270\n", "output": ["1270"]}, {"input": "1\n1 182\n", "output": ["182"]}, {"input": "1\n1 2279\n", "output": ["2279"]}, {"input": "1\n1 979\n", "output": ["979"]}, {"input": "1\n1 1719\n", "output": ["1719"]}, {"input": "1\n1 1163\n", "output": ["1163"]}, {"input": "1\n1 1134\n", "output": ["1134"]}, {"input": "1\n1 2216\n", "output": ["2216"]}, {"input": "1\n1 810\n", "output": ["810"]}, {"input": "1\n1 1162\n", "output": ["1162"]}, {"input": "1\n1 8\n", "output": ["8"]}, {"input": "1\n1 176923\n", "output": ["176923"]}, {"input": "1\n1 346\n", "output": ["346"]}, {"input": "8\n2 2 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n", "output": ["1 3 3 7"]}, {"input": "4\n1 1\n1 2\n1 1\n2 3 2\n", "output": ["1 2 1"]}, {"input": "7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 1\n2 1 3\n", "output": ["3 2 2 3 3"]}, {"input": "1\n1 192\n", "output": ["192"]}, {"input": "1\n1 6\n", "output": ["6"]}, {"input": "1\n1 1566\n", "output": ["1566"]}, {"input": "1\n1 1612\n", "output": ["1612"]}, {"input": "1\n1 391\n", "output": ["391"]}, {"input": "1\n1 1904\n", "output": ["1904"]}, {"input": "1\n1 12\n", "output": ["12"]}, {"input": "1\n1 455\n", "output": ["455"]}, {"input": "8\n2 2 4\n1 1\n1 4\n1 2\n2 2 6\n2 4 3\n1 2\n2 2 7\n", "output": ["1 3 6 7"]}, {"input": "4\n1 2\n1 2\n1 1\n2 3 2\n", "output": ["2 2 1"]}, {"input": "1\n1 61\n", "output": ["61"]}, {"input": "1\n1 3\n", "output": ["3"]}, {"input": "1\n1 107\n", "output": ["107"]}, {"input": "1\n1 537\n", "output": ["537"]}, {"input": "1\n1 520\n", "output": ["520"]}, {"input": "1\n1 72\n", "output": ["72"]}, {"input": "1\n1 415\n", "output": ["415"]}, {"input": "1\n1 639\n", "output": ["639"]}, {"input": "1\n1 705\n", "output": ["705"]}, {"input": "1\n1 34\n", "output": ["34"]}, {"input": "1\n1 42\n", "output": ["42"]}, {"input": "1\n1 91\n", "output": ["91"]}, {"input": "1\n1 123055\n", "output": ["123055"]}, {"input": "1\n1 408\n", "output": ["408"]}, {"input": "8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 1 7\n", "output": ["7 3 3 2"]}, {"input": "1\n1 10\n", "output": ["10"]}, {"input": "1\n1 5175\n", "output": ["5175"]}, {"input": "1\n1 37\n", "output": ["37"]}, {"input": "1\n1 2219\n", "output": ["2219"]}, {"input": "1\n1 205\n", "output": ["205"]}, {"input": "1\n1 1536\n", "output": ["1536"]}, {"input": "1\n1 1539\n", "output": ["1539"]}, {"input": "1\n1 1784\n", "output": ["1784"]}, {"input": "1\n1 147\n", "output": ["147"]}, {"input": "1\n1 825\n", "output": ["825"]}, {"input": "1\n1 3545\n", "output": ["3545"]}, {"input": "1\n1 14\n", "output": ["14"]}, {"input": "7\n1 3\n1 1\n2 1 1\n1 2\n1 1\n1 1\n2 1 3\n", "output": ["3 3 2 3 3"]}, {"input": "1\n1 212\n", "output": ["212"]}, {"input": "1\n1 416\n", "output": ["416"]}, {"input": "1\n1 1055\n", "output": ["1055"]}, {"input": "1\n1 341\n", "output": ["341"]}, {"input": "1\n1 3564\n", "output": ["3564"]}, {"input": "1\n1 5\n", "output": ["5"]}, {"input": "8\n2 2 4\n1 1\n1 4\n1 2\n2 2 6\n2 4 3\n1 2\n2 2 5\n", "output": ["1 3 6 5"]}, {"input": "1\n1 1\n", "output": ["1"]}, {"input": "1\n1 115\n", "output": ["115"]}, {"input": "1\n1 727\n", "output": ["727"]}, {"input": "1\n1 98\n", "output": ["98"]}, {"input": "1\n1 55\n", "output": ["55"]}, {"input": "1\n1 284\n", "output": ["284"]}, {"input": "1\n1 4\n", "output": ["4"]}, {"input": "1\n1 9\n", "output": ["9"]}, {"input": "1\n1 583\n", "output": ["583"]}, {"input": "1\n1 16\n", "output": ["16"]}, {"input": "1\n1 2794\n", "output": ["2794"]}, {"input": "1\n1 59\n", "output": ["59"]}, {"input": "1\n1 300\n", "output": ["300"]}, {"input": "1\n1 388\n", "output": ["388"]}, {"input": "1\n1 1084\n", "output": ["1084"]}, {"input": "1\n1 2314\n", "output": ["2314"]}, {"input": "1\n1 736\n", "output": ["736"]}, {"input": "1\n1 4527\n", "output": ["4527"]}, {"input": "1\n1 2\n", "output": ["2"]}, {"input": "1\n1 439\n", "output": ["439"]}, {"input": "1\n1 86\n", "output": ["86"]}, {"input": "1\n1 5588\n", "output": ["5588"]}, {"input": "1\n1 152\n", "output": ["152"]}, {"input": "1\n1 41\n", "output": ["41"]}, {"input": "1\n1 260\n", "output": ["260"]}, {"input": "1\n1 551\n", "output": ["551"]}, {"input": "1\n1 2765\n", "output": ["2765"]}, {"input": "1\n1 1371\n", "output": ["1371"]}, {"input": "1\n1 127\n", "output": ["127"]}, {"input": "1\n1 8623\n", "output": ["8623"]}, {"input": "1\n1 49\n", "output": ["49"]}, {"input": "1\n1 874\n", "output": ["874"]}, {"input": "1\n1 376\n", "output": ["376"]}, {"input": "1\n1 58\n", "output": ["58"]}, {"input": "1\n1 6215\n", "output": ["6215"]}, {"input": "1\n1 1464\n", "output": ["1464"]}, {"input": "1\n1 33\n", "output": ["33"]}, {"input": "1\n1 4800\n", "output": ["4800"]}, {"input": "1\n1 6121\n", "output": ["6121"]}, {"input": "1\n1 121267\n", "output": ["121267"]}, {"input": "1\n1 3093\n", "output": ["3093"]}, {"input": "1\n1 19\n", "output": ["19"]}, {"input": "1\n1 202\n", "output": ["202"]}, {"input": "1\n1 1050\n", "output": ["1050"]}, {"input": "1\n1 2535\n", "output": ["2535"]}, {"input": "1\n1 1306\n", "output": ["1306"]}, {"input": "1\n1 1571\n", "output": ["1571"]}, {"input": "1\n1 1578\n", "output": ["1578"]}, {"input": "1\n1 142\n", "output": ["142"]}, {"input": "1\n1 2055\n", "output": ["2055"]}, {"input": "1\n1 53\n", "output": ["53"]}, {"input": "1\n1 3184\n", "output": ["3184"]}, {"input": "1\n1 21\n", "output": ["21"]}, {"input": "1\n1 642\n", "output": ["642"]}, {"input": "1\n1 15\n", "output": ["15"]}, {"input": "1\n1 23\n", "output": ["23"]}, {"input": "1\n1 169\n", "output": ["169"]}, {"input": "1\n1 861\n", "output": ["861"]}, {"input": "1\n1 139\n", "output": ["139"]}, {"input": "1\n1 552\n", "output": ["552"]}, {"input": "1\n1 247\n", "output": ["247"]}, {"input": "1\n1 40\n", "output": ["40"]}, {"input": "1\n1 46\n", "output": ["46"]}, {"input": "1\n1 173\n", "output": ["173"]}, {"input": "1\n1 171905\n", "output": ["171905"]}, {"input": "1\n1 509\n", "output": ["509"]}, {"input": "1\n1 7014\n", "output": ["7014"]}, {"input": "1\n1 47\n", "output": ["47"]}, {"input": "1\n1 335\n", "output": ["335"]}, {"input": "1\n1 3035\n", "output": ["3035"]}, {"input": "1\n1 237\n", "output": ["237"]}, {"input": "1\n1 4338\n", "output": ["4338"]}, {"input": "7\n1 6\n1 1\n2 1 1\n1 2\n1 1\n1 1\n2 1 3\n", "output": ["6 3 2 3 3"]}, {"input": "1\n1 528\n", "output": ["528"]}, {"input": "1\n1 1192\n", "output": ["1192"]}, {"input": "1\n1 210\n", "output": ["210"]}, {"input": "1\n1 1402\n", "output": ["1402"]}, {"input": "1\n1 195\n", "output": ["195"]}, {"input": "1\n1 347\n", "output": ["347"]}, {"input": "1\n1 208\n", "output": ["208"]}, {"input": "1\n1 525\n", "output": ["525"]}, {"input": "1\n1 413\n", "output": ["413"]}, {"input": "1\n1 4000\n", "output": ["4000"]}, {"input": "1\n1 587\n", "output": ["587"]}, {"input": "1\n1 6510\n", "output": ["6510"]}, {"input": "1\n1 209\n", "output": ["209"]}, {"input": "1\n1 430\n", "output": ["430"]}, {"input": "1\n1 1080\n", "output": ["1080"]}, {"input": "1\n1 56\n", "output": ["56"]}, {"input": "1\n1 483\n", "output": ["483"]}, {"input": "1\n1 12268\n", "output": ["12268"]}, {"input": "1\n1 1439\n", "output": ["1439"]}, {"input": "1\n1 9124\n", "output": ["9124"]}, {"input": "1\n1 9067\n", "output": ["9067"]}, {"input": "1\n1 34301\n", "output": ["34301"]}, {"input": "1\n1 553\n", "output": ["553"]}, {"input": "1\n1 35\n", "output": ["35"]}, {"input": "1\n1 4704\n", "output": ["4704"]}, {"input": "1\n1 994\n", "output": ["994"]}, {"input": "1\n1 1751\n", "output": ["1751"]}, {"input": "1\n1 702\n", "output": ["702"]}, {"input": "1\n1 224\n", "output": ["224"]}, {"input": "4\n1 1\n1 1\n1 1\n2 6 2\n", "output": ["1 1 1"]}, {"input": "1\n1 278\n", "output": ["278"]}, {"input": "1\n1 70\n", "output": ["70"]}, {"input": "1\n1 26\n", "output": ["26"]}, {"input": "1\n1 99\n", "output": ["99"]}, {"input": "1\n1 487\n", "output": ["487"]}, {"input": "1\n1 502\n", "output": ["502"]}, {"input": "1\n1 145712\n", "output": ["145712"]}, {"input": "1\n1 4942\n", "output": ["4942"]}, {"input": "1\n1 7\n", "output": ["7"]}, {"input": "1\n1 2767\n", "output": ["2767"]}, {"input": "1\n1 340\n", "output": ["340"]}, {"input": "1\n1 8530\n", "output": ["8530"]}, {"input": "1\n1 63\n", "output": ["63"]}, {"input": "1\n1 1575\n", "output": ["1575"]}, {"input": "1\n1 2756\n", "output": ["2756"]}, {"input": "1\n1 821\n", "output": ["821"]}, {"input": "1\n1 2667\n", "output": ["2667"]}, {"input": "1\n1 25\n", "output": ["25"]}, {"input": "1\n1 11\n", "output": ["11"]}, {"input": "1\n1 2714\n", "output": ["2714"]}, {"input": "1\n1 4721\n", "output": ["4721"]}, {"input": "1\n1 369\n", "output": ["369"]}, {"input": "1\n1 4188\n", "output": ["4188"]}, {"input": "1\n1 103\n", "output": ["103"]}, {"input": "1\n1 87\n", "output": ["87"]}, {"input": "1\n1 18\n", "output": ["18"]}, {"input": "1\n1 679\n", "output": ["679"]}, {"input": "1\n1 423\n", "output": ["423"]}, {"input": "1\n1 13\n", "output": ["13"]}, {"input": "1\n1 2163\n", "output": ["2163"]}, {"input": "1\n1 494\n", "output": ["494"]}, {"input": "1\n1 223\n", "output": ["223"]}], "task_id": "codecontest/151", "prompt": "You have an array of integers (initially empty).\n\nYou have to perform q queries. Each query is of one of two types: \n\n  * \"1 x\" \u2014 add the element x to the end of the array; \n  * \"2 x y\" \u2014 replace all occurrences of x in the array with y. This means that every appearance of x anywhere in the array should become y instead.\n\nFind the resulting array after performing all the queries. Ensure to handle edge cases efficiently. Aim for a solution with optimal time complexity, especially for a large number of queries.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].", "repair_prompt": ["You have an array of integers (initially empty).\n\nYou have to perform q queries. Each query is of one of two types: \n\n  * \"1 x\" \u2014 add the element x to the end of the array; \n  * \"2 x y\" \u2014 replace all occurrences of x in the array with y. This means that every appearance of x anywhere in the array should become y instead.\n\nFind the resulting array after performing all the queries. Ensure to handle edge cases efficiently. Aim for a solution with optimal time complexity, especially for a large number of queries.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Processes a list of queries to modify an array.\n\n    Args:\n        q: The number of queries.\n        queries: A list of tuples representing the queries. Each tuple is either\n                 (1, x) to add x to the array, or (2, x, y) to replace all occurrences\n                 of x in the array with y.\n\n    Returns:\n        A list of integers representing the final state of the array after all queries.\n    \"\"\"\n    array = []\n    replacement_map = {}\n\n    for query in queries:\n        if query[0] == 1:\n            # Add element to the array\n            x = query[1]\n            # Apply any replacements needed before adding\n            while x in replacement_map:\n                x = replacement_map[x]\n            array.append(x)\n        elif query[0] == 2:\n            # Replace occurrences of x with y\n            x, y = query[1], query[2]\n            # Update the replacement map\n            replacement_map[x] = y\n            # Update existing elements in the array\n            array = [replacement_map.get(elem, elem) for elem in array]\n\n    return array\n\n# Input interface\ndef main():\n    q = int(input())\n    queries = [tuple(map(int, input().split())) for _ in range(q)]\n    result = process_queries(q, queries)\n    # Output interface\n    print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef process_queries(q: int, queries: List[str]) -> List[int]:\n    \"\"\"Processes a list of queries on an initially empty array.\n\n    Args:\n        q: The number of queries.\n        queries: A list of query strings, each of which is either of the form\n                 \"1 x\" to add x to the array, or \"2 x y\" to replace all\n                 occurrences of x in the array with y.\n\n    Returns:\n        A list of integers representing the final state of the array after\n        all queries have been processed.\n    \"\"\"\n    array = []\n    replacement_map = {}\n\n    for query in queries:\n        parts = query.split()\n        query_type = int(parts[0])\n\n        if query_type == 1:\n            # Add element to the array\n            x = int(parts[1])\n            # Apply any existing replacements\n            while x in replacement_map:\n                x = replacement_map[x]\n            array.append(x)\n        elif query_type == 2:\n            # Replace all occurrences of x with y\n            x = int(parts[1])\n            y = int(parts[2])\n            # Update the replacement map\n            for key in list(replacement_map.keys()):\n                if replacement_map[key] == x:\n                    replacement_map[key] = y\n            replacement_map[x] = y\n\n    # Apply final replacements to the array\n    for i in range(len(array)):\n        while array[i] in replacement_map:\n            array[i] = replacement_map[array[i]]\n\n    return array\n\n# Interface using input() and print(), DO NOT use stdin\nif __name__ == \"__main__\":\n    q = int(input())\n    queries = [input().strip() for _ in range(q)]\n    result = process_queries(q, queries)\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Processes a list of queries on an initially empty array.\n\n    Args:\n        q: The number of queries.\n        queries: A list of queries where each query is a tuple. The first element\n                 of the tuple is the type of query (1 or 2). If the type is 1, the\n                 second element is the integer to add to the array. If the type is 2,\n                 the second and third elements are the integers to replace and the\n                 replacement value, respectively.\n\n    Returns:\n        A list of integers representing the final state of the array after all queries\n        have been processed.\n    \"\"\"\n    array = []\n    replacement_map = {}\n\n    for query in queries:\n        if query[0] == 1:\n            # Add element to the array\n            x = query[1]\n            # Apply any pending replacements\n            if x in replacement_map:\n                x = replacement_map[x]\n            array.append(x)\n        elif query[0] == 2:\n            # Replace all occurrences of x with y\n            x, y = query[1], query[2]\n            # Update the replacement map\n            for key in list(replacement_map.keys()):\n                if replacement_map[key] == x:\n                    replacement_map[key] = y\n            if x in replacement_map:\n                replacement_map[x] = y\n            else:\n                replacement_map[x] = y\n\n    # Apply final replacements to the array\n    for i in range(len(array)):\n        if array[i] in replacement_map:\n            array[i] = replacement_map[array[i]]\n\n    return array\n\n# Input interface\nif __name__ == \"__main__\":\n    q = int(input())\n    queries = [tuple(map(int, input().split())) for _ in range(q)]\n    result = process_queries(q, queries)\n    # Output interface\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Process a list of queries to modify an array.\n\n    Args:\n        q: The number of queries.\n        queries: A list of tuples representing the queries. Each tuple is either\n                 (1, x) to add x to the array, or (2, x, y) to replace all occurrences\n                 of x in the array with y.\n\n    Returns:\n        A list of integers representing the final state of the array after all queries.\n    \"\"\"\n    array = []\n    replacement_map = {}\n\n    for query in queries:\n        if query[0] == 1:\n            # Add element to the array\n            x = query[1]\n            # Apply any pending replacements to the new element\n            while x in replacement_map:\n                x = replacement_map[x]\n            array.append(x)\n        elif query[0] == 2:\n            # Replace occurrences of x with y\n            x, y = query[1], query[2]\n            # Update the replacement map\n            replacement_map[x] = y\n            # Update existing replacements to ensure transitive replacements\n            for key in list(replacement_map.keys()):\n                if replacement_map[key] == x:\n                    replacement_map[key] = y\n\n    # Apply final replacements to the array\n    for i in range(len(array)):\n        while array[i] in replacement_map:\n            array[i] = replacement_map[array[i]]\n\n    return array\n\n# Input interface\ndef main():\n    q = int(input())\n    queries = [tuple(map(int, input().split())) for _ in range(q)]\n    result = process_queries(q, queries)\n    # Output interface\n    print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Processes a list of queries on an initially empty array.\n\n    Args:\n        q: The number of queries.\n        queries: A list of queries where each query is a tuple. The first element\n                 of the tuple is the type of query (1 or 2). If the type is 1, the\n                 second element is the integer to add to the array. If the type is 2,\n                 the second and third elements are the integers to replace and the\n                 replacement value, respectively.\n\n    Returns:\n        A list of integers representing the final state of the array after all queries.\n    \"\"\"\n    array = []\n    replacement_map = {}\n\n    for query in queries:\n        if query[0] == 1:\n            # Add element to the array\n            x = query[1]\n            # Apply any existing replacements\n            while x in replacement_map:\n                x = replacement_map[x]\n            array.append(x)\n        elif query[0] == 2:\n            # Replace all occurrences of x with y\n            x, y = query[1], query[2]\n            # Update the replacement map\n            if x != y:\n                for key in list(replacement_map.keys()):\n                    if replacement_map[key] == x:\n                        replacement_map[key] = y\n                replacement_map[x] = y\n\n    # Apply final replacements to the array\n    for i in range(len(array)):\n        while array[i] in replacement_map:\n            array[i] = replacement_map[array[i]]\n\n    return array\n\n# Input and output interface\nif __name__ == \"__main__\":\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = tuple(map(int, input().split()))\n        queries.append(query)\n    result = process_queries(q, queries)\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Processes a list of queries to modify an array.\n\n    Args:\n        q: The number of queries.\n        queries: A list of tuples representing the queries. Each tuple is of the form:\n                 (1, x, 0) for adding x to the array, or\n                 (2, x, y) for replacing all occurrences of x with y.\n\n    Returns:\n        A list of integers representing the final state of the array after all queries.\n    \"\"\"\n    array = []\n    replacements = {}\n\n    for query in queries:\n        if query[0] == 1:\n            # Add element x to the array\n            x = query[1]\n            # Apply any existing replacements to x\n            while x in replacements:\n                x = replacements[x]\n            array.append(x)\n        elif query[0] == 2:\n            # Replace all occurrences of x with y\n            x, y = query[1], query[2]\n            # Find the final replacement for y\n            while y in replacements:\n                y = replacements[y]\n            # Update the replacement dictionary\n            if x != y:\n                replacements[x] = y\n\n    # Apply final replacements to the array\n    for i in range(len(array)):\n        while array[i] in replacements:\n            array[i] = replacements[array[i]]\n\n    return array\n\n# Input interface\nif __name__ == \"__main__\":\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = tuple(map(int, input().split()))\n        queries.append(query)\n\n    # Output interface\n    result = process_queries(q, queries)\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Processes a list of queries on an initially empty array.\n\n    Args:\n        q: The number of queries.\n        queries: A list of queries where each query is a tuple. The first element\n                 of the tuple is the type of query (1 or 2). If the type is 1, the\n                 second element is the integer to add to the array. If the type is 2,\n                 the second and third elements are the integers to replace and the\n                 replacement value, respectively.\n\n    Returns:\n        A list of integers representing the final state of the array after all queries.\n    \"\"\"\n    array = []\n    replacement_map = {}\n\n    for query in queries:\n        if query[0] == 1:\n            # Add element to the array\n            x = query[1]\n            # Apply any existing replacements\n            while x in replacement_map:\n                x = replacement_map[x]\n            array.append(x)\n        elif query[0] == 2:\n            # Replace all occurrences of x with y\n            x, y = query[1], query[2]\n            # Update the replacement map\n            if x != y:\n                for key in list(replacement_map.keys()):\n                    if replacement_map[key] == x:\n                        replacement_map[key] = y\n                replacement_map[x] = y\n\n    return array\n\n# Input interface\ndef main():\n    q = int(input().strip())\n    queries = [tuple(map(int, input().strip().split())) for _ in range(q)]\n    result = process_queries(q, queries)\n    # Output interface\n    print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Process a list of queries to modify an array.\n\n    Args:\n        q (int): The number of queries.\n        queries (List[Tuple[int, int, int]]): A list of queries where each query is a tuple.\n            The tuple can be of two types:\n            - (1, x, 0): Add element x to the end of the array.\n            - (2, x, y): Replace all occurrences of x in the array with y.\n\n    Returns:\n        List[int]: The resulting array after processing all queries.\n    \"\"\"\n    array = []\n    replacements = {}\n\n    for query in queries:\n        if query[0] == 1:\n            # Add element to the array\n            x = query[1]\n            # Apply any replacement mapping to x before adding\n            while x in replacements:\n                x = replacements[x]\n            array.append(x)\n        elif query[0] == 2:\n            # Replace occurrences of x with y\n            x, y = query[1], query[2]\n            # Update the replacement mapping\n            replacements[x] = y\n            # Update existing mappings to ensure transitive replacements\n            for key in list(replacements.keys()):\n                if replacements[key] == x:\n                    replacements[key] = y\n\n    # Apply final replacements to the array\n    for i in range(len(array)):\n        while array[i] in replacements:\n            array[i] = replacements[array[i]]\n\n    return array\n\n# Input interface\ndef main():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = tuple(map(int, input().split()))\n        queries.append(query)\n\n    # Output interface\n    result = process_queries(q, queries)\n    print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Processes a list of queries on an initially empty array.\n\n    Args:\n        q: The number of queries.\n        queries: A list of queries, where each query is a tuple. The first element\n                 of the tuple is the type of the query (1 or 2). If the type is 1,\n                 the second element is the integer to add to the array. If the type\n                 is 2, the second and third elements are the integers to replace\n                 and the replacement integer, respectively.\n\n    Returns:\n        A list of integers representing the final state of the array after all\n        queries have been processed.\n    \"\"\"\n    array = []\n    replacement_map = {}\n\n    for query in queries:\n        if query[0] == 1:\n            # Add element to the array\n            x = query[1]\n            # Apply any existing replacements\n            while x in replacement_map:\n                x = replacement_map[x]\n            array.append(x)\n        elif query[0] == 2:\n            # Replace all occurrences of x with y\n            x, y = query[1], query[2]\n            # Find the final replacement for y\n            while y in replacement_map:\n                y = replacement_map[y]\n            # Update the replacement map\n            if x != y:\n                replacement_map[x] = y\n\n    # Apply final replacements to the array\n    for i in range(len(array)):\n        while array[i] in replacement_map:\n            array[i] = replacement_map[array[i]]\n\n    return array\n\n# Input interface\nq = int(input())\nqueries = [tuple(map(int, input().split())) for _ in range(q)]\n\n# Output interface\nresult = process_queries(q, queries)\nprint(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Process a list of queries to modify an array.\n\n    Args:\n        q: The number of queries.\n        queries: A list of queries, where each query is a tuple of integers.\n                 The first integer indicates the type of query:\n                 - Type 1: (1, x) adds x to the end of the array.\n                 - Type 2: (2, x, y) replaces all occurrences of x in the array with y.\n\n    Returns:\n        A list of integers representing the final state of the array after all queries.\n    \"\"\"\n    array = []\n    replacement_map = {}\n\n    for query in queries:\n        if query[0] == 1:\n            # Add element to the array\n            x = query[1]\n            # Apply any existing replacements to x\n            while x in replacement_map:\n                x = replacement_map[x]\n            array.append(x)\n        elif query[0] == 2:\n            # Replace occurrences of x with y\n            x, y = query[1], query[2]\n            # Update the replacement map\n            replacement_map[x] = y\n            # Update existing replacements to point to the final replacement\n            for key in list(replacement_map.keys()):\n                if replacement_map[key] == x:\n                    replacement_map[key] = y\n\n    # Apply final replacements to the array\n    for i in range(len(array)):\n        while array[i] in replacement_map:\n            array[i] = replacement_map[array[i]]\n\n    return array\n\n# Input interface\ndef main():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = tuple(map(int, input().split()))\n        queries.append(query)\n\n    # Output interface\n    result = process_queries(q, queries)\n    print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on efficiently processing a large number of queries with optimal time complexity. The solution should handle edge cases and provide clear output. The constraints on input size and query types are well-defined, ensuring a structured approach to implementation.\nrequirement pool:\n- Efficiently process queries with optimal time complexity.\n- Handle edge cases correctly.\n- Provide clear and accurate output.\n- Ensure the solution is scalable for large input sizes.\n- Maintain simplicity in implementation.\nWe will use a list to store the array and perform operations directly on it. For the replacement operation, we will use a dictionary to map values that need to be replaced, ensuring efficient lookup and replacement. This approach will help in handling large datasets efficiently.\n", "requirement analysis:\nThe requirements focus on efficiently processing a large number of queries with optimal time complexity. The solution should handle edge cases and provide accurate output. The constraints on input values and query types are clear, ensuring a structured approach to solving the problem.\nrequirement pool:\n- Efficiently process queries with optimal time complexity.\n- Handle edge cases correctly.\n- Provide clear and accurate output.\n- Ensure the solution is scalable for large data sets.\n- Maintain code readability and simplicity.\nWe will use a list to store the array and perform operations directly on it. For the replacement operation, we will use a dictionary to map values that need to be replaced, ensuring efficient lookup and replacement. This approach will help in handling large datasets efficiently.\n", "requirement analysis:\nThe requirements focus on efficiently processing a large number of queries with optimal time complexity. The solution should handle edge cases and provide clear output. The main challenge is to replace elements in the array efficiently without compromising performance.\nrequirement pool:\n- Efficiently process queries with optimal time complexity.\n- Handle edge cases correctly.\n- Provide clear and accurate output.\n- Ensure the solution is scalable for large datasets.\n- Maintain simplicity in implementation.\nWe will use a list to store the array and perform operations directly on it. For replacing elements efficiently, we will use a dictionary to map elements that need to be replaced, allowing us to perform replacements in a single pass over the array. This approach ensures optimal time complexity for both types of queries.\n", "requirement analysis:\nThe requirements focus on efficiently processing a large number of queries with optimal time complexity. The solution must handle edge cases and provide clear output. The constraints on input size and query types are crucial for ensuring performance.\nrequirement pool:\n- Efficiently process queries with optimal time complexity.\n- Handle edge cases correctly.\n- Provide clear and accurate output.\n- Ensure the solution is scalable for large input sizes.\n- Maintain code readability and simplicity.\nWe will use a list to store the array and perform operations directly on it. For the replacement operation, we will use a dictionary to map values that need to be replaced, which will help in efficiently handling large numbers of queries. This approach ensures optimal time complexity by reducing the need to iterate over the entire list multiple times.\n", "requirement analysis:\nThe requirements focus on efficiently processing a large number of queries with optimal time complexity. The solution must handle edge cases and provide clear output. The constraints on input size and query types are crucial for ensuring performance.\nrequirement pool:\n- Efficiently process queries with optimal time complexity.\n- Handle edge cases correctly.\n- Provide clear and accurate output.\n- Ensure the solution is scalable for large input sizes.\n- Maintain simplicity in implementation.\nWe will use a list to store the elements and a dictionary to efficiently handle the replacement queries. The dictionary will map each element to its current replacement, allowing us to perform replacements in constant time. This approach ensures that we handle a large number of queries efficiently.\n", "requirement analysis:\nThe requirement is to process a series of queries on an integer array efficiently. The main challenge is to ensure optimal time complexity while handling up to 500,000 queries. The solution must be able to add elements and replace occurrences efficiently, considering edge cases such as large input sizes and frequent replacements.\nrequirement pool:\n- Efficiently process '1 x' queries to add elements to the array.\n- Efficiently process '2 x y' queries to replace elements in the array.\n- Ensure the solution handles edge cases correctly.\n- Optimize the solution for large input sizes.\n- Provide clear and accurate output.\nWe will use a list to store the elements and a dictionary to keep track of replacements. This approach allows us to efficiently handle the '1 x' queries by appending to the list and the '2 x y' queries by updating the dictionary. When processing the final output, we will apply the replacements from the dictionary to the list, ensuring optimal time complexity.\n", "requirement analysis:\nThe requirements focus on efficiently processing a large number of queries with optimal time complexity. The solution must handle edge cases and provide clear output. The constraints on input size and query types are crucial for designing the algorithm.\nrequirement pool:\n- Efficiently process queries with optimal time complexity.\n- Handle edge cases correctly.\n- Ensure clarity and correctness of output.\n- Support large input sizes.\n- Maintain simplicity in implementation.\nWe will use a list to store the array and perform operations directly on it. For the replacement operation, we will use a dictionary to map values that need to be replaced, which will help in efficiently handling large numbers of queries. This approach ensures optimal time complexity by avoiding repeated traversal of the list for replacements.\n", "requirement analysis:\nThe requirements focus on efficiently processing a large number of queries with optimal time complexity. The solution must handle edge cases and provide clear output. The constraints on input size and query types necessitate a robust and scalable approach.\nrequirement pool:\n- Efficiently process queries with optimal time complexity.\n- Handle edge cases correctly.\n- Provide clear and accurate output.\n- Ensure scalability for large input sizes.\n- Maintain simplicity in implementation.\nWe will use a dictionary to keep track of replacements to efficiently handle the '2 x y' queries. This will allow us to perform replacements in constant time by mapping each element to its final value. We will then apply these mappings to the array at the end to produce the final result. This approach ensures optimal time complexity for a large number of queries.\n", "requirement analysis:\nThe requirements focus on efficiently processing a large number of queries with optimal time complexity. The solution should handle edge cases and provide clear output. The constraints on input size and query types are crucial for designing the algorithm.\nrequirement pool:\n- Efficient query processing\n- Optimal time complexity\n- Handling edge cases\n- Clear output format\n- Scalability for large inputs\nWe will use a list to store the elements and a dictionary to efficiently handle the replacement queries. The dictionary will map each element to its current replacement, allowing us to perform replacements in constant time. This approach ensures that we handle a large number of queries efficiently.\n", "requirement analysis:\nThe requirement is to process a series of queries on an integer array efficiently. The main challenge is to ensure optimal time complexity, especially when replacing elements in the array. The solution should handle up to 500,000 queries and provide the final array as output.\nrequirement pool:\n- Efficiently process '1 x' queries to add elements to the array.\n- Efficiently process '2 x y' queries to replace elements in the array.\n- Ensure the solution handles edge cases smoothly.\n- Provide clear and accurate output format.\n- Optimize for large input sizes.\nWe will use a list to store the elements and a dictionary to efficiently handle the replacement queries. The dictionary will map each element to its current replacement, allowing us to perform replacements in constant time. This approach ensures that we can handle up to 500,000 queries efficiently.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 0, "round": 471, "examples": "\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].", "mutate_method": "expand_one2two", "parent_index": 318}
