{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. He then sorted them in non-decreasing order. As a result, he got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. He then sorted them in non-decreasing order. As a result, he got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences of array a.\n\n    Returns:\n        List[int]: The original array a of 3 integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    sum_a = b[-1]\n    # The second largest element in b is the sum of two of the original integers\n    sum_two = b[-2]\n    # Deduce the other two integers\n    a2 = sum_two - a1\n    a3 = sum_a - sum_two\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences\n           of the original array.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The smallest element in b is one of the original numbers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original numbers\n    total_sum = b[6]\n    # The sum of the other two numbers can be found by subtracting a1 from total_sum\n    sum_of_two = total_sum - a1\n    # The second smallest element in b is the sum of two of the original numbers\n    a2 = b[1]\n    # The third smallest element in b is the sum of two of the original numbers\n    a3 = b[2]\n    # Deduce the third number using the sum_of_two and a2\n    a3 = sum_of_two - a2\n\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences of an array of three integers.\n\n    Returns:\n        Tuple[int, int, int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the elements of a\n    a1 = b[0]\n    # The largest element in b is the sum of all three elements of a\n    a1_a2_a3 = b[6]\n    # The second largest element in b is the sum of the two largest elements of a\n    a2_a3 = b[5]\n    \n    # Calculate the individual elements\n    a2 = a1_a2_a3 - b[4]  # a2 = a1_a2_a3 - (a1 + a3)\n    a3 = a1_a2_a3 - a1 - a2  # a3 = a1_a2_a3 - a1 - a2\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of non-empty subsequences.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The smallest three numbers in the sorted array are the individual elements of the original array.\n    # The largest number is the sum of all three elements.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements a\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements of a\n        a2 = b[6] - a1\n        # The second largest element in b is the sum of the two largest elements of a\n        a3 = b[5] - a1\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of non-empty subsequences.\n\n    Returns:\n        List[int]: The original array a of 3 integers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of a\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - (a1 + a2)  # The largest number in b is the sum of all three elements of a\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the given sorted array of subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the restored original array of three integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is one of the original elements of a\n        a1 = case[0]\n        # The second smallest element in b is another original element of a\n        a2 = case[1]\n        # The largest element in b is the sum of all three elements of a\n        a3 = case[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[list[int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        list[list[int]]: List of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[-2]\n        \n        # Deduce the elements of a\n        a2 = sum_two_largest - a1\n        a3 = sum_a - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nnumber_of_test_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(number_of_test_cases)]\n\n# Call the function and print the results\nresults = restore_original_array(number_of_test_cases, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of lists, each containing 3 integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element b[0] is the smallest number in the original array a.\n        a1 = b[0]\n        # The largest element b[6] is the sum of all three numbers in a.\n        sum_all = b[6]\n        # By subtracting b[0] from b[6], we get the sum of the other two numbers.\n        sum_two = sum_all - a1\n        # The second smallest element b[1] is the second smallest number in the original array a.\n        a2 = b[1]\n        # The third number can be found by subtracting a1 and a2 from sum_two.\n        a3 = sum_two - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nnum_test_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        a2 = b[-1] - a1\n        # The second largest element in b is the sum of the two largest elements in a\n        a3 = b[-2] - a1\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly to ensure it passes all test cases.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution can handle up to 5000 test cases efficiently.\n- Format the output correctly for each test case.\n- Optimize the solution for large integer values.\n- Provide a user-friendly interface for input and output.\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the smallest element in b is one of the original integers, and the largest element in b is the sum of all three original integers. By using these observations, we can efficiently restore the original array a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b of sums, the smallest element b[0] is one of the original numbers. The largest element b[6] is the sum of all three original numbers. By subtracting b[0] from b[6], we can find the sum of the other two numbers. Using b[1] and b[2], which are the sums of two of the original numbers, we can deduce the individual numbers. This approach is efficient and handles large numbers well.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring that the output is correct and adheres to the input-output format.\nrequirement pool:\n- Restore the original array from the given sums\n- Handle up to 5000 test cases efficiently\n- Ensure the solution is easy to understand and verify\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will use a straightforward approach to solve the problem. Given the sorted array b of sums of all non-empty subsequences of an array a of three integers, we can deduce that the smallest element in b is one of the elements of a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate and clear output for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large integer values up to 10^9\n- Ensure the solution is scalable for up to 5000 test cases\n- Provide clear and accurate output format\n- Optimize for performance and clarity\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and efficiently restores the original array of three integers. The approach leverages the fact that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. This allows us to deduce the original array by simple arithmetic operations. We will use Python's built-in capabilities to handle large integers and multiple test cases efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure output format is correct for each test case\n- Optimize for large numbers and multiple test cases\n- Provide clear documentation and examples\n- Consider edge cases and constraints\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a from b. We will iterate over each test case, extract the necessary elements from b, and print the result.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from the sorted sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Implement the main algorithm to restore the array a from b.\n- Optimize the solution for handling the maximum input size efficiently.\n- Ensure the solution is easy to understand and maintain.\n- Provide comprehensive test coverage for edge cases.\n- Document the code for better readability and future maintenance.\nWe will implement a function that takes the sorted array b of 7 integers and returns the original array a of 3 integers. The key observation is that the smallest three numbers in b are the individual elements of a, and the largest number in b is the sum of all three elements of a. Using these observations, we can deduce the values of a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Implement the main logic to deduce the original array from the given sums.\n- Ensure the solution is optimized for handling large inputs and multiple test cases.\n- Provide clear and formatted output as per the requirements.\n- Include error handling for unexpected input scenarios.\n- Optimize the code for readability and maintainability.\nWe will leverage the fact that the smallest element in the sorted array b is one of the original elements of array a. The largest element in b is the sum of all three elements of a. By using these properties, we can deduce the original array a by selecting the smallest, second smallest, and the difference between the largest and the sum of the smallest two elements.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution is easy to understand and maintain.\n- Optimize for large integer values.\n- Provide detailed error messages for invalid inputs.\nWe will use a straightforward approach to solve the problem. Given the sorted array b of sums of all non-empty subsequences of array a, we can deduce that the smallest element in b is the smallest element in a. The largest element in b is the sum of all elements in a. The second largest element in b is the sum of the two largest elements in a. Using these observations, we can easily reconstruct the original array a. This approach is efficient and handles the constraints smoothly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution works with large integer values.\n- Provide clear and formatted output.\n- Optimize for speed and simplicity.\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b of sums, the smallest element b[0] is the smallest number in the original array a. The largest element b[6] is the sum of all three numbers in a. By subtracting b[0] from b[6], we get the sum of the other two numbers. Using these insights, we can efficiently restore the original array a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must strictly follow the specified format.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums.\n- Ensure the solution can handle the maximum constraints efficiently.\n- Validate the input format and constraints before processing.\n- Optimize the solution for performance and memory usage.\n- Provide detailed comments and documentation for the code.\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a.\n"], "scores": [], "pass_results": [true, false, false, true, false, false, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 63, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 83}
