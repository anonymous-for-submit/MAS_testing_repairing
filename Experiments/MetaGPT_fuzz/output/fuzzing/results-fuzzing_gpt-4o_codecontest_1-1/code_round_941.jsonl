{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive numbers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b of 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, and 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Use the properties of subsequences and their sums to deduce the original array.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive numbers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b of 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, and 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Use the properties of subsequences and their sums to deduce the original array.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\ndef restore_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restore the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the restored array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three numbers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest number in the sorted list is one of the original numbers\n        a1 = b[0]\n        # The second smallest number is another original number\n        a2 = b[1]\n        # The largest number is the sum of all three original numbers\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_array_from_sums(t: int, test_cases: list[list[int]]) -> list[list[int]]:\n    \"\"\"Restore the original array 'a' from the given array 'b' of sums of subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        list[list[int]]: A list of results, each containing 3 integers representing the original array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements of a\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_array_from_sums(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three numbers from the given list of sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        A list of tuples, each containing three integers representing the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest number in b is a1\n        a1 = b[0]\n        # The second smallest number in b is a2\n        a2 = b[1]\n        # The largest number in b is the sum of a1, a2, and a3\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array of three numbers from the given subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the restored original array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the case to ensure it is in ascending order\n        case.sort()\n        # The smallest number is a1\n        a1 = case[0]\n        # The second smallest number is a2\n        a2 = case[1]\n        # The largest number is the sum of a1, a2, and a3\n        a3 = case[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest element in b is the smallest element in the original array a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in the original array a\n    sum_a = b[6]\n    # The second largest element in b is the sum of two largest elements in the original array a\n    sum_two_largest = b[5]\n    # Deduce the second and third elements of the original array\n    a2 = sum_two_largest - a1\n    a3 = sum_a - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restore the original array from the sorted subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing 7 integers representing\n                    the sorted sums of all non-empty subsequences of an array of 3 numbers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest number in b is one of the original numbers\n        a1 = b[0]\n        # The second smallest number in b is another original number\n        a2 = b[1]\n        # The largest number in b is the sum of all three original numbers\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three numbers from the given subsequence sums.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers\n                                      representing the sorted sums of all non-empty subsequences\n                                      of an array of three positive numbers.\n\n    Returns:\n        List[List[int]]: A list of lists, each containing the three integers of the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest number in b is one of the original numbers\n        a1 = b[0]\n        # The largest number in b is the sum of all three original numbers\n        a1_a2_a3 = b[6]\n        # The second smallest number in b is another original number\n        a2 = b[1]\n        # Deduce the third number using the sum of all three numbers\n        a3 = a1_a2_a3 - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three numbers from the given subsequence sums.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers\n                                      representing the sorted sums of all non-empty subsequences\n                                      of an array of three numbers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the original array of three numbers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest number in b is one of the original numbers\n        a1 = b[0]\n        # The second smallest number in b is another original number\n        a2 = b[1]\n        # The largest number in b is the sum of all three original numbers\n        a3 = b[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three positive numbers from the sorted list of subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted subsequence sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for sums in test_cases:\n        # The smallest number in the sorted list is one of the original numbers\n        a1 = sums[0]\n        # The largest number is the sum of all three original numbers\n        total_sum = sums[-1]\n        # The second largest number is the sum of two of the original numbers\n        sum_two = sums[-2]\n        # Deduce the other two numbers\n        a2 = sum_two - a1\n        a3 = total_sum - sum_two\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing an array of three positive integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases, ensuring that the output format is strictly followed.\nrequirement pool:\n- Implement the main logic to deduce array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Validate the input to ensure it meets the constraints.\n- Optimize the solution for large values within the constraints.\n- Provide detailed comments and documentation for the code.\nWe will deduce the original array 'a' from the given array 'b' by leveraging the properties of subsequences. Since 'b' is sorted and represents the sums of all non-empty subsequences of 'a', the smallest element in 'b' is the smallest element of 'a'. The largest element in 'b' is the sum of all elements in 'a'. By using these properties, we can deduce the three elements of 'a'. Specifically, the three elements of 'a' can be found as follows: a_1 is the smallest element in 'b', a_2 is the second smallest element in 'b', and a_3 can be found by subtracting a_1 and a_2 from the largest element in 'b'.\n", "requirement analysis:\nThe problem requires deducing the original array of three numbers from the given sorted list of subsequence sums. The key observation is that the smallest number in the list is one of the original numbers, and the largest number is the sum of all three. By using these properties, we can efficiently reconstruct the original array.\nrequirement pool:\n- Implement the main logic to deduce the original array from the subsequence sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is easy to read and maintain.\n- Provide detailed comments and documentation for the code.\n- Include test cases to verify the solution against edge cases.\nWe will use the properties of subsequences to deduce the original array. The smallest number in the sorted list of sums is one of the original numbers, and the largest number is the sum of all three original numbers. By using these properties, we can efficiently reconstruct the original array. Specifically, the three numbers can be found as follows: a1 is the smallest number, a2 is the second smallest number, and a3 can be found by subtracting a1 and a2 from the largest number.\n", "requirement analysis:\nThe problem requires deducing the original array of three numbers from the given sorted list of sums of all non-empty subsequences. The key observation is that the smallest three numbers in the sorted list are the individual elements of the array, and the largest number is the sum of all three elements. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the logic to deduce array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide clear and concise output for each test case.\n- Consider edge cases and ensure robustness.\nWe will deduce the original array 'a' from the given array 'b' by leveraging the properties of subsequences. The smallest three numbers in 'b' are the individual elements of 'a', and the largest number in 'b' is the sum of all three elements of 'a'. By identifying these elements, we can reconstruct 'a'. This approach is efficient and works within the constraints provided.\n", "requirement analysis:\nThe task requires deducing the original array of three numbers from the given sorted list of subsequence sums. The key observation is that the smallest number in the list is one of the original numbers, and the largest number is the sum of all three. By using these properties, we can efficiently determine the original array.\nrequirement pool:\n- Implement the algorithm to deduce the original array from subsequence sums.\n- Ensure the solution is optimized for large input sizes.\n- Provide clear documentation and examples for users.\n- Include error handling for invalid inputs.\n- Enhance the user interface for better readability.\nWe will use the properties of subsequences to deduce the original array. The smallest number in the sorted list of sums is one of the original numbers, and the largest number is the sum of all three original numbers. By using these properties, we can efficiently determine the original array. Specifically, the three numbers can be found as follows: a1 is the smallest number, a2 is the second smallest number, and a3 can be found by subtracting a1 and a2 from the largest number.\n", "requirement analysis:\nThe task requires deducing the original array of three numbers from the given sorted sums of all non-empty subsequences. The key observation is that the smallest number in the sorted list is one of the original numbers, and the largest number is the sum of all three. By using these properties, we can efficiently determine the original array.\nrequirement pool:\n- Implement the algorithm to deduce the original array from subsequence sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the output format is consistent with the requirements.\n- Test the solution with edge cases and large inputs.\n- Document the solution for clarity and maintenance.\nWe will use the properties of the subsequences to deduce the original array. The smallest number in the sorted list is one of the original numbers, and the largest number is the sum of all three. The second smallest number is another original number. By subtracting these appropriately, we can find the third number. This approach is efficient and handles the constraints well.\n", "requirement analysis:\nThe problem requires deducing the original array from the sorted sums of its non-empty subsequences. Given the constraints, the solution must efficiently handle up to 5000 test cases and large integer values. The approach should leverage the properties of subsequences to restore the array accurately.\nrequirement pool:\n- Develop an algorithm to restore the original array from subsequence sums\n- Ensure the solution is efficient for up to 5000 test cases\n- Optimize the algorithm for handling large integer values\n- Validate the output format for correctness\n- Consider edge cases and multiple possible solutions\nWe will use the properties of subsequences to deduce the original array. Given the sorted array b of sums, the smallest element b[0] is the smallest number in the original array a. The largest element b[6] is the sum of all elements in a. By using these properties, we can efficiently restore the array a for each test case.\n", "requirement analysis:\nThe problem requires deducing the original array of three numbers from the given sorted sums of all non-empty subsequences. The key observation is that the smallest number in the sorted list is one of the original numbers, and the largest number is the sum of all three. By using these properties, we can efficiently reconstruct the original array.\nrequirement pool:\n- Implement the main algorithm to deduce the original array from subsequence sums.\n- Optimize the solution for handling up to 5000 test cases efficiently.\n- Ensure the solution is robust and handles edge cases correctly.\n- Write clear and maintainable code with comments explaining the logic.\n- Test the solution with a variety of test cases to ensure accuracy.\nWe will leverage the properties of the subsequences. The smallest number in the sorted list is one of the original numbers, and the largest number is the sum of all three. The second smallest number is another original number. By subtracting these from the largest number, we can deduce the third number. This approach is efficient and straightforward, allowing us to handle up to 5000 test cases efficiently.\n", "requirement analysis:\nThe problem requires deducing the original array of three numbers from the given sorted sums of all non-empty subsequences. The key observation is that the smallest number in the sorted list is one of the original numbers, and the largest number is the sum of all three original numbers. By using these properties, we can efficiently reconstruct the original array.\nrequirement pool:\n- Implement the main algorithm to deduce the original array from the subsequence sums.\n- Optimize the solution for handling up to 5000 test cases efficiently.\n- Ensure the solution is robust and handles edge cases correctly.\n- Write clear and maintainable code with comments explaining the logic.\n- Test the solution with a variety of test cases to ensure accuracy.\nWe will leverage the properties of the subsequences to deduce the original array. The smallest number in the sorted list is one of the original numbers, and the largest number is the sum of all three original numbers. By using these properties, we can efficiently reconstruct the original array. We will use simple arithmetic operations to deduce the three numbers from the given sorted list of sums.\n", "requirement analysis:\nThe task requires deducing the original array of three numbers from the given sorted sums of all non-empty subsequences. The key observation is that the smallest number in the sorted list is one of the original numbers, and the largest number is the sum of all three. By using these properties, we can efficiently reconstruct the original array.\nrequirement pool:\n- Implement the algorithm to deduce the original array from subsequence sums.\n- Ensure the solution is efficient for the maximum input size.\n- Provide clear and formatted output for each test case.\n- Handle edge cases where numbers are very large.\n- Optimize for readability and maintainability of the code.\nWe will use the properties of the subsequences to deduce the original array. The smallest number in the sorted list is one of the original numbers, and the largest number is the sum of all three. The second smallest number is another original number. By subtracting these appropriately, we can find the third number. This approach is efficient and works within the constraints provided.\n", "requirement analysis:\nThe problem requires deducing the original array of three numbers from the given sorted list of subsequence sums. The key observation is that the smallest number in the list is one of the original numbers, and the largest number is the sum of all three. By using these properties, we can efficiently reconstruct the original array.\nrequirement pool:\n- Implement the algorithm to deduce the original array from subsequence sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is well-documented and easy to understand.\n- Provide test cases to validate the solution.\n- Consider edge cases and ensure robustness of the solution.\nWe will use the properties of the subsequence sums to deduce the original array. The smallest number in the sorted list of sums is one of the original numbers, and the largest number is the sum of all three original numbers. By identifying these and using the properties of the sums, we can reconstruct the original array. We will use Python's built-in capabilities to handle the input and output efficiently.\n"], "scores": [], "pass_results": [true, false, true, false, true, true, true, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 941, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 198}
