{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed an array a of 3 positive integers, then he enumerated the sums of all non-empty subsequences of this array and arranged them in non-decreasing order; consequently, he obtained an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Consider edge cases where b might contain duplicate sums that can lead to multiple valid arrays a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed an array a of 3 positive integers, then he enumerated the sums of all non-empty subsequences of this array and arranged them in non-decreasing order; consequently, he obtained an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Consider edge cases where b might contain duplicate sums that can lead to multiple valid arrays a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of an array of three integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the elements of a\n    a1 = b[0]\n    # The second smallest element in b is another element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements of a\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of 7 integers.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 sorted integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = case[0]\n        # The largest element in b is the sum of all three original integers\n        a1_a2_a3 = case[6]\n        # The second largest element in b is the sum of the two largest original integers\n        a2_a3 = case[5]\n        \n        # Calculate the other two original integers\n        a2 = a2_a3 - a1\n        a3 = a1_a2_a3 - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the given sorted array b of subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of array a.\n\n    Returns:\n        List[int]: The original array a consisting of 3 positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    a1_a2_a3 = b[-1]\n    # The second smallest element in b is the second smallest element in a\n    a2 = b[1]\n    # Calculate the third element using the sum of all elements\n    a3 = a1_a2_a3 - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        List[List[int]]: A list of results, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is a_1, the second smallest is a_2,\n        # and the largest element is the sum of all elements in a.\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[-1] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input().strip())\n    test_cases = [list(map(int, input().strip().split())) for _ in range(n)]\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of array 'a'.\n\n    Returns:\n        List[int]: A list of 3 integers representing the original array 'a'.\n    \"\"\"\n    # The smallest element in 'b' is one of the elements of 'a'\n    a1 = b[0]\n    # The largest element in 'b' is the sum of all elements of 'a'\n    a1_a2_a3 = b[6]\n    # The second largest element in 'b' is the sum of the two largest elements of 'a'\n    a2_a3 = b[5]\n    \n    # Calculate the individual elements of 'a'\n    a2 = a2_a3 - a1\n    a3 = a1_a2_a3 - a2_a3\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # The second element can be found by subtracting a1 from b[1] or b[2] (whichever is larger)\n        a2 = b[1] - a1 if b[1] - a1 > 0 else b[2] - a1\n        # The third element is the difference between the largest element in b and the sum of the first two elements of a\n        a3 = sum_a - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences\n                       of an original array of 3 integers.\n\n    Returns:\n        List[int]: The original array of 3 integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    a1_a2_a3 = b[6]\n    # The second smallest element in b is another original integer\n    a2 = b[1]\n    # Calculate the third integer using the sum of all three\n    a3 = a1_a2_a3 - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of 7 integers.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty\n                       subsequences of the original array.\n\n    Returns:\n        List[int]: The original array of 3 integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    a1_a2_a3 = b[6]\n    # The second smallest element in b is another original integer\n    a2 = b[1]\n    # Calculate the third original integer\n    a3 = a1_a2_a3 - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty\n                       subsequences of an original array of three integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    a1_a2_a3 = b[6]\n    # The second smallest element in b is another original integer\n    a2 = b[1]\n    # Calculate the third original integer\n    a3 = a1_a2_a3 - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of 7 integers.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 sorted integers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = b[0]\n        # The second smallest element in b is another original integer\n        a2 = b[1]\n        # The largest element in b is the sum of all three original integers\n        a3 = b[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    \n    # Call the function and get results\n    results = restore_array(t, test_cases)\n    \n    # Output each result\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring robustness against edge cases with duplicate sums.\nrequirement pool:\n- Restore the original array from the given sums\n- Handle edge cases with duplicate sums\n- Optimize for performance given the constraints\n- Ensure consistent output format\n- Provide clear documentation of the logic\nWe will use a straightforward approach to solve the problem. Given the sorted array b of sums of all non-empty subsequences of an array a of three positive integers, we can deduce that the smallest element in b is one of the elements of a. The largest element in b is the sum of all three elements of a. The second smallest element in b is another element of a. By using these observations, we can restore the original array a. We will iterate over each test case, extract the necessary elements from b, and print the restored array a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of their subsequence sums. The solution must handle up to 5000 test cases efficiently, considering the constraints on the input values. The presence of duplicate sums in the input array b can lead to multiple valid outputs, and the solution should be able to handle such cases gracefully.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle edge cases with duplicate sums.\n- Optimize the solution for performance.\n- Ensure the solution is easy to understand and implement.\n- Provide clear documentation and examples.\nWe will implement a function that takes the sorted array b of 7 integers and restores the original array a of 3 integers. The approach is based on the observation that the smallest element in b is one of the original integers, and the largest element is the sum of all three original integers. By using these observations, we can deduce the original integers efficiently. We will use basic list operations and arithmetic to achieve this, ensuring the solution handles edge cases with duplicate sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of seven integers, which represent all possible non-empty subsequence sums. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Handle up to 5000 test cases efficiently.\n- Consider edge cases with duplicate sums.\n- Provide a valid output even if multiple solutions exist.\n- Optimize for large integer values.\nWe will use a simple mathematical approach to restore the original array a from the given array b. Since b is sorted and represents all possible non-empty subsequence sums of a, we can deduce that the smallest element in b is the smallest element in a. The largest element in b is the sum of all elements in a. By using these properties, we can efficiently determine the original array a. This approach is efficient and handles up to 5000 test cases with large integer values.\n", "requirement analysis:\nThe requirement is to restore the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently, manage large numbers, and address edge cases with duplicate sums. The output must be consistent and follow the specified format.\nrequirement pool:\n- Efficiently restore array a from array b\n- Handle edge cases with duplicate sums\n- Ensure solution is fast and responsive\n- Maintain clear and consistent output format\n- Optimize for large number handling\nWe will implement a function that takes the sorted array b and deduces the original array a. Since b contains the sums of all non-empty subsequences of a, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all elements in a. Using these properties, we can efficiently restore a from b.\n", "requirement analysis:\nThe task requires restoring the original array from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The input and output format must be strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle edge cases with duplicate sums\n- Optimize for large input sizes\n- Ensure consistent input-output format\n- Provide multiple valid solutions if possible\nWe will use a straightforward approach to restore the original array 'a' from the given sorted array 'b'. The key observation is that the smallest element in 'b' is one of the elements of 'a', and the largest element in 'b' is the sum of all elements of 'a'. By using these observations, we can deduce the three elements of 'a'. We will iterate over each test case, extract the necessary elements from 'b', and print the result. This approach is efficient and handles edge cases with duplicate sums naturally.\n", "requirement analysis:\nThe problem requires restoring an array of three integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must handle multiple test cases efficiently and account for potential duplicate sums that could lead to multiple valid solutions.\nrequirement pool:\n- Implement a function to restore the original array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Account for edge cases with duplicate sums in array b.\n- Provide clear and concise output for each test case.\n- Optimize the solution for large integer values in array b.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting appropriate elements from b. Specifically, the first element of a is b[0], the second element can be found by subtracting b[0] from b[1] or b[2] (whichever is larger), and the third element is the difference between the largest element in b and the sum of the first two elements of a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of seven integers, which represent all possible non-empty subsequence sums of the original array. The solution must handle up to 5000 test cases efficiently, considering edge cases with duplicate sums.\nrequirement pool:\n- Develop an algorithm to restore the original array from subsequence sums.\n- Ensure the solution is efficient for up to 5000 test cases.\n- Handle edge cases with duplicate sums effectively.\n- Provide clear and concise output format.\n- Optimize the solution for performance and scalability.\nWe will implement a function that takes the sorted array of subsequence sums and deduces the original array of three integers. The key observation is that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently restore the original array. We will use Python's built-in capabilities for handling large integers and simple list operations to achieve this.\n", "requirement analysis:\nThe task requires restoring an array of 3 integers from a sorted array of 7 integers representing sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The output must match the input format precisely.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle edge cases with duplicate sums\n- Optimize for large input sizes\n- Ensure output format consistency\n- Provide multiple valid solutions if possible\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the smallest element in b is one of the original integers, and the largest element in b is the sum of all three original integers. By using these observations, we can deduce the original array efficiently. We will use Python's built-in capabilities to handle large integers and ensure the solution is efficient for up to 5000 test cases.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The constraints ensure that a valid original array always exists.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Handle edge cases with duplicate sums efficiently.\n- Ensure the solution is fast and can handle up to 5000 test cases.\n- Provide clear and concise output for each test case.\n- Optimize for large numbers up to 10^9.\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The key observation is that the smallest element in the sorted array b is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently restore the original array. We will use basic list operations and arithmetic to achieve this without any complex data structures.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must handle multiple test cases efficiently and provide correct outputs for each. The constraints ensure that a valid solution always exists.\nrequirement pool:\n- Implement the main algorithm to restore array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the algorithm for large integer values.\n- Provide clear and formatted output for each test case.\n- Consider edge cases with duplicate sums in array b.\nWe will implement a function that takes the sorted array b of 7 integers and restores the original array a of 3 integers. The key observation is that the smallest element in b is one of the original integers, and the largest element in b is the sum of all three original integers. By using these observations, we can deduce the values of a_1, a_2, and a_3 efficiently. We will use basic list operations and arithmetic to achieve this without any additional libraries.\n"], "scores": [], "pass_results": [true, true, true, false, false, true, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 899, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 186}
