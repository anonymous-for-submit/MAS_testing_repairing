{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. He then sorted them in non-decreasing order. As a result, he got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. You need to make sure that the restored array a consists of positive integers only.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. He then sorted them in non-decreasing order. As a result, he got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. You need to make sure that the restored array a consists of positive integers only.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing sums of all non-empty subsequences of a.\n\n    Returns:\n        List[int]: The original array a consisting of 3 positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    a1_a2_a3 = b[6]\n    # The second largest element in b is the sum of the two largest elements in a\n    a2_a3 = b[5]\n    \n    # Calculate a2 and a3\n    a2 = b[1]  # The second smallest element in b is the second smallest element in a\n    a3 = a2_a3 - a2  # a3 is the difference between the sum of the two largest elements and a2\n    \n    # Calculate a1 using the sum of all elements\n    a1 = a1_a2_a3 - a2 - a3\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element of a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements of a\n        a1_a2_a3 = b[6]\n        # The second largest element in b is the sum of the two largest elements of a\n        a2_a3 = b[5]\n        \n        # Calculate a2 and a3\n        a2 = a2_a3 - a1\n        a3 = a1_a2_a3 - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing three positive integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in the original array a.\n        sum_all = b[-1]\n        # The smallest number in b is one of the original numbers.\n        a1 = b[0]\n        # The second smallest number in b is another original number.\n        a2 = b[1]\n        # The third number can be found by subtracting the sum of the two smallest numbers from the largest number in b.\n        a3 = sum_all - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original numbers\n        a1 = b[0]\n        # The largest element in b is the sum of all three original numbers\n        a1_a2_a3 = b[6]\n        # The second smallest element in b is another original number\n        a2 = b[1]\n        # Calculate the third original number\n        a3 = a1_a2_a3 - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The largest number in the sorted array is the sum of all three numbers in the original array.\n        a1_plus_a2_plus_a3 = case[6]\n        # The smallest number in the sorted array is one of the original numbers.\n        a1 = case[0]\n        # The second smallest number in the sorted array is another original number.\n        a2 = case[1]\n        # The third smallest number in the sorted array is the sum of the two smallest numbers in the original array.\n        a1_plus_a2 = case[2]\n        \n        # Calculate the third number in the original array.\n        a3 = a1_plus_a2_plus_a3 - a1 - a2\n        \n        # Append the restored array to the results.\n        results.append([a1, a2, a3])\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    result = restore_array(n, test_cases)\n    \n    # Output the results\n    for res in result:\n        print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, each containing the restored array of three integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in the original array a.\n        total_sum = b[-1]\n        # The smallest number in b is one of the original numbers.\n        a1 = b[0]\n        # Deduce the other two numbers by subtracting the smallest number from the second and third smallest numbers in b.\n        a2 = b[1] - a1\n        a3 = b[2] - a1\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function to restore original arrays\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array of three positive integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of non-empty subsequences.\n\n    Returns:\n        Tuple[int, int, int]: A tuple containing the three positive integers of the original array.\n    \"\"\"\n    # The smallest three numbers in the sorted array are the individual elements of the original array.\n    # The largest number is the sum of all three numbers.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in a.\n        sum_all = b[-1]\n        # The smallest three numbers in b are the individual numbers in a.\n        a1 = b[0]\n        a2 = b[1]\n        a3 = sum_all - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences\n           of the original array.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The smallest element in b is the smallest element of the original array a.\n    a1 = b[0]\n    # The largest element in b is the sum of all three elements of a.\n    sum_a = b[-1]\n    # The second smallest element in b is the sum of the smallest element and one other element.\n    a2 = b[1] - a1\n    # Deduce the third element using the total sum.\n    a3 = sum_a - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    restored_arrays = []\n    \n    for case in test_cases:\n        # The largest number in the sorted array b is the sum of all three numbers in the original array a.\n        sum_all = case[-1]\n        \n        # The smallest number in b is one of the original numbers.\n        a1 = case[0]\n        \n        # The second smallest number in b is another original number.\n        a2 = case[1]\n        \n        # The third number can be found by subtracting the sum of the two smallest numbers from the largest number in b.\n        a3 = sum_all - a1 - a2\n        \n        # Append the restored array to the result list.\n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize for performance and simplicity\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can efficiently reconstruct the array a.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is consistent and clear.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide clear and consistent output format\n- Optimize for performance and accuracy\nWe will solve the problem by leveraging the properties of the sorted array b. Since b is the sorted list of all non-empty subsequence sums of a, the smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires restoring an array of three positive integers from a sorted array of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed.\nrequirement pool:\n- Restore the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Output the result in the specified format.\n- Handle large integer values up to 10^9.\n- Provide multiple valid outputs if possible.\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and restores the original array of three positive integers. The key observation is that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. The second smallest number in b is another original number. The third number can be found by subtracting the sum of the two smallest numbers from the largest number in b.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array.\nrequirement pool:\n- Develop a function to restore the original array from the given sums\n- Ensure the solution handles large numbers efficiently\n- Optimize the solution for scalability across multiple test cases\n- Provide clear and accurate output for each test case\n- Include detailed documentation for the solution\nWe will create a function that takes the sorted array of sums of non-empty subsequences and deduces the original array of three positive integers. The key observation is that the smallest element in the sorted array is one of the original numbers, and the largest element is the sum of all three original numbers. By using these observations, we can efficiently restore the original array.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Implement the main logic to restore the original array from the given sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for performance with large inputs.\n- Provide clear documentation and comments in the code.\n- Include additional test cases to verify edge cases.\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and restores the original array of three integers. The key observation is that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. The second smallest number in b is another original number. The third smallest number in b is the sum of the two smallest numbers in a. Using these observations, we can efficiently restore the original array.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct output for each case.\nrequirement pool:\n- Implement the main logic to restore the original array from the given sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Format the output correctly for each test case.\n- Optimize the solution for performance.\n- Provide clear documentation and comments in the code.\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The key observation is that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. By using these observations, we can deduce the other two numbers by subtracting the smallest number from the second and third smallest numbers in b.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is clear and follows the specified format.\nrequirement pool:\n- Efficiently compute the original array from the given sums\n- Ensure the solution handles multiple test cases\n- Provide clear and accurate output for each test case\n- Optimize for large integer values\n- Maintain simplicity in implementation\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and deduces the original array of three positive integers. The key observation is that the largest number in the sorted array is the sum of all three numbers, and the smallest three numbers are the individual elements of the original array. We will use this observation to efficiently restore the original array for each test case.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output is correct and easy to interpret. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array a from the given array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide clear and concise output for each test case.\n- Consider edge cases and ensure robustness.\nWe will implement a function that takes the sorted array b of sums of non-empty subsequences and restores the original array a of three positive integers. The key observation is that the largest number in b is the sum of all three numbers in a. The smallest number in b is one of the original numbers. The second smallest number in b is another original number. The third smallest number in b is the third original number. We can use these observations to efficiently restore the array a.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array.\nrequirement pool:\n- Efficiently restore the original array from the given sums\n- Ensure the solution is scalable for multiple test cases\n- Handle large integer values efficiently\n- Provide clear and accurate output for each test case\n- Offer a user-friendly interface for input and output\nWe will solve the problem by identifying the three original integers from the sorted array of sums. The smallest element in the array b is the smallest element of the original array a. The largest element in b is the sum of all three elements of a. By using these two elements and the second smallest element in b, we can deduce the original array a. This approach is efficient and works well within the constraints provided.\n", "requirement analysis:\nThe task requires restoring an array of three positive integers from a sorted array of sums of its non-empty subsequences. The solution must handle multiple test cases efficiently and ensure the output is correct for each case. The constraints ensure that a valid solution exists for each input.\nrequirement pool:\n- Restore the original array from the given sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Provide clear and accurate output for each test case\n- Handle large integer values up to 10^9\n- Optimize the solution for performance\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and restores the original array of three positive integers. The key observation is that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. The second smallest number in b is another original number. The third number can be found by subtracting the sum of the two smallest numbers from the largest number in b.\n"], "scores": [], "pass_results": [false, true, false, true, true, false, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 488, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 95}
