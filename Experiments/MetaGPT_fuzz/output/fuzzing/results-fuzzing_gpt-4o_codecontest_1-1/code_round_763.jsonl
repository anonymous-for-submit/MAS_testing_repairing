{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "prompt": "The robot can begin its motion from any tile. The robot executes the commands beginning with the first one, strictly in the order they appear in s. If the robot travels beyond the perimeter of the board, it falls and gets damaged. A command that leads the robot to break is not seen as successfully executed.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "repair_prompt": ["The robot can begin its motion from any tile. The robot executes the commands beginning with the first one, strictly in the order they appear in s. If the robot travels beyond the perimeter of the board, it falls and gets damaged. A command that leads the robot to break is not seen as successfully executed.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): A list of tuples where each tuple contains:\n            - n (int): Height of the grid.\n            - m (int): Width of the grid.\n            - s (str): Sequence of commands.\n\n    Returns:\n        List[Tuple[int, int]]: A list of tuples where each tuple contains the optimal starting\n        row and column for the robot for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        # Initialize the starting position\n        max_r, max_c = 1, 1\n        min_r, min_c = 1, 1\n        current_r, current_c = 1, 1\n\n        # Track the boundaries of the robot's path\n        for command in s:\n            if command == 'L':\n                current_c -= 1\n            elif command == 'R':\n                current_c += 1\n            elif command == 'U':\n                current_r -= 1\n            elif command == 'D':\n                current_r += 1\n\n            # Update the minimum boundaries\n            min_r = min(min_r, current_r)\n            min_c = min(min_c, current_c)\n            max_r = max(max_r, current_r)\n            max_c = max(max_c, current_c)\n\n            # Check if the robot would fall off the grid\n            if max_r - min_r >= n or max_c - min_c >= m:\n                break\n\n        # Calculate the optimal starting position\n        optimal_r = 1 - min_r\n        optimal_c = 1 - min_c\n\n        # Ensure the starting position is within the grid\n        optimal_r = max(1, min(n, optimal_r))\n        optimal_c = max(1, min(m, optimal_c))\n\n        results.append((optimal_r, optimal_c))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Output interface\n    results = find_starting_position(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the grid dimensions and command string.\n\n    Returns:\n        List[Tuple[int, int]]: List of starting positions (row, column) for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        # Initialize the best starting position\n        best_r, best_c = 1, 1\n        max_commands = 0\n\n        # Iterate over all possible starting positions\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n\n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n\n                    # Check if the robot is still within the grid\n                    if 1 <= r <= n and 1 <= c <= m:\n                        commands_executed += 1\n                    else:\n                        break\n\n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_r, best_c = start_r, start_c\n\n        results.append((best_r, best_c))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Output interface\n    results = find_starting_position(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    results = []\n    \n    for n, m, s in test_cases:\n        # Initialize the best starting position\n        best_r, best_c = 1, 1\n        max_commands_executed = 0\n        \n        # Iterate over all possible starting positions\n        for start_r in range(1, n + 1):\n            for start_c in range(1, m + 1):\n                r, c = start_r, start_c\n                commands_executed = 0\n                \n                # Simulate the execution of commands\n                for command in s:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n                    \n                    # Check if the robot is still within the grid\n                    if 1 <= r <= n and 1 <= c <= m:\n                        commands_executed += 1\n                    else:\n                        break\n                \n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_r, best_c = start_r, start_c\n        \n        results.append((best_r, best_c))\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n    \n    # Output interface\n    results = find_optimal_starting_position(t, test_cases)\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): A list of tuples where each tuple contains:\n            - n (int): Height of the grid.\n            - m (int): Width of the grid.\n            - s (str): Sequence of commands ('L', 'R', 'D', 'U').\n\n    Returns:\n        List[Tuple[int, int]]: A list of tuples where each tuple contains the optimal starting\n        position (row, column) for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        # Initialize variables to track the boundaries of the robot's movement\n        min_row, max_row = 0, 0\n        min_col, max_col = 0, 0\n        current_row, current_col = 0, 0\n\n        # Traverse the command string to determine the movement boundaries\n        for command in s:\n            if command == 'L':\n                current_col -= 1\n            elif command == 'R':\n                current_col += 1\n            elif command == 'U':\n                current_row -= 1\n            elif command == 'D':\n                current_row += 1\n\n            # Update the boundaries\n            min_row = min(min_row, current_row)\n            max_row = max(max_row, current_row)\n            min_col = min(min_col, current_col)\n            max_col = max(max_col, current_col)\n\n        # Calculate the optimal starting position\n        optimal_row = 1 - min_row\n        optimal_col = 1 - min_col\n\n        # Ensure the starting position is within the grid\n        if 1 <= optimal_row <= n - (max_row - min_row) and 1 <= optimal_col <= m - (max_col - min_col):\n            results.append((optimal_row, optimal_col))\n        else:\n            # If the calculated position is out of bounds, adjust to the nearest valid position\n            results.append((max(1, min(n, optimal_row)), max(1, min(m, optimal_col))))\n\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Output interface\n    results = find_optimal_starting_position(t, test_cases)\n    for r, c in results:\n        print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the grid dimensions and command string.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        # Initialize variables to track the best starting position\n        max_commands_executed = 0\n        best_start_position = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot is still within the grid\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n\n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_start_position = (start_row, start_col)\n\n        results.append(best_start_position)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    results = find_optimal_start(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    results = []\n    \n    for n, m, s in test_cases:\n        # Initialize variables to track the maximum area the robot can cover\n        max_r, max_c = 1, 1\n        min_r, min_c = 1, 1\n        current_r, current_c = 1, 1\n        \n        # Track the furthest extent of the robot's movement\n        max_extent_r, max_extent_c = 0, 0\n        min_extent_r, min_extent_c = 0, 0\n        \n        for command in s:\n            if command == 'L':\n                current_c -= 1\n            elif command == 'R':\n                current_c += 1\n            elif command == 'U':\n                current_r -= 1\n            elif command == 'D':\n                current_r += 1\n            \n            # Update the extents\n            max_extent_r = max(max_extent_r, current_r)\n            min_extent_r = min(min_extent_r, current_r)\n            max_extent_c = max(max_extent_c, current_c)\n            min_extent_c = min(min_extent_c, current_c)\n            \n            # Check if the robot can still be placed on the board\n            if (max_extent_r - min_extent_r < n) and (max_extent_c - min_extent_c < m):\n                max_r = 1 - min_extent_r\n                max_c = 1 - min_extent_c\n            else:\n                break\n        \n        results.append((max_r, max_c))\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n    \n    results = find_optimal_starting_position(t, test_cases)\n    for r, c in results:\n        print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_positions(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting positions for the robot on the grid for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing grid dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, commands in test_cases:\n        max_commands_executed = 0\n        optimal_position = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement\n                for command in commands:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot is still within the grid\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n\n                # Update the optimal position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    optimal_position = (start_row, start_col)\n\n        results.append(optimal_position)\n\n    return results\n\n# Input interface\nnumber_of_test_cases = int(input())\ntest_cases = []\nfor _ in range(number_of_test_cases):\n    n, m = map(int, input().split())\n    commands = input().strip()\n    test_cases.append((n, m, commands))\n\n# Output interface\nresults = find_optimal_starting_positions(number_of_test_cases, test_cases)\nfor result in results:\n    print(result[0], result[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_positions(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting positions for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the grid dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        max_commands_executed = 0\n        optimal_position = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot is still within the grid\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n\n                # Update the optimal position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    optimal_position = (start_row, start_col)\n\n        results.append(optimal_position)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    results = find_optimal_starting_positions(t, test_cases)\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing grid dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n    \n    for n, m, s in test_cases:\n        max_commands_executed = 0\n        optimal_position = (1, 1)\n        \n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n                \n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n                    \n                    # Check if the robot is still within the grid\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n                \n                # Update the optimal position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    optimal_position = (start_row, start_col)\n        \n        results.append(optimal_position)\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n    \n    # Call the function\n    results = find_optimal_starting_position(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot on a grid.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): A list of tuples where each tuple contains:\n            - n (int): Height of the grid.\n            - m (int): Width of the grid.\n            - s (str): Sequence of commands ('L', 'R', 'D', 'U').\n\n    Returns:\n        List[Tuple[int, int]]: A list of tuples where each tuple contains the optimal starting\n        row and column for the robot to execute the maximum number of commands without falling off the grid.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        # Initialize variables to track the boundaries of the robot's movement\n        min_row, max_row = 0, 0\n        min_col, max_col = 0, 0\n        current_row, current_col = 0, 0\n\n        # Simulate the robot's movement\n        for command in s:\n            if command == 'L':\n                current_col -= 1\n            elif command == 'R':\n                current_col += 1\n            elif command == 'U':\n                current_row -= 1\n            elif command == 'D':\n                current_row += 1\n\n            # Update the boundaries\n            min_row = min(min_row, current_row)\n            max_row = max(max_row, current_row)\n            min_col = min(min_col, current_col)\n            max_col = max(max_col, current_col)\n\n        # Calculate the optimal starting position\n        optimal_row = 1 - min_row\n        optimal_col = 1 - min_col\n\n        # Ensure the starting position is within the grid\n        if 1 <= optimal_row <= n - (max_row - min_row) and 1 <= optimal_col <= m - (max_col - min_col):\n            results.append((optimal_row, optimal_col))\n        else:\n            # If the calculated position is out of bounds, adjust to the nearest valid position\n            results.append((max(1, min(n, optimal_row)), max(1, min(m, optimal_col))))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Output interface\n    result = find_optimal_starting_position(t, test_cases)\n    for r, c in result:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires determining the optimal starting position for a robot on a grid to execute the maximum number of commands without falling off. The solution must handle up to 10,000 test cases efficiently, with grid dimensions and command sequences potentially reaching up to 1,000,000. The output should be the starting coordinates for each test case, ensuring the robot can execute the maximum number of commands without breaking.\nrequirement pool:\n- Implement the main algorithm to determine the optimal starting position for the robot.\n- Ensure the solution handles large input sizes efficiently.\n- Optimize the code for performance to handle the upper limits of input constraints.\n- Provide clear and concise output for each test case.\n- Consider edge cases where the grid is minimal or commands are repetitive.\nWe will implement a function that simulates the robot's movement on the grid. The function will iterate over possible starting positions and simulate the execution of the command sequence from each position. It will track the maximum number of commands executed without the robot falling off the grid. The solution will be optimized to handle large input sizes efficiently by using a greedy approach to determine the optimal starting position.\n", "requirement analysis:\nThe requirements focus on ensuring the robot can execute commands efficiently without falling off the board. The starting position should be optimized to allow maximum command execution. The output must be clear and accurate for each test case, adhering to the specified format.\nrequirement pool:\n- The robot must execute commands without falling off the board.\n- Determine the optimal starting position for maximum command execution.\n- Ensure the output format is clear and accurate for each test case.\n- Optimize the algorithm for handling large input sizes efficiently.\n- Provide flexibility in choosing any valid starting position if multiple exist.\nWe will implement a function that simulates the robot's movement on a grid based on the given commands. The function will iterate over possible starting positions and calculate the number of commands that can be executed without the robot falling off the grid. We will use efficient algorithms to handle large input sizes, ensuring the solution is optimal and runs within time limits. Libraries such as itertools can be used for efficient iteration over possible starting positions.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting position for the robot on a grid such that it can execute the maximum number of commands without falling off the grid. The solution must handle large grid sizes and command sequences efficiently, ensuring that the robot's path is calculated correctly for each test case.\nrequirement pool:\n- Determine the optimal starting position for the robot.\n- Ensure the solution handles large input sizes efficiently.\n- Optimize the algorithm for speed and accuracy.\n- Provide clear and concise output for each test case.\n- Consider edge cases where the grid size is minimal.\nWe will implement a function that simulates the robot's movement on the grid. The function will iterate over possible starting positions and simulate the execution of commands to determine the maximum number of commands that can be executed without the robot falling off the grid. We will use efficient iteration and boundary checks to handle large grid sizes and command sequences. The solution will be optimized for speed and accuracy, ensuring it can handle the maximum constraints efficiently.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting position for the robot on a grid to execute the maximum number of commands without falling off. The solution must handle large grid sizes and command sequences efficiently, ensuring that the robot does not exceed the grid boundaries.\nrequirement pool:\n- Determine the optimal starting position for the robot.\n- Ensure the robot does not fall off the grid during command execution.\n- Optimize the algorithm for large input sizes.\n- Provide clear and concise output for each test case.\n- Handle edge cases where the grid size is minimal.\nWe will implement a function that simulates the robot's movement on the grid based on the given commands. The function will iterate over possible starting positions and calculate the number of commands that can be executed without the robot falling off the grid. We will use efficient algorithms to handle large input sizes and ensure the solution is optimized for performance. The function will return the starting position that allows the maximum number of commands to be executed.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting position for the robot on a grid to execute the maximum number of commands without falling off. The solution must handle large grid sizes and command sequences efficiently, ensuring the robot does not exceed the grid boundaries.\nrequirement pool:\n- Determine the optimal starting position for the robot\n- Ensure the robot does not fall off the grid\n- Handle large command sequences efficiently\n- Provide clear output format for test cases\n- Optimize performance for large grid sizes\nWe will use a simulation approach to determine the optimal starting position for the robot. The algorithm will simulate the robot's movement from each possible starting position on the grid and track the number of commands successfully executed without falling off the grid. The optimal starting position will be the one that allows the maximum number of commands to be executed. Given the constraints, we will use efficient iteration and boundary checks to ensure performance. We will utilize Python's built-in capabilities for handling large data efficiently.\n", "requirement analysis:\nThe requirements focus on ensuring the robot can execute commands efficiently without falling off the board. The challenge lies in determining the optimal starting position for maximum command execution, especially given the constraints on board size and command sequence length.\nrequirement pool:\n- Implement command execution logic for the robot\n- Develop algorithm to prevent robot from falling off the board\n- Optimize starting position calculation for maximum command execution\n- Ensure scalability for large command sequences\n- Enhance user interface for better usability\nWe will implement a function to simulate the robot's movement on the board and determine the optimal starting position. The function will iterate over possible starting positions and simulate the execution of commands to find the position that allows the maximum number of commands to be executed without the robot falling off the board. Given the constraints, we will use efficient algorithms to ensure scalability for large command sequences. We will use Python's built-in data structures for simplicity and efficiency.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting position for the robot on a given board to execute the maximum number of commands without falling off. The solution must efficiently handle large input sizes and ensure the robot's safety by preventing it from moving beyond the board's perimeter.\nrequirement pool:\n- Determine the optimal starting position for maximum command execution.\n- Ensure the robot does not fall off the board during command execution.\n- Handle large input sizes efficiently.\n- Provide multiple valid starting positions if applicable.\n- Optimize the algorithm for speed and accuracy.\nWe will implement a function that simulates the robot's movement on a grid. The function will iterate over possible starting positions and simulate the execution of the command sequence from each position. It will track the number of commands successfully executed without the robot falling off the board. The optimal starting position will be the one that allows the maximum number of commands to be executed. We will use efficient iteration and boundary checks to ensure the solution handles large input sizes efficiently. The function will return any valid starting position if multiple exist.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting position for the robot on a grid to execute the maximum number of commands without falling off. The solution must handle large grid sizes and command sequences efficiently, ensuring that the robot does not execute any command that would lead to it falling off the grid.\nrequirement pool:\n- Determine the optimal starting position for the robot.\n- Ensure the robot does not fall off the grid during command execution.\n- Optimize the solution for large input sizes.\n- Provide clear and concise output for each test case.\n- Handle edge cases where the grid size is minimal.\nWe will iterate over each test case and simulate the robot's movement from each possible starting position on the grid. For each starting position, we will execute the command sequence and track the number of successful commands executed before the robot falls off the grid. The goal is to find the starting position that allows the maximum number of commands to be executed. Given the constraints, we will optimize the solution to handle large input sizes efficiently by using a greedy approach to simulate the robot's path and check boundaries.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting position for the robot on a grid to execute the maximum number of commands without falling off. The solution must handle large grid sizes and command sequences efficiently, ensuring the robot does not exceed the grid boundaries.\nrequirement pool:\n- Determine the optimal starting position for the robot.\n- Ensure the robot does not fall off the grid during command execution.\n- Optimize the algorithm for large grid sizes and command sequences.\n- Provide clear output format for test cases.\n- Handle edge cases where the grid size is minimal.\nWe will implement a function that simulates the robot's movement on the grid. The function will iterate over possible starting positions and simulate the execution of the command sequence from each position. It will track the maximum number of commands executed without the robot falling off the grid. The function will return the starting position that allows the maximum number of commands to be executed. We will use efficient iteration and boundary checks to handle large grid sizes and command sequences. The solution will be implemented in a single Python file using basic data structures.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting position for the robot on a grid to execute the maximum number of commands without falling off. The solution must handle large grid sizes and command sequences efficiently, ensuring the robot does not exceed the grid boundaries.\nrequirement pool:\n- Determine the optimal starting position for the robot.\n- Ensure the robot does not fall off the grid during command execution.\n- Optimize the algorithm for large grid sizes and command sequences.\n- Provide clear output format for test cases.\n- Handle edge cases where the grid size is minimal.\nWe will implement a function to determine the optimal starting position for the robot on a grid. The function will simulate the robot's movement based on the command sequence and check if the robot stays within the grid boundaries. We will use efficient algorithms to handle large grid sizes and command sequences, ensuring the robot does not exceed the grid boundaries. The function will return the starting position that allows the maximum number of commands to be executed without the robot falling off the grid.\n"], "scores": [], "pass_results": [true, true, false, true, false, false, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 763, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "rephrase_one", "parent_index": 212}
