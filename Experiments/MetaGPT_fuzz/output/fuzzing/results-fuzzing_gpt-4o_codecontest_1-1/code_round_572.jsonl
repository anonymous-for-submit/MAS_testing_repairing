{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers, and then he wrote out the sums of all non-empty subsequences of this array. After doing this, he sorted them in non-decreasing order. As a result, he got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Consider edge cases where b might contain duplicate sums that can lead to multiple valid arrays a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers, and then he wrote out the sums of all non-empty subsequences of this array. After doing this, he sorted them in non-decreasing order. As a result, he got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Consider edge cases where b might contain duplicate sums that can lead to multiple valid arrays a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array 'a' from the sorted sums array 'b'.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of array 'a'.\n\n    Returns:\n        Tuple[int, int, int]: A tuple containing the three integers of the original array 'a'.\n    \"\"\"\n    # The smallest element in b is one of the original elements of a\n    a1 = b[0]\n    # The second smallest element in b is another element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements of a\n    a3 = b[-1] - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest number in b is one of the numbers in a\n        a1 = b[0]\n        # The second smallest number in b is another number in a\n        a2 = b[1]\n        # The largest number in b is the sum of all three numbers in a\n        # The third number in a can be found by subtracting the sum of the first two numbers from the largest number in b\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstruct the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of reconstructed arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements a.\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements of a.\n        sum_a = b[-1]\n        # The second largest element in b is the sum of the two largest elements of a.\n        sum_two_largest = b[-2]\n        \n        # Deduce the original elements of a\n        a2 = sum_two_largest - a1\n        a3 = sum_a - sum_two_largest\n        \n        # Append the reconstructed array to results\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = reconstruct_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array of three integers from the sorted array of sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        A list of 3 integers representing the original array.\n    \"\"\"\n    # The largest number in b is the sum of all three integers.\n    total_sum = b[-1]\n    # The smallest number in b is one of the integers.\n    a1 = b[0]\n    # The second smallest number in b is another integer.\n    a2 = b[1]\n    # The third integer can be found by subtracting the smallest and second smallest numbers from the largest number.\n    a3 = total_sum - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the original 3 integers for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements a\n        a1 = b[0]\n        # The second smallest element in b is another original element a\n        a2 = b[1]\n        # The largest element in b is the sum of all three elements of a\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Call the function and print results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array of three integers from the sorted list of sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty\n           subsequences of the original array.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The largest number in the sorted list is the sum of all three integers.\n    total_sum = b[-1]\n    \n    # The smallest number is one of the integers.\n    a1 = b[0]\n    \n    # The second smallest number is another integer.\n    a2 = b[1]\n    \n    # The third integer can be found by subtracting the smallest and second smallest numbers from the largest number.\n    a3 = total_sum - a1 - a2\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of reconstructed arrays a for each test case.\n    \"\"\"\n    result = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is one of the elements of a\n        a1 = b[0]\n        # The second smallest element is another element of a\n        a2 = b[1]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # The third element can be deduced by subtracting the sum of the first two elements from the total sum\n        a3 = sum_a - a1 - a2\n        # Append the reconstructed array to the result list\n        result.append([a1, a2, a3])\n    return result\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = reconstruct_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted array b.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements of a\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element of the original array\n        a1 = b[0]\n        # The second element can be found by subtracting the smallest element from the second smallest sum\n        a2 = b[1] - a1\n        # The third element can be found by subtracting the first two elements from the largest sum\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process each test case\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The largest number in the sorted array b is the sum of all three numbers in the original array a.\n        total_sum = case[-1]\n        # The smallest number in b is one of the original numbers.\n        smallest = case[0]\n        # Deduce the other two numbers by subtracting the smallest number from the other sums in b.\n        a1 = smallest\n        a2 = case[1] - smallest\n        a3 = total_sum - (a1 + a2)\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle multiple test cases and consider edge cases with duplicate sums. The constraints ensure that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle edge cases with duplicate sums.\n- Ensure scalability for multiple test cases.\n- Optimize for large numbers.\n- Provide clear and concise output.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second smallest element in b is another element of a. By using these observations, we can deduce the three elements of a. This approach is efficient and handles edge cases with duplicate sums.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from the sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output is correct for each case. The constraints guarantee that a valid solution exists for each input.\nrequirement pool:\n- Implement the main algorithm to reconstruct array a from array b.\n- Optimize the solution to handle the maximum input size efficiently.\n- Ensure the solution is robust and handles edge cases with duplicate sums.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge cases considered.\nWe will use the property that the largest number in the sorted array b is the sum of all three numbers in array a. The smallest number in b is one of the numbers in a. The second smallest number in b is another number in a. The third number in a can be found by subtracting the sum of the first two numbers from the largest number in b.\n", "requirement analysis:\nThe task is to reconstruct the original array of three integers from the given sorted array of sums of all non-empty subsequences. The constraints ensure that there is always at least one valid solution. The solution should handle multiple test cases efficiently.\nrequirement pool:\n- The main code should efficiently reconstruct the original array from the given sums.\n- The solution must handle up to 5000 test cases.\n- Consider edge cases where duplicate sums might lead to multiple valid solutions.\n- Ensure the solution is optimized for large integer values up to 10^9.\n- Provide clear and concise output for each test case.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a. We will iterate over each test case, extract the necessary elements from b, and reconstruct a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must handle multiple test cases efficiently and consider edge cases with duplicate sums. The input constraints ensure that a valid solution always exists.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums.\n- Optimize the solution to handle the maximum input size efficiently.\n- Ensure the solution is robust against edge cases with duplicate sums.\n- Provide clear documentation and examples for the input and output format.\n- Consider additional features like visualizing the solution process.\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The key observation is that the largest number in the sorted array is the sum of all three integers. The smallest number is one of the integers, and the second smallest number is another integer. The third integer can be found by subtracting the smallest and second smallest numbers from the largest number. This approach is efficient and handles edge cases with duplicate sums naturally.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from the sums of all its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The constraints ensure that a valid solution always exists, but multiple solutions may be possible due to duplicate sums.\nrequirement pool:\n- Efficiently handle up to 5000 test cases\n- Correctly reconstruct the original array from the given sums\n- Handle edge cases with duplicate sums\n- Provide clear and concise output for each test case\n- Optimize for large integer values\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a. We will iterate over each test case, extract the necessary elements from b, and reconstruct a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The presence of duplicate sums in the input array b must be considered, as they can lead to multiple valid solutions for the array a.\nrequirement pool:\n- Efficiently compute the original array from the given sums.\n- Handle edge cases with duplicate sums effectively.\n- Ensure the solution is easy to understand and implement.\n- Optimize for large input values and multiple test cases.\n- Provide clear documentation and examples.\nWe will implement a function that takes the sorted list of sums and deduces the original array of three integers. The key observation is that the largest number in the sorted list is the sum of all three integers. The smallest number is one of the integers, and the second smallest number is another integer. The third integer can be found by subtracting the smallest and second smallest numbers from the largest number. This approach is efficient and handles edge cases with duplicate sums effectively.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The constraints ensure that a valid solution always exists, but there may be multiple valid solutions due to duplicate sums.\nrequirement pool:\n- Implement the main algorithm to reconstruct array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Handle edge cases where b contains duplicate sums.\n- Provide clear and concise output for each test case.\nWe will use a straightforward approach to reconstruct the array a from the given array b. Since b is sorted and contains the sums of all non-empty subsequences of a, we can deduce that the largest number in b is the sum of all elements in a. The smallest number in b is one of the elements of a. The second smallest number in b is another element of a. The third smallest number in b is the remaining element of a. This approach is efficient and handles the constraints well.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, considering constraints on input size and potential duplicate sums.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums.\n- Ensure the solution is efficient for up to 5000 test cases.\n- Handle edge cases with duplicate sums effectively.\n- Provide clear and concise output for each test case.\n- Optimize the solution for large integer values.\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these observations, we can efficiently reconstruct the original array a for each test case.\n", "requirement analysis:\nThe task requires reconstructing an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, considering the constraints on input size and possible duplicate sums.\nrequirement pool:\n- Develop an algorithm to restore the original array from the given sums.\n- Ensure the solution is efficient for up to 5000 test cases.\n- Handle edge cases with duplicate sums effectively.\n- Optimize the solution for large integer values.\n- Provide clear documentation and examples for users.\nWe will use a simple mathematical approach to deduce the original array from the given sorted sums. The smallest element in the sorted list is the smallest element of the original array. The largest element is the sum of all three elements. By subtracting the smallest element from the second smallest sum, we can find the second element of the original array. The third element can be found by subtracting the first two elements from the largest sum. This approach is efficient and handles edge cases with duplicate sums effectively.\n", "requirement analysis:\nThe task requires reconstructing an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The presence of duplicate sums in the input array b must be considered, as they can lead to multiple valid solutions for the array a.\nrequirement pool:\n- Efficiently compute the original array from the given sums.\n- Handle edge cases with duplicate sums effectively.\n- Ensure the solution is scalable for a large number of test cases.\n- Provide clear and concise output for each test case.\n- Optimize for performance with large integer values.\nWe will use a straightforward approach to reconstruct the original array from the given sums. The key observation is that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. By using these observations, we can deduce the other two numbers by subtracting the smallest number from the other sums in b. This approach is efficient and handles edge cases with duplicate sums effectively.\n"], "scores": [], "pass_results": [false, false, true, true, true, false, true, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 572, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 186}
