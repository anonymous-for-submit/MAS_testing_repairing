{"name": "1618_E. Singers' Tour", "description": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "tags": ["constructive algorithms", "math"], "difficulty": 11, "id": 1618, "sample_io": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n"]}], "test_list": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n4\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n4\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n2\n3\n1 2 0\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n2\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n19 16 19\n1\n1\n3\n1 0 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 4 2\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 105\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 132 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 124\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n2\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n2\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 19 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 0\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 129 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 155 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n62 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 16 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 6\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 64 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n4 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 2\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 2\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 -1\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 138 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 21 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 240 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 0 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 112 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n2\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n2\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 20\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 24\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n0 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 15 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 104 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 38 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n22 22 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 47 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n3 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n0 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 2 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 28\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 5 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 144 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 0 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 2\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 12 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 -1 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 1 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 57 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 4\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n13 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 1 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n2\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 27 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 136 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 64 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n2 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 141 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}], "task_id": "codecontest/136", "prompt": "n towns are arranged in a circle sequentially, numbered from 1 to n in clockwise order with each i-th town having a singer with a repertoire of a_i minutes for each i \u2208 [1, n]. Each singer visited all n towns in clockwise order, starting with the town he lives in, and in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes, adding it to his repertoire for future performances. Hence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Consider edge cases where the total duration is zero or negative numbers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "repair_prompt": ["n towns are arranged in a circle sequentially, numbered from 1 to n in clockwise order with each i-th town having a singer with a repertoire of a_i minutes for each i \u2208 [1, n]. Each singer visited all n towns in clockwise order, starting with the town he lives in, and in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes, adding it to his repertoire for future performances. Hence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Consider edge cases where the total duration is zero or negative numbers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. "], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations or determines if it's impossible.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the total duration of concerts in each town.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by the sequence of initial repertoire durations.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        # Attempt to reconstruct the sequence a\n        a = [0] * n\n        possible = True\n        \n        # Calculate the sum of b to check for edge cases\n        total_duration = sum(b)\n        \n        if total_duration <= 0:\n            results.append(\"NO\")\n            continue\n        \n        # Try to find a valid sequence a\n        # We need to solve the system of equations derived from the pattern\n        # b[i] = a[i] + 2*a[(i+1)%n] + ... + n*a[(i+n-1)%n]\n        # This can be simplified to a[i] = (b[i] - sum(b) / n) / n\n        sum_b = sum(b)\n        for i in range(n):\n            a[i] = (b[i] - (sum_b - b[i]) // (n - 1)) // n\n            if a[i] <= 0:\n                possible = False\n                break\n        \n        if possible and all(a_i > 0 for a_i in a):\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    results = reconstruct_sequence(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial song durations for each singer in the towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the total durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by the sequence.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        # Attempt to reconstruct the sequence a\n        a = [0] * n\n        total_sum = sum(b)\n        \n        # Check if the total sum is divisible by n*(n+1)/2\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of initial durations\n        sum_a = total_sum // (n * (n + 1) // 2)\n        \n        # Try to deduce the sequence a\n        possible = True\n        for i in range(n):\n            # Calculate the difference between consecutive total durations\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n            \n            # Calculate the initial duration for the i-th singer\n            a[i] = (sum_a - diff) // n\n            \n            # Check if the calculated duration is valid\n            if a[i] <= 0 or (sum_a - diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print results\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of towns and the total durations of concerts in each town.\n\n    Returns:\n        List[str]: A list of results for each test case. Each result is either \"NO\" if\n            no valid sequence exists, or \"YES\" followed by the sequence of initial\n            repertoire durations.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        # Attempt to reconstruct the sequence a\n        a = [0] * n\n        total_sum = sum(b)\n        \n        # Check if the total sum is divisible by n*(n+1)/2\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of all a_i\n        sum_a = total_sum // (n * (n + 1) // 2)\n        \n        # Check if a valid sequence can be constructed\n        valid = True\n        for i in range(n):\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n            if (sum_a - diff) % n != 0 or (sum_a - diff) // n <= 0:\n                valid = False\n                break\n            a[i] = (sum_a - diff) // n\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print the results\n    results = reconstruct_repertoire(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of positive integers based on given constraints.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of cities and the total duration of concerts in each city.\n\n    Returns:\n        List[str]: List of results for each test case, either 'NO' or 'YES' followed\n            by the sequence of integers.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        # Attempt to reconstruct the sequence a\n        a = [0] * n\n        total_sum = sum(b)\n        \n        # Check if total_sum is divisible by n*(n+1)/2\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the initial sum of sequence a\n        initial_sum = total_sum // (n * (n + 1) // 2)\n        \n        possible = True\n        for i in range(n):\n            # Calculate the difference between consecutive b values\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n            if (initial_sum - diff) % n != 0 or initial_sum - diff <= 0:\n                possible = False\n                break\n            a[i] = (initial_sum - diff) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of positive integers a from the given sequence b.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of towns and the sequence b.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by\n            the sequence a.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        # Initialize the sequence a with zeros\n        a = [0] * n\n        possible = True\n\n        # Calculate the sum of b\n        total_b = sum(b)\n\n        # Check if total_b is divisible by n\n        if total_b % n != 0:\n            results.append(\"NO\")\n            continue\n\n        # Calculate the sum of a\n        sum_a = total_b // n\n\n        # Try to reconstruct the sequence a\n        for i in range(n):\n            a[i] = b[i] - sum_a\n            if a[i] <= 0:\n                possible = False\n                break\n\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n\n    # Call the function and print the results\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence 'a' from the given sequence 'b' for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of towns and the sequence 'b'.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by\n            the reconstructed sequence 'a'.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_duration = sum(b)\n        \n        # Check if the total duration is divisible by n\n        if total_duration % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the average duration per singer\n        average_duration = total_duration // n\n        \n        # Attempt to reconstruct sequence 'a'\n        a = [average_duration] * n\n        \n        # Validate the reconstruction\n        valid = True\n        for i in range(n):\n            expected_duration = sum((j + 1) * a[(i + j) % n] for j in range(n))\n            if expected_duration != b[i]:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print the results\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[str, List[int]]]:\n    \"\"\"Reconstructs the sequence of initial durations for singers based on the given constraints.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns and the total duration of concerts in each town.\n\n    Returns:\n        A list of tuples, each containing a string (\"YES\" or \"NO\") and a list of integers representing the initial durations.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        # Initialize the sequence a with zeros\n        a = [0] * n\n        possible = True\n\n        # Calculate the initial durations using the given constraints\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            possible = False\n        else:\n            total_a_sum = total_sum // (n * (n + 1) // 2)\n            for i in range(n):\n                diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n                if (total_a_sum - diff) % n != 0 or total_a_sum - diff <= 0:\n                    possible = False\n                    break\n                a[i] = (total_a_sum - diff) // n\n\n        if possible:\n            results.append((\"YES\", a))\n        else:\n            results.append((\"NO\", []))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n\n    # Call the function\n    results = reconstruct_sequence(t, test_cases)\n\n    # Output results\n    for result in results:\n        print(result[0])\n        if result[0] == \"YES\":\n            print(\" \".join(map(str, result[1])))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of positive integers based on concert durations in towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the total duration of concerts in each town.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by the sequence of integers.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        # Initialize the sequence a with zeros\n        a = [0] * n\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n*(n+1)/2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a_i\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        # Try to reconstruct the sequence a\n        possible = True\n        for i in range(n):\n            # Calculate the difference between consecutive b values\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n            \n            # Calculate a_i\n            a[i] = (total_a - diff) // n\n            \n            # Check if a_i is valid\n            if a[i] <= 0 or (total_a - diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print the results\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence 'a' from the given sequence 'b' for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing an integer n and a list of integers b.\n\n    Returns:\n        A list of strings, each being \"YES\" followed by the sequence 'a' or \"NO\" if impossible.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_sum_b = sum(b)\n        \n        # Check if the total sum of b is divisible by n\n        if total_sum_b % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of sequence 'a'\n        sum_a = total_sum_b // n\n        \n        # Attempt to reconstruct sequence 'a'\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            # Calculate a_i\n            a[i] = b[i] - (sum_a - b[i])\n            \n            # Check if a_i is a valid positive integer\n            if a[i] <= 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[str, List[int]]]:\n    \"\"\"Reconstructs the sequence of integers a based on the given concert durations b.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the list of concert durations.\n\n    Returns:\n        List[Tuple[str, List[int]]]: A list of results for each test case. Each result is a tuple where the first element is \"YES\" or \"NO\",\n                                     and the second element is the reconstructed sequence of integers a if possible.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        # Initialize the sequence a with zeros\n        a = [0] * n\n        possible = True\n\n        # Calculate the sequence a\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            possible = False\n        else:\n            total_a_sum = total_sum // (n * (n + 1) // 2)\n            for i in range(n):\n                a[i] = (b[i] - b[i - 1] + total_a_sum) // n\n                if a[i] <= 0 or (b[i] - b[i - 1] + total_a_sum) % n != 0:\n                    possible = False\n                    break\n\n        if possible:\n            results.append((\"YES\", a))\n        else:\n            results.append((\"NO\", []))\n\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        b = list(map(int, input().strip().split()))\n        test_cases.append((n, b))\n\n    # Call the function\n    results = reconstruct_sequence(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result[0])\n        if result[0] == \"YES\":\n            print(\" \".join(map(str, result[1])))\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing a sequence of initial repertoire durations based on given total concert durations in each town. The solution must efficiently handle multiple test cases and large input sizes, while also considering edge cases such as zero or negative durations. The output format must be strictly followed, providing either a valid sequence or indicating impossibility.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Reconstruct sequence of initial repertoire durations\n- Handle edge cases like zero or negative durations\n- Ensure output format is strictly followed\n- Optimize for large input sizes\nWe will use a mathematical approach to reconstruct the sequence of initial repertoire durations. The key is to understand the pattern of concert durations and reverse-engineer the sequence. We will iterate over each test case, calculate possible values for the sequence, and check if they satisfy the given conditions. If a valid sequence is found, we output it; otherwise, we output 'NO'. We will handle edge cases by checking if the total duration is zero or negative, which should be impossible given the constraints.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle multiple test cases and large input sizes, ensuring accurate reconstruction or determining impossibility. Edge cases such as zero or negative durations must be considered.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Accurately reconstruct sequence a or determine impossibility\n- Optimize performance for large input sizes\n- Handle edge cases such as zero or negative durations\n- Provide clear output format\nWe will implement a function to reconstruct the sequence of initial song durations for each singer in the towns. The approach involves iterating over the given total durations and attempting to deduce the initial durations by leveraging the properties of arithmetic progressions. We will use a simple loop to calculate potential initial durations and verify if they satisfy the conditions. If a valid sequence is found, we output it; otherwise, we output 'NO'. The solution will handle multiple test cases efficiently and consider edge cases such as zero or negative durations.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers representing the initial repertoire durations of singers in a circular arrangement of towns. The solution must handle multiple test cases efficiently, considering constraints on input size and edge cases. The output must be formatted correctly, indicating whether a valid sequence is possible or not.\nrequirement pool:\n- Efficiently handle up to 10^3 test cases with n up to 4 \u22c5 10^4.\n- Correctly reconstruct the sequence of repertoire durations or determine impossibility.\n- Ensure the solution is robust against edge cases like zero or negative durations.\n- Provide clear and formatted output for each test case.\n- Optimize the solution for large inputs without compromising accuracy.\nWe will implement a function to reconstruct the sequence of initial repertoire durations for each test case. The function will iterate over the given total durations and attempt to deduce the initial durations by leveraging the circular nature of the towns. We will use a mathematical approach to solve the problem efficiently, ensuring that the solution handles edge cases like zero or negative durations by checking the feasibility of the solution. The solution will be implemented in a single Python file using basic data structures and operations to ensure efficiency.\n", "requirement analysis:\nThe requirement involves reconstructing a sequence of integers based on given constraints. The solution must handle multiple test cases efficiently and provide clear output indicating whether reconstruction is possible. Edge cases such as zero or negative durations must be considered.\nrequirement pool:\n- Efficiently handle up to 10^3 test cases\n- Ensure the solution meets all edge cases\n- Provide clear and concise output format\n- Optimize for large input sizes\n- Allow multiple valid solutions\nWe will implement a function that reconstructs the sequence of positive integers based on the given constraints. The function will iterate over each test case, calculate possible values for the sequence, and check if they satisfy the conditions. If a valid sequence is found, it will be returned; otherwise, 'NO' will be returned. We will use efficient algorithms to handle large inputs and edge cases.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of positive integers based on given concert durations in towns. The solution must efficiently handle multiple test cases and large inputs, ensuring robustness against edge cases such as zero or negative durations.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Reconstruct sequence of positive integers accurately\n- Ensure robustness against edge cases\n- Provide clear output format\n- Optimize for large inputs\nWe will use a mathematical approach to reconstruct the sequence of positive integers a from the given sequence b. The key observation is that the sum of the sequence a multiplied by the respective coefficients should match the sequence b. We will iterate over each test case, and for each town, calculate the possible values of a_i using modular arithmetic and check if they satisfy the conditions. If a valid sequence is found, we will output it; otherwise, we will output 'NO'.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the sequence satisfies the conditions for all towns and singers. Edge cases such as zero or negative durations need to be handled, although the problem constraints suggest positive durations only.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence a from b.\n- Ensure the solution handles the maximum input size efficiently.\n- Provide clear output formatting as specified in the requirements.\n- Handle edge cases and invalid inputs gracefully.\n- Optimize the solution for speed and memory usage.\nWe will iterate over each test case and attempt to reconstruct the sequence 'a' from the given sequence 'b'. The key observation is that the sum of the sequence 'a' should be equal to the sum of sequence 'b' divided by n, as each singer contributes to each town's total concert duration. If this condition is not met, it is impossible to reconstruct 'a'. We will use a greedy approach to distribute the total duration evenly across the sequence 'a'.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must handle multiple test cases efficiently, ensuring that the sequence is valid or determining if reconstruction is impossible. Edge cases such as zero or negative durations must be considered, although negative durations are not possible given the constraints.\nrequirement pool:\n- Develop the main algorithm to reconstruct sequence a\n- Implement input/output handling for multiple test cases\n- Optimize the solution for large inputs\n- Ensure the solution handles edge cases effectively\n- Provide clear documentation and explanation of the solution\nWe will implement a function to reconstruct the sequence of integers based on the given constraints. The approach involves iterating over the towns and calculating the possible initial durations for each singer. We will use modular arithmetic to handle the circular arrangement of towns. The solution will check if the reconstruction is possible and handle edge cases effectively. Given the constraints, we will ensure the solution is optimized for large inputs.\n", "requirement analysis:\nThe task requires reconstructing a sequence of positive integers based on given concert durations in towns. The solution must handle multiple test cases efficiently and consider edge cases such as zero or negative durations. The output must be clear, indicating whether reconstruction is possible and providing the sequence if it is.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Correctly reconstruct the sequence of integers\n- Handle edge cases such as zero or negative durations\n- Provide clear output indicating success or failure\n- Optimize for large input sizes\nWe will implement a function to reconstruct the sequence of positive integers based on the given concert durations in towns. The approach involves iterating over the given durations and attempting to deduce the initial repertoire of each singer. We will use a mathematical approach to solve the problem efficiently, ensuring that the solution handles edge cases and large inputs. The function will check if a valid sequence can be constructed and return the result accordingly.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must handle multiple test cases efficiently, ensuring that edge cases such as zero or negative durations are addressed. The algorithm should be optimized for large inputs, given the constraints on n and b_i.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Accurately reconstruct sequence a\n- Optimize performance for large inputs\n- Handle edge cases effectively\n- Provide clear output format\nWe will iterate over each test case and attempt to reconstruct the sequence 'a' from the given sequence 'b'. The key observation is that the sum of the sequence 'a' should be equal to the sum of the sequence 'b' divided by n, as each singer contributes to each town's total concert duration. If the sum of 'b' is not divisible by n, it is impossible to reconstruct 'a'. Otherwise, we can distribute the total duration evenly across the sequence 'a'.\n", "requirement analysis:\nThe requirement involves reconstructing a sequence of integers based on given concert durations in towns arranged in a circle. The solution must efficiently handle multiple test cases and large inputs, while also addressing edge cases such as zero or negative durations.\nrequirement pool:\n- Efficiently handle large inputs and multiple test cases\n- Correctly reconstruct the sequence of integers a\n- Handle edge cases like zero or negative durations\n- Provide clear and concise output\n- Optimize for performance and memory usage\nWe will implement a function to reconstruct the sequence of integers a based on the given concert durations b. The approach involves iterating over the towns and calculating the possible values for a_i by considering the circular arrangement and the concert duration pattern. We will handle edge cases such as zero or negative durations by checking the feasibility of the sequence reconstruction. The solution will be optimized for performance to handle large inputs efficiently.\n"], "scores": [], "pass_results": [false, true, false, true, true, false, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 219, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "mutate_method": "condense_two2one", "parent_index": 163}
