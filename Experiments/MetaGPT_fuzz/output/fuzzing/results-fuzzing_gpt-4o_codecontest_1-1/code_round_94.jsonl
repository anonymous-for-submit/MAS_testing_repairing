{"name": "1619_A. Square String?", "description": "A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1619, "sample_io": [{"input": "10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n"]}], "test_list": [{"input": "1\nacascnakcn\n", "output": ["NO\n"]}, {"input": "1\nababab\n", "output": ["NO\n"]}, {"input": "1\nzz\n", "output": ["YES\n"]}, {"input": "1\nacascnajcn\n", "output": ["NO\n"]}, {"input": "10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nyxxy\nxyyx\nxyxy\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "1\n{{\n", "output": ["YES\n"]}, {"input": "10\nb\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nyxxy\nxyxx\nxyxz\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "10\nb\naa\naaa\nabaa\nabab\nabcabc\nabacaba\nyxxy\nxyxx\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "10\nb\naa\naaa\nabaa\nabab\nabc`bc\nabacaba\nyxxy\nxyxx\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "10\nb\naa\naaa\nab`a\nabab\ncb`caa\nabacbaa\nxyxy\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`caa\nabacbaa\nyxyx\nxyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "10\na\nba\naaa\nab`a\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "10\nb\nb`\na``\n_aba\nabbb\ncca`ba\nabacbca\nxyxx\nxwyv\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "10\nd\n`c\nbab\ncaa_\nbaba\nccabc`\n_baceac\nwxxy\nwuwy\nw|wz\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\n`babab\n", "output": ["NO\n"]}, {"input": "1\nz{\n", "output": ["NO\n"]}, {"input": "1\nacascankcn\n", "output": ["NO\n"]}, {"input": "1\n`babbb\n", "output": ["NO\n"]}, {"input": "10\nb\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nyxxy\nxyyx\nxyxy\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "1\nacbscankcn\n", "output": ["NO\n"]}, {"input": "1\n_babbb\n", "output": ["NO\n"]}, {"input": "1\n{|\n", "output": ["NO\n"]}, {"input": "10\nb\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nyxxy\nxxyx\nxyxy\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "1\nacbscakncn\n", "output": ["NO\n"]}, {"input": "1\n_baabb\n", "output": ["NO\n"]}, {"input": "1\n|{\n", "output": ["NO\n"]}, {"input": "10\nb\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nyxxy\nxyxx\nxyxy\n", "output": ["NO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "1\nabbscakncn\n", "output": ["NO\n"]}, {"input": "1\n^baabb\n", "output": ["NO\n"]}, {"input": "1\n||\n", "output": ["YES\n"]}, {"input": "1\nabbscakmcn\n", "output": ["NO\n"]}, {"input": "1\n^baacb\n", "output": ["NO\n"]}, {"input": "1\nz|\n", "output": ["NO\n"]}, {"input": "1\nncmkacsbba\n", "output": ["NO\n"]}, {"input": "1\n^b`acb\n", "output": ["NO\n"]}, {"input": "1\n|z\n", "output": ["NO\n"]}, {"input": "1\nncmkacsbca\n", "output": ["NO\n"]}, {"input": "1\nbca`b^\n", "output": ["NO\n"]}, {"input": "1\nz}\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\nabc`bc\nabacaba\nyxxy\nxyxx\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nncmlacsbca\n", "output": ["NO\n"]}, {"input": "1\nbca`b_\n", "output": ["NO\n"]}, {"input": "1\n}z\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\nabc`bc\nabacaba\nyxxy\nxyxw\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nccmlansbca\n", "output": ["NO\n"]}, {"input": "1\n`cabb_\n", "output": ["NO\n"]}, {"input": "1\n{}\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\nabc`bc\nabacaaa\nyxxy\nxyxw\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nccmlamsbca\n", "output": ["NO\n"]}, {"input": "1\n_bbac`\n", "output": ["NO\n"]}, {"input": "1\n{z\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\nabc`bc\nabacbaa\nyxxy\nxyxw\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nbcmlamsbca\n", "output": ["NO\n"]}, {"input": "1\n`bbac`\n", "output": ["NO\n"]}, {"input": "1\nyz\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\naac`bc\nabacbaa\nyxxy\nxyxw\nxyxz\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nbcmlamsbda\n", "output": ["NO\n"]}, {"input": "1\n`cabb`\n", "output": ["NO\n"]}, {"input": "1\nzy\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nabaa\nabab\naac`bc\nabacbaa\nyxxy\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nbcmlaasbdm\n", "output": ["NO\n"]}, {"input": "1\n`cabc`\n", "output": ["NO\n"]}, {"input": "1\nzx\n", "output": ["NO\n"]}, {"input": "10\nc\naa\naaa\nab`a\nabab\naac`bc\nabacbaa\nyxxy\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nmdbsaalmcb\n", "output": ["NO\n"]}, {"input": "1\n_cabc`\n", "output": ["NO\n"]}, {"input": "1\nxz\n", "output": ["NO\n"]}, {"input": "10\nb\naa\naaa\nab`a\nabab\naac`bc\nabacbaa\nyxxy\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nmdbsaakmcb\n", "output": ["NO\n"]}, {"input": "1\n_cbbc`\n", "output": ["NO\n"]}, {"input": "1\nyy\n", "output": ["YES\n"]}, {"input": "10\nb\naa\naaa\nab`a\nabab\ncb`caa\nabacbaa\nyxxy\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "1\nmdbsaajmcb\n", "output": ["NO\n"]}, {"input": "1\n_cbbd`\n", "output": ["NO\n"]}, {"input": "1\ny{\n", "output": ["NO\n"]}, {"input": "1\nbcmjaasbdm\n", "output": ["NO\n"]}, {"input": "1\n`dbbc_\n", "output": ["NO\n"]}, {"input": "1\ny|\n", "output": ["NO\n"]}, {"input": "10\nb\naa\naaa\nab`a\nabab\ncb`caa\nabacbaa\nyxyx\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbbmjaasbdm\n", "output": ["NO\n"]}, {"input": "1\n`dbbb_\n", "output": ["NO\n"]}, {"input": "1\nx|\n", "output": ["NO\n"]}, {"input": "10\na\naa\naaa\nab`a\nabab\ncb`caa\nabacbaa\nyxyx\nxyxw\nzxyx\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdmjaasbbm\n", "output": ["NO\n"]}, {"input": "1\nadbbb_\n", "output": ["NO\n"]}, {"input": "1\nx}\n", "output": ["NO\n"]}, {"input": "1\nbdmj`asbbm\n", "output": ["NO\n"]}, {"input": "1\na_bbbd\n", "output": ["NO\n"]}, {"input": "1\nw}\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`caa\nabbcbaa\nyxyx\nxyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdmj`ascbm\n", "output": ["NO\n"]}, {"input": "1\na_cbbd\n", "output": ["NO\n"]}, {"input": "1\n}w\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`cab\nabbcbaa\nyxyx\nxyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdma`jscbm\n", "output": ["NO\n"]}, {"input": "1\na_cbcd\n", "output": ["NO\n"]}, {"input": "1\n}x\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`cab\nabbcbaa\nyxyx\nwyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdm`ajscbm\n", "output": ["NO\n"]}, {"input": "1\na_cbcc\n", "output": ["NO\n"]}, {"input": "1\ny}\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`caa\nabbcbaa\nyxyx\nwyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdm`ajscbl\n", "output": ["NO\n"]}, {"input": "1\na_cbbc\n", "output": ["NO\n"]}, {"input": "1\n}y\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nabab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzxyx\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbdl`ajscbl\n", "output": ["NO\n"]}, {"input": "1\na_cabc\n", "output": ["NO\n"]}, {"input": "1\n~y\n", "output": ["NO\n"]}, {"input": "1\nbbl`ajscdl\n", "output": ["NO\n"]}, {"input": "1\na`cabc\n", "output": ["NO\n"]}, {"input": "1\ny~\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\nab`a\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzyxx\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nldcsja`lbb\n", "output": ["NO\n"]}, {"input": "1\na`cbbc\n", "output": ["NO\n"]}, {"input": "1\ny\u007f\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzyxx\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nldcrja`lbb\n", "output": ["NO\n"]}, {"input": "1\naacbbc\n", "output": ["NO\n"]}, {"input": "1\n\u007fy\n", "output": ["NO\n"]}, {"input": "10\na\nba\naaa\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzyxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nldcrja`lab\n", "output": ["NO\n"]}, {"input": "1\naacbbb\n", "output": ["NO\n"]}, {"input": "1\nx\u007f\n", "output": ["NO\n"]}, {"input": "10\na\nb`\naaa\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzyxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nlddrja`lab\n", "output": ["NO\n"]}, {"input": "1\naadbbb\n", "output": ["NO\n"]}, {"input": "1\nx~\n", "output": ["NO\n"]}, {"input": "10\na\nb`\naa`\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nzyxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nbal`ajrddl\n", "output": ["NO\n"]}, {"input": "1\naaebbb\n", "output": ["NO\n"]}, {"input": "1\nz~\n", "output": ["NO\n"]}, {"input": "10\na\nb`\naa`\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\ncal`ajrddl\n", "output": ["NO\n"]}, {"input": "1\naaebab\n", "output": ["NO\n"]}, {"input": "1\n~z\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\naa`\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nlddrja`lac\n", "output": ["NO\n"]}, {"input": "1\nbabeaa\n", "output": ["NO\n"]}, {"input": "1\nz\u007f\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmddrja`lac\n", "output": ["NO\n"]}, {"input": "1\naabeaa\n", "output": ["NO\n"]}, {"input": "1\n\u007fz\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na`ba\nbaab\ncb`caa\nabbcbba\nyxyx\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\ncal`ajrddm\n", "output": ["NO\n"]}, {"input": "1\naaebaa\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na`ba\nbaab\nab`cac\nabbcbba\nyxyx\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\ncal`ajqddm\n", "output": ["NO\n"]}, {"input": "1\nbaebaa\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na`ba\nbaab\ncac`ba\nabbcbba\nyxyx\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\ncal`aiqddm\n", "output": ["NO\n"]}, {"input": "1\naabeab\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\ncac`ba\nabbcbba\nyxyx\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmddqia`lac\n", "output": ["NO\n"]}, {"input": "1\nbaebab\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\nab`cac\nabbcbba\nyxyx\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmcdqia`lad\n", "output": ["NO\n"]}, {"input": "1\nbafbab\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\nab`cac\nabbcbba\nxyxy\nwyyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmcdqia`mad\n", "output": ["NO\n"]}, {"input": "1\nbagbab\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\nab`cac\nabbcbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\ndam`aiqdcm\n", "output": ["NO\n"]}, {"input": "1\nbagbaa\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\ncac`ba\nabbcbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nd`m`aiqdcm\n", "output": ["NO\n"]}, {"input": "1\naagbba\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\ncca`ba\nabbcbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nd`c`aiqdmm\n", "output": ["NO\n"]}, {"input": "1\na`gbba\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nbaab\ncca`ba\nabbcbba\nxyxy\nwxyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nd`b`aiqdmm\n", "output": ["NO\n"]}, {"input": "1\na`gbb`\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nabab\ncca`ba\nabbcbba\nxyxy\nwxyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nm`b`aiqddm\n", "output": ["NO\n"]}, {"input": "1\na`gb`b\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nabab\ncca`ba\nabbcbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nm`c`aiqddm\n", "output": ["NO\n"]}, {"input": "1\na`hb`b\n", "output": ["NO\n"]}, {"input": "10\nb\nb`\na``\na_ba\nabab\ncca`ba\nabacbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmac`aiqddm\n", "output": ["NO\n"]}, {"input": "1\nb`hb`b\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabab\ncca`ba\nabacbba\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nnac`aiqddm\n", "output": ["NO\n"]}, {"input": "1\na`hbab\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabab\ncca`ba\nabacbca\nxyxy\nwyxw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nmddqia`can\n", "output": ["NO\n"]}, {"input": "1\na_hbab\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabab\ncca`ba\nabacbca\nxyxy\nwxyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\naddqia`cmn\n", "output": ["NO\n"]}, {"input": "1\nbabh_a\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabbb\ncca`ba\nabacbca\nxyxy\nwxyw\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\naddqia`cnn\n", "output": ["NO\n"]}, {"input": "1\nbabh^a\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabbb\ncca`ba\nabacbca\nxyxy\nwxyv\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nnnc`aiqdda\n", "output": ["NO\n"]}, {"input": "1\nbbbh^a\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\na_ba\nabbb\ncca`ba\nabacbca\nxyxy\nxwyv\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\nnnc`ajqdda\n", "output": ["NO\n"]}, {"input": "1\nabbh^b\n", "output": ["NO\n"]}, {"input": "10\nb\n`b\na``\n_aba\nabbb\ncca`ba\nabacbca\nxyxy\nxwyv\nyzxy\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nNO\n"]}, {"input": "1\naddqja`cnn\n", "output": ["NO\n"]}], "task_id": "codecontest/139", "prompt": "A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. The string \"aa\" is square because it is a repetition of \"a\" twice. Similarly, \"abcabc\" is square because it consists of \"abc\" written two times in succession. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES", "repair_prompt": ["A string is called square if it is some string written twice in a row. For example, the strings \"aa\", \"abcabc\", \"abab\" and \"baabaa\" are square. The string \"aa\" is square because it is a repetition of \"a\" twice. Similarly, \"abcabc\" is square because it consists of \"abc\" written two times in succession. But the strings \"aaa\", \"abaaab\" and \"abcdabc\" are not square.\n\nFor a given string s determine if it is square.\n\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES"], "completions": ["from typing import List\n## main.py\n\ndef is_square_string(s: str) -> str:\n    \"\"\"Determines if a given string is square.\n\n    A string is considered square if it can be split into two identical halves.\n\n    Args:\n        s: A string consisting of lowercase Latin letters.\n\n    Returns:\n        'YES' if the string is square, 'NO' otherwise.\n    \"\"\"\n    length = len(s)\n    # A string can only be square if its length is even\n    if length % 2 != 0:\n        return 'NO'\n    \n    half_length = length // 2\n    # Check if the first half is equal to the second half\n    if s[:half_length] == s[half_length:]:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    # Read the number of test cases\n    t = int(input().strip())\n    # Iterate over each test case\n    for _ in range(t):\n        # Read the string for the current test case\n        s = input().strip()\n        # Determine if the string is square and print the result\n        print(is_square_string(s))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_square_string(s: str) -> str:\n    \"\"\"Determines if a given string is square.\n\n    A string is considered square if it can be split into two identical halves.\n\n    Args:\n        s (str): The string to check.\n\n    Returns:\n        str: 'YES' if the string is square, 'NO' otherwise.\n    \"\"\"\n    length = len(s)\n    if length % 2 != 0:\n        return 'NO'\n    \n    mid = length // 2\n    if s[:mid] == s[mid:]:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input().strip())\n    results = []\n    for _ in range(t):\n        s = input().strip()\n        result = is_square_string(s)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef is_square_string(s: str) -> str:\n    \"\"\"Check if the given string is square.\n\n    A string is considered square if it can be split into two identical halves.\n    For example, 'abcabc' is square because it consists of 'abc' repeated twice.\n\n    Args:\n        s: The input string to check.\n\n    Returns:\n        'YES' if the string is square, 'NO' otherwise.\n    \"\"\"\n    length = len(s)\n    # A string can only be square if its length is even\n    if length % 2 != 0:\n        return 'NO'\n    \n    half_length = length // 2\n    # Check if the first half is equal to the second half\n    if s[:half_length] == s[half_length:]:\n        return 'YES'\n    else:\n        return 'NO'\n\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Iterate over each test case\n    for _ in range(t):\n        # Read the string for the current test case\n        s = input().strip()\n        # Call the function and print the result\n        result = is_square_string(s)\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef is_square_string(s: str) -> str:\n    \"\"\"Determines if a given string is square.\n\n    A string is considered square if it can be split into two identical halves.\n\n    Args:\n        s: A string consisting of lowercase Latin letters.\n\n    Returns:\n        'YES' if the string is square, 'NO' otherwise.\n    \"\"\"\n    length = len(s)\n    if length % 2 == 0:\n        half_length = length // 2\n        if s[:half_length] == s[half_length:]:\n            return 'YES'\n    return 'NO'\n\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input().strip())\n    results = []\n    for _ in range(t):\n        s = input().strip()\n        result = is_square_string(s)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_square_string(test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases is a square string.\n\n    A string is considered square if it can be split into two identical halves.\n\n    Args:\n        test_cases: A list of strings to be checked.\n\n    Returns:\n        A list of strings, each being 'YES' if the corresponding test case is a square string, 'NO' otherwise.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        length = len(s)\n        if length % 2 == 0:\n            half = length // 2\n            if s[:half] == s[half:]:\n                results.append('YES')\n            else:\n                results.append('NO')\n        else:\n            results.append('NO')\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output for the square string check.\"\"\"\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    results = is_square_string(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_square_string(s: str) -> str:\n    \"\"\"Determines if a string is square.\n\n    A string is considered square if it can be split into two equal halves that are identical.\n\n    Args:\n        s: A string consisting of lowercase Latin letters.\n\n    Returns:\n        'YES' if the string is square, 'NO' otherwise.\n    \"\"\"\n    length = len(s)\n    # A string with odd length cannot be square\n    if length % 2 != 0:\n        return 'NO'\n    \n    half_length = length // 2\n    # Check if the first half is equal to the second half\n    if s[:half_length] == s[half_length:]:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input().strip())\n    results = []\n    for _ in range(t):\n        s = input().strip()\n        result = is_square_string(s)\n        results.append(result)\n\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef is_square_string(s: str) -> str:\n    \"\"\"Determines if a given string is square.\n\n    A string is considered square if it can be split into two identical halves.\n\n    Args:\n        s: A string consisting of lowercase Latin letters.\n\n    Returns:\n        'YES' if the string is square, 'NO' otherwise.\n    \"\"\"\n    length = len(s)\n    if length % 2 == 0:\n        half = length // 2\n        if s[:half] == s[half:]:\n            return 'YES'\n    return 'NO'\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input().strip())\n    results = []\n    for _ in range(t):\n        s = input().strip()\n        result = is_square_string(s)\n        results.append(result)\n\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_square_string(s: str) -> str:\n    \"\"\"Determines if a given string is square.\n\n    A string is considered square if it can be split into two equal halves that are identical.\n\n    Args:\n        s (str): The string to be checked.\n\n    Returns:\n        str: 'YES' if the string is square, 'NO' otherwise.\n    \"\"\"\n    length = len(s)\n    if length % 2 != 0:\n        return 'NO'\n    \n    mid = length // 2\n    if s[:mid] == s[mid:]:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input().strip())\n    results = []\n    for _ in range(t):\n        s = input().strip()\n        result = is_square_string(s)\n        results.append(result)\n    \n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_square_string(s: str) -> str:\n    \"\"\"Determines if a given string is square.\n\n    A string is considered square if it can be split into two identical halves.\n\n    Args:\n        s: A string consisting of lowercase Latin letters.\n\n    Returns:\n        'YES' if the string is square, 'NO' otherwise.\n    \"\"\"\n    length = len(s)\n    if length % 2 == 0:\n        half = length // 2\n        if s[:half] == s[half:]:\n            return 'YES'\n    return 'NO'\n\ndef main():\n    \"\"\"Main function to handle multiple test cases.\"\"\"\n    t = int(input().strip())\n    results = []\n    for _ in range(t):\n        s = input().strip()\n        result = is_square_string(s)\n        results.append(result)\n\n    for res in results:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_square_string(s: str) -> str:\n    \"\"\"Determines if a string is square.\n\n    A string is considered square if it can be split into two identical halves.\n\n    Args:\n        s (str): The input string to check.\n\n    Returns:\n        str: 'YES' if the string is square, 'NO' otherwise.\n    \"\"\"\n    length = len(s)\n    if length % 2 != 0:\n        return 'NO'\n    \n    mid = length // 2\n    if s[:mid] == s[mid:]:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input().strip())\n    results = []\n    for _ in range(t):\n        s = input().strip()\n        result = is_square_string(s)\n        results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement is to determine if a given string is square, meaning it can be split into two identical halves. The solution must handle up to 100 test cases efficiently, ensuring that each string is checked for the square property and outputs a clear YES or NO response.\nrequirement pool:\n- Implement function to check if a string is square\n- Ensure solution handles up to 100 test cases efficiently\n- Optimize string processing for performance\n- Provide clear and consistent output format\n- Handle edge cases such as minimum and maximum string lengths\nWe will implement a function to determine if a given string is square by checking if the string can be split into two identical halves. The function will handle multiple test cases efficiently by iterating through each string and checking its length and symmetry. We will use basic string operations without any additional libraries to keep the solution simple and efficient.\n", "requirement analysis:\nThe requirement is to determine if a given string is square, meaning it can be split into two identical halves. The solution must handle up to 100 test cases efficiently, with string lengths ranging from 1 to 100. The output should be clear, using 'YES' or 'NO' to indicate whether a string is square.\nrequirement pool:\n- Implement function to check if a string is square\n- Optimize for performance with large input sizes\n- Ensure clear output format\n- Handle edge cases such as single character strings\n- Provide user-friendly error messages for invalid inputs\nWe will implement a function to check if a string is square by verifying if the string can be split into two identical halves. The function will handle multiple test cases efficiently by iterating through each string and checking its length and symmetry. We will use Python's built-in string operations to achieve this, ensuring the solution is both simple and performant.\n", "requirement analysis:\nThe requirement is to determine if a given string is square, meaning it can be split into two identical halves. The solution must handle up to 100 test cases efficiently, ensuring accurate results for strings of varying lengths between 1 and 100 characters. The output should be clear, with 'YES' or 'NO' responses for each test case.\nrequirement pool:\n- Implement function to check if a string is square\n- Optimize for performance with up to 100 test cases\n- Ensure output format is consistent and clear\n- Handle edge cases such as minimum and maximum string lengths\n- Provide user-friendly error messages for invalid input\nWe will implement a function to check if a string is square by verifying if the string can be split into two identical halves. We will use basic string operations to achieve this, ensuring the solution is efficient for up to 100 test cases. The function will handle edge cases such as strings with odd lengths, which cannot be square by definition.\n", "requirement analysis:\nThe requirement is to determine if a given string is square, meaning it can be split into two identical halves. The solution must handle up to 100 test cases efficiently, with string lengths ranging from 1 to 100. The output should be clear and consistent, allowing for variations in case sensitivity.\nrequirement pool:\n- Implement the main function to check if a string is square\n- Ensure the solution handles up to 100 test cases efficiently\n- Optimize the algorithm for performance with large input sizes\n- Provide clear and concise output for each test case\n- Handle edge cases such as strings of length 1\nWe will implement a function to check if a string is square by verifying if the string can be split into two identical halves. The function will handle multiple test cases efficiently using a loop and will provide clear output for each test case. We will use basic string operations without any external libraries to ensure optimal performance.\n", "requirement analysis:\nThe requirement is to determine if a given string is square, meaning it can be split into two identical halves. The solution must handle up to 100 test cases efficiently and provide clear output for each case.\nrequirement pool:\n- Implement function to check if a string is square\n- Optimize for performance with large number of test cases\n- Ensure output format is clear and consistent\n- Handle edge cases such as strings of length 1\n- Provide user-friendly error messages for invalid input\nWe will implement a function to check if a string is square by verifying if the string can be split into two identical halves. The function will handle multiple test cases efficiently by iterating through each string and checking its length and symmetry. We will use basic string operations, which are efficient for the given constraints. The solution will ensure clear and consistent output for each test case.\n", "requirement analysis:\nThe requirement is to determine if a given string is square, meaning it can be split into two identical halves. The solution must handle up to 100 test cases efficiently, with string lengths ranging from 1 to 100. The output should be case-insensitive and follow the specified format strictly.\nrequirement pool:\n- Implement the main function to check if a string is square.\n- Ensure the solution handles edge cases like single-character strings.\n- Optimize the algorithm for performance with large input sizes.\n- Provide clear and concise output for each test case.\n- Include error handling for invalid inputs.\nWe will implement a function to determine if a string is square by checking if the string can be split into two equal halves that are identical. We will use basic string operations to achieve this, ensuring the solution is efficient for the given constraints. The function will handle edge cases such as single-character strings and strings with odd lengths, which cannot be square by definition.\n", "requirement analysis:\nThe requirement is to determine if a given string is square, meaning it can be split into two identical halves. The solution must handle up to 100 test cases efficiently and provide a clear YES or NO output for each case.\nrequirement pool:\n- Implement function to check if a string is square\n- Ensure solution handles up to 100 test cases efficiently\n- Optimize string manipulation for performance\n- Provide clear and consistent output format\n- Handle edge cases such as strings of length 1\nWe will implement a function to check if a string is square by verifying if the string can be split into two identical halves. The function will handle up to 100 test cases efficiently using basic string operations. We will use Python's built-in capabilities for string manipulation, which are sufficient for this task.\n", "requirement analysis:\nThe requirement is to determine if a given string is square, meaning it can be split into two identical halves. The solution should efficiently handle up to 100 test cases with string lengths up to 100 characters, ensuring performance and accuracy.\nrequirement pool:\n- Implement function to check if a string is square.\n- Ensure the solution handles edge cases like single character strings.\n- Optimize the solution for performance with large input sizes.\n- Provide clear and concise output format.\n- Enhance user experience with intuitive input handling.\nWe will implement a function to check if a string is square by verifying if the string can be split into two equal halves that are identical. The function will handle edge cases such as single character strings and strings with odd lengths, which cannot be square. We will use basic string operations to achieve this, ensuring the solution is efficient for up to 100 test cases with string lengths up to 100 characters.\n", "requirement analysis:\nThe requirement is to determine if a given string is square, meaning it can be split into two identical halves. The solution must handle up to 100 test cases efficiently, with string lengths ranging from 1 to 100. The output should be case-insensitive and follow the specified format strictly.\nrequirement pool:\n- Implement the main function to check if a string is square\n- Ensure the solution handles up to 100 test cases efficiently\n- Optimize the algorithm for performance with large input sizes\n- Provide clear and concise output\n- Handle edge cases such as strings of length 1\nWe will implement a function to check if a string is square by verifying if the string can be split into two identical halves. The function will handle multiple test cases efficiently using a loop and will provide case-insensitive output. We will use basic string operations without any external libraries as the task is straightforward.\n", "requirement analysis:\nThe requirement is to determine if a given string is square, meaning it can be split into two identical halves. The solution must handle up to 100 test cases efficiently and provide a clear YES or NO output for each case.\nrequirement pool:\n- Implement function to check if a string is square\n- Optimize for performance with up to 100 test cases\n- Ensure clear output format\n- Handle edge cases such as strings of length 1\n- Provide user-friendly input and output handling\nWe will implement a simple function to check if a string is square by verifying if the string can be split into two identical halves. The function will handle up to 100 test cases efficiently using basic string operations without any complex libraries.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 94, "examples": "\nInput\n\nThe first line of input data contains an integer t (1 \u2264 t \u2264 100) \u2014the number of test cases.\n\nThis is followed by t lines, each containing a description of one test case. The given strings consist only of lowercase Latin letters and have lengths between 1 and 100 inclusive.\n\nOutput\n\nFor each test case, output on a separate line:\n\n  * YES if the string in the corresponding test case is square, \n  * NO otherwise. \n\n\n\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and YES will be recognized as a positive response).\n\nExample\n\nInput\n\n\n10\na\naa\naaa\naaaa\nabab\nabcabc\nabacaba\nxxyy\nxyyx\nxyxy\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nYES", "mutate_method": "expand_one2two", "parent_index": 45}
