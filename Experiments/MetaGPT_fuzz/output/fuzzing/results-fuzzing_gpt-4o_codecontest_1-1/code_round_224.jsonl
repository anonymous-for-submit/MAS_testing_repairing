{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers, then he wrote out the sums of all non-empty subsequences of this array and sorted them in non-decreasing order; as a result, he got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Consider edge cases where b might contain duplicate sums that can lead to multiple valid arrays a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers, then he wrote out the sums of all non-empty subsequences of this array and sorted them in non-decreasing order; as a result, he got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Consider edge cases where b might contain duplicate sums that can lead to multiple valid arrays a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element of a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_a2 = b[5]\n        \n        # Deduce the elements of a\n        a2 = sum_a - sum_a2\n        a3 = sum_a2 - a1\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in a\n        a3 = b[6]\n        # The smallest number in b is one of the original numbers\n        a1 = b[0]\n        # The second smallest number in b is another original number\n        a2 = b[1]\n        # Append the result for this test case\n        results.append([a1, a2, a3 - a1 - a2])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the given sorted sums of subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list containing t test cases, each with 7 integers.\n\n    Returns:\n        List[List[int]]: A list of lists, each containing the restored array of 3 integers.\n    \"\"\"\n    restored_arrays = []\n    \n    for case in test_cases:\n        # The largest number in the sorted array b is the sum of all three numbers in the original array a.\n        # The smallest number in b is one of the original numbers.\n        # By subtracting the smallest number from the largest, we can find the sum of the other two numbers.\n        a1 = case[0]  # The smallest number in b, which is one of the original numbers.\n        a2 = case[1]  # The second smallest number in b, which is another original number.\n        a3 = case[-1] - a1 - a2  # The largest number minus the sum of the two smallest numbers gives the third number.\n        \n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of sums.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of restored arrays for each test case.\n    \"\"\"\n    restored_arrays = []\n    \n    for case in test_cases:\n        # Sort the array to ensure it is in non-decreasing order\n        case.sort()\n        \n        # Deduce the original array a from the sorted sums array b\n        a1 = case[0]  # The smallest element in b is the smallest number in a\n        a2 = case[6] - case[5]  # The largest element minus the second largest gives the second number in a\n        a3 = case[5] - case[0]  # The second largest element minus the smallest gives the third number in a\n        \n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    result = restore_array(n, test_cases)\n    \n    # Output interface\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of sums of all non-empty subsequences of a three-element array.\n\n    Returns:\n        List[int]: The original array a consisting of three positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements of a\n    a_sum = b[6]\n    # The second largest element in b is the sum of the two largest elements of a\n    a2_plus_a3 = b[5]\n    \n    # Deduce the elements of a\n    a2 = a2_plus_a3 - a1\n    a3 = a_sum - a2_plus_a3\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport typing\n\ndef restore_array(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[typing.Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the given sorted sums of all non-empty subsequences.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is the smallest element of a\n        a1 = case[0]\n        # The largest element in b is the sum of all elements of a\n        a1_a2_a3 = case[6]\n        # The second largest element in b is the sum of the two largest elements of a\n        a2_a3 = case[5]\n        \n        # Calculate the other two elements\n        a2 = a2_a3 - a1\n        a3 = a1_a2_a3 - a1 - a2\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        test_cases.append(list(map(int, input().split())))\n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the original array of three integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element is one of the original integers\n        a1 = case[0]\n        # The largest element is the sum of all three integers\n        sum_all = case[-1]\n        # The second smallest element is the sum of the smallest two original integers\n        a2 = case[1] - a1\n        # The third smallest element is the sum of the smallest and the largest original integers\n        a3 = sum_all - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of lists, where each inner list contains the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element of a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements of a\n        a1_a2_a3 = b[6]\n        # The second largest element in b is the sum of the two largest elements of a\n        a2_a3 = b[5]\n        \n        # Calculate a2 and a3\n        a2 = a2_a3 - a1\n        a3 = a1_a2_a3 - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n\n# Output interface\nresults = restore_array_from_sums(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_a2 = b[5]\n        \n        # Deduce the elements of a\n        a2 = sum_a - sum_a2\n        a3 = sum_a2 - a1\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Function call\n    results = restore_array_from_sums(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in the original array a.\n        # The smallest number in b is one of the original numbers.\n        # The second smallest number in b is another original number.\n        # The third smallest number in b is the third original number.\n        # Therefore, the original array a can be deduced as follows:\n        a1 = b[0]  # The smallest number in b\n        a2 = b[1]  # The second smallest number in b\n        a3 = b[-1] - a1 - a2  # The largest number minus the sum of the two smallest numbers\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing an array of three integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases, each with large integer values. Edge cases with duplicate sums must be considered, ensuring that the solution is both fast and robust.\nrequirement pool:\n- Develop a function to reconstruct array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Consider edge cases with duplicate sums in array b.\n- Provide clear and concise output for each test case.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of array a. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these insights, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, considering the constraints on the input values. The presence of duplicate sums in the input array b can lead to multiple valid outputs, so the solution should be flexible in handling such cases.\nrequirement pool:\n- Develop an algorithm to restore the original array from the given sums.\n- Ensure the solution is efficient for up to 5000 test cases.\n- Handle edge cases with duplicate sums effectively.\n- Provide clear and concise output for each test case.\n- Optimize the solution for large input values.\nWe will implement a function that takes the sorted array b of sums and deduces the original array a of three integers. The key observation is that the largest number in b is the sum of all three numbers in a. The smallest number in b is one of the original numbers. By using these observations, we can efficiently deduce the original array a. We will use Python's built-in capabilities to handle input and output efficiently.\n", "requirement analysis:\nThe task requires reconstructing an array of three integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Develop an algorithm to restore the original array from the given sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and accuracy.\n- Consider edge cases with duplicate sums.\n- Provide clear and concise output for each test case.\nWe will use a simple mathematical approach to restore the original array from the given sums. The key observation is that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. By subtracting the smallest number from the largest, we can find the sum of the other two numbers. Using these observations, we can efficiently reconstruct the original array.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, considering the constraints on the input values. The output should be in a specific format, and the solution should account for possible duplicate sums leading to multiple valid outputs.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle multiple test cases efficiently.\n- Ensure the solution is robust to edge cases with duplicate sums.\n- Provide clear and correct output format for each test case.\n- Optimize for large input values.\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b of sums, the smallest element b[0] is the smallest number in the original array a. The largest element b[6] is the sum of all three numbers in a. The second largest element b[5] is the sum of the two largest numbers in a. Using these observations, we can deduce the three numbers in a as follows: a_1 = b[0], a_2 = b[6] - b[5], and a_3 = b[5] - b[0]. This approach is efficient and handles all edge cases, including duplicate sums.\n", "requirement analysis:\nThe task is to restore the original array of three integers from the given sorted array of sums of all non-empty subsequences. The solution must handle up to 5000 test cases efficiently and account for possible duplicate sums that can lead to multiple valid original arrays.\nrequirement pool:\n- Efficiently restore the original array from the given sums.\n- Handle up to 5000 test cases without performance degradation.\n- Ensure the solution works correctly with duplicate sums.\n- Provide a user-friendly output format.\n- Optimize for minimal computational complexity.\nWe will solve the problem by leveraging the properties of the sorted array b. Since b is the sorted list of all non-empty subsequence sums of a three-element array, the smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and consider edge cases with duplicate sums. The constraints ensure that there is always at least one valid solution.\nrequirement pool:\n- Efficiently restore the original array from the given sums.\n- Handle edge cases with duplicate sums.\n- Ensure the solution is fast for up to 5000 test cases.\n- Provide accurate results for large numbers.\n- Optimize the solution for competitive programming platforms.\nWe will leverage the fact that the array b is sorted and contains all possible sums of the non-empty subsequences of a three-element array. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these observations, we can efficiently reconstruct the original array a.\n", "requirement analysis:\nThe task requires reconstructing an original array of three integers from the sums of its non-empty subsequences. The challenge lies in handling cases where the sums may not uniquely determine the original array due to duplicates. The solution must be efficient to handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Develop a function to restore the original array from the given sums.\n- Ensure the solution is efficient for up to 5000 test cases.\n- Handle edge cases with duplicate sums effectively.\n- Optimize the solution for large integer values.\n- Provide clear documentation and examples for users.\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The key observation is that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently reconstruct the original array.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle multiple test cases and large numbers, ensuring the output format is consistent. Edge cases with duplicate sums should be considered, and the solution should be robust enough to handle them.\nrequirement pool:\n- Restore the original array from the given sums\n- Handle multiple test cases efficiently\n- Consider edge cases with duplicate sums\n- Ensure the solution is scalable for large numbers\n- Provide clear documentation of the solution logic\nWe will solve the problem by leveraging the properties of the sorted array b. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. By using these properties, we can deduce the original array a efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, considering edge cases with duplicate sums. The constraints ensure that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from the given sums\n- Handle up to 5000 test cases efficiently\n- Ensure robustness against edge cases with duplicate sums\n- Optimize for large integer values\n- Provide clear and concise output format\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the elements of a efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, considering the constraints on the input values. The presence of duplicate sums in the input array b can lead to multiple valid outputs, and the solution should be able to handle such cases gracefully.\nrequirement pool:\n- Efficiently compute the original array from the given sums.\n- Handle edge cases with duplicate sums effectively.\n- Ensure the solution is easy to understand and implement.\n- Optimize for large input values and multiple test cases.\n- Provide clear documentation and examples for users.\nWe will use a straightforward approach to restore the original array from the given sums. The key observation is that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. By using these observations, we can efficiently deduce the original array a. We will use Python's built-in list operations to handle the input and output efficiently.\n"], "scores": [], "pass_results": [false, false, true, false, true, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 224, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 140}
