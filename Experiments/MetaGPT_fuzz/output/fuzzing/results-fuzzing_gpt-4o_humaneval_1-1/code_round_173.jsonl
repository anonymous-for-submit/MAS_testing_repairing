{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Assume all side lengths are positive numbers.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "entry_point": "right_angle_triangle", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "test": ["def check(right_angle_triangle):\n\tassert right_angle_triangle(273, 936, 975) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 380, 475) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(705, 376, 799) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(870, 464, 986) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3504, 4015, 5329) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(525, 280, 595) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1536, 1760, 2336) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(175, 600, 625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(455, 1560, 1625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(259, 888, 925) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(490, 1680, 1750) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1185, 632, 1343) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2256, 2585, 3431) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1155, 616, 1309) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 7, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(54, 72, 90) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(20, 12, 16) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2736, 3135, 4161) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(518, 1776, 1850) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 7, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 6, 8) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 5, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 15) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(280, 960, 1000) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 9, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 7, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(765, 408, 867) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(69, 92, 115) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(140, 336, 364) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(240, 144, 192) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(780, 468, 624) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3888, 4455, 5913) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(14, 8, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(204, 272, 340) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 7, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1035, 552, 1173) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(243, 324, 405) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(581, 1992, 2075) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(11, 5, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(820, 492, 656) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(900, 480, 1020) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(360, 864, 936) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 1, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 3, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(210, 112, 238) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1000, 600, 800) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 684, 741) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(65, 156, 169) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(960, 576, 768) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3792, 4345, 5767) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 4, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 12, 13) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 6, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(160, 384, 416) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2880, 3300, 4380) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 5, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 24, 25) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 17) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4752, 5445, 7227) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4656, 5335, 7081) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(380, 912, 988) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(350, 840, 910) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 4, 5) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(70, 42, 56) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 9, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(201, 268, 335) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(170, 408, 442) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 16, 20) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(305, 732, 793) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 552, 598) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 5, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(235, 564, 611) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(81, 108, 135) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 28, 35) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(234, 312, 390) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 138, 184) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(168, 576, 600) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1095, 584, 1241) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(320, 192, 256) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 2, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(528, 605, 803) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1455, 776, 1649) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 72, 75) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2544, 2915, 3869) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(610, 366, 488) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 10, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(219, 292, 365) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(192, 220, 292) == True"], "test_case_list": ["assert right_angle_triangle(273, 936, 975) == True", "assert right_angle_triangle(285, 380, 475) == True", "assert right_angle_triangle(705, 376, 799) == True", "assert right_angle_triangle(870, 464, 986) == True", "assert right_angle_triangle(3504, 4015, 5329) == True", "assert right_angle_triangle(525, 280, 595) == True", "assert right_angle_triangle(1536, 1760, 2336) == True", "assert right_angle_triangle(175, 600, 625) == True", "assert right_angle_triangle(455, 1560, 1625) == True", "assert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "assert right_angle_triangle(3, 2, 5) == False", "assert right_angle_triangle(259, 888, 925) == True", "assert right_angle_triangle(490, 1680, 1750) == True", "assert right_angle_triangle(1185, 632, 1343) == True", "assert right_angle_triangle(6, 1, 9) == False", "assert right_angle_triangle(2256, 2585, 3431) == True", "assert right_angle_triangle(1155, 616, 1309) == True", "assert right_angle_triangle(4, 5, 5) == False", "assert right_angle_triangle(5, 7, 1) == False", "assert right_angle_triangle(5, 1, 2) == False", "assert right_angle_triangle(54, 72, 90) == True", "assert right_angle_triangle(20, 12, 16) == True", "assert right_angle_triangle(5, 5, 2) == False", "assert right_angle_triangle(2736, 3135, 4161) == True", "assert right_angle_triangle(518, 1776, 1850) == True", "assert right_angle_triangle(3, 6, 11) == False", "assert right_angle_triangle(7, 7, 5) == False", "assert right_angle_triangle(15, 2, 10) == False", "assert right_angle_triangle(10, 6, 8) == True", "assert right_angle_triangle(15, 5, 11) == False", "assert right_angle_triangle(1, 1, 2) == False", "assert right_angle_triangle(1, 3, 15) == False", "assert right_angle_triangle(280, 960, 1000) == True", "assert right_angle_triangle(6, 1, 7) == False", "assert right_angle_triangle(10, 9, 3) == False", "assert right_angle_triangle(2, 7, 6) == False", "assert right_angle_triangle(1, 7, 4) == False", "assert right_angle_triangle(765, 408, 867) == True", "assert right_angle_triangle(69, 92, 115) == True", "assert right_angle_triangle(140, 336, 364) == True", "assert right_angle_triangle(240, 144, 192) == True", "assert right_angle_triangle(2, 4, 6) == False", "assert right_angle_triangle(780, 468, 624) == True", "assert right_angle_triangle(6, 7, 6) == False", "assert right_angle_triangle(3888, 4455, 5913) == True", "assert right_angle_triangle(6, 7, 7) == False", "assert right_angle_triangle(2, 2, 2) == False", "assert right_angle_triangle(14, 8, 10) == False", "assert right_angle_triangle(204, 272, 340) == True", "assert right_angle_triangle(3, 7, 2) == False", "assert right_angle_triangle(1035, 552, 1173) == True", "assert right_angle_triangle(243, 324, 405) == True", "assert right_angle_triangle(581, 1992, 2075) == True", "assert right_angle_triangle(11, 5, 8) == False", "assert right_angle_triangle(820, 492, 656) == True", "assert right_angle_triangle(5, 4, 4) == False", "assert right_angle_triangle(4, 4, 4) == False", "assert right_angle_triangle(4, 5, 4) == False", "assert right_angle_triangle(12, 1, 2) == False", "assert right_angle_triangle(900, 480, 1020) == True", "assert right_angle_triangle(3, 3, 4) == False", "assert right_angle_triangle(360, 864, 936) == True", "assert right_angle_triangle(7, 1, 6) == False", "assert right_angle_triangle(5, 3, 2) == False", "assert right_angle_triangle(210, 112, 238) == True", "assert right_angle_triangle(1000, 600, 800) == True", "assert right_angle_triangle(285, 684, 741) == True", "assert right_angle_triangle(65, 156, 169) == True", "assert right_angle_triangle(960, 576, 768) == True", "assert right_angle_triangle(3792, 4345, 5767) == True", "assert right_angle_triangle(5, 5, 6) == False", "assert right_angle_triangle(3, 3, 3) == False", "assert right_angle_triangle(3, 2, 3) == False", "assert right_angle_triangle(1, 2, 1) == False", "assert right_angle_triangle(12, 4, 2) == False", "assert right_angle_triangle(6, 4, 1) == False", "assert right_angle_triangle(5, 12, 13) == True", "assert right_angle_triangle(2, 6, 9) == False", "assert right_angle_triangle(160, 384, 416) == True", "assert right_angle_triangle(3, 6, 3) == False", "assert right_angle_triangle(2, 4, 11) == False", "assert right_angle_triangle(2880, 3300, 4380) == True", "assert right_angle_triangle(10, 5, 7) == False", "assert right_angle_triangle(7, 24, 25) == True", "assert right_angle_triangle(15, 8, 17) == True", "assert right_angle_triangle(4752, 5445, 7227) == True", "assert right_angle_triangle(4656, 5335, 7081) == True", "assert right_angle_triangle(380, 912, 988) == True", "assert right_angle_triangle(350, 840, 910) == True", "assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(2, 4, 8) == False", "assert right_angle_triangle(1, 4, 4) == False", "assert right_angle_triangle(70, 42, 56) == True", "assert right_angle_triangle(15, 9, 11) == False", "assert right_angle_triangle(201, 268, 335) == True", "assert right_angle_triangle(170, 408, 442) == True", "assert right_angle_triangle(12, 16, 20) == True", "assert right_angle_triangle(305, 732, 793) == True", "assert right_angle_triangle(2, 2, 10) == False", "assert right_angle_triangle(1, 3, 4) == False", "assert right_angle_triangle(230, 552, 598) == True", "assert right_angle_triangle(1, 1, 1) == False", "assert right_angle_triangle(3, 3, 9) == False", "assert right_angle_triangle(6, 5, 3) == False", "assert right_angle_triangle(235, 564, 611) == True", "assert right_angle_triangle(3, 1, 4) == False", "assert right_angle_triangle(81, 108, 135) == True", "assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(5, 5, 4) == False", "assert right_angle_triangle(21, 28, 35) == True", "assert right_angle_triangle(234, 312, 390) == True", "assert right_angle_triangle(3, 1, 7) == False", "assert right_angle_triangle(230, 138, 184) == True", "assert right_angle_triangle(168, 576, 600) == True", "assert right_angle_triangle(1095, 584, 1241) == True", "assert right_angle_triangle(320, 192, 256) == True", "assert right_angle_triangle(8, 5, 6) == False", "assert right_angle_triangle(5, 2, 4) == False", "assert right_angle_triangle(6, 4, 4) == False", "assert right_angle_triangle(4, 1, 4) == False", "assert right_angle_triangle(528, 605, 803) == True", "assert right_angle_triangle(5, 4, 10) == False", "assert right_angle_triangle(15, 8, 3) == False", "assert right_angle_triangle(1455, 776, 1649) == True", "assert right_angle_triangle(21, 72, 75) == True", "assert right_angle_triangle(2544, 2915, 3869) == True", "assert right_angle_triangle(610, 366, 488) == True", "assert right_angle_triangle(8, 10, 10) == False", "assert right_angle_triangle(2, 4, 5) == False", "assert right_angle_triangle(2, 3, 1) == False", "assert right_angle_triangle(3, 3, 1) == False", "assert right_angle_triangle(219, 292, 365) == True", "assert right_angle_triangle(1, 5, 5) == False", "assert right_angle_triangle(192, 220, 292) == True"], "nl": "\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    ", "func": "def right_angle_triangle(a, b, c):", "examples": "Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    ", "repair_prompt": ["def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree. Assume all side lengths are positive numbers.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Determines if the given sides form a right-angled triangle using the Pythagorean theorem.\n\n    Args:\n        a (float): Length of the first side of the triangle.\n        b (float): Length of the second side of the triangle.\n        c (float): Length of the third side of the triangle.\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n\n    Raises:\n        ValueError: If any of the inputs are non-positive or non-numeric.\n    \"\"\"\n    # Validate inputs\n    if not all(isinstance(side, (int, float)) and side > 0 for side in (a, b, c)):\n        raise ValueError(\"All sides must be positive numbers.\")\n\n    # Sort the sides to identify the hypotenuse\n    sides = sorted([a, b, c])\n    hypotenuse = sides[2]\n    side1 = sides[0]\n    side2 = sides[1]\n\n    # Apply the Pythagorean theorem\n    return hypotenuse**2 == side1**2 + side2**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Determine if the given side lengths form a right-angled triangle.\n\n    This function uses the Pythagorean theorem to check if the three sides can form a right-angled triangle.\n    It assumes that all inputs are valid positive numbers.\n\n    Args:\n        a (float): Length of the first side.\n        b (float): Length of the second side.\n        c (float): Length of the third side.\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    # Check if the sum of squares of the two smaller sides equals the square of the largest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# result = right_angle_triangle(3.0, 4.0, 5.0)\n# print(result)  # Output: True\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle,\n    False otherwise.\n\n    Args:\n        a (float): Length of the first side (positive float).\n        b (float): Length of the second side (positive float).\n        c (float): Length of the third side (positive float).\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n\n    Raises:\n        ValueError: If any of the side lengths are not positive numbers.\n    \"\"\"\n    # Validate that all inputs are positive numbers\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All side lengths must be positive numbers.\")\n\n    # Identify the longest side\n    sides = sorted([a, b, c])\n    longest_side = sides[2]\n    other_sides = sides[:2]\n\n    # Check Pythagorean theorem\n    return longest_side**2 == other_sides[0]**2 + other_sides[1]**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"Determine if three side lengths form a right-angled triangle.\n\n    Given the lengths of the three sides of a triangle, return True if the\n    three sides form a right-angled triangle, False otherwise.\n\n    Args:\n        a: Length of the first side.\n        b: Length of the second side.\n        c: Length of the third side.\n\n    Returns:\n        Boolean indicating if the sides form a right-angled triangle.\n    \"\"\"\n    # Ensure all inputs are positive numbers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    # Sort the sides to identify the hypotenuse\n    sides = sorted([a, b, c])\n    # Check the Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Should return True\n# print(right_angle_triangle(5, 12, 13))  # Should return True\n# print(right_angle_triangle(1, 2, 3))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n\n    Args:\n        a (float): Length of the first side\n        b (float): Length of the second side\n        c (float): Length of the third side\n\n    Returns:\n        bool: Boolean indicating if the sides form a right-angled triangle\n    \"\"\"\n    # Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    \n    # Check the Pythagorean theorem: a^2 + b^2 = c^2\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# print(right_angle_triangle(3.0, 4.0, 5.0))  # Should return True\n# print(right_angle_triangle(5.0, 12.0, 13.0))  # Should return True\n# print(right_angle_triangle(1.0, 2.0, 3.0))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n\n    This function uses the Pythagorean theorem to determine if the triangle is right-angled.\n    It assumes all inputs are valid positive numbers.\n\n    Args:\n        a (float): Length of the first side.\n        b (float): Length of the second side.\n        c (float): Length of the third side.\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    hypotenuse = sides[2]\n    side1 = sides[0]\n    side2 = sides[1]\n\n    # Check if the sum of the squares of the two smaller sides equals the square of the largest side\n    return side1**2 + side2**2 == hypotenuse**2\n\n# Example usage:\n# print(right_angle_triangle(3.0, 4.0, 5.0))  # Should return True\n# print(right_angle_triangle(5.0, 5.0, 5.0))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"Determine if three given side lengths form a right-angled triangle.\n\n    This function checks if the given side lengths can form a right-angled\n    triangle using the Pythagorean theorem. It sorts the side lengths to\n    identify the hypotenuse and then checks if the sum of the squares of the\n    other two sides equals the square of the hypotenuse.\n\n    Args:\n        a (float): Length of the first side.\n        b (float): Length of the second side.\n        c (float): Length of the third side.\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Sort the sides to ensure the largest is treated as the hypotenuse\n    sides = sorted([a, b, c])\n    # Check the Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# print(right_angle_triangle(3.0, 4.0, 5.0))  # Should return True\n# print(right_angle_triangle(5.0, 12.0, 13.0))  # Should return True\n# print(right_angle_triangle(1.0, 2.0, 3.0))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"Determine if three side lengths form a right-angled triangle.\n\n    Given the lengths of the three sides of a triangle, return True if the\n    three sides form a right-angled triangle, False otherwise.\n\n    Args:\n        a: Length of the first side.\n        b: Length of the second side.\n        c: Length of the third side.\n\n    Returns:\n        Boolean indicating if the sides form a right-angled triangle.\n    \"\"\"\n    # Sort the sides to ensure the largest is considered the hypotenuse\n    sides = sorted([a, b, c])\n    # Apply the Pythagorean theorem: a^2 + b^2 = c^2\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# print(right_angle_triangle(3.0, 4.0, 5.0))  # Should return True\n# print(right_angle_triangle(5.0, 12.0, 13.0))  # Should return True\n# print(right_angle_triangle(1.0, 1.0, 1.0))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"Determine if three given side lengths form a right-angled triangle.\n\n    This function uses the Pythagorean theorem to check if the given side lengths\n    can form a right-angled triangle. It sorts the side lengths to identify the\n    hypotenuse and then checks if the sum of the squares of the other two sides\n    equals the square of the hypotenuse.\n\n    Args:\n        a (float): Length of the first side.\n        b (float): Length of the second side.\n        c (float): Length of the third side.\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Sort the sides to ensure the largest is treated as the hypotenuse\n    sides = sorted([a, b, c])\n    # Check the Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# print(right_angle_triangle(3.0, 4.0, 5.0))  # Should return True\n# print(right_angle_triangle(5.0, 12.0, 13.0))  # Should return True\n# print(right_angle_triangle(1.0, 2.0, 3.0))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n    \n    Args:\n        a (float): Length of the first side (positive float).\n        b (float): Length of the second side (positive float).\n        c (float): Length of the third side (positive float).\n    \n    Returns:\n        bool: Boolean indicating if the sides form a right-angled triangle.\n    \"\"\"\n    # Sort the sides to identify the potential hypotenuse\n    sides = sorted([a, b, c])\n    \n    # Check if the sides can form a valid triangle\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    \n    # Apply the Pythagorean theorem to check for a right-angled triangle\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"], "plans": ["requirement analysis:\nThe function should accurately determine if the given sides form a right-angled triangle using the Pythagorean theorem. It should handle edge cases and provide feedback for invalid inputs.\nrequirement pool:\n- Implement triangle validation using Pythagorean theorem\n- Optimize for performance with large numbers\n- Provide error handling for invalid inputs\n- Enhance user feedback with detailed error messages\n- Ensure compatibility with various input formats\nWe will implement the function using the Pythagorean theorem to check if the given sides form a right-angled triangle. The function will first validate the inputs to ensure they are positive numbers. It will then sort the sides to identify the hypotenuse and apply the theorem. We will use Python's built-in capabilities for handling large numbers and provide error messages for invalid inputs.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle all positive numerical inputs and return a boolean value.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Ensure the function handles edge cases and invalid inputs gracefully.\n- Provide comprehensive documentation and examples.\n- Consider extending functionality to other types of triangles.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will assume all inputs are valid positive numbers, as the requirement does not specify handling non-numeric inputs. The function will be optimized for performance by ensuring minimal computational steps and will handle edge cases where the sides do not form a triangle.\n", "requirement analysis:\nThe function should accurately determine if the given sides form a right-angled triangle using the Pythagorean theorem. It should handle edge cases such as non-positive numbers and ensure performance efficiency.\nrequirement pool:\n- Implement the main function to check right-angled triangle\n- Optimize for performance with large inputs\n- Ensure input validation for positive numbers\n- Provide detailed error messages for invalid inputs\n- Include unit tests for various triangle scenarios\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will first validate that all inputs are positive numbers. It will then determine if the triangle is right-angled by checking if the square of the longest side is equal to the sum of the squares of the other two sides. This approach ensures accuracy and efficiency.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle all positive numerical inputs and return a boolean value.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Ensure the function handles edge cases and invalid inputs gracefully.\n- Provide clear documentation and examples.\n- Consider extending functionality to check for other types of triangles.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will sort the side lengths to identify the hypotenuse and then check if the sum of the squares of the other two sides equals the square of the hypotenuse. We will use Python's built-in functions to ensure optimal performance and handle only positive numerical inputs as specified.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle all positive numerical inputs and return a boolean value.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Ensure the function handles edge cases.\n- Provide clear documentation and examples.\n- Consider extending functionality to other triangle types.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will assume all inputs are valid positive numbers and will return a boolean value. We will use Python's built-in capabilities to ensure quick calculations and handle edge cases by checking all permutations of the side lengths.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle all positive numerical inputs and return a boolean value. The function must be efficient to support real-time applications.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Ensure the function handles edge cases and invalid inputs gracefully.\n- Provide comprehensive documentation and examples.\n- Consider extending functionality to identify other triangle types.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will assume all inputs are valid positive numbers, as the requirement does not specify handling non-numeric inputs. The function will be optimized for performance by ensuring minimal computational steps and will handle edge cases such as degenerate triangles.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle all positive numerical inputs and return a boolean value indicating the result.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance with large inputs.\n- Ensure the function handles edge cases and invalid inputs gracefully.\n- Provide detailed error messages for invalid inputs.\n- Include unit tests to verify function accuracy.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will sort the side lengths to identify the hypotenuse and then check if the sum of the squares of the other two sides equals the square of the hypotenuse. We will use Python's built-in capabilities for this task, ensuring the function is efficient and handles edge cases gracefully.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle all positive numerical inputs and return a boolean value.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance with large inputs.\n- Ensure the function handles edge cases and invalid inputs gracefully.\n- Provide clear documentation and examples for users.\n- Consider extending functionality to identify other triangle types.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will assume all inputs are valid positive numbers, as the requirement does not specify handling non-numeric inputs. The function will sort the side lengths to identify the hypotenuse and then apply the theorem to verify if the triangle is right-angled.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle all positive numerical inputs and return a boolean value.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Ensure the function handles edge cases, such as very large or very small numbers.\n- Provide detailed error messages for invalid inputs.\n- Include additional geometric calculations as optional features.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will sort the side lengths to identify the hypotenuse and then check if the sum of the squares of the other two sides equals the square of the hypotenuse. This approach ensures accuracy and handles edge cases efficiently. We will use Python's built-in capabilities without additional libraries to keep the implementation simple and fast.\n", "requirement analysis:\nThe function should accurately determine if the given sides form a right-angled triangle using the Pythagorean theorem. It should handle all positive numerical inputs and provide a boolean output. Edge cases, such as non-triangular side lengths, should be considered.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Ensure the function handles edge cases correctly.\n- Provide user feedback for invalid inputs.\n- Develop a user-friendly interface for input and output.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will first sort the side lengths to identify the potential hypotenuse and then apply the theorem to verify if the triangle is right-angled. We will use Python's built-in capabilities for sorting and mathematical operations to ensure optimal performance. The function will handle edge cases by checking if the side lengths can form a valid triangle before applying the Pythagorean theorem.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [134, 134, 134, 134, 134, 134, 134, 134, 134, 134], "completion": "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n    \n    Args:\n        a (float): Length of the first side (positive float).\n        b (float): Length of the second side (positive float).\n        c (float): Length of the third side (positive float).\n    \n    Returns:\n        bool: Boolean indicating if the sides form a right-angled triangle.\n    \"\"\"\n    # Sort the sides to identify the potential hypotenuse\n    sides = sorted([a, b, c])\n    \n    # Check if the sides can form a valid triangle\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    \n    # Apply the Pythagorean theorem to check for a right-angled triangle\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "passed": true, "pass": true, "pass_num": 10, "round": 173, "mutate_method": "add_1_sentence_at_end", "parent_index": 178}
