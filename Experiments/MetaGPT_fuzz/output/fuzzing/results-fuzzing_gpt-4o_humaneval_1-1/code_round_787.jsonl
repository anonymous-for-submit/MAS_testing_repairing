{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''"], "completions": ["from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers as input and returns True if one of the numbers is equal to the sum of the other two.\n\n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n\n    Returns:\n    bool: True if one number equals the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        return True\n    \n    # Check if y is equal to the sum of x and z\n    if y == x + z:\n        return True\n    \n    # Check if z is equal to the sum of x and y\n    if z == x + y:\n        return True\n    \n    # If none of the conditions are met, return False\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"Checks if any of the three input numbers is equal to the sum of the other two.\n\n    This function handles both integer and floating-point numbers. It uses a tolerance\n    for floating-point comparisons to account for precision issues.\n\n    Args:\n        x (float): First number.\n        y (float): Second number.\n        z (float): Third number.\n\n    Returns:\n        bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Define a small tolerance for floating-point comparison\n    tolerance = 1e-9\n\n    # Check if x is approximately equal to the sum of y and z\n    if abs(x - (y + z)) < tolerance:\n        return True\n\n    # Check if y is approximately equal to the sum of x and z\n    if abs(y - (x + z)) < tolerance:\n        return True\n\n    # Check if z is approximately equal to the sum of x and y\n    if abs(z - (x + y)) < tolerance:\n        return True\n\n    # If none of the above conditions are met, return False\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if any of the three numbers is equal to the sum of the other two.\n\n    Args:\n        x (float): The first number.\n        y (float): The second number.\n        z (float): The third number.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        return True\n    # Check if y is equal to the sum of x and z\n    elif y == x + z:\n        return True\n    # Check if z is equal to the sum of x and y\n    elif z == x + y:\n        return True\n    # If none of the above conditions are met, return False\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"Determine if any of the three numbers is equal to the sum of the other two.\n\n    This function checks if one of the three input numbers (x, y, z) is equal to\n    the sum of the other two numbers. It handles both integer and float inputs\n    and returns a boolean value indicating the result.\n\n    Args:\n        x (float): First number, can be an integer or float.\n        y (float): Second number, can be an integer or float.\n        z (float): Third number, can be an integer or float.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two,\n              False otherwise.\n\n    Examples:\n        >>> any_int(5, 2, 7)\n        True\n        >>> any_int(3, 2, 2)\n        False\n        >>> any_int(3, -2, 1)\n        True\n        >>> any_int(3.6, -2.2, 2)\n        False\n    \"\"\"\n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        return True\n    # Check if y is equal to the sum of x and z\n    if y == x + z:\n        return True\n    # Check if z is equal to the sum of x and y\n    if z == x + y:\n        return True\n    # If none of the above conditions are met, return False\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"Check if any of the three numbers is equal to the sum of the other two.\n\n    This function takes three numbers (x, y, z) and returns True if one of the\n    numbers is equal to the sum of the other two, considering floating-point\n    precision issues. Otherwise, it returns False.\n\n    Args:\n        x (float): First number.\n        y (float): Second number.\n        z (float): Third number.\n\n    Returns:\n        bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Define a small epsilon value to handle floating-point precision issues\n    epsilon = 1e-9\n\n    # Check if x is approximately equal to the sum of y and z\n    if abs(x - (y + z)) < epsilon:\n        return True\n\n    # Check if y is approximately equal to the sum of x and z\n    if abs(y - (x + z)) < epsilon:\n        return True\n\n    # Check if z is approximately equal to the sum of x and y\n    if abs(z - (x + y)) < epsilon:\n        return True\n\n    # If none of the above conditions are met, return False\n    return False\n\n# Example test cases to verify the function's correctness\nif __name__ == \"__main__\":\n    # Test case 1: x is the sum of y and z\n    assert any_int(5.0, 2.0, 3.0) == True\n\n    # Test case 2: y is the sum of x and z\n    assert any_int(2.0, 5.0, 3.0) == True\n\n    # Test case 3: z is the sum of x and y\n    assert any_int(2.0, 3.0, 5.0) == True\n\n    # Test case 4: No number is the sum of the other two\n    assert any_int(1.0, 2.0, 4.0) == False\n\n    # Test case 5: Floating-point precision issue\n    assert any_int(0.1 + 0.2, 0.1, 0.2) == True\n\n    print(\"All test cases passed.\")\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"Checks if any of the three input numbers is equal to the sum of the other two.\n\n    This function takes three numbers (x, y, z) and returns True if one of the numbers\n    is equal to the sum of the other two. Otherwise, it returns False.\n\n    Args:\n        x (float): First number.\n        y (float): Second number.\n        z (float): Third number.\n\n    Returns:\n        bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        return True\n    # Check if y is equal to the sum of x and z\n    if y == x + z:\n        return True\n    # Check if z is equal to the sum of x and y\n    if z == x + y:\n        return True\n    # If none of the above conditions are met, return False\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers (x, y, z) and returns True if one of the numbers is equal to the sum of the other two,\n    otherwise returns False.\n\n    Args:\n        x (float): The first number.\n        y (float): The second number.\n        z (float): The third number.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        return True\n    # Check if y is equal to the sum of x and z\n    elif y == x + z:\n        return True\n    # Check if z is equal to the sum of x and y\n    elif z == x + y:\n        return True\n    # If none of the conditions are met, return False\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"Checks if any of the three input numbers is equal to the sum of the other two.\n\n    This function handles both integers and floating-point numbers, ensuring accurate\n    results by considering floating-point precision issues.\n\n    Args:\n        x (float): First number.\n        y (float): Second number.\n        z (float): Third number.\n\n    Returns:\n        bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Define a small epsilon value to handle floating-point precision issues\n    epsilon = 1e-9\n\n    # Check if x is approximately equal to the sum of y and z\n    if abs(x - (y + z)) < epsilon:\n        return True\n\n    # Check if y is approximately equal to the sum of x and z\n    if abs(y - (x + z)) < epsilon:\n        return True\n\n    # Check if z is approximately equal to the sum of x and y\n    if abs(z - (x + y)) < epsilon:\n        return True\n\n    # If none of the above conditions are met, return False\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers (x, y, z) and returns True if one of the numbers is equal to the sum of the other two, \n    otherwise returns False.\n\n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n\n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise\n    \"\"\"\n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        return True\n    # Check if y is equal to the sum of x and z\n    elif y == x + z:\n        return True\n    # Check if z is equal to the sum of x and y\n    elif z == x + y:\n        return True\n    # If none of the conditions are met, return False\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Determines if any of the three numbers is equal to the sum of the other two.\n\n    This function checks if one of the numbers (x, y, or z) is equal to the sum of the other two numbers.\n    It handles both integer and float inputs and uses straightforward conditional statements for efficiency.\n\n    Parameters:\n    x (float): First number, can be an integer or float.\n    y (float): Second number, can be an integer or float.\n    z (float): Third number, can be an integer or float.\n\n    Returns:\n    bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        return True\n    # Check if y is equal to the sum of x and z\n    if y == x + z:\n        return True\n    # Check if z is equal to the sum of x and y\n    if z == x + y:\n        return True\n    \n    # If none of the conditions are met, return False\n    return False\n"], "plans": ["requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two. It must handle both integers and floating-point numbers, ensuring precision and performance. The function should be simple and easy to understand, facilitating integration into larger systems.\nrequirement pool:\n- The function must return True if one number equals the sum of the other two.\n- The function should handle both integer and floating-point inputs.\n- Optimize the function for performance.\n- Ensure the function is easy to read and maintain.\n- Provide comprehensive test cases to validate functionality.\nWe will implement a simple function using Python that checks if any of the three input numbers is equal to the sum of the other two. The function will handle both integer and floating-point numbers, ensuring precision. We will use basic arithmetic operations and conditional statements to achieve this, optimizing for performance by minimizing computational overhead.\n", "requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two. It should handle both integer and floating-point numbers and return a boolean value.\nrequirement pool:\n- Implement the main function logic to check the condition\n- Ensure compatibility with both integer and floating-point inputs\n- Optimize the function for performance\n- Provide comprehensive test cases\n- Document the function usage and examples\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will handle both integer and floating-point numbers. We will use Python's built-in capabilities to ensure accurate floating-point comparisons, considering potential precision issues.\n", "requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two. It should handle both integer and floating-point numbers and return a boolean value. Edge cases such as negative numbers and zero should be considered.\nrequirement pool:\n- Implement the main function logic to check the condition\n- Ensure compatibility with both integer and floating-point inputs\n- Optimize the function for performance\n- Handle edge cases like negative numbers and zero\n- Provide comprehensive documentation and examples\nWe will implement a simple function using basic Python syntax to check if any of the three input numbers is equal to the sum of the other two. The function will handle both integer and floating-point numbers, considering edge cases such as negative numbers and zero. We will ensure compatibility with floating-point precision by using Python's inherent handling of floating-point arithmetic.\n", "requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two. It should handle both integer and float inputs and return a boolean value. The function must be efficient and easy to understand.\nrequirement pool:\n- Implement the main function logic to check the sum condition\n- Ensure the function handles both integer and float inputs\n- Provide clear documentation and examples\n- Optimize the function for performance\n- Enhance code readability\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will handle both integer and float inputs and return a boolean value. We will ensure the function is efficient and easy to understand by using straightforward logic and clear documentation.\n", "requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two. It should handle both integer and floating-point numbers and return a boolean value.\nrequirement pool:\n- Implement the main function logic to check the sum condition.\n- Ensure compatibility with both integer and floating-point inputs.\n- Optimize for performance to handle large numbers efficiently.\n- Include comprehensive test cases to validate functionality.\n- Document the function with clear examples and edge cases.\nWe will implement a simple function using Python's built-in capabilities to check if any of the three input numbers is equal to the sum of the other two. This approach ensures simplicity and efficiency, leveraging Python's native handling of both integers and floating-point numbers. We will also include test cases to verify the function's correctness across various scenarios, including edge cases with floating-point precision.\n", "requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two. It should handle both integer and float inputs and return a boolean value. The implementation should be efficient and easy to understand.\nrequirement pool:\n- Implement the main function logic to check the condition.\n- Ensure compatibility with both integer and float inputs.\n- Optimize the function for performance.\n- Provide clear documentation and examples.\n- Consider edge cases and input validation.\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will handle both integer and float inputs seamlessly. We will ensure the function is efficient and easy to understand, using basic Python operations without any external libraries, as the task is straightforward and does not require complex mathematical operations.\n", "requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two. It must handle both integer and floating-point numbers and return a boolean value. The implementation should be efficient and straightforward.\nrequirement pool:\n- Implement the main function logic to check sum equality.\n- Ensure compatibility with both integer and floating-point inputs.\n- Optimize the function for performance.\n- Include comprehensive test cases for validation.\n- Document the function usage and examples.\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will handle both integer and floating-point numbers using basic arithmetic operations. We will ensure the function is efficient and straightforward, without the need for any complex libraries.\n", "requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two. It should handle both integer and floating-point numbers and return a boolean value.\nrequirement pool:\n- Implement the main function logic to check sum equality.\n- Ensure compatibility with both integer and floating-point inputs.\n- Optimize the function for performance.\n- Include comprehensive test cases for validation.\n- Document the function with clear examples.\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will handle both integers and floating-point numbers, ensuring accurate results by considering floating-point precision issues. We will use Python's built-in capabilities without additional libraries, as they are sufficient for this task.\n", "requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two. It must handle both integer and float inputs and return a boolean value. Performance optimization is crucial to ensure quick execution.\nrequirement pool:\n- Implement the main function logic to check sum condition\n- Ensure compatibility with both integer and float inputs\n- Optimize the function for performance\n- Provide clear documentation and examples\n- Include error handling for invalid inputs\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will handle both integer and float inputs and return a boolean value. We will ensure the function is optimized for performance by using straightforward arithmetic operations without any unnecessary complexity.\n", "requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two. It should handle both integer and float inputs and return a boolean value. The function must be efficient and easy to understand, with clear documentation.\nrequirement pool:\n- The function must return True if one number is the sum of the other two.\n- The function should handle both integer and float inputs.\n- The function should be optimized for performance.\n- The function should include clear and concise documentation.\n- The function should have a simple and readable code structure.\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will handle both integer and float inputs and will use straightforward conditional statements to ensure efficiency and readability. We will also include clear documentation to explain the function's purpose and usage.\n"], "scores": [0.9847, 0.9847, 0.9847, 0.9847, 0.9847, 0.9847, 0.9847, 0.9847, 0.9847, 0.9847], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [129, 129, 129, 129, 129, 129, 129, 129, 129, 129], "completion": "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Determines if any of the three numbers is equal to the sum of the other two.\n\n    This function checks if one of the numbers (x, y, or z) is equal to the sum of the other two numbers.\n    It handles both integer and float inputs and uses straightforward conditional statements for efficiency.\n\n    Parameters:\n    x (float): First number, can be an integer or float.\n    y (float): Second number, can be an integer or float.\n    z (float): Third number, can be an integer or float.\n\n    Returns:\n    bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        return True\n    # Check if y is equal to the sum of x and z\n    if y == x + z:\n        return True\n    # Check if z is equal to the sum of x and y\n    if z == x + y:\n        return True\n    \n    # If none of the conditions are met, return False\n    return False\n", "passed": false, "pass": false, "pass_num": 0, "round": 787, "mutate_method": "condense_two2one", "parent_index": 411}
