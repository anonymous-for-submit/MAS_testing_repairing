{"task_id": "HumanEval/126", "prompt": "def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume that all numbers in the list are integers. Additionally, none of these integers are negative, meaning they are zero or greater.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "entry_point": "is_sorted", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": ["def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5, 6, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 4, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 7, 4, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 2, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 5, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 4, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8, 1, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 5, 6, 5, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 5, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 4, 6, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([4, 5, 8, 4, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 5, 2, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 1, 3, 6, 3, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 2, 5, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 7, 7, 6, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 2, 5, 8, 11]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 2, 9, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 5, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 1, 2, 3, 3, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 3, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 2, 2, 2, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 7, 4, 2, 2, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 4, 8, 1, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 2, 3, 5, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 4, 4, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 3, 3, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 6, 9, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 3, 3, 3, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 3, 4, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 2, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 3, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 7, 3, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 8, 4, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 3, 3, 5, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 8, 4, 7, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 4, 5, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 6, 1, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5]) == True", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 6, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 2, 2, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 6, 3, 9, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 7, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 7, 3, 4, 8, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 8, 6, 7, 8]) == False"], "test_case_list": ["assert is_sorted([1, 1, 3, 6, 7, 8]) == True", "assert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "assert is_sorted([2, 3, 3, 5]) == True", "assert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "assert is_sorted([3, 7, 5]) == False", "assert is_sorted([1, 1, 3, 5, 6, 6]) == True", "assert is_sorted([5, 6, 3]) == False", "assert is_sorted([3, 4, 4, 4, 4, 7]) == False", "assert is_sorted([1, 5, 7, 4, 4, 2]) == False", "assert is_sorted([2, 2, 6, 8]) == True", "assert is_sorted([3, 4, 6, 7, 7]) == True", "assert is_sorted([3, 3, 5, 7, 1, 5]) == False", "assert is_sorted([2, 4, 8, 9]) == True", "assert is_sorted([6, 4, 4]) == False", "assert is_sorted([8, 1, 2]) == False", "assert is_sorted([1, 3, 4, 5]) == True", "assert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "assert is_sorted([3, 2, 1]) == False", "assert is_sorted([1, 1, 3, 5]) == True", "assert is_sorted([4, 3, 5, 6, 5, 3]) == False", "assert is_sorted([1, 3, 5, 5, 7]) == True", "assert is_sorted([5, 4, 6, 7, 1, 5]) == False", "assert is_sorted([4, 5, 8, 4, 2, 7]) == False", "assert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "assert is_sorted([5, 5, 2, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([6, 1, 3, 6, 3, 7]) == False", "assert is_sorted([1, 1, 1, 2, 5, 8]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "assert is_sorted([3, 7, 7, 6, 6, 7]) == False", "assert is_sorted([10]) == True", "assert is_sorted([3, 3, 4, 6, 7, 8]) == True", "assert is_sorted([2, 2, 2, 5, 8, 11]) == False", "assert is_sorted([1, 2, 3, 3, 7, 9]) == True", "assert is_sorted([2, 4, 2, 9, 10]) == False", "assert is_sorted([3, 4, 6, 7]) == True", "assert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "assert is_sorted([1, 2, 3, 5, 5, 8]) == True", "assert is_sorted([6, 1, 2, 3, 3, 3]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "assert is_sorted([1, 3, 3, 4, 5]) == True", "assert is_sorted([1, 4, 4, 4, 5]) == False", "assert is_sorted([3, 2, 2, 2, 3]) == False", "assert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([4]) == True", "assert is_sorted([5, 7, 4, 2, 2, 4]) == False", "assert is_sorted([6]) == True", "assert is_sorted([3, 7, 4, 8, 1, 4]) == False", "assert is_sorted([1, 6, 3]) == False", "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "assert is_sorted([6, 2, 3, 5, 2, 7]) == False", "assert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "assert is_sorted([1, 5, 5, 6, 6, 9]) == True", "assert is_sorted([2, 3, 4, 4, 8, 10]) == True", "assert is_sorted([1, 5, 5, 6, 9]) == True", "assert is_sorted([1, 2, 3, 4]) == True", "assert is_sorted([2, 4, 5]) == True", "assert is_sorted([7]) == True", "assert is_sorted([2, 2, 3, 3, 6, 7]) == True", "assert is_sorted([3, 3, 6, 9, 9]) == True", "assert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "assert is_sorted([5, 3, 3, 3, 10]) == False", "assert is_sorted([1, 5, 3, 4, 3]) == False", "assert is_sorted([2, 4, 4]) == True", "assert is_sorted([1, 1, 2, 4, 5, 5]) == True", "assert is_sorted([2, 5, 4]) == False", "assert is_sorted([1, 2, 2, 3, 3, 4]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "assert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "assert is_sorted([1, 2, 3, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 7, 8]) == True", "assert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "assert is_sorted([1, 2, 3, 4, 5, 6]) == True", "assert is_sorted([1, 1, 1, 7, 3, 8]) == False", "assert is_sorted([3, 8, 4, 4, 10]) == False", "assert is_sorted([]) == True", "assert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "assert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "assert is_sorted([2, 5, 6, 8]) == True", "assert is_sorted([4, 5, 7, 8]) == True", "assert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "assert is_sorted([3]) == True", "assert is_sorted([3, 3, 3, 3, 5, 6]) == False", "assert is_sorted([3, 6, 3]) == False", "assert is_sorted([1, 3, 4, 4, 5, 5]) == True", "assert is_sorted([3, 1, 8, 4, 7, 4]) == False", "assert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "assert is_sorted([1, 4, 5, 5, 7, 8]) == True", "assert is_sorted([1, 4, 6, 1, 6, 7]) == False", "assert is_sorted([2, 3, 6, 7, 7]) == True", "assert is_sorted([5]) == True", "assert is_sorted([]) == True", "assert is_sorted([3, 2, 6, 3, 6, 4]) == False", "assert is_sorted([2, 5, 2, 2, 2, 7]) == False", "assert is_sorted([2, 6, 3, 9, 1]) == False", "assert is_sorted([1, 1, 1, 3, 4]) == False", "assert is_sorted([8]) == True", "assert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "assert is_sorted([2, 4, 5, 7]) == True", "assert is_sorted([3, 1, 3, 2, 1]) == False", "assert is_sorted([3, 3, 4, 7, 8, 9]) == True", "assert is_sorted([1, 5, 6, 6, 7, 7]) == True", "assert is_sorted([6, 7, 3, 4, 8, 6]) == False", "assert is_sorted([1, 8, 6, 7, 8]) == False"], "nl": "\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    ", "func": "def is_sorted(lst):", "examples": "Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    ", "repair_prompt": ["def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume that all numbers in the list are integers. Additionally, none of these integers are negative, meaning they are zero or greater.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list is sorted in ascending order and contains no number more than once.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted and has no number more than once, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or single element list\n    if len(lst) <= 1:\n        return True\n\n    # Iterate through the list to check if it is sorted and has no duplicates\n    for i in range(1, len(lst)):\n        # Check if the current element is less than or equal to the previous one\n        if lst[i] <= lst[i - 1]:\n            return False\n\n    # If no issues found, the list is sorted and has no duplicates\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list is sorted in ascending order and no number appears more than twice.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is trivially sorted\n        return True\n\n    # Initialize a dictionary to count occurrences of each number\n    count_dict = {}\n\n    # Iterate through the list to check sorting and count occurrences\n    for i in range(len(lst)):\n        # Count occurrences of the current number\n        if lst[i] in count_dict:\n            count_dict[lst[i]] += 1\n        else:\n            count_dict[lst[i]] = 1\n\n        # Check if any number appears more than twice\n        if count_dict[lst[i]] > 2:\n            return False\n\n        # Check if the list is sorted\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list) -> bool:\n    \"\"\"\n    Checks if the list is sorted in ascending order and no number appears more than twice.\n    \n    Parameters:\n    lst (list): A list of non-negative integers.\n    \n    Returns:\n    bool: True if the list is sorted and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        # Return True for empty list as it is trivially sorted\n        return True\n    \n    # Initialize a dictionary to count occurrences of each number\n    count_dict = {}\n    \n    # Iterate through the list to check sorting and count occurrences\n    for i in range(len(lst)):\n        # Check for non-integer values\n        if not isinstance(lst[i], int) or lst[i] < 0:\n            raise ValueError(\"List must contain only non-negative integers.\")\n        \n        # Count occurrences of each number\n        if lst[i] in count_dict:\n            count_dict[lst[i]] += 1\n        else:\n            count_dict[lst[i]] = 1\n        \n        # Check if any number appears more than twice\n        if count_dict[lst[i]] > 2:\n            return False\n        \n        # Check if the list is sorted in ascending order\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted\n        return True\n\n    # Initialize a dictionary to count occurrences of each number\n    count_dict = {}\n\n    # Iterate through the list\n    for i in range(len(lst)):\n        # Count occurrences of each number\n        if lst[i] in count_dict:\n            count_dict[lst[i]] += 1\n        else:\n            count_dict[lst[i]] = 1\n\n        # Check if any number appears more than twice\n        if count_dict[lst[i]] > 2:\n            return False\n\n        # Check if the list is sorted in ascending order\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted\n        return True\n\n    # Initialize a dictionary to count occurrences of each number\n    count_dict = {}\n\n    # Iterate through the list to check sorting and count occurrences\n    for i in range(len(lst)):\n        # Count occurrences of each number\n        if lst[i] in count_dict:\n            count_dict[lst[i]] += 1\n        else:\n            count_dict[lst[i]] = 1\n\n        # Check if any number appears more than twice\n        if count_dict[lst[i]] > 2:\n            return False\n\n        # Check if the list is sorted in ascending order\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n\n    return True\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume that all numbers in the list are integers and non-negative.\n\n    Args:\n        lst: List of integers to be checked.\n\n    Returns:\n        Boolean indicating if the list is sorted and has no more than one duplicate of any number.\n    \"\"\"\n    if not lst:\n        return True  # An empty list is considered sorted\n\n    previous_number = lst[0]\n    occurrences = {previous_number: 1}\n\n    for i in range(1, len(lst)):\n        current_number = lst[i]\n\n        # Check if the list is sorted\n        if current_number < previous_number:\n            return False\n\n        # Track occurrences of each number\n        if current_number in occurrences:\n            occurrences[current_number] += 1\n            if occurrences[current_number] > 2:\n                return False\n        else:\n            occurrences[current_number] = 1\n\n        previous_number = current_number\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of non-negative integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and no number appears more than twice, otherwise False.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted by default.\n        return True\n\n    # Initialize a counter for duplicate occurrences.\n    duplicate_count = 1\n\n    # Iterate through the list to check order and count duplicates.\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous, the list is not sorted.\n            return False\n        if lst[i] == lst[i - 1]:\n            # If the current element is equal to the previous, increment the duplicate count.\n            duplicate_count += 1\n            if duplicate_count > 2:\n                # If any number appears more than twice, return False.\n                return False\n        else:\n            # Reset duplicate count if the current element is different from the previous.\n            duplicate_count = 1\n\n    # If the loop completes without returning False, the list is sorted and duplicates are valid.\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending order and no number appears more than once consecutively.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than once consecutively, False otherwise.\n    \"\"\"\n    if not lst:\n        return True  # An empty list is considered sorted\n\n    previous_value = lst[0]\n    for i in range(1, len(lst)):\n        current_value = lst[i]\n        if current_value < previous_value:\n            return False  # List is not sorted in ascending order\n        if current_value == previous_value:\n            return False  # Consecutive duplicates found\n        previous_value = current_value\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Checks if the list is sorted in ascending order and no number appears more than twice.\n\n    This function iterates through the list to ensure that it is sorted in ascending order\n    and that no number appears more than twice. It handles edge cases such as empty lists\n    or lists with one element by considering them sorted by default.\n\n    Args:\n        lst (list[int]): A list of non-negative integers.\n\n    Returns:\n        bool: True if the list is sorted and no number appears more than twice, False otherwise.\n    \"\"\"\n    if len(lst) <= 1:\n        # An empty list or a list with one element is considered sorted\n        return True\n\n    # Initialize a counter for consecutive duplicates\n    consecutive_count = 1\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous, the list is not sorted\n            return False\n        if lst[i] == lst[i - 1]:\n            # If the current element is equal to the previous, increment the consecutive count\n            consecutive_count += 1\n            if consecutive_count > 2:\n                # If any number appears more than twice consecutively, return False\n                return False\n        else:\n            # Reset the consecutive count if the current element is different\n            consecutive_count = 1\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Determines if a list of integers is sorted in ascending order and no number appears more than twice.\n\n    Args:\n        lst: A list of integers.\n\n    Returns:\n        A boolean indicating if the list is sorted in ascending order and no number appears more than twice.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted.\n        return True\n\n    # Initialize a dictionary to count occurrences of each number.\n    count_dict = {}\n\n    # Iterate through the list to check sorting and count occurrences.\n    for i in range(len(lst)):\n        # Check if the current number is greater than the previous one (ensuring ascending order).\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n\n        # Count occurrences of each number.\n        if lst[i] in count_dict:\n            count_dict[lst[i]] += 1\n        else:\n            count_dict[lst[i]] = 1\n\n        # If any number appears more than twice, return False.\n        if count_dict[lst[i]] > 2:\n            return False\n\n    return True\n"], "plans": ["requirement analysis:\nThe function must determine if a list is sorted in ascending order and return False if any number appears more than once. It should handle only non-negative integers and be efficient for large lists.\nrequirement pool:\n- Implement the main function to check if a list is sorted.\n- Ensure the function returns False for lists with more than one duplicate.\n- Optimize the function for performance with large lists.\n- Add comprehensive test cases to validate functionality.\n- Document the function usage and edge cases.\nWe will implement a function that iterates through the list to check if it is sorted in ascending order. During the iteration, we will also count occurrences of each number to ensure no number appears more than once. This approach will efficiently handle large lists by using a single pass through the list. We will use Python's built-in data structures and avoid external libraries to keep the implementation simple and efficient.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and ensure no number appears more than twice. It should handle lists of varying sizes efficiently.\nrequirement pool:\n- Implement the main sorting check logic\n- Ensure duplicate handling logic is correct\n- Optimize for performance with large lists\n- Add comprehensive test cases\n- Document the function usage and edge cases\nWe will implement a function that iterates through the list to check if it is sorted in ascending order while also counting occurrences of each number to ensure no number appears more than twice. This approach will efficiently handle large lists by using a single pass through the list.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and ensure no number appears more than twice. It should handle only non-negative integers and return a boolean value. Performance is crucial for large lists.\nrequirement pool:\n- Implement the main sorting check logic\n- Ensure duplicate handling logic is correct\n- Optimize for performance with large lists\n- Add error handling for non-integer inputs\n- Provide detailed documentation and examples\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and ensure that no number appears more than twice. We will use Python's built-in capabilities for iteration and comparison to achieve this efficiently. The function will handle only non-negative integers and return a boolean value. We will also include error handling for non-integer inputs and empty lists.\n", "requirement analysis:\nThe function must determine if a list is sorted in ascending order and handle duplicates by returning False if any number appears more than twice. It should be efficient and handle large lists without performance degradation.\nrequirement pool:\n- Implement the main sorting check logic\n- Ensure duplicate handling logic is correct\n- Optimize for performance with large lists\n- Include comprehensive test cases\n- Document the function usage and edge cases\nWe will implement a function that iterates through the list to check if it is sorted in ascending order. During the iteration, we will also count occurrences of each number to ensure no number appears more than twice. This approach will efficiently handle large lists by using a single pass through the list.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and ensure no number appears more than twice. It should handle lists of varying sizes efficiently and return a boolean value.\nrequirement pool:\n- Implement the main function to check if the list is sorted.\n- Ensure the function returns False for more than one duplicate.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases.\n- Document the function with examples and edge cases.\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and simultaneously count occurrences of each number to ensure no number appears more than twice. We will use Python's built-in capabilities for list iteration and dictionary for counting occurrences, which are efficient for handling large lists.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and ensure no number appears more than once consecutively. It should handle edge cases like single-element lists and be efficient for large inputs.\nrequirement pool:\n- Implement the main sorting check logic\n- Ensure duplicate handling logic is correct\n- Optimize for performance with large lists\n- Handle edge cases like empty or single-element lists\n- Provide detailed error messages for debugging\nWe will implement a function that iterates through the list to check if it is sorted in ascending order. Additionally, we will use a dictionary to track occurrences of each number to ensure no number appears more than once consecutively. This approach will efficiently handle large lists and edge cases like single-element lists.\n", "requirement analysis:\nThe function must accurately determine if a list is sorted in ascending order while ensuring no more than one duplicate of any number exists. It should handle only non-negative integers and be optimized for performance.\nrequirement pool:\n- Implement sorting check functionality\n- Ensure duplicate handling logic\n- Optimize for large list performance\n- Validate input constraints (non-negative integers)\n- Provide clear error messages for invalid inputs\nWe will implement a function that checks if a list of non-negative integers is sorted in ascending order and ensures that no number appears more than twice. The function will iterate through the list once to check the order and count duplicates, ensuring optimal performance for large lists. We will use Python's built-in capabilities without additional libraries, as they are sufficient for this task.\n", "requirement analysis:\nThe function needs to check if a list is sorted in ascending order and ensure no number appears more than once consecutively. It should handle edge cases like single-element lists and be efficient for large lists.\nrequirement pool:\n- Implement the main sorting check logic\n- Ensure duplicate handling as per requirements\n- Optimize for performance with large lists\n- Add comprehensive test cases\n- Document the function usage and edge cases\nWe will implement a function that iterates through the list to check if it is sorted in ascending order. During the iteration, we will also count occurrences of each number to ensure no number appears more than once consecutively. We will use Python's built-in capabilities to achieve this efficiently without the need for additional libraries.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and ensure no more than one duplicate of the same number exists. It should handle only non-negative integers and provide accurate results for various list sizes.\nrequirement pool:\n- Implement sorting check functionality\n- Ensure duplicate handling as per requirements\n- Optimize for large list performance\n- Provide clear error messages\n- Ensure easy integration into existing code\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and ensure that no number appears more than twice. This approach will efficiently handle the requirements without needing additional libraries, as the task is straightforward and can be accomplished with basic Python operations.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and ensure no number appears more than twice. It should handle lists of varying sizes efficiently and return accurate results.\nrequirement pool:\n- Implement the main sorting check logic\n- Ensure duplicate handling logic is correct\n- Optimize for performance with large lists\n- Add comprehensive test cases\n- Document the function usage and edge cases\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and ensure no number appears more than twice. We will use Python's built-in capabilities for list iteration and comparison, which are efficient for handling large lists. The function will return False if any number appears more than twice or if the list is not sorted.\n"], "scores": [0.7, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7, 1.0, 1.0], "pass_results": [false, true, true, true, true, true, true, false, true, true], "pass_test_cases_num": [77, 110, 110, 110, 110, 110, 110, 77, 110, 110], "completion": "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Determines if a list of integers is sorted in ascending order and no number appears more than twice.\n\n    Args:\n        lst: A list of integers.\n\n    Returns:\n        A boolean indicating if the list is sorted in ascending order and no number appears more than twice.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted.\n        return True\n\n    # Initialize a dictionary to count occurrences of each number.\n    count_dict = {}\n\n    # Iterate through the list to check sorting and count occurrences.\n    for i in range(len(lst)):\n        # Check if the current number is greater than the previous one (ensuring ascending order).\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n\n        # Count occurrences of each number.\n        if lst[i] in count_dict:\n            count_dict[lst[i]] += 1\n        else:\n            count_dict[lst[i]] = 1\n\n        # If any number appears more than twice, return False.\n        if count_dict[lst[i]] > 2:\n            return False\n\n    return True\n", "passed": true, "pass": true, "pass_num": 8, "round": 398, "mutate_method": "expand_one2two", "parent_index": 197}
