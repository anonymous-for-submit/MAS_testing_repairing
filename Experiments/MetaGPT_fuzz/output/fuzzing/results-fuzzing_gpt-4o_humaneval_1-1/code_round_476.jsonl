{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a specified number is prime, and false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": ["def check(is_prime):\n\tassert is_prime(255520) == False", "def check(is_prime):\n\tassert is_prime(6) == False", "def check(is_prime):\n\tassert is_prime(85) == False", "def check(is_prime):\n\tassert is_prime(83) == True", "def check(is_prime):\n\tassert is_prime(82) == False", "def check(is_prime):\n\tassert is_prime(7) == True", "def check(is_prime):\n\tassert is_prime(13) == True", "def check(is_prime):\n\tassert is_prime(57) == False", "def check(is_prime):\n\tassert is_prime(81) == False", "def check(is_prime):\n\tassert is_prime(3) == True", "def check(is_prime):\n\tassert is_prime(104) == False", "def check(is_prime):\n\tassert is_prime(90) == False", "def check(is_prime):\n\tassert is_prime(88) == False", "def check(is_prime):\n\tassert is_prime(255344) == False", "def check(is_prime):\n\tassert is_prime(12) == False", "def check(is_prime):\n\tassert is_prime(14316) == False", "def check(is_prime):\n\tassert is_prime(12938) == False", "def check(is_prime):\n\tassert is_prime(8) == False", "def check(is_prime):\n\tassert is_prime(102) == False", "def check(is_prime):\n\tassert is_prime(12628) == False", "def check(is_prime):\n\tassert is_prime(61) == True", "def check(is_prime):\n\tassert is_prime(5 * 17) == False", "def check(is_prime):\n\tassert is_prime(98) == False", "def check(is_prime):\n\tassert is_prime(63) == False", "def check(is_prime):\n\tassert is_prime(19) == True", "def check(is_prime):\n\tassert is_prime(12884) == False", "def check(is_prime):\n\tassert is_prime(87) == False", "def check(is_prime):\n\tassert is_prime(89) == True", "def check(is_prime):\n\tassert is_prime(255139) == False", "def check(is_prime):\n\tassert is_prime(12897) == False", "def check(is_prime):\n\tassert is_prime(73) == True", "def check(is_prime):\n\tassert is_prime(1) == False", "def check(is_prime):\n\tassert is_prime(15) == False", "def check(is_prime):\n\tassert is_prime(75) == False", "def check(is_prime):\n\tassert is_prime(18) == False", "def check(is_prime):\n\tassert is_prime(96) == False", "def check(is_prime):\n\tassert is_prime(5) == True", "def check(is_prime):\n\tassert is_prime(9) == False", "def check(is_prime):\n\tassert is_prime(255046) == False", "def check(is_prime):\n\tassert is_prime(14) == False", "def check(is_prime):\n\tassert is_prime(78) == False", "def check(is_prime):\n\tassert is_prime(255214) == False", "def check(is_prime):\n\tassert is_prime(76) == False", "def check(is_prime):\n\tassert is_prime(2) == True", "def check(is_prime):\n\tassert is_prime(254873) == True", "def check(is_prime):\n\tassert is_prime(13441 * 19) == False", "def check(is_prime):\n\tassert is_prime(13796) == False", "def check(is_prime):\n\tassert is_prime(11) == True", "def check(is_prime):\n\tassert is_prime(14253) == False", "def check(is_prime):\n\tassert is_prime(100) == False", "def check(is_prime):\n\tassert is_prime(20) == False", "def check(is_prime):\n\tassert is_prime(58) == False", "def check(is_prime):\n\tassert is_prime(22) == False", "def check(is_prime):\n\tassert is_prime(17) == True", "def check(is_prime):\n\tassert is_prime(13481) == False", "def check(is_prime):\n\tassert is_prime(12832) == False", "def check(is_prime):\n\tassert is_prime(254513) == False", "def check(is_prime):\n\tassert is_prime(106) == False", "def check(is_prime):\n\tassert is_prime(16) == False", "def check(is_prime):\n\tassert is_prime(13441) == True", "def check(is_prime):\n\tassert is_prime(66) == False", "def check(is_prime):\n\tassert is_prime(65) == False", "def check(is_prime):\n\tassert is_prime(80) == False", "def check(is_prime):\n\tassert is_prime(11 * 7) == False", "def check(is_prime):\n\tassert is_prime(101) == True", "def check(is_prime):\n\tassert is_prime(103) == True", "def check(is_prime):\n\tassert is_prime(56) == False", "def check(is_prime):\n\tassert is_prime(254423) == False", "def check(is_prime):\n\tassert is_prime(254790) == False", "def check(is_prime):\n\tassert is_prime(4) == False"], "test_case_list": ["assert is_prime(255520) == False", "assert is_prime(6) == False", "assert is_prime(85) == False", "assert is_prime(83) == True", "assert is_prime(82) == False", "assert is_prime(7) == True", "assert is_prime(13) == True", "assert is_prime(57) == False", "assert is_prime(81) == False", "assert is_prime(3) == True", "assert is_prime(104) == False", "assert is_prime(90) == False", "assert is_prime(88) == False", "assert is_prime(255344) == False", "assert is_prime(12) == False", "assert is_prime(14316) == False", "assert is_prime(12938) == False", "assert is_prime(8) == False", "assert is_prime(102) == False", "assert is_prime(12628) == False", "assert is_prime(61) == True", "assert is_prime(5 * 17) == False", "assert is_prime(98) == False", "assert is_prime(63) == False", "assert is_prime(19) == True", "assert is_prime(12884) == False", "assert is_prime(87) == False", "assert is_prime(89) == True", "assert is_prime(255139) == False", "assert is_prime(12897) == False", "assert is_prime(73) == True", "assert is_prime(1) == False", "assert is_prime(15) == False", "assert is_prime(75) == False", "assert is_prime(18) == False", "assert is_prime(96) == False", "assert is_prime(5) == True", "assert is_prime(9) == False", "assert is_prime(255046) == False", "assert is_prime(14) == False", "assert is_prime(78) == False", "assert is_prime(255214) == False", "assert is_prime(76) == False", "assert is_prime(2) == True", "assert is_prime(254873) == True", "assert is_prime(13441 * 19) == False", "assert is_prime(13796) == False", "assert is_prime(11) == True", "assert is_prime(14253) == False", "assert is_prime(100) == False", "assert is_prime(20) == False", "assert is_prime(58) == False", "assert is_prime(22) == False", "assert is_prime(17) == True", "assert is_prime(13481) == False", "assert is_prime(12832) == False", "assert is_prime(254513) == False", "assert is_prime(106) == False", "assert is_prime(16) == False", "assert is_prime(13441) == True", "assert is_prime(66) == False", "assert is_prime(65) == False", "assert is_prime(80) == False", "assert is_prime(11 * 7) == False", "assert is_prime(101) == True", "assert is_prime(103) == True", "assert is_prime(56) == False", "assert is_prime(254423) == False", "assert is_prime(254790) == False", "assert is_prime(4) == False"], "nl": "Return true if a given number is prime, and false otherwise.\n    ", "func": "def is_prime(n):", "examples": ">>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    ", "repair_prompt": ["def is_prime(n):\t\n'''Return true if a specified number is prime, and false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\nimport math\nimport random\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    # Trial division up to the square root of n\n    limit = int(math.sqrt(n)) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return False\n\n    # For larger numbers, use the Miller-Rabin test\n    if n >= 1373653:  # Threshold for using Miller-Rabin test\n        return miller_rabin(n)\n\n    return True\n\ndef miller_rabin(n: int, k: int = 5) -> bool:\n    \"\"\"\n    Perform the Miller-Rabin primality test.\n\n    Parameters:\n    n (int): The number to test for primality.\n    k (int): The number of accuracy iterations (default is 5).\n\n    Returns:\n    bool: True if n is probably prime, False if n is composite.\n    \"\"\"\n    if n in (2, 3):\n        return True\n    if n <= 1 or n % 2 == 0:\n        return False\n\n    # Write n-1 as d*2^r\n    r, d = 0, n - 1\n    while d % 2 == 0:\n        r += 1\n        d //= 2\n\n    # Witness loop\n    for _ in range(k):\n        a = random.randint(2, n - 2)\n        x = pow(a, d, n)\n        if x == 1 or x == n - 1:\n            continue\n        for _ in range(r - 1):\n            x = pow(x, 2, n)\n            if x == n - 1:\n                break\n        else:\n            return False\n    return True\n", "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    This function uses the sympy library's isprime function to efficiently\n    determine if a number is prime. It handles edge cases such as numbers\n    less than 2, which are not prime by definition.\n\n    Args:\n        n (int): Integer to check for primality.\n\n    Returns:\n        bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    return isprime(n)\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime using the '6k \u00b1 1' optimization method.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(is_prime(6))  # Output: False\n    print(is_prime(101))  # Output: True\n    print(is_prime(1))  # Output: False\n    print(is_prime(2))  # Output: True\n    print(is_prime(3))  # Output: True\n    print(is_prime(4))  # Output: False\n    print(is_prime(29))  # Output: True\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    This function uses the 6k \u00b1 1 optimization method to efficiently check\n    for primality, skipping even numbers and multiples of 3.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n", "from typing import List\n## main.py\n\nimport math\nfrom sympy import isprime as sympy_isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    # Use sympy's isprime for large numbers\n    if n > 10**6:\n        return sympy_isprime(n)\n\n    # Check divisibility from 3 to sqrt(n)\n    limit = int(math.sqrt(n)) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n    \n    Args:\n        n (int): Integer to check for primality.\n        \n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    # Check if n is less than 2, which is not prime\n    if n < 2:\n        return False\n    \n    # Check if n is 2, which is the smallest prime number\n    if n == 2:\n        return True\n    \n    # Check if n is even and greater than 2, which is not prime\n    if n % 2 == 0:\n        return False\n    \n    # Iterate from 3 to the square root of n, checking for divisibility\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    # If no divisors were found, n is prime\n    return True\n", "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Args:\n        n (int): Integer to check for primality.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    return isprime(n)\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    max_divisor = math.isqrt(n)\n    for i in range(3, max_divisor + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"], "plans": ["requirement analysis:\nThe function should accurately determine if a number is prime, handling both small and large numbers efficiently. It should return a boolean value and be easy to use with clear documentation.\nrequirement pool:\n- Implement prime number detection algorithm\n- Optimize for performance with large numbers\n- Ensure clear and concise output\n- Provide comprehensive documentation\n- Include examples for user guidance\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The function will handle both small and large numbers by using the 6k \u00b1 1 optimization, which reduces the number of checks needed. This approach is efficient and suitable for our performance goals. We will also provide clear documentation and examples for user guidance.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and 2, and be optimized for performance with large numbers.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize the algorithm for large numbers\n- Include comprehensive test cases\n- Provide detailed documentation\n- Ensure compatibility with Python 3.x\nWe will implement a prime-checking function using a simple algorithm optimized for performance. The function will handle edge cases like 1 and 2 and use the 'math' library for efficient computation. The algorithm will be based on trial division, which is effective for small to moderately large numbers. For larger numbers, we will incorporate the Miller-Rabin primality test, which is a probabilistic test that can be adjusted for accuracy.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, considering edge cases such as 1 and even numbers. It should be optimized for performance, especially for large numbers, and provide clear output.\nrequirement pool:\n- Implement prime number detection algorithm\n- Optimize for large number performance\n- Ensure clear output format\n- Handle edge cases accurately\n- Provide user documentation\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The function will handle edge cases such as 1 and even numbers, and will be optimized for performance using the 'sympy' library, which is known for its efficient mathematical computations. This will ensure that the function can handle very large numbers efficiently.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handling both small and large numbers efficiently. It should be easy to use and integrate into other projects, with clear documentation and examples.\nrequirement pool:\n- Implement the prime checking algorithm\n- Optimize for performance with large numbers\n- Provide comprehensive documentation\n- Include examples and test cases\n- Ensure compatibility with Python 3.x\nWe will implement a prime checking function using a simple and efficient algorithm known as the '6k \u00b1 1' optimization, which is suitable for both small and large numbers. This approach balances performance and simplicity, making it easy to integrate into other projects. We will also provide comprehensive documentation and examples to ensure usability.\n", "requirement analysis:\nThe function should efficiently determine if a number is prime, handling both small and large numbers. It should be easy to use and integrate into other projects, with clear documentation and examples.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize for performance with large numbers\n- Provide comprehensive documentation\n- Include usage examples\n- Ensure compatibility with Python 3.x\nWe will implement a simple and efficient prime-checking function using basic mathematical principles. The function will handle both small and large numbers by first checking for obvious non-prime conditions and then using a loop to test divisibility up to the square root of the number. This approach is efficient and avoids the overhead of importing large libraries. We will ensure the function is well-documented with examples to facilitate understanding and integration.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and 2, and be optimized for performance with large numbers. Documentation should be clear to aid understanding and usage.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize for performance with large numbers\n- Include comprehensive documentation\n- Handle edge cases effectively\n- Provide examples and test cases\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The function will handle edge cases such as 1 and 2, and will be optimized for performance with large numbers by using the 6k \u00b1 1 optimization method. This method reduces the number of checks needed by skipping even numbers and multiples of 3. We will use the 'sympy' library for its isprime function as a reference to ensure accuracy and performance.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and 2, and be optimized for performance with large numbers. Documentation should be clear for ease of use.\nrequirement pool:\n- Implement the prime checking algorithm\n- Optimize for performance with large numbers\n- Include comprehensive test cases\n- Provide detailed documentation\n- Ensure compatibility with Python 3.x\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The function will handle edge cases such as 1 and 2, and will be optimized for performance with large numbers by using trial division up to the square root of the number. We will use the 'sympy' library for its efficient prime-checking capabilities for very large numbers, while ensuring the function remains simple and easy to use.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, considering edge cases such as 1 and even numbers. It should be optimized for performance, especially for large numbers, and include clear documentation for educational purposes.\nrequirement pool:\n- Implement efficient prime checking algorithm\n- Handle edge cases like 1 and even numbers\n- Optimize for large number performance\n- Provide clear documentation and examples\n- Include educational resources on prime numbers\nWe will implement a function using a simple and efficient algorithm to check for prime numbers. The Sieve of Eratosthenes is a well-known algorithm for finding all prime numbers up to a specified integer, but for checking individual numbers, a more direct approach is needed. We will use trial division, which is efficient for checking the primality of a single number. This approach involves checking divisibility from 2 up to the square root of the number, which reduces the number of checks significantly. We will also handle edge cases such as numbers less than 2 and even numbers greater than 2.\n", "requirement analysis:\nThe function should efficiently determine if a number is prime, handling both small and large numbers accurately. It should be easy to use and integrate into other projects, with clear documentation and examples.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize for performance with large numbers\n- Provide comprehensive documentation\n- Include test cases for edge scenarios\n- Ensure compatibility with Python 3.x\nWe will implement a prime-checking function using a simple algorithm optimized for performance. The function will use the 'sympy' library for its efficient prime-checking capabilities, especially for large numbers. SymPy is chosen due to its high accuracy and comprehensive functionality, which aligns with our product goals.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and 2, and be efficient for large numbers. It should be easy to use and integrate into other projects.\nrequirement pool:\n- Implement the main prime-checking algorithm\n- Optimize for performance with large numbers\n- Include comprehensive test cases\n- Provide detailed documentation and examples\n- Ensure compatibility with Python 3.x\nWe will implement a simple and efficient prime-checking function using basic mathematical principles. The function will handle edge cases such as 1 and 2, and will be optimized for performance by checking divisibility up to the square root of the number. We will use the 'math' library for efficient square root calculation.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.9857, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [70, 70, 70, 70, 70, 69, 70, 70, 70, 70], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    max_divisor = math.isqrt(n)\n    for i in range(3, max_divisor + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n", "passed": true, "pass": true, "pass_num": 9, "round": 476, "mutate_method": "rephrase_one", "parent_index": 29}
