{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return the largest common divisor of the integers a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": ["def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 16) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(47, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(45, 15) == 15", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 6) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 12) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 63) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 64) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 2) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 14) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(149, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 2) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 5) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 18) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 12) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 12) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 9) == 9", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 57) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 65) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 55) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 3) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 20) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(7, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(51, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 3) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 15) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 20) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 4) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(52, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 10) == 10", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 60) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 14) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 60) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 16) == 8", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(146, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 63) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 6) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 15) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 20) == 2"], "test_case_list": ["assert greatest_common_divisor(6, 16) == 2", "assert greatest_common_divisor(47, 19) == 1", "assert greatest_common_divisor(141, 65) == 1", "assert greatest_common_divisor(45, 15) == 15", "assert greatest_common_divisor(1, 6) == 1", "assert greatest_common_divisor(50, 14) == 2", "assert greatest_common_divisor(53, 16) == 1", "assert greatest_common_divisor(3, 9) == 3", "assert greatest_common_divisor(50, 11) == 1", "assert greatest_common_divisor(48, 12) == 12", "assert greatest_common_divisor(49, 9) == 1", "assert greatest_common_divisor(6, 14) == 2", "assert greatest_common_divisor(141, 63) == 3", "assert greatest_common_divisor(5, 11) == 1", "assert greatest_common_divisor(11, 12) == 1", "assert greatest_common_divisor(12, 13) == 1", "assert greatest_common_divisor(15, 19) == 1", "assert greatest_common_divisor(46, 18) == 2", "assert greatest_common_divisor(4, 12) == 4", "assert greatest_common_divisor(46, 13) == 1", "assert greatest_common_divisor(12, 11) == 1", "assert greatest_common_divisor(11, 17) == 1", "assert greatest_common_divisor(148, 64) == 4", "assert greatest_common_divisor(5, 9) == 1", "assert greatest_common_divisor(5, 2) == 1", "assert greatest_common_divisor(1, 11) == 1", "assert greatest_common_divisor(141, 61) == 1", "assert greatest_common_divisor(53, 14) == 1", "assert greatest_common_divisor(12, 10) == 2", "assert greatest_common_divisor(147, 62) == 1", "assert greatest_common_divisor(2, 4) == 2", "assert greatest_common_divisor(142, 63) == 1", "assert greatest_common_divisor(4, 6) == 2", "assert greatest_common_divisor(149, 64) == 1", "assert greatest_common_divisor(6, 2) == 2", "assert greatest_common_divisor(5, 13) == 1", "assert greatest_common_divisor(148, 58) == 2", "assert greatest_common_divisor(46, 10) == 2", "assert greatest_common_divisor(44, 12) == 4", "assert greatest_common_divisor(5, 12) == 1", "assert greatest_common_divisor(13, 15) == 1", "assert greatest_common_divisor(10, 17) == 1", "assert greatest_common_divisor(2, 7) == 1", "assert greatest_common_divisor(5, 5) == 5", "assert greatest_common_divisor(1, 7) == 1", "assert greatest_common_divisor(48, 18) == 6", "assert greatest_common_divisor(46, 12) == 2", "assert greatest_common_divisor(3, 12) == 3", "assert greatest_common_divisor(54, 9) == 9", "assert greatest_common_divisor(142, 57) == 1", "assert greatest_common_divisor(5, 16) == 1", "assert greatest_common_divisor(142, 55) == 1", "assert greatest_common_divisor(44, 16) == 4", "assert greatest_common_divisor(145, 63) == 1", "assert greatest_common_divisor(144, 59) == 1", "assert greatest_common_divisor(8, 9) == 1", "assert greatest_common_divisor(148, 62) == 2", "assert greatest_common_divisor(49, 16) == 1", "assert greatest_common_divisor(140, 65) == 5", "assert greatest_common_divisor(145, 55) == 5", "assert greatest_common_divisor(1, 3) == 1", "assert greatest_common_divisor(12, 20) == 4", "assert greatest_common_divisor(6, 13) == 1", "assert greatest_common_divisor(141, 59) == 1", "assert greatest_common_divisor(7, 10) == 1", "assert greatest_common_divisor(51, 11) == 1", "assert greatest_common_divisor(12, 16) == 4", "assert greatest_common_divisor(46, 14) == 2", "assert greatest_common_divisor(6, 3) == 3", "assert greatest_common_divisor(14, 13) == 1", "assert greatest_common_divisor(10, 15) == 5", "assert greatest_common_divisor(15, 20) == 5", "assert greatest_common_divisor(6, 17) == 1", "assert greatest_common_divisor(147, 61) == 1", "assert greatest_common_divisor(4, 4) == 4", "assert greatest_common_divisor(1, 9) == 1", "assert greatest_common_divisor(13, 17) == 1", "assert greatest_common_divisor(139, 65) == 1", "assert greatest_common_divisor(144, 58) == 2", "assert greatest_common_divisor(147, 64) == 1", "assert greatest_common_divisor(3, 7) == 1", "assert greatest_common_divisor(52, 19) == 1", "assert greatest_common_divisor(50, 10) == 10", "assert greatest_common_divisor(2, 9) == 1", "assert greatest_common_divisor(44, 10) == 2", "assert greatest_common_divisor(144, 62) == 2", "assert greatest_common_divisor(148, 55) == 1", "assert greatest_common_divisor(144, 60) == 12", "assert greatest_common_divisor(49, 14) == 7", "assert greatest_common_divisor(143, 59) == 1", "assert greatest_common_divisor(6, 4) == 2", "assert greatest_common_divisor(148, 60) == 4", "assert greatest_common_divisor(11, 19) == 1", "assert greatest_common_divisor(4, 7) == 1", "assert greatest_common_divisor(15, 16) == 1", "assert greatest_common_divisor(49, 13) == 1", "assert greatest_common_divisor(8, 16) == 8", "assert greatest_common_divisor(54, 19) == 1", "assert greatest_common_divisor(8, 11) == 1", "assert greatest_common_divisor(8, 6) == 2", "assert greatest_common_divisor(6, 9) == 3", "assert greatest_common_divisor(12, 14) == 2", "assert greatest_common_divisor(146, 55) == 1", "assert greatest_common_divisor(139, 61) == 1", "assert greatest_common_divisor(147, 65) == 1", "assert greatest_common_divisor(11, 10) == 1", "assert greatest_common_divisor(143, 62) == 1", "assert greatest_common_divisor(140, 63) == 7", "assert greatest_common_divisor(49, 15) == 1", "assert greatest_common_divisor(44, 15) == 1", "assert greatest_common_divisor(2, 6) == 2", "assert greatest_common_divisor(8, 18) == 2", "assert greatest_common_divisor(6, 6) == 6", "assert greatest_common_divisor(48, 15) == 3", "assert greatest_common_divisor(44, 9) == 1", "assert greatest_common_divisor(14, 20) == 2"], "nl": " Return a greatest common divisor of two integers a and b\n    ", "func": "def greatest_common_divisor(a: int, b: int) -> int:", "examples": ">>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    ", "repair_prompt": ["def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return the largest common divisor of the integers a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the largest common divisor of the integers a and b.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Raises:\n    ValueError: If either a or b is not an integer\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 15)\n    15\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Using the built-in math.gcd function to compute the GCD\n    return math.gcd(a, b)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the largest common divisor of the integers a and b using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    \"\"\"\n    # Ensure the inputs are positive for the algorithm\n    a, b = abs(a), abs(b)\n\n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    Handles edge cases such as zero and negative numbers by using absolute values.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n    \"\"\"\n    # Use absolute values to handle negative numbers\n    a = abs(a)\n    b = abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example usage:\n# gcd = greatest_common_divisor(48, 18)\n# print(gcd)  # Output: 6\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n\n    Example:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Ensure the inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n\n    # Handle the case where both inputs are zero\n    if a == 0 and b == 0:\n        raise ValueError(\"At least one input must be non-zero.\")\n\n    # Use the Euclidean algorithm to find the GCD\n    while b != 0:\n        a, b = b, a % b\n\n    # Return the absolute value of the GCD\n    return abs(a)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(greatest_common_divisor(3, 5))  # Output: 1\n        print(greatest_common_divisor(25, 15))  # Output: 5\n        print(greatest_common_divisor(-25, 15))  # Output: 5\n        print(greatest_common_divisor(0, 15))  # Output: 15\n        print(greatest_common_divisor(0, 0))  # Raises ValueError\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer, can be positive, negative, or zero.\n    b (int): Second integer, can be positive, negative, or zero.\n\n    Returns:\n    int: The greatest common divisor of a and b. If both a and b are zero, returns 0.\n    \"\"\"\n    # Take the absolute value of both numbers to handle negative inputs\n    a, b = abs(a), abs(b)\n\n    # If both numbers are zero, return 0 as GCD is undefined\n    if a == 0 and b == 0:\n        return 0\n\n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(greatest_common_divisor(48, 18))  # Output: 6\n    print(greatest_common_divisor(-48, 18)) # Output: 6\n    print(greatest_common_divisor(0, 0))    # Output: 0\n    print(greatest_common_divisor(0, 5))    # Output: 5\n    print(greatest_common_divisor(5, 0))    # Output: 5\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the largest common divisor of the integers a and b.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Use the absolute value to handle negative integers\n    return math.gcd(abs(a), abs(b))\n\ndef _run_tests():\n    \"\"\"Run basic unit tests for the greatest_common_divisor function.\"\"\"\n    assert greatest_common_divisor(3, 5) == 1, \"Test case 1 failed\"\n    assert greatest_common_divisor(25, 15) == 5, \"Test case 2 failed\"\n    assert greatest_common_divisor(-25, 15) == 5, \"Test case 3 failed\"\n    assert greatest_common_divisor(0, 5) == 5, \"Test case 4 failed\"\n    assert greatest_common_divisor(0, 0) == 0, \"Test case 5 failed\"\n    print(\"All test cases passed.\")\n\nif __name__ == \"__main__\":\n    _run_tests()\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the largest common divisor of the integers a and b.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Ensure inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    # Use the math.gcd function to compute the GCD\n    return math.gcd(a, b)\n\n# Unit tests\ndef test_greatest_common_divisor():\n    assert greatest_common_divisor(3, 5) == 1, \"Test case 1 failed\"\n    assert greatest_common_divisor(25, 15) == 5, \"Test case 2 failed\"\n    assert greatest_common_divisor(0, 5) == 5, \"Test case 3 failed\"\n    assert greatest_common_divisor(5, 0) == 5, \"Test case 4 failed\"\n    assert greatest_common_divisor(-25, 15) == 5, \"Test case 5 failed\"\n    assert greatest_common_divisor(25, -15) == 5, \"Test case 6 failed\"\n    assert greatest_common_divisor(-25, -15) == 5, \"Test case 7 failed\"\n    print(\"All test cases passed.\")\n\nif __name__ == \"__main__\":\n    test_greatest_common_divisor()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Args:\n        a (int): First integer\n        b (int): Second integer\n\n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    # Ensure the inputs are positive integers\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example usage:\n# gcd = greatest_common_divisor(48, 18)\n# print(gcd)  # Output should be 6\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Raises:\n    ValueError: If either a or b is not an integer\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n    \n    while b != 0:\n        a, b = b, a % b\n    \n    return abs(a)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(greatest_common_divisor(3, 5))  # Output: 1\n        print(greatest_common_divisor(25, 15))  # Output: 5\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Ensure both numbers are positive\n    a, b = abs(a), abs(b)\n    \n    # Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], "plans": ["requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers, ensuring efficiency and clarity in its implementation and documentation.\nrequirement pool:\n- Implement the GCD calculation using Euclidean algorithm\n- Optimize for large integer inputs\n- Provide comprehensive examples in documentation\n- Include error handling for non-integer inputs\n- Ensure compatibility with future Python versions\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient for large integers. We will use Python's built-in math library to leverage its optimized gcd function for performance. The function will include comprehensive examples in the documentation and handle non-integer inputs by raising appropriate errors.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers, ensuring it handles edge cases such as zero and negative numbers. It should be optimized for performance, especially with large integers, and include clear documentation for ease of use.\nrequirement pool:\n- Implement the GCD algorithm using the Euclidean method\n- Optimize the function for large integer inputs\n- Include comprehensive documentation and examples\n- Handle edge cases such as zero and negative numbers\n- Provide unit tests for various input scenarios\nWe will implement the GCD algorithm using the Euclidean method, which is efficient and well-suited for handling large integers. We will utilize Python's standard library to ensure optimal performance and reliability. The function will include comprehensive documentation and examples to aid understanding and usage. We will also handle edge cases such as zero and negative numbers.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor using an efficient algorithm like the Euclidean method. It should handle edge cases such as zero and negative inputs gracefully. The interface should be intuitive, allowing users to easily input their numbers.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD calculation\n- Design a simple and intuitive user interface\n- Optimize the function for performance with large integers\n- Include error handling for invalid inputs\n- Provide documentation and examples for user guidance\nWe will implement the Euclidean algorithm for calculating the greatest common divisor (GCD) as it is efficient and well-suited for handling large integers. The function will be designed to handle edge cases such as zero and negative numbers gracefully. We will use Python's built-in capabilities to ensure performance and simplicity.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers. It should handle both small and large integers efficiently, providing results quickly. The user interface should be intuitive, allowing users to easily input numbers and understand the output.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Design a simple and intuitive user interface for input.\n- Optimize the algorithm for performance with large numbers.\n- Provide clear documentation and usage examples.\n- Ensure compatibility across different platforms.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling both small and large integers. The function will be simple and intuitive, allowing users to input two integers and receive their greatest common divisor. We will use Python's built-in capabilities to ensure compatibility and performance.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers, handling both positive and negative inputs, and should be optimized for performance with large numbers.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Ensure the function handles edge cases like zero or negative numbers.\n- Optimize the function for performance with large inputs.\n- Create a user-friendly interface for input and output.\n- Provide documentation and examples for users.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large numbers. The function will be designed to handle both positive and negative integers, as well as zero, by taking the absolute value of the inputs. We will use Python's built-in capabilities to ensure optimal performance.\n", "requirement analysis:\nThe function should compute the greatest common divisor of two integers efficiently. It should handle both small and large integers and provide accurate results. The implementation should be easy to understand and integrate into other projects.\nrequirement pool:\n- Implement the GCD function using the Euclidean algorithm.\n- Ensure the function handles edge cases such as zero inputs.\n- Optimize the function for performance with large integers.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify the function's correctness.\nWe will implement the GCD function using the Euclidean algorithm, which is efficient for both small and large integers. We will use Python's standard library function math.gcd to ensure optimal performance and handle edge cases such as zero inputs. The function will be documented with examples and include unit tests to verify correctness.\n", "requirement analysis:\nThe function should efficiently compute the greatest common divisor of two integers, handling both positive and negative values, and should be optimized for performance. Documentation should be clear to facilitate understanding and usage by developers.\nrequirement pool:\n- Implement the GCD algorithm using the Euclidean method.\n- Ensure the function handles edge cases like zero or negative numbers.\n- Optimize the function for performance with large integers.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify the function's correctness.\nWe will implement the GCD algorithm using the Euclidean method, which is efficient for computing the greatest common divisor of two integers. We will use Python's standard library function `math.gcd` to ensure optimal performance and handle edge cases like zero or negative numbers. Comprehensive documentation will be provided in the form of docstrings, and unit tests will be included to verify correctness.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers, handling both small and large values efficiently. It should be easy to use and integrate into other projects, with clear documentation and examples.\nrequirement pool:\n- Implement the GCD calculation using Euclidean algorithm\n- Optimize for performance with large integers\n- Include comprehensive test cases\n- Provide detailed documentation and usage examples\n- Ensure compatibility with various Python versions\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for both small and large integers. We will utilize Python's built-in capabilities to ensure compatibility and performance. The function will handle positive integers, and we will clarify if handling negative integers or zero is required.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers, ensuring performance is optimized for both small and large values. Documentation should be clear to facilitate ease of use by developers.\nrequirement pool:\n- Implement the GCD algorithm using the Euclidean method\n- Optimize the function for large integer inputs\n- Provide comprehensive documentation and examples\n- Include error handling for invalid inputs\n- Benchmark against existing solutions for performance\nWe will implement the GCD algorithm using the Euclidean method, which is efficient and well-suited for both small and large integers. We will utilize Python's built-in capabilities to ensure optimal performance. The function will include comprehensive documentation and examples to facilitate ease of use. Error handling will be implemented to manage non-integer inputs by raising appropriate exceptions.\n", "requirement analysis:\nThe function should efficiently compute the greatest common divisor of two integers, handling edge cases such as zero inputs and negative numbers. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the GCD algorithm using Euclidean method\n- Handle edge cases like zero and negative inputs\n- Optimize for performance with large integers\n- Provide comprehensive documentation\n- Include unit tests for various scenarios\nWe will implement the GCD algorithm using the Euclidean method, which is efficient and widely used for computing the greatest common divisor. We will handle edge cases such as zero and negative inputs by ensuring the function can return correct results in these scenarios. The function will be optimized for performance with large integers by leveraging Python's inherent capabilities with integers. We will provide comprehensive documentation and include unit tests to cover various scenarios.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [116, 116, 116, 116, 116, 116, 116, 116, 116, 116], "completion": "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Ensure both numbers are positive\n    a, b = abs(a), abs(b)\n    \n    # Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "passed": true, "pass": true, "pass_num": 10, "round": 464, "mutate_method": "rephrase_one", "parent_index": 9}
