{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s.\n    if s[i] is a letter, change its case from lowercase to uppercase or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": ["def check(solve):\n\tassert solve(\"#ryv@$l*\") == '#RYV@$L*'", "def check(solve):\n\tassert solve(\"BjdhsNs\") == 'bJDHSnS'", "def check(solve):\n\tassert solve(\"$883%3/\") == '/3%388$'", "def check(solve):\n\tassert solve(\"QnNQfv\") == 'qNnqFV'", "def check(solve):\n\tassert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "def check(solve):\n\tassert solve(\"zt*#m&v\") == 'ZT*#M&V'", "def check(solve):\n\tassert solve(\"wDgT\") == 'WdGt'", "def check(solve):\n\tassert solve(\"ab\") == \"AB\"", "def check(solve):\n\tassert solve(\"=E!NyLi\") == '=e!nYlI'", "def check(solve):\n\tassert solve(\"jZVuQ\") == 'JzvUq'", "def check(solve):\n\tassert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "def check(solve):\n\tassert solve(\"%cCcq#\") == '%CcCQ#'", "def check(solve):\n\tassert solve(\"++A^/?xV\") == '++a^/?Xv'", "def check(solve):\n\tassert solve(\"7_%\") == '%_7'", "def check(solve):\n\tassert solve(\"qon\") == 'QON'", "def check(solve):\n\tassert solve(\"giiqdy\") == 'GIIQDY'", "def check(solve):\n\tassert solve(\"~@8%\") == '%8@~'", "def check(solve):\n\tassert solve(\"^@B\") == '^@b'", "def check(solve):\n\tassert solve(\"?UGciW\") == '?ugCIw'", "def check(solve):\n\tassert solve(\"17000556\") == '65500071'", "def check(solve):\n\tassert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "def check(solve):\n\tassert solve(\"wSdcA\") == 'WsDCa'", "def check(solve):\n\tassert solve(\"luG9*?%\") == 'LUg9*?%'", "def check(solve):\n\tassert solve(\"5$0!@\") == '@!0$5'", "def check(solve):\n\tassert solve(\"sxFaMa\") == 'SXfAmA'", "def check(solve):\n\tassert solve(\"?ao\") == '?AO'", "def check(solve):\n\tassert solve(\"k&!_\") == 'K&!_'", "def check(solve):\n\tassert solve(\"-|MSfK\") == '-|msFk'", "def check(solve):\n\tassert solve(\"5%@\") == '@%5'", "def check(solve):\n\tassert solve(\"=epet*orq\") == '=EPET*ORQ'", "def check(solve):\n\tassert solve(\"^dHUM-y\") == '^Dhum-Y'", "def check(solve):\n\tassert solve(\"npKwSAD\") == 'NPkWsad'", "def check(solve):\n\tassert solve(\"55=9/9\") == '9/9=55'", "def check(solve):\n\tassert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "def check(solve):\n\tassert solve(\"*^JOyeSI\") == '*^joYEsi'", "def check(solve):\n\tassert solve(\"yzzdc\") == 'YZZDC'", "def check(solve):\n\tassert solve(\"i!X&/T\") == 'I!x&/t'", "def check(solve):\n\tassert solve(\"mlB-*F\") == 'MLb-*f'", "def check(solve):\n\tassert solve(\"856\") == '658'", "def check(solve):\n\tassert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "def check(solve):\n\tassert solve(\"Xug\") == 'xUG'", "def check(solve):\n\tassert solve(\"~2~@0\") == '0@~2~'", "def check(solve):\n\tassert solve(\"UMm:m\") == 'umM:M'", "def check(solve):\n\tassert solve(\"6812832\") == '2382186'", "def check(solve):\n\tassert solve(\"QDF:CXB\") == 'qdf:cxb'", "def check(solve):\n\tassert solve(\"5-=@&*\") == '*&@=-5'", "def check(solve):\n\tassert solve(\"761~^_%~4\") == '4~%_^~167'", "def check(solve):\n\tassert solve(\"#$a^D\") == \"#$A^d\"", "def check(solve):\n\tassert solve(\"4hzTAP_e\") == '4HZtap_E'", "def check(solve):\n\tassert solve(\"2058786\") == '6878502'", "def check(solve):\n\tassert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "def check(solve):\n\tassert solve(\"*u~\") == '*U~'", "def check(solve):\n\tassert solve(\"g*chm\") == 'G*CHM'", "def check(solve):\n\tassert solve(\"enxhq\") == 'ENXHQ'", "def check(solve):\n\tassert solve(\"ctpx\") == 'CTPX'", "def check(solve):\n\tassert solve(\"j$&Wd\") == 'J$&wD'", "def check(solve):\n\tassert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "def check(solve):\n\tassert solve(\"cjG~zXx\") == 'CJg~ZxX'", "def check(solve):\n\tassert solve(\"dgksb\") == 'DGKSB'", "def check(solve):\n\tassert solve(\"827_~+=6:\") == ':6=+~_728'", "def check(solve):\n\tassert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "def check(solve):\n\tassert solve(\"389627754\") == '457726983'", "def check(solve):\n\tassert solve(\"+:#\") == '#:+'", "def check(solve):\n\tassert solve(\"prytYOIw\") == 'PRYTyoiW'", "def check(solve):\n\tassert solve(\"+1/05*!?+\") == '+?!*50/1+'", "def check(solve):\n\tassert solve(\"$u%lZTsz\") == '$U%LztSZ'", "def check(solve):\n\tassert solve(\"qyAKc\") == 'QYakC'", "def check(solve):\n\tassert solve(\"/@-\") == '-@/'", "def check(solve):\n\tassert solve(\"iiyw\") == 'IIYW'", "def check(solve):\n\tassert solve(\"#a@C\") == \"#A@c\"", "def check(solve):\n\tassert solve(\"49623838\") == '83832694'", "def check(solve):\n\tassert solve(\"u:kx!*\") == 'U:KX!*'", "def check(solve):\n\tassert solve(\"gsl\") == 'GSL'", "def check(solve):\n\tassert solve(\"jlycko\") == 'JLYCKO'", "def check(solve):\n\tassert solve(\"MUSKIE\") == 'muskie'", "def check(solve):\n\tassert solve(\":TDr\") == ':tdR'", "def check(solve):\n\tassert solve(\"bkd\") == 'BKD'", "def check(solve):\n\tassert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "def check(solve):\n\tassert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "def check(solve):\n\tassert solve(\"n$tkw\") == 'N$TKW'", "def check(solve):\n\tassert solve(\"48954\") == '45984'", "def check(solve):\n\tassert solve(\"LlWj5FD\") == 'lLwJ5fd'", "def check(solve):\n\tassert solve(\"AsDf\") == \"aSdF\"", "def check(solve):\n\tassert solve(\"@!93/5**@\") == '@**5/39!@'", "def check(solve):\n\tassert solve(\"VmVDPkI\") == 'vMvdpKi'", "def check(solve):\n\tassert solve(\"mOn\") == 'MoN'", "def check(solve):\n\tassert solve(\"059646105\") == '501646950'", "def check(solve):\n\tassert solve(\"huo^\") == 'HUO^'", "def check(solve):\n\tassert solve(\"ghgnw\") == 'GHGNW'", "def check(solve):\n\tassert solve(\"gne\") == 'GNE'", "def check(solve):\n\tassert solve(\"~~%==41\") == '14==%~~'", "def check(solve):\n\tassert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "def check(solve):\n\tassert solve(\"w@l+zd\") == 'W@L+ZD'", "def check(solve):\n\tassert solve(\"1234\") == \"4321\"", "def check(solve):\n\tassert solve(\"EsvNrg\") == 'eSVnRG'", "def check(solve):\n\tassert solve(\"pstVx\") == 'PSTvX'", "def check(solve):\n\tassert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "def check(solve):\n\tassert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "def check(solve):\n\tassert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "def check(solve):\n\tassert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "def check(solve):\n\tassert solve(\"gtvtsr\") == 'GTVTSR'", "def check(solve):\n\tassert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "def check(solve):\n\tassert solve(\"6971168\") == '8611796'", "def check(solve):\n\tassert solve(\"??rwE\") == '??RWe'", "def check(solve):\n\tassert solve(\"HMYxK\") == 'hmyXk'", "def check(solve):\n\tassert solve(\"gcflna\") == 'GCFLNA'", "def check(solve):\n\tassert solve(\"~+/#\") == '#/+~'", "def check(solve):\n\tassert solve(\"glgh\") == 'GLGH'", "def check(solve):\n\tassert solve(\"?gn~\") == '?GN~'", "def check(solve):\n\tassert solve(\"73713138\") == '83131737'", "def check(solve):\n\tassert solve(\"54138\") == '83145'", "def check(solve):\n\tassert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "def check(solve):\n\tassert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "def check(solve):\n\tassert solve(\"13431299\") == '99213431'", "def check(solve):\n\tassert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "def check(solve):\n\tassert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "def check(solve):\n\tassert solve(\"fqY\") == 'FQy'", "def check(solve):\n\tassert solve(\"|n*e~bx-\") == '|N*E~BX-'", "def check(solve):\n\tassert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "def check(solve):\n\tassert solve(\"++skzZ\") == '++SKZz'", "def check(solve):\n\tassert solve(\"%kmlC*s\") == '%KMLc*S'", "def check(solve):\n\tassert solve(\"232948\") == '849232'", "def check(solve):\n\tassert solve(\"613\") == '316'", "def check(solve):\n\tassert solve(\"!tmFhu\") == '!TMfHU'", "def check(solve):\n\tassert solve(\"+fDs:f\") == '+FdS:F'", "def check(solve):\n\tassert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "def check(solve):\n\tassert solve(\"cqiau\") == 'CQIAU'", "def check(solve):\n\tassert solve(\"340988\") == '889043'"], "test_case_list": ["assert solve(\"#ryv@$l*\") == '#RYV@$L*'", "assert solve(\"BjdhsNs\") == 'bJDHSnS'", "assert solve(\"$883%3/\") == '/3%388$'", "assert solve(\"QnNQfv\") == 'qNnqFV'", "assert solve(\"o3LWaIl4\") == 'O3lwAiL4'", "assert solve(\"zt*#m&v\") == 'ZT*#M&V'", "assert solve(\"wDgT\") == 'WdGt'", "assert solve(\"ab\") == \"AB\"", "assert solve(\"=E!NyLi\") == '=e!nYlI'", "assert solve(\"jZVuQ\") == 'JzvUq'", "assert solve(\"UKg@xpM~G\") == 'ukG@XPm~g'", "assert solve(\"%cCcq#\") == '%CcCQ#'", "assert solve(\"++A^/?xV\") == '++a^/?Xv'", "assert solve(\"7_%\") == '%_7'", "assert solve(\"qon\") == 'QON'", "assert solve(\"giiqdy\") == 'GIIQDY'", "assert solve(\"~@8%\") == '%8@~'", "assert solve(\"^@B\") == '^@b'", "assert solve(\"?UGciW\") == '?ugCIw'", "assert solve(\"17000556\") == '65500071'", "assert solve(\"nfl*&=+$@\") == 'NFL*&=+$@'", "assert solve(\"wSdcA\") == 'WsDCa'", "assert solve(\"luG9*?%\") == 'LUg9*?%'", "assert solve(\"5$0!@\") == '@!0$5'", "assert solve(\"sxFaMa\") == 'SXfAmA'", "assert solve(\"?ao\") == '?AO'", "assert solve(\"k&!_\") == 'K&!_'", "assert solve(\"-|MSfK\") == '-|msFk'", "assert solve(\"5%@\") == '@%5'", "assert solve(\"=epet*orq\") == '=EPET*ORQ'", "assert solve(\"^dHUM-y\") == '^Dhum-Y'", "assert solve(\"npKwSAD\") == 'NPkWsad'", "assert solve(\"55=9/9\") == '9/9=55'", "assert solve(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:", "assert solve(\"*^JOyeSI\") == '*^joYEsi'", "assert solve(\"yzzdc\") == 'YZZDC'", "assert solve(\"i!X&/T\") == 'I!x&/t'", "assert solve(\"mlB-*F\") == 'MLb-*f'", "assert solve(\"856\") == '658'", "assert solve(\"ifafP-OoTK%\") == 'IFAFp-oOtk%'", "assert solve(\"Xug\") == 'xUG'", "assert solve(\"~2~@0\") == '0@~2~'", "assert solve(\"UMm:m\") == 'umM:M'", "assert solve(\"6812832\") == '2382186'", "assert solve(\"QDF:CXB\") == 'qdf:cxb'", "assert solve(\"5-=@&*\") == '*&@=-5'", "assert solve(\"761~^_%~4\") == '4~%_^~167'", "assert solve(\"#$a^D\") == \"#$A^d\"", "assert solve(\"4hzTAP_e\") == '4HZtap_E'", "assert solve(\"2058786\") == '6878502'", "assert solve(\"yErHfPuhE\") == 'YeRhFpUHe'", "assert solve(\"*u~\") == '*U~'", "assert solve(\"g*chm\") == 'G*CHM'", "assert solve(\"enxhq\") == 'ENXHQ'", "assert solve(\"ctpx\") == 'CTPX'", "assert solve(\"j$&Wd\") == 'J$&wD'", "assert solve(\"ji$rpiwCJ\") == 'JI$RPIWcj'", "assert solve(\"cjG~zXx\") == 'CJg~ZxX'", "assert solve(\"dgksb\") == 'DGKSB'", "assert solve(\"827_~+=6:\") == ':6=+~_728'", "assert solve(\"vr_d$kBQ\") == 'VR_D$Kbq'", "assert solve(\"389627754\") == '457726983'", "assert solve(\"+:#\") == '#:+'", "assert solve(\"prytYOIw\") == 'PRYTyoiW'", "assert solve(\"+1/05*!?+\") == '+?!*50/1+'", "assert solve(\"$u%lZTsz\") == '$U%LztSZ'", "assert solve(\"qyAKc\") == 'QYakC'", "assert solve(\"/@-\") == '-@/'", "assert solve(\"iiyw\") == 'IIYW'", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"49623838\") == '83832694'", "assert solve(\"u:kx!*\") == 'U:KX!*'", "assert solve(\"gsl\") == 'GSL'", "assert solve(\"jlycko\") == 'JLYCKO'", "assert solve(\"MUSKIE\") == 'muskie'", "assert solve(\":TDr\") == ':tdR'", "assert solve(\"bkd\") == 'BKD'", "assert solve(\"DNOZ2XKDMJZSwC$\") == 'dnoz2xkdmjzsWc$'", "assert solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.", "assert solve(\"n$tkw\") == 'N$TKW'", "assert solve(\"48954\") == '45984'", "assert solve(\"LlWj5FD\") == 'lLwJ5fd'", "assert solve(\"AsDf\") == \"aSdF\"", "assert solve(\"@!93/5**@\") == '@**5/39!@'", "assert solve(\"VmVDPkI\") == 'vMvdpKi'", "assert solve(\"mOn\") == 'MoN'", "assert solve(\"059646105\") == '501646950'", "assert solve(\"huo^\") == 'HUO^'", "assert solve(\"ghgnw\") == 'GHGNW'", "assert solve(\"gne\") == 'GNE'", "assert solve(\"~~%==41\") == '14==%~~'", "assert solve(\"%_uoz/#?L\") == '%_UOZ/#?l'", "assert solve(\"w@l+zd\") == 'W@L+ZD'", "assert solve(\"1234\") == \"4321\"", "assert solve(\"EsvNrg\") == 'eSVnRG'", "assert solve(\"pstVx\") == 'PSTvX'", "assert solve(\"kLA#y:NC\") == 'Kla#Y:nc'", "assert solve(\"ePOjFeuu\") == 'EpoJfEUU'", "assert solve(\"GPJae+?*a\") == 'gpjAE+?*A'", "assert solve(\"Uc$$xCSQ0cN~\") == 'uC$$Xcsq0Cn~'", "assert solve(\"gtvtsr\") == 'GTVTSR'", "assert solve(\"#AsdfW^45\") == \"#aSDFw^45\"", "assert solve(\"6971168\") == '8611796'", "assert solve(\"??rwE\") == '??RWe'", "assert solve(\"HMYxK\") == 'hmyXk'", "assert solve(\"gcflna\") == 'GCFLNA'", "assert solve(\"~+/#\") == '#/+~'", "assert solve(\"glgh\") == 'GLGH'", "assert solve(\"?gn~\") == '?GN~'", "assert solve(\"73713138\") == '83131737'", "assert solve(\"54138\") == '83145'", "assert solve(\"oGzZO!NOb@Lty\") == 'OgZzo!noB@lTY'", "assert solve(\"Q&LKD*BmV\") == 'q&lkd*bMv'", "assert solve(\"13431299\") == '99213431'", "assert solve(\"~/uc/@p^h\") == '~/UC/@P^H'", "assert solve(\"4kqV&&/6+Lc\") == '4KQv&&/6+lC'", "assert solve(\"fqY\") == 'FQy'", "assert solve(\"|n*e~bx-\") == '|N*E~BX-'", "assert solve(\"Pj+3w:31N!s6\") == 'pJ+3W:31n!S6'", "assert solve(\"++skzZ\") == '++SKZz'", "assert solve(\"%kmlC*s\") == '%KMLc*S'", "assert solve(\"232948\") == '849232'", "assert solve(\"613\") == '316'", "assert solve(\"!tmFhu\") == '!TMfHU'", "assert solve(\"+fDs:f\") == '+FdS:F'", "assert solve(\"XAdrNtUNr\") == 'xaDRnTunR'", "assert solve(\"cqiau\") == 'CQIAU'", "assert solve(\"340988\") == '889043'"], "nl": "You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    ", "func": "def solve(s):", "examples": "Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    ", "repair_prompt": ["def solve(s):\t\n'''You are given a string s.\n    if s[i] is a letter, change its case from lowercase to uppercase or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Transforms the input string by changing the case of letters or reversing the string if no letters are present.\n\n    Parameters:\n    s (str): The input string which may contain letters, numbers, and special characters.\n\n    Returns:\n    str: The transformed string with case changes for letters or reversed if no letters are present.\n    \"\"\"\n    # Check if there are any letters in the string\n    has_letters = any(char.isalpha() for char in s)\n\n    if has_letters:\n        # If there are letters, swap the case of each letter\n        return s.swapcase()\n    else:\n        # If there are no letters, reverse the string\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"Hello World!\"))  # Output: \"hELLO wORLD!\"\n# print(solve(\"12345\"))         # Output: \"54321\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Transforms the input string based on its content.\n\n    If the string contains any letters, it changes the case of each letter.\n    If there are no letters, it reverses the string.\n\n    Parameters:\n    s (str): The input string to be transformed.\n\n    Returns:\n    str: The transformed string with case changes or reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    if any(char.isalpha() for char in s):\n        # Change the case of each letter using str.swapcase()\n        transformed_string = ''.join([char.swapcase() if char.isalpha() else char for char in s])\n    else:\n        # Reverse the string using slicing\n        transformed_string = s[::-1]\n    \n    return transformed_string\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Transforms the input string by toggling the case of letters if any are present,\n    or reversing the string if no letters are found.\n\n    Parameters:\n    s (str): The input string which may contain letters, digits, and special characters.\n\n    Returns:\n    str: The transformed string with case toggled for letters or reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n\n    if contains_letters:\n        # Toggle the case of each letter in the string\n        transformed_string = ''.join(\n            char.swapcase() if char.isalpha() else char for char in s\n        )\n    else:\n        # Reverse the string if no letters are present\n        transformed_string = s[::-1]\n\n    return transformed_string\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Transforms the input string based on its content.\n\n    Parameters:\n    s (str): The input string which may contain letters, digits, and special characters.\n\n    Returns:\n    str: The transformed string with toggled case for letters or reversed if no letters are present.\n    \"\"\"\n    if not s:\n        # Return an empty string if the input is empty\n        return \"\"\n\n    contains_letter = any(char.isalpha() for char in s)\n\n    if contains_letter:\n        # Toggle the case of each letter in the string\n        transformed_string = ''.join(\n            char.swapcase() if char.isalpha() else char for char in s\n        )\n    else:\n        # Reverse the string if it contains no letters\n        transformed_string = s[::-1]\n\n    return transformed_string\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"Processes the input string by toggling the case of letters or reversing the string if no letters are present.\n\n    Args:\n        s (str): The input string to be processed.\n\n    Returns:\n        str: A string with letters' cases toggled or reversed if no letters are present.\n    \"\"\"\n    # Check if there are any alphabetic characters in the string\n    has_letters = any(char.isalpha() for char in s)\n\n    if has_letters:\n        # Toggle the case of all alphabetic characters\n        return s.swapcase()\n    else:\n        # Reverse the string if no alphabetic characters are present\n        return s[::-1]\n\n# Example usage:\n# result = solve(\"Hello World!\")\n# print(result)  # Output: \"hELLO wORLD!\"\n\n# result = solve(\"12345\")\n# print(result)  # Output: \"54321\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Modifies the input string by swapping the case of letters if any are present,\n    or reversing the string if no letters are present.\n\n    Args:\n        s (str): The input string which may contain letters, numbers, and special characters.\n\n    Returns:\n        str: The modified string with case-swapped letters or reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any alphabetic characters\n    if any(char.isalpha() for char in s):\n        # Swap the case of each letter in the string\n        return s.swapcase()\n    else:\n        # Reverse the string if no alphabetic characters are present\n        return s[::-1]\n\n# Example usage:\n# print(solve(\"Hello World!\"))  # Output: \"hELLO wORLD!\"\n# print(solve(\"12345\"))         # Output: \"54321\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"Processes the input string by toggling the case of letters if any are present,\n    otherwise reverses the string.\n\n    Args:\n        s (str): The input string to be processed.\n\n    Returns:\n        str: The processed string with toggled case or reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any alphabetic characters\n    contains_letters = any(char.isalpha() for char in s)\n\n    if contains_letters:\n        # Toggle the case of each letter in the string\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # Reverse the string if no letters are present\n        return s[::-1]\n\n# Example usage:\n# result = solve(\"Hello World!\")\n# print(result)  # Output: \"hELLO wORLD!\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Processes the input string by changing the case of each letter if letters are present,\n    or reversing the string if no letters are present.\n\n    Parameters:\n    s (str): The input string to be processed.\n\n    Returns:\n    str: The processed string with case changes or reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n\n    if contains_letters:\n        # Change the case of each letter in the string\n        processed_string = ''.join(\n            char.swapcase() if char.isalpha() else char for char in s\n        )\n    else:\n        # Reverse the string if no letters are present\n        processed_string = s[::-1]\n\n    return processed_string\n\n# Example usage:\n# result = solve(\"Hello World!\")\n# print(result)  # Output: \"hELLO wORLD!\"\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"\n    Processes a string by toggling the case of letters or reversing the string if no letters are present.\n\n    Parameters:\n    s (str): The input string to be processed.\n\n    Returns:\n    str: The processed string with toggled case for letters or reversed if no letters are present.\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letters = any(char.isalpha() for char in s)\n\n    if contains_letters:\n        # Toggle the case of each letter in the string\n        processed_string = ''.join(\n            char.swapcase() if char.isalpha() else char for char in s\n        )\n    else:\n        # Reverse the string if no letters are present\n        processed_string = s[::-1]\n\n    return processed_string\n", "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"Modifies the input string based on its content.\n\n    If the string contains any letters, it changes the case of each letter.\n    If the string contains no letters, it reverses the string.\n\n    Args:\n        s (str): The input string to be modified.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    contains_letter = any(char.isalpha() for char in s)\n    \n    if contains_letter:\n        # Change the case of each letter in the string\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # Reverse the string if no letters are present\n        return s[::-1]\n\n# Example usage:\n# result = solve(\"Hello World!\")\n# print(result)  # Output: \"hELLO wORLD!\"\n# result = solve(\"12345\")\n# print(result)  # Output: \"54321\"\n"], "plans": ["requirement analysis:\nThe function should efficiently handle strings with mixed characters, ensuring case transformation for letters and reversal for strings without letters. It should be optimized for performance and maintain simplicity for easy integration.\nrequirement pool:\n- Handle case transformation for letters\n- Reverse strings without letters\n- Optimize performance for large strings\n- Ensure code readability\n- Provide comprehensive error handling\nWe will implement a function that iterates over each character in the string. If the character is a letter, we will change its case using the built-in Python string method `swapcase()`. If the string contains no letters, we will reverse the string using slicing. This approach leverages efficient built-in methods to ensure performance and simplicity.\n", "requirement analysis:\nThe function should efficiently handle strings with mixed characters, ensuring correct case transformation for letters and reversal for strings without letters. Edge cases such as empty strings or strings with special characters should be considered.\nrequirement pool:\n- Handle case transformation for letters\n- Reverse strings with no letters\n- Optimize for performance with large strings\n- Ensure code readability\n- Consider edge cases like empty strings\nWe will implement a simple function using Python's built-in string methods to handle case transformation and reversal. The function will first check if the string contains any letters. If it does, it will change the case of each letter using a list comprehension and the str.swapcase() method. If there are no letters, it will reverse the string using slicing. This approach ensures both performance and readability.\n", "requirement analysis:\nThe function should efficiently handle strings with mixed characters, ensuring correct case conversion and reversal when necessary. It should be optimized for performance and maintain readability for easy integration.\nrequirement pool:\n- Implement case conversion for letters in the string\n- Reverse the string if it contains no letters\n- Optimize the function for large input strings\n- Ensure code readability and simplicity\n- Handle edge cases such as empty strings or strings with special characters\nWe will implement a function that iterates through the string to check for the presence of letters. If letters are found, their cases will be toggled using Python's built-in string methods. If no letters are present, the string will be reversed. This approach ensures simplicity and leverages efficient built-in methods for performance.\n", "requirement analysis:\nThe function should efficiently toggle the case of letters in a string while reversing strings that contain no letters. It must handle special characters without modification and be optimized for performance with large inputs.\nrequirement pool:\n- Toggle case of letters in the string\n- Reverse the string if it contains no letters\n- Handle special characters without altering them\n- Optimize for performance with large input strings\n- Maintain code readability and simplicity\nWe will use Python's built-in string methods to efficiently toggle the case of letters and reverse strings when necessary. The function will iterate through the string to check for letters and apply the appropriate transformations. This approach ensures simplicity and performance without the need for additional libraries.\n", "requirement analysis:\nThe function needs to handle both letter and non-letter characters efficiently. It should change the case of letters and reverse the string if no letters are present. The implementation should be straightforward and optimized for performance.\nrequirement pool:\n- Implement the main function logic to change case or reverse string\n- Optimize the function for performance\n- Ensure the function handles edge cases\n- Maintain code readability\n- Add comprehensive test cases\nWe will implement a function that iterates over the string to check for letters. If letters are found, their case will be toggled using the built-in string method `swapcase()`. If no letters are found, the string will be reversed using slicing. The function will be optimized for performance by using efficient string operations and will handle edge cases such as empty strings and strings with mixed characters.\n", "requirement analysis:\nThe function should efficiently handle strings with various character types, ensuring case conversion for letters and reversal for non-letter strings. It should be optimized for performance and maintain readability.\nrequirement pool:\n- Implement the main function logic\n- Optimize for performance with large input strings\n- Ensure code readability and maintainability\n- Add comprehensive test cases\n- Document the function with examples\nWe will use Python's built-in string methods to efficiently handle the case conversion and reversal of strings. The function will first check if the string contains any alphabetic characters. If it does, it will change the case of each letter using the str.swapcase() method. If there are no alphabetic characters, it will reverse the string using slicing. This approach ensures simplicity and performance, leveraging Python's optimized string operations.\n", "requirement analysis:\nThe function should efficiently handle strings with mixed content, ensuring that letters are toggled in case and non-letter characters remain unchanged. If no letters are present, the string should be reversed. Edge cases such as empty strings or strings with only special characters should be considered.\nrequirement pool:\n- Implement case toggling for letters in the string\n- Reverse the string if no letters are present\n- Handle edge cases like empty strings\n- Ensure performance with large strings\n- Maintain code readability\nWe will implement a function that iterates over the string to check for letters. If letters are found, their case will be toggled using Python's built-in string methods. If no letters are present, the string will be reversed. This approach ensures that the function is efficient and handles all edge cases, including empty strings and strings with only special characters.\n", "requirement analysis:\nThe function should efficiently handle strings with mixed characters, ensuring correct case transformation for letters and reversing strings without letters. It should be optimized for performance and maintain readability.\nrequirement pool:\n- Implement case transformation for letters\n- Reverse strings with no letters\n- Optimize for large string inputs\n- Ensure code readability\n- Handle edge cases like empty strings\nWe will implement a function that iterates over each character in the string. If the character is a letter, we will change its case using the built-in string method. If the string contains no letters, we will reverse it using slicing. This approach ensures simplicity and efficiency, leveraging Python's built-in capabilities.\n", "requirement analysis:\nThe function should efficiently handle strings with mixed content, ensuring that letters are toggled in case and non-letter characters remain unchanged. If no letters are present, the string should be reversed. The solution should be optimized for performance and maintain readability.\nrequirement pool:\n- Implement the main function to toggle case of letters and reverse non-letter strings.\n- Optimize the function for performance with large strings.\n- Ensure the function handles edge cases, such as empty strings or strings with only special characters.\n- Add comprehensive test cases to validate the function's behavior.\n- Document the function with clear examples and usage instructions.\nWe will implement a function that iterates over the string, checking each character to determine if it is a letter. If it is a letter, we will toggle its case using the built-in string method. If the string contains no letters, we will reverse it using slicing. This approach leverages Python's efficient string manipulation capabilities and ensures simplicity and readability.\n", "requirement analysis:\nThe function should efficiently handle strings with mixed content, including letters, numbers, and special characters. It should change the case of letters and reverse strings without letters, ensuring no errors occur with special characters.\nrequirement pool:\n- Implement the main function logic to change case and reverse strings.\n- Optimize the function for performance with large input strings.\n- Ensure compatibility with various character encodings.\n- Add comprehensive test cases to cover edge scenarios.\n- Document the function usage and edge cases.\nWe will implement a function that iterates over the string to check for letters. If any letter is found, we will change its case using Python's built-in string methods. If no letters are found, we will reverse the string. This approach leverages Python's efficient string manipulation capabilities and ensures compatibility with various character encodings by default.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [128, 128, 128, 128, 128, 128, 128, 128, 128, 128], "completion": "from typing import List\n## main.py\n\ndef solve(s: str) -> str:\n    \"\"\"Modifies the input string based on its content.\n\n    If the string contains any letters, it changes the case of each letter.\n    If the string contains no letters, it reverses the string.\n\n    Args:\n        s (str): The input string to be modified.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    contains_letter = any(char.isalpha() for char in s)\n    \n    if contains_letter:\n        # Change the case of each letter in the string\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # Reverse the string if no letters are present\n        return s[::-1]\n\n# Example usage:\n# result = solve(\"Hello World!\")\n# print(result)  # Output: \"hELLO wORLD!\"\n# result = solve(\"12345\")\n# print(result)  # Output: \"54321\"\n", "passed": true, "pass": true, "pass_num": 10, "round": 261, "mutate_method": "rephrase_one", "parent_index": 132}
