{"task_id": "HumanEval/69", "prompt": "def search(lst):\t\n'''You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero and has a frequency greater than or equal to the value of the integer itself, where the frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "entry_point": "search", "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "test": ["def check(search):\n\tassert search([6, 7, 3, 13, 7, 15, 8, 6, 3, 5, 6, 8, 7, 3, 12, 2, 8, 13]) == 3", "def check(search):\n\tassert search([9, 1, 4, 1, 6, 6, 4, 2, 2, 6, 9, 12, 4, 14, 4, 6, 2, 4, 4, 2, 6, 6, 10, 10, 6, 2, 3, 14, 8, 6]) == 6", "def check(search):\n\tassert search([3, 5, 8, 4, 8, 10, 8, 3, 6, 12, 2, 3]) == 3", "def check(search):\n\tassert search([14, 4, 8, 6, 1, 4, 7, 6, 10, 2, 6, 8, 7, 9, 1, 9, 4, 5, 8, 8, 6, 5, 10, 9, 12, 1, 4, 14, 10, 5]) == 4", "def check(search):\n\tassert search([5, 13, 8, 5, 6]) == -1", "def check(search):\n\tassert search([2, 4, 9, 5, 6, 13, 11, 3, 9, 11, 6, 15, 6, 8, 9, 7, 2, 7, 6, 12, 3, 3]) == 3", "def check(search):\n\tassert search([5, 10, 2, 9, 6, 9, 4, 7, 7, 10, 8, 7, 1, 11, 6, 7, 13, 9, 8, 4, 6, 6, 6, 7]) == 1", "def check(search):\n\tassert search([3, 2, 8, 2]) == 2", "def check(search):\n\tassert search([6, 4, 5, 14, 4, 10, 5, 6, 5, 10, 2, 5, 7, 3, 6, 2, 11, 8, 3, 10, 8]) == 2", "def check(search):\n\tassert search([7, 7, 9, 6, 9, 2, 7, 12, 14, 10, 2, 11, 2]) == 2", "def check(search):\n\tassert search([5, 4, 2, 5, 11, 13, 8, 3, 2, 7, 12]) == 2", "def check(search):\n\tassert search([10, 6, 2, 2, 6, 4, 2, 2, 7, 4, 3, 11, 6, 15, 2, 10, 5, 4, 3, 4, 5, 5, 14, 9, 12, 7, 9, 5, 5, 8]) == 5", "def check(search):\n\tassert search([6, 6, 4, 1, 4, 3, 9, 1, 5, 3, 9, 4, 6, 11, 3, 4, 7, 6, 7, 1, 3, 9, 6, 4, 12, 4, 8, 15, 12, 8]) == 4", "def check(search):\n\tassert search([8, 5, 1, 11, 9, 11, 1, 13, 10, 2, 6]) == 1", "def check(search):\n\tassert search([1, 13, 12, 4, 5, 12, 8, 8, 10, 1, 5, 8, 2, 9, 15, 7, 10, 3, 10, 5, 12, 4, 1, 8]) == 1", "def check(search):\n\tassert search([6, 8, 7, 12, 6, 10, 10, 1, 3, 11, 5, 8, 2, 3, 4, 4, 2, 10]) == 2", "def check(search):\n\tassert search([1, 7, 1, 11, 4, 7, 1, 3, 2, 6, 5]) == 1", "def check(search):\n\tassert search([8, 10, 10, 12, 13, 11, 10, 12]) == -1", "def check(search):\n\tassert search([3, 9, 13, 13, 3, 12, 12, 2, 9, 4, 6, 15, 7, 5, 5, 6, 6, 11, 3, 15, 13, 1]) == 3", "def check(search):\n\tassert search([3, 10, 5, 1, 4, 14, 11, 8, 7, 13, 6, 4]) == 1", "def check(search):\n\tassert search([12, 5, 5, 7, 8, 8, 4]) == -1", "def check(search):\n\tassert search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1", "def check(search):\n\tassert search([1, 6, 12, 11, 8, 13, 3, 3, 10, 6, 4, 11, 2, 6, 9, 6, 1, 2, 4, 13, 3, 1]) == 3", "def check(search):\n\tassert search([4, 5, 4, 4, 3, 6, 1, 5, 3, 8, 12, 13, 2, 6, 9, 6, 13, 11, 3, 4, 9, 9, 6, 6]) == 4", "def check(search):\n\tassert search([10, 4, 7, 3, 8, 2, 2, 3, 10, 2, 9, 8, 7, 2, 9, 1, 8, 10, 6, 3, 8, 4, 2, 10]) == 3", "def check(search):\n\tassert search([3, 4, 3, 1, 9, 6]) == 1", "def check(search):\n\tassert search([3, 2, 3, 2, 7, 8]) == 2", "def check(search):\n\tassert search([3, 10, 10, 9, 2]) == -1", "def check(search):\n\tassert search([6, 12, 10, 7, 7, 12, 8, 7, 12, 11, 10, 10, 1, 3, 5, 9, 4, 3, 5, 12, 10, 2]) == 1", "def check(search):\n\tassert search([6, 12, 6, 3, 4]) == -1", "def check(search):\n\tassert search([9, 9, 5, 9, 6]) == -1", "def check(search):\n\tassert search([3, 3]) == -1", "def check(search):\n\tassert search([9, 5, 6, 5, 1, 3, 13, 1, 6, 2, 8]) == 1", "def check(search):\n\tassert search([2, 3, 9, 3, 3, 11, 2, 6, 8, 12, 2, 11, 5, 2, 3, 7, 7, 4, 7, 2, 2, 14, 3]) == 3", "def check(search):\n\tassert search([4, 5, 8, 4, 4]) == -1", "def check(search):\n\tassert search([11, 10, 2, 9, 4, 6, 4, 6, 10, 13, 4, 7, 6, 10, 11, 9, 9, 1, 12, 6, 6, 9, 5, 2, 11]) == 2", "def check(search):\n\tassert search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5", "def check(search):\n\tassert search([5]) == -1", "def check(search):\n\tassert search([5, 5, 5, 5, 1]) == 1", "def check(search):\n\tassert search([7, 6, 5, 7, 4]) == -1", "def check(search):\n\tassert search([13]) == -1", "def check(search):\n\tassert search([7, 6, 7, 2, 5, 9]) == -1", "def check(search):\n\tassert search([4, 2]) == -1", "def check(search):\n\tassert search([7, 12, 12, 10, 1, 1, 7, 9, 3, 1, 7, 7, 2, 3, 13, 4, 1, 1, 11, 4, 3, 3, 3]) == 3", "def check(search):\n\tassert search([6, 11, 3, 15, 5, 11, 6, 7, 6, 7, 5, 8, 6, 3, 7, 5, 8, 2]) == -1", "def check(search):\n\tassert search([10, 7, 10, 7, 3, 5, 7, 7]) == -1", "def check(search):\n\tassert search([4, 12, 4, 10, 8, 3, 12, 4, 11, 3, 9, 5, 2, 4, 10, 5, 4, 4, 4, 10, 13, 1]) == 4", "def check(search):\n\tassert search([12, 5, 4, 11, 2, 9, 4, 8, 11, 3, 5, 4, 5, 14, 8, 8, 3, 6, 11, 10, 4, 4]) == 4", "def check(search):\n\tassert search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1", "def check(search):\n\tassert search([1]) == 1", "def check(search):\n\tassert search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2", "def check(search):\n\tassert search([3, 8, 8, 5, 2, 10, 4, 3, 9, 9, 6, 15, 10, 3, 8, 8, 9, 10, 2, 9, 10]) == 3", "def check(search):\n\tassert search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1", "def check(search):\n\tassert search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4", "def check(search):\n\tassert search([1, 9, 10, 1, 3]) == 1", "def check(search):\n\tassert search([8, 13, 3, 13, 2, 10, 6, 5, 8, 7, 14, 6, 3, 1, 4, 5, 8, 5]) == 1", "def check(search):\n\tassert search([2, 8, 10, 14, 7, 3, 1, 9, 13, 6, 7, 6, 3, 10, 9, 7, 5, 10, 6, 8, 3, 1]) == 3", "def check(search):\n\tassert search([4, 8, 10, 5, 1]) == 1", "def check(search):\n\tassert search([14, 6, 8, 1, 2, 3, 6, 13, 10, 12, 1, 10, 6]) == 1", "def check(search):\n\tassert search([9, 7, 4, 4, 2, 6, 3, 9, 8, 6, 6, 10, 4]) == -1", "def check(search):\n\tassert search([8, 5, 3, 10, 3, 7, 7, 7, 4, 5, 11, 10, 6, 8, 5, 2, 14, 12, 12, 7, 11]) == -1", "def check(search):\n\tassert search([6, 5, 8, 1, 1, 9, 10, 11, 3, 6, 11, 7]) == 1", "def check(search):\n\tassert search([9, 4, 6, 7, 11, 6, 1, 4, 3, 7, 5]) == 1", "def check(search):\n\tassert search([4, 1, 4, 1, 4, 4]) == 4", "def check(search):\n\tassert search([5, 3, 7, 2]) == -1", "def check(search):\n\tassert search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4", "def check(search):\n\tassert search([12, 4, 5, 8, 1, 8, 5, 4, 8, 2, 5, 4, 3, 12, 4, 1, 8, 8, 6, 5, 5, 4]) == 5", "def check(search):\n\tassert search([4, 3, 7, 4, 4, 1]) == 1", "def check(search):\n\tassert search([7, 4, 3, 6, 4, 5, 8, 8, 3, 11, 2, 7, 8, 8, 13, 9, 2, 2, 7, 6, 3, 10, 4]) == 3", "def check(search):\n\tassert search([7, 5, 13, 5]) == -1", "def check(search):\n\tassert search([3, 9, 7, 8, 10, 10, 7]) == -1", "def check(search):\n\tassert search([10, 9, 13, 3, 6, 3, 7, 4, 3, 4, 8]) == 3", "def check(search):\n\tassert search([2, 1, 6, 1, 9, 12, 7, 11, 4, 9, 5, 2, 3, 7, 10, 9, 5, 3, 2, 1, 3, 14, 9]) == 3", "def check(search):\n\tassert search([6, 7, 14, 5, 6, 7, 4, 5, 6, 2, 3, 10, 4, 3, 10, 1, 3, 2, 9, 5, 3, 1, 7]) == 3", "def check(search):\n\tassert search([7, 8, 5, 7, 8, 10, 7]) == -1", "def check(search):\n\tassert search([6, 3]) == -1", "def check(search):\n\tassert search([10, 9, 6, 10, 2, 7, 5, 10, 3, 2, 5, 13, 9, 5, 7, 5, 4, 5, 15, 2, 5, 1, 8]) == 5", "def check(search):\n\tassert search([8, 13, 3, 6, 10, 3, 13, 3]) == 3", "def check(search):\n\tassert search([4, 4, 7, 7, 7, 10, 14, 5, 6, 13, 14, 4, 7, 7, 2, 1, 3, 1]) == 1", "def check(search):\n\tassert search([3, 13, 10, 12, 2, 4, 6, 1, 4, 6, 14, 5, 9, 5, 4, 5, 7, 1, 6, 4, 2, 7, 10, 4, 11]) == 4", "def check(search):\n\tassert search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1", "def check(search):\n\tassert search([7, 3, 3, 3, 7]) == 3", "def check(search):\n\tassert search([6, 8, 1, 6, 12, 13, 10, 6, 2, 6, 6]) == 1", "def check(search):\n\tassert search([6, 8, 9, 3, 1]) == 1", "def check(search):\n\tassert search([6, 4, 5, 6, 4, 2, 13, 5, 6, 1, 7]) == 1", "def check(search):\n\tassert search([3, 3, 3, 7, 3]) == 3", "def check(search):\n\tassert search([12]) == -1", "def check(search):\n\tassert search([3, 8, 9, 6, 5, 4, 14, 5, 7, 12, 10, 1]) == 1", "def check(search):\n\tassert search([5, 13, 5, 1, 6]) == 1", "def check(search):\n\tassert search([12, 7, 6, 9, 6, 5, 9, 6]) == -1", "def check(search):\n\tassert search([9, 8, 1, 5, 9, 3, 8]) == 1", "def check(search):\n\tassert search([12, 11, 4, 12, 7, 1, 4, 5, 14, 6, 4, 4, 4, 12, 8, 1, 7, 10, 4, 9, 11, 1]) == 4", "def check(search):\n\tassert search([13, 6, 11, 9, 9, 7, 10, 11, 2, 7, 5, 9, 8, 2, 11, 2, 2, 1, 14, 6, 5, 4, 9]) == 2", "def check(search):\n\tassert search([8, 8, 3, 6, 5, 6, 4]) == -1", "def check(search):\n\tassert search([4, 6, 5, 2, 13, 8, 1, 5, 9, 7, 5, 5, 4, 2, 6, 12, 1, 5, 5, 7, 6, 14, 7]) == 5", "def check(search):\n\tassert search([2, 10, 9, 12, 6, 8, 11, 3, 7, 13, 8, 8, 6, 11, 8, 1, 13, 1, 6, 4, 7, 12, 1, 8, 5]) == 1", "def check(search):\n\tassert search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1", "def check(search):\n\tassert search([10]) == -1", "def check(search):\n\tassert search([7, 10, 3, 12, 8, 2, 6, 1, 13, 1, 6, 10, 15, 2, 6, 5, 8, 2, 6, 8, 12]) == 2", "def check(search):\n\tassert search([6, 8, 8, 1, 7]) == 1", "def check(search):\n\tassert search([8, 2, 1, 7, 3, 4, 8, 4, 8, 8, 6, 14, 6, 8, 3, 2, 9, 10, 2, 9, 11]) == 2", "def check(search):\n\tassert search([1, 2]) == 1", "def check(search):\n\tassert search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1", "def check(search):\n\tassert search([11, 2, 9, 6, 2, 8, 7, 15, 12, 11, 10, 7, 4]) == 2", "def check(search):\n\tassert search([13, 5, 9, 13, 4, 8, 10, 4, 9, 6, 10, 4, 13, 5, 5, 6, 7, 6]) == -1", "def check(search):\n\tassert search([8]) == -1", "def check(search):\n\tassert search([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests", "def check(search):\n\tassert search([6, 5, 8, 6, 3, 13, 3, 1, 1, 11, 8, 5, 6, 8, 5, 6, 7, 6]) == 1", "def check(search):\n\tassert search([1, 8, 6, 5, 7, 14, 8, 12, 6, 3, 12, 8]) == 1", "def check(search):\n\tassert search([4, 15, 3, 12, 3, 8, 5, 5, 6, 6, 2, 6, 9, 5, 3, 8, 5, 9]) == 3", "def check(search):\n\tassert search([6, 3, 9, 9, 5]) == -1", "def check(search):\n\tassert search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2", "def check(search):\n\tassert search([7, 4, 1, 4, 1]) == 1", "def check(search):\n\tassert search([4, 5, 10, 1, 2]) == 1", "def check(search):\n\tassert search([6, 4, 6, 6, 1, 4, 2, 4, 5, 9, 10, 9, 9, 13, 12, 6, 6, 8, 13, 2, 6, 10, 6, 10, 4]) == 6", "def check(search):\n\tassert search([3]) == -1", "def check(search):\n\tassert search([6, 6, 6, 7, 3]) == -1", "def check(search):\n\tassert search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4", "def check(search):\n\tassert search([8, 3]) == -1", "def check(search):\n\tassert search([7, 1, 8, 5, 1, 1, 7, 6, 5, 6, 8]) == 1", "def check(search):\n\tassert search([8, 3, 15, 4, 3, 3, 5, 7, 10, 3, 5]) == 3", "def check(search):\n\tassert search([5, 10, 4, 9, 13, 7, 2, 3, 12, 10, 5, 6, 4, 6, 12, 7, 4, 11, 2, 9, 10, 2, 3, 12]) == 2", "def check(search):\n\tassert search([4, 1, 8, 5, 9, 9]) == 1", "def check(search):\n\tassert search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2", "def check(search):\n\tassert search([9, 4, 5, 1, 3, 3, 2]) == 1", "def check(search):\n\tassert search([13, 10, 5, 5, 1, 3, 14, 5, 9, 5, 13, 5, 11, 5, 3, 1, 3, 4]) == 5", "def check(search):\n\tassert search([11, 6, 12, 12, 4, 3, 4, 4, 8, 2, 1, 1, 2, 13, 11, 6, 5, 11, 7, 11, 10, 11]) == 2", "def check(search):\n\tassert search([10, 7, 9, 4, 7, 8, 10, 12, 4, 9, 4, 7, 5, 4, 11, 8, 6, 4, 14, 5, 1, 1, 2]) == 4", "def check(search):\n\tassert search([8, 5, 4, 4, 10, 5, 8, 8]) == -1", "def check(search):\n\tassert search([3, 11, 2, 3, 4, 12, 5, 5, 7, 10, 7, 3, 3, 7, 7, 7, 5, 12]) == 3", "def check(search):\n\tassert search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1", "def check(search):\n\tassert search([11]) == -1", "def check(search):\n\tassert search([6]) == -1", "def check(search):\n\tassert search([8, 8, 8, 8, 8, 8, 8, 8]) == 8", "def check(search):\n\tassert search([8, 7, 9, 9, 3, 4, 9, 5, 9, 10, 11, 10, 7, 11, 6, 7, 13, 5, 11, 5, 3, 8, 10, 7, 9]) == -1", "def check(search):\n\tassert search([6, 8, 9, 6, 13, 10, 4, 8, 8, 5, 8, 5, 3, 8, 6, 10, 4, 2, 6, 2, 2, 10, 8]) == 2", "def check(search):\n\tassert search([4, 3, 9, 6]) == -1", "def check(search):\n\tassert search([14, 1, 5, 6, 7, 3, 1, 1, 3, 7, 7, 2, 3, 6, 3, 6, 8, 1, 7, 4, 4, 12, 11, 3, 7, 4, 4, 8, 13, 5]) == 4", "def check(search):\n\tassert search([13, 10, 7, 5, 4, 10, 3, 13, 12, 9, 5, 9, 4]) == -1", "def check(search):\n\tassert search([3, 6, 8, 6]) == -1", "def check(search):\n\tassert search([8, 3, 7, 7]) == -1"], "test_case_list": ["assert search([6, 7, 3, 13, 7, 15, 8, 6, 3, 5, 6, 8, 7, 3, 12, 2, 8, 13]) == 3", "assert search([9, 1, 4, 1, 6, 6, 4, 2, 2, 6, 9, 12, 4, 14, 4, 6, 2, 4, 4, 2, 6, 6, 10, 10, 6, 2, 3, 14, 8, 6]) == 6", "assert search([3, 5, 8, 4, 8, 10, 8, 3, 6, 12, 2, 3]) == 3", "assert search([14, 4, 8, 6, 1, 4, 7, 6, 10, 2, 6, 8, 7, 9, 1, 9, 4, 5, 8, 8, 6, 5, 10, 9, 12, 1, 4, 14, 10, 5]) == 4", "assert search([5, 13, 8, 5, 6]) == -1", "assert search([2, 4, 9, 5, 6, 13, 11, 3, 9, 11, 6, 15, 6, 8, 9, 7, 2, 7, 6, 12, 3, 3]) == 3", "assert search([5, 10, 2, 9, 6, 9, 4, 7, 7, 10, 8, 7, 1, 11, 6, 7, 13, 9, 8, 4, 6, 6, 6, 7]) == 1", "assert search([3, 2, 8, 2]) == 2", "assert search([6, 4, 5, 14, 4, 10, 5, 6, 5, 10, 2, 5, 7, 3, 6, 2, 11, 8, 3, 10, 8]) == 2", "assert search([7, 7, 9, 6, 9, 2, 7, 12, 14, 10, 2, 11, 2]) == 2", "assert search([5, 4, 2, 5, 11, 13, 8, 3, 2, 7, 12]) == 2", "assert search([10, 6, 2, 2, 6, 4, 2, 2, 7, 4, 3, 11, 6, 15, 2, 10, 5, 4, 3, 4, 5, 5, 14, 9, 12, 7, 9, 5, 5, 8]) == 5", "assert search([6, 6, 4, 1, 4, 3, 9, 1, 5, 3, 9, 4, 6, 11, 3, 4, 7, 6, 7, 1, 3, 9, 6, 4, 12, 4, 8, 15, 12, 8]) == 4", "assert search([8, 5, 1, 11, 9, 11, 1, 13, 10, 2, 6]) == 1", "assert search([1, 13, 12, 4, 5, 12, 8, 8, 10, 1, 5, 8, 2, 9, 15, 7, 10, 3, 10, 5, 12, 4, 1, 8]) == 1", "assert search([6, 8, 7, 12, 6, 10, 10, 1, 3, 11, 5, 8, 2, 3, 4, 4, 2, 10]) == 2", "assert search([1, 7, 1, 11, 4, 7, 1, 3, 2, 6, 5]) == 1", "assert search([8, 10, 10, 12, 13, 11, 10, 12]) == -1", "assert search([3, 9, 13, 13, 3, 12, 12, 2, 9, 4, 6, 15, 7, 5, 5, 6, 6, 11, 3, 15, 13, 1]) == 3", "assert search([3, 10, 5, 1, 4, 14, 11, 8, 7, 13, 6, 4]) == 1", "assert search([12, 5, 5, 7, 8, 8, 4]) == -1", "assert search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1", "assert search([1, 6, 12, 11, 8, 13, 3, 3, 10, 6, 4, 11, 2, 6, 9, 6, 1, 2, 4, 13, 3, 1]) == 3", "assert search([4, 5, 4, 4, 3, 6, 1, 5, 3, 8, 12, 13, 2, 6, 9, 6, 13, 11, 3, 4, 9, 9, 6, 6]) == 4", "assert search([10, 4, 7, 3, 8, 2, 2, 3, 10, 2, 9, 8, 7, 2, 9, 1, 8, 10, 6, 3, 8, 4, 2, 10]) == 3", "assert search([3, 4, 3, 1, 9, 6]) == 1", "assert search([3, 2, 3, 2, 7, 8]) == 2", "assert search([3, 10, 10, 9, 2]) == -1", "assert search([6, 12, 10, 7, 7, 12, 8, 7, 12, 11, 10, 10, 1, 3, 5, 9, 4, 3, 5, 12, 10, 2]) == 1", "assert search([6, 12, 6, 3, 4]) == -1", "assert search([9, 9, 5, 9, 6]) == -1", "assert search([3, 3]) == -1", "assert search([9, 5, 6, 5, 1, 3, 13, 1, 6, 2, 8]) == 1", "assert search([2, 3, 9, 3, 3, 11, 2, 6, 8, 12, 2, 11, 5, 2, 3, 7, 7, 4, 7, 2, 2, 14, 3]) == 3", "assert search([4, 5, 8, 4, 4]) == -1", "assert search([11, 10, 2, 9, 4, 6, 4, 6, 10, 13, 4, 7, 6, 10, 11, 9, 9, 1, 12, 6, 6, 9, 5, 2, 11]) == 2", "assert search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5", "assert search([5]) == -1", "assert search([5, 5, 5, 5, 1]) == 1", "assert search([7, 6, 5, 7, 4]) == -1", "assert search([13]) == -1", "assert search([7, 6, 7, 2, 5, 9]) == -1", "assert search([4, 2]) == -1", "assert search([7, 12, 12, 10, 1, 1, 7, 9, 3, 1, 7, 7, 2, 3, 13, 4, 1, 1, 11, 4, 3, 3, 3]) == 3", "assert search([6, 11, 3, 15, 5, 11, 6, 7, 6, 7, 5, 8, 6, 3, 7, 5, 8, 2]) == -1", "assert search([10, 7, 10, 7, 3, 5, 7, 7]) == -1", "assert search([4, 12, 4, 10, 8, 3, 12, 4, 11, 3, 9, 5, 2, 4, 10, 5, 4, 4, 4, 10, 13, 1]) == 4", "assert search([12, 5, 4, 11, 2, 9, 4, 8, 11, 3, 5, 4, 5, 14, 8, 8, 3, 6, 11, 10, 4, 4]) == 4", "assert search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1", "assert search([1]) == 1", "assert search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2", "assert search([3, 8, 8, 5, 2, 10, 4, 3, 9, 9, 6, 15, 10, 3, 8, 8, 9, 10, 2, 9, 10]) == 3", "assert search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1", "assert search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4", "assert search([1, 9, 10, 1, 3]) == 1", "assert search([8, 13, 3, 13, 2, 10, 6, 5, 8, 7, 14, 6, 3, 1, 4, 5, 8, 5]) == 1", "assert search([2, 8, 10, 14, 7, 3, 1, 9, 13, 6, 7, 6, 3, 10, 9, 7, 5, 10, 6, 8, 3, 1]) == 3", "assert search([4, 8, 10, 5, 1]) == 1", "assert search([14, 6, 8, 1, 2, 3, 6, 13, 10, 12, 1, 10, 6]) == 1", "assert search([9, 7, 4, 4, 2, 6, 3, 9, 8, 6, 6, 10, 4]) == -1", "assert search([8, 5, 3, 10, 3, 7, 7, 7, 4, 5, 11, 10, 6, 8, 5, 2, 14, 12, 12, 7, 11]) == -1", "assert search([6, 5, 8, 1, 1, 9, 10, 11, 3, 6, 11, 7]) == 1", "assert search([9, 4, 6, 7, 11, 6, 1, 4, 3, 7, 5]) == 1", "assert search([4, 1, 4, 1, 4, 4]) == 4", "assert search([5, 3, 7, 2]) == -1", "assert search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4", "assert search([12, 4, 5, 8, 1, 8, 5, 4, 8, 2, 5, 4, 3, 12, 4, 1, 8, 8, 6, 5, 5, 4]) == 5", "assert search([4, 3, 7, 4, 4, 1]) == 1", "assert search([7, 4, 3, 6, 4, 5, 8, 8, 3, 11, 2, 7, 8, 8, 13, 9, 2, 2, 7, 6, 3, 10, 4]) == 3", "assert search([7, 5, 13, 5]) == -1", "assert search([3, 9, 7, 8, 10, 10, 7]) == -1", "assert search([10, 9, 13, 3, 6, 3, 7, 4, 3, 4, 8]) == 3", "assert search([2, 1, 6, 1, 9, 12, 7, 11, 4, 9, 5, 2, 3, 7, 10, 9, 5, 3, 2, 1, 3, 14, 9]) == 3", "assert search([6, 7, 14, 5, 6, 7, 4, 5, 6, 2, 3, 10, 4, 3, 10, 1, 3, 2, 9, 5, 3, 1, 7]) == 3", "assert search([7, 8, 5, 7, 8, 10, 7]) == -1", "assert search([6, 3]) == -1", "assert search([10, 9, 6, 10, 2, 7, 5, 10, 3, 2, 5, 13, 9, 5, 7, 5, 4, 5, 15, 2, 5, 1, 8]) == 5", "assert search([8, 13, 3, 6, 10, 3, 13, 3]) == 3", "assert search([4, 4, 7, 7, 7, 10, 14, 5, 6, 13, 14, 4, 7, 7, 2, 1, 3, 1]) == 1", "assert search([3, 13, 10, 12, 2, 4, 6, 1, 4, 6, 14, 5, 9, 5, 4, 5, 7, 1, 6, 4, 2, 7, 10, 4, 11]) == 4", "assert search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1", "assert search([7, 3, 3, 3, 7]) == 3", "assert search([6, 8, 1, 6, 12, 13, 10, 6, 2, 6, 6]) == 1", "assert search([6, 8, 9, 3, 1]) == 1", "assert search([6, 4, 5, 6, 4, 2, 13, 5, 6, 1, 7]) == 1", "assert search([3, 3, 3, 7, 3]) == 3", "assert search([12]) == -1", "assert search([3, 8, 9, 6, 5, 4, 14, 5, 7, 12, 10, 1]) == 1", "assert search([5, 13, 5, 1, 6]) == 1", "assert search([12, 7, 6, 9, 6, 5, 9, 6]) == -1", "assert search([9, 8, 1, 5, 9, 3, 8]) == 1", "assert search([12, 11, 4, 12, 7, 1, 4, 5, 14, 6, 4, 4, 4, 12, 8, 1, 7, 10, 4, 9, 11, 1]) == 4", "assert search([13, 6, 11, 9, 9, 7, 10, 11, 2, 7, 5, 9, 8, 2, 11, 2, 2, 1, 14, 6, 5, 4, 9]) == 2", "assert search([8, 8, 3, 6, 5, 6, 4]) == -1", "assert search([4, 6, 5, 2, 13, 8, 1, 5, 9, 7, 5, 5, 4, 2, 6, 12, 1, 5, 5, 7, 6, 14, 7]) == 5", "assert search([2, 10, 9, 12, 6, 8, 11, 3, 7, 13, 8, 8, 6, 11, 8, 1, 13, 1, 6, 4, 7, 12, 1, 8, 5]) == 1", "assert search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1", "assert search([10]) == -1", "assert search([7, 10, 3, 12, 8, 2, 6, 1, 13, 1, 6, 10, 15, 2, 6, 5, 8, 2, 6, 8, 12]) == 2", "assert search([6, 8, 8, 1, 7]) == 1", "assert search([8, 2, 1, 7, 3, 4, 8, 4, 8, 8, 6, 14, 6, 8, 3, 2, 9, 10, 2, 9, 11]) == 2", "assert search([1, 2]) == 1", "assert search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1", "assert search([11, 2, 9, 6, 2, 8, 7, 15, 12, 11, 10, 7, 4]) == 2", "assert search([13, 5, 9, 13, 4, 8, 10, 4, 9, 6, 10, 4, 13, 5, 5, 6, 7, 6]) == -1", "assert search([8]) == -1", "assert search([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests", "assert search([6, 5, 8, 6, 3, 13, 3, 1, 1, 11, 8, 5, 6, 8, 5, 6, 7, 6]) == 1", "assert search([1, 8, 6, 5, 7, 14, 8, 12, 6, 3, 12, 8]) == 1", "assert search([4, 15, 3, 12, 3, 8, 5, 5, 6, 6, 2, 6, 9, 5, 3, 8, 5, 9]) == 3", "assert search([6, 3, 9, 9, 5]) == -1", "assert search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2", "assert search([7, 4, 1, 4, 1]) == 1", "assert search([4, 5, 10, 1, 2]) == 1", "assert search([6, 4, 6, 6, 1, 4, 2, 4, 5, 9, 10, 9, 9, 13, 12, 6, 6, 8, 13, 2, 6, 10, 6, 10, 4]) == 6", "assert search([3]) == -1", "assert search([6, 6, 6, 7, 3]) == -1", "assert search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4", "assert search([8, 3]) == -1", "assert search([7, 1, 8, 5, 1, 1, 7, 6, 5, 6, 8]) == 1", "assert search([8, 3, 15, 4, 3, 3, 5, 7, 10, 3, 5]) == 3", "assert search([5, 10, 4, 9, 13, 7, 2, 3, 12, 10, 5, 6, 4, 6, 12, 7, 4, 11, 2, 9, 10, 2, 3, 12]) == 2", "assert search([4, 1, 8, 5, 9, 9]) == 1", "assert search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2", "assert search([9, 4, 5, 1, 3, 3, 2]) == 1", "assert search([13, 10, 5, 5, 1, 3, 14, 5, 9, 5, 13, 5, 11, 5, 3, 1, 3, 4]) == 5", "assert search([11, 6, 12, 12, 4, 3, 4, 4, 8, 2, 1, 1, 2, 13, 11, 6, 5, 11, 7, 11, 10, 11]) == 2", "assert search([10, 7, 9, 4, 7, 8, 10, 12, 4, 9, 4, 7, 5, 4, 11, 8, 6, 4, 14, 5, 1, 1, 2]) == 4", "assert search([8, 5, 4, 4, 10, 5, 8, 8]) == -1", "assert search([3, 11, 2, 3, 4, 12, 5, 5, 7, 10, 7, 3, 3, 7, 7, 7, 5, 12]) == 3", "assert search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1", "assert search([11]) == -1", "assert search([6]) == -1", "assert search([8, 8, 8, 8, 8, 8, 8, 8]) == 8", "assert search([8, 7, 9, 9, 3, 4, 9, 5, 9, 10, 11, 10, 7, 11, 6, 7, 13, 5, 11, 5, 3, 8, 10, 7, 9]) == -1", "assert search([6, 8, 9, 6, 13, 10, 4, 8, 8, 5, 8, 5, 3, 8, 6, 10, 4, 2, 6, 2, 2, 10, 8]) == 2", "assert search([4, 3, 9, 6]) == -1", "assert search([14, 1, 5, 6, 7, 3, 1, 1, 3, 7, 7, 2, 3, 6, 3, 6, 8, 1, 7, 4, 4, 12, 11, 3, 7, 4, 4, 8, 13, 5]) == 4", "assert search([13, 10, 7, 5, 4, 10, 3, 13, 12, 9, 5, 9, 4]) == -1", "assert search([3, 6, 8, 6]) == -1", "assert search([8, 3, 7, 7]) == -1"], "nl": "\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    ", "func": "def search(lst):", "examples": "Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    ", "repair_prompt": ["def search(lst):\t\n'''You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero and has a frequency greater than or equal to the value of the integer itself, where the frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''"], "completions": ["from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n    \"\"\"Search for the greatest integer in the list that meets the frequency criteria.\n\n    Args:\n        lst (List[int]): A list of positive integers.\n\n    Returns:\n        int: The greatest integer that appears in the list as many times as its value,\n             or -1 if no such integer exists.\n    \"\"\"\n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the result as -1, which will be returned if no integer meets the criteria\n    result = -1\n    \n    # Iterate over the frequency dictionary\n    for number, count in frequency.items():\n        # Check if the integer appears as many times as its value\n        if number == count:\n            # Update the result to the greatest integer meeting the criteria\n            result = max(result, number)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n    \"\"\"\n    Given a non-empty list of positive integers, return the greatest integer that is greater than zero\n    and has a frequency greater than or equal to the value of the integer itself. If no such value exists, return -1.\n    \n    Parameters:\n    lst (List[int]): A list of positive integers.\n    \n    Returns:\n    int: The greatest integer satisfying the condition or -1 if no such integer exists.\n    \"\"\"\n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the result as -1, which will be returned if no integer satisfies the condition\n    result = -1\n    \n    # Iterate over the frequency dictionary\n    for number, count in frequency.items():\n        # Check if the integer satisfies the condition\n        if count >= number:\n            # Update the result to the greatest integer satisfying the condition\n            result = max(result, number)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero\n    and has a frequency greater than or equal to the value of the integer itself, where the frequency of an integer\n    is the number of times it appears in the list. If no such a value exists, return -1.\n\n    Parameters:\n    lst (List[int]): A list of positive integers.\n\n    Returns:\n    int: The greatest integer meeting the frequency condition or -1 if no such integer exists.\n    \"\"\"\n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the result as -1, which will be returned if no integer meets the condition\n    result = -1\n    \n    # Iterate over the counted elements\n    for number, count in frequency.items():\n        # Check if the integer meets the condition\n        if count >= number:\n            # Update the result if the current number is greater than the current result\n            result = max(result, number)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    \"\"\"\n    Finds the greatest integer in the list that has a frequency greater than or equal to its value.\n\n    Args:\n        lst: A list of positive integers.\n\n    Returns:\n        The greatest integer that is greater than zero and has a frequency greater than or equal to the value of the integer itself.\n        If no such integer exists, returns -1.\n    \"\"\"\n    # Count the frequency of each integer in the list\n    frequency_counter = Counter(lst)\n    \n    # Initialize the variable to store the greatest qualifying integer\n    greatest_integer = -1\n    \n    # Iterate over the frequency counter to find the greatest integer meeting the criteria\n    for integer, frequency in frequency_counter.items():\n        if frequency >= integer:\n            greatest_integer = max(greatest_integer, integer)\n    \n    return greatest_integer\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    \"\"\"\n    Finds the greatest integer in the list that has a frequency greater than or equal to its value.\n\n    Args:\n        lst (List[int]): A non-empty list of positive integers.\n\n    Returns:\n        int: The greatest integer that is greater than zero and has a frequency greater than or equal to the value of the integer itself. If no such value exists, return -1.\n    \"\"\"\n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the result as -1, which will be returned if no integer meets the condition\n    result = -1\n    \n    # Iterate over the frequency dictionary\n    for number, count in frequency.items():\n        # Check if the frequency of the number is greater than or equal to the number itself\n        if count >= number:\n            # Update the result to the greatest integer that meets the condition\n            result = max(result, number)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n    \"\"\"\n    Given a non-empty list of positive integers, return the greatest integer that is greater than zero\n    and has a frequency greater than or equal to the value of the integer itself. If no such value exists, return -1.\n\n    Parameters:\n    lst (List[int]): A list of positive integers.\n\n    Returns:\n    int: The greatest integer meeting the criteria or -1 if none exist.\n    \"\"\"\n    # Calculate the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the variable to store the greatest integer meeting the criteria\n    greatest_integer = -1\n    \n    # Iterate over the frequency dictionary\n    for number, count in frequency.items():\n        # Check if the integer meets the criteria\n        if count >= number:\n            # Update the greatest integer if the current number is greater\n            greatest_integer = max(greatest_integer, number)\n    \n    return greatest_integer\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n    \"\"\"\n    Given a non-empty list of positive integers, return the greatest integer that is greater than zero\n    and has a frequency greater than or equal to the value of the integer itself. If no such value exists, return -1.\n    \n    Parameters:\n    lst (List[int]): A list of positive integers.\n    \n    Returns:\n    int: The greatest integer meeting the frequency condition or -1 if no such integer exists.\n    \"\"\"\n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the result as -1, which will be returned if no integer meets the condition\n    result = -1\n    \n    # Iterate over the frequency dictionary\n    for number, count in frequency.items():\n        # Check if the frequency of the number is greater than or equal to the number itself\n        if count >= number:\n            # Update the result to the maximum number that meets the condition\n            result = max(result, number)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of positive integers, return the greatest integer\n    that is greater than zero and has a frequency greater than or equal to the\n    value of the integer itself. If no such value exists, return -1.\n\n    Args:\n        lst (List[int]): A list of positive integers.\n\n    Returns:\n        int: The greatest integer meeting the condition or -1 if none exist.\n    \"\"\"\n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the variable to store the greatest integer meeting the condition\n    greatest_integer = -1\n    \n    # Iterate over each unique integer in the frequency dictionary\n    for integer, count in frequency.items():\n        # Check if the frequency of the integer is greater than or equal to the integer itself\n        if count >= integer:\n            # Update the greatest integer if the current integer is greater\n            greatest_integer = max(greatest_integer, integer)\n    \n    return greatest_integer\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of positive integers, return the greatest integer\n    that is greater than zero and has a frequency greater than or equal to the\n    value of the integer itself. If no such value exists, return -1.\n\n    Args:\n        lst (List[int]): A list of positive integers.\n\n    Returns:\n        int: The greatest integer meeting the condition or -1 if none exist.\n    \"\"\"\n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the variable to store the greatest integer meeting the condition\n    greatest_integer = -1\n    \n    # Iterate over each unique integer in the frequency dictionary\n    for integer, count in frequency.items():\n        # Check if the frequency is greater than or equal to the integer itself\n        if count >= integer:\n            # Update the greatest integer if the current integer is greater\n            greatest_integer = max(greatest_integer, integer)\n    \n    return greatest_integer\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    \"\"\"\n    Calculate the frequency of each integer in the list and return the greatest integer\n    that is greater than zero and has a frequency greater than or equal to the value of\n    the integer itself. If no such value exists, return -1.\n\n    Args:\n        lst: A non-empty list of positive integers.\n\n    Returns:\n        The greatest integer that satisfies the condition or -1 if none do.\n    \"\"\"\n    # Calculate the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the result as -1, which will be returned if no integer satisfies the condition\n    result = -1\n    \n    # Iterate over the unique integers in the list\n    for number in frequency:\n        # Check if the frequency of the number is greater than or equal to the number itself\n        if frequency[number] >= number:\n            # Update the result to the maximum number that satisfies the condition\n            result = max(result, number)\n    \n    return result\n"], "plans": ["requirement analysis:\nThe function needs to efficiently find the greatest integer in a list that meets specific frequency criteria. It should handle large lists and edge cases, such as lists with all identical elements or lists with no qualifying integers.\nrequirement pool:\n- Implement the main search function to meet the specified criteria.\n- Optimize the function for performance with large input sizes.\n- Document the function clearly for ease of understanding.\n- Include test cases for edge scenarios.\n- Ensure compatibility with different Python versions.\nWe will implement the search function using Python's collections module to efficiently count the frequency of each integer in the list. The function will iterate over the frequency dictionary to find the greatest integer that meets the specified criteria. This approach ensures the function is both efficient and easy to understand.\n", "requirement analysis:\nThe function should efficiently find the greatest integer in a list that meets the specified frequency condition. It must handle various list sizes and edge cases, such as lists with all identical elements or lists with no qualifying integers.\nrequirement pool:\n- Implement the main search function\n- Optimize the function for large lists\n- Add comprehensive documentation\n- Include unit tests for edge cases\n- Ensure compatibility with Python 3.x\nWe will implement a function that efficiently finds the greatest integer in a list that meets the specified frequency condition. We will use the collections.Counter from Python's standard library to count the frequency of each integer in the list. This approach is efficient and handles large lists well. The function will iterate over the counted frequencies to determine the greatest integer that satisfies the condition. Comprehensive documentation and edge case handling will be included to ensure robustness.\n", "requirement analysis:\nThe function should efficiently find the greatest integer in a list that meets the specified frequency condition. It should handle various list sizes and edge cases, such as lists with all identical elements or lists with no qualifying integers.\nrequirement pool:\n- Implement the main search function\n- Optimize for performance with large lists\n- Include comprehensive documentation\n- Handle edge cases gracefully\n- Write unit tests for various scenarios\nWe will implement the search function using Python's collections module to efficiently count the frequency of each integer in the list. This approach will allow us to handle large lists efficiently by leveraging the Counter class, which provides a fast way to count occurrences of elements. The function will iterate over the counted elements to find the greatest integer that meets the specified frequency condition.\n", "requirement analysis:\nThe function needs to efficiently identify the integer with a frequency greater than or equal to its value. It should handle edge cases such as lists with no qualifying integers and large datasets.\nrequirement pool:\n- Implement the search function to find the integer with required frequency\n- Optimize the function for performance with large lists\n- Ensure the function returns -1 when no integer meets the criteria\n- Provide clear documentation and examples\n- Test the function with various edge cases\nWe will implement a function that utilizes the collections.Counter from the Python standard library to efficiently count the frequency of each integer in the list. The function will then iterate over these counts to find the greatest integer that meets the criteria of having a frequency greater than or equal to its value. This approach ensures clarity and efficiency, especially for large datasets.\n", "requirement analysis:\nThe function needs to efficiently find the greatest integer in the list that meets the frequency condition. It should handle edge cases such as lists with no qualifying integers and large datasets. The output should be clear and easy to understand.\nrequirement pool:\n- Implement the main search functionality\n- Optimize for performance with large lists\n- Ensure clear and concise output\n- Handle edge cases effectively\n- Provide user guidance for input format\nWe will implement a function that utilizes Python's collections module to efficiently count the frequency of each integer in the list. The function will then iterate over these frequencies to find the greatest integer that satisfies the condition of having a frequency greater than or equal to its value. This approach ensures clarity and performance, especially for large datasets.\n", "requirement analysis:\nThe function needs to efficiently find the greatest integer in a list that meets specific frequency criteria. It should handle various list sizes and edge cases, such as lists with all identical elements or lists with no qualifying integers.\nrequirement pool:\n- Implement the main search function to meet the specified criteria.\n- Optimize the function for performance with large lists.\n- Document the function clearly for ease of understanding.\n- Add error handling for unexpected input types.\n- Create unit tests to verify function correctness.\nWe will implement a function that efficiently calculates the frequency of each integer in the list using the collections.Counter class from the Python standard library. This will allow us to quickly determine the frequency of each integer and find the greatest integer that meets the specified criteria. The function will be documented clearly to ensure ease of understanding and will include error handling for unexpected input types.\n", "requirement analysis:\nThe function should efficiently find the greatest integer in a list that meets the specified frequency condition. It must handle edge cases such as lists with all identical elements or lists with no qualifying integers.\nrequirement pool:\n- Implement the main search function\n- Optimize for large input lists\n- Include comprehensive documentation\n- Handle edge cases effectively\n- Write unit tests for various scenarios\nWe will implement a function that efficiently finds the greatest integer in a list that meets the specified frequency condition. We will use the collections.Counter from the Python standard library to count the frequency of each integer in the list. This approach is efficient and handles large datasets well. We will also include comprehensive documentation within the code to ensure clarity.\n", "requirement analysis:\nThe function needs to efficiently find the greatest integer in a list that meets the specified frequency condition. It should handle various list sizes and edge cases, such as lists with all identical elements or lists with no qualifying integers.\nrequirement pool:\n- Implement the main search function.\n- Optimize the function for large input lists.\n- Add comprehensive documentation and examples.\n- Include error handling for invalid inputs.\n- Write unit tests to cover edge cases.\nWe will implement a function that iterates through the list to count the frequency of each integer using the collections.Counter class. Then, we will check each integer to see if its frequency is greater than or equal to the integer itself, keeping track of the greatest such integer. This approach ensures efficiency and clarity.\n", "requirement analysis:\nThe function should efficiently find the greatest integer in a list that meets the specified frequency condition. It must handle edge cases such as lists with all identical elements or very large lists. The function should be well-documented to ensure ease of understanding and use.\nrequirement pool:\n- Implement the main search function\n- Optimize for large input lists\n- Include comprehensive documentation\n- Handle edge cases effectively\n- Write unit tests for various scenarios\nWe will implement a function that iterates through the list to count the frequency of each integer using the collections.Counter class. Then, we will check each integer to see if its frequency is greater than or equal to the integer itself, keeping track of the greatest such integer. This approach ensures efficiency and clarity, leveraging Python's built-in libraries for optimal performance.\n", "requirement analysis:\nThe function should efficiently find the greatest integer in a list that meets the specified frequency condition. It should handle various list sizes and edge cases, such as lists with all identical elements or lists with no qualifying integers.\nrequirement pool:\n- Implement the main search function\n- Optimize the function for large input sizes\n- Write comprehensive documentation\n- Handle edge cases gracefully\n- Conduct performance testing\nWe will implement a function that efficiently calculates the frequency of each integer in the list using the collections.Counter from the Python standard library. This will allow us to quickly determine the frequency of each integer and check if it meets the specified condition. The function will iterate over the unique integers and return the greatest integer that satisfies the condition. If no such integer exists, it will return -1.\n"], "scores": [0.6879, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [97, 141, 141, 141, 141, 141, 141, 141, 141, 141], "completion": "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    \"\"\"\n    Calculate the frequency of each integer in the list and return the greatest integer\n    that is greater than zero and has a frequency greater than or equal to the value of\n    the integer itself. If no such value exists, return -1.\n\n    Args:\n        lst: A non-empty list of positive integers.\n\n    Returns:\n        The greatest integer that satisfies the condition or -1 if none do.\n    \"\"\"\n    # Calculate the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the result as -1, which will be returned if no integer satisfies the condition\n    result = -1\n    \n    # Iterate over the unique integers in the list\n    for number in frequency:\n        # Check if the frequency of the number is greater than or equal to the number itself\n        if frequency[number] >= number:\n            # Update the result to the maximum number that satisfies the condition\n            result = max(result, number)\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 9, "round": 755, "mutate_method": "condense_two2one", "parent_index": 60}
