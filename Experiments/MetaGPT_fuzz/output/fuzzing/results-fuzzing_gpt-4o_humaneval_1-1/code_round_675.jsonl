{"task_id": "HumanEval/126", "prompt": "def is_sorted(lst):\t\n'''Given a list of numbers, indicate if they are arranged in increasing order. If the list contains more than one duplicate of the same number, return False. Assume no negative numbers and only integers.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "entry_point": "is_sorted", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": ["def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5, 6, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 4, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 7, 4, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 2, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 5, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 4, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8, 1, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 5, 6, 5, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 5, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 4, 6, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([4, 5, 8, 4, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 5, 2, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 1, 3, 6, 3, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 2, 5, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 7, 7, 6, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 2, 5, 8, 11]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 2, 9, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 5, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 1, 2, 3, 3, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 3, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 2, 2, 2, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 7, 4, 2, 2, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 4, 8, 1, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 2, 3, 5, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 4, 4, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 3, 3, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 6, 9, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 3, 3, 3, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 3, 4, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 2, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 3, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 7, 3, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 8, 4, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 3, 3, 5, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 8, 4, 7, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 4, 5, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 6, 1, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5]) == True", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 6, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 2, 2, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 6, 3, 9, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 7, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 7, 3, 4, 8, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 8, 6, 7, 8]) == False"], "test_case_list": ["assert is_sorted([1, 1, 3, 6, 7, 8]) == True", "assert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "assert is_sorted([2, 3, 3, 5]) == True", "assert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "assert is_sorted([3, 7, 5]) == False", "assert is_sorted([1, 1, 3, 5, 6, 6]) == True", "assert is_sorted([5, 6, 3]) == False", "assert is_sorted([3, 4, 4, 4, 4, 7]) == False", "assert is_sorted([1, 5, 7, 4, 4, 2]) == False", "assert is_sorted([2, 2, 6, 8]) == True", "assert is_sorted([3, 4, 6, 7, 7]) == True", "assert is_sorted([3, 3, 5, 7, 1, 5]) == False", "assert is_sorted([2, 4, 8, 9]) == True", "assert is_sorted([6, 4, 4]) == False", "assert is_sorted([8, 1, 2]) == False", "assert is_sorted([1, 3, 4, 5]) == True", "assert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "assert is_sorted([3, 2, 1]) == False", "assert is_sorted([1, 1, 3, 5]) == True", "assert is_sorted([4, 3, 5, 6, 5, 3]) == False", "assert is_sorted([1, 3, 5, 5, 7]) == True", "assert is_sorted([5, 4, 6, 7, 1, 5]) == False", "assert is_sorted([4, 5, 8, 4, 2, 7]) == False", "assert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "assert is_sorted([5, 5, 2, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([6, 1, 3, 6, 3, 7]) == False", "assert is_sorted([1, 1, 1, 2, 5, 8]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "assert is_sorted([3, 7, 7, 6, 6, 7]) == False", "assert is_sorted([10]) == True", "assert is_sorted([3, 3, 4, 6, 7, 8]) == True", "assert is_sorted([2, 2, 2, 5, 8, 11]) == False", "assert is_sorted([1, 2, 3, 3, 7, 9]) == True", "assert is_sorted([2, 4, 2, 9, 10]) == False", "assert is_sorted([3, 4, 6, 7]) == True", "assert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "assert is_sorted([1, 2, 3, 5, 5, 8]) == True", "assert is_sorted([6, 1, 2, 3, 3, 3]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "assert is_sorted([1, 3, 3, 4, 5]) == True", "assert is_sorted([1, 4, 4, 4, 5]) == False", "assert is_sorted([3, 2, 2, 2, 3]) == False", "assert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([4]) == True", "assert is_sorted([5, 7, 4, 2, 2, 4]) == False", "assert is_sorted([6]) == True", "assert is_sorted([3, 7, 4, 8, 1, 4]) == False", "assert is_sorted([1, 6, 3]) == False", "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "assert is_sorted([6, 2, 3, 5, 2, 7]) == False", "assert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "assert is_sorted([1, 5, 5, 6, 6, 9]) == True", "assert is_sorted([2, 3, 4, 4, 8, 10]) == True", "assert is_sorted([1, 5, 5, 6, 9]) == True", "assert is_sorted([1, 2, 3, 4]) == True", "assert is_sorted([2, 4, 5]) == True", "assert is_sorted([7]) == True", "assert is_sorted([2, 2, 3, 3, 6, 7]) == True", "assert is_sorted([3, 3, 6, 9, 9]) == True", "assert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "assert is_sorted([5, 3, 3, 3, 10]) == False", "assert is_sorted([1, 5, 3, 4, 3]) == False", "assert is_sorted([2, 4, 4]) == True", "assert is_sorted([1, 1, 2, 4, 5, 5]) == True", "assert is_sorted([2, 5, 4]) == False", "assert is_sorted([1, 2, 2, 3, 3, 4]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "assert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "assert is_sorted([1, 2, 3, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 7, 8]) == True", "assert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "assert is_sorted([1, 2, 3, 4, 5, 6]) == True", "assert is_sorted([1, 1, 1, 7, 3, 8]) == False", "assert is_sorted([3, 8, 4, 4, 10]) == False", "assert is_sorted([]) == True", "assert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "assert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "assert is_sorted([2, 5, 6, 8]) == True", "assert is_sorted([4, 5, 7, 8]) == True", "assert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "assert is_sorted([3]) == True", "assert is_sorted([3, 3, 3, 3, 5, 6]) == False", "assert is_sorted([3, 6, 3]) == False", "assert is_sorted([1, 3, 4, 4, 5, 5]) == True", "assert is_sorted([3, 1, 8, 4, 7, 4]) == False", "assert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "assert is_sorted([1, 4, 5, 5, 7, 8]) == True", "assert is_sorted([1, 4, 6, 1, 6, 7]) == False", "assert is_sorted([2, 3, 6, 7, 7]) == True", "assert is_sorted([5]) == True", "assert is_sorted([]) == True", "assert is_sorted([3, 2, 6, 3, 6, 4]) == False", "assert is_sorted([2, 5, 2, 2, 2, 7]) == False", "assert is_sorted([2, 6, 3, 9, 1]) == False", "assert is_sorted([1, 1, 1, 3, 4]) == False", "assert is_sorted([8]) == True", "assert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "assert is_sorted([2, 4, 5, 7]) == True", "assert is_sorted([3, 1, 3, 2, 1]) == False", "assert is_sorted([3, 3, 4, 7, 8, 9]) == True", "assert is_sorted([1, 5, 6, 6, 7, 7]) == True", "assert is_sorted([6, 7, 3, 4, 8, 6]) == False", "assert is_sorted([1, 8, 6, 7, 8]) == False"], "nl": "\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    ", "func": "def is_sorted(lst):", "examples": "Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    ", "repair_prompt": ["def is_sorted(lst):\t\n'''Given a list of numbers, indicate if they are arranged in increasing order. If the list contains more than one duplicate of the same number, return False. Assume no negative numbers and only integers.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in increasing order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of non-negative integers.\n\n    Returns:\n        bool: True if the list is sorted in increasing order and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted\n        return True\n\n    previous_value = None\n    count = 0\n\n    for i in range(len(lst)):\n        if i > 0 and lst[i] < lst[i - 1]:\n            # If the current element is less than the previous one, the list is not sorted\n            return False\n\n        if lst[i] == previous_value:\n            count += 1\n            if count > 2:\n                # If any number appears more than twice, return False\n                return False\n        else:\n            previous_value = lst[i]\n            count = 1\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list is sorted in increasing order and no number appears more than twice.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst or len(lst) == 1:\n        # An empty list or a list with a single element is trivially sorted\n        return True\n\n    # Iterate through the list to check if it is sorted and count occurrences\n    previous = lst[0]\n    count = 1\n\n    for i in range(1, len(lst)):\n        current = lst[i]\n        if current < previous:\n            # If the current element is less than the previous, the list is not sorted\n            return False\n        if current == previous:\n            count += 1\n            if count > 2:\n                # If any number appears more than twice, return False\n                return False\n        else:\n            # Reset count for a new number\n            count = 1\n        previous = current\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list is sorted in increasing order and contains no number more than twice.\n\n    Parameters:\n    lst (list[int]): A list of integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        return True\n\n    # Check if the list is sorted in increasing order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Count occurrences of each number\n    number_count = {}\n    for number in lst:\n        if number in number_count:\n            number_count[number] += 1\n        else:\n            number_count[number] = 1\n\n        # If any number appears more than twice, return False\n        if number_count[number] > 2:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in increasing order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of non-negative integers.\n\n    Returns:\n        bool: True if the list is sorted in increasing order and no number appears more than twice, otherwise False.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted and meets the criteria\n        return True\n\n    # Initialize a dictionary to track occurrences of each number\n    occurrences = {}\n\n    # Iterate through the list to check sorting and count occurrences\n    for i in range(len(lst)):\n        if i > 0 and lst[i] < lst[i - 1]:\n            # If the current element is less than the previous one, the list is not sorted\n            return False\n\n        # Count occurrences of the current element\n        if lst[i] in occurrences:\n            occurrences[lst[i]] += 1\n        else:\n            occurrences[lst[i]] = 1\n\n        # If any number appears more than twice, return False\n        if occurrences[lst[i]] > 2:\n            return False\n\n    # If all checks pass, the list is sorted and meets the criteria\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in increasing order and no number appears more than twice consecutively.\n\n    Parameters:\n    lst (list[int]): A list of integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than twice consecutively, False otherwise.\n    \"\"\"\n    if not lst:\n        return True  # An empty list is considered sorted\n\n    previous = lst[0]\n    count = 1\n\n    for i in range(1, len(lst)):\n        current = lst[i]\n\n        # Check if the current element is less than the previous one\n        if current < previous:\n            return False\n\n        # Check for consecutive duplicates\n        if current == previous:\n            count += 1\n            if count > 2:\n                return False\n        else:\n            count = 1\n\n        previous = current\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in increasing order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of integers.\n\n    Returns:\n        bool: True if the list is sorted in increasing order and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        return True  # An empty list is considered sorted\n\n    previous = lst[0]\n    count = 1\n\n    for i in range(1, len(lst)):\n        current = lst[i]\n        \n        if current < previous:\n            return False  # List is not sorted in increasing order\n        \n        if current == previous:\n            count += 1\n            if count > 2:\n                return False  # A number appears more than twice\n        else:\n            count = 1  # Reset count for a new number\n        \n        previous = current\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list is sorted in increasing order and contains no more than one duplicate of the same number consecutively.\n\n    Args:\n        lst (list[int]): A list of positive integers.\n\n    Returns:\n        bool: True if the list is sorted in increasing order and contains no more than one duplicate of the same number consecutively. Otherwise, False.\n    \"\"\"\n    if not lst:\n        # An empty list is trivially sorted\n        return True\n\n    previous_value = lst[0]\n    duplicate_count = 0\n\n    for i in range(1, len(lst)):\n        current_value = lst[i]\n        if current_value < previous_value:\n            # If the current value is less than the previous, the list is not sorted\n            return False\n        if current_value == previous_value:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                # More than one duplicate consecutively\n                return False\n        else:\n            # Reset duplicate count when a new number is encountered\n            duplicate_count = 0\n\n        previous_value = current_value\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list is sorted in increasing order and contains no more than one duplicate of any number.\n\n    Parameters:\n    lst (list[int]): A list of positive integers.\n\n    Returns:\n    bool: True if the list is sorted and contains no more than one duplicate of any number, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted by default\n        return True\n\n    previous_value = lst[0]\n    duplicate_count = 0\n\n    for i in range(1, len(lst)):\n        current_value = lst[i]\n        if current_value < previous_value:\n            # If the current value is less than the previous, the list is not sorted\n            return False\n        if current_value == previous_value:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                # More than one duplicate found\n                return False\n        else:\n            # Reset duplicate count when a new number is encountered\n            duplicate_count = 0\n\n        previous_value = current_value\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in increasing order and no number appears more than once consecutively.\n\n    Parameters:\n    lst (list[int]): A list of positive integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than once consecutively, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or list with a single element\n    if len(lst) <= 1:\n        return True\n\n    # Iterate through the list to check sorting and consecutive duplicates\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1] or lst[i] == lst[i - 1]:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in increasing order and contains no number more than twice.\n\n    Args:\n        lst (list[int]): A list of integers to be checked.\n\n    Returns:\n        bool: True if the list is sorted in increasing order and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted and valid\n        return True\n\n    # Initialize a counter for duplicate occurrences\n    current_count = 1\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous, the list is not sorted\n            return False\n        elif lst[i] == lst[i - 1]:\n            # If the current element is equal to the previous, increment the duplicate counter\n            current_count += 1\n            if current_count > 2:\n                # If any number appears more than twice, return False\n                return False\n        else:\n            # Reset the duplicate counter if the current element is different\n            current_count = 1\n\n    return True\n"], "plans": ["requirement analysis:\nThe function must check if a list is sorted in increasing order and ensure no number appears more than twice. It should handle only non-negative integers and return False if these conditions are not met.\nrequirement pool:\n- Implement the main function to check if a list is sorted.\n- Ensure the function returns False for lists with more than one duplicate of the same number.\n- Optimize the function for performance with large lists.\n- Provide clear error messages for invalid inputs.\n- Include comprehensive test cases to validate functionality.\nWe will implement a function that iterates through the list to check if it is sorted in increasing order and ensure no number appears more than twice. We will use Python's built-in capabilities for iteration and comparison to achieve this efficiently. The function will also handle edge cases like empty lists or lists with a single element.\n", "requirement analysis:\nThe function needs to check if a list is sorted in increasing order and ensure that no number appears more than twice. It should handle only non-negative integers and be efficient for large lists.\nrequirement pool:\n- The function must return True for a sorted list with no more than two duplicates.\n- The function must return False if any number appears more than twice.\n- The function should handle large lists efficiently.\n- The function should be easy to integrate into existing codebases.\n- The function should provide clear error messages for invalid inputs.\nWe will implement a function that iterates through the list to check if it is sorted in increasing order and ensure that no number appears more than twice. We will use Python's built-in capabilities for iteration and comparison to achieve this efficiently. The function will handle edge cases such as empty lists and lists with a single element by returning True, as they are trivially sorted.\n", "requirement analysis:\nThe function must check if a list is sorted in increasing order and handle duplicates by returning False if more than one duplicate exists. It should be efficient and handle edge cases like single-element lists.\nrequirement pool:\n- Implement the main sorting check logic\n- Handle duplicate numbers correctly\n- Optimize for performance with large lists\n- Ensure compatibility with Python's list data type\n- Provide clear error messages for invalid input\nWe will implement a function that iterates through the list to check if it is sorted in increasing order. Additionally, we will use a dictionary to count occurrences of each number to ensure no number appears more than twice. This approach will efficiently handle the requirements without needing external libraries.\n", "requirement analysis:\nThe function must check if a list is sorted in increasing order and handle duplicates by returning False if more than one duplicate exists. It should assume all numbers are non-negative integers.\nrequirement pool:\n- Implement the main function to check if a list is sorted.\n- Ensure the function handles duplicates correctly.\n- Optimize the function for performance with large lists.\n- Add comprehensive test cases to cover edge scenarios.\n- Document the function usage and edge cases.\nWe will implement a function that iterates through the list to check if it is sorted in increasing order. We will also track occurrences of each number to ensure no number appears more than twice. This approach avoids unnecessary dependencies and leverages Python's native capabilities for optimal performance.\n", "requirement analysis:\nThe function must check if a list is sorted in increasing order and ensure no number appears more than twice consecutively. It should handle lists of varying lengths, including edge cases like single-element lists, and return results efficiently.\nrequirement pool:\n- Implement the main sorting check logic\n- Ensure duplicate handling logic is correct\n- Optimize for performance with large lists\n- Include comprehensive test cases\n- Document the function with examples\nWe will implement a function that checks if a list of integers is sorted in increasing order and ensures no number appears more than twice consecutively. We will use Python's built-in capabilities to efficiently iterate through the list and check the conditions. The function will handle edge cases like single-element lists and will be optimized for performance with large lists.\n", "requirement analysis:\nThe function must check if a list is sorted in increasing order and handle duplicates by returning False if more than one duplicate exists. It should be efficient and handle edge cases like single-element lists.\nrequirement pool:\n- Implement the main sorting check logic\n- Add duplicate number handling\n- Optimize for performance with large lists\n- Test edge cases like single-element lists\n- Document the function with examples\nWe will implement a function that iterates through the list to check if each element is greater than or equal to the previous one, ensuring the list is sorted in increasing order. Additionally, we will track occurrences of each number to ensure no number appears more than twice. The function will be efficient for large lists by using a single pass approach.\n", "requirement analysis:\nThe function must accurately determine if a list is sorted in increasing order and reject lists with more than one duplicate of the same number. It should handle only positive integers and be optimized for performance.\nrequirement pool:\n- Implement sorting check functionality\n- Ensure duplicate validation\n- Optimize for large list performance\n- Provide clear error messages for invalid lists\n- Include unit tests for various scenarios\nWe will implement a function that iterates through the list to check if it is sorted in increasing order and also checks for duplicates. The function will return False if any number appears more than once consecutively. This approach ensures that the function is efficient and meets the requirement of not allowing more than one duplicate of the same number.\n", "requirement analysis:\nThe function must accurately determine if a list is sorted in increasing order and ensure no more than one duplicate of the same number exists. It should handle only positive integers and be optimized for performance with large lists.\nrequirement pool:\n- Implement sorting check functionality\n- Implement duplicate detection\n- Optimize for large list performance\n- Ensure compatibility with Python 3.x\n- Provide clear error messages for invalid input\nWe will implement a function that iterates through the list to check if it is sorted in increasing order and also checks for duplicates. The function will ensure that no number appears more than twice. We will use Python's built-in capabilities to achieve this efficiently without relying on external libraries, as the task is straightforward and does not require complex data structures.\n", "requirement analysis:\nThe function should accurately determine if a list is sorted in increasing order and ensure that no number appears more than once consecutively. It should handle only positive integers and be optimized for performance with large lists.\nrequirement pool:\n- Implement sorting check functionality\n- Ensure no more than one duplicate of the same number\n- Optimize for large list performance\n- Handle edge cases like empty lists\n- Provide clear error messages for invalid inputs\nWe will implement a function that iterates through the list to check if it is sorted in increasing order and ensure that no number appears more than once consecutively. This approach will efficiently handle large lists by using a single pass through the list, which is O(n) in complexity. We will not use any external libraries as the task can be accomplished with basic Python constructs.\n", "requirement analysis:\nThe function must check if a list is sorted in increasing order and ensure no number appears more than twice. It should handle edge cases like single-element lists and return False for lists with more than two duplicates of the same number.\nrequirement pool:\n- Implement the main function to check if a list is sorted.\n- Ensure the function handles duplicates correctly.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases for edge scenarios.\n- Document the function usage and edge cases.\nWe will implement a function that iterates through the list to check if it is sorted in increasing order and ensure no number appears more than twice. The function will handle edge cases such as single-element lists and will be optimized for performance by using a single pass through the list.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7, 1.0], "pass_results": [true, true, true, true, true, true, true, true, false, true], "pass_test_cases_num": [110, 110, 110, 110, 110, 110, 110, 110, 77, 110], "completion": "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in increasing order and contains no number more than twice.\n\n    Args:\n        lst (list[int]): A list of integers to be checked.\n\n    Returns:\n        bool: True if the list is sorted in increasing order and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted and valid\n        return True\n\n    # Initialize a counter for duplicate occurrences\n    current_count = 1\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous, the list is not sorted\n            return False\n        elif lst[i] == lst[i - 1]:\n            # If the current element is equal to the previous, increment the duplicate counter\n            current_count += 1\n            if current_count > 2:\n                # If any number appears more than twice, return False\n                return False\n        else:\n            # Reset the duplicate counter if the current element is different\n            current_count = 1\n\n    return True\n", "passed": true, "pass": true, "pass_num": 9, "round": 675, "mutate_method": "rephrase_one", "parent_index": 197}
