{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l. Make sure to handle both even and odd lengths of lists appropriately.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "entry_point": "median", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "test": ["def check(median):\n\tassert median([-6, 3, 8, 1002, 14, 16]) == 11.0", "def check(median):\n\tassert median([2, 10]) == 6.0", "def check(median):\n\tassert median([12, 3, 5, 11, 7, 4, 5]) == 5", "def check(median):\n\tassert median([-15, 4, 5, 1001, 15, 23]) == 10.0", "def check(median):\n\tassert median([-15, 3, 4, 1000, 13, 23]) == 8.5", "def check(median):\n\tassert median([-5, 9, 2, 996, 15, 22]) == 12.0", "def check(median):\n\tassert median([6, 2, 1, 8, 1]) == 2", "def check(median):\n\tassert median([7, 7]) == 7.0", "def check(median):\n\tassert median([4, 2, 2, 12, 10, 4, 10]) == 4", "def check(median):\n\tassert median([-12, 8, 9, 997, 14, 17]) == 11.5", "def check(median):\n\tassert median([1, 1, 3, 1, 10]) == 1", "def check(median):\n\tassert median([-8, 4, 8, 997, 15, 20]) == 11.5", "def check(median):\n\tassert median([8]) == 8", "def check(median):\n\tassert median([5]) == 5", "def check(median):\n\tassert median([8, 3, 2, 9, 6, 5, 2]) == 5", "def check(median):\n\tassert median([-15, 8, 4, 997, 7, 19]) == 7.5", "def check(median):\n\tassert median([-7, 4, 10, 998, 10, 22]) == 10.0", "def check(median):\n\tassert median([10]) == 10", "def check(median):\n\tassert median([5, 4]) == 4.5", "def check(median):\n\tassert median([3, 6, 6, 2, 6]) == 6", "def check(median):\n\tassert median([1, 8]) == 4.5", "def check(median):\n\tassert median([12, 1, 6, 11, 13, 6, 6]) == 6", "def check(median):\n\tassert median([8, 5, 7, 6, 3]) == 6", "def check(median):\n\tassert median([6, 2, 7, 8, 8, 5, 4]) == 6", "def check(median):\n\tassert median([7, 4]) == 5.5", "def check(median):\n\tassert median([-7, 6, 6, 996, 6, 15]) == 6.0", "def check(median):\n\tassert median([-15, 8, 1, 1004, 6, 19]) == 7.0", "def check(median):\n\tassert median([5, 5, 5, 7, 3]) == 5", "def check(median):\n\tassert median([6, 6, 2, 7, 6]) == 6", "def check(median):\n\tassert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "def check(median):\n\tassert median([4]) == 4", "def check(median):\n\tassert median([11, 2]) == 6.5", "def check(median):\n\tassert median([1, 3, 6, 4, 10]) == 4", "def check(median):\n\tassert median([-5, 9, 10, 1000, 12, 18]) == 11.0", "def check(median):\n\tassert median([10, 6, 4, 8, 4, 3, 11]) == 6", "def check(median):\n\tassert median([6, 5]) == 5.5", "def check(median):\n\tassert median([6, 6, 6, 9, 7, 4, 10]) == 6", "def check(median):\n\tassert median([6, 5, 5, 7, 10, 6, 8]) == 6", "def check(median):\n\tassert median([7, 4, 7, 1, 7]) == 7", "def check(median):\n\tassert median([-6, 9, 6, 997, 14, 25]) == 11.5", "def check(median):\n\tassert median([7, 8]) == 7.5", "def check(median):\n\tassert median([3, 1, 2, 4, 5]) == 3", "def check(median):\n\tassert median([-11, 3, 10, 1005, 10, 22]) == 10.0", "def check(median):\n\tassert median([6, 9]) == 7.5", "def check(median):\n\tassert median([11, 3, 6, 13, 6, 4, 9]) == 6", "def check(median):\n\tassert median([-10, 3, 3, 997, 15, 22]) == 9.0", "def check(median):\n\tassert median([-8, 5, 4, 1001, 14, 22]) == 9.5", "def check(median):\n\tassert median([11, 3, 1, 8, 5, 1, 8]) == 5", "def check(median):\n\tassert median([-15, 3, 2, 1002, 8, 22]) == 5.5", "def check(median):\n\tassert median([8, 5, 3, 2, 10]) == 5", "def check(median):\n\tassert median([11, 1, 3, 8, 13, 2, 7]) == 7", "def check(median):\n\tassert median([3, 6, 1, 4, 3]) == 3", "def check(median):\n\tassert median([10, 10]) == 10.0", "def check(median):\n\tassert median([1]) == 1", "def check(median):\n\tassert median([11, 6, 7, 6, 6, 1, 12]) == 6", "def check(median):\n\tassert median([1, 5, 6, 6, 3]) == 5", "def check(median):\n\tassert median([2, 6, 6, 7, 3]) == 6", "def check(median):\n\tassert median([3, 10]) == 6.5", "def check(median):\n\tassert median([-11, 5, 11, 1002, 10, 20]) == 10.5", "def check(median):\n\tassert median([6, 6, 6, 7, 10]) == 6", "def check(median):\n\tassert median([3, 5, 7, 4, 8]) == 5", "def check(median):\n\tassert median([13, 5, 6, 7, 14, 7, 9]) == 7", "def check(median):\n\tassert median([6, 4, 4, 11, 11, 2, 2]) == 4", "def check(median):\n\tassert median([12, 2, 2, 11, 11, 4, 2]) == 4", "def check(median):\n\tassert median([3, 9]) == 6.0", "def check(median):\n\tassert median([5, 6, 6, 7, 5, 2, 9]) == 6", "def check(median):\n\tassert median([4, 6]) == 5.0", "def check(median):\n\tassert median([1, 2]) == 1.5", "def check(median):\n\tassert median([3, 4, 5, 9, 7, 2, 3]) == 4", "def check(median):\n\tassert median([10, 4, 7, 11, 11, 3, 3]) == 7", "def check(median):\n\tassert median([6, 10]) == 8.0", "def check(median):\n\tassert median([-6, 6, 9, 1005, 8, 25]) == 8.5", "def check(median):\n\tassert median([8, 5, 5, 7, 10]) == 7", "def check(median):\n\tassert median([-13, 8, 6, 998, 13, 19]) == 10.5", "def check(median):\n\tassert median([7, 2, 7, 6, 6]) == 6", "def check(median):\n\tassert median([9]) == 9", "def check(median):\n\tassert median([7]) == 7", "def check(median):\n\tassert median([8, 1, 3, 9, 3]) == 3", "def check(median):\n\tassert median([8, 1, 3, 9, 9, 2, 7]) == 7", "def check(median):\n\tassert median([-9, 4, 2, 1002, 6, 23]) == 5.0", "def check(median):\n\tassert median([8, 2, 7, 6, 7]) == 7", "def check(median):\n\tassert median([1, 6, 7, 5, 4]) == 5", "def check(median):\n\tassert median([2, 2]) == 2.0", "def check(median):\n\tassert median([6]) == 6", "def check(median):\n\tassert median([-7, 7, 8, 1000, 13, 25]) == 10.5", "def check(median):\n\tassert median([-5, 1, 10, 1003, 10, 25]) == 10.0", "def check(median):\n\tassert median([9, 2]) == 5.5", "def check(median):\n\tassert median([3]) == 3", "def check(median):\n\tassert median([6, 1, 5, 7, 11, 6, 5]) == 6", "def check(median):\n\tassert median([7, 3, 6, 5, 2]) == 5", "def check(median):\n\tassert median([-11, 3, 3, 998, 15, 15]) == 9.0", "def check(median):\n\tassert median([5, 5]) == 5.0", "def check(median):\n\tassert median([9, 5, 2, 6, 13, 7, 2]) == 6", "def check(median):\n\tassert median([8, 6, 3, 5, 12, 5, 5]) == 5", "def check(median):\n\tassert median([11, 3]) == 7.0", "def check(median):\n\tassert median([3, 6, 5, 11, 5, 4, 6]) == 5", "def check(median):\n\tassert median([5, 1]) == 3.0", "def check(median):\n\tassert median([8, 8]) == 8.0", "def check(median):\n\tassert median([7, 2, 7, 1, 4]) == 4", "def check(median):\n\tassert median([9, 9]) == 9.0", "def check(median):\n\tassert median([3, 6, 2, 6, 9]) == 6", "def check(median):\n\tassert median([-11, 1, 3, 1004, 12, 17]) == 7.5", "def check(median):\n\tassert median([5, 2, 3, 9, 5, 7, 7]) == 5", "def check(median):\n\tassert median([6, 2, 4, 2, 6]) == 4", "def check(median):\n\tassert median([3, 1, 7, 4, 3]) == 3", "def check(median):\n\tassert median([5, 2, 2, 5, 6, 1, 3]) == 3", "def check(median):\n\tassert median([-15, 8, 4, 1000, 6, 16]) == 7.0", "def check(median):\n\tassert median([1, 6]) == 3.5", "def check(median):\n\tassert median([3, 2, 7, 8, 11, 5, 12]) == 7", "def check(median):\n\tassert median([8, 3, 5, 9, 10]) == 8", "def check(median):\n\tassert median([2, 9]) == 5.5"], "test_case_list": ["assert median([-6, 3, 8, 1002, 14, 16]) == 11.0", "assert median([2, 10]) == 6.0", "assert median([12, 3, 5, 11, 7, 4, 5]) == 5", "assert median([-15, 4, 5, 1001, 15, 23]) == 10.0", "assert median([-15, 3, 4, 1000, 13, 23]) == 8.5", "assert median([-5, 9, 2, 996, 15, 22]) == 12.0", "assert median([6, 2, 1, 8, 1]) == 2", "assert median([7, 7]) == 7.0", "assert median([4, 2, 2, 12, 10, 4, 10]) == 4", "assert median([-12, 8, 9, 997, 14, 17]) == 11.5", "assert median([1, 1, 3, 1, 10]) == 1", "assert median([-8, 4, 8, 997, 15, 20]) == 11.5", "assert median([8]) == 8", "assert median([5]) == 5", "assert median([8, 3, 2, 9, 6, 5, 2]) == 5", "assert median([-15, 8, 4, 997, 7, 19]) == 7.5", "assert median([-7, 4, 10, 998, 10, 22]) == 10.0", "assert median([10]) == 10", "assert median([5, 4]) == 4.5", "assert median([3, 6, 6, 2, 6]) == 6", "assert median([1, 8]) == 4.5", "assert median([12, 1, 6, 11, 13, 6, 6]) == 6", "assert median([8, 5, 7, 6, 3]) == 6", "assert median([6, 2, 7, 8, 8, 5, 4]) == 6", "assert median([7, 4]) == 5.5", "assert median([-7, 6, 6, 996, 6, 15]) == 6.0", "assert median([-15, 8, 1, 1004, 6, 19]) == 7.0", "assert median([5, 5, 5, 7, 3]) == 5", "assert median([6, 6, 2, 7, 6]) == 6", "assert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "assert median([4]) == 4", "assert median([11, 2]) == 6.5", "assert median([1, 3, 6, 4, 10]) == 4", "assert median([-5, 9, 10, 1000, 12, 18]) == 11.0", "assert median([10, 6, 4, 8, 4, 3, 11]) == 6", "assert median([6, 5]) == 5.5", "assert median([6, 6, 6, 9, 7, 4, 10]) == 6", "assert median([6, 5, 5, 7, 10, 6, 8]) == 6", "assert median([7, 4, 7, 1, 7]) == 7", "assert median([-6, 9, 6, 997, 14, 25]) == 11.5", "assert median([7, 8]) == 7.5", "assert median([3, 1, 2, 4, 5]) == 3", "assert median([-11, 3, 10, 1005, 10, 22]) == 10.0", "assert median([6, 9]) == 7.5", "assert median([11, 3, 6, 13, 6, 4, 9]) == 6", "assert median([-10, 3, 3, 997, 15, 22]) == 9.0", "assert median([-8, 5, 4, 1001, 14, 22]) == 9.5", "assert median([11, 3, 1, 8, 5, 1, 8]) == 5", "assert median([-15, 3, 2, 1002, 8, 22]) == 5.5", "assert median([8, 5, 3, 2, 10]) == 5", "assert median([11, 1, 3, 8, 13, 2, 7]) == 7", "assert median([3, 6, 1, 4, 3]) == 3", "assert median([10, 10]) == 10.0", "assert median([1]) == 1", "assert median([11, 6, 7, 6, 6, 1, 12]) == 6", "assert median([1, 5, 6, 6, 3]) == 5", "assert median([2, 6, 6, 7, 3]) == 6", "assert median([3, 10]) == 6.5", "assert median([-11, 5, 11, 1002, 10, 20]) == 10.5", "assert median([6, 6, 6, 7, 10]) == 6", "assert median([3, 5, 7, 4, 8]) == 5", "assert median([13, 5, 6, 7, 14, 7, 9]) == 7", "assert median([6, 4, 4, 11, 11, 2, 2]) == 4", "assert median([12, 2, 2, 11, 11, 4, 2]) == 4", "assert median([3, 9]) == 6.0", "assert median([5, 6, 6, 7, 5, 2, 9]) == 6", "assert median([4, 6]) == 5.0", "assert median([1, 2]) == 1.5", "assert median([3, 4, 5, 9, 7, 2, 3]) == 4", "assert median([10, 4, 7, 11, 11, 3, 3]) == 7", "assert median([6, 10]) == 8.0", "assert median([-6, 6, 9, 1005, 8, 25]) == 8.5", "assert median([8, 5, 5, 7, 10]) == 7", "assert median([-13, 8, 6, 998, 13, 19]) == 10.5", "assert median([7, 2, 7, 6, 6]) == 6", "assert median([9]) == 9", "assert median([7]) == 7", "assert median([8, 1, 3, 9, 3]) == 3", "assert median([8, 1, 3, 9, 9, 2, 7]) == 7", "assert median([-9, 4, 2, 1002, 6, 23]) == 5.0", "assert median([8, 2, 7, 6, 7]) == 7", "assert median([1, 6, 7, 5, 4]) == 5", "assert median([2, 2]) == 2.0", "assert median([6]) == 6", "assert median([-7, 7, 8, 1000, 13, 25]) == 10.5", "assert median([-5, 1, 10, 1003, 10, 25]) == 10.0", "assert median([9, 2]) == 5.5", "assert median([3]) == 3", "assert median([6, 1, 5, 7, 11, 6, 5]) == 6", "assert median([7, 3, 6, 5, 2]) == 5", "assert median([-11, 3, 3, 998, 15, 15]) == 9.0", "assert median([5, 5]) == 5.0", "assert median([9, 5, 2, 6, 13, 7, 2]) == 6", "assert median([8, 6, 3, 5, 12, 5, 5]) == 5", "assert median([11, 3]) == 7.0", "assert median([3, 6, 5, 11, 5, 4, 6]) == 5", "assert median([5, 1]) == 3.0", "assert median([8, 8]) == 8.0", "assert median([7, 2, 7, 1, 4]) == 4", "assert median([9, 9]) == 9.0", "assert median([3, 6, 2, 6, 9]) == 6", "assert median([-11, 1, 3, 1004, 12, 17]) == 7.5", "assert median([5, 2, 3, 9, 5, 7, 7]) == 5", "assert median([6, 2, 4, 2, 6]) == 4", "assert median([3, 1, 7, 4, 3]) == 3", "assert median([5, 2, 2, 5, 6, 1, 3]) == 3", "assert median([-15, 8, 4, 1000, 6, 16]) == 7.0", "assert median([1, 6]) == 3.5", "assert median([3, 2, 7, 8, 11, 5, 12]) == 7", "assert median([8, 3, 5, 9, 10]) == 8", "assert median([2, 9]) == 5.5"], "nl": "Return median of elements in the list l.\n    ", "func": "def median(l: list):", "examples": ">>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    ", "repair_prompt": ["def median(l: list):\t\n'''Return median of elements in the list l. Make sure to handle both even and odd lengths of lists appropriately.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''"], "completions": ["from typing import List\n## main.py\n\nimport statistics\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l: List of numerical values.\n\n    Returns:\n        Median value as a float.\n\n    Raises:\n        ValueError: If the list is empty.\n        TypeError: If the list contains non-numeric values.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty. Cannot compute median.\")\n\n    # Check for non-numeric values\n    if not all(isinstance(item, (int, float)) for item in l):\n        raise TypeError(\"The list contains non-numeric values.\")\n\n    # Calculate and return the median\n    return statistics.median(l)\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (list): List of numeric values.\n\n    Returns:\n        float: Median value as a float.\n\n    Raises:\n        ValueError: If the list contains non-numeric data.\n        ValueError: If the list is empty.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n\n    # Check for non-numeric data\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"The list contains non-numeric data.\")\n\n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n\n    # Calculate median\n    if n % 2 == 1:\n        # If odd, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # If even, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    This function sorts the list and calculates the median based on the length of the list.\n    It handles both even and odd length lists and returns None for empty lists.\n    \n    Args:\n        l: List of numbers (integers or floats).\n        \n    Returns:\n        Median value as a float, or None if the list is empty.\n    \"\"\"\n    if not l:\n        return None\n    \n    # Filter out non-numeric elements\n    numeric_list = [x for x in l if isinstance(x, (int, float))]\n    \n    if not numeric_list:\n        return None\n    \n    # Sort the list\n    numeric_list.sort()\n    \n    n = len(numeric_list)\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # Even length list: return the average of the two middle elements\n        return (numeric_list[mid - 1] + numeric_list[mid]) / 2.0\n    else:\n        # Odd length list: return the middle element\n        return float(numeric_list[mid])\n", "from typing import List\n## main.py\n\nimport statistics\n\ndef median(l: list) -> float:\n    '''\n    Calculate the median of a list of numbers.\n    \n    Parameters:\n    l (list): A list of numeric values.\n    \n    Returns:\n    float: The median value of the list.\n    \n    Raises:\n    ValueError: If the list is empty.\n    TypeError: If the list contains non-numeric values.\n    '''\n    if not l:\n        raise ValueError(\"The list is empty. Cannot compute median.\")\n    \n    # Check for non-numeric values\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise TypeError(\"The list contains non-numeric values.\")\n    \n    # Calculate and return the median\n    return statistics.median(l)\n", "from typing import List\n## main.py\n\nfrom statistics import median as statistics_median\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (List[float]): List of numbers.\n\n    Returns:\n        float: Median of the list.\n\n    Raises:\n        ValueError: If the list contains non-numeric data or is empty.\n    \"\"\"\n    # Validate the list for non-numeric data\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"List contains non-numeric data.\")\n    \n    # Handle empty list case\n    if not l:\n        raise ValueError(\"Cannot calculate median of an empty list.\")\n    \n    # Calculate and return the median using the statistics module\n    return statistics_median(l)\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numbers (integers or floats).\n        \n    Returns:\n        Median value as a float, or None if the list is empty.\n    \"\"\"\n    if not l:\n        return None\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Calculate median\n    if n % 2 == 1:\n        # Odd length, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # Even length, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n\n# Example usage\nif __name__ == \"__main__\":\n    print(median([3, 1, 2, 4, 5]))  # Output: 3.0\n    print(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0\n    print(median([]))  # Output: None\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (list): List of numeric values.\n\n    Returns:\n        float: Median value.\n\n    Raises:\n        ValueError: If the list contains non-numeric values.\n    \"\"\"\n    # Validate input list\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"List must contain only numeric values.\")\n\n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n\n    # Calculate median\n    if n == 0:\n        raise ValueError(\"List is empty, cannot compute median.\")\n    elif n % 2 == 1:\n        # If the list length is odd, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # If the list length is even, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (list): List of numbers (integers or floats).\n\n    Returns:\n        float: Median value as a float. Returns None for empty lists.\n\n    Raises:\n        ValueError: If the list contains non-numeric values.\n    \"\"\"\n    if not l:\n        return None\n\n    # Validate that all elements are numeric\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List contains non-numeric values\")\n\n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n\n    # Calculate median\n    if n % 2 == 0:\n        # Even number of elements\n        median_value = (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        # Odd number of elements\n        median_value = float(sorted_list[mid])\n\n    return median_value\n", "from typing import List\n## main.py\nimport statistics\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    float: The median value of the list.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric data.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    try:\n        # Validate that all elements are numeric\n        l = [float(x) for x in l]\n    except ValueError:\n        raise ValueError(\"The list contains non-numeric data.\")\n    \n    # Sort the list\n    l.sort()\n    \n    # Calculate and return the median\n    return statistics.median(l)\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Parameters:\n    l (list): A list of numeric values.\n\n    Returns:\n    float: The median value of the list.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n\n    Example:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric values\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"The list contains non-numeric values.\")\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Calculate median\n    if n % 2 == 1:\n        # Odd length, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # Even length, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n"], "plans": ["requirement analysis:\nThe requirement is to develop a function that accurately calculates the median of a list of numbers, handling both even and odd list lengths. The function should be efficient and easy to integrate into larger systems, with clear documentation for users.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Ensure the function handles edge cases, such as empty lists\n- Provide comprehensive documentation and examples\n- Include unit tests to verify function accuracy\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle both even and odd list lengths and will raise an error for empty lists. We will use the 'statistics' module for simplicity and reliability, as it is part of Python's standard library and provides a straightforward median calculation.\n", "requirement analysis:\nThe function should accurately compute the median for both even and odd-length lists. It should handle edge cases such as empty lists or lists with non-numeric data gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation for odd-length lists\n- Implement the median calculation for even-length lists\n- Optimize the function for large datasets\n- Handle edge cases such as empty lists\n- Provide detailed documentation and examples\nWe will implement a custom median function that handles both even and odd-length lists. The function will sort the list and then calculate the median based on the length of the list. We will use Python's built-in capabilities to ensure simplicity and efficiency. For handling non-numeric data, the function will raise a ValueError to ensure data integrity. We will also handle edge cases such as empty lists by returning None or raising an appropriate error.\n", "requirement analysis:\nThe function should accurately compute the median for both even and odd length lists. It should be easy to use and understand, with clear documentation. Efficiency is important but should not compromise usability.\nrequirement pool:\n- Implement the median calculation for odd length lists\n- Implement the median calculation for even length lists\n- Ensure the function is efficient for large lists\n- Provide comprehensive documentation and examples\n- Optimize for performance without sacrificing readability\nWe will implement a custom median function that handles both even and odd length lists. The function will sort the list and then calculate the median based on the length of the list. We will use Python's built-in capabilities to ensure simplicity and avoid additional dependencies. The function will also handle edge cases such as empty lists by returning None or an appropriate message.\n", "requirement analysis:\nThe function should accurately compute the median for both even and odd-length lists. It should handle edge cases such as empty lists and provide clear error messages. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Accurate median calculation for any list length\n- Handle edge cases like empty lists\n- Optimize performance for large datasets\n- Provide clear documentation and examples\n- Ensure compatibility with other statistical libraries\nWe will implement a simple function to calculate the median of a list using Python's built-in capabilities. The function will handle both even and odd-length lists and will include error handling for edge cases such as empty lists. We will use the 'statistics' module for its simplicity and reliability, ensuring the function is optimized for performance with large datasets.\n", "requirement analysis:\nThe function should accurately compute the median for both even and odd-length lists. It should handle edge cases such as empty lists or lists with non-numeric data gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement median calculation for odd-length lists\n- Implement median calculation for even-length lists\n- Optimize performance for large datasets\n- Handle edge cases such as empty lists\n- Provide detailed documentation and examples\nWe will implement a simple function to calculate the median using Python's built-in capabilities. For performance optimization, we will use the 'statistics' module which is efficient for median calculation. The function will handle both odd and even-length lists and will raise an error for non-numeric data to ensure data integrity.\n", "requirement analysis:\nThe function should accurately compute the median for both even and odd length lists. It should handle edge cases such as empty lists and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the median calculation for odd length lists\n- Implement the median calculation for even length lists\n- Handle edge cases like empty lists\n- Provide comprehensive documentation\n- Optimize for performance with large lists\nWe will implement a custom median function that handles both even and odd length lists. For empty lists, we will return None to indicate that no median can be calculated. We will use Python's built-in capabilities to sort the list and calculate the median, ensuring simplicity and efficiency without requiring additional libraries.\n", "requirement analysis:\nThe function should accurately compute the median for both even and odd length lists. It should be efficient and easy to use, with clear documentation for developers.\nrequirement pool:\n- Implement the median calculation for odd length lists\n- Implement the median calculation for even length lists\n- Optimize the function for performance\n- Provide comprehensive documentation\n- Include error handling for non-numeric inputs\nWe will implement a custom median function using Python's built-in capabilities to handle both even and odd length lists. The function will sort the list and then calculate the median based on the length of the list. We will also include error handling to ensure that the input list contains only numeric values. This approach avoids the need for external libraries, keeping the solution lightweight and easy to use.\n", "requirement analysis:\nThe function should accurately compute the median for both even and odd-length lists. It should handle edge cases such as empty lists and lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Accurate median calculation for both even and odd-length lists\n- Performance optimization for large datasets\n- Error handling for non-numeric values\n- Documentation and examples for user guidance\n- Compatibility with existing data processing systems\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle both even and odd-length lists, and it will include error handling for non-numeric values by raising a ValueError. For performance optimization, we will use sorting, which is efficient for most practical purposes. The function will return None for empty lists, as this is a common convention for indicating no result.\n", "requirement analysis:\nThe function should accurately compute the median for both even and odd-length lists. It should handle edge cases such as empty lists or lists with non-numeric data gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation for odd-length lists.\n- Implement the median calculation for even-length lists.\n- Optimize the function for performance with large datasets.\n- Include error handling for non-numeric data.\n- Provide detailed documentation and examples.\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle both even and odd-length lists and will include error handling for non-numeric data by raising an appropriate error. We will use the 'statistics' module from Python's standard library for simplicity and performance optimization.\n", "requirement analysis:\nThe function should accurately compute the median for both even and odd length lists. It should be efficient and easy to use, with clear documentation. The function should not require external libraries to maintain simplicity and accessibility.\nrequirement pool:\n- Implement the median function to handle both even and odd length lists.\n- Ensure the function is efficient and performs well with large lists.\n- Provide clear and concise documentation for the function.\n- Include test cases to validate the function's accuracy.\n- Optimize the function for performance without external dependencies.\nWe will implement a custom median function that handles both even and odd length lists without relying on external libraries. The function will sort the list and then calculate the median based on the length of the list. This approach ensures simplicity and accessibility while maintaining efficiency.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [111, 111, 111, 111, 111, 111, 111, 111, 111, 111], "completion": "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Parameters:\n    l (list): A list of numeric values.\n\n    Returns:\n    float: The median value of the list.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n\n    Example:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric values\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"The list contains non-numeric values.\")\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Calculate median\n    if n % 2 == 1:\n        # Odd length, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # Even length, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n", "passed": true, "pass": true, "pass_num": 10, "round": 440, "mutate_method": "add_1_sentence_at_end", "parent_index": 260}
