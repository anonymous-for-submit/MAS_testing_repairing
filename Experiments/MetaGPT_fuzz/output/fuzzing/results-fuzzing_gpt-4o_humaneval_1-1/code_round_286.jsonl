{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. The unusual sorting occurs when you begin with the smallest value, then the largest of the remaining integers, continue with the next smallest, and so forth.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "entry_point": "strange_sort_list", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": ["def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([]) == []", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "test_case_list": ["assert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "assert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "assert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "assert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "assert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "assert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "assert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "assert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "assert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "assert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "assert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "assert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "assert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "assert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "assert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "assert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "assert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "assert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "assert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "assert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "assert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "assert strange_sort_list([]) == []", "assert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "assert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "assert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "assert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "assert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "assert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "assert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "assert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "assert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "assert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "assert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "assert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "assert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "assert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "assert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "assert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "assert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "assert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "assert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "assert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "assert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "assert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "assert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "assert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "assert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "assert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "assert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "assert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "assert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "assert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "assert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "assert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "assert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "assert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "assert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "assert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "assert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "assert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "assert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "assert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "assert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "assert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "assert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "assert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "assert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "assert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "assert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "assert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "assert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "assert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "assert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "assert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "assert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "assert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "assert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "assert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "assert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "assert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "assert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "assert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "assert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "assert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "assert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "assert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "assert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "assert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "assert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "assert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "assert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "assert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "assert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "assert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "assert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "assert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "assert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "assert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "assert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "assert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "assert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "assert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "assert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "nl": "\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    ", "func": "def strange_sort_list(lst):", "examples": "Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    ", "repair_prompt": ["def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. The unusual sorting occurs when you begin with the smallest value, then the largest of the remaining integers, continue with the next smallest, and so forth.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Sorts the list in a 'strange' order by alternating between the smallest and largest remaining elements.\n\n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n\n    Returns:\n    list[int]: A list of integers sorted in the specified 'strange' order.\n    \"\"\"\n    # Handle edge case for empty list\n    if not lst:\n        return []\n\n    # Sort the list to easily access smallest and largest elements\n    sorted_lst = sorted(lst)\n    result = []\n\n    # Use two pointers to alternate between smallest and largest elements\n    left = 0\n    right = len(sorted_lst) - 1\n\n    while left <= right:\n        # Append the smallest element\n        result.append(sorted_lst[left])\n        left += 1\n\n        # Append the largest element if there are elements left\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n\n    return result\n\n# Example usage:\n# print(strange_sort_list([4, 1, 3, 2, 5]))  # Output: [1, 5, 2, 4, 3]\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Sorts the list in a specific order by alternating between the smallest and largest remaining values.\n    \n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n    \n    Returns:\n    list[int]: A list sorted in the specified order.\n    \"\"\"\n    # Handle edge case for empty list\n    if not lst:\n        return []\n\n    # Sort the list to easily access smallest and largest elements\n    sorted_lst = sorted(lst)\n    \n    # Initialize pointers for smallest and largest elements\n    left_index = 0\n    right_index = len(sorted_lst) - 1\n    \n    # Resultant list to store the sorted elements\n    result = []\n    \n    # Alternate between smallest and largest elements\n    while left_index <= right_index:\n        # Append the smallest element\n        result.append(sorted_lst[left_index])\n        left_index += 1\n        \n        # Check if there are still elements to append\n        if left_index <= right_index:\n            # Append the largest element\n            result.append(sorted_lst[right_index])\n            right_index -= 1\n    \n    return result\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Given a list of integers, return the list sorted in a strange order.\n    The sorting alternates between the smallest and largest remaining integers.\n    \n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n    \n    Returns:\n    list[int]: A list of integers sorted in the strange order.\n    \n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    # Sort the list to easily access smallest and largest elements\n    sorted_lst = sorted(lst)\n    result = []\n    \n    # Use two pointers to select smallest and largest elements\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Alternate between smallest and largest until all elements are used\n    while left <= right:\n        if left == right:\n            result.append(sorted_lst[left])\n        else:\n            result.append(sorted_lst[left])\n            result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\n    print(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\n    print(strange_sort_list([]))            # Output: []\n", "from typing import List\n## main.py\nimport typing\n\ndef strange_sort_list(lst: typing.List[int]) -> typing.List[int]:\n    '''\n    Given a list of integers, return the list in strange order.\n    The unusual sorting occurs when you begin with the smallest value,\n    then the largest of the remaining integers, continue with the next smallest,\n    and so forth.\n    \n    Parameters:\n    lst (List[int]): A list of integers to be sorted.\n    \n    Returns:\n    List[int]: A list of integers sorted in the specified strange order.\n    '''\n    # Edge case: if the list is empty, return it as is\n    if not lst:\n        return lst\n    \n    # Sort the list to easily access smallest and largest elements\n    sorted_lst = sorted(lst)\n    \n    # Initialize pointers for smallest and largest elements\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Result list to store elements in strange order\n    result = []\n    \n    # Alternate between smallest and largest remaining elements\n    while left <= right:\n        result.append(sorted_lst[left])\n        left += 1\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Sorts the list in a 'strange' order by alternating between the smallest and largest remaining elements.\n    \n    Args:\n        lst: List of integers to be sorted.\n        \n    Returns:\n        List of integers sorted in the specified 'strange' order.\n    \"\"\"\n    # Check for empty list\n    if not lst:\n        return []\n\n    # Sort the list to easily access smallest and largest elements\n    sorted_lst = sorted(lst)\n    \n    # Initialize pointers for smallest and largest elements\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Resultant list to store the 'strange' sorted order\n    result = []\n    \n    # Alternate between smallest and largest elements\n    while left <= right:\n        if left == right:\n            # If pointers meet, add the last remaining element\n            result.append(sorted_lst[left])\n        else:\n            # Add the smallest element\n            result.append(sorted_lst[left])\n            # Add the largest element\n            result.append(sorted_lst[right])\n        \n        # Move pointers inward\n        left += 1\n        right -= 1\n    \n    return result\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Given a list of integers, return the list in a strange order. The unusual sorting occurs when you begin with the \n    smallest value, then the largest of the remaining integers, continue with the next smallest, and so forth.\n    \n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n\n    Returns:\n    list[int]: A list of integers sorted in the specified strange order.\n    \"\"\"\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize the result list\n    result = []\n    \n    # Use two pointers to alternate between smallest and largest\n    left = 0\n    right = len(lst) - 1\n    \n    # Alternate between smallest and largest until all elements are used\n    while left <= right:\n        if left == right:\n            # If there's only one element left, add it to the result\n            result.append(lst[left])\n        else:\n            # Append the smallest element\n            result.append(lst[left])\n            # Append the largest element\n            result.append(lst[right])\n        \n        # Move the pointers\n        left += 1\n        right -= 1\n    \n    return result\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Sorts the list in a specific order by alternating between the smallest and largest remaining elements.\n\n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n\n    Returns:\n    list[int]: A list of integers sorted in the specified order.\n    \"\"\"\n    # Check for edge cases\n    if not lst:\n        return []\n\n    # Sort the list to easily access smallest and largest elements\n    sorted_lst = sorted(lst)\n    result = []\n\n    # Use two pointers to alternate between smallest and largest\n    left, right = 0, len(sorted_lst) - 1\n\n    while left <= right:\n        if left == right:\n            # If pointers meet, add the last remaining element\n            result.append(sorted_lst[left])\n        else:\n            # Append smallest and largest elements alternately\n            result.append(sorted_lst[left])\n            result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n\n    return result\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Sorts the list in a 'strange' order by alternating between the smallest and largest remaining elements.\n    \n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n    \n    Returns:\n    list[int]: A list of integers sorted in the specified 'strange' order.\n    \"\"\"\n    # Sort the list using Python's built-in sort\n    lst.sort()\n    \n    # Initialize the result list\n    result = []\n    \n    # Use two pointers to track the smallest and largest elements\n    left = 0\n    right = len(lst) - 1\n    \n    # Alternate between appending the smallest and largest elements\n    while left <= right:\n        if left == right:\n            # If there's only one element left, append it and break\n            result.append(lst[left])\n            break\n        # Append the smallest element\n        result.append(lst[left])\n        left += 1\n        # Append the largest element\n        result.append(lst[right])\n        right -= 1\n    \n    return result\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Sorts the list in a strange order by alternating between the smallest and largest remaining values.\n    \n    Args:\n        lst: List of integers to be sorted.\n        \n    Returns:\n        List of integers sorted in the specified strange order.\n    \"\"\"\n    # Sort the list to easily access smallest and largest elements\n    lst.sort()\n    \n    # Initialize the result list\n    result = []\n    \n    # Use two pointers to alternate between smallest and largest elements\n    left, right = 0, len(lst) - 1\n    \n    # Loop until all elements are added to the result list\n    while left <= right:\n        # Append the smallest element\n        result.append(lst[left])\n        left += 1\n        \n        # Check if there are still elements to add\n        if left <= right:\n            # Append the largest element\n            result.append(lst[right])\n            right -= 1\n    \n    return result\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given a list of integers, return the list sorted in a strange order.\n    The sorting alternates between the smallest and largest remaining elements.\n    \n    Parameters:\n    lst (List[int]): A list of integers to be sorted.\n    \n    Returns:\n    List[int]: A list of integers sorted in the specified order.\n    '''\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Initialize result list\n    result = []\n    \n    # Use two pointers to alternate between smallest and largest remaining elements\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    while left <= right:\n        # Append the smallest remaining element\n        result.append(sorted_lst[left])\n        left += 1\n        \n        # Append the largest remaining element if there are elements left\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n"], "plans": ["requirement analysis:\nThe function should sort a list of integers in a specific 'strange' order, alternating between the smallest and largest remaining elements. It should handle edge cases like empty lists and lists with identical elements. Performance is crucial for large lists, and the code should remain simple and readable.\nrequirement pool:\n- Implement the strange sorting logic as described\n- Optimize the function for performance with large lists\n- Ensure the function handles empty lists and lists with identical elements\n- Write comprehensive tests for various edge cases\n- Document the function with clear examples and usage instructions\nWe will implement a custom sorting function that alternates between the smallest and largest remaining elements in the list. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to ensure simplicity and performance, avoiding unnecessary dependencies.\n", "requirement analysis:\nThe function should sort a list of integers in a specific order, alternating between the smallest and largest remaining values. It must handle edge cases such as empty lists and lists with duplicate values. Performance optimization is crucial for handling large lists efficiently.\nrequirement pool:\n- Implement the main sorting logic to alternate between smallest and largest values\n- Optimize the function for performance with large lists\n- Ensure the function handles lists with duplicate values correctly\n- Maintain code readability and simplicity\n- Include comprehensive test cases for edge scenarios\nWe will implement a function that sorts a list of integers by alternating between the smallest and largest remaining values. The function will handle edge cases such as empty lists and lists with duplicate values. We will use Python's built-in sorting capabilities to ensure efficiency and simplicity.\n", "requirement analysis:\nThe function should sort a list of integers in a 'strange' order, alternating between the smallest and largest remaining values. It should handle edge cases like empty lists and lists with identical elements efficiently.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Ensure the function handles edge cases\n- Optimize performance for large lists\n- Provide comprehensive documentation\n- Include examples in the documentation\nWe will implement a custom sorting algorithm that alternates between selecting the smallest and largest remaining integers from the list. This approach will ensure the function handles edge cases like empty lists and lists with identical elements efficiently. We will use Python's built-in list operations to achieve this, as they are optimized for performance and simplicity.\n", "requirement analysis:\nThe function should sort a list of integers in a specific order: smallest, largest, next smallest, next largest, and so on. It should handle edge cases like empty lists and lists with identical elements. Performance is crucial for large lists.\nrequirement pool:\n- Implement the strange sorting logic\n- Optimize for performance with large lists\n- Ensure the function handles empty lists\n- Maintain code readability\n- Include comprehensive test cases\nWe will implement a function that sorts a list of integers in a 'strange' order by alternating between the smallest and largest remaining elements. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in sorting capabilities to efficiently sort the list initially, and then rearrange the elements according to the specified logic. This approach ensures performance optimization for large lists while maintaining code readability.\n", "requirement analysis:\nThe function should sort a list of integers in a specific 'strange' order, alternating between the smallest and largest remaining elements. It must handle edge cases like empty lists and lists with identical elements. Performance with large lists should be considered.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Optimize for performance with large lists\n- Ensure the function handles empty lists correctly\n- Maintain code readability and simplicity\n- Add comprehensive test cases\nWe will implement a custom sorting function that alternates between the smallest and largest remaining elements in the list. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to ensure simplicity and efficiency, avoiding unnecessary dependencies.\n", "requirement analysis:\nThe function should sort a list of integers in a 'strange' order, alternating between the smallest and largest remaining values. It should handle edge cases like empty lists and lists with identical elements efficiently.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Optimize for performance with large datasets\n- Provide clear documentation and examples\n- Ensure compatibility with Python's list data structure\n- Handle edge cases like empty lists and identical elements\nWe will implement a custom sorting function that alternates between the smallest and largest remaining values in the list. The function will handle edge cases such as empty lists and lists with identical elements efficiently. We will use Python's built-in list operations to achieve this, ensuring compatibility and performance.\n", "requirement analysis:\nThe function should sort a list of integers in a specific order, alternating between the smallest and largest remaining elements. It should handle edge cases like empty lists and lists with identical elements.\nrequirement pool:\n- Implement the main sorting logic\n- Handle edge cases such as empty lists\n- Optimize for performance with large lists\n- Ensure code readability and maintainability\n- Include comprehensive test cases\nWe will implement a function that sorts a list of integers by alternating between the smallest and largest remaining elements. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in list operations to achieve this, ensuring the function is efficient and easy to understand.\n", "requirement analysis:\nThe function should sort a list of integers in a specific 'strange' order, alternating between the smallest and largest remaining elements. It should handle edge cases like empty lists and lists with identical elements. Performance with large lists should be considered.\nrequirement pool:\n- Implement the strange sorting logic\n- Optimize for performance with large lists\n- Ensure code readability and maintainability\n- Handle edge cases like empty lists\n- Test with lists containing identical elements\nWe will implement a function that sorts a list of integers in a 'strange' order by alternating between the smallest and largest remaining elements. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in sorting capabilities to efficiently sort the list initially, and then rearrange the elements according to the specified logic. This approach ensures both performance and simplicity.\n", "requirement analysis:\nThe function should sort a list of integers in a specific order, alternating between the smallest and largest remaining values. It should handle edge cases such as empty lists and lists with duplicate values efficiently.\nrequirement pool:\n- Implement the strange sorting logic as described\n- Optimize for performance with large datasets\n- Ensure the function handles duplicate values correctly\n- Maintain code readability and simplicity\n- Include comprehensive test cases\nWe will implement a function that sorts a list of integers by alternating between the smallest and largest remaining values. The function will handle edge cases such as empty lists and lists with duplicate values. We will use Python's built-in sorting capabilities to ensure performance and simplicity.\n", "requirement analysis:\nThe function should sort a list of integers in a specific order, alternating between the smallest and largest remaining elements. It must handle edge cases like empty lists and lists with identical elements. Performance should be considered for large inputs.\nrequirement pool:\n- Implement the main sorting logic\n- Optimize for performance with large lists\n- Ensure compatibility with Python 3.x\n- Add comprehensive test cases\n- Document the function with examples\nWe will implement a function that sorts a list of integers in a 'strange' order by alternating between the smallest and largest remaining elements. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in list operations to achieve this efficiently without introducing unnecessary dependencies.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [107, 107, 107, 107, 107, 107, 107, 107, 107, 107], "completion": "from typing import List\n## main.py\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given a list of integers, return the list sorted in a strange order.\n    The sorting alternates between the smallest and largest remaining elements.\n    \n    Parameters:\n    lst (List[int]): A list of integers to be sorted.\n    \n    Returns:\n    List[int]: A list of integers sorted in the specified order.\n    '''\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Initialize result list\n    result = []\n    \n    # Use two pointers to alternate between smallest and largest remaining elements\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    while left <= right:\n        # Append the smallest remaining element\n        result.append(sorted_lst[left])\n        left += 1\n        \n        # Append the largest remaining element if there are elements left\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 10, "round": 286, "mutate_method": "rephrase_one", "parent_index": 154}
