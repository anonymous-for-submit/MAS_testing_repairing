{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are either consistently increasing or consistently decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are either consistently increasing or consistently decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n    \n    Parameters:\n    l (list): A list of comparable elements.\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n        # Early exit if both increasing and decreasing are False\n        if not increasing and not decreasing:\n            return False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l or len(l) == 1:\n        # An empty list or a single-element list is trivially monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True  # An empty list is considered monotonic\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n    \n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([5])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if not l or len(l) == 1:\n        # An empty list or a single-element list is trivially monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        # A list with 0 or 1 element is trivially monotonic\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Example:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 1, 1, 1])\n    True\n    \"\"\"\n    if not l:\n        # An empty list is considered monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if not l or len(l) == 1:\n        # An empty list or a list with a single element is trivially monotonic\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l or len(l) == 1:\n        # An empty list or a single-element list is considered monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize function for performance with large lists\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists or identical elements\n- Ensure compatibility with Python's list data structure\nWe will implement a simple function using Python's built-in capabilities to check if a list is monotonic. The function will iterate through the list to determine if it is either entirely non-increasing or non-decreasing. We will optimize the function to handle large datasets efficiently by minimizing the number of comparisons and using early exits when possible. Comprehensive documentation with examples will be provided to ensure clarity.\n", "requirement analysis:\nThe function should efficiently determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. The implementation should be straightforward and not rely on external libraries.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order.\n- Optimize the function for large lists.\n- Include comprehensive test cases to cover edge scenarios.\n- Document the function with examples and usage notes.\n- Ensure compatibility with different Python versions.\nWe will implement a simple and efficient function to check if a list is monotonic. The function will iterate through the list once to determine if it is either non-increasing or non-decreasing. This approach ensures optimal performance for large lists. We will handle edge cases such as empty lists and single-element lists by returning True, as they are trivially monotonic. The function will be documented with examples and usage notes to aid understanding.\n", "requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. The implementation should be efficient, ideally with a time complexity of O(n).\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order\n- Optimize the function for large lists\n- Include comprehensive test cases\n- Provide detailed documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a function named 'monotonic' that checks if a list is either non-increasing or non-decreasing. The function will iterate through the list once, comparing each element with the next to determine the monotonicity. This approach ensures a time complexity of O(n), making it efficient for large lists. We will use Python's built-in capabilities without relying on external libraries to maintain simplicity and compatibility.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling both increasing and decreasing sequences. It should be robust against edge cases such as empty lists or lists with a single element. The implementation should prioritize performance and clarity.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order\n- Optimize the function for large lists\n- Include comprehensive documentation and examples\n- Handle edge cases like empty lists or single-element lists\n- Ensure compatibility with Python's list data structure\nWe will implement a function that checks if a list is monotonic by iterating through the list once, comparing each element with the next. This approach ensures efficiency, especially for large lists. We will handle edge cases such as empty lists and single-element lists by returning True, as they are trivially monotonic. The function will be documented with clear examples and will be compatible with Python's list data structure. We will not use any additional libraries to keep the implementation simple and standalone.\n", "requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases like empty lists or lists with a single element. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the monotonicity check function\n- Optimize the function for large lists\n- Handle edge cases such as empty or single-element lists\n- Provide comprehensive documentation and examples\n- Include unit tests to ensure reliability\nWe will implement a function to check if a list is monotonic by iterating through the list once, comparing each element with the next. This approach ensures optimal performance for large lists. We will handle edge cases such as empty lists and single-element lists by returning True, as they are trivially monotonic. The function will be designed to work with numeric data, as the requirement for non-numeric data is unclear.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, meaning all elements are either non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. The implementation should be straightforward and not rely on external libraries.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order\n- Optimize the function for large lists\n- Include comprehensive test cases\n- Document the function with examples\n- Ensure compatibility with Python's list data structure\nWe will implement a simple function to check if a list is monotonic by iterating through the list once. This approach will ensure efficiency, especially for large lists. The function will handle edge cases such as empty lists or lists with a single element. We will not rely on any external libraries to maintain simplicity and compatibility with Python's built-in list data structure.\n", "requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases like empty lists or lists with a single element. Performance is crucial for large datasets.\nrequirement pool:\n- Implement the monotonicity check function\n- Optimize the function for large lists\n- Handle edge cases such as empty or single-element lists\n- Provide comprehensive documentation and examples\n- Include unit tests for various scenarios\nWe will implement a simple Python function to check if a list is monotonic. The function will iterate through the list once to determine if it is non-decreasing or non-increasing, ensuring optimal performance for large datasets. We will handle edge cases such as empty lists or lists with a single element by returning True, as they can be considered trivially monotonic. We will not use any external libraries to keep the implementation lightweight and efficient.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic detection logic\n- Optimize for large list performance\n- Include comprehensive test cases\n- Provide detailed documentation\n- Handle edge cases gracefully\nWe will implement a function that checks if a list is monotonic by iterating through the list and comparing each element with the next one. We will use Python's built-in capabilities to ensure simplicity and efficiency. The function will handle edge cases such as empty lists and lists with identical elements. For performance optimization, we will ensure the function operates in O(n) time complexity, which is suitable for large lists.\n", "requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. Performance is crucial for large datasets.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases for edge scenarios.\n- Document the function usage and examples clearly.\n- Ensure compatibility with Python 3.x versions.\nWe will implement a function that checks if a list is monotonic by iterating through the list once to determine if it is non-decreasing or non-increasing. This approach ensures optimal performance for large lists. We will handle edge cases such as empty lists or lists with a single element by returning True, as they are trivially monotonic. The function will be designed to work with numeric data, as the requirement for non-numeric data is unclear.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling both increasing and decreasing sequences. It should be simple to use and integrate with existing Python codebases.\nrequirement pool:\n- The function must correctly identify monotonic sequences.\n- The function should handle edge cases such as empty lists or lists with one element.\n- The function should be optimized for performance with large lists.\n- The function should include comprehensive documentation and examples.\n- The function should be compatible with Python's list data structure.\nWe will implement a simple function to determine if a list is monotonic. The function will check if the list is either entirely non-increasing or non-decreasing. We will use Python's built-in capabilities to ensure efficiency and simplicity, avoiding the need for additional libraries. The function will handle edge cases such as empty lists and single-element lists.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l or len(l) == 1:\n        # An empty list or a single-element list is considered monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 349, "mutate_method": "condense_two2one", "parent_index": 48}
