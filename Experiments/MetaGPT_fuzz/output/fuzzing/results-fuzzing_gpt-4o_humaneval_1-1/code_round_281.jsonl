{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine', and return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine', and return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numbers represented as words from 'zero' to 'nine'.\n    Returns a string with these numbers sorted in ascending order or an error message for invalid inputs.\n    \n    Parameters:\n    numbers (str): A space-delimited string of numbers represented as words.\n    \n    Returns:\n    str: A space-delimited string of sorted numbers or an error message.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numeric values back to their word representation\n    number_to_word = {v: k for k, v in word_to_number.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert words to numbers, handling invalid inputs\n    try:\n        numeric_values = [word_to_number[word] for word in words]\n    except KeyError:\n        return \"Error: Invalid input detected. Please use words from 'zero' to 'nine'.\"\n    \n    # Sort the numeric values\n    numeric_values.sort()\n    \n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word[num] for num in numeric_values]\n    \n    # Join the sorted words into a space-delimited string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numbers represented as words from 'zero' to 'nine'.\n    \n    Args:\n        numbers (str): A space-delimited string of numbers represented as words.\n        \n    Returns:\n        str: A string with the numbers sorted in ascending order, or an error message for invalid input.\n    \"\"\"\n    # Mapping from word to number\n    word_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Mapping from number to word\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to numbers, handling invalid words\n    try:\n        nums = [word_to_num[word] for word in words]\n    except KeyError:\n        return 'Invalid input: Please use words from zero to nine.'\n    \n    # Sort the numbers\n    sorted_nums = sorted(nums)\n    \n    # Convert numbers back to words\n    sorted_words = [num_to_word[num] for num in sorted_nums]\n    \n    # Join the sorted words into a string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\nfrom typing import Dict, List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a space-delimited string of numerals from 'zero' to 'nine'.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest, or an error message if input is invalid.\n    \"\"\"\n    # Mapping of word-based numbers to their numeric equivalents\n    number_map: Dict[str, int] = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from numbers back to words\n    reverse_map: Dict[int, str] = {v: k for k, v in number_map.items()}\n    \n    # Split the input string into individual words\n    words: List[str] = numbers.split()\n    \n    try:\n        # Sort the words based on their numeric value\n        sorted_numbers: List[str] = sorted(words, key=lambda word: number_map[word])\n        # Join the sorted words back into a single string\n        return ' '.join(sorted_numbers)\n    except KeyError:\n        # Return an error message if any word is not a valid number\n        return 'Error: Invalid input detected.'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Takes a space-delimited string of numbers in word form ('zero' to 'nine'),\n    sorts them numerically, and returns the sorted string.\n\n    Parameters:\n    numbers (str): A string containing numbers in word form.\n\n    Returns:\n    str: A string with the numbers sorted numerically in word form.\n    \"\"\"\n    # Mapping of word numbers to their corresponding numeric values\n    word_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Mapping of numeric values back to word numbers\n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Convert words to numbers, ignoring invalid inputs\n    numeric_values = []\n    for word in words:\n        if word in word_to_number:\n            numeric_values.append(word_to_number[word])\n        else:\n            print(f\"Warning: '{word}' is not a valid number word and will be ignored.\")\n\n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n\n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word[num] for num in sorted_numeric_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage\nif __name__ == \"__main__\":\n    result = sort_numbers('three one five')\n    print(result)  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Takes a space-delimited string of numbers in word form ('zero' to 'nine'),\n    sorts them numerically, and returns the sorted numbers in word form.\n\n    Parameters:\n    numbers (str): A string containing numbers in word form.\n\n    Returns:\n    str: A string of sorted numbers in word form or an error message for invalid input.\n    \"\"\"\n    # Mapping of number words to their numeric values\n    word_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Mapping of numeric values back to their word form\n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Convert words to numbers, checking for invalid inputs\n    try:\n        numeric_values = [word_to_number[word] for word in words]\n    except KeyError:\n        return \"Error: Input contains invalid words. Only 'zero' to 'nine' are allowed.\"\n\n    # Sort the numeric values\n    numeric_values.sort()\n\n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word[num] for num in numeric_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted from smallest to largest.\n             Returns an error message if invalid input is detected.\n    \"\"\"\n    # Mapping of word-based numbers to their numeric equivalents\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from numbers back to words\n    reverse_map = {v: k for k, v in number_map.items()}\n    \n    try:\n        # Convert the input words to numbers\n        num_list = [number_map[word] for word in numbers.split()]\n        \n        # Sort the list of numbers\n        num_list.sort()\n        \n        # Convert the sorted numbers back to words\n        sorted_numbers = ' '.join(reverse_map[num] for num in num_list)\n        \n        return sorted_numbers\n    except KeyError:\n        # Handle invalid input by returning an error message\n        return 'Error: Invalid input detected.'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerical words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerical words.\n\n    Returns:\n        str: A string with the numerical words sorted in ascending order.\n    \"\"\"\n    # Mapping of numerical words to their corresponding integer values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of integer values back to their corresponding numerical words\n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert words to numbers, ignoring invalid words\n    try:\n        number_list = [word_to_number[word] for word in words]\n    except KeyError as e:\n        raise ValueError(f\"Invalid input word: {e.args[0]}\")\n\n    # Sort the list of numbers\n    number_list.sort()\n\n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word[number] for number in number_list]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numbers in word form.\n\n    Args:\n        numbers (str): A space-delimited string of numbers in word form.\n\n    Returns:\n        str: A space-delimited string of numbers sorted numerically in word form.\n             Returns an error message if invalid input is detected.\n    \"\"\"\n    # Mapping of word-based numbers to their numeric equivalents\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Reverse mapping from numeric equivalents back to word-based numbers\n    reverse_map = {v: k for k, v in number_map.items()}\n    \n    try:\n        # Convert the input words to their numeric equivalents\n        num_list = [number_map[word] for word in numbers.split()]\n        \n        # Sort the list of numbers\n        num_list.sort()\n        \n        # Convert the sorted numbers back to their word form\n        sorted_words = [reverse_map[num] for num in num_list]\n        \n        # Join the sorted words into a space-delimited string\n        return ' '.join(sorted_words)\n    \n    except KeyError:\n        # Return an error message if an invalid word is encountered\n        return 'Error: Invalid input detected.'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numbers in word form.\n\n    Args:\n        numbers (str): A space-delimited string of numbers in word form \n                       (e.g., 'three one five').\n\n    Returns:\n        str: A string with the numbers sorted in word form \n             (e.g., 'one three five'). Returns an error message if invalid \n             input is detected.\n    \"\"\"\n    # Mapping of number words to their numeric values\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from numeric values back to number words\n    reverse_map = {v: k for k, v in number_map.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    try:\n        # Map words to numbers, sort them, and map back to words\n        sorted_numbers = sorted(words, key=lambda word: number_map[word])\n        return ' '.join(sorted_numbers)\n    except KeyError:\n        # Return an error message if any word is not a valid number word\n        return 'Error: Invalid input detected.'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Takes a space-delimited string of numbers in word form, sorts them numerically,\n    and returns the sorted string. Valid inputs are words from 'zero' to 'nine'.\n    Returns a string of sorted numbers in word form or an error message for invalid inputs.\n\n    Args:\n        numbers (str): A space-delimited string of numbers in word form.\n\n    Returns:\n        str: A space-delimited string of sorted numbers in word form or an error message.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    word_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Mapping of numeric values back to their word form\n    number_to_word = {v: k for k, v in word_to_number.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert words to numbers, checking for invalid inputs\n    try:\n        numeric_values = [word_to_number[word] for word in words]\n    except KeyError:\n        return \"Error: Invalid input. Please use words from 'zero' to 'nine'.\"\n    \n    # Sort the numeric values\n    numeric_values.sort()\n    \n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word[num] for num in numeric_values]\n    \n    # Join the sorted words into a space-delimited string\n    return ' '.join(sorted_words)\n"], "plans": ["requirement analysis:\nThe requirement is to sort a space-delimited string of numbers represented as words from 'zero' to 'nine'. The function should return a string with these numbers sorted in ascending order. It should handle valid inputs efficiently and provide meaningful feedback for invalid inputs.\nrequirement pool:\n- Implement the main sorting function.\n- Add error handling for invalid inputs.\n- Optimize the function for performance.\n- Enhance the user interface for better experience.\n- Include a help section for user guidance.\nWe will implement a function that maps the input words to their corresponding numeric values, sort these values, and then map them back to their word representation. We will use a dictionary for the mapping and handle invalid inputs by returning an error message. The function will be optimized for performance by using Python's built-in sorting capabilities.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numbers represented as words from 'zero' to 'nine'. The function should return a string with the numbers sorted in ascending order. The challenge is to map the word numbers to their numeric equivalents, sort them, and then map them back to words.\nrequirement pool:\n- Implement the main sorting function for word numbers.\n- Handle edge cases such as empty strings or invalid inputs.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Add support for additional languages or number systems.\nWe will implement a function that maps word numbers to their numeric equivalents, sorts them, and then maps them back to words. We will use a dictionary for the mapping and the built-in sorted function for sorting. The function will handle edge cases such as empty strings or invalid inputs by returning an appropriate message.\n", "requirement analysis:\nThe function should accurately convert word-based numbers to their numeric equivalents, sort them, and return the sorted list in word form. It should handle edge cases such as invalid inputs and provide meaningful error messages.\nrequirement pool:\n- Implement the main sorting algorithm for word-based numbers.\n- Develop error handling for invalid inputs.\n- Optimize the function for performance.\n- Enhance the user interface for better clarity.\n- Add support for additional languages.\nWe will implement a function that maps word-based numbers to their numeric equivalents, sorts them, and then maps them back to words. We'll use a dictionary for the mapping and handle invalid inputs by returning an error message. The function will be optimized for performance by using Python's built-in sorting capabilities.\n", "requirement analysis:\nThe function should take a string of numbers in word form, sort them numerically, and return the sorted string. It must handle valid inputs efficiently and provide meaningful feedback for invalid inputs.\nrequirement pool:\n- Implement the main sorting logic for word numbers.\n- Handle edge cases and invalid inputs gracefully.\n- Optimize the function for performance with large inputs.\n- Provide detailed error messages for invalid inputs.\n- Ensure compatibility with various input formats.\nWe will implement a function that maps word numbers to their corresponding numeric values, sorts them, and then maps them back to word numbers. We will use a dictionary for the mapping and the built-in sorted function for sorting. The function will also include error handling to manage invalid inputs gracefully.\n", "requirement analysis:\nThe function should take a string of numbers in word form, convert them to their numeric equivalents, sort them, and return the sorted list in word form. It should handle edge cases such as invalid inputs and provide meaningful error messages.\nrequirement pool:\n- Implement the main sorting functionality\n- Handle invalid inputs gracefully\n- Optimize performance for large inputs\n- Enhance user interface for better usability\n- Add support for additional languages\nWe will implement a function that maps the input words to their corresponding numeric values, sorts these values, and then maps them back to their word form. We will use a dictionary for the mapping and handle invalid inputs by returning an error message. The function will be optimized for performance by using efficient sorting algorithms available in Python.\n", "requirement analysis:\nThe function should take a string of numbers in word form, sort them numerically, and return the sorted string. It should handle valid inputs efficiently and provide clear error messages for invalid inputs.\nrequirement pool:\n- Implement the main sorting function\n- Develop error handling for invalid inputs\n- Optimize performance for large input strings\n- Enhance user interface for better usability\n- Add support for additional languages\nWe will implement a function that maps word-based numbers to their numeric equivalents, sorts them, and then maps them back to their word form. We'll use a dictionary for mapping and handle invalid inputs by returning an error message. The function will be optimized for performance using Python's built-in sorting capabilities.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerical words from 'zero' to 'nine'. The function should accurately interpret these words and return them in ascending order. Edge cases such as repeated words or invalid inputs should be handled gracefully.\nrequirement pool:\n- Implement the main sorting function for numerical words.\n- Handle edge cases and invalid inputs.\n- Optimize performance for large input strings.\n- Enhance user interface for better experience.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function that maps each numerical word to its corresponding integer value, sort these integers, and then map them back to their respective words. This approach ensures accurate sorting and handles edge cases like repeated words. We will use Python's built-in sorting capabilities for efficiency.\n", "requirement analysis:\nThe function should take a string of numbers in word form, sort them numerically, and return the sorted string. It should handle valid inputs efficiently and provide clear error messages for invalid inputs.\nrequirement pool:\n- Implement the main sorting function for word-based numbers.\n- Develop error handling for invalid inputs.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Add support for additional languages in the future.\nWe will implement a function that maps word-based numbers to their numeric equivalents, sorts them, and then maps them back to their word form. We will use a dictionary for mapping and handle invalid inputs by returning an error message. The function will be optimized for performance by using efficient sorting algorithms.\n", "requirement analysis:\nThe requirement is to develop a function that sorts a space-delimited string of numbers represented in word form from 'zero' to 'nine'. The function should return the sorted string. It is crucial to handle edge cases such as invalid inputs and ensure the function is optimized for performance.\nrequirement pool:\n- Implement the main sorting function for word-based numbers.\n- Develop error handling for invalid inputs.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Add support for additional languages in the future.\nWe will implement a function that maps the word-based numbers to their corresponding numeric values, sort them, and then map them back to their word form. We will use a dictionary for the mapping and handle invalid inputs by returning an error message. The function will be optimized for performance by using Python's built-in sorting capabilities.\n", "requirement analysis:\nThe function should take a string of numbers in word form, sort them numerically, and return the sorted string. It should handle valid inputs efficiently and provide clear error messages for invalid inputs.\nrequirement pool:\n- Implement the main sorting logic for word-based numbers.\n- Develop error handling for invalid inputs.\n- Optimize the function for performance.\n- Enhance the user interface for better readability.\n- Add support for additional languages.\nWe will implement a function that maps word-based numbers to their corresponding numeric values, sort them, and then map them back to their word form. We will use a dictionary for the mapping and handle invalid inputs by checking against the valid keys in the dictionary. The function will be optimized for performance by using Python's built-in sorting capabilities.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [121, 121, 121, 121, 121, 121, 121, 121, 121, 121], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Takes a space-delimited string of numbers in word form, sorts them numerically,\n    and returns the sorted string. Valid inputs are words from 'zero' to 'nine'.\n    Returns a string of sorted numbers in word form or an error message for invalid inputs.\n\n    Args:\n        numbers (str): A space-delimited string of numbers in word form.\n\n    Returns:\n        str: A space-delimited string of sorted numbers in word form or an error message.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    word_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Mapping of numeric values back to their word form\n    number_to_word = {v: k for k, v in word_to_number.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert words to numbers, checking for invalid inputs\n    try:\n        numeric_values = [word_to_number[word] for word in words]\n    except KeyError:\n        return \"Error: Invalid input. Please use words from 'zero' to 'nine'.\"\n    \n    # Sort the numeric values\n    numeric_values.sort()\n    \n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word[num] for num in numeric_values]\n    \n    # Join the sorted words into a space-delimited string\n    return ' '.join(sorted_words)\n", "passed": true, "pass": true, "pass_num": 10, "round": 281, "mutate_method": "condense_two2one", "parent_index": 138}
