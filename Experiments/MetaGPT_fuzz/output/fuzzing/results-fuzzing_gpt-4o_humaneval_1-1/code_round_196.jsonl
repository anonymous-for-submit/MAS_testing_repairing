{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a particular number is prime, and false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": ["def check(is_prime):\n\tassert is_prime(255520) == False", "def check(is_prime):\n\tassert is_prime(6) == False", "def check(is_prime):\n\tassert is_prime(85) == False", "def check(is_prime):\n\tassert is_prime(83) == True", "def check(is_prime):\n\tassert is_prime(82) == False", "def check(is_prime):\n\tassert is_prime(7) == True", "def check(is_prime):\n\tassert is_prime(13) == True", "def check(is_prime):\n\tassert is_prime(57) == False", "def check(is_prime):\n\tassert is_prime(81) == False", "def check(is_prime):\n\tassert is_prime(3) == True", "def check(is_prime):\n\tassert is_prime(104) == False", "def check(is_prime):\n\tassert is_prime(90) == False", "def check(is_prime):\n\tassert is_prime(88) == False", "def check(is_prime):\n\tassert is_prime(255344) == False", "def check(is_prime):\n\tassert is_prime(12) == False", "def check(is_prime):\n\tassert is_prime(14316) == False", "def check(is_prime):\n\tassert is_prime(12938) == False", "def check(is_prime):\n\tassert is_prime(8) == False", "def check(is_prime):\n\tassert is_prime(102) == False", "def check(is_prime):\n\tassert is_prime(12628) == False", "def check(is_prime):\n\tassert is_prime(61) == True", "def check(is_prime):\n\tassert is_prime(5 * 17) == False", "def check(is_prime):\n\tassert is_prime(98) == False", "def check(is_prime):\n\tassert is_prime(63) == False", "def check(is_prime):\n\tassert is_prime(19) == True", "def check(is_prime):\n\tassert is_prime(12884) == False", "def check(is_prime):\n\tassert is_prime(87) == False", "def check(is_prime):\n\tassert is_prime(89) == True", "def check(is_prime):\n\tassert is_prime(255139) == False", "def check(is_prime):\n\tassert is_prime(12897) == False", "def check(is_prime):\n\tassert is_prime(73) == True", "def check(is_prime):\n\tassert is_prime(1) == False", "def check(is_prime):\n\tassert is_prime(15) == False", "def check(is_prime):\n\tassert is_prime(75) == False", "def check(is_prime):\n\tassert is_prime(18) == False", "def check(is_prime):\n\tassert is_prime(96) == False", "def check(is_prime):\n\tassert is_prime(5) == True", "def check(is_prime):\n\tassert is_prime(9) == False", "def check(is_prime):\n\tassert is_prime(255046) == False", "def check(is_prime):\n\tassert is_prime(14) == False", "def check(is_prime):\n\tassert is_prime(78) == False", "def check(is_prime):\n\tassert is_prime(255214) == False", "def check(is_prime):\n\tassert is_prime(76) == False", "def check(is_prime):\n\tassert is_prime(2) == True", "def check(is_prime):\n\tassert is_prime(254873) == True", "def check(is_prime):\n\tassert is_prime(13441 * 19) == False", "def check(is_prime):\n\tassert is_prime(13796) == False", "def check(is_prime):\n\tassert is_prime(11) == True", "def check(is_prime):\n\tassert is_prime(14253) == False", "def check(is_prime):\n\tassert is_prime(100) == False", "def check(is_prime):\n\tassert is_prime(20) == False", "def check(is_prime):\n\tassert is_prime(58) == False", "def check(is_prime):\n\tassert is_prime(22) == False", "def check(is_prime):\n\tassert is_prime(17) == True", "def check(is_prime):\n\tassert is_prime(13481) == False", "def check(is_prime):\n\tassert is_prime(12832) == False", "def check(is_prime):\n\tassert is_prime(254513) == False", "def check(is_prime):\n\tassert is_prime(106) == False", "def check(is_prime):\n\tassert is_prime(16) == False", "def check(is_prime):\n\tassert is_prime(13441) == True", "def check(is_prime):\n\tassert is_prime(66) == False", "def check(is_prime):\n\tassert is_prime(65) == False", "def check(is_prime):\n\tassert is_prime(80) == False", "def check(is_prime):\n\tassert is_prime(11 * 7) == False", "def check(is_prime):\n\tassert is_prime(101) == True", "def check(is_prime):\n\tassert is_prime(103) == True", "def check(is_prime):\n\tassert is_prime(56) == False", "def check(is_prime):\n\tassert is_prime(254423) == False", "def check(is_prime):\n\tassert is_prime(254790) == False", "def check(is_prime):\n\tassert is_prime(4) == False"], "test_case_list": ["assert is_prime(255520) == False", "assert is_prime(6) == False", "assert is_prime(85) == False", "assert is_prime(83) == True", "assert is_prime(82) == False", "assert is_prime(7) == True", "assert is_prime(13) == True", "assert is_prime(57) == False", "assert is_prime(81) == False", "assert is_prime(3) == True", "assert is_prime(104) == False", "assert is_prime(90) == False", "assert is_prime(88) == False", "assert is_prime(255344) == False", "assert is_prime(12) == False", "assert is_prime(14316) == False", "assert is_prime(12938) == False", "assert is_prime(8) == False", "assert is_prime(102) == False", "assert is_prime(12628) == False", "assert is_prime(61) == True", "assert is_prime(5 * 17) == False", "assert is_prime(98) == False", "assert is_prime(63) == False", "assert is_prime(19) == True", "assert is_prime(12884) == False", "assert is_prime(87) == False", "assert is_prime(89) == True", "assert is_prime(255139) == False", "assert is_prime(12897) == False", "assert is_prime(73) == True", "assert is_prime(1) == False", "assert is_prime(15) == False", "assert is_prime(75) == False", "assert is_prime(18) == False", "assert is_prime(96) == False", "assert is_prime(5) == True", "assert is_prime(9) == False", "assert is_prime(255046) == False", "assert is_prime(14) == False", "assert is_prime(78) == False", "assert is_prime(255214) == False", "assert is_prime(76) == False", "assert is_prime(2) == True", "assert is_prime(254873) == True", "assert is_prime(13441 * 19) == False", "assert is_prime(13796) == False", "assert is_prime(11) == True", "assert is_prime(14253) == False", "assert is_prime(100) == False", "assert is_prime(20) == False", "assert is_prime(58) == False", "assert is_prime(22) == False", "assert is_prime(17) == True", "assert is_prime(13481) == False", "assert is_prime(12832) == False", "assert is_prime(254513) == False", "assert is_prime(106) == False", "assert is_prime(16) == False", "assert is_prime(13441) == True", "assert is_prime(66) == False", "assert is_prime(65) == False", "assert is_prime(80) == False", "assert is_prime(11 * 7) == False", "assert is_prime(101) == True", "assert is_prime(103) == True", "assert is_prime(56) == False", "assert is_prime(254423) == False", "assert is_prime(254790) == False", "assert is_prime(4) == False"], "nl": "Return true if a given number is prime, and false otherwise.\n    ", "func": "def is_prime(n):", "examples": ">>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    ", "repair_prompt": ["def is_prime(n):\t\n'''Return true if a particular number is prime, and false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''"], "completions": ["from typing import List\n## main.py\n\nimport math\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    # Check if n is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # Check if n is 2, which is the only even prime number\n    if n == 2:\n        return True\n\n    # Check if n is even\n    if n % 2 == 0:\n        return False\n\n    # Use sympy's isprime for large numbers\n    if n > 10**6:\n        return isprime(n)\n\n    # Check divisibility from 3 to the square root of n\n    max_divisor = math.isqrt(n)\n    for i in range(3, max_divisor + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    # Miller-Rabin test for n > 2\n    def miller_rabin_test(d: int, n: int) -> bool:\n        import random\n        a = random.randint(2, n - 2)\n        x = pow(a, d, n)\n        if x == 1 or x == n - 1:\n            return True\n        while d != n - 1:\n            x = (x * x) % n\n            d *= 2\n            if x == 1:\n                return False\n            if x == n - 1:\n                return True\n        return False\n\n    # Find d such that n-1 = d * 2^r\n    def find_d_r(n: int):\n        d = n - 1\n        r = 0\n        while d % 2 == 0:\n            d //= 2\n            r += 1\n        return d, r\n\n    # Perform the test with a few iterations for accuracy\n    def is_probably_prime(n: int, k: int = 5) -> bool:\n        d, r = find_d_r(n)\n        for _ in range(k):\n            if not miller_rabin_test(d, n):\n                return False\n        return True\n\n    return is_probably_prime(n)\n\n# Example usage:\n# print(is_prime(17))  # Should return True\n# print(is_prime(18))  # Should return False\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n\ndef main():\n    # Example usage of the is_prime function\n    test_numbers = [1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 23, 24, 25, 29, 31]\n    for number in test_numbers:\n        print(f\"{number} is prime: {is_prime(number)}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n    \n    Args:\n        n (int): Integer to check for primality.\n        \n    Returns:\n        bool: True if n is prime, False otherwise.\n        \n    Examples:\n        >>> is_prime(2)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(17)\n        True\n        >>> is_prime(1)\n        False\n    \"\"\"\n    if n < 2:\n        return False\n    \n    # Check divisibility from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    if n < 2:\n        return False\n    return isprime(n)\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True  # 2 is the only even prime number\n    if n % 2 == 0:\n        return False  # Exclude all other even numbers\n\n    # Check for factors from 3 to sqrt(n)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    This function uses the sympy library to check if a given integer is prime.\n    It efficiently handles both small and large numbers.\n\n    Args:\n        n (int): Integer to check for primality.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    return isprime(n)\n", "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Check if a number is prime.\n\n    This function uses the 'sympy' library to determine if the given\n    integer 'n' is a prime number. It handles edge cases efficiently\n    and is optimized for performance with large numbers.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if 'n' is a prime number, False otherwise.\n    \"\"\"\n    # Handle edge cases\n    if n < 2:\n        return False\n\n    # Use sympy's isprime function for efficient prime checking\n    return isprime(n)\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    # Check if the number is less than 2, which are not prime numbers\n    if n < 2:\n        return False\n    \n    # Use sympy's isprime function to determine if the number is prime\n    return isprime(n)\n"], "plans": ["requirement analysis:\nThe function should accurately determine if a number is prime, handling edge cases such as 1 and even numbers efficiently. It should be optimized for performance, especially with large numbers, and provide clear output.\nrequirement pool:\n- Implement prime number detection algorithm\n- Optimize for large number performance\n- Ensure clear and concise output\n- Handle edge cases like 1 and even numbers\n- Provide user-friendly documentation\nWe will implement a prime number detection function using a simple algorithm that checks divisibility up to the square root of the number. This approach is efficient for large numbers and handles edge cases like 1 and even numbers. We will use the 'sympy' library to optimize performance for very large numbers, as it provides a reliable and fast method for prime checking.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and 2, and be optimized for performance with large numbers. Documentation should be clear for easy integration.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize for performance with large numbers\n- Handle edge cases such as 1 and 2\n- Provide comprehensive documentation\n- Include test cases for validation\nWe will implement a prime-checking function using a simple algorithm that efficiently handles large numbers. The function will use the Miller-Rabin primality test, which is a probabilistic test that can be made deterministic for numbers below a certain threshold. This approach balances performance and accuracy, especially for large numbers. We will also handle edge cases like 1 and 2 explicitly.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and 2, and be optimized for performance with large numbers.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize for performance with large numbers\n- Include comprehensive test cases\n- Provide detailed documentation\n- Ensure compatibility with Python 3.x\nWe will implement a prime-checking function using a simple algorithm that efficiently handles large numbers. The function will use trial division up to the square root of the number, which is a common and effective method for prime checking. We will ensure the function is optimized for performance and includes comprehensive test cases to validate its accuracy. Additionally, we will provide detailed documentation to explain the function's logic and usage.\n", "requirement analysis:\nThe function should efficiently determine if a number is prime, focusing on performance and accuracy. It should handle edge cases like small numbers and provide clear output.\nrequirement pool:\n- Implement prime number detection algorithm\n- Optimize for large number inputs\n- Ensure accurate results for edge cases\n- Provide user-friendly output\n- Document the function with examples\nWe will implement a function to check if a number is prime using an efficient algorithm. The Sieve of Eratosthenes is not suitable for single number checks, so we will use trial division up to the square root of the number, which is efficient for large numbers. We will also handle edge cases such as numbers less than 2, which are not prime. The function will be documented with examples for clarity.\n", "requirement analysis:\nThe requirement is to create a function that accurately determines if a number is prime. The function should handle edge cases such as numbers less than 2 and optimize for performance with larger numbers. User interaction should be straightforward, with clear input and output processes.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Design a simple user interface for input\n- Provide immediate feedback on the result\n- Optimize the algorithm for large numbers\n- Ensure compatibility with various input formats\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The function will handle edge cases such as numbers less than 2 and will be optimized for performance with larger numbers. We will use the 'sympy' library, which provides a reliable and efficient method for prime checking. This approach ensures accuracy and performance while keeping the implementation straightforward.\n", "requirement analysis:\nThe function should efficiently determine if a number is prime, handling both small and large numbers. It should be easy to integrate into other projects and provide accurate results.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize for performance with large numbers\n- Ensure the function is well-documented\n- Create examples and test cases\n- Provide educational resources on prime numbers\nWe will implement a prime-checking function using a simple algorithm that efficiently handles both small and large numbers. The function will utilize the 'math' library for any necessary mathematical operations, ensuring optimal performance. The algorithm will be based on trial division, which is effective for the range of numbers typically encountered in practical applications. We will also provide comprehensive documentation and examples to facilitate understanding and integration.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handling both small and large numbers efficiently. It should be easy to understand and integrate, with clear documentation and examples.\nrequirement pool:\n- Implement the prime checking algorithm\n- Optimize for performance with large numbers\n- Provide comprehensive documentation\n- Include educational examples\n- Ensure compatibility with various Python versions\nWe will implement a prime checking function using a simple algorithm that efficiently handles both small and large numbers. The function will use the 'sympy' library, which is optimized for mathematical computations and provides a reliable method for checking prime numbers. This library ensures high performance and accuracy, especially for large numbers. The function will be documented with clear examples to aid understanding and integration.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handling edge cases such as 1 and even numbers efficiently. It should be optimized for performance, especially with large numbers, and provide clear output.\nrequirement pool:\n- Implement prime number detection algorithm\n- Optimize for large number inputs\n- Ensure clear output format\n- Handle edge cases like 1 and even numbers\n- Provide user documentation\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The function will handle edge cases such as 1 and even numbers efficiently. For optimization, especially with large numbers, we will use the 'sympy' library, which provides a highly optimized method for prime checking. This will ensure both accuracy and performance.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handling edge cases like 1 and even numbers efficiently. It should be optimized for performance, especially with large numbers, and include clear documentation and examples for user understanding.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize for performance with large numbers\n- Include comprehensive test cases\n- Provide detailed documentation\n- Ensure compatibility with other Python modules\nWe will implement a prime-checking function using a simple and efficient algorithm, such as the 6k \u00b1 1 optimization, which is suitable for large numbers. This approach will ensure high performance and accuracy. We will also include comprehensive documentation and examples to aid understanding.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handling edge cases such as 1 and even numbers efficiently. It should be optimized for performance, especially with larger numbers, and provide clear documentation for ease of use.\nrequirement pool:\n- Implement prime checking logic\n- Optimize for large number performance\n- Handle edge cases effectively\n- Provide comprehensive documentation\n- Ensure compatibility with other mathematical tools\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The function will handle edge cases such as 1 and even numbers efficiently. We will use the 'sympy' library, which is a well-known library for symbolic mathematics in Python, to ensure accuracy and performance, especially for large numbers.\n"], "scores": [1.0, 0.9857, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, true, true, true, true, true, true, true, true], "pass_test_cases_num": [70, 69, 70, 70, 70, 70, 70, 70, 70, 70], "completion": "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    # Check if the number is less than 2, which are not prime numbers\n    if n < 2:\n        return False\n    \n    # Use sympy's isprime function to determine if the number is prime\n    return isprime(n)\n", "passed": true, "pass": true, "pass_num": 9, "round": 196, "mutate_method": "rephrase_one", "parent_index": 29}
