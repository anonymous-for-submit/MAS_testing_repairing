{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return the median of the elements present in the list l. The median is the middle value in a sorted, ascending or descending, list of numbers.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "entry_point": "median", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "test": ["def check(median):\n\tassert median([-6, 3, 8, 1002, 14, 16]) == 11.0", "def check(median):\n\tassert median([2, 10]) == 6.0", "def check(median):\n\tassert median([12, 3, 5, 11, 7, 4, 5]) == 5", "def check(median):\n\tassert median([-15, 4, 5, 1001, 15, 23]) == 10.0", "def check(median):\n\tassert median([-15, 3, 4, 1000, 13, 23]) == 8.5", "def check(median):\n\tassert median([-5, 9, 2, 996, 15, 22]) == 12.0", "def check(median):\n\tassert median([6, 2, 1, 8, 1]) == 2", "def check(median):\n\tassert median([7, 7]) == 7.0", "def check(median):\n\tassert median([4, 2, 2, 12, 10, 4, 10]) == 4", "def check(median):\n\tassert median([-12, 8, 9, 997, 14, 17]) == 11.5", "def check(median):\n\tassert median([1, 1, 3, 1, 10]) == 1", "def check(median):\n\tassert median([-8, 4, 8, 997, 15, 20]) == 11.5", "def check(median):\n\tassert median([8]) == 8", "def check(median):\n\tassert median([5]) == 5", "def check(median):\n\tassert median([8, 3, 2, 9, 6, 5, 2]) == 5", "def check(median):\n\tassert median([-15, 8, 4, 997, 7, 19]) == 7.5", "def check(median):\n\tassert median([-7, 4, 10, 998, 10, 22]) == 10.0", "def check(median):\n\tassert median([10]) == 10", "def check(median):\n\tassert median([5, 4]) == 4.5", "def check(median):\n\tassert median([3, 6, 6, 2, 6]) == 6", "def check(median):\n\tassert median([1, 8]) == 4.5", "def check(median):\n\tassert median([12, 1, 6, 11, 13, 6, 6]) == 6", "def check(median):\n\tassert median([8, 5, 7, 6, 3]) == 6", "def check(median):\n\tassert median([6, 2, 7, 8, 8, 5, 4]) == 6", "def check(median):\n\tassert median([7, 4]) == 5.5", "def check(median):\n\tassert median([-7, 6, 6, 996, 6, 15]) == 6.0", "def check(median):\n\tassert median([-15, 8, 1, 1004, 6, 19]) == 7.0", "def check(median):\n\tassert median([5, 5, 5, 7, 3]) == 5", "def check(median):\n\tassert median([6, 6, 2, 7, 6]) == 6", "def check(median):\n\tassert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "def check(median):\n\tassert median([4]) == 4", "def check(median):\n\tassert median([11, 2]) == 6.5", "def check(median):\n\tassert median([1, 3, 6, 4, 10]) == 4", "def check(median):\n\tassert median([-5, 9, 10, 1000, 12, 18]) == 11.0", "def check(median):\n\tassert median([10, 6, 4, 8, 4, 3, 11]) == 6", "def check(median):\n\tassert median([6, 5]) == 5.5", "def check(median):\n\tassert median([6, 6, 6, 9, 7, 4, 10]) == 6", "def check(median):\n\tassert median([6, 5, 5, 7, 10, 6, 8]) == 6", "def check(median):\n\tassert median([7, 4, 7, 1, 7]) == 7", "def check(median):\n\tassert median([-6, 9, 6, 997, 14, 25]) == 11.5", "def check(median):\n\tassert median([7, 8]) == 7.5", "def check(median):\n\tassert median([3, 1, 2, 4, 5]) == 3", "def check(median):\n\tassert median([-11, 3, 10, 1005, 10, 22]) == 10.0", "def check(median):\n\tassert median([6, 9]) == 7.5", "def check(median):\n\tassert median([11, 3, 6, 13, 6, 4, 9]) == 6", "def check(median):\n\tassert median([-10, 3, 3, 997, 15, 22]) == 9.0", "def check(median):\n\tassert median([-8, 5, 4, 1001, 14, 22]) == 9.5", "def check(median):\n\tassert median([11, 3, 1, 8, 5, 1, 8]) == 5", "def check(median):\n\tassert median([-15, 3, 2, 1002, 8, 22]) == 5.5", "def check(median):\n\tassert median([8, 5, 3, 2, 10]) == 5", "def check(median):\n\tassert median([11, 1, 3, 8, 13, 2, 7]) == 7", "def check(median):\n\tassert median([3, 6, 1, 4, 3]) == 3", "def check(median):\n\tassert median([10, 10]) == 10.0", "def check(median):\n\tassert median([1]) == 1", "def check(median):\n\tassert median([11, 6, 7, 6, 6, 1, 12]) == 6", "def check(median):\n\tassert median([1, 5, 6, 6, 3]) == 5", "def check(median):\n\tassert median([2, 6, 6, 7, 3]) == 6", "def check(median):\n\tassert median([3, 10]) == 6.5", "def check(median):\n\tassert median([-11, 5, 11, 1002, 10, 20]) == 10.5", "def check(median):\n\tassert median([6, 6, 6, 7, 10]) == 6", "def check(median):\n\tassert median([3, 5, 7, 4, 8]) == 5", "def check(median):\n\tassert median([13, 5, 6, 7, 14, 7, 9]) == 7", "def check(median):\n\tassert median([6, 4, 4, 11, 11, 2, 2]) == 4", "def check(median):\n\tassert median([12, 2, 2, 11, 11, 4, 2]) == 4", "def check(median):\n\tassert median([3, 9]) == 6.0", "def check(median):\n\tassert median([5, 6, 6, 7, 5, 2, 9]) == 6", "def check(median):\n\tassert median([4, 6]) == 5.0", "def check(median):\n\tassert median([1, 2]) == 1.5", "def check(median):\n\tassert median([3, 4, 5, 9, 7, 2, 3]) == 4", "def check(median):\n\tassert median([10, 4, 7, 11, 11, 3, 3]) == 7", "def check(median):\n\tassert median([6, 10]) == 8.0", "def check(median):\n\tassert median([-6, 6, 9, 1005, 8, 25]) == 8.5", "def check(median):\n\tassert median([8, 5, 5, 7, 10]) == 7", "def check(median):\n\tassert median([-13, 8, 6, 998, 13, 19]) == 10.5", "def check(median):\n\tassert median([7, 2, 7, 6, 6]) == 6", "def check(median):\n\tassert median([9]) == 9", "def check(median):\n\tassert median([7]) == 7", "def check(median):\n\tassert median([8, 1, 3, 9, 3]) == 3", "def check(median):\n\tassert median([8, 1, 3, 9, 9, 2, 7]) == 7", "def check(median):\n\tassert median([-9, 4, 2, 1002, 6, 23]) == 5.0", "def check(median):\n\tassert median([8, 2, 7, 6, 7]) == 7", "def check(median):\n\tassert median([1, 6, 7, 5, 4]) == 5", "def check(median):\n\tassert median([2, 2]) == 2.0", "def check(median):\n\tassert median([6]) == 6", "def check(median):\n\tassert median([-7, 7, 8, 1000, 13, 25]) == 10.5", "def check(median):\n\tassert median([-5, 1, 10, 1003, 10, 25]) == 10.0", "def check(median):\n\tassert median([9, 2]) == 5.5", "def check(median):\n\tassert median([3]) == 3", "def check(median):\n\tassert median([6, 1, 5, 7, 11, 6, 5]) == 6", "def check(median):\n\tassert median([7, 3, 6, 5, 2]) == 5", "def check(median):\n\tassert median([-11, 3, 3, 998, 15, 15]) == 9.0", "def check(median):\n\tassert median([5, 5]) == 5.0", "def check(median):\n\tassert median([9, 5, 2, 6, 13, 7, 2]) == 6", "def check(median):\n\tassert median([8, 6, 3, 5, 12, 5, 5]) == 5", "def check(median):\n\tassert median([11, 3]) == 7.0", "def check(median):\n\tassert median([3, 6, 5, 11, 5, 4, 6]) == 5", "def check(median):\n\tassert median([5, 1]) == 3.0", "def check(median):\n\tassert median([8, 8]) == 8.0", "def check(median):\n\tassert median([7, 2, 7, 1, 4]) == 4", "def check(median):\n\tassert median([9, 9]) == 9.0", "def check(median):\n\tassert median([3, 6, 2, 6, 9]) == 6", "def check(median):\n\tassert median([-11, 1, 3, 1004, 12, 17]) == 7.5", "def check(median):\n\tassert median([5, 2, 3, 9, 5, 7, 7]) == 5", "def check(median):\n\tassert median([6, 2, 4, 2, 6]) == 4", "def check(median):\n\tassert median([3, 1, 7, 4, 3]) == 3", "def check(median):\n\tassert median([5, 2, 2, 5, 6, 1, 3]) == 3", "def check(median):\n\tassert median([-15, 8, 4, 1000, 6, 16]) == 7.0", "def check(median):\n\tassert median([1, 6]) == 3.5", "def check(median):\n\tassert median([3, 2, 7, 8, 11, 5, 12]) == 7", "def check(median):\n\tassert median([8, 3, 5, 9, 10]) == 8", "def check(median):\n\tassert median([2, 9]) == 5.5"], "test_case_list": ["assert median([-6, 3, 8, 1002, 14, 16]) == 11.0", "assert median([2, 10]) == 6.0", "assert median([12, 3, 5, 11, 7, 4, 5]) == 5", "assert median([-15, 4, 5, 1001, 15, 23]) == 10.0", "assert median([-15, 3, 4, 1000, 13, 23]) == 8.5", "assert median([-5, 9, 2, 996, 15, 22]) == 12.0", "assert median([6, 2, 1, 8, 1]) == 2", "assert median([7, 7]) == 7.0", "assert median([4, 2, 2, 12, 10, 4, 10]) == 4", "assert median([-12, 8, 9, 997, 14, 17]) == 11.5", "assert median([1, 1, 3, 1, 10]) == 1", "assert median([-8, 4, 8, 997, 15, 20]) == 11.5", "assert median([8]) == 8", "assert median([5]) == 5", "assert median([8, 3, 2, 9, 6, 5, 2]) == 5", "assert median([-15, 8, 4, 997, 7, 19]) == 7.5", "assert median([-7, 4, 10, 998, 10, 22]) == 10.0", "assert median([10]) == 10", "assert median([5, 4]) == 4.5", "assert median([3, 6, 6, 2, 6]) == 6", "assert median([1, 8]) == 4.5", "assert median([12, 1, 6, 11, 13, 6, 6]) == 6", "assert median([8, 5, 7, 6, 3]) == 6", "assert median([6, 2, 7, 8, 8, 5, 4]) == 6", "assert median([7, 4]) == 5.5", "assert median([-7, 6, 6, 996, 6, 15]) == 6.0", "assert median([-15, 8, 1, 1004, 6, 19]) == 7.0", "assert median([5, 5, 5, 7, 3]) == 5", "assert median([6, 6, 2, 7, 6]) == 6", "assert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "assert median([4]) == 4", "assert median([11, 2]) == 6.5", "assert median([1, 3, 6, 4, 10]) == 4", "assert median([-5, 9, 10, 1000, 12, 18]) == 11.0", "assert median([10, 6, 4, 8, 4, 3, 11]) == 6", "assert median([6, 5]) == 5.5", "assert median([6, 6, 6, 9, 7, 4, 10]) == 6", "assert median([6, 5, 5, 7, 10, 6, 8]) == 6", "assert median([7, 4, 7, 1, 7]) == 7", "assert median([-6, 9, 6, 997, 14, 25]) == 11.5", "assert median([7, 8]) == 7.5", "assert median([3, 1, 2, 4, 5]) == 3", "assert median([-11, 3, 10, 1005, 10, 22]) == 10.0", "assert median([6, 9]) == 7.5", "assert median([11, 3, 6, 13, 6, 4, 9]) == 6", "assert median([-10, 3, 3, 997, 15, 22]) == 9.0", "assert median([-8, 5, 4, 1001, 14, 22]) == 9.5", "assert median([11, 3, 1, 8, 5, 1, 8]) == 5", "assert median([-15, 3, 2, 1002, 8, 22]) == 5.5", "assert median([8, 5, 3, 2, 10]) == 5", "assert median([11, 1, 3, 8, 13, 2, 7]) == 7", "assert median([3, 6, 1, 4, 3]) == 3", "assert median([10, 10]) == 10.0", "assert median([1]) == 1", "assert median([11, 6, 7, 6, 6, 1, 12]) == 6", "assert median([1, 5, 6, 6, 3]) == 5", "assert median([2, 6, 6, 7, 3]) == 6", "assert median([3, 10]) == 6.5", "assert median([-11, 5, 11, 1002, 10, 20]) == 10.5", "assert median([6, 6, 6, 7, 10]) == 6", "assert median([3, 5, 7, 4, 8]) == 5", "assert median([13, 5, 6, 7, 14, 7, 9]) == 7", "assert median([6, 4, 4, 11, 11, 2, 2]) == 4", "assert median([12, 2, 2, 11, 11, 4, 2]) == 4", "assert median([3, 9]) == 6.0", "assert median([5, 6, 6, 7, 5, 2, 9]) == 6", "assert median([4, 6]) == 5.0", "assert median([1, 2]) == 1.5", "assert median([3, 4, 5, 9, 7, 2, 3]) == 4", "assert median([10, 4, 7, 11, 11, 3, 3]) == 7", "assert median([6, 10]) == 8.0", "assert median([-6, 6, 9, 1005, 8, 25]) == 8.5", "assert median([8, 5, 5, 7, 10]) == 7", "assert median([-13, 8, 6, 998, 13, 19]) == 10.5", "assert median([7, 2, 7, 6, 6]) == 6", "assert median([9]) == 9", "assert median([7]) == 7", "assert median([8, 1, 3, 9, 3]) == 3", "assert median([8, 1, 3, 9, 9, 2, 7]) == 7", "assert median([-9, 4, 2, 1002, 6, 23]) == 5.0", "assert median([8, 2, 7, 6, 7]) == 7", "assert median([1, 6, 7, 5, 4]) == 5", "assert median([2, 2]) == 2.0", "assert median([6]) == 6", "assert median([-7, 7, 8, 1000, 13, 25]) == 10.5", "assert median([-5, 1, 10, 1003, 10, 25]) == 10.0", "assert median([9, 2]) == 5.5", "assert median([3]) == 3", "assert median([6, 1, 5, 7, 11, 6, 5]) == 6", "assert median([7, 3, 6, 5, 2]) == 5", "assert median([-11, 3, 3, 998, 15, 15]) == 9.0", "assert median([5, 5]) == 5.0", "assert median([9, 5, 2, 6, 13, 7, 2]) == 6", "assert median([8, 6, 3, 5, 12, 5, 5]) == 5", "assert median([11, 3]) == 7.0", "assert median([3, 6, 5, 11, 5, 4, 6]) == 5", "assert median([5, 1]) == 3.0", "assert median([8, 8]) == 8.0", "assert median([7, 2, 7, 1, 4]) == 4", "assert median([9, 9]) == 9.0", "assert median([3, 6, 2, 6, 9]) == 6", "assert median([-11, 1, 3, 1004, 12, 17]) == 7.5", "assert median([5, 2, 3, 9, 5, 7, 7]) == 5", "assert median([6, 2, 4, 2, 6]) == 4", "assert median([3, 1, 7, 4, 3]) == 3", "assert median([5, 2, 2, 5, 6, 1, 3]) == 3", "assert median([-15, 8, 4, 1000, 6, 16]) == 7.0", "assert median([1, 6]) == 3.5", "assert median([3, 2, 7, 8, 11, 5, 12]) == 7", "assert median([8, 3, 5, 9, 10]) == 8", "assert median([2, 9]) == 5.5"], "nl": "Return median of elements in the list l.\n    ", "func": "def median(l: list):", "examples": ">>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    ", "repair_prompt": ["def median(l: list):\t\n'''Return the median of the elements present in the list l. The median is the middle value in a sorted, ascending or descending, list of numbers.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''"], "completions": ["from typing import List\n## main.py\n\nimport statistics\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (List[float]): List of numeric values.\n\n    Returns:\n        float: Median value as a float.\n\n    Raises:\n        ValueError: If the list contains non-numeric values or is empty.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty. Cannot compute median.\")\n    \n    # Validate that all elements in the list are numeric\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(f\"Non-numeric value found: {item}\")\n\n    # Calculate and return the median using the statistics module\n    return statistics.median(l)\n", "from typing import List\n## main.py\n\nimport statistics\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Parameters:\n    l (list): A list of numeric values.\n\n    Returns:\n    float: The median value of the list.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n\n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty. Cannot compute median.\")\n\n    # Check for non-numeric values\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"The list contains non-numeric values.\")\n\n    # Sort the list and calculate the median\n    sorted_list = sorted(l)\n    return statistics.median(sorted_list)\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (list): List of numeric values.\n\n    Returns:\n        float: Median value.\n\n    Raises:\n        ValueError: If the list contains non-numeric values or is empty.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric values\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List contains non-numeric values.\")\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Calculate median\n    if n % 2 == 1:\n        # Odd number of elements, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # Even number of elements, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n", "from typing import List\n## main.py\n\nimport statistics\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Parameters:\n    l (list): A list of numeric values.\n\n    Returns:\n    float: The median value of the list.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty. Cannot compute median.\")\n    \n    # Validate all elements are numeric\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List contains non-numeric values.\")\n    \n    # Calculate and return the median\n    return statistics.median(l)\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (list): List of numbers (integers or floats).\n\n    Returns:\n        float: The median value.\n\n    Raises:\n        ValueError: If the list contains non-numeric values or is empty.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Validate all elements are numeric\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List contains non-numeric values.\")\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Calculate median\n    if n % 2 == 1:\n        # Odd number of elements, return the middle one\n        return float(sorted_list[n // 2])\n    else:\n        # Even number of elements, return the average of the two middle ones\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(median([3, 1, 4, 1, 5, 9, 2]))  # Output: 3.0\n        print(median([3, 1, 4, 1, 5, 9]))     # Output: 3.5\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    This function sorts the list and calculates the median based on the number of elements.\n    It ignores non-numeric values and handles empty lists by returning None.\n    \n    Args:\n        l: List of numbers (integers or floats).\n        \n    Returns:\n        Median value as a float, or None if the list is empty or contains no valid numbers.\n    \n    Examples:\n        >>> median([3, 1, 2, 4, 5])\n        3\n        >>> median([-10, 4, 6, 1000, 10, 20])\n        15.0\n        >>> median([])\n        None\n    \"\"\"\n    # Filter out non-numeric values\n    numeric_values = [x for x in l if isinstance(x, (int, float))]\n    \n    # Handle empty list or list with no valid numbers\n    if not numeric_values:\n        return None\n    \n    # Sort the list\n    sorted_values = sorted(numeric_values)\n    \n    # Calculate the median\n    n = len(sorted_values)\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # Even number of elements, return the average of the middle two\n        median_value = (sorted_values[mid - 1] + sorted_values[mid]) / 2.0\n    else:\n        # Odd number of elements, return the middle element\n        median_value = float(sorted_values[mid])\n    \n    return median_value\n", "from typing import List\n## main.py\n\nimport statistics\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    '''\n    Calculate and return the median of a list of numbers.\n    \n    Args:\n        l: List of numbers (integers or floats)\n        \n    Returns:\n        Median value as a float\n        \n    Raises:\n        ValueError: If the list is empty or contains non-numeric values\n    '''\n    if not l:\n        raise ValueError(\"The list is empty. Cannot compute median.\")\n    \n    # Validate all elements are numeric\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List contains non-numeric values.\")\n    \n    # Calculate and return the median\n    return statistics.median(l)\n", "from typing import List\n## main.py\n\nimport statistics\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    This function sorts the list and calculates the median using Python's\n    'statistics' module. It handles empty lists by returning None and raises\n    an error for non-numeric values to ensure data integrity.\n    \n    Args:\n        l: List of numbers.\n        \n    Returns:\n        Median value as a float.\n        \n    Raises:\n        ValueError: If the list contains non-numeric values.\n    \"\"\"\n    if not l:\n        return None\n    \n    # Validate that all elements are numeric\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List contains non-numeric values.\")\n    \n    # Calculate and return the median\n    return statistics.median(l)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(median([3, 1, 2, 4, 5]))  # Output: 3\n        print(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\nimport statistics\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (List[float]): List of numeric values.\n\n    Returns:\n        float: Median value.\n\n    Raises:\n        ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n    # Validate input\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"The list contains non-numeric values.\")\n    \n    # Calculate and return the median\n    return statistics.median(l)\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    This function sorts the list and calculates the median based on the list length.\n    It handles edge cases such as empty lists and single-element lists.\n\n    Args:\n        l: List of numbers (integers or floats).\n\n    Returns:\n        The median value as a float.\n\n    Raises:\n        ValueError: If the list is empty.\n        TypeError: If the list contains non-numeric elements.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty, cannot compute median.\")\n\n    # Check for non-numeric elements\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"The list contains non-numeric elements.\")\n\n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n\n    # Calculate median\n    if n % 2 == 0:\n        # If even, average the two middle numbers\n        median_value = (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        # If odd, return the middle number\n        median_value = float(sorted_list[mid])\n\n    return median_value\n"], "plans": ["requirement analysis:\nThe function should accurately compute the median for both odd and even number of elements in the list. It should handle edge cases such as empty lists and lists with non-numeric values gracefully.\nrequirement pool:\n- Implement median calculation for odd and even length lists.\n- Optimize for performance with large datasets.\n- Include error handling for non-numeric values.\n- Provide detailed documentation and examples.\n- Ensure compatibility with existing Python data structures.\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle both odd and even length lists and will raise an error for non-numeric values to ensure data integrity. We will use the 'statistics' module for simplicity and performance optimization, as it is part of the Python standard library and provides a reliable median calculation method.\n", "requirement analysis:\nThe requirement is to implement a function that calculates the median of a list of numbers. The function should handle both odd and even number of elements and return the correct median value. It should also be able to process lists with negative numbers and large datasets efficiently.\nrequirement pool:\n- Implement median calculation for odd and even number of elements\n- Ensure function handles empty lists gracefully\n- Optimize performance for large datasets\n- Include comprehensive documentation\n- Add support for different data types\nWe will implement a function to calculate the median of a list of numbers using Python's built-in capabilities. The function will handle both odd and even numbers of elements, as well as edge cases like empty lists or lists with one element. We will use the 'statistics' module from Python's standard library to ensure efficient and accurate calculations, especially for large datasets. This approach leverages existing, optimized code and ensures compatibility with Python's native data types.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even lists. It should handle edge cases like empty lists or lists with non-numeric values gracefully. Performance is crucial for large datasets.\nrequirement pool:\n- Implement median calculation for odd and even number of elements\n- Optimize for performance with large datasets\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a simple function to calculate the median of a list of numbers. The function will sort the list and then determine the median based on whether the number of elements is odd or even. We will use Python's built-in capabilities to handle sorting and median calculation to ensure performance and simplicity. The function will raise an error if non-numeric values are present in the list, as this aligns with the requirement for error handling of invalid inputs.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even number of elements in the list. It should handle edge cases such as empty lists and lists with non-numeric values gracefully.\nrequirement pool:\n- Implement median calculation for odd and even length lists\n- Optimize for performance with large datasets\n- Handle edge cases like empty lists\n- Provide detailed documentation and examples\n- Ensure compatibility with other data processing libraries\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. To handle large datasets efficiently, we will use the 'statistics' module, which is optimized for performance. The function will raise an error for non-numeric values to ensure data integrity. We will also handle edge cases such as empty lists by raising a ValueError.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for large datasets\n- Handle edge cases such as empty lists\n- Provide comprehensive documentation\n- Include unit tests for various scenarios\nWe will implement a custom median function that efficiently calculates the median of a list of numbers. We will use Python's built-in sorting capabilities to ensure performance is optimized for large datasets. The function will handle both odd and even numbers of elements correctly. For non-numeric values, the function will raise a ValueError to ensure data integrity. We will also provide comprehensive documentation and unit tests to cover various scenarios.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance is crucial for large datasets, and the function should be optimized accordingly.\nrequirement pool:\n- Implement the median calculation logic\n- Optimize for performance with large datasets\n- Handle edge cases like empty lists\n- Provide detailed documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a custom median function that sorts the list and calculates the median based on the number of elements. We will use Python's built-in capabilities to handle sorting and median calculation efficiently. The function will ignore non-numeric values and handle empty lists by returning None. We will provide detailed documentation and examples to ensure clarity.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even lists. It should handle edge cases like empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation for odd and even number of elements\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a function to calculate the median of a list of numbers using Python's built-in capabilities. The function will handle both odd and even numbers of elements efficiently. We will use the 'statistics' module for its simplicity and reliability, which is built into Python and does not require additional installation. The function will include error handling to manage non-numeric values by raising an appropriate error. This approach ensures compatibility with different Python versions and optimizes performance for large datasets.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-sized lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Handle edge cases such as empty lists\n- Provide comprehensive documentation and examples\n- Ensure compatibility with Python's standard data types\nWe will implement a simple function using Python's built-in capabilities to calculate the median. For performance optimization, we will use the 'statistics' module which is efficient for large datasets. The function will handle empty lists by returning None and will raise an error for non-numeric values to ensure data integrity.\n", "requirement analysis:\nThe requirement is to develop a function that accurately calculates the median of a list of numbers. The function should handle both odd and even number of elements and return the correct median value. It should be efficient and easy to integrate into larger systems.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Ensure the function handles edge cases, such as empty lists\n- Provide comprehensive documentation and examples\n- Include unit tests to verify function accuracy\nWe will implement a function to calculate the median of a list of numbers using Python's built-in capabilities. The function will handle both odd and even numbers of elements and will raise an error for empty lists or non-numeric inputs. We will use the 'statistics' module for simplicity and reliability, as it is part of Python's standard library and provides a straightforward median calculation. This approach ensures accuracy and ease of integration into larger systems.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even number of elements in a list. It should handle edge cases like empty lists and single-element lists gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Accurate median calculation for odd and even number of elements\n- Handle edge cases like empty lists and single-element lists\n- Optimize performance for large datasets\n- Provide clear documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a simple function to calculate the median of a list using Python's built-in capabilities. The function will handle edge cases such as empty lists and single-element lists. For performance optimization, we will use the 'sorted' function which is efficient for large datasets. We will not use external libraries to keep the solution lightweight and easy to use.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [111, 111, 111, 111, 111, 111, 111, 111, 111, 111], "completion": "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    This function sorts the list and calculates the median based on the list length.\n    It handles edge cases such as empty lists and single-element lists.\n\n    Args:\n        l: List of numbers (integers or floats).\n\n    Returns:\n        The median value as a float.\n\n    Raises:\n        ValueError: If the list is empty.\n        TypeError: If the list contains non-numeric elements.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty, cannot compute median.\")\n\n    # Check for non-numeric elements\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"The list contains non-numeric elements.\")\n\n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n\n    # Calculate median\n    if n % 2 == 0:\n        # If even, average the two middle numbers\n        median_value = (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        # If odd, return the middle number\n        median_value = float(sorted_list[mid])\n\n    return median_value\n", "passed": true, "pass": true, "pass_num": 10, "round": 41, "mutate_method": "expand_one2two", "parent_index": 41}
