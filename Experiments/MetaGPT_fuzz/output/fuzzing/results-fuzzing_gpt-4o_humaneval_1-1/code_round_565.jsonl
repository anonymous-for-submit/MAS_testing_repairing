{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure your solution accounts for input strings of varying lengths and combinations.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure your solution accounts for input strings of varying lengths and combinations.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' and returns\n    a string with numbers sorted from smallest to largest.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted from smallest to largest.\n    \"\"\"\n    # Mapping of numeral strings to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of integer values back to their numeral strings\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n\n    # Split the input string into a list of numeral strings\n    numeral_list = numbers.split()\n\n    # Convert numeral strings to integers, ignoring any invalid numerals\n    int_list = []\n    for numeral in numeral_list:\n        if numeral in numeral_to_int:\n            int_list.append(numeral_to_int[numeral])\n        else:\n            raise ValueError(f\"Invalid numeral '{numeral}' found in input.\")\n\n    # Sort the list of integers\n    int_list.sort()\n\n    # Convert sorted integers back to numeral strings\n    sorted_numerals = [int_to_numeral[i] for i in int_list]\n\n    # Join the sorted numeral strings into a single space-delimited string\n    return ' '.join(sorted_numerals)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words from 'zero' to 'nine'.\n    \n    Args:\n        numbers (str): A space-delimited string of numeral words.\n        \n    Returns:\n        str: A string with numbers sorted from smallest to largest.\n        \n    Raises:\n        ValueError: If any word in the input is not a valid numeral word.\n    \"\"\"\n    # Mapping of numeral words to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of integer values back to numeral words\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert numeral words to integers, with error handling for invalid inputs\n    try:\n        int_values = [numeral_to_int[word] for word in words]\n    except KeyError as e:\n        raise ValueError(f\"Invalid numeral word: {e.args[0]}. Valid words are 'zero' to 'nine'.\")\n    \n    # Sort the integer values\n    int_values.sort()\n    \n    # Convert sorted integers back to numeral words\n    sorted_words = [int_to_numeral[value] for value in int_values]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' and returns\n    a string with numbers sorted from smallest to largest.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Mapping of word-based numerals to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of integer values back to their word-based numerals\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n\n    # Split the input string into individual numeral words\n    numeral_words = numbers.split()\n\n    # Convert numeral words to their corresponding integer values\n    try:\n        numeral_values = [numeral_to_int[word] for word in numeral_words]\n    except KeyError as e:\n        raise ValueError(f\"Invalid numeral word: {e.args[0]}\")\n\n    # Sort the list of integer values\n    sorted_values = sorted(numeral_values)\n\n    # Convert sorted integer values back to their word-based numerals\n    sorted_numeral_words = [int_to_numeral[value] for value in sorted_values]\n\n    # Join the sorted numeral words into a single space-delimited string\n    sorted_numbers = ' '.join(sorted_numeral_words)\n\n    return sorted_numbers\n\n# Example usage:\n# input_string = 'three one five'\n# print(sort_numbers(input_string))  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine'.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Mapping of numeral strings to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of integer values back to their numeral strings\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n\n    # Split the input string into a list of numeral strings\n    numeral_list = numbers.split()\n\n    # Convert numeral strings to integers\n    int_list = [numeral_to_int[numeral] for numeral in numeral_list]\n\n    # Sort the list of integers\n    int_list.sort()\n\n    # Convert sorted integers back to numeral strings\n    sorted_numeral_list = [int_to_numeral[i] for i in int_list]\n\n    # Join the sorted numeral strings into a single space-delimited string\n    sorted_numbers = ' '.join(sorted_numeral_list)\n\n    return sorted_numbers\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numeral words.\n\n    Returns:\n        str: A space-delimited string of sorted numeral words or an error message if input is invalid.\n    \"\"\"\n    # Mapping of numeral words to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Mapping of integer values back to numeral words\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n\n    # Split the input string into a list of numeral words\n    numeral_list = numbers.split()\n\n    # Validate input: Check for empty input or invalid numeral words\n    if not numeral_list:\n        return \"Error: Input is empty.\"\n    \n    try:\n        # Convert numeral words to integers\n        int_list = [numeral_to_int[numeral] for numeral in numeral_list]\n    except KeyError:\n        return \"Error: Input contains invalid numeral words.\"\n\n    # Sort the list of integers\n    int_list.sort()\n\n    # Convert sorted integers back to numeral words\n    sorted_numerals = [int_to_numeral[i] for i in int_list]\n\n    # Join the sorted numeral words into a space-delimited string\n    return ' '.join(sorted_numerals)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words from 'zero' to 'nine'.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted from smallest to largest.\n\n    Raises:\n        ValueError: If any numeral in the input string is not between 'zero' and 'nine'.\n    \"\"\"\n    # Mapping of numeral words to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from integer values to numeral words\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    \n    # Split the input string into a list of numeral words\n    numeral_list = numbers.split()\n    \n    # Validate input numerals\n    for numeral in numeral_list:\n        if numeral not in numeral_to_int:\n            raise ValueError(f\"Invalid numeral input: '{numeral}'. Expected numerals from 'zero' to 'nine'.\")\n    \n    # Sort the numeral list based on their integer values\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_to_int[x])\n    \n    # Join the sorted numeral list into a space-delimited string\n    return ' '.join(sorted_numerals)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with the numerals sorted in ascending order.\n    \"\"\"\n    # Mapping of numeral words to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from integer values back to numeral words\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    \n    # Split the input string into a list of numeral words\n    numeral_list = numbers.split()\n    \n    # Filter out any invalid numeral words\n    valid_numerals = [num for num in numeral_list if num in numeral_to_int]\n    \n    # Sort the list of valid numeral words based on their integer values\n    sorted_numerals = sorted(valid_numerals, key=lambda x: numeral_to_int[x])\n    \n    # Join the sorted numeral words back into a space-delimited string\n    return ' '.join(sorted_numerals)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine'.\n    \n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n    \n    Returns:\n        str: A string with numbers sorted from smallest to largest.\n    \n    Raises:\n        ValueError: If the input contains invalid numerals or is empty.\n    \"\"\"\n    # Mapping of string numerals to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of integer values back to their string numerals\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    \n    # Split the input string into a list of numerals\n    numeral_list = numbers.split()\n    \n    # Check for empty input\n    if not numeral_list:\n        raise ValueError(\"Input cannot be empty\")\n    \n    # Convert numerals to integers, raising an error for invalid numerals\n    try:\n        int_list = [numeral_to_int[numeral] for numeral in numeral_list]\n    except KeyError as e:\n        raise ValueError(f\"Invalid numeral in input: {e.args[0]}\")\n    \n    # Sort the list of integers\n    int_list.sort()\n    \n    # Convert the sorted integers back to numerals\n    sorted_numerals = [int_to_numeral[i] for i in int_list]\n    \n    # Join the sorted numerals into a space-delimited string\n    return ' '.join(sorted_numerals)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine'.\n    \n    Args:\n        numbers (str): A string containing space-delimited numerals.\n        \n    Returns:\n        str: A string with numerals sorted from smallest to largest.\n        \n    Raises:\n        ValueError: If the input contains invalid numerals.\n    \"\"\"\n    # Mapping of numeral words to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of integer values back to numeral words\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    \n    # Split the input string into individual numeral words\n    numeral_words = numbers.split()\n    \n    # Validate input and map words to numbers\n    try:\n        numeral_values = [numeral_to_int[word] for word in numeral_words]\n    except KeyError as e:\n        raise ValueError(f\"Invalid numeral: {e.args[0]}\")\n    \n    # Sort the list of numbers\n    numeral_values.sort()\n    \n    # Map sorted numbers back to words\n    sorted_numeral_words = [int_to_numeral[value] for value in numeral_values]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_numeral_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numeral words.\n\n    Returns:\n        str: A space-delimited string of sorted numeral words.\n\n    Raises:\n        ValueError: If the input contains invalid numeral words.\n    \"\"\"\n    # Mapping of numeral words to their corresponding numeric values\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of numeric values back to numeral words\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n\n    # Split the input string into individual numeral words\n    numeral_words = numbers.split()\n\n    # Convert numeral words to numbers\n    try:\n        numeric_values = [numeral_to_number[word] for word in numeral_words]\n    except KeyError as e:\n        raise ValueError(f\"Invalid numeral word: {e.args[0]}\") from None\n\n    # Sort the numeric values\n    numeric_values.sort()\n\n    # Convert sorted numbers back to numeral words\n    sorted_numeral_words = [number_to_numeral[num] for num in numeric_values]\n\n    # Join the sorted numeral words into a single string\n    return ' '.join(sorted_numeral_words)\n"], "plans": ["requirement analysis:\nThe requirement is to sort a space-delimited string of numerals from 'zero' to 'nine'. The solution must handle varying lengths and combinations of input strings efficiently, ensuring accurate sorting.\nrequirement pool:\n- Implement numeral sorting functionality\n- Optimize performance for large inputs\n- Design intuitive user interface\n- Ensure compatibility with different devices\n- Provide user feedback for incorrect inputs\nWe will implement a function that maps the numeral strings to their corresponding integer values, sort them, and then map them back to their string representations. This approach ensures accurate sorting and handles varying input lengths efficiently. We will use Python's built-in sorting capabilities for optimal performance.\n", "requirement analysis:\nThe requirement is to develop a function that sorts a space-delimited string of numerals from 'zero' to 'nine'. The function should handle varying lengths and combinations of input strings efficiently. It should also provide clear feedback for invalid inputs.\nrequirement pool:\n- Implement the sorting algorithm for numeral strings.\n- Optimize performance for longer input strings.\n- Develop user-friendly error messages for invalid inputs.\n- Enhance the user interface for better experience.\n- Conduct user testing to gather feedback on usability.\nWe will implement a function that maps numeral words to their corresponding integer values, sorts them, and then maps them back to numeral words. We'll use a dictionary for efficient mapping and sorting. The function will also include error handling to provide user-friendly messages for invalid inputs.\n", "requirement analysis:\nThe requirement is to sort a space-delimited string of numerals represented as words from 'zero' to 'nine'. The solution must handle varying lengths and combinations of input strings efficiently, ensuring accurate sorting.\nrequirement pool:\n- Implement sorting logic for word-based numerals.\n- Optimize performance for large input strings.\n- Ensure user-friendly error handling for invalid inputs.\n- Provide a clear and concise user interface.\n- Include comprehensive testing for edge cases.\nWe will implement a function that maps word-based numerals to their corresponding integer values, sort these integers, and then map them back to their word representation. This approach ensures accurate sorting and handles varying input lengths efficiently. We will use Python's built-in sorting capabilities for optimal performance.\n", "requirement analysis:\nThe function should accurately sort numeral strings from 'zero' to 'nine'. It must handle varying input lengths and combinations efficiently, ensuring a seamless user experience.\nrequirement pool:\n- Accurate sorting of numeral strings\n- Efficient handling of large inputs\n- User-friendly interface\n- Optimization for performance\n- Support for additional numeral formats\nWe will implement a function that maps the numeral strings to their corresponding integer values, sort these integers, and then map them back to their string representations. This approach ensures accurate sorting and handles varying input lengths efficiently. We will use Python's built-in sorting capabilities for optimal performance.\n", "requirement analysis:\nThe requirement is to develop a function that sorts a space-delimited string of numerals from 'zero' to 'nine'. The function should handle varying lengths and combinations of input strings, ensuring accurate sorting and a seamless user experience.\nrequirement pool:\n- Implement the main sorting function for numeral strings.\n- Optimize the function for performance with longer inputs.\n- Develop user-friendly error handling for invalid inputs.\n- Create a simple and intuitive user interface.\n- Conduct user testing to ensure satisfaction with the sorting process.\nWe will implement a function that maps numeral words to their corresponding integer values, sorts these integers, and then maps them back to numeral words. We will use Python's built-in sorting capabilities for efficient performance. Additionally, we will include error handling to manage invalid inputs and provide clear error messages.\n", "requirement analysis:\nThe function must accurately sort numeral strings from 'zero' to 'nine'. It should handle varying input lengths and combinations efficiently, ensuring correct order and performance.\nrequirement pool:\n- Accurate sorting of numeral strings\n- Support for all valid numeral inputs\n- Efficient performance with long strings\n- User-friendly interface for input and output\n- Additional features like error handling for invalid inputs\nWe will implement a function that maps numeral strings to their corresponding integer values, sorts these integers, and then maps them back to their numeral string representations. This approach ensures accurate sorting and efficient performance. We will use a dictionary for the mapping, which provides O(1) lookup time, ensuring the function handles varying input lengths efficiently.\n", "requirement analysis:\nThe requirement is to develop a function that sorts a space-delimited string of numerals from 'zero' to 'nine'. The function should handle various input lengths and combinations, ensuring the output is sorted in ascending order.\nrequirement pool:\n- Implement the sorting algorithm for numeral strings.\n- Ensure the function handles edge cases and invalid inputs gracefully.\n- Optimize the function for performance with large inputs.\n- Provide clear documentation and examples for users.\n- Design a user-friendly interface for input and output.\nWe will implement a function that maps the numeral words to their corresponding integer values, sort these integers, and then map them back to their numeral words. This approach ensures accurate sorting and handles varying input lengths efficiently. We will use a dictionary for the mapping process.\n", "requirement analysis:\nThe requirement is to develop a function that sorts a space-delimited string of numerals from 'zero' to 'nine'. The function should handle varying input lengths and combinations, ensuring accurate sorting and efficient performance.\nrequirement pool:\n- Implement the main sorting function\n- Handle edge cases and invalid inputs\n- Optimize performance for longer inputs\n- Enhance user experience with clear error messages\n- Ensure compatibility with different input formats\nWe will implement a function that maps the string numerals to their corresponding integer values, sort them, and then map them back to their string representation. We will use a dictionary for the mapping and handle invalid inputs by raising a ValueError with a clear error message.\n", "requirement analysis:\nThe requirement is to develop a function that sorts a space-delimited string of numerals from 'zero' to 'nine'. The function should handle varying input lengths and combinations, ensuring accurate sorting and user-friendly error handling.\nrequirement pool:\n- Implement the sorting algorithm for numeral strings.\n- Develop error handling for invalid inputs.\n- Optimize performance for large input sizes.\n- Enhance user interface for better usability.\n- Conduct user testing to gather feedback.\nWe will implement a function that maps the numeral words to their corresponding integer values, sort these integers, and then map them back to their respective words. We will use a dictionary for the mapping and handle invalid inputs by checking if all words are valid numerals. The function will be optimized for performance by using Python's built-in sorting capabilities.\n", "requirement analysis:\nThe function should accurately map numeral words to their corresponding numeric values, sort them, and then map them back to words. It should handle varying input lengths and provide feedback for invalid inputs.\nrequirement pool:\n- Implement numeral to numeric mapping and sorting\n- Optimize for performance with large inputs\n- Develop user-friendly error handling\n- Enhance UI for better user experience\n- Add support for additional numeral words\nWe will implement a function that maps numeral words to their corresponding numeric values using a dictionary, sort them numerically, and then map them back to words. We will handle invalid inputs by providing clear error messages. The function will be optimized for performance to handle large inputs efficiently.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 0.9917, 1.0, 1.0, 0.9917, 1.0, 1.0], "pass_results": [true, true, true, true, false, true, true, false, true, true], "pass_test_cases_num": [121, 121, 121, 121, 120, 121, 121, 120, 121, 121], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numeral words.\n\n    Returns:\n        str: A space-delimited string of sorted numeral words.\n\n    Raises:\n        ValueError: If the input contains invalid numeral words.\n    \"\"\"\n    # Mapping of numeral words to their corresponding numeric values\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of numeric values back to numeral words\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n\n    # Split the input string into individual numeral words\n    numeral_words = numbers.split()\n\n    # Convert numeral words to numbers\n    try:\n        numeric_values = [numeral_to_number[word] for word in numeral_words]\n    except KeyError as e:\n        raise ValueError(f\"Invalid numeral word: {e.args[0]}\") from None\n\n    # Sort the numeric values\n    numeric_values.sort()\n\n    # Convert sorted numbers back to numeral words\n    sorted_numeral_words = [number_to_numeral[num] for num in numeric_values]\n\n    # Join the sorted numeral words into a single string\n    return ' '.join(sorted_numeral_words)\n", "passed": true, "pass": true, "pass_num": 8, "round": 565, "mutate_method": "add_1_sentence_at_end", "parent_index": 278}
