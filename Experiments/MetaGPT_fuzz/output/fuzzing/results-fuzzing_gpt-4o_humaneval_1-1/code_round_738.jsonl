{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. The greatest common divisor is the largest integer that divides both a and b without leaving a remainder. It is a fundamental concept in number theory and is used in various applications.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": ["def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 16) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(47, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(45, 15) == 15", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 6) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 12) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 63) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 64) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 2) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 14) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(149, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 2) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 5) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 18) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 12) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 12) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 9) == 9", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 57) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 65) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 55) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 3) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 20) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(7, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(51, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 3) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 15) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 20) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 4) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(52, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 10) == 10", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 60) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 14) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 60) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 16) == 8", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(146, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 63) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 6) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 15) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 20) == 2"], "test_case_list": ["assert greatest_common_divisor(6, 16) == 2", "assert greatest_common_divisor(47, 19) == 1", "assert greatest_common_divisor(141, 65) == 1", "assert greatest_common_divisor(45, 15) == 15", "assert greatest_common_divisor(1, 6) == 1", "assert greatest_common_divisor(50, 14) == 2", "assert greatest_common_divisor(53, 16) == 1", "assert greatest_common_divisor(3, 9) == 3", "assert greatest_common_divisor(50, 11) == 1", "assert greatest_common_divisor(48, 12) == 12", "assert greatest_common_divisor(49, 9) == 1", "assert greatest_common_divisor(6, 14) == 2", "assert greatest_common_divisor(141, 63) == 3", "assert greatest_common_divisor(5, 11) == 1", "assert greatest_common_divisor(11, 12) == 1", "assert greatest_common_divisor(12, 13) == 1", "assert greatest_common_divisor(15, 19) == 1", "assert greatest_common_divisor(46, 18) == 2", "assert greatest_common_divisor(4, 12) == 4", "assert greatest_common_divisor(46, 13) == 1", "assert greatest_common_divisor(12, 11) == 1", "assert greatest_common_divisor(11, 17) == 1", "assert greatest_common_divisor(148, 64) == 4", "assert greatest_common_divisor(5, 9) == 1", "assert greatest_common_divisor(5, 2) == 1", "assert greatest_common_divisor(1, 11) == 1", "assert greatest_common_divisor(141, 61) == 1", "assert greatest_common_divisor(53, 14) == 1", "assert greatest_common_divisor(12, 10) == 2", "assert greatest_common_divisor(147, 62) == 1", "assert greatest_common_divisor(2, 4) == 2", "assert greatest_common_divisor(142, 63) == 1", "assert greatest_common_divisor(4, 6) == 2", "assert greatest_common_divisor(149, 64) == 1", "assert greatest_common_divisor(6, 2) == 2", "assert greatest_common_divisor(5, 13) == 1", "assert greatest_common_divisor(148, 58) == 2", "assert greatest_common_divisor(46, 10) == 2", "assert greatest_common_divisor(44, 12) == 4", "assert greatest_common_divisor(5, 12) == 1", "assert greatest_common_divisor(13, 15) == 1", "assert greatest_common_divisor(10, 17) == 1", "assert greatest_common_divisor(2, 7) == 1", "assert greatest_common_divisor(5, 5) == 5", "assert greatest_common_divisor(1, 7) == 1", "assert greatest_common_divisor(48, 18) == 6", "assert greatest_common_divisor(46, 12) == 2", "assert greatest_common_divisor(3, 12) == 3", "assert greatest_common_divisor(54, 9) == 9", "assert greatest_common_divisor(142, 57) == 1", "assert greatest_common_divisor(5, 16) == 1", "assert greatest_common_divisor(142, 55) == 1", "assert greatest_common_divisor(44, 16) == 4", "assert greatest_common_divisor(145, 63) == 1", "assert greatest_common_divisor(144, 59) == 1", "assert greatest_common_divisor(8, 9) == 1", "assert greatest_common_divisor(148, 62) == 2", "assert greatest_common_divisor(49, 16) == 1", "assert greatest_common_divisor(140, 65) == 5", "assert greatest_common_divisor(145, 55) == 5", "assert greatest_common_divisor(1, 3) == 1", "assert greatest_common_divisor(12, 20) == 4", "assert greatest_common_divisor(6, 13) == 1", "assert greatest_common_divisor(141, 59) == 1", "assert greatest_common_divisor(7, 10) == 1", "assert greatest_common_divisor(51, 11) == 1", "assert greatest_common_divisor(12, 16) == 4", "assert greatest_common_divisor(46, 14) == 2", "assert greatest_common_divisor(6, 3) == 3", "assert greatest_common_divisor(14, 13) == 1", "assert greatest_common_divisor(10, 15) == 5", "assert greatest_common_divisor(15, 20) == 5", "assert greatest_common_divisor(6, 17) == 1", "assert greatest_common_divisor(147, 61) == 1", "assert greatest_common_divisor(4, 4) == 4", "assert greatest_common_divisor(1, 9) == 1", "assert greatest_common_divisor(13, 17) == 1", "assert greatest_common_divisor(139, 65) == 1", "assert greatest_common_divisor(144, 58) == 2", "assert greatest_common_divisor(147, 64) == 1", "assert greatest_common_divisor(3, 7) == 1", "assert greatest_common_divisor(52, 19) == 1", "assert greatest_common_divisor(50, 10) == 10", "assert greatest_common_divisor(2, 9) == 1", "assert greatest_common_divisor(44, 10) == 2", "assert greatest_common_divisor(144, 62) == 2", "assert greatest_common_divisor(148, 55) == 1", "assert greatest_common_divisor(144, 60) == 12", "assert greatest_common_divisor(49, 14) == 7", "assert greatest_common_divisor(143, 59) == 1", "assert greatest_common_divisor(6, 4) == 2", "assert greatest_common_divisor(148, 60) == 4", "assert greatest_common_divisor(11, 19) == 1", "assert greatest_common_divisor(4, 7) == 1", "assert greatest_common_divisor(15, 16) == 1", "assert greatest_common_divisor(49, 13) == 1", "assert greatest_common_divisor(8, 16) == 8", "assert greatest_common_divisor(54, 19) == 1", "assert greatest_common_divisor(8, 11) == 1", "assert greatest_common_divisor(8, 6) == 2", "assert greatest_common_divisor(6, 9) == 3", "assert greatest_common_divisor(12, 14) == 2", "assert greatest_common_divisor(146, 55) == 1", "assert greatest_common_divisor(139, 61) == 1", "assert greatest_common_divisor(147, 65) == 1", "assert greatest_common_divisor(11, 10) == 1", "assert greatest_common_divisor(143, 62) == 1", "assert greatest_common_divisor(140, 63) == 7", "assert greatest_common_divisor(49, 15) == 1", "assert greatest_common_divisor(44, 15) == 1", "assert greatest_common_divisor(2, 6) == 2", "assert greatest_common_divisor(8, 18) == 2", "assert greatest_common_divisor(6, 6) == 6", "assert greatest_common_divisor(48, 15) == 3", "assert greatest_common_divisor(44, 9) == 1", "assert greatest_common_divisor(14, 20) == 2"], "nl": " Return a greatest common divisor of two integers a and b\n    ", "func": "def greatest_common_divisor(a: int, b: int) -> int:", "examples": ">>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    ", "repair_prompt": ["def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. The greatest common divisor is the largest integer that divides both a and b without leaving a remainder. It is a fundamental concept in number theory and is used in various applications.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    # Ensure the GCD is always positive by using absolute values\n    a = abs(a)\n    b = abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(greatest_common_divisor(48, 18))  # Output: 6\n    print(greatest_common_divisor(-48, 18)) # Output: 6\n    print(greatest_common_divisor(0, 18))   # Output: 18\n    print(greatest_common_divisor(48, 0))   # Output: 48\n    print(greatest_common_divisor(0, 0))    # Output: 0\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Args:\n        a (int): First integer\n        b (int): Second integer\n\n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n\ndef main():\n    \"\"\"Main function to execute the GCD calculation.\n\n    This function prompts the user for two integers and prints their GCD.\n    \"\"\"\n    try:\n        # Prompt user for input\n        a = int(input())\n        b = int(input())\n\n        # Calculate GCD\n        gcd = greatest_common_divisor(a, b)\n\n        # Output the result\n        print(f\"The greatest common divisor of {a} and {b} is {gcd}.\")\n\n    except ValueError:\n        print(\"Invalid input. Please enter valid integers.\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Ensure the inputs are non-negative\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\ndef run_tests():\n    \"\"\"\n    Run unit tests for the greatest_common_divisor function.\n    \"\"\"\n    assert greatest_common_divisor(3, 5) == 1, \"Test case 1 failed\"\n    assert greatest_common_divisor(25, 15) == 5, \"Test case 2 failed\"\n    assert greatest_common_divisor(0, 5) == 5, \"Test case 3 failed\"\n    assert greatest_common_divisor(5, 0) == 5, \"Test case 4 failed\"\n    assert greatest_common_divisor(0, 0) == 0, \"Test case 5 failed\"\n    assert greatest_common_divisor(-25, 15) == 5, \"Test case 6 failed\"\n    assert greatest_common_divisor(25, -15) == 5, \"Test case 7 failed\"\n    assert greatest_common_divisor(-25, -15) == 5, \"Test case 8 failed\"\n    print(\"All test cases passed.\")\n\nif __name__ == \"__main__\":\n    run_tests()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    This function handles edge cases such as negative numbers and zero by taking the absolute\n    value of the inputs. If both inputs are zero, the function will return zero as the GCD is\n    undefined in this case.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    # Take the absolute value of both numbers to handle negative inputs\n    a, b = abs(a), abs(b)\n    \n    # If both numbers are zero, return zero as GCD is undefined\n    if a == 0 and b == 0:\n        return 0\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    This function handles edge cases such as zero and negative inputs by returning the \n    absolute value of the GCD. The Euclidean algorithm is efficient and works by repeatedly \n    replacing the larger number by the remainder of the division of the larger number by the \n    smaller number until one of the numbers becomes zero. The other number is the GCD.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Ensure both numbers are non-negative\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Validate inputs\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    \n    # Handle edge cases\n    if a == 0:\n        return abs(b)\n    if b == 0:\n        return abs(a)\n    \n    # Compute GCD using the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return abs(a)\n\n# Unit tests\ndef test_greatest_common_divisor():\n    assert greatest_common_divisor(3, 5) == 1, \"Test case 1 failed\"\n    assert greatest_common_divisor(25, 15) == 5, \"Test case 2 failed\"\n    assert greatest_common_divisor(0, 5) == 5, \"Test case 3 failed\"\n    assert greatest_common_divisor(5, 0) == 5, \"Test case 4 failed\"\n    assert greatest_common_divisor(-25, 15) == 5, \"Test case 5 failed\"\n    assert greatest_common_divisor(25, -15) == 5, \"Test case 6 failed\"\n    assert greatest_common_divisor(-25, -15) == 5, \"Test case 7 failed\"\n    assert greatest_common_divisor(0, 0) == 0, \"Test case 8 failed\"\n    print(\"All test cases passed.\")\n\n# Run unit tests\nif __name__ == \"__main__\":\n    test_greatest_common_divisor()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Raises:\n    ValueError: If both a and b are zero.\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 0)\n    ValueError: GCD is undefined for both inputs being zero.\n    \"\"\"\n    if a == 0 and b == 0:\n        raise ValueError(\"GCD is undefined for both inputs being zero.\")\n    \n    # Use absolute values to handle negative inputs\n    a, b = abs(a), abs(b)\n    \n    # Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Args:\n        a (int): First integer\n        b (int): Second integer\n\n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n\n# Example usage:\n# result = greatest_common_divisor(48, 18)\n# print(f\"The GCD is: {result}\")\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    This function handles both positive and negative integers and returns the absolute value\n    of the GCD. It also handles cases where one or both inputs are zero, returning the absolute\n    value of the non-zero input or zero if both are zero.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n\n    Example:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Handle the case where both inputs are zero\n    if a == 0 and b == 0:\n        return 0\n\n    # Use the Euclidean algorithm to find the GCD\n    while b != 0:\n        a, b = b, a % b\n\n    # Return the absolute value of the GCD\n    return abs(a)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(greatest_common_divisor(3, 5))  # Output: 1\n    print(greatest_common_divisor(25, 15))  # Output: 5\n    print(greatest_common_divisor(0, 5))  # Output: 5\n    print(greatest_common_divisor(0, 0))  # Output: 0\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Ensure the inputs are positive integers\n    a = abs(a)\n    b = abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], "plans": ["requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient, especially for large numbers, and easy to use. It should return the largest integer that divides both input numbers without leaving a remainder.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm\n- Ensure the function handles edge cases like zero or negative inputs\n- Optimize the function for performance with large integers\n- Provide a simple user interface for input and output\n- Include documentation and examples for user guidance\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be designed to handle edge cases such as zero or negative inputs by returning the absolute value of the GCD. We will use Python's built-in capabilities to ensure performance and simplicity.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The user interface should be intuitive, allowing users to easily input numbers and understand the results.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm\n- Design a simple and intuitive user interface\n- Optimize the algorithm for large integer inputs\n- Provide educational content on how the GCD is calculated\n- Ensure compatibility with various input formats\nWe will implement the greatest common divisor (GCD) calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The Euclidean algorithm repeatedly applies the division operation to reduce the problem size until the remainder is zero, at which point the divisor is the GCD. This approach is optimal for performance and accuracy. We will use Python's built-in capabilities to handle large integers efficiently.\n", "requirement analysis:\nThe function should efficiently compute the greatest common divisor of two integers using a reliable algorithm, such as the Euclidean algorithm. It should handle edge cases like zero inputs and negative numbers, and provide clear documentation for users.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD calculation\n- Ensure function handles edge cases like zero and negative inputs\n- Optimize performance for large integer inputs\n- Provide comprehensive documentation and examples\n- Include unit tests for various input scenarios\nWe will implement the Euclidean algorithm for calculating the greatest common divisor (GCD) of two integers. This algorithm is efficient and well-suited for handling large integers. We will ensure the function handles edge cases such as zero and negative inputs. The function will be documented with clear examples, and we will include unit tests to verify its correctness across various scenarios.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The implementation should be user-friendly and provide clear output.\nrequirement pool:\n- Implement the main GCD calculation function\n- Optimize the function for large integer inputs\n- Create a user-friendly interface for input and output\n- Provide educational content on how GCD is calculated\n- Ensure compatibility with various platforms\nWe will implement the greatest common divisor (GCD) function using the Euclidean algorithm, which is efficient and well-suited for large integers. The function will handle edge cases such as negative numbers and zero by taking the absolute value of the inputs. We will use Python's built-in capabilities to ensure performance and simplicity.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers using an efficient algorithm, such as the Euclidean algorithm. It should handle edge cases like zero inputs and negative numbers, and provide clear documentation for users.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD calculation\n- Handle edge cases such as zero and negative inputs\n- Optimize performance for large integer inputs\n- Provide comprehensive documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement the Euclidean algorithm for calculating the greatest common divisor (GCD) of two integers. This algorithm is efficient and widely used for this purpose. We will handle edge cases such as zero and negative inputs by ensuring the function can return correct results in these scenarios. We will use Python's built-in capabilities to ensure compatibility across different versions and optimize performance for large integers.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers using an efficient algorithm, such as the Euclidean algorithm. It should handle edge cases like zero inputs and negative numbers, and provide clear documentation for users.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD calculation\n- Ensure the function handles edge cases like zero and negative inputs\n- Optimize the function for performance with large integers\n- Provide comprehensive documentation and examples\n- Include unit tests for various input scenarios\nWe will implement the Euclidean algorithm for calculating the greatest common divisor (GCD) of two integers. This algorithm is efficient and widely used for GCD calculations. We will use Python's standard library function `math.gcd` to ensure optimal performance, especially for large integers. The function will handle edge cases such as zero and negative inputs, and provide comprehensive documentation with examples. We will also include unit tests to verify the function's correctness across various scenarios.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient, especially for large numbers, and easy to use. The output should be accurate and the function should handle edge cases like zero or negative inputs gracefully.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Ensure the function handles large integers efficiently.\n- Provide clear documentation and examples for users.\n- Create a simple user interface for input and output.\n- Optimize the function for performance improvements.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be designed to handle both positive and negative integers, and it will return the absolute value of the GCD. We will use Python's built-in capabilities without any additional libraries, as they are sufficient for this task.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should be efficient and handle large numbers. Additionally, the user interface should be intuitive and accessible on various devices.\nrequirement pool:\n- Implement the GCD calculation function\n- Design a user-friendly interface for input and output\n- Optimize the function for performance with large integers\n- Provide educational content on how GCD is calculated\n- Ensure compatibility across desktop and mobile platforms\nWe will implement the greatest common divisor (GCD) function using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be simple and leverage Python's built-in capabilities to ensure optimal performance. We will not use any external libraries as the Euclidean algorithm is straightforward to implement.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient, especially for large numbers, and easy to use. It should also provide accurate results and be accessible to users with varying levels of technical expertise.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Design a simple and intuitive user interface for input and output.\n- Optimize the function for performance with large integers.\n- Include detailed documentation and usage examples.\n- Ensure compatibility with various Python versions.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be designed to handle both positive and negative integers, and it will return the absolute value of the GCD. We will use Python's built-in capabilities to ensure compatibility across various versions. Additionally, we will provide clear documentation and usage examples to enhance usability.\n", "requirement analysis:\nThe function should efficiently compute the greatest common divisor of two integers using a well-known algorithm like Euclidean. It should handle edge cases such as zero inputs and negative numbers, and provide clear documentation for users.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD calculation\n- Ensure the function handles edge cases like zero and negative inputs\n- Optimize the function for performance with large integers\n- Provide comprehensive documentation and examples\n- Integrate with other mathematical libraries for extended functionality\nWe will implement the Euclidean algorithm for calculating the greatest common divisor (GCD) of two integers. This algorithm is efficient and widely used for GCD calculations. We will use Python's built-in math library to ensure optimal performance, especially for large integers. The function will handle edge cases such as zero and negative inputs, and provide clear documentation with examples.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [116, 116, 116, 116, 116, 116, 116, 116, 116, 116], "completion": "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Ensure the inputs are positive integers\n    a = abs(a)\n    b = abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "passed": true, "pass": true, "pass_num": 10, "round": 738, "mutate_method": "expand_one2two", "parent_index": 9}
