{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. In this list, the negative integers are those less than zero. The positive integers are those greater than zero. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "entry_point": "largest_smallest_integers", "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "test": ["def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 2, 6, 8, 14, 7, 8, -13]) == (-13, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-7, -3, 1, 0, 5]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-2, -4, 0, -5, -103, 1]) == (-2, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 5, 6, 1, 7, 2, -7]) == (-7, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, -5, -4, -11]) == (-3, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 9, 5, 3, 9, 4, 2]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 1, 4, 6, 3, 6]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -1, -6, -3]) == (-1, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([6, 9, 1, 4, 5, 11]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -5, -9, -10]) == (-1, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -7, -3, -3, 4]) == (-1, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 2, -1, -4]) == (-1, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 9, 3, 2, 3, 3]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, 0, -2, -1, -102, 6]) == (-1, 6)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 3, 1, 8, 7, 9, 0]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-11, -7, -1, -3, 6]) == (-1, 6)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 3, 6, 9, 4, 7, -5]) == (-5, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([9, 7, 1, 2, 5, 11, -3]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5]) == (None, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-2, -7, -4, -3, -102, 6]) == (-2, 6)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -3, -5, -6, 0]) == (-1, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 7, 12, 9, 11, 6, 6, -4]) == (-4, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-8, -8, -3, -2, 5]) == (-2, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([8, 4, 3, 8, 6, 1, 10, -8]) == (-8, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 5, 3, 3, 3, 4]) == (None, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 5, 6, 5, 8, 7, 1, -9]) == (-9, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([6, 3, 1, 6, 8, 4, 4]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 2, 4, 1, 4, 11, -6]) == (-6, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 3, 5, 4, 1, 10]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([11, 6, 7, 3, 6, 6, 5, -14]) == (-14, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -6, -6, -2, 2]) == (-2, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([8, 2, 3, 11, 6, 5, -11]) == (-11, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([6, 2, 3, 5, 5, 8, -2]) == (-2, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([9, 8, 8, 1, 3, 3, -8]) == (-8, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 7, 1, 5, 3, 12, 2]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 9, 1, 5, 5, 9]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -7, -1, 1, -104, 1]) == (-1, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -1, -10, -11]) == (-1, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([6, 1, 2, 3, 6, 2, 3]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([0, -8, -7, -8]) == (-7, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 2, 5, 5, 9, 5, 2]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, -8, -7, 0, 1]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 4, 2, 7, 7, 5, 2]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 1, 1, 8, 4, 11]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 4, 1, 9, 5, 7, -12]) == (-12, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([9, 6, 5, 6, 3, 2, -11]) == (-11, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([6, 7, 5, 7, 2, 11, 4]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 8, 1, 9, 3, 1, 3]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 6, 2, 6, 10, 9]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 3, 6, 1, 4, 8, -2]) == (-2, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 4, 5, 6, 1, 9, -2]) == (-2, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-5, -5, 1, 2, -95, 6]) == (-5, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -3, -1, -4, -102, 4]) == (-1, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 2, 5, 1, 10, 7, 5]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 3, 12, 7, 10, 6, 10, -12]) == (-12, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -3, -8, 2, -97, 3]) == (-1, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -4, -4, -3, 1]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 4, 4, 5, 10, 12, 5]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, -7, -4, -11, 1]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 7, 8, 9, 4, 5, -4]) == (-4, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 0, -8, -5]) == (-5, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -8, -7, -3, 5]) == (-3, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, 1, -10, -6, 1]) == (-1, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-10, -5, -8, 2, -100, 5]) == (-5, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -8, -7, -11, 5]) == (-6, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([]) == (None, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -9, -1, -6, -100, 2]) == (-1, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-9, -2, -7, -6, 4]) == (-2, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 6, 3, 7, 9, 1, -6]) == (-6, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, -1, -5, -3, -102, 3]) == (-1, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, -7, -4, -10, 1]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-9, -4, -3, -8, 4]) == (-3, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([8, 1, 11, 9, 12, 7, 5, -11]) == (-11, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 7, 7, 1, 5, 7, 5, -10]) == (-10, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3]) == (None, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, -1, -10, -8]) == (-1, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([0]) == (None, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, -6, -3, -9]) == (-3, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([9, 2, 4, 1, 6, 5, -4]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -3, -5, -6]) == (-1, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([9, 6, 4, 3, 7, 4, 4, -9]) == (-9, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -9, -8, 2, -100, 2]) == (-4, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4]) == (None, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -8, 0, -8, 1]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 4, 2, 7, 5, 3, 4]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 7, 3, 7, 7, 3, -1]) == (-1, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, 2, -5, -2]) == (-1, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 6, 2, 5, 7, 3]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 6, 1, 9, 5, 4, 0]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, -3, -3, -3, 1]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, 1, -8, -3, 5]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-4, -6, 1, -8, 1]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 4, 2, 5, 4, 10]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 7, 4, 3, 5, 5, 0]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([4, 4, 5, 5, 5, 6]) == (None, 4)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-7, -6, 0, -8, 1]) == (-6, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 9, 6, 4, 3, 7]) == (None, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([1, 5, 8, 10, 1, 2, -3]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, 0, -2, -4]) == (-2, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 3, 5, 1, 13, 4, 5, -4]) == (-4, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -8, 1, 0, -103, 5]) == (-6, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-6, -1, -3, -1, 1]) == (-1, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 8, 6, 7, 1, 10, -8]) == (-8, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, -4, -3, -3, 5]) == (-3, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 3, 5, 9, 5, 9, 3]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-3, 1, -9, -8, 2]) == (-3, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-7, -4, -5, -6, 5]) == (-4, 5)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([3, 8, 2, 5, 9, 1, 2]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-1, -7, -10, -1, 1]) == (-1, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([5, 7, 4, 3, 3, 11, 2]) == (None, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 8, 13, 2, 11, 6, 10, -10]) == (-10, 2)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-7, -8, -7, -3, 3]) == (-3, 3)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 1, 4, 5, 9, 8, 3]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([-2, -4, -10, -2]) == (-2, None)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([7, 9, 1, 8, 10, 6, 3]) == (None, 1)", "def check(largest_smallest_integers):\n\tassert largest_smallest_integers([2, 1, 4, 9, 11, 7, 6, -7]) == (-7, 1)"], "test_case_list": ["assert largest_smallest_integers([2, 2, 6, 8, 14, 7, 8, -13]) == (-13, 2)", "assert largest_smallest_integers([-7, -3, 1, 0, 5]) == (-3, 1)", "assert largest_smallest_integers([-2, -4, 0, -5, -103, 1]) == (-2, 1)", "assert largest_smallest_integers([2, 5, 6, 1, 7, 2, -7]) == (-7, 1)", "assert largest_smallest_integers([-3, -5, -4, -11]) == (-3, None)", "assert largest_smallest_integers([2, 9, 5, 3, 9, 4, 2]) == (None, 2)", "assert largest_smallest_integers([3, 1, 4, 6, 3, 6]) == (None, 1)", "assert largest_smallest_integers([-4, -1, -6, -3]) == (-1, None)", "assert largest_smallest_integers([6, 9, 1, 4, 5, 11]) == (None, 1)", "assert largest_smallest_integers([-1, -5, -9, -10]) == (-1, None)", "assert largest_smallest_integers([-1, -7, -3, -3, 4]) == (-1, 4)", "assert largest_smallest_integers([2, 2, -1, -4]) == (-1, 2)", "assert largest_smallest_integers([2, 9, 3, 2, 3, 3]) == (None, 2)", "assert largest_smallest_integers([2]) == (None, 2)", "assert largest_smallest_integers([-3, 0, -2, -1, -102, 6]) == (-1, 6)", "assert largest_smallest_integers([5, 3, 1, 8, 7, 9, 0]) == (None, 1)", "assert largest_smallest_integers([-11, -7, -1, -3, 6]) == (-1, 6)", "assert largest_smallest_integers([5, 3, 6, 9, 4, 7, -5]) == (-5, 3)", "assert largest_smallest_integers([9, 7, 1, 2, 5, 11, -3]) == (-3, 1)", "assert largest_smallest_integers([5]) == (None, 5)", "assert largest_smallest_integers([-2, -7, -4, -3, -102, 6]) == (-2, 6)", "assert largest_smallest_integers([-1, -3, -5, -6, 0]) == (-1, None)", "assert largest_smallest_integers([5, 7, 12, 9, 11, 6, 6, -4]) == (-4, 5)", "assert largest_smallest_integers([-8, -8, -3, -2, 5]) == (-2, 5)", "assert largest_smallest_integers([8, 4, 3, 8, 6, 1, 10, -8]) == (-8, 1)", "assert largest_smallest_integers([5, 5, 3, 3, 3, 4]) == (None, 3)", "assert largest_smallest_integers([4, 5, 6, 5, 8, 7, 1, -9]) == (-9, 1)", "assert largest_smallest_integers([6, 3, 1, 6, 8, 4, 4]) == (None, 1)", "assert largest_smallest_integers([7, 2, 4, 1, 4, 11, -6]) == (-6, 1)", "assert largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)", "assert largest_smallest_integers([1, 3, 5, 4, 1, 10]) == (None, 1)", "assert largest_smallest_integers([11, 6, 7, 3, 6, 6, 5, -14]) == (-14, 3)", "assert largest_smallest_integers([-6, -6, -6, -2, 2]) == (-2, 2)", "assert largest_smallest_integers([8, 2, 3, 11, 6, 5, -11]) == (-11, 2)", "assert largest_smallest_integers([6, 2, 3, 5, 5, 8, -2]) == (-2, 2)", "assert largest_smallest_integers([9, 8, 8, 1, 3, 3, -8]) == (-8, 1)", "assert largest_smallest_integers([1, 7, 1, 5, 3, 12, 2]) == (None, 1)", "assert largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]) == (None, 1)", "assert largest_smallest_integers([4, 9, 1, 5, 5, 9]) == (None, 1)", "assert largest_smallest_integers([-1, -7, -1, 1, -104, 1]) == (-1, 1)", "assert largest_smallest_integers([-6, -1, -10, -11]) == (-1, None)", "assert largest_smallest_integers([6, 1, 2, 3, 6, 2, 3]) == (None, 1)", "assert largest_smallest_integers([0, -8, -7, -8]) == (-7, None)", "assert largest_smallest_integers([4, 2, 5, 5, 9, 5, 2]) == (None, 2)", "assert largest_smallest_integers([-3, -8, -7, 0, 1]) == (-3, 1)", "assert largest_smallest_integers([7, 4, 2, 7, 7, 5, 2]) == (None, 2)", "assert largest_smallest_integers([1, 1, 1, 8, 4, 11]) == (None, 1)", "assert largest_smallest_integers([3, 4, 1, 9, 5, 7, -12]) == (-12, 1)", "assert largest_smallest_integers([9, 6, 5, 6, 3, 2, -11]) == (-11, 2)", "assert largest_smallest_integers([6, 7, 5, 7, 2, 11, 4]) == (None, 2)", "assert largest_smallest_integers([1, 8, 1, 9, 3, 1, 3]) == (None, 1)", "assert largest_smallest_integers([3, 6, 2, 6, 10, 9]) == (None, 2)", "assert largest_smallest_integers([3, 3, 6, 1, 4, 8, -2]) == (-2, 1)", "assert largest_smallest_integers([3, 4, 5, 6, 1, 9, -2]) == (-2, 1)", "assert largest_smallest_integers([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.", "assert largest_smallest_integers([-5, -5, 1, 2, -95, 6]) == (-5, 1)", "assert largest_smallest_integers([-4, -3, -1, -4, -102, 4]) == (-1, 4)", "assert largest_smallest_integers([5, 2, 5, 1, 10, 7, 5]) == (None, 1)", "assert largest_smallest_integers([1]) == (None, 1)", "assert largest_smallest_integers([5, 3, 12, 7, 10, 6, 10, -12]) == (-12, 3)", "assert largest_smallest_integers([-1, -3, -8, 2, -97, 3]) == (-1, 2)", "assert largest_smallest_integers([-6, -4, -4, -3, 1]) == (-3, 1)", "assert largest_smallest_integers([2, 4, 4, 5, 10, 12, 5]) == (None, 2)", "assert largest_smallest_integers([1, -7, -4, -11, 1]) == (-4, 1)", "assert largest_smallest_integers([4, 7, 8, 9, 4, 5, -4]) == (-4, 4)", "assert largest_smallest_integers([1, 0, -8, -5]) == (-5, 1)", "assert largest_smallest_integers([-4, -8, -7, -3, 5]) == (-3, 5)", "assert largest_smallest_integers([-1, 1, -10, -6, 1]) == (-1, 1)", "assert largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)", "assert largest_smallest_integers([-10, -5, -8, 2, -100, 5]) == (-5, 2)", "assert largest_smallest_integers([-6, -8, -7, -11, 5]) == (-6, 5)", "assert largest_smallest_integers([]) == (None, None)", "assert largest_smallest_integers([-1, -9, -1, -6, -100, 2]) == (-1, 2)", "assert largest_smallest_integers([-9, -2, -7, -6, 4]) == (-2, 4)", "assert largest_smallest_integers([5, 6, 3, 7, 9, 1, -6]) == (-6, 1)", "assert largest_smallest_integers([-3, -1, -5, -3, -102, 3]) == (-1, 3)", "assert largest_smallest_integers([4, -7, -4, -10, 1]) == (-4, 1)", "assert largest_smallest_integers([-9, -4, -3, -8, 4]) == (-3, 4)", "assert largest_smallest_integers([8, 1, 11, 9, 12, 7, 5, -11]) == (-11, 1)", "assert largest_smallest_integers([7, 7, 7, 1, 5, 7, 5, -10]) == (-10, 1)", "assert largest_smallest_integers([3]) == (None, 3)", "assert largest_smallest_integers([1, -1, -10, -8]) == (-1, 1)", "assert largest_smallest_integers([0]) == (None, None)", "assert largest_smallest_integers([3, -6, -3, -9]) == (-3, 3)", "assert largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)", "assert largest_smallest_integers([9, 2, 4, 1, 6, 5, -4]) == (-4, 1)", "assert largest_smallest_integers([-1, -3, -5, -6]) == (-1, None)", "assert largest_smallest_integers([9, 6, 4, 3, 7, 4, 4, -9]) == (-9, 3)", "assert largest_smallest_integers([-4, -9, -8, 2, -100, 2]) == (-4, 2)", "assert largest_smallest_integers([4]) == (None, 4)", "assert largest_smallest_integers([-4, -8, 0, -8, 1]) == (-4, 1)", "assert largest_smallest_integers([3, 4, 2, 7, 5, 3, 4]) == (None, 2)", "assert largest_smallest_integers([5, 7, 3, 7, 7, 3, -1]) == (-1, 3)", "assert largest_smallest_integers([-1, 2, -5, -2]) == (-1, 2)", "assert largest_smallest_integers([1, 6, 2, 5, 7, 3]) == (None, 1)", "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)", "assert largest_smallest_integers([1, 6, 1, 9, 5, 4, 0]) == (None, 1)", "assert largest_smallest_integers([1, -3, -3, -3, 1]) == (-3, 1)", "assert largest_smallest_integers([-6, 1, -8, -3, 5]) == (-3, 1)", "assert largest_smallest_integers([-4, -6, 1, -8, 1]) == (-4, 1)", "assert largest_smallest_integers([4, 4, 2, 5, 4, 10]) == (None, 2)", "assert largest_smallest_integers([1, 7, 4, 3, 5, 5, 0]) == (None, 1)", "assert largest_smallest_integers([4, 4, 5, 5, 5, 6]) == (None, 4)", "assert largest_smallest_integers([-7, -6, 0, -8, 1]) == (-6, 1)", "assert largest_smallest_integers([5, 9, 6, 4, 3, 7]) == (None, 3)", "assert largest_smallest_integers([1, 5, 8, 10, 1, 2, -3]) == (-3, 1)", "assert largest_smallest_integers([-6, 0, -2, -4]) == (-2, None)", "assert largest_smallest_integers([5, 3, 5, 1, 13, 4, 5, -4]) == (-4, 1)", "assert largest_smallest_integers([-6, -8, 1, 0, -103, 5]) == (-6, 1)", "assert largest_smallest_integers([-6, -1, -3, -1, 1]) == (-1, 1)", "assert largest_smallest_integers([2, 8, 6, 7, 1, 10, -8]) == (-8, 1)", "assert largest_smallest_integers([-3, -4, -3, -3, 5]) == (-3, 5)", "assert largest_smallest_integers([2, 3, 5, 9, 5, 9, 3]) == (None, 2)", "assert largest_smallest_integers([-3, 1, -9, -8, 2]) == (-3, 1)", "assert largest_smallest_integers([-7, -4, -5, -6, 5]) == (-4, 5)", "assert largest_smallest_integers([3, 8, 2, 5, 9, 1, 2]) == (None, 1)", "assert largest_smallest_integers([-1, -7, -10, -1, 1]) == (-1, 1)", "assert largest_smallest_integers([5, 7, 4, 3, 3, 11, 2]) == (None, 2)", "assert largest_smallest_integers([2, 8, 13, 2, 11, 6, 10, -10]) == (-10, 2)", "assert largest_smallest_integers([-7, -8, -7, -3, 3]) == (-3, 3)", "assert largest_smallest_integers([7, 1, 4, 5, 9, 8, 3]) == (None, 1)", "assert largest_smallest_integers([-2, -4, -10, -2]) == (-2, None)", "assert largest_smallest_integers([7, 9, 1, 8, 10, 6, 3]) == (None, 1)", "assert largest_smallest_integers([2, 1, 4, 9, 11, 7, 6, -7]) == (-7, 1)"], "nl": "\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    ", "func": "def largest_smallest_integers(lst):", "examples": "Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    ", "repair_prompt": ["def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. In this list, the negative integers are those less than zero. The positive integers are those greater than zero. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef largest_smallest_integers(lst: list) -> tuple:\n    \"\"\"\n    This function takes a list of integers and returns a tuple (a, b), where 'a' is the largest negative integer\n    and 'b' is the smallest positive integer. If there are no negative or positive integers, it returns None for\n    the respective value.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the largest negative integer and the smallest positive integer, or None if not applicable.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n\n# Example usage:\n# result = largest_smallest_integers([-10, -20, 5, 3, 0, 15])\n# print(result)  # Output should be (-10, 3)\n", "from typing import List\n## main.py\n\ndef largest_smallest_integers(lst: list) -> tuple:\n    \"\"\"\n    Function to find the largest negative and smallest positive integers in a list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the largest negative integer and the smallest positive integer.\n           Returns (None, None) if no such integers exist.\n    \"\"\"\n    # Filter negative and positive integers\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    # Determine the largest negative integer\n    largest_negative = max(negative_integers) if negative_integers else None\n\n    # Determine the smallest positive integer\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)\n\n# Example usage:\n# result = largest_smallest_integers([-10, -20, 5, 3, 0, 15])\n# print(result)  # Output should be (-10, 3)\n", "from typing import List\n## main.py\n\nfrom typing import Optional, Tuple\n\ndef largest_smallest_integers(lst: list[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"Identify the largest negative and smallest positive integers in a list.\n\n    Args:\n        lst: A list of integers.\n\n    Returns:\n        A tuple containing the largest negative integer and the smallest positive integer.\n        If no negative integers exist, the first element is None.\n        If no positive integers exist, the second element is None.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for number in lst:\n        if number < 0:\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        elif number > 0:\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    return largest_negative, smallest_positive\n\n# Example usage:\n# result = largest_smallest_integers([-10, -20, 0, 5, 3, 2])\n# print(result)  # Output: (-10, 2)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"Returns a tuple (a, b), where 'a' is the largest of negative integers,\n    and 'b' is the smallest of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Args:\n        lst (List[int]): A list of integers.\n\n    Returns:\n        Tuple[Optional[int], Optional[int]]: A tuple containing the largest negative\n        integer and the smallest positive integer, or None if not applicable.\n    \"\"\"\n    # Filter negative and positive integers\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    # Determine the largest negative and smallest positive integers\n    largest_negative = max(negative_integers, default=None)\n    smallest_positive = min(positive_integers, default=None)\n\n    return largest_negative, smallest_positive\n", "from typing import List\n## main.py\n\ndef largest_smallest_integers(lst: list) -> tuple:\n    \"\"\"\n    Identifies the largest negative integer and the smallest positive integer from a list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        tuple: A tuple containing the largest negative integer or None, and the smallest positive integer or None.\n    \"\"\"\n    # Filter negative and positive integers\n    negative_integers = [num for num in lst if isinstance(num, int) and num < 0]\n    positive_integers = [num for num in lst if isinstance(num, int) and num > 0]\n\n    # Identify the largest negative integer\n    largest_negative = max(negative_integers) if negative_integers else None\n\n    # Identify the smallest positive integer\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)\n\n# Example usage:\n# result = largest_smallest_integers([-10, -20, 5, 3, 0, 15])\n# print(result)  # Output: (-10, 3)\n", "from typing import List\n## main.py\n\nfrom typing import Optional, Tuple\n\ndef largest_smallest_integers(lst: list[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"Returns a tuple (a, b), where 'a' is the largest of negative integers,\n    and 'b' is the smallest of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Args:\n        lst (list[int]): A list of integers.\n\n    Returns:\n        Tuple[Optional[int], Optional[int]]: A tuple containing the largest negative\n        integer and the smallest positive integer, or None if not applicable.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for number in lst:\n        if number < 0:\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        elif number > 0:\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    return largest_negative, smallest_positive\n\n# Example usage:\n# result = largest_smallest_integers([-10, -20, 0, 5, 3, 2])\n# print(result)  # Output: (-10, 2)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"Returns a tuple (a, b), where 'a' is the largest of negative integers,\n    and 'b' is the smallest of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Args:\n        lst (List[int]): A list of integers.\n\n    Returns:\n        Tuple[Optional[int], Optional[int]]: A tuple containing the largest negative\n        integer and the smallest positive integer, or None if not applicable.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for number in lst:\n        if number < 0:\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        elif number > 0:\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    return largest_negative, smallest_positive\n\n# Example usage:\n# result = largest_smallest_integers([-10, -20, 0, 5, 3, 2])\n# print(result)  # Output: (-10, 2)\n", "from typing import List\n## main.py\n\ndef largest_smallest_integers(lst: list) -> tuple:\n    \"\"\"\n    This function takes a list of integers and returns a tuple (a, b), where 'a' is the largest of negative integers,\n    and 'b' is the smallest of positive integers in the list. If there is no negative or positive integers, return them as None.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the largest negative integer and the smallest positive integer, or None if not applicable.\n    \"\"\"\n    # Initialize variables to store the largest negative and smallest positive integers\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate through the list to find the required values\n    for num in lst:\n        # Check if the number is an integer\n        if isinstance(num, int):\n            # Update largest_negative if the current number is negative and larger than the current largest_negative\n            if num < 0:\n                if largest_negative is None or num > largest_negative:\n                    largest_negative = num\n            # Update smallest_positive if the current number is positive and smaller than the current smallest_positive\n            elif num > 0:\n                if smallest_positive is None or num < smallest_positive:\n                    smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n\n# Example usage:\n# result = largest_smallest_integers([-10, -20, 5, 3, 0, 15])\n# print(result)  # Output should be (-10, 3)\n", "from typing import List\n## main.py\n\ndef largest_smallest_integers(lst: list) -> tuple:\n    \"\"\"\n    Finds the largest negative and smallest positive integers in a list.\n\n    Args:\n        lst: A list of integers.\n\n    Returns:\n        A tuple (a, b) where 'a' is the largest negative integer and 'b' is the smallest positive integer.\n        If no negative or positive integers are found, return None for that position in the tuple.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if isinstance(num, int):  # Ensure the element is an integer\n            if num < 0:\n                if largest_negative is None or num > largest_negative:\n                    largest_negative = num\n            elif num > 0:\n                if smallest_positive is None or num < smallest_positive:\n                    smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n", "from typing import List\n## main.py\n\ndef largest_smallest_integers(lst: list) -> tuple:\n    \"\"\"\n    This function takes a list of integers and returns a tuple (a, b), where 'a' is the largest negative integer\n    and 'b' is the smallest positive integer. If there are no negative or positive integers, it returns None for\n    the respective value.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the largest negative integer and the smallest positive integer, or None if not applicable.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n\n# Example usage:\n# result = largest_smallest_integers([-10, -3, 0, 2, 5])\n# print(result)  # Output: (-3, 2)\n"], "plans": ["requirement analysis:\nThe function should efficiently identify the largest negative and smallest positive integers from a list. It must handle edge cases such as empty lists and lists without negative or positive integers, returning None in such cases. The solution should be optimized for performance, especially with large lists.\nrequirement pool:\n- Accurate identification of largest negative and smallest positive integers\n- Handle empty lists and lists without negative or positive integers\n- Optimize performance for large lists\n- Provide clear and concise output\n- Ensure compatibility with various Python versions\nWe will use Python's built-in functions to efficiently identify the largest negative and smallest positive integers from a list. This approach is simple, requires no additional libraries, and is optimized for performance. The function will handle edge cases such as empty lists and lists without negative or positive integers by returning None in such cases.\n", "requirement analysis:\nThe function should efficiently identify the largest negative and smallest positive integers in a list. It must handle edge cases such as empty lists and lists without negative or positive integers, returning None in such cases. The implementation should prioritize simplicity and performance.\nrequirement pool:\n- Implement the main function logic to find largest negative and smallest positive integers.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases like empty lists.\n- Add comprehensive test cases to validate functionality.\n- Document the function with clear usage examples.\nWe will use a simple approach leveraging list comprehensions to filter and find the largest negative and smallest positive integers. This approach is efficient for small to medium-sized lists and maintains code readability. We will use the built-in Python functions max() and min() to determine the largest and smallest values, respectively. The function will handle edge cases such as empty lists and lists without negative or positive integers by returning None.\n", "requirement analysis:\nThe function should efficiently identify the largest negative and smallest positive integers from a list. It must handle cases where there are no negative or positive integers by returning None. Edge cases such as empty lists or lists with zero should be considered.\nrequirement pool:\n- Implement the main function to identify largest negative and smallest positive integers.\n- Ensure the function handles empty lists and lists with zero correctly.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases for various scenarios.\n- Document the function usage and edge cases.\nWe will use Python's built-in functions to efficiently identify the largest negative and smallest positive integers from a list. This approach ensures simplicity and effectiveness, avoiding the complexity of external libraries. The function will handle edge cases such as empty lists and lists containing only zero by returning None for both values.\n", "requirement analysis:\nThe function should efficiently identify the largest negative and smallest positive integers in a list. It must handle edge cases such as empty lists or lists without negative or positive integers, returning None in such cases. Performance is crucial, especially for large lists, and the function should be easy to understand and use.\nrequirement pool:\n- Implement the main function to find largest negative and smallest positive integers.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases like empty lists or lists with no negative or positive integers.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify function correctness.\nWe will implement a simple function using Python's built-in capabilities to efficiently find the largest negative and smallest positive integers in a list. The function will handle edge cases such as empty lists or lists without negative or positive integers by returning None for those cases. We will use list comprehensions to filter the list and the min/max functions to find the required values. This approach ensures high performance and usability, especially for large datasets.\n", "requirement analysis:\nThe function should efficiently identify the largest negative and smallest positive integers from a list. It must handle edge cases such as empty lists and lists without negative or positive integers, returning None in such cases.\nrequirement pool:\n- Implement the main function to identify largest negative and smallest positive integers.\n- Optimize the function for performance with large lists.\n- Ensure the function handles edge cases like empty lists.\n- Provide clear documentation and examples.\n- Consider additional features like handling non-integer values.\nWe will use Python's built-in functions to efficiently filter and identify the largest negative and smallest positive integers from the list. This approach ensures simplicity and high usability without the need for additional libraries, which aligns with the competitive analysis indicating Python built-in functions as highly usable and efficient for this task.\n", "requirement analysis:\nThe function should accurately identify the largest negative and smallest positive integers from a list. It must handle cases where there are no negative or positive integers by returning None. Edge cases such as empty lists or lists with zero should be considered.\nrequirement pool:\n- Implement the main function logic to identify largest negative and smallest positive integers.\n- Ensure the function handles empty lists and lists with zero correctly.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases for various scenarios.\n- Document the function usage and edge cases.\nWe will use Python's built-in functions to efficiently filter and identify the largest negative and smallest positive integers from the list. The function will handle edge cases such as empty lists and lists containing only zero by returning None for both values. The implementation will be straightforward without the need for complex libraries, ensuring high usability and efficiency.\n", "requirement analysis:\nThe function should correctly identify the largest negative and smallest positive integers in a list. It must handle edge cases such as empty lists and lists without negative or positive integers, returning None in such cases. Performance should be optimized for large datasets.\nrequirement pool:\n- Handle lists with mixed integers\n- Return None for empty lists\n- Optimize performance for large datasets\n- Ensure code readability\n- Include comprehensive test cases\nWe will implement a function that iterates through the list once to find the largest negative integer and the smallest positive integer. This approach ensures optimal performance even with large datasets. We will handle edge cases such as empty lists and lists containing only zero values by returning None for both values in such cases.\n", "requirement analysis:\nThe function should efficiently identify the largest negative and smallest positive integers in a list. It must handle edge cases such as empty lists or lists without negative or positive integers by returning None for missing values. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement the main function to find largest negative and smallest positive integers.\n- Ensure the function handles edge cases like empty lists or lists with no negative or positive integers.\n- Optimize the function for performance with large lists.\n- Add comprehensive test cases to validate functionality.\n- Document the function usage and edge case handling.\nWe will implement a simple Python function that iterates through the list to find the largest negative and smallest positive integers. We will use Python's built-in capabilities to filter and find the required values, ensuring the function handles edge cases like empty lists or lists without negative or positive integers by returning None for missing values. The function will be optimized for performance by minimizing the number of passes through the list.\n", "requirement analysis:\nThe function should efficiently identify the largest negative and smallest positive integers in a list. It must handle edge cases such as empty lists and lists without negative or positive integers, returning None in such cases. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement the main function logic to find largest negative and smallest positive integers.\n- Optimize the function for performance with large lists.\n- Ensure the function handles edge cases like empty lists.\n- Provide comprehensive documentation and examples.\n- Conduct performance testing and benchmarking.\nWe will implement a simple function using Python's built-in capabilities to find the largest negative and smallest positive integers in a list. The function will iterate through the list once, maintaining two variables to track the largest negative and smallest positive integers found. This approach ensures optimal performance even with large lists. We will handle edge cases such as empty lists and lists without negative or positive integers by returning None for those cases.\n", "requirement analysis:\nThe function should efficiently identify the largest negative and smallest positive integers in a list. It must handle edge cases such as empty lists and lists without negative or positive integers, returning None in such cases.\nrequirement pool:\n- Implement function to find largest negative integer\n- Implement function to find smallest positive integer\n- Optimize for large list inputs\n- Ensure function handles edge cases gracefully\n- Provide clear documentation and examples\nWe will use Python's built-in functions to efficiently identify the largest negative and smallest positive integers in a list. This approach is simple and effective for the given task, ensuring that the function handles edge cases such as empty lists and lists without negative or positive integers by returning None in those cases.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [124, 124, 124, 124, 124, 124, 124, 124, 124, 124], "completion": "from typing import List\n## main.py\n\ndef largest_smallest_integers(lst: list) -> tuple:\n    \"\"\"\n    This function takes a list of integers and returns a tuple (a, b), where 'a' is the largest negative integer\n    and 'b' is the smallest positive integer. If there are no negative or positive integers, it returns None for\n    the respective value.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the largest negative integer and the smallest positive integer, or None if not applicable.\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n\n# Example usage:\n# result = largest_smallest_integers([-10, -3, 0, 2, 5])\n# print(result)  # Output: (-3, 2)\n", "passed": true, "pass": true, "pass_num": 10, "round": 112, "mutate_method": "expand_one2two", "parent_index": 112}
