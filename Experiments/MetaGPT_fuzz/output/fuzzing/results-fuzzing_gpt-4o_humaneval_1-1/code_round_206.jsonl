{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Return the n-th Fibonacci number. The Fibonacci sequence is a series of numbers. Each number is the sum of the two preceding ones. \n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "entry_point": "fib", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "test": ["def check(fib):\n\tassert fib(29) == 514229", "def check(fib):\n\tassert fib(25) == 75025", "def check(fib):\n\tassert fib(34) == 5702887", "def check(fib):\n\tassert fib(7) == 13", "def check(fib):\n\tassert fib(32) == 2178309", "def check(fib):\n\tassert fib(27) == 196418", "def check(fib):\n\tassert fib(16) == 987", "def check(fib):\n\tassert fib(14) == 377", "def check(fib):\n\tassert fib(33) == 3524578", "def check(fib):\n\tassert fib(20) == 6765", "def check(fib):\n\tassert fib(8) == 21", "def check(fib):\n\tassert fib(31) == 1346269", "def check(fib):\n\tassert fib(6) == 8", "def check(fib):\n\tassert fib(17) == 1597", "def check(fib):\n\tassert fib(2) == 1", "def check(fib):\n\tassert fib(1) == 1", "def check(fib):\n\tassert fib(30) == 832040", "def check(fib):\n\tassert fib(11) == 89", "def check(fib):\n\tassert fib(3) == 2", "def check(fib):\n\tassert fib(19) == 4181", "def check(fib):\n\tassert fib(21) == 10946", "def check(fib):\n\tassert fib(4) == 3", "def check(fib):\n\tassert fib(10) == 55", "def check(fib):\n\tassert fib(12) == 144", "def check(fib):\n\tassert fib(9) == 34", "def check(fib):\n\tassert fib(13) == 233", "def check(fib):\n\tassert fib(0) == 0", "def check(fib):\n\tassert fib(15) == 610", "def check(fib):\n\tassert fib(22) == 17711", "def check(fib):\n\tassert fib(24) == 46368", "def check(fib):\n\tassert fib(18) == 2584", "def check(fib):\n\tassert fib(28) == 317811", "def check(fib):\n\tassert fib(35) == 9227465"], "test_case_list": ["assert fib(29) == 514229", "assert fib(25) == 75025", "assert fib(34) == 5702887", "assert fib(7) == 13", "assert fib(32) == 2178309", "assert fib(27) == 196418", "assert fib(16) == 987", "assert fib(14) == 377", "assert fib(33) == 3524578", "assert fib(20) == 6765", "assert fib(8) == 21", "assert fib(31) == 1346269", "assert fib(6) == 8", "assert fib(17) == 1597", "assert fib(2) == 1", "assert fib(1) == 1", "assert fib(30) == 832040", "assert fib(11) == 89", "assert fib(3) == 2", "assert fib(19) == 4181", "assert fib(21) == 10946", "assert fib(4) == 3", "assert fib(10) == 55", "assert fib(12) == 144", "assert fib(9) == 34", "assert fib(13) == 233", "assert fib(0) == 0", "assert fib(15) == 610", "assert fib(22) == 17711", "assert fib(24) == 46368", "assert fib(18) == 2584", "assert fib(28) == 317811", "assert fib(35) == 9227465"], "nl": "Return n-th Fibonacci number.\n    ", "func": "def fib(n: int):", "examples": ">>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    ", "repair_prompt": ["def fib(n: int):\t\n'''Return the n-th Fibonacci number. The Fibonacci sequence is a series of numbers. Each number is the sum of the two preceding ones. \n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''"], "completions": ["from typing import List\n## main.py\n\nfrom functools import lru_cache\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number.\n    \n    This function uses an iterative approach with memoization to efficiently\n    compute the Fibonacci sequence. It validates the input to ensure it is a\n    non-negative integer and raises a ValueError for invalid inputs.\n    \n    Args:\n        n (int): The position in the Fibonacci sequence (must be a non-negative integer).\n    \n    Returns:\n        int: The n-th Fibonacci number.\n    \n    Raises:\n        ValueError: If n is negative or not an integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    @lru_cache(maxsize=None)\n    def fib_memoized(k: int) -> int:\n        if k == 0:\n            return 0\n        elif k == 1:\n            return 1\n        else:\n            return fib_memoized(k - 1) + fib_memoized(k - 2)\n    \n    return fib_memoized(n)\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach with memoization.\n\n    Parameters:\n    n (int): The position in the Fibonacci sequence to calculate.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n\n    # Memoization array to store Fibonacci numbers\n    fib_numbers = [0] * (n + 1)\n    fib_numbers[1] = 1\n    fib_numbers[2] = 1\n\n    # Iteratively calculate Fibonacci numbers\n    for i in range(3, n + 1):\n        fib_numbers[i] = fib_numbers[i - 1] + fib_numbers[i - 2]\n\n    return fib_numbers[n]\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach with memoization.\n\n    Parameters:\n    n (int): The position in the Fibonacci sequence.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Examples:\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"The position in the Fibonacci sequence must be a positive integer.\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n\n    # Initialize the first two Fibonacci numbers\n    fib_numbers = [0] * (n + 1)\n    fib_numbers[1] = 1\n    fib_numbers[2] = 1\n\n    # Calculate Fibonacci numbers iteratively\n    for i in range(3, n + 1):\n        fib_numbers[i] = fib_numbers[i - 1] + fib_numbers[i - 2]\n\n    return fib_numbers[n]\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach.\n\n    Args:\n        n (int): The position in the Fibonacci sequence (must be a positive integer).\n\n    Returns:\n        int: The n-th Fibonacci number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"The input must be a positive integer.\")\n\n    # Base cases\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Iterative calculation\n    prev, curr = 0, 1\n    for _ in range(2, n):\n        prev, curr = curr, prev + curr\n\n    return curr\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        position = 10  # Example position in the Fibonacci sequence\n        result = fib(position)\n        print(f\"The {position}-th Fibonacci number is: {result}\")\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Return the n-th Fibonacci number.\n    The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.\n    \n    Args:\n        n (int): The position in the Fibonacci sequence.\n        \n    Returns:\n        int: The n-th Fibonacci number.\n        \n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Iteratively compute the Fibonacci sequence up to the n-th number\n    for _ in range(n - 1):\n        a, b = b, a + b\n    \n    return b\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach.\n\n    Args:\n        n (int): The position in the Fibonacci sequence (1-indexed).\n\n    Returns:\n        int: The n-th Fibonacci number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach with memoization.\n\n    Parameters:\n    n (int): The position in the Fibonacci sequence to calculate.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Examples:\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # Initialize the base cases\n    fib_numbers = [0, 1]\n\n    # Iteratively compute Fibonacci numbers up to n\n    for i in range(2, n + 1):\n        next_fib = fib_numbers[-1] + fib_numbers[-2]\n        fib_numbers.append(next_fib)\n\n    return fib_numbers[n]\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach.\n\n    Args:\n        n (int): The position in the Fibonacci sequence (must be a non-negative integer).\n\n    Returns:\n        int: The n-th Fibonacci number.\n\n    Raises:\n        ValueError: If n is negative or not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Iterative calculation\n    prev, curr = 0, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n\n    return curr\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach.\n\n    The Fibonacci sequence is a series of numbers where each number is the sum\n    of the two preceding ones, usually starting with 0 and 1. That is,\n    F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n > 1.\n\n    :param n: The position in the Fibonacci sequence (0-indexed).\n    :return: The n-th Fibonacci number.\n\n    Examples:\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef main():\n    \"\"\"\n    Main function to handle user input and output for the Fibonacci calculation.\n    \"\"\"\n    try:\n        n = int(input())\n        result = fib(n)\n        print(f\"The {n}-th Fibonacci number is: {result}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach.\n\n    Args:\n        n (int): The position in the Fibonacci sequence (1-indexed).\n\n    Returns:\n        int: The n-th Fibonacci number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Base cases\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Iterative calculation\n    prev, curr = 0, 1\n    for _ in range(2, n):\n        prev, curr = curr, prev + curr\n\n    return curr\n\n# Example usage:\n# To calculate the 10th Fibonacci number, call fib(10)\n# print(fib(10))  # Output: 34\n"], "plans": ["requirement analysis:\nThe requirement is to implement a function that returns the n-th Fibonacci number. The function should be efficient and handle large inputs gracefully. It should also be easy to understand and integrate into other projects.\nrequirement pool:\n- Implement the Fibonacci function to return the n-th number\n- Optimize the function for performance with large inputs\n- Provide comprehensive documentation and examples\n- Ensure compatibility with various Python versions\n- Include error handling for invalid inputs\nWe will implement the Fibonacci function using an iterative approach to ensure efficiency and handle large inputs gracefully. This approach avoids the overhead of recursive function calls and stack overflow issues. We will also use memoization to further optimize performance for repeated calculations. The function will include error handling for invalid inputs such as negative numbers or non-integer values. We will use the 'functools' library for memoization.\n", "requirement analysis:\nThe requirement is to implement a function that returns the n-th Fibonacci number. The function should be efficient, especially for large values of n, and should include clear documentation and examples for ease of use.\nrequirement pool:\n- Implement the Fibonacci calculation function\n- Optimize the function for large input values\n- Provide documentation and usage examples\n- Ensure the function is easy to integrate into other projects\n- Include error handling for invalid inputs\nWe will implement the Fibonacci calculation using an iterative approach to ensure efficiency, especially for large input values. This approach avoids the overhead of recursive function calls and stack overflow issues. We will also use memoization to store previously computed Fibonacci numbers to further optimize performance. The function will include clear documentation and examples to aid understanding and usability.\n", "requirement analysis:\nThe requirement is to implement a function that accurately computes the n-th Fibonacci number. The function should be efficient, especially for large values of n, and should include examples to demonstrate its usage.\nrequirement pool:\n- Implement the Fibonacci calculation function\n- Optimize the function for large inputs\n- Include examples in the documentation\n- Ensure the function is easy to understand\n- Provide performance benchmarks\nWe will implement a function to calculate the n-th Fibonacci number using an iterative approach to ensure efficiency, especially for large inputs. This approach avoids the overhead of recursive function calls and stack overflow issues. We will also use memoization to store previously computed Fibonacci numbers to further optimize performance for large inputs. The function will include detailed documentation with examples to demonstrate its usage.\n", "requirement analysis:\nThe requirement is to develop a function that computes the n-th Fibonacci number efficiently. The function should handle edge cases such as small and large values of n and provide accurate results. Additionally, the function should be easy to use and understand, with clear documentation and examples.\nrequirement pool:\n- Implement the Fibonacci calculation function\n- Optimize the function for performance with large inputs\n- Provide clear documentation and examples\n- Develop a user-friendly interface for input and output\n- Include educational content about the Fibonacci sequence\nWe will implement a function to calculate the n-th Fibonacci number using an iterative approach for efficiency. This approach avoids the overhead of recursive calls and is optimized for large input values. We will use Python's built-in capabilities without additional libraries, ensuring simplicity and performance. The function will include clear documentation and examples to aid user understanding.\n", "requirement analysis:\nThe requirement is to implement a function that returns the n-th Fibonacci number. The function should be efficient and handle large inputs gracefully. It should also be well-documented to facilitate understanding and integration.\nrequirement pool:\n- Implement the Fibonacci function to return the n-th number\n- Optimize the function for performance with large inputs\n- Provide comprehensive documentation and examples\n- Include error handling for invalid inputs\n- Create a user-friendly interface for non-developers\nWe will implement the Fibonacci function using an iterative approach to optimize performance for large inputs. This approach avoids the overhead of recursive calls and stack overflow issues. We will use Python's built-in capabilities without additional libraries, as they are sufficient for this task. Comprehensive documentation will be provided to ensure ease of integration and understanding.\n", "requirement analysis:\nThe requirement is to develop a function that computes the n-th Fibonacci number efficiently. The function should handle edge cases such as small and large values of n and provide accurate results. Additionally, the function should be easy to use and understand.\nrequirement pool:\n- Implement the Fibonacci calculation function\n- Optimize the function for large input values\n- Create a user-friendly interface for input and output\n- Provide educational content on the Fibonacci sequence\n- Include examples of Fibonacci numbers in the interface\nWe will implement a function to calculate the n-th Fibonacci number using an iterative approach to ensure efficiency, especially for large input values. This approach avoids the overhead of recursive calls and stack overflow issues. We will use Python's built-in capabilities without additional libraries, as they are sufficient for this task.\n", "requirement analysis:\nThe function should accurately compute the n-th Fibonacci number using an efficient algorithm. It should handle edge cases such as n=0 and large values of n. Documentation should include examples to illustrate usage.\nrequirement pool:\n- Implement the Fibonacci calculation algorithm\n- Optimize for performance with large inputs\n- Include comprehensive documentation with examples\n- Ensure the function handles edge cases\n- Provide a user-friendly interface for input\nWe will implement the Fibonacci calculation using an iterative approach to ensure performance optimization for large inputs. This approach avoids the overhead of recursive function calls and stack overflow issues. Additionally, we will use memoization to store previously computed Fibonacci numbers to further enhance performance. The function will include comprehensive documentation with examples to illustrate usage and handle edge cases such as n=0.\n", "requirement analysis:\nThe requirement is to develop a function that computes the n-th Fibonacci number efficiently. The function should handle edge cases such as small and large values of n and provide accurate results. Additionally, the function should be easy to use and understand, with clear documentation and examples.\nrequirement pool:\n- Implement the Fibonacci calculation function\n- Optimize the function for performance with large inputs\n- Create a user-friendly interface for input and output\n- Provide educational content on the Fibonacci sequence\n- Include examples and test cases in the documentation\nWe will implement a function to calculate the n-th Fibonacci number using an iterative approach to ensure efficiency, especially for large input values. This approach avoids the overhead of recursive function calls and stack overflow issues. We will use Python's built-in capabilities without additional libraries, as they are sufficient for this task. The function will include error handling for non-integer and negative inputs, providing clear error messages.\n", "requirement analysis:\nThe requirement is to develop a function that computes the n-th Fibonacci number efficiently. The function should handle edge cases such as n=0 and n=1, and should be optimized for larger values of n. The user should be able to understand the sequence generation process through examples.\nrequirement pool:\n- Implement the Fibonacci calculation function\n- Optimize the function for large input values\n- Provide examples and explanations of the Fibonacci sequence\n- Develop a user-friendly interface for input and output\n- Include educational content about the Fibonacci sequence\nWe will implement a function to calculate the n-th Fibonacci number using an iterative approach to ensure efficiency, especially for large input values. This approach avoids the overhead of recursive calls and stack overflow issues. We will also include a simple command-line interface for user input and output, and provide examples and explanations of the Fibonacci sequence within the function's docstring.\n", "requirement analysis:\nThe requirement is to develop a function that computes the n-th Fibonacci number efficiently. The function should handle edge cases such as small and large values of n and provide accurate results.\nrequirement pool:\n- Implement the Fibonacci calculation function\n- Optimize the function for performance\n- Create a user-friendly interface for input and output\n- Provide educational content on the Fibonacci sequence\n- Include examples and test cases for user reference\nWe will implement a function to calculate the n-th Fibonacci number using an iterative approach to ensure efficiency, especially for large values of n. This approach avoids the overhead of recursive calls and stack overflow issues. We will use Python's built-in capabilities without additional libraries, as they are sufficient for this task.\n"], "scores": [1.0, 0.9697, 0.9697, 0.0303, 0.9697, 0.9697, 1.0, 1.0, 1.0, 0.0303], "pass_results": [true, false, false, false, false, false, true, true, true, false], "pass_test_cases_num": [33, 32, 32, 1, 32, 32, 33, 33, 33, 1], "completion": "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number using an iterative approach.\n\n    Args:\n        n (int): The position in the Fibonacci sequence (1-indexed).\n\n    Returns:\n        int: The n-th Fibonacci number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Base cases\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Iterative calculation\n    prev, curr = 0, 1\n    for _ in range(2, n):\n        prev, curr = curr, prev + curr\n\n    return curr\n\n# Example usage:\n# To calculate the 10th Fibonacci number, call fib(10)\n# print(fib(10))  # Output: 34\n", "passed": true, "pass": true, "pass_num": 4, "round": 206, "mutate_method": "expand_one2two", "parent_index": 47}
