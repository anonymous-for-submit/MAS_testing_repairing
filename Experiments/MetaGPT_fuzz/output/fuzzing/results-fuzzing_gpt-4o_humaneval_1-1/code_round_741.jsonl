{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine the total number of distinct characters present in it. Distinct characters are characters that appear uniquely in the string. Regardless of their case, they should be counted as one.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "entry_point": "count_distinct_characters", "canonical_solution": "    return len(set(string.lower()))\n", "test": ["def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ADUyBFimKBrPz\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ljRgJlzHTQBAAbgwEl\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lvPZKdAVLulCscvG\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"k\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hqzz\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"kee\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ol\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"vc\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"mNuEPdroYuxj\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iir\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"TjkfWbUyuBlElbU\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wJUxzBTdbiANdnKbjnrMEqu\") == 16", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"xyxm\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"XJGLcPMiAJHh\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"urra\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"qslq\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nInnuRSwrqxcojIIwy\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"DqmriBBthVs\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"GKKGkHiMc\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iTTDUEsZTXGRPVROVLAXHZF\") == 17", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"q\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"HOGRmvTANUhMvONn\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"CkCPdWkXENxGL\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"s iRxpKsyfxPoWQMD\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"EUMYPPMNBmwMUMf\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters('abcde') == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"txjolkwt\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"DZDQAWXHSw\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"gvXcdjVQzWEZOdtJSCpl\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dKmNZkVVglVIkueSlUQW\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"otaZOB Pyaztqcfd \") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lnr\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wKJjFHVncyJqtCJzyUD\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"TLQvGLpcjPHrCKFl\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"uqfitri\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"IKihunRBNqFCI\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jxc\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jIqutIUuTqJkqvufly\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"RblfAbqWjlGb\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dCaNheOPBLJAAlmRiq\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"j\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"HxlgTM upaEvXetVo\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"zntaswi\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jzatha\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"tZuBlwhSlQLVugh\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"QbfkjShfzGeBKdoRMxcF\") == 16", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"gvRubuESIkrZ\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"esu\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ooj\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"femphduq\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"InXkmhzjgPkxGvmw\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"clGPOVWLcboDuAvmks\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nzf\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"HYSpuFbvSsu\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"DOMJVxYZSmRvpWdYKm\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"aGkvHvzRTyirmeGZC\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"tASyULIbokwr\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hxpxzqo\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"cCaIjZBhhYWNDOiV\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters('aaaaAAAAaaaa') == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jYnrJXIcXKGEZVo\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"bQxCKyKcntHHYeEXVj\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iwrnzam\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"UIWbIZNIppW\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"OZcKqLtxovbrdMH\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nvxkl\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"RvubWTBuPdEIKRDWAH\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ufqgMhqrauVyUULZkrjh\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iZiIACOjGbab\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"LumPVjeiLbebI\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hjfLMEhQbeOopYBuToCxkJ\") == 16", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"r\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"atRLcmATkWMkiuMFjp\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"LnFlIbomxdvveccGHsakJ\") == 18", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nHtVTgYRztQ\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"pJdVyTwDKELVgUZIx\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"uYQSGSfGa\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"b\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"FycYSU cvudKrbVisFTIlgl\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"CHorbExVwH\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"upir\") == 4", "def check(count_distinct_characters):\n\tassert count_distinct_characters('abcde' + 'cade' + 'CADE') == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"cGapAoOkAs\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"zn\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ka\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"MUOgmWwmwjWfcnVPba\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"rnnvtkti\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hdvzMhkHU ZWPT M\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"kxx\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lcBMHAxSzIayT\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wqu\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"kz\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ohtqe\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"smvgbMkhwLhoRln\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"tCXKMaJRhU\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"l\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"rrnjzpuu\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"WfnXXAOonzYJHsFb\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"YOYqwkoPDfAxdiSTgveN\") == 17", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nsv\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"agfbll\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"FUXHhvGoXRhkAxAZ\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dvUoRAqoszDQJ\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ldz\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"yl\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"JmPaTrSczRkX\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"EMtSdVgYJlMwbj\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"n\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dxofvtop\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"uwDWXwsJclzqiVYrtu\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"t\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"QZnK QcEIfLoqkAuviX\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"MtLuTBbVXUGUlJvca\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"FdvjkekrDvMxdP\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters('Jerry jERRY JeRRRY') == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jwFRUyssbSoqWiO\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"VFKpqZXDMClGMFlrUL\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"otifwyf\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wdjtlARsrwKK\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"pVOOHkDZJ\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"czcmhqowv\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"pqwv\") == 4", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"EYJKqrJyAm\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ffGJKHLgYtdrUNG\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"unkhr\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ozt\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"GbGqxgAwwHVqX\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lio\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters('') == 0"], "test_case_list": ["assert count_distinct_characters(\"ADUyBFimKBrPz\") == 12", "assert count_distinct_characters(\"ljRgJlzHTQBAAbgwEl\") == 12", "assert count_distinct_characters(\"lvPZKdAVLulCscvG\") == 11", "assert count_distinct_characters(\"k\") == 1", "assert count_distinct_characters(\"hqzz\") == 3", "assert count_distinct_characters(\"kee\") == 2", "assert count_distinct_characters(\"ol\") == 2", "assert count_distinct_characters(\"vc\") == 2", "assert count_distinct_characters(\"mNuEPdroYuxj\") == 11", "assert count_distinct_characters(\"iir\") == 2", "assert count_distinct_characters(\"TjkfWbUyuBlElbU\") == 10", "assert count_distinct_characters(\"wJUxzBTdbiANdnKbjnrMEqu\") == 16", "assert count_distinct_characters(\"xyxm\") == 3", "assert count_distinct_characters(\"XJGLcPMiAJHh\") == 10", "assert count_distinct_characters(\"urra\") == 3", "assert count_distinct_characters(\"qslq\") == 3", "assert count_distinct_characters(\"nInnuRSwrqxcojIIwy\") == 12", "assert count_distinct_characters(\"DqmriBBthVs\") == 10", "assert count_distinct_characters(\"GKKGkHiMc\") == 6", "assert count_distinct_characters(\"iTTDUEsZTXGRPVROVLAXHZF\") == 17", "assert count_distinct_characters(\"q\") == 1", "assert count_distinct_characters(\"HOGRmvTANUhMvONn\") == 10", "assert count_distinct_characters(\"CkCPdWkXENxGL\") == 10", "assert count_distinct_characters(\"s iRxpKsyfxPoWQMD\") == 14", "assert count_distinct_characters(\"EUMYPPMNBmwMUMf\") == 9", "assert count_distinct_characters('abcde') == 5", "assert count_distinct_characters(\"txjolkwt\") == 7", "assert count_distinct_characters(\"DZDQAWXHSw\") == 8", "assert count_distinct_characters(\"gvXcdjVQzWEZOdtJSCpl\") == 15", "assert count_distinct_characters(\"dKmNZkVVglVIkueSlUQW\") == 14", "assert count_distinct_characters(\"otaZOB Pyaztqcfd \") == 12", "assert count_distinct_characters(\"lnr\") == 3", "assert count_distinct_characters(\"wKJjFHVncyJqtCJzyUD\") == 14", "assert count_distinct_characters(\"TLQvGLpcjPHrCKFl\") == 12", "assert count_distinct_characters(\"uqfitri\") == 6", "assert count_distinct_characters(\"IKihunRBNqFCI\") == 10", "assert count_distinct_characters(\"jxc\") == 3", "assert count_distinct_characters(\"jIqutIUuTqJkqvufly\") == 10", "assert count_distinct_characters(\"RblfAbqWjlGb\") == 9", "assert count_distinct_characters(\"dCaNheOPBLJAAlmRiq\") == 15", "assert count_distinct_characters(\"j\") == 1", "assert count_distinct_characters(\"HxlgTM upaEvXetVo\") == 13", "assert count_distinct_characters(\"zntaswi\") == 7", "assert count_distinct_characters(\"jzatha\") == 5", "assert count_distinct_characters(\"tZuBlwhSlQLVugh\") == 11", "assert count_distinct_characters(\"QbfkjShfzGeBKdoRMxcF\") == 16", "assert count_distinct_characters(\"gvRubuESIkrZ\") == 10", "assert count_distinct_characters(\"esu\") == 3", "assert count_distinct_characters(\"ooj\") == 2", "assert count_distinct_characters(\"femphduq\") == 8", "assert count_distinct_characters(\"InXkmhzjgPkxGvmw\") == 12", "assert count_distinct_characters(\"clGPOVWLcboDuAvmks\") == 14", "assert count_distinct_characters(\"nzf\") == 3", "assert count_distinct_characters(\"HYSpuFbvSsu\") == 8", "assert count_distinct_characters(\"DOMJVxYZSmRvpWdYKm\") == 13", "assert count_distinct_characters(\"aGkvHvzRTyirmeGZC\") == 13", "assert count_distinct_characters(\"tASyULIbokwr\") == 12", "assert count_distinct_characters(\"hxpxzqo\") == 6", "assert count_distinct_characters(\"cCaIjZBhhYWNDOiV\") == 13", "assert count_distinct_characters('aaaaAAAAaaaa') == 1", "assert count_distinct_characters(\"jYnrJXIcXKGEZVo\") == 13", "assert count_distinct_characters(\"bQxCKyKcntHHYeEXVj\") == 12", "assert count_distinct_characters(\"iwrnzam\") == 7", "assert count_distinct_characters(\"UIWbIZNIppW\") == 7", "assert count_distinct_characters(\"OZcKqLtxovbrdMH\") == 14", "assert count_distinct_characters(\"nvxkl\") == 5", "assert count_distinct_characters(\"RvubWTBuPdEIKRDWAH\") == 13", "assert count_distinct_characters(\"ufqgMhqrauVyUULZkrjh\") == 14", "assert count_distinct_characters(\"iZiIACOjGbab\") == 8", "assert count_distinct_characters(\"LumPVjeiLbebI\") == 9", "assert count_distinct_characters(\"hjfLMEhQbeOopYBuToCxkJ\") == 16", "assert count_distinct_characters(\"r\") == 1", "assert count_distinct_characters(\"atRLcmATkWMkiuMFjp\") == 13", "assert count_distinct_characters(\"LnFlIbomxdvveccGHsakJ\") == 18", "assert count_distinct_characters(\"nHtVTgYRztQ\") == 9", "assert count_distinct_characters(\"pJdVyTwDKELVgUZIx\") == 15", "assert count_distinct_characters(\"uYQSGSfGa\") == 7", "assert count_distinct_characters(\"b\") == 1", "assert count_distinct_characters(\"FycYSU cvudKrbVisFTIlgl\") == 15", "assert count_distinct_characters(\"CHorbExVwH\") == 9", "assert count_distinct_characters(\"upir\") == 4", "assert count_distinct_characters('abcde' + 'cade' + 'CADE') == 5", "assert count_distinct_characters(\"cGapAoOkAs\") == 7", "assert count_distinct_characters(\"zn\") == 2", "assert count_distinct_characters(\"ka\") == 2", "assert count_distinct_characters(\"MUOgmWwmwjWfcnVPba\") == 13", "assert count_distinct_characters(\"rnnvtkti\") == 6", "assert count_distinct_characters(\"hdvzMhkHU ZWPT M\") == 11", "assert count_distinct_characters(\"kxx\") == 2", "assert count_distinct_characters(\"lcBMHAxSzIayT\") == 12", "assert count_distinct_characters(\"wqu\") == 3", "assert count_distinct_characters(\"kz\") == 2", "assert count_distinct_characters(\"ohtqe\") == 5", "assert count_distinct_characters(\"smvgbMkhwLhoRln\") == 12", "assert count_distinct_characters(\"tCXKMaJRhU\") == 10", "assert count_distinct_characters(\"l\") == 1", "assert count_distinct_characters(\"rrnjzpuu\") == 6", "assert count_distinct_characters(\"WfnXXAOonzYJHsFb\") == 12", "assert count_distinct_characters(\"YOYqwkoPDfAxdiSTgveN\") == 17", "assert count_distinct_characters(\"nsv\") == 3", "assert count_distinct_characters(\"agfbll\") == 5", "assert count_distinct_characters(\"FUXHhvGoXRhkAxAZ\") == 11", "assert count_distinct_characters(\"dvUoRAqoszDQJ\") == 10", "assert count_distinct_characters(\"ldz\") == 3", "assert count_distinct_characters(\"yl\") == 2", "assert count_distinct_characters(\"JmPaTrSczRkX\") == 11", "assert count_distinct_characters(\"EMtSdVgYJlMwbj\") == 12", "assert count_distinct_characters(\"n\") == 1", "assert count_distinct_characters(\"dxofvtop\") == 7", "assert count_distinct_characters(\"uwDWXwsJclzqiVYrtu\") == 15", "assert count_distinct_characters(\"t\") == 1", "assert count_distinct_characters(\"QZnK QcEIfLoqkAuviX\") == 15", "assert count_distinct_characters(\"MtLuTBbVXUGUlJvca\") == 11", "assert count_distinct_characters(\"FdvjkekrDvMxdP\") == 10", "assert count_distinct_characters('Jerry jERRY JeRRRY') == 5", "assert count_distinct_characters(\"jwFRUyssbSoqWiO\") == 11", "assert count_distinct_characters(\"VFKpqZXDMClGMFlrUL\") == 14", "assert count_distinct_characters(\"otifwyf\") == 6", "assert count_distinct_characters(\"wdjtlARsrwKK\") == 9", "assert count_distinct_characters(\"pVOOHkDZJ\") == 8", "assert count_distinct_characters(\"czcmhqowv\") == 8", "assert count_distinct_characters(\"pqwv\") == 4", "assert count_distinct_characters(\"EYJKqrJyAm\") == 8", "assert count_distinct_characters(\"ffGJKHLgYtdrUNG\") == 12", "assert count_distinct_characters(\"unkhr\") == 5", "assert count_distinct_characters(\"ozt\") == 3", "assert count_distinct_characters(\"GbGqxgAwwHVqX\") == 8", "assert count_distinct_characters(\"lio\") == 3", "assert count_distinct_characters('') == 0"], "nl": " Given a string, find out how many distinct characters (regardless of case) does it consist of\n    ", "func": "def count_distinct_characters(string: str) -> int:", "examples": ">>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    ", "repair_prompt": ["def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine the total number of distinct characters present in it. Distinct characters are characters that appear uniquely in the string. Regardless of their case, they should be counted as one.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, determine the total number of distinct characters present in it.\n    Distinct characters are characters that appear uniquely in the string.\n    Regardless of their case, they should be counted as one.\n\n    Args:\n        string (str): The input string to analyze.\n\n    Returns:\n        int: The number of distinct characters in the string.\n\n    Examples:\n        >>> count_distinct_characters('xyzXYZ')\n        3\n        >>> count_distinct_characters('Jerry')\n        4\n    \"\"\"\n    # Convert the string to lowercase to ensure case insensitivity\n    lowercase_string = string.lower()\n    \n    # Use a set to store distinct characters\n    distinct_characters = set(lowercase_string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)\n\n# Note: The handling of special characters and spaces is not specified in the context.\n# This implementation counts them as distinct characters.\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, determine the total number of distinct characters present in it.\n    Distinct characters are characters that appear uniquely in the string.\n    Regardless of their case, they should be counted as one.\n\n    Parameters:\n    string (str): The input string to analyze.\n\n    Returns:\n    int: The count of distinct characters in the string.\n    \"\"\"\n    # Convert the string to lowercase to ensure case insensitivity\n    lowercase_string = string.lower()\n    \n    # Create a set of characters from the lowercase string to ensure uniqueness\n    distinct_characters = set(lowercase_string)\n    \n    # Return the count of distinct characters\n    return len(distinct_characters)\n\n# Example usage:\n# result = count_distinct_characters(\"Hello, World!\")\n# print(result)  # Output should be 10, as there are 10 distinct characters: h, e, l, o, ,,  , w, r, d, !\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"Counts the number of distinct characters in a string, ignoring case.\n\n    Args:\n        string (str): A string containing characters.\n\n    Returns:\n        int: An integer representing the count of distinct characters, ignoring case.\n    \"\"\"\n    # Convert the string to lowercase to ensure case insensitivity\n    lowercase_string = string.lower()\n    \n    # Create a set of characters from the lowercase string\n    distinct_characters = set(lowercase_string)\n    \n    # Return the count of distinct characters\n    return len(distinct_characters)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_string = \"Hello, World!\"\n    print(f\"Distinct characters count: {count_distinct_characters(example_string)}\")\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, determine the total number of distinct characters present in it.\n    Distinct characters are characters that appear uniquely in the string.\n    Regardless of their case, they should be counted as one.\n\n    Parameters:\n    string (str): The input string to evaluate.\n\n    Returns:\n    int: The count of distinct characters in the string.\n    \"\"\"\n    # Convert the string to lowercase to ensure case insensitivity\n    lowercase_string = string.lower()\n    \n    # Use a set to store unique characters\n    unique_characters = set(lowercase_string)\n    \n    # Return the number of unique characters\n    return len(unique_characters)\n\n# Example usage:\n# print(count_distinct_characters('xyzXYZ'))  # Output: 3\n# print(count_distinct_characters('Jerry'))   # Output: 4\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, determine the total number of distinct characters present in it.\n    Distinct characters are characters that appear uniquely in the string.\n    Regardless of their case, they should be counted as one.\n\n    Parameters:\n    string (str): The input string to analyze.\n\n    Returns:\n    int: The count of distinct characters in the string.\n    \"\"\"\n    # Convert the string to lowercase to ensure case-insensitivity\n    lowercase_string = string.lower()\n    \n    # Use a set to store distinct characters\n    distinct_characters = set(lowercase_string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, determine the total number of distinct characters present in it.\n    Distinct characters are characters that appear uniquely in the string.\n    Regardless of their case, they should be counted as one.\n\n    Parameters:\n    string (str): The input string to analyze.\n\n    Returns:\n    int: The count of distinct characters in the string.\n    \"\"\"\n    # Convert the string to lowercase to ensure case insensitivity\n    lowercase_string = string.lower()\n    \n    # Create a set of characters from the lowercase string\n    # Sets automatically handle duplicates and only store unique items\n    distinct_characters = set(lowercase_string)\n    \n    # Return the count of distinct characters\n    return len(distinct_characters)\n\n# Example usage:\n# count = count_distinct_characters('xyzXYZ')\n# print(count)  # Output: 3\n\n# count = count_distinct_characters('Jerry')\n# print(count)  # Output: 4\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"Counts the number of distinct characters in a string, ignoring case.\n\n    Args:\n        string (str): The input string to evaluate.\n\n    Returns:\n        int: The number of distinct characters in the string, case-insensitively.\n    \"\"\"\n    # Convert the string to lowercase to ensure case-insensitivity\n    lowercase_string = string.lower()\n    \n    # Use a set to store distinct characters\n    distinct_characters = set(lowercase_string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(count_distinct_characters('xyzXYZ'))  # Expected output: 3\n    print(count_distinct_characters('Jerry'))   # Expected output: 4\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, determine the total number of distinct characters present in it.\n    Distinct characters are characters that appear uniquely in the string.\n    Regardless of their case, they should be counted as one.\n\n    Args:\n    string (str): The input string to analyze.\n\n    Returns:\n    int: The number of distinct characters in the string.\n\n    Examples:\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ensure case-insensitivity\n    lowercase_string = string.lower()\n    \n    # Create a set from the lowercase string to automatically handle duplicates\n    distinct_characters = set(lowercase_string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_string = \"Hello, World!\"\n    print(f\"Number of distinct characters in '{example_string}': {count_distinct_characters(example_string)}\")\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, determine the total number of distinct characters present in it.\n    Distinct characters are characters that appear uniquely in the string.\n    Regardless of their case, they should be counted as one.\n\n    Parameters:\n    string (str): The input string to analyze.\n\n    Returns:\n    int: The number of distinct characters in the string.\n\n    Examples:\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ensure case insensitivity\n    lowercase_string = string.lower()\n    \n    # Create a set of characters from the string\n    distinct_characters = set(lowercase_string)\n    \n    # Return the count of distinct characters\n    return len(distinct_characters)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_string = \"xyzXYZ\"\n    print(f\"Distinct characters in '{example_string}': {count_distinct_characters(example_string)}\")\n    \n    example_string = \"Jerry\"\n    print(f\"Distinct characters in '{example_string}': {count_distinct_characters(example_string)}\")\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, determine the total number of distinct characters present in it.\n    Distinct characters are characters that appear uniquely in the string.\n    Regardless of their case, they should be counted as one.\n\n    Parameters:\n    string (str): The input string to evaluate.\n\n    Returns:\n    int: The count of distinct characters.\n    \"\"\"\n    # Convert the input string to lowercase to ensure case insensitivity\n    lowercase_string = string.lower()\n    \n    # Use a set to store distinct characters\n    distinct_characters = set(lowercase_string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)\n"], "plans": ["requirement analysis:\nThe function should accurately count distinct characters in a string, treating uppercase and lowercase as the same. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- Accurate counting of distinct characters\n- Case insensitivity in character counting\n- Performance optimization for large strings\n- Clear documentation and examples\n- Integration with other string manipulation libraries\nWe will implement a function that counts distinct characters in a string, treating uppercase and lowercase characters as the same. We will use Python's built-in set data structure to efficiently handle distinct character counting, as it automatically handles uniqueness. The function will convert the string to lowercase to ensure case insensitivity. This approach is both simple and efficient, making it suitable for large strings.\n", "requirement analysis:\nThe function should accurately count distinct characters in a string, ignoring case sensitivity. It should handle all types of characters, including special characters and spaces, efficiently even for large strings.\nrequirement pool:\n- Implement case-insensitive character counting\n- Ensure performance optimization for large strings\n- Handle special characters and spaces correctly\n- Provide a simple interface for user input\n- Include detailed error messages for invalid inputs\nWe will implement a function that counts distinct characters in a string, ignoring case sensitivity. The function will utilize Python's built-in set data structure to efficiently handle distinct character counting. This approach ensures optimal performance even for large strings. We will include all characters, including special characters and spaces, in the distinct count.\n", "requirement analysis:\nThe function should accurately count distinct characters in a string, treating uppercase and lowercase versions of the same letter as identical. It should handle various character types, including letters, numbers, and symbols, and be optimized for performance with large inputs.\nrequirement pool:\n- Implement the main function to count distinct characters.\n- Optimize the function for performance with large strings.\n- Ensure the function is case insensitive.\n- Handle special characters and spaces correctly.\n- Provide comprehensive test cases for validation.\nWe will implement a function using Python's built-in set data structure to efficiently count distinct characters in a string. The function will convert the string to lowercase to ensure case insensitivity and use the set to automatically handle distinctness, including special characters and spaces. This approach is optimal for performance as set operations are generally fast and suitable for large inputs.\n", "requirement analysis:\nThe function should accurately count distinct characters in a string, treating uppercase and lowercase as the same. It should be efficient and handle large inputs gracefully.\nrequirement pool:\n- Implement the main function to count distinct characters.\n- Optimize the function for performance with large strings.\n- Ensure case insensitivity in character counting.\n- Create a user-friendly interface for input and output.\n- Add error handling for non-string inputs.\nWe will implement a function that counts distinct characters in a string by converting the string to lowercase to ensure case insensitivity. We will use a set to store characters, as sets inherently store only unique items, which will help in counting distinct characters efficiently. This approach will optimize performance for large strings by leveraging the O(1) average time complexity of set operations.\n", "requirement analysis:\nThe function should accurately count distinct characters in a string, treating characters case-insensitively. It should handle all types of characters, including special characters and spaces, and perform efficiently even with large input strings.\nrequirement pool:\n- Implement case-insensitive character counting\n- Optimize for performance with large strings\n- Handle special characters and spaces\n- Provide a simple user interface\n- Include detailed error messages for invalid inputs\nWe will implement a function that counts distinct characters in a string, treating them case-insensitively. The function will utilize Python's built-in set data structure to efficiently handle distinct character counting. This approach ensures optimal performance even with large strings. We will also ensure that the function handles special characters and spaces correctly. The function will be simple and intuitive, requiring only a string input and returning an integer output.\n", "requirement analysis:\nThe function should accurately count distinct characters in a string, treating characters as case-insensitive. It should handle all types of characters, including special characters and spaces, and perform efficiently even with large input strings.\nrequirement pool:\n- Implement case-insensitive character counting\n- Ensure performance optimization for large strings\n- Support for special characters and spaces\n- Provide a simple and intuitive interface\n- Include detailed error handling and user feedback\nWe will use Python's built-in set data structure to efficiently count distinct characters in a string. The set will automatically handle duplicates and ensure case insensitivity by converting the string to lowercase before processing. This approach is optimal for performance as set operations are generally fast and suitable for large strings. Additionally, we will ensure the function handles special characters and spaces correctly by including them in the set operations.\n", "requirement analysis:\nThe function should accurately count distinct characters in a string, treating characters case-insensitively. It should handle all types of characters, including special characters and spaces, and perform efficiently even with large input strings.\nrequirement pool:\n- Implement case-insensitive character counting\n- Optimize for performance with large strings\n- Ensure compatibility with special characters\n- Provide a simple user interface\n- Include detailed error messages for invalid inputs\nWe will implement a function that counts distinct characters in a string, treating them case-insensitively. The function will utilize Python's built-in set data structure to efficiently handle distinct character counting. This approach ensures that the function is both simple and performant, even for large strings. The function will also handle special characters and spaces correctly.\n", "requirement analysis:\nThe function should accurately count distinct characters in a string, treating uppercase and lowercase as the same. It should be optimized for performance, especially with large strings, and provide clear documentation for ease of use.\nrequirement pool:\n- Accurate counting of distinct characters\n- Case-insensitive character handling\n- Performance optimization for large strings\n- Clear documentation and examples\n- Integration with existing string manipulation libraries\nWe will use Python's built-in set data structure to efficiently count distinct characters in a string. The set will automatically handle duplicates and allow for case-insensitive counting by converting the string to lowercase before processing. This approach is optimal for performance, especially with large strings, as set operations are generally fast. We will provide clear documentation and examples to ensure usability.\n", "requirement analysis:\nThe function should accurately count distinct characters in a string, treating uppercase and lowercase versions of the same character as identical. It should be efficient and easy to use, with clear documentation.\nrequirement pool:\n- Accurate counting of distinct characters\n- Case insensitivity in character counting\n- Efficiency with large strings\n- Clear documentation and examples\n- Compatibility with various string formats\nWe will implement a function that uses Python's built-in set to efficiently count distinct characters in a string. The function will convert the string to lowercase to ensure case insensitivity before counting distinct characters. This approach is efficient and leverages Python's capabilities for handling large strings.\n", "requirement analysis:\nThe function should accurately count distinct characters in a string, treating uppercase and lowercase as the same. It should be optimized for performance to handle large strings efficiently.\nrequirement pool:\n- Implement the main function to count distinct characters.\n- Optimize the function for performance with large strings.\n- Ensure case insensitivity in character counting.\n- Provide comprehensive test cases for validation.\n- Document the function usage and edge cases.\nWe will implement a function that converts the input string to lowercase to ensure case insensitivity, then use a set to store distinct characters, as sets inherently do not allow duplicates. This approach is efficient for large strings due to the average O(1) time complexity for set operations. We will use Python's built-in capabilities without additional libraries to keep the solution simple and performant.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [129, 129, 129, 129, 129, 129, 129, 129, 129, 129], "completion": "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, determine the total number of distinct characters present in it.\n    Distinct characters are characters that appear uniquely in the string.\n    Regardless of their case, they should be counted as one.\n\n    Parameters:\n    string (str): The input string to evaluate.\n\n    Returns:\n    int: The count of distinct characters.\n    \"\"\"\n    # Convert the input string to lowercase to ensure case insensitivity\n    lowercase_string = string.lower()\n    \n    # Use a set to store distinct characters\n    distinct_characters = set(lowercase_string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)\n", "passed": true, "pass": true, "pass_num": 10, "round": 741, "mutate_method": "expand_one2two", "parent_index": 14}
