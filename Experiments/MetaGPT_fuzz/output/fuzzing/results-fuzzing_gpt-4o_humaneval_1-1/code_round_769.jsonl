{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer, return a tuple that has the number of even and odd digits respectively. Ensure that the input is a non-negative integer before processing.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "entry_point": "even_odd_count", "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "test": ["def check(even_odd_count):\n\tassert even_odd_count(7) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-80) == (2, 0)", "def check(even_odd_count):\n\tassert even_odd_count(345577) == (1, 5)", "def check(even_odd_count):\n\tassert even_odd_count(2) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(345308) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-4) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(even_odd_count):\n\tassert even_odd_count(345501) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(-76) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-345816) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-45352) == (2, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-45351) == (1, 4)", "def check(even_odd_count):\n\tassert even_odd_count(2450) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-345822) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(3171) == (0, 4)", "def check(even_odd_count):\n\tassert even_odd_count(-75) == (0, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-45348) == (3, 2)", "def check(even_odd_count):\n\tassert even_odd_count(1) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(346175) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(4) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(345265) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-45345) == (2, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-74) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-345819) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(345360) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(3452) == (2, 2)", "def check(even_odd_count):\n\tassert even_odd_count(3347) == (1, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-345820) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-45343) == (2, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-45347) == (2, 3)", "def check(even_odd_count):\n\tassert even_odd_count(346787) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-2) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(-345821) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-77) == (0, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-73) == (0, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-79) == (0, 2)", "def check(even_odd_count):\n\tassert even_odd_count(345858) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(346658) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(10) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(345794) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(346614) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(3987) == (1, 3)", "def check(even_odd_count):\n\tassert even_odd_count(9) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-5) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(347145) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(4207) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-45344) == (3, 2)", "def check(even_odd_count):\n\tassert even_odd_count(3949) == (1, 3)", "def check(even_odd_count):\n\tassert even_odd_count(3) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-82) == (2, 0)", "def check(even_odd_count):\n\tassert even_odd_count(-81) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-45349) == (2, 3)", "def check(even_odd_count):\n\tassert even_odd_count(346547) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(5) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-45346) == (3, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-345817) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(12) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(3444) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(3981) == (1, 3)", "def check(even_odd_count):\n\tassert even_odd_count(0) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(-3) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(346081) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-345823) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(8) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(3015) == (1, 3)", "def check(even_odd_count):\n\tassert even_odd_count(3724) == (2, 2)", "def check(even_odd_count):\n\tassert even_odd_count(345220) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(346211) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-78) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(2810) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(2650) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-83) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-345824) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-345818) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-6) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(-7) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(2708) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-1) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-345825) == (3, 3)"], "test_case_list": ["assert even_odd_count(7) == (0, 1)", "assert even_odd_count(-80) == (2, 0)", "assert even_odd_count(345577) == (1, 5)", "assert even_odd_count(2) == (1, 0)", "assert even_odd_count(345308) == (3, 3)", "assert even_odd_count(-4) == (1, 0)", "assert even_odd_count(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert even_odd_count(345501) == (2, 4)", "assert even_odd_count(-76) == (1, 1)", "assert even_odd_count(-345816) == (3, 3)", "assert even_odd_count(-45352) == (2, 3)", "assert even_odd_count(-45351) == (1, 4)", "assert even_odd_count(2450) == (3, 1)", "assert even_odd_count(-345822) == (4, 2)", "assert even_odd_count(3171) == (0, 4)", "assert even_odd_count(-75) == (0, 2)", "assert even_odd_count(-45348) == (3, 2)", "assert even_odd_count(1) == (0, 1)", "assert even_odd_count(346175) == (2, 4)", "assert even_odd_count(4) == (1, 0)", "assert even_odd_count(345265) == (3, 3)", "assert even_odd_count(-45345) == (2, 3)", "assert even_odd_count(-74) == (1, 1)", "assert even_odd_count(-345819) == (2, 4)", "assert even_odd_count(345360) == (3, 3)", "assert even_odd_count(3452) == (2, 2)", "assert even_odd_count(3347) == (1, 3)", "assert even_odd_count(-345820) == (4, 2)", "assert even_odd_count(-45343) == (2, 3)", "assert even_odd_count(-45347) == (2, 3)", "assert even_odd_count(346787) == (3, 3)", "assert even_odd_count(-2) == (1, 0)", "assert even_odd_count(-345821) == (3, 3)", "assert even_odd_count(-77) == (0, 2)", "assert even_odd_count(-73) == (0, 2)", "assert even_odd_count(-79) == (0, 2)", "assert even_odd_count(345858) == (3, 3)", "assert even_odd_count(346658) == (4, 2)", "assert even_odd_count(10) == (1, 1)", "assert even_odd_count(345794) == (2, 4)", "assert even_odd_count(346614) == (4, 2)", "assert even_odd_count(3987) == (1, 3)", "assert even_odd_count(9) == (0, 1)", "assert even_odd_count(-5) == (0, 1)", "assert even_odd_count(347145) == (2, 4)", "assert even_odd_count(4207) == (3, 1)", "assert even_odd_count(-45344) == (3, 2)", "assert even_odd_count(3949) == (1, 3)", "assert even_odd_count(3) == (0, 1)", "assert even_odd_count(-82) == (2, 0)", "assert even_odd_count(-81) == (1, 1)", "assert even_odd_count(-45349) == (2, 3)", "assert even_odd_count(346547) == (3, 3)", "assert even_odd_count(5) == (0, 1)", "assert even_odd_count(-45346) == (3, 2)", "assert even_odd_count(-345817) == (2, 4)", "assert even_odd_count(12) == (1, 1)", "assert even_odd_count(3444) == (3, 1)", "assert even_odd_count(3981) == (1, 3)", "assert even_odd_count(0) == (1, 0)", "assert even_odd_count(-3) == (0, 1)", "assert even_odd_count(346081) == (4, 2)", "assert even_odd_count(-345823) == (3, 3)", "assert even_odd_count(8) == (1, 0)", "assert even_odd_count(3015) == (1, 3)", "assert even_odd_count(3724) == (2, 2)", "assert even_odd_count(345220) == (4, 2)", "assert even_odd_count(346211) == (3, 3)", "assert even_odd_count(-78) == (1, 1)", "assert even_odd_count(2810) == (3, 1)", "assert even_odd_count(2650) == (3, 1)", "assert even_odd_count(-83) == (1, 1)", "assert even_odd_count(-345824) == (4, 2)", "assert even_odd_count(-345818) == (3, 3)", "assert even_odd_count(-6) == (1, 0)", "assert even_odd_count(-7) == (0, 1)", "assert even_odd_count(2708) == (3, 1)", "assert even_odd_count(-1) == (0, 1)", "assert even_odd_count(-345825) == (3, 3)"], "nl": "Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     ", "func": "def even_odd_count(num):", "examples": "Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    ", "repair_prompt": ["def even_odd_count(num):\t\n'''Given an integer, return a tuple that has the number of even and odd digits respectively. Ensure that the input is a non-negative integer before processing.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple[int, int]:\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n    Ensure that the input is a non-negative integer before processing.\n\n    Parameters:\n    num (int): The input integer which can be negative.\n\n    Returns:\n    tuple[int, int]: A tuple containing the count of even digits and odd digits.\n    \"\"\"\n    # Convert the number to positive if it's negative\n    num = abs(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each digit in the number\n    for digit in str(num):\n        # Convert the character to an integer\n        digit = int(digit)\n        \n        # Check if the digit is even or odd\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return the counts as a tuple\n    return (even_count, odd_count)\n\n# Example usage:\n# result = even_odd_count(-12345)\n# print(result)  # Output should be (2, 3) since there are 2 even digits (2, 4) and 3 odd digits (1, 3, 5)\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple:\n    \"\"\"\n    Counts the even and odd digits in a non-negative integer.\n\n    Args:\n        num (int): A non-negative integer.\n\n    Returns:\n        tuple: A tuple containing two integers: the count of even digits and the count of odd digits.\n    \n    Raises:\n        ValueError: If the input number is negative.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    even_count = 0\n    odd_count = 0\n\n    # Convert the number to a string to iterate over each digit\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count, odd_count\n\n# Example usage:\n# result = even_odd_count(123456)\n# print(result)  # Output: (3, 3)\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple[int, int]:\n    \"\"\"\n    Given a non-negative integer, return a tuple with the count of even and odd digits.\n\n    Args:\n        num (int): A non-negative integer.\n\n    Returns:\n        tuple[int, int]: A tuple containing the count of even digits and odd digits.\n\n    Raises:\n        ValueError: If the input is a negative integer.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    even_count = 0\n    odd_count = 0\n\n    # Convert the number to a string to iterate over each digit\n    for digit in str(num):\n        if digit.isdigit():\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count\n\n# Example usage:\n# result = even_odd_count(123456)\n# print(result)  # Output: (3, 3)\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple[int, int]:\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n    Ensure that the input is a non-negative integer before processing.\n    \n    Args:\n        num (int): The integer whose digits are to be counted.\n        \n    Returns:\n        tuple[int, int]: A tuple containing the count of even digits and odd digits.\n        \n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to its absolute value to handle negative numbers\n    num = abs(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each digit in the number\n    while num > 0:\n        digit = num % 10  # Get the last digit\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10  # Remove the last digit\n    \n    return even_count, odd_count\n", "from typing import List\n## main.py\n\nimport re\n\ndef even_odd_count(num: int) -> tuple:\n    \"\"\"\n    Given a non-negative integer, return a tuple with the count of even and odd digits.\n    \n    Args:\n        num (int): A non-negative integer.\n        \n    Returns:\n        tuple: A tuple (even_count, odd_count) where even_count is the number of even digits\n               and odd_count is the number of odd digits in the input number.\n    \n    Raises:\n        ValueError: If the input is not a non-negative integer.\n    \"\"\"\n    # Validate input using regular expression to ensure it's a non-negative integer\n    if not isinstance(num, int) or num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Convert the number to a string to iterate over each digit\n    num_str = str(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in num_str:\n        digit = int(char)\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return the counts as a tuple\n    return (even_count, odd_count)\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple:\n    \"\"\"Counts even and odd digits in a non-negative integer.\n\n    Args:\n        num (int): A non-negative integer.\n\n    Returns:\n        tuple: A tuple (even_count, odd_count) where even_count is the number\n               of even digits and odd_count is the number of odd digits in the input number.\n\n    Raises:\n        ValueError: If the input number is negative.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    even_count = 0\n    odd_count = 0\n\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count, odd_count\n\ndef main():\n    \"\"\"Main function to interact with the user and demonstrate the even_odd_count function.\"\"\"\n    try:\n        user_input = input()\n        num = int(user_input)\n        even_count, odd_count = even_odd_count(num)\n        print(f\"Even digits: {even_count}, Odd digits: {odd_count}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple:\n    \"\"\"\n    Given a non-negative integer, return a tuple with the count of even and odd digits.\n    Raises ValueError if the input is negative.\n\n    :param num: Non-negative integer to analyze\n    :return: Tuple (even_count, odd_count)\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    even_count = 0\n    odd_count = 0\n\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count, odd_count\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple[int, int]:\n    \"\"\"\n    Given a non-negative integer, return a tuple with the count of even and odd digits.\n\n    Args:\n        num: A non-negative integer\n\n    Returns:\n        A tuple (even_count, odd_count) where even_count is the number of even digits\n        and odd_count is the number of odd digits.\n    \"\"\"\n    # Validate input\n    if num < 0:\n        print(\"Error: Input must be a non-negative integer.\")\n        return (0, 0)\n\n    even_count = 0\n    odd_count = 0\n\n    # Convert the number to a string to iterate over each digit\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test with a valid input\n    number = 123456\n    even_count, odd_count = even_odd_count(number)\n    print(f\"Even digits: {even_count}, Odd digits: {odd_count}\")\n\n    # Test with an invalid input\n    invalid_number = -123\n    even_count, odd_count = even_odd_count(invalid_number)\n    print(f\"Even digits: {even_count}, Odd digits: {odd_count}\")\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple[int, int]:\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n    Ensure that the input is a non-negative integer before processing.\n    \n    Parameters:\n    num (int): The integer to be processed.\n    \n    Returns:\n    tuple[int, int]: A tuple containing the count of even digits and odd digits.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    # Convert the number to its absolute value\n    num = abs(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each digit of the number\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return the counts as a tuple\n    return (even_count, odd_count)\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple[int, int]:\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n    Ensure that the input is a non-negative integer before processing.\n    \n    Args:\n        num (int): A non-negative integer.\n        \n    Returns:\n        tuple[int, int]: A tuple containing the count of even and odd digits.\n        \n    Raises:\n        ValueError: If the input is not a non-negative integer.\n        \n    Example:\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if not isinstance(num, int) or num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    even_count = 0\n    odd_count = 0\n    \n    # Convert the number to its absolute value and iterate over each digit\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n"], "plans": ["requirement analysis:\nThe function should accurately count even and odd digits in a non-negative integer. It should handle negative inputs by converting them to positive before processing. The output should be a tuple with counts of even and odd digits.\nrequirement pool:\n- Accurate counting of even and odd digits\n- Handle negative numbers by converting them to positive\n- Provide clear and concise output\n- Optimize for performance\n- Include detailed error messages for invalid inputs\nWe will create a simple function that takes an integer as input, converts it to a positive number if it's negative, and then iterates through each digit to count how many are even and how many are odd. The function will return a tuple with these counts. We will use Python's built-in capabilities to handle the conversion and iteration efficiently.\n", "requirement analysis:\nThe function should accurately count even and odd digits in a non-negative integer. It should handle edge cases like zero and large numbers efficiently. The input validation for non-negative integers is crucial to prevent errors.\nrequirement pool:\n- Implement the main function to count even and odd digits.\n- Add input validation to ensure non-negative integers.\n- Optimize the function for performance with large numbers.\n- Design a simple UI for user interaction.\n- Provide error messages for invalid inputs.\nWe will implement a function that counts even and odd digits in a non-negative integer. The function will first validate the input to ensure it is non-negative. If a negative number is provided, it will return an error message. The function will then iterate over each digit of the number, count the even and odd digits, and return the counts as a tuple. We will use Python's built-in capabilities for handling large integers efficiently.\n", "requirement analysis:\nThe function should accurately count even and odd digits in a non-negative integer. It must handle large integers efficiently and provide error handling for negative inputs.\nrequirement pool:\n- Implement even and odd digit counting\n- Ensure input validation for non-negative integers\n- Optimize performance for large integers\n- Provide user-friendly error messages\n- Consider edge cases like zero\nWe will implement a function that counts even and odd digits in a non-negative integer using basic Python operations. The function will first validate the input to ensure it is non-negative, and then iterate through each digit to count evens and odds. We will use Python's built-in capabilities to handle large integers efficiently. For error handling, we will raise a ValueError with a clear message if the input is negative.\n", "requirement analysis:\nThe function should accurately count even and odd digits in a given integer, including handling negative numbers by considering their absolute value. The output should be a tuple with the first element as the count of even digits and the second as the count of odd digits.\nrequirement pool:\n- Implement the main function to count even and odd digits.\n- Ensure the function handles negative numbers correctly.\n- Optimize the function for performance.\n- Add comprehensive documentation and examples.\n- Include error handling for non-integer inputs.\nWe will implement a function that takes an integer as input, processes its absolute value to handle negative numbers, and counts the even and odd digits. The function will return a tuple with the count of even digits as the first element and the count of odd digits as the second element. We will use Python's built-in capabilities to efficiently iterate over the digits of the number.\n", "requirement analysis:\nThe function should accurately count even and odd digits in a non-negative integer. It must validate input to ensure it is non-negative and handle large integers efficiently.\nrequirement pool:\n- Implement even and odd digit counting functionality.\n- Validate input to ensure it is a non-negative integer.\n- Optimize performance for handling large integers.\n- Create a user-friendly interface for input and output.\n- Provide informative error messages for invalid inputs.\nWe will implement a function that counts even and odd digits in a non-negative integer. The function will first validate the input to ensure it is a non-negative integer. If the input is valid, it will convert the number to a string to iterate over each digit, checking if it is even or odd. We will use Python's built-in capabilities for efficient handling of large integers. The function will return a tuple with the counts of even and odd digits. We will use the 're' library to ensure the input is a valid non-negative integer.\n", "requirement analysis:\nThe function should accurately count even and odd digits in a non-negative integer. It should handle edge cases like zero and large numbers efficiently. The input validation for non-negative integers is crucial to prevent errors.\nrequirement pool:\n- Implement the main function to count even and odd digits.\n- Ensure input validation for non-negative integers.\n- Optimize the function for performance with large numbers.\n- Design a user-friendly interface for input and output.\n- Provide error messages for invalid inputs.\nWe will implement a function that counts even and odd digits in a non-negative integer. The function will first validate the input to ensure it is non-negative. We will use Python's built-in capabilities to iterate over each digit of the number, determine if it is even or odd, and maintain a count of each. The function will be optimized to handle large numbers efficiently by using simple arithmetic operations. We will also provide a user-friendly interface for input and output, and handle invalid inputs gracefully.\n", "requirement analysis:\nThe function should accurately count even and odd digits in a non-negative integer. It should handle edge cases such as zero and large numbers efficiently. The function should return a tuple with counts of even and odd digits.\nrequirement pool:\n- Implement the main function to count even and odd digits.\n- Ensure the function handles edge cases like zero and large numbers.\n- Provide error handling for negative inputs.\n- Optimize for performance with large inputs.\n- Include comprehensive test cases.\nWe will implement a simple function to count even and odd digits in a non-negative integer. The function will first check if the input is a non-negative integer and raise a ValueError if it is not. We will use basic Python operations to iterate through each digit of the number and count the even and odd digits. This approach ensures simplicity and efficiency without the need for external libraries.\n", "requirement analysis:\nThe function should accurately count even and odd digits in a non-negative integer. It should handle edge cases like zero and large numbers efficiently. The input validation for non-negative integers is crucial to prevent errors.\nrequirement pool:\n- Implement the main function to count even and odd digits.\n- Add input validation to ensure non-negative integers.\n- Optimize the function for performance with large numbers.\n- Design a simple user interface for input and output.\n- Provide user feedback for invalid inputs.\nWe will implement a function that counts even and odd digits in a non-negative integer. The function will first validate the input to ensure it is non-negative. For performance optimization, especially with large numbers, we will use Python's built-in capabilities to handle large integers efficiently. The function will iterate over each digit, check if it is even or odd, and maintain a count. We will use simple print statements for user feedback on invalid inputs.\n", "requirement analysis:\nThe function should accurately count even and odd digits in a given integer, including handling negative numbers by considering their absolute value. The output should be a tuple with the first element as the count of even digits and the second as the count of odd digits.\nrequirement pool:\n- Implement the main function to count even and odd digits.\n- Ensure the function handles negative numbers correctly.\n- Optimize the function for performance.\n- Add error handling for non-integer inputs.\n- Provide detailed documentation and examples.\nWe will implement a function that counts even and odd digits in a given integer. The function will handle negative numbers by considering their absolute value. We will use Python's built-in capabilities to efficiently iterate over the digits of the number. The function will ensure that the input is an integer and will return a tuple with the count of even and odd digits.\n", "requirement analysis:\nThe function should accurately count even and odd digits in a given integer. It must handle negative numbers by considering their absolute value and ensure the input is a valid integer.\nrequirement pool:\n- Implement the main function to count even and odd digits.\n- Handle negative numbers by using their absolute value.\n- Validate input to ensure it is a non-negative integer.\n- Provide meaningful error messages for invalid inputs.\n- Optimize for performance with large numbers.\nWe will implement a simple function that counts even and odd digits in a given integer. The function will handle negative numbers by considering their absolute value and will validate the input to ensure it is a non-negative integer. We will use Python's built-in capabilities to achieve this without the need for external libraries.\n"], "scores": [1.0, 0.5316, 0.5316, 0.9747, 0.5316, 0.5316, 0.5316, 0.5316, 1.0, 0.5316], "pass_results": [true, false, false, false, false, false, false, false, true, false], "pass_test_cases_num": [79, 42, 42, 77, 42, 42, 42, 42, 79, 42], "completion": "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple[int, int]:\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n    Ensure that the input is a non-negative integer before processing.\n    \n    Args:\n        num (int): A non-negative integer.\n        \n    Returns:\n        tuple[int, int]: A tuple containing the count of even and odd digits.\n        \n    Raises:\n        ValueError: If the input is not a non-negative integer.\n        \n    Example:\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if not isinstance(num, int) or num < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    even_count = 0\n    odd_count = 0\n    \n    # Convert the number to its absolute value and iterate over each digit\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n", "passed": true, "pass": true, "pass_num": 2, "round": 769, "mutate_method": "add_1_sentence_at_end", "parent_index": 126}
