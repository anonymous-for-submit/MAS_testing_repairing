{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two. It also returns true if all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two. It also returns true if all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''"], "completions": ["from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers as input and returns True if one of the numbers is equal to the sum of the other two \n    or if all numbers are integers. Returns False otherwise.\n\n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n\n    Returns:\n    bool: True if one number is the sum of the other two or all are integers, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    # If neither condition is met, return False\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers and returns True if one of the numbers is equal to the sum of the other two \n    or if all numbers are integers.\n\n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n\n    Returns:\n    bool: True if one number equals the sum of the other two or if all numbers are integers, otherwise False.\n    \"\"\"\n    # Check if all numbers are integers\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return True\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers as input.\n    Returns True if one of the numbers is equal to the sum of the other two or if all numbers are integers.\n    Returns False otherwise.\n\n    Args:\n        x (float): First number.\n        y (float): Second number.\n        z (float): Third number.\n\n    Returns:\n        bool: True if conditions are met, False otherwise.\n    \"\"\"\n    # Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n\n    # Check if any number is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n\ndef validate_input():\n    \"\"\"\n    Validates that the inputs are numeric.\n\n    Args:\n        x: First input.\n        y: Second input.\n        z: Third input.\n\n    Returns:\n        bool: True if all inputs are numeric, False otherwise.\n    \"\"\"\n    return all(isinstance(i, (int, float)) for i in [x, y, z])\n\ndef main():\n    \"\"\"\n    Main function to demonstrate the usage of any_int function.\n    \"\"\"\n    # Example inputs\n    x, y, z = 3, 5, 8\n\n    # Validate inputs\n    if not validate_input():\n        print(\"Invalid inputs: All inputs must be numeric.\")\n        return\n\n    # Call the any_int function and print the result\n    result = any_int(x, y, z)\n    print(f\"Result for inputs ({x}, {y}, {z}): {result}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers and returns True if one of the numbers is equal to the sum of the other two \n    or if all numbers are integers.\n\n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n\n    Returns:\n    bool: True if one number is the sum of the other two or if all numbers are integers, False otherwise.\n    \"\"\"\n    # Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    \n    # Check if one number is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n\ndef validate_input():\n    \"\"\"\n    Validates the input to ensure they are numeric types.\n\n    Parameters:\n    x: First input\n    y: Second input\n    z: Third input\n\n    Returns:\n    bool: True if all inputs are numeric, False otherwise.\n    \"\"\"\n    return isinstance(x, (int, float)) and isinstance(y, (int, float)) and isinstance(z, (int, float))\n\ndef main(x, y, z):\n    \"\"\"\n    Main function to execute the logic of any_int with input validation.\n\n    Parameters:\n    x: First input\n    y: Second input\n    z: Third input\n\n    Returns:\n    bool: Result from any_int function or False if inputs are invalid.\n    \"\"\"\n    if validate_input():\n        return any_int(x, y, z)\n    else:\n        return False\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(main(3, 1, 2))  # True, because 3 = 1 + 2\n    print(main(3.0, 1.0, 2.0))  # True, because 3.0 = 1.0 + 2.0\n    print(main(3, 1, 1))  # False, no number is the sum of the other two\n    print(main(3, 3, 3))  # True, all are integers\n    print(main(\"3\", 1, 2))  # False, invalid input\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers as input and returns True if one of the numbers is equal to the sum of the other two \n    or if all numbers are integers. Returns False otherwise.\n\n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n\n    Returns:\n    bool: True if conditions are met, False otherwise\n    \"\"\"\n    # Check if all inputs are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    \n    # Check if any number is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers as input and returns True if one of the numbers is equal to the sum of the other two\n    or if all numbers are integers. Returns False otherwise.\n    \n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n    \n    Returns:\n    bool: True if conditions are met, False otherwise\n    \"\"\"\n    # Check if all inputs are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    \n    # Check if any of the numbers is equal to the sum of the other two\n    if x + y == z or x + z == y or y + z == x:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Function to check if one of the numbers is equal to the sum of the other two or if all numbers are integers.\n\n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n\n    Returns:\n    bool: True if one of the numbers is equal to the sum of the other two or if all numbers are integers, False otherwise.\n    \"\"\"\n    # Check if any of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    # Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    \n    return False\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(any_int(3.0, 1.0, 2.0))  # True, because 3.0 == 1.0 + 2.0\n    print(any_int(5, 2, 3))        # True, because 5 == 2 + 3\n    print(any_int(1.5, 1.5, 3.0))  # False, because none of the numbers is equal to the sum of the other two\n    print(any_int(2, 2, 2))        # True, because all numbers are integers\n    print(any_int(2.0, 2.0, 2.0))  # False, because they are not integers\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Checks if any of the three input numbers is equal to the sum of the other two\n    or if all numbers are integers.\n\n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n\n    Returns:\n    bool: True if one of the numbers is equal to the sum of the other two or if all numbers are integers, False otherwise.\n    \"\"\"\n    # Check if any number is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in (x, y, z)):\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three numbers and returns True if one of the numbers is equal to the sum of the other two \n    or if all numbers are integers. Returns False in any other cases.\n    \n    Parameters:\n    x (int): First number\n    y (int): Second number\n    z (int): Third number\n    \n    Returns:\n    bool: True if one number is the sum of the other two or if all are integers, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Check if one number is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    # If all numbers are integers but no number is the sum of the other two\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers and returns True if one of the numbers is equal to the sum of the other two or if all numbers are integers.\n    Returns False otherwise.\n\n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n\n    Returns:\n    bool: True if one of the numbers is the sum of the other two or if all are integers, False otherwise.\n    \"\"\"\n    # Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    \n    # Check if one of the numbers is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n"], "plans": ["requirement analysis:\nThe function should handle both integer and float inputs, returning true if one number equals the sum of the other two or if all inputs are integers. It should be efficient and easy to understand.\nrequirement pool:\n- Implement the main function logic to check the sum condition.\n- Ensure the function correctly identifies all integer inputs.\n- Optimize the function for performance with large numbers.\n- Add comprehensive test cases for edge scenarios.\n- Provide detailed documentation and examples.\nWe will implement a simple function that checks if one of the three input numbers is equal to the sum of the other two. Additionally, the function will verify if all inputs are integers. The function will return true if either condition is met. We will use Python's built-in type checking to ensure inputs are numeric and handle edge cases efficiently.\n", "requirement analysis:\nThe function should handle both integer and float inputs, returning true if one number equals the sum of the other two or if all numbers are integers. It should be efficient and easy to understand.\nrequirement pool:\n- Implement the main function logic\n- Ensure the function handles edge cases\n- Write comprehensive documentation\n- Optimize for performance\n- Improve code readability\nWe will implement a function that checks if one of the three numbers is equal to the sum of the other two or if all numbers are integers. The function will handle both integer and float inputs and return a boolean value. We will ensure the function is efficient and easy to understand by using simple conditional checks.\n", "requirement analysis:\nThe function should efficiently determine if any of the three numbers is the sum of the other two or if all numbers are integers. It should handle both positive and negative numbers and return results quickly.\nrequirement pool:\n- Implement the main function logic\n- Add comprehensive test cases\n- Ensure the function handles edge cases\n- Optimize for performance\n- Document the function usage\nWe will implement a simple function using basic Python operations to check if any of the three numbers is equal to the sum of the other two or if all numbers are integers. We will use type checking to ensure inputs are numeric and handle edge cases gracefully.\n", "requirement analysis:\nThe function should efficiently determine if one of the three numbers is the sum of the other two or if all numbers are integers. It should handle both positive and negative numbers and return accurate results for various input scenarios.\nrequirement pool:\n- Implement the main logic to check if one number is the sum of the other two.\n- Ensure the function returns true if all numbers are integers.\n- Optimize the function for performance.\n- Provide comprehensive documentation and examples.\n- Enhance code readability and maintainability.\nWe will implement a simple function that checks if one of the three numbers is the sum of the other two or if all numbers are integers. The function will handle both positive and negative numbers and ensure accurate results. We will use Python's built-in capabilities to check for integer types and perform arithmetic operations.\n", "requirement analysis:\nThe function should accurately determine if any of the three numbers is equal to the sum of the other two, and also check if all numbers are integers. It should return true for either condition being met and false otherwise.\nrequirement pool:\n- Implement the main function logic to check sum conditions\n- Ensure integer type validation for all inputs\n- Optimize the function for performance\n- Provide clear documentation and examples\n- Consider edge cases and input validation\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. Additionally, the function will verify if all inputs are integers. If either condition is met, the function will return True; otherwise, it will return False. We will use Python's built-in capabilities to handle these checks efficiently without the need for external libraries.\n", "requirement analysis:\nThe function should efficiently check if any of the three numbers is equal to the sum of the other two, and also verify if all numbers are integers. It should return a boolean value based on these conditions.\nrequirement pool:\n- Implement the main function logic to check the sum condition\n- Implement integer check for all inputs\n- Optimize the function for performance\n- Handle edge cases such as negative numbers and zero\n- Ensure clear documentation and examples\nWe will implement a simple function using Python's built-in operators to check if any of the three numbers is equal to the sum of the other two. Additionally, we will verify if all numbers are integers. This approach ensures high performance and functionality without the need for external libraries.\n", "requirement analysis:\nThe function should efficiently determine if any of the three input numbers is equal to the sum of the other two or if all numbers are integers. It should handle both integer and floating-point inputs and return a boolean result.\nrequirement pool:\n- Implement the main function logic to check the sum condition.\n- Ensure the function checks if all inputs are integers.\n- Optimize the function for performance with large numbers.\n- Add comprehensive test cases to validate the function.\n- Document the function with examples and edge cases.\nWe will implement a simple function using standard Python to check if any of the three input numbers is equal to the sum of the other two or if all numbers are integers. The function will handle both integer and floating-point inputs and return a boolean result. We will ensure the function is efficient and easy to understand by providing clear documentation and examples.\n", "requirement analysis:\nThe function should accurately determine if any of the three numbers is equal to the sum of the other two or if all numbers are integers. It should handle both integer and floating-point inputs and return a boolean value based on the conditions specified.\nrequirement pool:\n- Implement the main function logic\n- Ensure compatibility with integer and floating-point inputs\n- Optimize for performance\n- Include comprehensive test cases\n- Document the function usage and examples\nWe will implement a function that checks if any of the three input numbers is equal to the sum of the other two or if all numbers are integers. The function will handle both integer and floating-point inputs and return a boolean value. We will use Python's built-in capabilities to ensure performance and readability, without the need for additional libraries.\n", "requirement analysis:\nThe function should accurately determine if one of the numbers is the sum of the other two or if all numbers are integers. It should handle both positive and negative numbers and return false for non-integer inputs.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must return true if all numbers are integers.\n- The function should handle negative numbers correctly.\n- The function should return false for non-integer inputs.\n- The function should be optimized for performance.\nWe will implement a simple function that checks if one of the three input numbers is the sum of the other two or if all numbers are integers. The function will handle both positive and negative integers and will return false for any non-integer inputs. We will use Python's built-in type checking to ensure inputs are integers.\n", "requirement analysis:\nThe function should accurately determine if one of the three numbers is the sum of the other two or if all numbers are integers. It should handle both positive and negative numbers and return a boolean value. The function should be optimized for performance and easy to understand.\nrequirement pool:\n- Implement the main function logic to check the sum condition.\n- Ensure the function checks if all numbers are integers.\n- Optimize the function for performance.\n- Write comprehensive test cases to cover edge cases.\n- Document the function with examples and usage notes.\nWe will implement a simple function using native Python capabilities to check if one of the numbers is the sum of the other two and if all numbers are integers. This approach ensures efficiency and ease of integration without the need for external libraries.\n"], "scores": [0.9084, 0.9084, 0.9084, 0.9084, 0.9084, 0.9084, 0.9084, 0.9084, 1.0, 0.9084], "pass_results": [false, false, false, false, false, false, false, false, true, false], "pass_test_cases_num": [119, 119, 119, 119, 119, 119, 119, 119, 131, 119], "completion": "from typing import List\n## main.py\n\ndef any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Takes three numbers and returns True if one of the numbers is equal to the sum of the other two or if all numbers are integers.\n    Returns False otherwise.\n\n    Parameters:\n    x (float): First number\n    y (float): Second number\n    z (float): Third number\n\n    Returns:\n    bool: True if one of the numbers is the sum of the other two or if all are integers, False otherwise.\n    \"\"\"\n    # Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    \n    # Check if one of the numbers is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n", "passed": true, "pass": true, "pass_num": 1, "round": 776, "mutate_method": "expand_one2two", "parent_index": 374}
