{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. it returns True if there exist two different numbers within the list that add up to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": ["def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 2, 9, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, -2, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 1, -2, 2]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, -1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 5, -3, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 3, -4, 5]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 6, -7, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 6, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 1, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, 8, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 7, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 10, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 1, 8]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 7, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 7, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 5, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 5, 0]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, -4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 1, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 8, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 12]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 2, 6, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 3, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 4, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 7, 3, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 7, 8, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, -2, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, 10, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 8, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, 1, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 0, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 3, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 3, 6, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "test_case_list": ["assert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "assert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "assert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "assert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([4, 2, 9, 3]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "assert pairs_sum_to_zero([3]) == False", "assert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "assert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "assert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "assert pairs_sum_to_zero([2, 8, -2, 3]) == True", "assert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "assert pairs_sum_to_zero([3, 1, -2, 2]) == True", "assert pairs_sum_to_zero([3, 2, -1, 2]) == False", "assert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([6, 5, -3, 3]) == True", "assert pairs_sum_to_zero([4, 3, -4, 5]) == True", "assert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "assert pairs_sum_to_zero([2, 6, -4, 5]) == False", "assert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "assert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "assert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "assert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "assert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "assert pairs_sum_to_zero([6, 6, -7, 6]) == False", "assert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "assert pairs_sum_to_zero([1, 6, 1, 2]) == False", "assert pairs_sum_to_zero([5, 1, 3, 5]) == False", "assert pairs_sum_to_zero([4, 5, 8, 3]) == False", "assert pairs_sum_to_zero([6, 7, 2, 5]) == False", "assert pairs_sum_to_zero([2, 8, 10, 3]) == False", "assert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "assert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "assert pairs_sum_to_zero([2, 3, 1, 8]) == False", "assert pairs_sum_to_zero([1, 7, 4, 6]) == False", "assert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "assert pairs_sum_to_zero([4, 6, 2, 4]) == False", "assert pairs_sum_to_zero([5, 2, 1, 11]) == False", "assert pairs_sum_to_zero([5, 2, 7, 3]) == False", "assert pairs_sum_to_zero([5, 5, 2, 2]) == False", "assert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "assert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "assert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "assert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "assert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "assert pairs_sum_to_zero([2]) == False", "assert pairs_sum_to_zero([2, 3, 7, 1]) == False", "assert pairs_sum_to_zero([6, 1, -4, 6]) == False", "assert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "assert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "assert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "assert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "assert pairs_sum_to_zero([4, 1, 3, 7]) == False", "assert pairs_sum_to_zero([6, 8, 2, 5]) == False", "assert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "assert pairs_sum_to_zero([1, 5, 1, 12]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "assert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "assert pairs_sum_to_zero([2, 3, 7, 4]) == False", "assert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "assert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "assert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "assert pairs_sum_to_zero([2, 2, 6, 4]) == False", "assert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "assert pairs_sum_to_zero([3, 3, 1, 4]) == False", "assert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "assert pairs_sum_to_zero([1, 3, 4, 3]) == False", "assert pairs_sum_to_zero([5, 7, 3, 4]) == False", "assert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "assert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "assert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "assert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "assert pairs_sum_to_zero([4]) == False", "assert pairs_sum_to_zero([2, 7, 8, 5]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "assert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "assert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "assert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "assert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "assert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "assert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "assert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "assert pairs_sum_to_zero([1, 3, 3, 5]) == False", "assert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "assert pairs_sum_to_zero([2, 4, 1, 2]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "assert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "assert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "assert pairs_sum_to_zero([3, 4, 10, 1]) == False", "assert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "assert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "assert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "assert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "assert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "assert pairs_sum_to_zero([1, 5, 1, 3]) == False", "assert pairs_sum_to_zero([5, 8, -4, 5]) == False", "assert pairs_sum_to_zero([3, 2, 1, 6]) == False", "assert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "assert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "assert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "assert pairs_sum_to_zero([6, 1, 0, 3]) == False", "assert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "assert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "assert pairs_sum_to_zero([1, 2, 2, 2]) == False", "assert pairs_sum_to_zero([6]) == False", "assert pairs_sum_to_zero([2, 8, 1, 4]) == False", "assert pairs_sum_to_zero([2, 6, 2, 5]) == False", "assert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "assert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "assert pairs_sum_to_zero([6, 1, 3, 2]) == False", "assert pairs_sum_to_zero([5]) == False", "assert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "assert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "assert pairs_sum_to_zero([5, 3, 6, 7]) == False", "assert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "assert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "nl": "\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    ", "func": "def pairs_sum_to_zero(l):", "examples": ">>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    ", "repair_prompt": ["def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. it returns True if there exist two different numbers within the list that add up to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there exist two different numbers within the list that add up to zero, and False otherwise.\n    \n    Parameters:\n    l (list[int]): A list of integers.\n    \n    Returns:\n    bool: True if there are two different numbers that sum to zero, False otherwise.\n    \"\"\"\n    # Initialize an empty set to store numbers for fast lookup\n    seen_numbers = set()\n    \n    # Iterate through each number in the list\n    for number in l:\n        # Check if the negative of the current number is already in the set\n        if -number in seen_numbers:\n            # If found, return True as we have a pair that sums to zero\n            return True\n        # If not found, add the current number to the set\n        seen_numbers.add(number)\n    \n    # If no pairs are found, return False\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Check if there are two different numbers in the list that sum to zero.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there exist two different numbers that add up to zero, False otherwise.\n    \"\"\"\n    # Use a set to store the numbers we have seen so far\n    seen_numbers = set()\n\n    for number in l:\n        # Check if the negative of the current number is in the set\n        if -number in seen_numbers:\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    # If no such pair is found, return False\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input. It returns True if there exist two different numbers within the list that add up to zero, and False otherwise.\n\n    Parameters:\n    l (list[int]): A list of integers.\n\n    Returns:\n    bool: True if there are two different numbers that sum to zero, False otherwise.\n\n    Examples:\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    \"\"\"\n    seen_numbers = set()\n    \n    for number in l:\n        if -number in seen_numbers:\n            return True\n        seen_numbers.add(number)\n    \n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Check if any two distinct numbers in the list sum to zero.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there exists at least one pair of distinct numbers\n              in the list that sum to zero, otherwise False.\n    \"\"\"\n    # Initialize an empty set to store numbers seen so far\n    seen_numbers = set()\n\n    # Iterate through each number in the list\n    for number in l:\n        # Check if the negative of the current number is in the set\n        if -number in seen_numbers:\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    # Return False if no pairs found that sum to zero\n    return False\n\n# Example test cases to demonstrate the function's behavior\nif __name__ == \"__main__\":\n    # Test case 1: List with a pair that sums to zero\n    print(pairs_sum_to_zero([1, 2, -1, 3]))  # Expected output: True\n\n    # Test case 2: List without any pair that sums to zero\n    print(pairs_sum_to_zero([1, 2, 3, 4]))  # Expected output: False\n\n    # Test case 3: Empty list\n    print(pairs_sum_to_zero([]))  # Expected output: False\n\n    # Test case 4: Single-element list\n    print(pairs_sum_to_zero([1]))  # Expected output: False\n\n    # Test case 5: List with multiple pairs that sum to zero\n    print(pairs_sum_to_zero([1, -1, 2, -2, 3]))  # Expected output: True\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"\n    Takes a list of integers as input and returns True if there exist two different numbers within the list that add up to zero, and False otherwise.\n\n    Parameters:\n    l (list[int]): A list of integers.\n\n    Returns:\n    bool: True if a pair summing to zero exists, False otherwise.\n    \"\"\"\n    # Edge case: If the list is empty or has only one element, return False immediately\n    if len(l) < 2:\n        return False\n\n    # Initialize a set to keep track of numbers we have seen\n    seen_numbers = set()\n\n    # Iterate through each number in the list\n    for number in l:\n        # Check if the negative of the current number is in the set\n        if -number in seen_numbers:\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    # If no pair is found, return False\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"\n    Takes a list of integers as input and returns True if there exist two different numbers within the list that add up to zero, and False otherwise.\n\n    Parameters:\n    l (list[int]): A list of integers.\n\n    Returns:\n    bool: True if a pair sums to zero, False otherwise.\n    \"\"\"\n    # Create a set to store the numbers for fast lookup\n    seen_numbers = set()\n\n    # Iterate through each number in the list\n    for number in l:\n        # Check if the negative of the current number is already in the set\n        if -number in seen_numbers:\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    # If no pairs are found, return False\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Check if there are two distinct numbers in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    exist two different numbers within the list that add up to zero, and False\n    otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct numbers that sum to zero, False otherwise.\n    \"\"\"\n    # A set to keep track of numbers we have seen so far\n    seen_numbers = set()\n\n    # Iterate over each number in the list\n    for number in l:\n        # Check if the negative of the current number is in the set\n        if -number in seen_numbers:\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    # If no such pair is found, return False\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Checks if there are two distinct numbers in a list that sum to zero.\n\n    This function uses a set to track numbers seen so far and checks for their negation.\n    It efficiently traverses the list once, achieving O(n) time complexity.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct numbers that sum to zero, False otherwise.\n    \"\"\"\n    # Edge case: If the list is empty or has only one element, return False immediately\n    if len(l) < 2:\n        return False\n\n    seen_numbers = set()\n\n    for number in l:\n        # Check if the negation of the current number is already in the set\n        if -number in seen_numbers:\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    # If no such pair is found, return False\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there exist two different numbers within the list that add up to zero, and False otherwise.\n    \n    Parameters:\n    l (list[int]): A list of integers.\n    \n    Returns:\n    bool: True if any two distinct numbers sum to zero, False otherwise.\n    \n    Example:\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(l) < 2:\n        return False\n\n    # Initialize a set to keep track of seen numbers\n    seen_numbers = set()\n\n    # Iterate over each number in the list\n    for number in l:\n        # Check if the negative of the current number is in the set\n        if -number in seen_numbers:\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    # If no pairs sum to zero, return False\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Check if there exist two distinct numbers in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two different numbers within the list that add up to zero, and False otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct numbers that sum to zero, False otherwise.\n    \"\"\"\n    # Initialize an empty set to store the elements we have seen so far\n    seen_elements = set()\n\n    # Iterate over each element in the list\n    for element in l:\n        # Check if the negative of the current element exists in the set\n        if -element in seen_elements:\n            # If it exists, we found a pair that sums to zero\n            return True\n        # Add the current element to the set\n        seen_elements.add(element)\n\n    # If no pairs are found, return False\n    return False\n"], "plans": ["requirement analysis:\nThe function should efficiently check for pairs of numbers that sum to zero, handle edge cases such as empty lists or lists with a single element, and be easy to integrate into larger systems. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement the main function logic\n- Optimize for performance with large lists\n- Ensure clear and concise documentation\n- Handle edge cases gracefully\n- Provide examples and test cases\nWe will implement a function that efficiently checks for pairs of numbers that sum to zero using a set for fast look-up operations. This approach ensures that the function is optimized for performance, especially with large lists. The function will handle edge cases such as empty lists or lists with a single element gracefully. We will provide clear documentation and examples to facilitate easy integration into larger systems.\n", "requirement analysis:\nThe function should efficiently check for pairs of numbers that sum to zero, considering edge cases like empty lists or single-element lists. It should be optimized for performance and readability, ensuring it can be easily integrated into larger projects.\nrequirement pool:\n- Implement the main function logic to find pairs summing to zero.\n- Optimize the function for large input lists.\n- Ensure the function handles edge cases gracefully.\n- Provide comprehensive documentation and examples.\n- Conduct performance testing and optimization.\nWe will implement a function that efficiently checks for pairs of numbers that sum to zero using a set for quick lookup. This approach ensures that the function handles large lists efficiently and gracefully manages edge cases like empty lists or single-element lists. We will use built-in Python functions to maintain simplicity and avoid unnecessary dependencies.\n", "requirement analysis:\nThe function should efficiently check for pairs that sum to zero in a list of integers. It must handle edge cases such as empty lists or lists with a single element. The implementation should prioritize performance and simplicity, ensuring it is easy to understand and maintain.\nrequirement pool:\n- Implement the main function to check for pairs summing to zero\n- Optimize the function for large input lists\n- Provide comprehensive documentation and examples\n- Ensure the function handles edge cases gracefully\n- Maintain code readability and simplicity\nWe will implement a function that checks for pairs summing to zero using a set to track seen numbers, which allows for efficient lookup and ensures the function handles large lists quickly. The function will be simple and maintainable, with comprehensive documentation and examples.\n", "requirement analysis:\nThe function should efficiently determine if any two distinct numbers in a list sum to zero. It must handle edge cases such as empty lists and single-element lists. The implementation should prioritize readability and maintainability, ensuring that future developers can easily understand and modify the code.\nrequirement pool:\n- The function must return True if two distinct numbers sum to zero.\n- The function should handle edge cases like empty or single-element lists.\n- The function should be optimized for large datasets.\n- The function should include comprehensive test cases.\n- The function should have clear and concise documentation.\nWe will implement a function that efficiently checks if any two distinct numbers in a list sum to zero. To achieve this, we will use a set to track the numbers we have seen so far, which allows for O(1) average time complexity for lookups. This approach ensures the function is efficient even for large datasets. The function will handle edge cases such as empty lists and single-element lists by returning False immediately. We will include comprehensive test cases to demonstrate the function's behavior with various inputs.\n", "requirement analysis:\nThe function should efficiently check for pairs of numbers that sum to zero, handle edge cases, and be easy to understand and maintain. It should also be well-documented to aid developers in understanding its usage.\nrequirement pool:\n- Implement the main function to check for pairs summing to zero\n- Optimize the function for performance with large datasets\n- Ensure the function handles edge cases like empty or single-element lists\n- Provide comprehensive documentation and examples\n- Maintain simplicity and readability of the code\nWe will implement a function that uses a set to track the numbers we have seen so far. This allows us to efficiently check if the negative of the current number exists in the set, which would mean a pair summing to zero has been found. This approach is both time-efficient and space-efficient, making it suitable for large datasets. We will also handle edge cases such as empty lists or single-element lists by returning False immediately.\n", "requirement analysis:\nThe function should efficiently check for pairs of numbers that sum to zero in a list. It should handle edge cases such as empty lists or lists with a single element. The implementation should be optimized for performance, especially with large datasets, and should be easy to integrate into larger systems.\nrequirement pool:\n- Implement the main function to check for pairs summing to zero.\n- Optimize the function for performance with large datasets.\n- Handle edge cases like empty or single-element lists.\n- Provide comprehensive documentation and examples.\n- Ensure compatibility with existing systems and libraries.\nWe will implement a function that efficiently checks for pairs of numbers that sum to zero using a set for fast look-up operations. This approach ensures that the function is optimized for performance, especially with large datasets, and handles edge cases like empty or single-element lists.\n", "requirement analysis:\nThe function should efficiently determine if any two distinct numbers in a list sum to zero. It must handle edge cases such as empty lists or lists with a single element. The solution should be optimized for performance, especially with large datasets, and be easy to integrate into larger systems.\nrequirement pool:\n- Implement the main function to check for pairs summing to zero.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases like empty or single-element lists.\n- Provide comprehensive documentation and examples.\n- Ensure easy integration into larger systems.\nWe will implement a function that efficiently checks for pairs of numbers in a list that sum to zero. The function will utilize a set to track the numbers we have seen so far, which allows for O(1) average time complexity for lookups. This approach ensures the function is optimized for performance, especially with large datasets. The function will handle edge cases such as empty lists or lists with a single element by returning False immediately.\n", "requirement analysis:\nThe function should efficiently determine if any two distinct numbers in a list sum to zero. It should handle edge cases such as empty lists or lists with a single element. The implementation should be optimized for performance, especially with large datasets, and should be easy to integrate into larger systems.\nrequirement pool:\n- Implement the main function to check for pairs summing to zero.\n- Optimize the function for performance with large lists.\n- Ensure the function handles edge cases like empty or single-element lists.\n- Provide comprehensive documentation and examples.\n- Create unit tests to verify the function's correctness.\nWe will implement a function that uses a set to track the numbers we have seen so far. For each number in the list, we will check if its negation is already in the set. This approach ensures that we only need to traverse the list once, achieving O(n) time complexity, which is efficient for large datasets. We will also handle edge cases such as empty lists or lists with a single element by returning False immediately.\n", "requirement analysis:\nThe function should efficiently determine if any two distinct numbers in a list sum to zero. It must handle edge cases such as empty lists or lists with a single element. The implementation should be optimized for performance, especially with large datasets, and should be easy to integrate into larger systems.\nrequirement pool:\n- Implement the main function to check for pairs summing to zero.\n- Optimize the function for performance with large datasets.\n- Handle edge cases like empty or single-element lists.\n- Provide comprehensive documentation and examples.\n- Ensure compatibility with existing systems.\nWe will implement a function using Python's built-in set data structure to efficiently check for pairs that sum to zero. The set will allow for O(1) average time complexity for lookups, making the function suitable for large datasets. We will handle edge cases such as empty lists or single-element lists by returning False immediately.\n", "requirement analysis:\nThe function should efficiently determine if any two distinct numbers in a list sum to zero. It should handle edge cases such as empty lists or lists with a single element. The implementation should be optimized for performance, especially with large datasets, and should be easy to integrate into larger systems.\nrequirement pool:\n- Implement the main function to check for pairs summing to zero.\n- Optimize the function for performance with large lists.\n- Handle edge cases such as empty lists or single-element lists.\n- Provide comprehensive documentation and examples.\n- Ensure compatibility with other systems and libraries.\nWe will implement a function using Python's built-in set data structure to efficiently check for pairs that sum to zero. Sets provide average O(1) time complexity for lookups, making them suitable for handling large lists. The function will iterate through the list and check if the negative of each element exists in the set, ensuring that pairs are distinct. Edge cases such as empty lists or single-element lists will be handled gracefully.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Check if there exist two distinct numbers in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two different numbers within the list that add up to zero, and False otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct numbers that sum to zero, False otherwise.\n    \"\"\"\n    # Initialize an empty set to store the elements we have seen so far\n    seen_elements = set()\n\n    # Iterate over each element in the list\n    for element in l:\n        # Check if the negative of the current element exists in the set\n        if -element in seen_elements:\n            # If it exists, we found a pair that sums to zero\n            return True\n        # Add the current element to the set\n        seen_elements.add(element)\n\n    # If no pairs are found, return False\n    return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 407, "mutate_method": "rephrase_one", "parent_index": 241}
