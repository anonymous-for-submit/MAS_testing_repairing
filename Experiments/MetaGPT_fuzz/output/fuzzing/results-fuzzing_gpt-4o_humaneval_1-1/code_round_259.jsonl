{"task_id": "HumanEval/158", "prompt": "def find_max(words):\t\n'''Write a function that takes a list of strings as input.  \n    The list contains different words. Return the word with maximum number\n    of unique characters. If several strings possess the highest count of unique characters, return the one which comes first in lexicographical order.\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    '''", "entry_point": "find_max", "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "test": ["def check(find_max):\n\tassert find_max(['twtilt', 'cre', 'g', 'mbbwmpdm']) == 'mbbwmpdm'", "def check(find_max):\n\tassert find_max(['fhhnk', 'aaqhutjni']) == 'aaqhutjni'", "def check(find_max):\n\tassert find_max(['jjp', 'wsyz']) == 'wsyz'", "def check(find_max):\n\tassert find_max(['cajfyrft', 'fpuq']) == 'cajfyrft'", "def check(find_max):\n\tassert find_max(['hxzj', 'yudn']) == 'hxzj'", "def check(find_max):\n\tassert find_max(['vhvzkhnkx', 'andas', 'brewb', 'vcqze', 'ytfsxjrjyd']) == 'ytfsxjrjyd'", "def check(find_max):\n\tassert find_max(['zspzvw', 'oklgrvr', 'bixsdp']) == 'bixsdp'", "def check(find_max):\n\tassert find_max(['agcme', 'eitvog', 'pvd', 'gady']) == 'eitvog'", "def check(find_max):\n\tassert find_max(['hoxb', 'wlhqvdsa']) == 'wlhqvdsa'", "def check(find_max):\n\tassert find_max(['foweyb', 'qnwpbur']) == 'qnwpbur'", "def check(find_max):\n\tassert find_max(['wwmewokey', 'zkjbxg', 'bmh', 'vjfrx', 'swojawequr']) == 'swojawequr'", "def check(find_max):\n\tassert find_max(['rls', 'bfbsyy', 'mibyf']) == 'mibyf'", "def check(find_max):\n\tassert find_max(['ttdf', 'caf', 'yahmbad']) == 'yahmbad'", "def check(find_max):\n\tassert find_max(['nghmnegzm', 'qjtd']) == 'nghmnegzm'", "def check(find_max):\n\tassert find_max(['chbndu', 'lughoi', 'pwblcar']) == 'pwblcar'", "def check(find_max):\n\tassert find_max(['wpxvgoxv', 'vbltiy', 'htwzhsablna']) == 'htwzhsablna'", "def check(find_max):\n\tassert find_max(['ildvzfb', 'cgdb', 'nmxj']) == 'ildvzfb'", "def check(find_max):\n\tassert (find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'", "def check(find_max):\n\tassert find_max(['atijo', 'jiedpr', 'd', 'mpglwxazx']) == 'mpglwxazx'", "def check(find_max):\n\tassert find_max(['hknt', 'svavejfe', 'y', 'hhyfarttj', 'ddwufuzq']) == 'hhyfarttj'", "def check(find_max):\n\tassert find_max(['shnmd', 'jukow', 'hcwu', 'xcm', 'gti']) == 'jukow'", "def check(find_max):\n\tassert find_max(['e']) == 'e'", "def check(find_max):\n\tassert find_max(['qheozz', 'amx', 'uoddm', 'jsuisd']) == 'jsuisd'", "def check(find_max):\n\tassert (find_max([\"abc\", \"cba\"]) == \"abc\"), 't4'", "def check(find_max):\n\tassert find_max(['ecqhphdt', 'sjhu', 'w', 'iouhtz']) == 'ecqhphdt'", "def check(find_max):\n\tassert find_max(['eyjy', 'eautt', 'crehuz']) == 'crehuz'", "def check(find_max):\n\tassert find_max(['bflb', 'skdyz']) == 'skdyz'", "def check(find_max):\n\tassert find_max(['mkolxv', 'pufd', 'o', 'nhc', 'jqphqdjtxfje']) == 'jqphqdjtxfje'", "def check(find_max):\n\tassert find_max(['b']) == 'b'", "def check(find_max):\n\tassert find_max(['svrgwe', 'pclxe', 'o', 'bubmvpvny', 'kfjzzyyn']) == 'bubmvpvny'", "def check(find_max):\n\tassert find_max(['k']) == 'k'", "def check(find_max):\n\tassert find_max(['hqvdkpsi', 'fmsr', 't', 'ifopzrwcm']) == 'ifopzrwcm'", "def check(find_max):\n\tassert find_max(['vabfs', 'vqk', 'cdl']) == 'vabfs'", "def check(find_max):\n\tassert find_max(['bpp', 'pyf', 'kqnqisnok']) == 'kqnqisnok'", "def check(find_max):\n\tassert find_max(['unkndf', 'lawny', 't', 'clb', 'feeyavjwcs']) == 'feeyavjwcs'", "def check(find_max):\n\tassert find_max(['sye', 'sizxd', 'qfumheq']) == 'qfumheq'", "def check(find_max):\n\tassert (find_max([\"b\"]) == \"b\"), 't9'", "def check(find_max):\n\tassert find_max(['prscjydsx', 'qqfg', 'rdbgt']) == 'prscjydsx'", "def check(find_max):\n\tassert find_max(['hqv', 'wweg', 'wgbua']) == 'wgbua'", "def check(find_max):\n\tassert find_max(['doim', 'mywv', 'h', 'bsp', 'oxqiutxywfda']) == 'oxqiutxywfda'", "def check(find_max):\n\tassert find_max(['stjuaxoh', 'vjd', 'vhnm']) == 'stjuaxoh'", "def check(find_max):\n\tassert find_max(['ezwzjo', 'utlogea', 'omuanig']) == 'omuanig'", "def check(find_max):\n\tassert find_max(['pzynm', 'awivkzkma', 'eomxzgl']) == 'awivkzkma'", "def check(find_max):\n\tassert find_max(['cby', 'uellzcfz', 'qsxyplgl', 'mdn']) == 'qsxyplgl'", "def check(find_max):\n\tassert find_max(['ysddpvcn', 'klvxhuet', 'xegww']) == 'klvxhuet'", "def check(find_max):\n\tassert find_max(['xwz', 'hkww', 'dibbumenspuo']) == 'dibbumenspuo'", "def check(find_max):\n\tassert find_max(['hnmacvfj', 'ifibac', 'fttxfeevftc']) == 'hnmacvfj'", "def check(find_max):\n\tassert find_max(['wfpboof', 'yizi', 'swrj']) == 'wfpboof'", "def check(find_max):\n\tassert find_max(['xadczr', 'vizw', 'znkjpl', 'gac', 'hoew']) == 'xadczr'", "def check(find_max):\n\tassert find_max(['iqia', 'kejd', 'och']) == 'kejd'", "def check(find_max):\n\tassert find_max(['xgms', 'bmrxvv', 'hdte']) == 'bmrxvv'", "def check(find_max):\n\tassert find_max(['agva', 'dtoz', 'mlxgr', 'qcg']) == 'mlxgr'", "def check(find_max):\n\tassert find_max(['tagcc', 'wcwlgenfr', 'ljjgieud', 'vveiet']) == 'wcwlgenfr'", "def check(find_max):\n\tassert find_max(['iuairmyk', 'ocv', 'cbtwodz']) == 'cbtwodz'", "def check(find_max):\n\tassert find_max(['cod', 'xdxyu']) == 'xdxyu'", "def check(find_max):\n\tassert find_max(['o']) == 'o'", "def check(find_max):\n\tassert find_max(['hrgjujdqf', 'jnih', 'xhmkzl']) == 'hrgjujdqf'", "def check(find_max):\n\tassert (find_max([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'", "def check(find_max):\n\tassert (find_max([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"", "def check(find_max):\n\tassert find_max(['grsjo', 'hedw', 'b', 'zuh', 'xhdxt']) == 'grsjo'", "def check(find_max):\n\tassert find_max(['ngll', 'tyzfvsc', 'u', 'yqiqmswme', 'kxxyysm']) == 'tyzfvsc'", "def check(find_max):\n\tassert find_max(['gixp', 'qvbokh', 'ormvgppue', 'arg']) == 'ormvgppue'", "def check(find_max):\n\tassert find_max(['htwmc', 'bzx', 'b', 'zeg', 'qfyz']) == 'htwmc'", "def check(find_max):\n\tassert find_max(['rmbt', 'gdwtshzt', 'gsb', 'fur']) == 'gdwtshzt'", "def check(find_max):\n\tassert find_max(['h']) == 'h'", "def check(find_max):\n\tassert find_max(['fuperq', 'nvrgcl', 'iho']) == 'fuperq'", "def check(find_max):\n\tassert find_max(['cfoiof', 'vzjbcwv', 'qffzxxku']) == 'qffzxxku'", "def check(find_max):\n\tassert find_max(['vqxy', 'yet', 'i', 'mtvoymnzx', 'fmwrbov']) == 'mtvoymnzx'", "def check(find_max):\n\tassert find_max(['flid', 'eqcx', 'puzsezkhz']) == 'puzsezkhz'", "def check(find_max):\n\tassert find_max(['t']) == 't'", "def check(find_max):\n\tassert find_max(['gmnyxopyi', 'fuqnnv', 'dvbc']) == 'gmnyxopyi'", "def check(find_max):\n\tassert find_max(['rha', 'asn', 'tship', 'ess']) == 'tship'", "def check(find_max):\n\tassert find_max(['jlrgosrn', 'mrbq', 's', 'cidcaga']) == 'jlrgosrn'", "def check(find_max):\n\tassert find_max(['kvlbflrpx', 'dyculpfjz', 'tiotdbz']) == 'dyculpfjz'", "def check(find_max):\n\tassert (find_max([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'", "def check(find_max):\n\tassert find_max(['jdzgkxhr', 'cen', 'mlklue']) == 'jdzgkxhr'", "def check(find_max):\n\tassert find_max(['wzyych', 'wwmq', 'h', 'tcst']) == 'wzyych'", "def check(find_max):\n\tassert find_max(['wjgtpe', 'dacsvcks', 'rtpik']) == 'dacsvcks'", "def check(find_max):\n\tassert find_max(['s']) == 's'", "def check(find_max):\n\tassert find_max(['tyuzaf', 'tcnntubob', 'yjssws']) == 'tcnntubob'", "def check(find_max):\n\tassert find_max(['uhmryc', 'bjvyicmj', 'jawmlrcn', 'vww', 'rntn']) == 'jawmlrcn'", "def check(find_max):\n\tassert find_max(['bkl', 'qny', 'wgit']) == 'wgit'", "def check(find_max):\n\tassert find_max(['pet', 'kmqoxbt', 'nuquyr', 'amgjxtzjy']) == 'amgjxtzjy'", "def check(find_max):\n\tassert (find_max([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'", "def check(find_max):\n\tassert find_max(['lzognlo', 'jinmd']) == 'jinmd'", "def check(find_max):\n\tassert find_max(['dak', 'ttceml', 'j', 'swaqrrlcg', 'ful']) == 'swaqrrlcg'", "def check(find_max):\n\tassert find_max(['qbhptf', 'ampkzd', 'jepbdkosv', 'zgtdft']) == 'jepbdkosv'", "def check(find_max):\n\tassert find_max(['dskhghnb', 'mmhaa']) == 'dskhghnb'", "def check(find_max):\n\tassert find_max(['exj', 'xpdcmkvsw', 'iwf']) == 'xpdcmkvsw'", "def check(find_max):\n\tassert find_max(['apgpgvy', 'bnpgp', 'ijpf']) == 'apgpgvy'", "def check(find_max):\n\tassert find_max(['ljyn', 'onwka', 'w', 'bimmc']) == 'onwka'", "def check(find_max):\n\tassert find_max(['pztyt', 'fwethq', 'y', 'tmmlhlqjf']) == 'tmmlhlqjf'", "def check(find_max):\n\tassert find_max(['w']) == 'w'", "def check(find_max):\n\tassert find_max(['iugyijgyt', 'yjxdcfi', 'mgmo', 'dwmazr', 'oxcqkzjcww']) == 'oxcqkzjcww'", "def check(find_max):\n\tassert find_max(['tsldb', 'gjcio', 'kvnnond', 'vzu', 'vzik']) == 'gjcio'", "def check(find_max):\n\tassert find_max(['aueuor', 'fmxkc', 'b', 'ciye', 'rlwasxtas']) == 'rlwasxtas'", "def check(find_max):\n\tassert find_max(['ufzbuoz', 'dbaz', 'kopun']) == 'kopun'", "def check(find_max):\n\tassert find_max(['g']) == 'g'", "def check(find_max):\n\tassert find_max(['qmvmzph', 'pzkmmibi', 'aavpu']) == 'pzkmmibi'", "def check(find_max):\n\tassert find_max(['wxhqf', 'jhpsj', 'amlkaehne', 'hke', 'jkktbvujm']) == 'amlkaehne'", "def check(find_max):\n\tassert find_max(['upes', 'kvdqns', 'sfpiaoww', 'jfewgsyzo']) == 'jfewgsyzo'", "def check(find_max):\n\tassert (find_max([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.", "def check(find_max):\n\tassert find_max(['shmvzae', 'qeflck', 'r', 'tnndxpmlf']) == 'tnndxpmlf'", "def check(find_max):\n\tassert find_max(['qqygli', 'ualw', 'avnhbvyf', 'kjizcn', 'ybdkgdlrxlf']) == 'ybdkgdlrxlf'", "def check(find_max):\n\tassert find_max(['tegsx', 'ddg', 'acai']) == 'tegsx'", "def check(find_max):\n\tassert find_max(['lfspzmg', 'puaqq', 'kbmp', 'pvfy', 'mkvpcxj']) == 'lfspzmg'", "def check(find_max):\n\tassert find_max(['dbxsfams', 'mkwrsdpxf', 'mzu']) == 'mkwrsdpxf'", "def check(find_max):\n\tassert find_max(['lijjqy', 'rwqmew']) == 'lijjqy'", "def check(find_max):\n\tassert find_max(['kmv', 'xrcodpr', 'wchmmzp']) == 'wchmmzp'", "def check(find_max):\n\tassert find_max(['uxxaq', 'ngsr', 'eawspmuzb', 'xazcphs']) == 'eawspmuzb'", "def check(find_max):\n\tassert find_max(['jwcwigmna', 'ekww', 'irsuzq']) == 'jwcwigmna'", "def check(find_max):\n\tassert find_max(['pljzl', 'dythcav']) == 'dythcav'", "def check(find_max):\n\tassert find_max(['qok', 'somrrtogu', 'dakp']) == 'somrrtogu'", "def check(find_max):\n\tassert find_max(['prsle', 'bxe', 'qqv', 'lyx', 'zhihdorqor']) == 'zhihdorqor'", "def check(find_max):\n\tassert find_max(['zeskya', 'evvd', 'azjfjahr', 'yxqjr', 'zjonzrxgphju']) == 'zjonzrxgphju'", "def check(find_max):\n\tassert find_max(['nquk', 'dmucv', 'jlw', 'ytvtnusv']) == 'ytvtnusv'", "def check(find_max):\n\tassert find_max(['alwsufrg', 'zpa', 'hyvic']) == 'alwsufrg'", "def check(find_max):\n\tassert find_max(['nqqok', 'bet', 'sjx']) == 'nqqok'", "def check(find_max):\n\tassert find_max(['kxn', 'nxm', 'f', 'cnowck', 'jmqqxtl']) == 'jmqqxtl'", "def check(find_max):\n\tassert find_max(['ddgazwvd', 'tmf', 'i', 'wpjua']) == 'ddgazwvd'", "def check(find_max):\n\tassert (find_max([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'", "def check(find_max):\n\tassert find_max(['abddvgqkk', 'kqedcc', 'osa']) == 'abddvgqkk'", "def check(find_max):\n\tassert find_max(['jmyvisjti', 'ssym', 'uzjqxeg']) == 'jmyvisjti'", "def check(find_max):\n\tassert find_max(['krjkhpm', 'ubmvvw', 'xlsxoh']) == 'krjkhpm'", "def check(find_max):\n\tassert find_max(['fnz', 'fpzovx', 'a', 'zuaz', 'arzlzo']) == 'fpzovx'", "def check(find_max):\n\tassert find_max(['cwcghsru', 'nzihzu', 'f', 'luzyj']) == 'cwcghsru'", "def check(find_max):\n\tassert find_max(['rwwrcef', 'qebufez', 'cfmn']) == 'qebufez'", "def check(find_max):\n\tassert find_max(['uubvnz', 'pnj', 'zedmelziy']) == 'zedmelziy'", "def check(find_max):\n\tassert find_max(['ims', 'obb', 'eytgbk']) == 'eytgbk'", "def check(find_max):\n\tassert find_max(['lya', 'thducp', 'w', 'prcgphbs']) == 'prcgphbs'", "def check(find_max):\n\tassert find_max(['vhkyv', 'fzzgzqyzo', 'amyce']) == 'fzzgzqyzo'", "def check(find_max):\n\tassert find_max(['dvjmsd', 'vaj', 'lyom', 'gmuiw', 'easxkrjddr']) == 'easxkrjddr'", "def check(find_max):\n\tassert (find_max([\"play\", \"play\", \"play\"]) == \"play\"), 't10'", "def check(find_max):\n\tassert find_max(['hdruovosng', 'esspiz', 'ztc']) == 'hdruovosng'", "def check(find_max):\n\tassert find_max(['l']) == 'l'", "def check(find_max):\n\tassert find_max(['crwip', 'wtaxe', 'm', 'emqsmkwj']) == 'emqsmkwj'", "def check(find_max):\n\tassert find_max(['ntffz', 'wjjpao', 'uljddczgx']) == 'uljddczgx'"], "test_case_list": ["assert find_max(['twtilt', 'cre', 'g', 'mbbwmpdm']) == 'mbbwmpdm'", "assert find_max(['fhhnk', 'aaqhutjni']) == 'aaqhutjni'", "assert find_max(['jjp', 'wsyz']) == 'wsyz'", "assert find_max(['cajfyrft', 'fpuq']) == 'cajfyrft'", "assert find_max(['hxzj', 'yudn']) == 'hxzj'", "assert find_max(['vhvzkhnkx', 'andas', 'brewb', 'vcqze', 'ytfsxjrjyd']) == 'ytfsxjrjyd'", "assert find_max(['zspzvw', 'oklgrvr', 'bixsdp']) == 'bixsdp'", "assert find_max(['agcme', 'eitvog', 'pvd', 'gady']) == 'eitvog'", "assert find_max(['hoxb', 'wlhqvdsa']) == 'wlhqvdsa'", "assert find_max(['foweyb', 'qnwpbur']) == 'qnwpbur'", "assert find_max(['wwmewokey', 'zkjbxg', 'bmh', 'vjfrx', 'swojawequr']) == 'swojawequr'", "assert find_max(['rls', 'bfbsyy', 'mibyf']) == 'mibyf'", "assert find_max(['ttdf', 'caf', 'yahmbad']) == 'yahmbad'", "assert find_max(['nghmnegzm', 'qjtd']) == 'nghmnegzm'", "assert find_max(['chbndu', 'lughoi', 'pwblcar']) == 'pwblcar'", "assert find_max(['wpxvgoxv', 'vbltiy', 'htwzhsablna']) == 'htwzhsablna'", "assert find_max(['ildvzfb', 'cgdb', 'nmxj']) == 'ildvzfb'", "assert (find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'", "assert find_max(['atijo', 'jiedpr', 'd', 'mpglwxazx']) == 'mpglwxazx'", "assert find_max(['hknt', 'svavejfe', 'y', 'hhyfarttj', 'ddwufuzq']) == 'hhyfarttj'", "assert find_max(['shnmd', 'jukow', 'hcwu', 'xcm', 'gti']) == 'jukow'", "assert find_max(['e']) == 'e'", "assert find_max(['qheozz', 'amx', 'uoddm', 'jsuisd']) == 'jsuisd'", "assert (find_max([\"abc\", \"cba\"]) == \"abc\"), 't4'", "assert find_max(['ecqhphdt', 'sjhu', 'w', 'iouhtz']) == 'ecqhphdt'", "assert find_max(['eyjy', 'eautt', 'crehuz']) == 'crehuz'", "assert find_max(['bflb', 'skdyz']) == 'skdyz'", "assert find_max(['mkolxv', 'pufd', 'o', 'nhc', 'jqphqdjtxfje']) == 'jqphqdjtxfje'", "assert find_max(['b']) == 'b'", "assert find_max(['svrgwe', 'pclxe', 'o', 'bubmvpvny', 'kfjzzyyn']) == 'bubmvpvny'", "assert find_max(['k']) == 'k'", "assert find_max(['hqvdkpsi', 'fmsr', 't', 'ifopzrwcm']) == 'ifopzrwcm'", "assert find_max(['vabfs', 'vqk', 'cdl']) == 'vabfs'", "assert find_max(['bpp', 'pyf', 'kqnqisnok']) == 'kqnqisnok'", "assert find_max(['unkndf', 'lawny', 't', 'clb', 'feeyavjwcs']) == 'feeyavjwcs'", "assert find_max(['sye', 'sizxd', 'qfumheq']) == 'qfumheq'", "assert (find_max([\"b\"]) == \"b\"), 't9'", "assert find_max(['prscjydsx', 'qqfg', 'rdbgt']) == 'prscjydsx'", "assert find_max(['hqv', 'wweg', 'wgbua']) == 'wgbua'", "assert find_max(['doim', 'mywv', 'h', 'bsp', 'oxqiutxywfda']) == 'oxqiutxywfda'", "assert find_max(['stjuaxoh', 'vjd', 'vhnm']) == 'stjuaxoh'", "assert find_max(['ezwzjo', 'utlogea', 'omuanig']) == 'omuanig'", "assert find_max(['pzynm', 'awivkzkma', 'eomxzgl']) == 'awivkzkma'", "assert find_max(['cby', 'uellzcfz', 'qsxyplgl', 'mdn']) == 'qsxyplgl'", "assert find_max(['ysddpvcn', 'klvxhuet', 'xegww']) == 'klvxhuet'", "assert find_max(['xwz', 'hkww', 'dibbumenspuo']) == 'dibbumenspuo'", "assert find_max(['hnmacvfj', 'ifibac', 'fttxfeevftc']) == 'hnmacvfj'", "assert find_max(['wfpboof', 'yizi', 'swrj']) == 'wfpboof'", "assert find_max(['xadczr', 'vizw', 'znkjpl', 'gac', 'hoew']) == 'xadczr'", "assert find_max(['iqia', 'kejd', 'och']) == 'kejd'", "assert find_max(['xgms', 'bmrxvv', 'hdte']) == 'bmrxvv'", "assert find_max(['agva', 'dtoz', 'mlxgr', 'qcg']) == 'mlxgr'", "assert find_max(['tagcc', 'wcwlgenfr', 'ljjgieud', 'vveiet']) == 'wcwlgenfr'", "assert find_max(['iuairmyk', 'ocv', 'cbtwodz']) == 'cbtwodz'", "assert find_max(['cod', 'xdxyu']) == 'xdxyu'", "assert find_max(['o']) == 'o'", "assert find_max(['hrgjujdqf', 'jnih', 'xhmkzl']) == 'hrgjujdqf'", "assert (find_max([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'", "assert (find_max([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"", "assert find_max(['grsjo', 'hedw', 'b', 'zuh', 'xhdxt']) == 'grsjo'", "assert find_max(['ngll', 'tyzfvsc', 'u', 'yqiqmswme', 'kxxyysm']) == 'tyzfvsc'", "assert find_max(['gixp', 'qvbokh', 'ormvgppue', 'arg']) == 'ormvgppue'", "assert find_max(['htwmc', 'bzx', 'b', 'zeg', 'qfyz']) == 'htwmc'", "assert find_max(['rmbt', 'gdwtshzt', 'gsb', 'fur']) == 'gdwtshzt'", "assert find_max(['h']) == 'h'", "assert find_max(['fuperq', 'nvrgcl', 'iho']) == 'fuperq'", "assert find_max(['cfoiof', 'vzjbcwv', 'qffzxxku']) == 'qffzxxku'", "assert find_max(['vqxy', 'yet', 'i', 'mtvoymnzx', 'fmwrbov']) == 'mtvoymnzx'", "assert find_max(['flid', 'eqcx', 'puzsezkhz']) == 'puzsezkhz'", "assert find_max(['t']) == 't'", "assert find_max(['gmnyxopyi', 'fuqnnv', 'dvbc']) == 'gmnyxopyi'", "assert find_max(['rha', 'asn', 'tship', 'ess']) == 'tship'", "assert find_max(['jlrgosrn', 'mrbq', 's', 'cidcaga']) == 'jlrgosrn'", "assert find_max(['kvlbflrpx', 'dyculpfjz', 'tiotdbz']) == 'dyculpfjz'", "assert (find_max([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'", "assert find_max(['jdzgkxhr', 'cen', 'mlklue']) == 'jdzgkxhr'", "assert find_max(['wzyych', 'wwmq', 'h', 'tcst']) == 'wzyych'", "assert find_max(['wjgtpe', 'dacsvcks', 'rtpik']) == 'dacsvcks'", "assert find_max(['s']) == 's'", "assert find_max(['tyuzaf', 'tcnntubob', 'yjssws']) == 'tcnntubob'", "assert find_max(['uhmryc', 'bjvyicmj', 'jawmlrcn', 'vww', 'rntn']) == 'jawmlrcn'", "assert find_max(['bkl', 'qny', 'wgit']) == 'wgit'", "assert find_max(['pet', 'kmqoxbt', 'nuquyr', 'amgjxtzjy']) == 'amgjxtzjy'", "assert (find_max([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'", "assert find_max(['lzognlo', 'jinmd']) == 'jinmd'", "assert find_max(['dak', 'ttceml', 'j', 'swaqrrlcg', 'ful']) == 'swaqrrlcg'", "assert find_max(['qbhptf', 'ampkzd', 'jepbdkosv', 'zgtdft']) == 'jepbdkosv'", "assert find_max(['dskhghnb', 'mmhaa']) == 'dskhghnb'", "assert find_max(['exj', 'xpdcmkvsw', 'iwf']) == 'xpdcmkvsw'", "assert find_max(['apgpgvy', 'bnpgp', 'ijpf']) == 'apgpgvy'", "assert find_max(['ljyn', 'onwka', 'w', 'bimmc']) == 'onwka'", "assert find_max(['pztyt', 'fwethq', 'y', 'tmmlhlqjf']) == 'tmmlhlqjf'", "assert find_max(['w']) == 'w'", "assert find_max(['iugyijgyt', 'yjxdcfi', 'mgmo', 'dwmazr', 'oxcqkzjcww']) == 'oxcqkzjcww'", "assert find_max(['tsldb', 'gjcio', 'kvnnond', 'vzu', 'vzik']) == 'gjcio'", "assert find_max(['aueuor', 'fmxkc', 'b', 'ciye', 'rlwasxtas']) == 'rlwasxtas'", "assert find_max(['ufzbuoz', 'dbaz', 'kopun']) == 'kopun'", "assert find_max(['g']) == 'g'", "assert find_max(['qmvmzph', 'pzkmmibi', 'aavpu']) == 'pzkmmibi'", "assert find_max(['wxhqf', 'jhpsj', 'amlkaehne', 'hke', 'jkktbvujm']) == 'amlkaehne'", "assert find_max(['upes', 'kvdqns', 'sfpiaoww', 'jfewgsyzo']) == 'jfewgsyzo'", "assert (find_max([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.", "assert find_max(['shmvzae', 'qeflck', 'r', 'tnndxpmlf']) == 'tnndxpmlf'", "assert find_max(['qqygli', 'ualw', 'avnhbvyf', 'kjizcn', 'ybdkgdlrxlf']) == 'ybdkgdlrxlf'", "assert find_max(['tegsx', 'ddg', 'acai']) == 'tegsx'", "assert find_max(['lfspzmg', 'puaqq', 'kbmp', 'pvfy', 'mkvpcxj']) == 'lfspzmg'", "assert find_max(['dbxsfams', 'mkwrsdpxf', 'mzu']) == 'mkwrsdpxf'", "assert find_max(['lijjqy', 'rwqmew']) == 'lijjqy'", "assert find_max(['kmv', 'xrcodpr', 'wchmmzp']) == 'wchmmzp'", "assert find_max(['uxxaq', 'ngsr', 'eawspmuzb', 'xazcphs']) == 'eawspmuzb'", "assert find_max(['jwcwigmna', 'ekww', 'irsuzq']) == 'jwcwigmna'", "assert find_max(['pljzl', 'dythcav']) == 'dythcav'", "assert find_max(['qok', 'somrrtogu', 'dakp']) == 'somrrtogu'", "assert find_max(['prsle', 'bxe', 'qqv', 'lyx', 'zhihdorqor']) == 'zhihdorqor'", "assert find_max(['zeskya', 'evvd', 'azjfjahr', 'yxqjr', 'zjonzrxgphju']) == 'zjonzrxgphju'", "assert find_max(['nquk', 'dmucv', 'jlw', 'ytvtnusv']) == 'ytvtnusv'", "assert find_max(['alwsufrg', 'zpa', 'hyvic']) == 'alwsufrg'", "assert find_max(['nqqok', 'bet', 'sjx']) == 'nqqok'", "assert find_max(['kxn', 'nxm', 'f', 'cnowck', 'jmqqxtl']) == 'jmqqxtl'", "assert find_max(['ddgazwvd', 'tmf', 'i', 'wpjua']) == 'ddgazwvd'", "assert (find_max([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'", "assert find_max(['abddvgqkk', 'kqedcc', 'osa']) == 'abddvgqkk'", "assert find_max(['jmyvisjti', 'ssym', 'uzjqxeg']) == 'jmyvisjti'", "assert find_max(['krjkhpm', 'ubmvvw', 'xlsxoh']) == 'krjkhpm'", "assert find_max(['fnz', 'fpzovx', 'a', 'zuaz', 'arzlzo']) == 'fpzovx'", "assert find_max(['cwcghsru', 'nzihzu', 'f', 'luzyj']) == 'cwcghsru'", "assert find_max(['rwwrcef', 'qebufez', 'cfmn']) == 'qebufez'", "assert find_max(['uubvnz', 'pnj', 'zedmelziy']) == 'zedmelziy'", "assert find_max(['ims', 'obb', 'eytgbk']) == 'eytgbk'", "assert find_max(['lya', 'thducp', 'w', 'prcgphbs']) == 'prcgphbs'", "assert find_max(['vhkyv', 'fzzgzqyzo', 'amyce']) == 'fzzgzqyzo'", "assert find_max(['dvjmsd', 'vaj', 'lyom', 'gmuiw', 'easxkrjddr']) == 'easxkrjddr'", "assert (find_max([\"play\", \"play\", \"play\"]) == \"play\"), 't10'", "assert find_max(['hdruovosng', 'esspiz', 'ztc']) == 'hdruovosng'", "assert find_max(['l']) == 'l'", "assert find_max(['crwip', 'wtaxe', 'm', 'emqsmkwj']) == 'emqsmkwj'", "assert find_max(['ntffz', 'wjjpao', 'uljddczgx']) == 'uljddczgx'"], "nl": "Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    ", "func": "def find_max(words):", "examples": "find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    ", "repair_prompt": ["def find_max(words):\t\n'''Write a function that takes a list of strings as input.  \n    The list contains different words. Return the word with maximum number\n    of unique characters. If several strings possess the highest count of unique characters, return the one which comes first in lexicographical order.\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"Finds the word with the maximum number of unique characters.\n\n    Args:\n        words (list[str]): A list of words to evaluate.\n\n    Returns:\n        str: The word with the maximum number of unique characters. \n             In case of a tie, returns the lexicographically smallest word.\n             Returns an empty string if the input list is empty.\n    \"\"\"\n    if not words:\n        return \"\"\n\n    max_unique_count = 0\n    result_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if (unique_count > max_unique_count) or (\n            unique_count == max_unique_count and word < result_word\n        ):\n            max_unique_count = unique_count\n            result_word = word\n\n    return result_word\n", "from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"\n    Takes a list of strings as input and returns the word with the maximum number of unique characters.\n    If there is a tie, returns the lexicographically smallest word.\n    Handles edge cases such as empty lists by returning an empty string.\n    \n    Args:\n        words (list[str]): A list of words to evaluate.\n        \n    Returns:\n        str: The word with the maximum number of unique characters, or the lexicographically smallest word in case of a tie.\n    \"\"\"\n    if not words:\n        return \"\"\n\n    def unique_char_count(word: str) -> int:\n        \"\"\"Returns the number of unique characters in a word.\"\"\"\n        return len(set(word))\n\n    # Use max with a custom key to find the word with the maximum unique characters\n    # In case of a tie, it will return the lexicographically smallest word\n    return max(words, key=lambda word: (unique_char_count(word), -ord(min(word))))\n\n# Example usage:\n# words = [\"apple\", \"banana\", \"cherry\", \"date\"]\n# result = find_max(words)\n# print(result)  # Output should be \"banana\" because it has the most unique characters\n", "from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"Finds the word with the maximum number of unique characters.\n\n    If there is a tie, returns the lexicographically smallest word.\n    If the input list is empty, returns an empty string.\n\n    Args:\n        words (list[str]): A list of words to evaluate.\n\n    Returns:\n        str: The word with the maximum number of unique characters.\n    \"\"\"\n    if not words:\n        return \"\"\n\n    max_unique_count = 0\n    result_word = \"\"\n\n    for word in words:\n        if not isinstance(word, str):\n            raise ValueError(\"All elements in the list must be strings.\")\n\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if (unique_count > max_unique_count) or (\n            unique_count == max_unique_count and word < result_word\n        ):\n            max_unique_count = unique_count\n            result_word = word\n\n    return result_word\n", "from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"Finds the word with the maximum number of unique characters.\n\n    Args:\n        words (list[str]): A list of words to evaluate.\n\n    Returns:\n        str: The word with the maximum number of unique characters.\n             In case of a tie, returns the lexicographically smallest word.\n             Returns an empty string if the list is empty.\n    \"\"\"\n    if not words:\n        return \"\"\n\n    max_unique_count = 0\n    result_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if (unique_count > max_unique_count or\n            (unique_count == max_unique_count and word < result_word)):\n            max_unique_count = unique_count\n            result_word = word\n\n    return result_word\n", "from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"Finds the word with the maximum number of unique characters.\n\n    Args:\n        words: A list of strings.\n\n    Returns:\n        The word with the maximum number of unique characters. In case of a tie,\n        returns the lexicographically smallest word. If the input list is empty,\n        returns an empty string.\n    \"\"\"\n    if not words:\n        return \"\"\n\n    max_unique_count = 0\n    result_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if (unique_count > max_unique_count or\n            (unique_count == max_unique_count and word < result_word)):\n            max_unique_count = unique_count\n            result_word = word\n\n    return result_word\n", "from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"\n    Takes a list of strings and returns the word with the maximum number of unique characters.\n    In case of a tie, returns the word that comes first in lexicographical order.\n    If the list is empty, returns an empty string.\n\n    Args:\n        words (list[str]): A list of words to evaluate.\n\n    Returns:\n        str: The word with the maximum number of unique characters or an empty string if the list is empty.\n    \"\"\"\n    if not words:\n        return \"\"\n\n    max_unique_count = -1\n    result_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < result_word):\n            max_unique_count = unique_count\n            result_word = word\n\n    return result_word\n", "from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"Finds the word with the maximum number of unique characters.\n\n    Args:\n        words: A list of strings representing the words to be analyzed.\n\n    Returns:\n        A string representing the word with the maximum number of unique characters.\n        In case of a tie, returns the word that comes first in lexicographical order.\n        Returns an empty string if the input list is empty.\n    \"\"\"\n    # Initialize variables to track the maximum unique character count and the result word\n    max_unique_count = 0\n    result_word = \"\"\n\n    # Iterate over each word in the list\n    for word in words:\n        # Calculate the number of unique characters using a set\n        unique_characters = set(word)\n        unique_count = len(unique_characters)\n\n        # Compare the unique character count with the current maximum\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < result_word):\n            max_unique_count = unique_count\n            result_word = word\n\n    return result_word\n", "from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"\n    Takes a list of strings as input and returns the word with the maximum number of unique characters.\n    If there is a tie, returns the lexicographically smallest word.\n    If the list is empty, returns an empty string.\n\n    Args:\n        words (list[str]): A list of words to evaluate.\n\n    Returns:\n        str: The word with the maximum number of unique characters, or the lexicographically smallest word in case of a tie.\n             Returns an empty string if the input list is empty.\n    \"\"\"\n    if not words:\n        return \"\"\n\n    max_unique_count = 0\n    result_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            result_word = word\n        elif unique_count == max_unique_count:\n            result_word = min(result_word, word)\n\n    return result_word\n", "from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"Finds the word with the maximum number of unique characters.\n\n    Args:\n        words (list[str]): A list of words to evaluate.\n\n    Returns:\n        str: The word with the maximum number of unique characters. \n             If there is a tie, returns the lexicographically smallest word.\n             Returns an empty string if the input list is empty.\n    \"\"\"\n    max_unique_count = 0\n    result_word = \"\"\n\n    for word in words:\n        # Calculate the number of unique characters in the word\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        # Determine if this word has more unique characters or is lexicographically smaller in case of a tie\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < result_word):\n            max_unique_count = unique_count\n            result_word = word\n\n    return result_word\n", "from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"\n    Takes a list of strings as input and returns the word with the maximum number of unique characters.\n    In case of a tie, returns the lexicographically first word.\n\n    Args:\n        words (list[str]): A list of strings to evaluate.\n\n    Returns:\n        str: The word with the maximum number of unique characters, or the lexicographically first word in case of a tie.\n    \"\"\"\n    if not words:\n        return \"\"\n\n    # Sort words lexicographically to handle ties\n    words.sort()\n\n    # Function to calculate the number of unique characters in a word\n    def unique_char_count(word: str) -> int:\n        return len(set(word))\n\n    # Use max with a custom key to find the word with the maximum unique characters\n    max_word = max(words, key=unique_char_count)\n\n    return max_word\n"], "plans": ["requirement analysis:\nThe function should efficiently determine the word with the maximum number of unique characters. It should handle ties by returning the lexicographically smallest word. The function must be optimized for performance and handle edge cases such as empty lists or lists with words of equal unique character counts.\nrequirement pool:\n- Implement the main function logic to find the word with the most unique characters.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles ties by returning the lexicographically smallest word.\n- Provide comprehensive documentation and examples.\n- Test the function with various edge cases.\nWe will implement a function that iterates over the list of words, calculates the number of unique characters for each word, and keeps track of the word with the maximum unique characters. In case of a tie, the function will return the lexicographically smallest word. We will use Python's built-in set data structure to efficiently determine the number of unique characters in each word. The function will handle edge cases such as empty input lists by returning an empty string.\n", "requirement analysis:\nThe function should efficiently determine the word with the maximum number of unique characters. It must handle ties by returning the lexicographically smallest word. Edge cases such as empty lists or lists with identical words should be considered.\nrequirement pool:\n- Implement the main function logic to find the word with maximum unique characters\n- Optimize the function for performance with large input sizes\n- Ensure the function handles edge cases like empty lists\n- Add comprehensive test cases to validate functionality\n- Document the function usage and edge cases\nWe will implement a function that iterates over the list of words, calculates the number of unique characters for each word using a set, and then determines the word with the maximum unique characters. In case of a tie, the function will return the lexicographically smallest word. The built-in max function with a custom key will be used for simplicity and performance. Edge cases such as empty lists and lists with identical words will be handled by returning an empty string or the word itself, respectively.\n", "requirement analysis:\nThe function should efficiently determine the word with the maximum number of unique characters from a list of strings. It must handle ties by returning the lexicographically smallest word. Performance is crucial, especially with large input sizes.\nrequirement pool:\n- Implement the main function logic\n- Optimize for performance with large datasets\n- Ensure comprehensive documentation\n- Handle edge cases such as empty strings or lists\n- Provide unit tests for various scenarios\nWe will implement a function that iterates over the list of words, calculates the number of unique characters for each word using a set, and keeps track of the word with the maximum unique characters. In case of a tie, the function will return the lexicographically smallest word. We will handle edge cases such as empty lists by returning an empty string. The function will be optimized for performance by using efficient data structures and algorithms.\n", "requirement analysis:\nThe function should efficiently determine the word with the maximum number of unique characters. It should handle ties by returning the lexicographically smallest word. The implementation should be optimized for performance, especially with large input lists.\nrequirement pool:\n- Implement the function to find the word with the most unique characters.\n- Ensure the function handles ties by returning the lexicographically smallest word.\n- Optimize the function for performance with large input lists.\n- Provide comprehensive documentation and examples.\n- Include edge case handling for empty lists or lists with identical words.\nWe will implement a function that iterates over the list of words, calculates the number of unique characters for each word using a set, and keeps track of the word with the maximum unique characters. In case of a tie, the function will compare the words lexicographically to determine the smallest one. The function will handle edge cases such as empty lists by returning an empty string.\n", "requirement analysis:\nThe function should efficiently determine the word with the maximum number of unique characters. It must handle ties by returning the lexicographically smallest word. The function should be optimized for performance and include comprehensive documentation.\nrequirement pool:\n- Implement the main function logic\n- Optimize for performance with large input lists\n- Ensure proper handling of edge cases\n- Provide detailed documentation\n- Include unit tests for various scenarios\nWe will implement a function that iterates over the list of words, calculates the number of unique characters for each word, and keeps track of the word with the maximum unique characters. In case of a tie, the function will return the lexicographically smallest word. We will use Python's built-in set data structure to efficiently count unique characters and the min function with a custom key for lexicographical comparison. The function will handle edge cases such as empty input lists by returning an empty string. We will assume case sensitivity in unique character counting unless specified otherwise.\n", "requirement analysis:\nThe function should efficiently determine the word with the maximum number of unique characters from a list of strings. It should also handle ties by returning the word that comes first in lexicographical order. The function must be robust, handling edge cases such as empty lists or lists with duplicate words.\nrequirement pool:\n- Implement the main function logic to find the word with maximum unique characters\n- Optimize the function for performance with large input lists\n- Ensure the function handles ties by lexicographical order\n- Provide comprehensive documentation and examples\n- Test the function with various edge cases\nWe will implement a function that iterates over the list of words, calculates the number of unique characters for each word, and keeps track of the word with the maximum unique characters. In case of a tie, the function will return the word that comes first in lexicographical order. We will use Python's built-in set data structure to efficiently determine the number of unique characters in each word. The function will handle edge cases such as empty lists by returning an empty string.\n", "requirement analysis:\nThe function should efficiently determine the word with the most unique characters, considering lexicographical order in case of ties. It should handle edge cases like empty lists and similar words gracefully.\nrequirement pool:\n- Implement the main function logic to find the word with maximum unique characters.\n- Optimize the function for performance with large lists.\n- Ensure the function handles edge cases like empty lists.\n- Add documentation and examples for clarity.\n- Test the function with various datasets to ensure reliability.\nWe will implement a function that iterates over the list of words, calculates the number of unique characters for each word using Python's set data structure, and then determines the word with the maximum unique characters. In case of a tie, the function will return the word that comes first in lexicographical order. The function will handle edge cases such as empty lists by returning an empty string.\n", "requirement analysis:\nThe function should efficiently determine the word with the maximum number of unique characters from a list. It should handle ties by returning the lexicographically smallest word. Edge cases such as empty lists or lists with identical words should be considered.\nrequirement pool:\n- Implement the main function to find the word with maximum unique characters\n- Optimize the function for performance with large datasets\n- Ensure the function handles edge cases like empty lists\n- Provide comprehensive documentation for users\n- Integrate unit tests to verify functionality\nWe will implement a function that iterates over the list of words, calculates the number of unique characters for each word using a set, and keeps track of the word with the maximum unique characters. In case of a tie, the function will return the lexicographically smallest word. We will handle edge cases such as empty lists by returning an empty string.\n", "requirement analysis:\nThe function should efficiently determine the word with the maximum number of unique characters. It must handle ties by returning the lexicographically smallest word. The implementation should be optimized for performance and maintain simplicity for easy integration.\nrequirement pool:\n- Implement the main function logic\n- Optimize for performance with large datasets\n- Ensure correct handling of edge cases\n- Add comprehensive test cases\n- Document the function usage and examples\nWe will implement a function that iterates over the list of words, calculates the number of unique characters for each word, and keeps track of the word with the maximum unique characters. In case of a tie, the function will return the lexicographically smallest word. We will use Python's built-in set data structure to efficiently determine the number of unique characters in each word. The function will handle edge cases such as empty input lists by returning an empty string. We will assume case sensitivity in unique character counting unless specified otherwise.\n", "requirement analysis:\nThe function should efficiently determine the word with the maximum number of unique characters, handling ties by lexicographical order. It should be optimized for performance and maintain simplicity in its implementation.\nrequirement pool:\n- Implement function to find word with maximum unique characters\n- Optimize for performance with large datasets\n- Ensure lexicographical order handling in case of ties\n- Maintain code simplicity and readability\n- Include comprehensive test cases\nWe will use Python's built-in max function with a custom key function to determine the word with the maximum number of unique characters. This approach is efficient and maintains simplicity. We will handle ties by using lexicographical order, which can be achieved by sorting the words first before applying the max function.\n"], "scores": [1.0, 0.8905, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, true, true, true, true, true, true, true, true], "pass_test_cases_num": [137, 122, 137, 137, 137, 137, 137, 137, 137, 137], "completion": "from typing import List\n## main.py\n\ndef find_max(words: list[str]) -> str:\n    \"\"\"\n    Takes a list of strings as input and returns the word with the maximum number of unique characters.\n    In case of a tie, returns the lexicographically first word.\n\n    Args:\n        words (list[str]): A list of strings to evaluate.\n\n    Returns:\n        str: The word with the maximum number of unique characters, or the lexicographically first word in case of a tie.\n    \"\"\"\n    if not words:\n        return \"\"\n\n    # Sort words lexicographically to handle ties\n    words.sort()\n\n    # Function to calculate the number of unique characters in a word\n    def unique_char_count(word: str) -> int:\n        return len(set(word))\n\n    # Use max with a custom key to find the word with the maximum unique characters\n    max_word = max(words, key=unique_char_count)\n\n    return max_word\n", "passed": true, "pass": true, "pass_num": 9, "round": 259, "mutate_method": "rephrase_one", "parent_index": 129}
