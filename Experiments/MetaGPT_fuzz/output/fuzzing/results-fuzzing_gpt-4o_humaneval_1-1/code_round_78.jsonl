{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''"], "completions": ["from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if one of the three integers is the sum of the other two.\n\n    This function takes three integers and returns True if one of the numbers\n    is equal to the sum of the other two. It returns False for any non-integer\n    inputs or if the condition is not met.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Ensure all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if one number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three numbers and returns True if one of the numbers is equal to the sum of the other two, \n    and all numbers are integers. Returns False in any other cases.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one of the numbers is the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    # Return False if any condition is not met\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Function to check if any of the three integers is the sum of the other two.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any number is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if any of the three integer inputs is equal to the sum of the other two.\n    Returns False if any input is not an integer or if the condition is not met.\n    \n    Parameters:\n    x (int): First number\n    y (int): Second number\n    z (int): Third number\n    \n    Returns:\n    bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \n    Examples:\n    >>> any_int(5, 2, 7)\n    True\n    >>> any_int(3, 2, 2)\n    False\n    >>> any_int(3, -2, 1)\n    True\n    >>> any_int(3.6, -2.2, 2)\n    False\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    \n    # Check if any number is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False for non-integer inputs or if the condition is not met.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    # Check if any one of the numbers is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False if any input is not an integer or if the condition is not met.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if any one of the numbers is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three numbers and returns True if one of the numbers is equal to the sum of the other two, \n    and all numbers are integers. Returns False in any other cases.\n\n    Parameters:\n    x (int): First number\n    y (int): Second number\n    z (int): Third number\n\n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any number is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(any_int(5, 2, 3))  # True, because 5 = 2 + 3\n    print(any_int(10, 5, 5)) # True, because 10 = 5 + 5\n    print(any_int(1, 2, 3))  # False, no number is the sum of the other two\n    print(any_int(0, 0, 0))  # True, because 0 = 0 + 0\n    print(any_int(100, 50, 50)) # True, because 100 = 50 + 50\n    print(any_int(7, 3, 4))  # True, because 7 = 3 + 4\n    print(any_int(7, 3, 5))  # False, no number is the sum of the other two\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False if any input is not an integer or if the condition is not met.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"Determines if one of the three input integers is the sum of the other two.\n\n    This function checks if any of the three provided integers is equal to the sum\n    of the other two integers. It ensures that all inputs are integers and returns\n    False if any input is not an integer.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any of the numbers is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if one of the numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any one of the numbers is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n"], "plans": ["requirement analysis:\nThe function should strictly check for integer inputs and ensure that one of the numbers is the sum of the other two. It should return false for any non-integer inputs or if the condition is not met.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must handle only integer inputs.\n- The function should return false for any non-integer inputs.\n- The function should be optimized for performance.\n- The function should include comprehensive test cases.\nWe will implement a simple function using Python's built-in capabilities to check if one of the three numbers is the sum of the other two. The function will strictly enforce integer type checking using the isinstance function to ensure all inputs are integers. This approach will optimize for performance by avoiding unnecessary complexity and will handle negative integers and zero as valid inputs.\n", "requirement analysis:\nThe function must check if all inputs are integers and return true if one number is the sum of the other two. It should handle both positive and negative integers and return false for non-integer inputs.\nrequirement pool:\n- Check if inputs are integers\n- Return true if one number is the sum of the other two\n- Handle negative integers correctly\n- Optimize for performance\n- Provide detailed documentation\nWe will implement a simple function using Python's built-in capabilities to check if all inputs are integers and if one of the numbers is the sum of the other two. The function will handle both positive and negative integers and return false for non-integer inputs. We will ensure the function is optimized for performance by using straightforward conditional checks.\n", "requirement analysis:\nThe function should accurately determine if any of the three integers is the sum of the other two, while ensuring all inputs are integers. It should return false for any non-integer inputs and provide clear examples for user understanding.\nrequirement pool:\n- Implement the main function logic to check integer conditions.\n- Ensure input validation for integer types.\n- Provide comprehensive examples in the documentation.\n- Optimize the function for performance.\n- Enhance error handling for invalid inputs.\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two, ensuring all inputs are integers. We will use Python's built-in type checking to validate the inputs and return false for any non-integer inputs.\n", "requirement analysis:\nThe function should accurately determine if any of the three integer inputs is equal to the sum of the other two. It must return false if any input is not an integer or if the condition is not met. The function should be simple, efficient, and well-documented.\nrequirement pool:\n- Implement the main function logic to check the sum condition\n- Handle non-integer inputs by returning false\n- Provide clear examples and documentation\n- Optimize for performance with large integer values\n- Ensure code readability and maintainability\nWe will implement a simple function using Python's built-in capabilities to check if any of the three numbers is equal to the sum of the other two. The function will first verify that all inputs are integers, returning false if any are not. This approach ensures simplicity and efficiency without the need for external libraries.\n", "requirement analysis:\nThe function must strictly check for integer inputs and ensure that one of the numbers is the sum of the other two. It should return false for any non-integer inputs or if the condition is not met.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must handle only integer inputs.\n- The function should be optimized for performance.\n- The function should include error handling for non-integer inputs.\n- The function should be easy to read and maintain.\nWe will implement a simple function using Python's built-in capabilities to check if one of the three numbers is the sum of the other two. The function will strictly enforce integer type checking using the isinstance function to ensure all inputs are integers. This approach will ensure performance optimization and easy integration into larger projects.\n", "requirement analysis:\nThe function should accurately determine if one of the three input numbers is the sum of the other two, ensuring all inputs are integers. It should return false for any non-integer inputs or if the condition is not met.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must handle only integer inputs.\n- The function should return false for non-integer inputs.\n- The function should be optimized for performance.\n- The function should be easy to read and maintain.\nWe will implement a simple function that checks if one of the three input numbers is the sum of the other two. The function will first verify that all inputs are integers, returning false if any input is not an integer. This approach ensures the function is both efficient and easy to read. We will not use any external libraries as the task is straightforward and can be handled with basic Python operations.\n", "requirement analysis:\nThe function should accurately determine if any of the three input numbers is equal to the sum of the other two, ensuring all inputs are integers. It should return false for non-integer inputs and handle edge cases such as negative numbers and zero.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must return false if any input is not an integer.\n- The function should handle negative numbers correctly.\n- The function should be optimized for performance.\n- The function should maintain readability and simplicity.\nWe will implement a simple Python function that checks if any of the three input numbers is equal to the sum of the other two, ensuring all inputs are integers. We will use Python's built-in type checking to handle non-integer inputs gracefully. The function will be optimized for performance by using straightforward conditional checks and will include inline comments for clarity.\n", "requirement analysis:\nThe function must strictly check for integer inputs and ensure that one of the numbers is the sum of the other two. It should return false for any non-integer inputs or if the condition is not met.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must return false if any input is not an integer.\n- The function should handle negative integers correctly.\n- Optimize the function for performance with large integer inputs.\n- Provide detailed documentation and examples.\nWe will implement a simple function using Python's built-in type checking to ensure all inputs are integers. The function will check if any of the three numbers is equal to the sum of the other two. We will use basic arithmetic operations and conditional statements to achieve this. The function will be optimized for performance by minimizing computational overhead and will handle negative integers correctly.\n", "requirement analysis:\nThe function must accurately determine if one of the three input numbers is the sum of the other two, ensuring all inputs are integers. It should return false for any non-integer inputs or if the condition is not met.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must handle only integer inputs.\n- The function should be optimized for performance.\n- The function should include clear documentation.\n- The function should handle edge cases gracefully.\nWe will implement a simple function that checks if one of the three input numbers is the sum of the other two, ensuring all inputs are integers. We will use Python's built-in type checking to ensure inputs are integers and return false if any input is not an integer. The function will be optimized for performance by using straightforward conditional checks and will include clear documentation for ease of understanding.\n", "requirement analysis:\nThe function should accurately determine if one of the numbers is the sum of the other two, ensuring all inputs are integers. It should return false if any input is not an integer or if the condition is not met.\nrequirement pool:\n- Implement integer validation for inputs\n- Check if one number equals the sum of the other two\n- Handle negative integers correctly\n- Optimize for performance\n- Provide clear error messages for invalid inputs\nWe will implement a simple function that checks if the inputs are integers and then verifies if any one of the numbers is equal to the sum of the other two. We will use Python's built-in type checking to ensure the inputs are integers and perform basic arithmetic operations to check the condition.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [131, 131, 131, 131, 131, 131, 131, 131, 131, 131], "completion": "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if one of the numbers is equal to the sum of the other two.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any one of the numbers is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "passed": true, "pass": true, "pass_num": 10, "round": 78, "mutate_method": "condense_two2one", "parent_index": 78}
