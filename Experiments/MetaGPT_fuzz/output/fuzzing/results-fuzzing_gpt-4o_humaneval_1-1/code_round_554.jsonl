{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "entry_point": "median", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "test": ["def check(median):\n\tassert median([-6, 3, 8, 1002, 14, 16]) == 11.0", "def check(median):\n\tassert median([2, 10]) == 6.0", "def check(median):\n\tassert median([12, 3, 5, 11, 7, 4, 5]) == 5", "def check(median):\n\tassert median([-15, 4, 5, 1001, 15, 23]) == 10.0", "def check(median):\n\tassert median([-15, 3, 4, 1000, 13, 23]) == 8.5", "def check(median):\n\tassert median([-5, 9, 2, 996, 15, 22]) == 12.0", "def check(median):\n\tassert median([6, 2, 1, 8, 1]) == 2", "def check(median):\n\tassert median([7, 7]) == 7.0", "def check(median):\n\tassert median([4, 2, 2, 12, 10, 4, 10]) == 4", "def check(median):\n\tassert median([-12, 8, 9, 997, 14, 17]) == 11.5", "def check(median):\n\tassert median([1, 1, 3, 1, 10]) == 1", "def check(median):\n\tassert median([-8, 4, 8, 997, 15, 20]) == 11.5", "def check(median):\n\tassert median([8]) == 8", "def check(median):\n\tassert median([5]) == 5", "def check(median):\n\tassert median([8, 3, 2, 9, 6, 5, 2]) == 5", "def check(median):\n\tassert median([-15, 8, 4, 997, 7, 19]) == 7.5", "def check(median):\n\tassert median([-7, 4, 10, 998, 10, 22]) == 10.0", "def check(median):\n\tassert median([10]) == 10", "def check(median):\n\tassert median([5, 4]) == 4.5", "def check(median):\n\tassert median([3, 6, 6, 2, 6]) == 6", "def check(median):\n\tassert median([1, 8]) == 4.5", "def check(median):\n\tassert median([12, 1, 6, 11, 13, 6, 6]) == 6", "def check(median):\n\tassert median([8, 5, 7, 6, 3]) == 6", "def check(median):\n\tassert median([6, 2, 7, 8, 8, 5, 4]) == 6", "def check(median):\n\tassert median([7, 4]) == 5.5", "def check(median):\n\tassert median([-7, 6, 6, 996, 6, 15]) == 6.0", "def check(median):\n\tassert median([-15, 8, 1, 1004, 6, 19]) == 7.0", "def check(median):\n\tassert median([5, 5, 5, 7, 3]) == 5", "def check(median):\n\tassert median([6, 6, 2, 7, 6]) == 6", "def check(median):\n\tassert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "def check(median):\n\tassert median([4]) == 4", "def check(median):\n\tassert median([11, 2]) == 6.5", "def check(median):\n\tassert median([1, 3, 6, 4, 10]) == 4", "def check(median):\n\tassert median([-5, 9, 10, 1000, 12, 18]) == 11.0", "def check(median):\n\tassert median([10, 6, 4, 8, 4, 3, 11]) == 6", "def check(median):\n\tassert median([6, 5]) == 5.5", "def check(median):\n\tassert median([6, 6, 6, 9, 7, 4, 10]) == 6", "def check(median):\n\tassert median([6, 5, 5, 7, 10, 6, 8]) == 6", "def check(median):\n\tassert median([7, 4, 7, 1, 7]) == 7", "def check(median):\n\tassert median([-6, 9, 6, 997, 14, 25]) == 11.5", "def check(median):\n\tassert median([7, 8]) == 7.5", "def check(median):\n\tassert median([3, 1, 2, 4, 5]) == 3", "def check(median):\n\tassert median([-11, 3, 10, 1005, 10, 22]) == 10.0", "def check(median):\n\tassert median([6, 9]) == 7.5", "def check(median):\n\tassert median([11, 3, 6, 13, 6, 4, 9]) == 6", "def check(median):\n\tassert median([-10, 3, 3, 997, 15, 22]) == 9.0", "def check(median):\n\tassert median([-8, 5, 4, 1001, 14, 22]) == 9.5", "def check(median):\n\tassert median([11, 3, 1, 8, 5, 1, 8]) == 5", "def check(median):\n\tassert median([-15, 3, 2, 1002, 8, 22]) == 5.5", "def check(median):\n\tassert median([8, 5, 3, 2, 10]) == 5", "def check(median):\n\tassert median([11, 1, 3, 8, 13, 2, 7]) == 7", "def check(median):\n\tassert median([3, 6, 1, 4, 3]) == 3", "def check(median):\n\tassert median([10, 10]) == 10.0", "def check(median):\n\tassert median([1]) == 1", "def check(median):\n\tassert median([11, 6, 7, 6, 6, 1, 12]) == 6", "def check(median):\n\tassert median([1, 5, 6, 6, 3]) == 5", "def check(median):\n\tassert median([2, 6, 6, 7, 3]) == 6", "def check(median):\n\tassert median([3, 10]) == 6.5", "def check(median):\n\tassert median([-11, 5, 11, 1002, 10, 20]) == 10.5", "def check(median):\n\tassert median([6, 6, 6, 7, 10]) == 6", "def check(median):\n\tassert median([3, 5, 7, 4, 8]) == 5", "def check(median):\n\tassert median([13, 5, 6, 7, 14, 7, 9]) == 7", "def check(median):\n\tassert median([6, 4, 4, 11, 11, 2, 2]) == 4", "def check(median):\n\tassert median([12, 2, 2, 11, 11, 4, 2]) == 4", "def check(median):\n\tassert median([3, 9]) == 6.0", "def check(median):\n\tassert median([5, 6, 6, 7, 5, 2, 9]) == 6", "def check(median):\n\tassert median([4, 6]) == 5.0", "def check(median):\n\tassert median([1, 2]) == 1.5", "def check(median):\n\tassert median([3, 4, 5, 9, 7, 2, 3]) == 4", "def check(median):\n\tassert median([10, 4, 7, 11, 11, 3, 3]) == 7", "def check(median):\n\tassert median([6, 10]) == 8.0", "def check(median):\n\tassert median([-6, 6, 9, 1005, 8, 25]) == 8.5", "def check(median):\n\tassert median([8, 5, 5, 7, 10]) == 7", "def check(median):\n\tassert median([-13, 8, 6, 998, 13, 19]) == 10.5", "def check(median):\n\tassert median([7, 2, 7, 6, 6]) == 6", "def check(median):\n\tassert median([9]) == 9", "def check(median):\n\tassert median([7]) == 7", "def check(median):\n\tassert median([8, 1, 3, 9, 3]) == 3", "def check(median):\n\tassert median([8, 1, 3, 9, 9, 2, 7]) == 7", "def check(median):\n\tassert median([-9, 4, 2, 1002, 6, 23]) == 5.0", "def check(median):\n\tassert median([8, 2, 7, 6, 7]) == 7", "def check(median):\n\tassert median([1, 6, 7, 5, 4]) == 5", "def check(median):\n\tassert median([2, 2]) == 2.0", "def check(median):\n\tassert median([6]) == 6", "def check(median):\n\tassert median([-7, 7, 8, 1000, 13, 25]) == 10.5", "def check(median):\n\tassert median([-5, 1, 10, 1003, 10, 25]) == 10.0", "def check(median):\n\tassert median([9, 2]) == 5.5", "def check(median):\n\tassert median([3]) == 3", "def check(median):\n\tassert median([6, 1, 5, 7, 11, 6, 5]) == 6", "def check(median):\n\tassert median([7, 3, 6, 5, 2]) == 5", "def check(median):\n\tassert median([-11, 3, 3, 998, 15, 15]) == 9.0", "def check(median):\n\tassert median([5, 5]) == 5.0", "def check(median):\n\tassert median([9, 5, 2, 6, 13, 7, 2]) == 6", "def check(median):\n\tassert median([8, 6, 3, 5, 12, 5, 5]) == 5", "def check(median):\n\tassert median([11, 3]) == 7.0", "def check(median):\n\tassert median([3, 6, 5, 11, 5, 4, 6]) == 5", "def check(median):\n\tassert median([5, 1]) == 3.0", "def check(median):\n\tassert median([8, 8]) == 8.0", "def check(median):\n\tassert median([7, 2, 7, 1, 4]) == 4", "def check(median):\n\tassert median([9, 9]) == 9.0", "def check(median):\n\tassert median([3, 6, 2, 6, 9]) == 6", "def check(median):\n\tassert median([-11, 1, 3, 1004, 12, 17]) == 7.5", "def check(median):\n\tassert median([5, 2, 3, 9, 5, 7, 7]) == 5", "def check(median):\n\tassert median([6, 2, 4, 2, 6]) == 4", "def check(median):\n\tassert median([3, 1, 7, 4, 3]) == 3", "def check(median):\n\tassert median([5, 2, 2, 5, 6, 1, 3]) == 3", "def check(median):\n\tassert median([-15, 8, 4, 1000, 6, 16]) == 7.0", "def check(median):\n\tassert median([1, 6]) == 3.5", "def check(median):\n\tassert median([3, 2, 7, 8, 11, 5, 12]) == 7", "def check(median):\n\tassert median([8, 3, 5, 9, 10]) == 8", "def check(median):\n\tassert median([2, 9]) == 5.5"], "test_case_list": ["assert median([-6, 3, 8, 1002, 14, 16]) == 11.0", "assert median([2, 10]) == 6.0", "assert median([12, 3, 5, 11, 7, 4, 5]) == 5", "assert median([-15, 4, 5, 1001, 15, 23]) == 10.0", "assert median([-15, 3, 4, 1000, 13, 23]) == 8.5", "assert median([-5, 9, 2, 996, 15, 22]) == 12.0", "assert median([6, 2, 1, 8, 1]) == 2", "assert median([7, 7]) == 7.0", "assert median([4, 2, 2, 12, 10, 4, 10]) == 4", "assert median([-12, 8, 9, 997, 14, 17]) == 11.5", "assert median([1, 1, 3, 1, 10]) == 1", "assert median([-8, 4, 8, 997, 15, 20]) == 11.5", "assert median([8]) == 8", "assert median([5]) == 5", "assert median([8, 3, 2, 9, 6, 5, 2]) == 5", "assert median([-15, 8, 4, 997, 7, 19]) == 7.5", "assert median([-7, 4, 10, 998, 10, 22]) == 10.0", "assert median([10]) == 10", "assert median([5, 4]) == 4.5", "assert median([3, 6, 6, 2, 6]) == 6", "assert median([1, 8]) == 4.5", "assert median([12, 1, 6, 11, 13, 6, 6]) == 6", "assert median([8, 5, 7, 6, 3]) == 6", "assert median([6, 2, 7, 8, 8, 5, 4]) == 6", "assert median([7, 4]) == 5.5", "assert median([-7, 6, 6, 996, 6, 15]) == 6.0", "assert median([-15, 8, 1, 1004, 6, 19]) == 7.0", "assert median([5, 5, 5, 7, 3]) == 5", "assert median([6, 6, 2, 7, 6]) == 6", "assert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "assert median([4]) == 4", "assert median([11, 2]) == 6.5", "assert median([1, 3, 6, 4, 10]) == 4", "assert median([-5, 9, 10, 1000, 12, 18]) == 11.0", "assert median([10, 6, 4, 8, 4, 3, 11]) == 6", "assert median([6, 5]) == 5.5", "assert median([6, 6, 6, 9, 7, 4, 10]) == 6", "assert median([6, 5, 5, 7, 10, 6, 8]) == 6", "assert median([7, 4, 7, 1, 7]) == 7", "assert median([-6, 9, 6, 997, 14, 25]) == 11.5", "assert median([7, 8]) == 7.5", "assert median([3, 1, 2, 4, 5]) == 3", "assert median([-11, 3, 10, 1005, 10, 22]) == 10.0", "assert median([6, 9]) == 7.5", "assert median([11, 3, 6, 13, 6, 4, 9]) == 6", "assert median([-10, 3, 3, 997, 15, 22]) == 9.0", "assert median([-8, 5, 4, 1001, 14, 22]) == 9.5", "assert median([11, 3, 1, 8, 5, 1, 8]) == 5", "assert median([-15, 3, 2, 1002, 8, 22]) == 5.5", "assert median([8, 5, 3, 2, 10]) == 5", "assert median([11, 1, 3, 8, 13, 2, 7]) == 7", "assert median([3, 6, 1, 4, 3]) == 3", "assert median([10, 10]) == 10.0", "assert median([1]) == 1", "assert median([11, 6, 7, 6, 6, 1, 12]) == 6", "assert median([1, 5, 6, 6, 3]) == 5", "assert median([2, 6, 6, 7, 3]) == 6", "assert median([3, 10]) == 6.5", "assert median([-11, 5, 11, 1002, 10, 20]) == 10.5", "assert median([6, 6, 6, 7, 10]) == 6", "assert median([3, 5, 7, 4, 8]) == 5", "assert median([13, 5, 6, 7, 14, 7, 9]) == 7", "assert median([6, 4, 4, 11, 11, 2, 2]) == 4", "assert median([12, 2, 2, 11, 11, 4, 2]) == 4", "assert median([3, 9]) == 6.0", "assert median([5, 6, 6, 7, 5, 2, 9]) == 6", "assert median([4, 6]) == 5.0", "assert median([1, 2]) == 1.5", "assert median([3, 4, 5, 9, 7, 2, 3]) == 4", "assert median([10, 4, 7, 11, 11, 3, 3]) == 7", "assert median([6, 10]) == 8.0", "assert median([-6, 6, 9, 1005, 8, 25]) == 8.5", "assert median([8, 5, 5, 7, 10]) == 7", "assert median([-13, 8, 6, 998, 13, 19]) == 10.5", "assert median([7, 2, 7, 6, 6]) == 6", "assert median([9]) == 9", "assert median([7]) == 7", "assert median([8, 1, 3, 9, 3]) == 3", "assert median([8, 1, 3, 9, 9, 2, 7]) == 7", "assert median([-9, 4, 2, 1002, 6, 23]) == 5.0", "assert median([8, 2, 7, 6, 7]) == 7", "assert median([1, 6, 7, 5, 4]) == 5", "assert median([2, 2]) == 2.0", "assert median([6]) == 6", "assert median([-7, 7, 8, 1000, 13, 25]) == 10.5", "assert median([-5, 1, 10, 1003, 10, 25]) == 10.0", "assert median([9, 2]) == 5.5", "assert median([3]) == 3", "assert median([6, 1, 5, 7, 11, 6, 5]) == 6", "assert median([7, 3, 6, 5, 2]) == 5", "assert median([-11, 3, 3, 998, 15, 15]) == 9.0", "assert median([5, 5]) == 5.0", "assert median([9, 5, 2, 6, 13, 7, 2]) == 6", "assert median([8, 6, 3, 5, 12, 5, 5]) == 5", "assert median([11, 3]) == 7.0", "assert median([3, 6, 5, 11, 5, 4, 6]) == 5", "assert median([5, 1]) == 3.0", "assert median([8, 8]) == 8.0", "assert median([7, 2, 7, 1, 4]) == 4", "assert median([9, 9]) == 9.0", "assert median([3, 6, 2, 6, 9]) == 6", "assert median([-11, 1, 3, 1004, 12, 17]) == 7.5", "assert median([5, 2, 3, 9, 5, 7, 7]) == 5", "assert median([6, 2, 4, 2, 6]) == 4", "assert median([3, 1, 7, 4, 3]) == 3", "assert median([5, 2, 2, 5, 6, 1, 3]) == 3", "assert median([-15, 8, 4, 1000, 6, 16]) == 7.0", "assert median([1, 6]) == 3.5", "assert median([3, 2, 7, 8, 11, 5, 12]) == 7", "assert median([8, 3, 5, 9, 10]) == 8", "assert median([2, 9]) == 5.5"], "nl": "Return median of elements in the list l.\n    ", "func": "def median(l: list):", "examples": ">>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    ", "repair_prompt": ["def median(l: list):\t\n'''Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''"], "completions": ["from typing import List\n## main.py\n\nimport statistics\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (List[float]): List of numeric elements.\n\n    Returns:\n        float: Median value as a float.\n\n    Raises:\n        ValueError: If the list is empty.\n        TypeError: If the list contains non-numeric elements.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty, cannot compute median.\")\n    \n    # Check for non-numeric elements\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"The list contains non-numeric elements.\")\n    \n    # Calculate and return the median\n    return float(statistics.median(l))\n", "from typing import List\n## main.py\n\nimport numpy as np\nfrom typing import List, Union\n\ndef median(l: List[Union[int, float]]) -> Union[float, None]:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (List[Union[int, float]]): A list of numeric values.\n\n    Returns:\n        Union[float, None]: The median value of the list or None if the list is empty.\n\n    Raises:\n        ValueError: If the list contains non-numeric values.\n\n    Examples:\n        >>> median([3, 1, 2, 4, 5])\n        3\n        >>> median([-10, 4, 6, 1000, 10, 20])\n        15.0\n    \"\"\"\n    if not l:\n        return None\n\n    # Validate all elements are numeric\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List contains non-numeric values.\")\n\n    # Calculate the median using numpy for efficiency\n    return float(np.median(l))\n", "from typing import List\n## main.py\nimport statistics\n\ndef median(l: list) -> float:\n    '''\n    Calculate the median of a list of numbers.\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    float: The median value of the list.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric elements.\n\n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric elements\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"The list contains non-numeric elements.\")\n    \n    # Calculate and return the median using the statistics module\n    return statistics.median(l)\n", "from typing import List\n## main.py\n\nimport statistics\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    \"\"\"\n    Calculate and return the median of a list of numbers.\n\n    Args:\n        l (List[float]): List of numbers (integers or floats).\n\n    Returns:\n        float: Median value as a float.\n\n    Raises:\n        ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty. Cannot compute median.\")\n    \n    # Validate that all elements in the list are numeric\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"The list contains non-numeric values.\")\n    \n    # Calculate and return the median using the statistics module\n    return statistics.median(l)\n", "from typing import List\n## main.py\n\nimport statistics\n\ndef median(l: list) -> float:\n    '''\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numbers\n    \n    Returns:\n        Median value\n    \n    Raises:\n        ValueError: If the list contains non-numeric values or is empty\n    '''\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"The list contains non-numeric values.\")\n    \n    return statistics.median(l)\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (list): List of numbers (integers or floats).\n\n    Returns:\n        float: Median value as a float.\n\n    Raises:\n        ValueError: If the list contains non-numeric values.\n    \"\"\"\n    # Validate input list\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"List contains non-numeric values\")\n\n    # Sort the list\n    sorted_list = np.sort(l)\n\n    # Calculate median\n    median_value = np.median(sorted_list)\n\n    return median_value\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        example_list = [1, 3, 5, 7, 9]\n        print(f\"The median of {example_list} is {median(example_list)}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\nimport statistics\n\ndef median(l: list) -> float:\n    '''\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numeric values\n    \n    Returns:\n        Median value as a float\n    \n    Raises:\n        ValueError: If the list contains non-numeric values or is empty\n    '''\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"The list contains non-numeric values.\")\n    \n    return statistics.median(l)\n", "from typing import List\n## main.py\n\nimport numpy as np\nfrom typing import List, Optional\n\ndef median(l: List[float]) -> Optional[float]:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (List[float]): List of numerical values.\n\n    Returns:\n        Optional[float]: Median value as a float, or None if the list is empty.\n\n    Raises:\n        ValueError: If the list contains non-numeric elements.\n    \"\"\"\n    if not l:\n        return None\n\n    try:\n        # Convert list to a NumPy array for efficient operations\n        np_array = np.array(l, dtype=float)\n    except ValueError:\n        raise ValueError(\"List contains non-numeric elements.\")\n\n    # Sort the array and calculate the median\n    sorted_array = np.sort(np_array)\n    median_value = np.median(sorted_array)\n\n    return float(median_value)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(median([3, 1, 2, 4, 5]))  # Output: 3.0\n        print(median([-10, 4, 6, 1000, 10, 20]))  # Output: 7.0\n        print(median([]))  # Output: None\n        print(median([1, 'a', 3]))  # Raises ValueError\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    float: The median value of the list.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric elements.\n\n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric elements\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"The list contains non-numeric elements.\")\n    \n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n\n    if n % 2 == 0:\n        # If even, return the average of the middle two elements\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        # If odd, return the middle element\n        return float(sorted_list[mid])\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(median([3, 1, 2, 4, 5]))  # Output: 3\n        print(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef median(l: list) -> float:\n    '''\n    Calculate the median of a list of numbers.\n    \n    Parameters:\n    l (list): A list of numeric elements.\n    \n    Returns:\n    float: The median value of the list.\n    \n    Raises:\n    ValueError: If the list is empty or contains non-numeric elements.\n    \n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric elements\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"The list contains non-numeric elements.\")\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    \n    # Calculate the median\n    n = len(sorted_list)\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # Even number of elements\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        # Odd number of elements\n        return float(sorted_list[mid])\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(median([3, 1, 2, 4, 5]))  # Output: 3\n        print(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0\n    except ValueError as e:\n        print(e)\n"], "plans": ["requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists, handle edge cases, and be optimized for performance. Documentation should be clear to facilitate easy integration.\nrequirement pool:\n- Accurate median calculation for odd and even-length lists\n- Handle edge cases like empty lists or single-element lists\n- Optimize performance for large datasets\n- Provide clear documentation and examples\n- Ensure compatibility with existing Python projects\nWe will implement a simple function to calculate the median of a list using Python's built-in capabilities. The function will handle edge cases such as empty lists and single-element lists. We will use the 'statistics' module for its simplicity and efficiency in calculating the median, which is suitable for our target product's goals. This approach avoids the complexity and overhead of additional libraries like NumPy or Pandas, making it easy to integrate into existing projects.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-sized lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Handle edge cases such as empty lists\n- Provide comprehensive documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a simple function using the built-in Python capabilities to calculate the median. For performance optimization, we will use the NumPy library, which is highly efficient for numerical operations on large datasets. The function will handle empty lists by returning None and will raise an error for non-numeric values to ensure data integrity.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even number of elements in a list. It should handle edge cases such as empty lists and lists with a single element. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Accurate median calculation for odd and even number of elements\n- Handle edge cases like empty lists and single-element lists\n- Optimize performance for large datasets\n- Provide clear documentation and examples\n- Ensure compatibility with existing Python projects\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle edge cases such as empty lists and single-element lists. We will use the 'statistics' module for simplicity and performance optimization, as it is part of the Python standard library and provides a reliable median calculation method.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-sized lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Ensure compatibility with Python's standard library\nWe will implement a function to calculate the median of a list using Python's standard library. The function will handle both odd and even-sized lists and will include error handling for invalid inputs such as empty lists or non-numeric values. We will use the 'statistics' module for simplicity and reliability, as it is part of Python's standard library and provides a straightforward method for median calculation.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Ensure compatibility with Python 3.x\nWe will implement a function to calculate the median using the built-in Python capabilities for simplicity and efficiency. The function will handle both odd and even-length lists and include error handling for non-numeric values by raising a ValueError. We will use the 'statistics' module for median calculation, which is optimized for performance and compatible with Python 3.x.\n", "requirement analysis:\nThe function should accurately compute the median of a list of numbers, handling both odd and even length lists. It should be efficient enough to handle large datasets and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Include error handling for non-numeric inputs\n- Provide detailed documentation and examples\n- Ensure compatibility with Python 3.x\nWe will implement a simple function to calculate the median of a list using Python's built-in capabilities. For performance optimization, we will use the NumPy library, which is well-suited for handling large datasets efficiently. The function will include error handling to manage non-numeric inputs by raising a ValueError. Documentation will be provided with examples to ensure clarity and ease of use.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Handle edge cases such as empty lists\n- Provide detailed documentation and examples\n- Ensure compatibility with Python's list data structure\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle both odd and even-length lists and will raise an error if non-numeric values are present. We will use the 'statistics' module for simplicity and performance optimization.\n", "requirement analysis:\nThe requirement is to develop a function that accurately calculates the median of a list of numbers. The function should handle both odd and even numbers of elements and return the correct median value. It should be efficient and easy to integrate into larger systems.\nrequirement pool:\n- Implement the median calculation function.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases, such as empty lists.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify the function's accuracy.\nWe will implement a simple function to calculate the median using Python's built-in capabilities. For performance optimization, especially with large datasets, we will utilize the NumPy library, which is efficient and widely used for numerical operations. The function will handle edge cases such as empty lists by returning None or raising an appropriate exception. Comprehensive documentation and examples will be provided to ensure ease of use.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists, handle edge cases, and be optimized for performance. Documentation should be clear to facilitate easy integration.\nrequirement pool:\n- Accurate median calculation for odd and even-length lists\n- Handle edge cases like empty lists or single-element lists\n- Optimize performance for large datasets\n- Provide clear and concise documentation\n- Ensure compatibility with other Python data processing libraries\nWe will implement a simple function to calculate the median of a list using Python's built-in capabilities. The function will handle edge cases such as empty lists and single-element lists. For performance optimization, we will use the 'sorted' function, which is efficient for sorting operations. We will not use external libraries to keep the solution lightweight and easy to integrate. The function will include clear documentation and examples.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists, handle edge cases, and be optimized for performance. Documentation should be clear to facilitate user understanding.\nrequirement pool:\n- Accurate median calculation for odd and even-length lists\n- Handle edge cases like empty lists or single-element lists\n- Optimize performance for large datasets\n- Provide clear and concise documentation\n- Include examples in the documentation\nWe will implement a function to calculate the median using Python's built-in capabilities, ensuring it handles edge cases like empty lists and single-element lists. For performance optimization, we will use the 'numpy' library, which is efficient for large datasets. The function will be documented clearly with examples and edge case handling.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [111, 111, 111, 111, 111, 111, 111, 111, 111, 111], "completion": "from typing import List\n## main.py\n\nimport numpy as np\n\ndef median(l: list) -> float:\n    '''\n    Calculate the median of a list of numbers.\n    \n    Parameters:\n    l (list): A list of numeric elements.\n    \n    Returns:\n    float: The median value of the list.\n    \n    Raises:\n    ValueError: If the list is empty or contains non-numeric elements.\n    \n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric elements\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"The list contains non-numeric elements.\")\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    \n    # Calculate the median\n    n = len(sorted_list)\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # Even number of elements\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        # Odd number of elements\n        return float(sorted_list[mid])\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(median([3, 1, 2, 4, 5]))  # Output: 3\n        print(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0\n    except ValueError as e:\n        print(e)\n", "passed": true, "pass": true, "pass_num": 10, "round": 554, "mutate_method": "condense_two2one", "parent_index": 299}
