{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum numbers in arr. You need to ensure this list contains exactly the k largest numbers from the array.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "entry_point": "maximum", "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "test": ["def check(maximum):\n\tassert maximum([2, 1, 1], 1) == [2]", "def check(maximum):\n\tassert maximum([5, 5, 4, -12], 4) == [-12, 4, 5, 5]", "def check(maximum):\n\tassert maximum([4, 6, 5, -18, 248, -403, 5], 3) == [5, 6, 248]", "def check(maximum):\n\tassert maximum([2, 3, 5, 3, 1, -15], 3) == [3, 3, 5]", "def check(maximum):\n\tassert maximum([4, 5, 5, -22, 241, -401, 1], 1) == [241]", "def check(maximum):\n\tassert maximum([1, 12, 2, 1, -11, -4, 5], 5) == [1, 1, 2, 5, 12]", "def check(maximum):\n\tassert maximum([8, 13, 4, 2, -11, -4, 1], 11) == [-11, -4, 1, 2, 4, 8, 13]", "def check(maximum):\n\tassert maximum([3, -4, 7], 3) == [-4, 3, 7]", "def check(maximum):\n\tassert maximum([-123, 23, 1, 3, 3, 1], 9) == [-123, 1, 1, 3, 3, 23]", "def check(maximum):\n\tassert maximum([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.", "def check(maximum):\n\tassert maximum([-9, 11], 3) == [-9, 11]", "def check(maximum):\n\tassert maximum([6, 6, 2, -24, 240, -402, 4], 1) == [240]", "def check(maximum):\n\tassert maximum([-11, 5], 4) == [-11, 5]", "def check(maximum):\n\tassert maximum([6, 1, 3, -26, 247, -400, 1], 1) == [247]", "def check(maximum):\n\tassert maximum([-119, 24, 5, 4, 1, -8], 9) == [-119, -8, 1, 4, 5, 24]", "def check(maximum):\n\tassert maximum([-123, 24, 3, 4, 2, -7], 6) == [-123, -7, 2, 3, 4, 24]", "def check(maximum):\n\tassert maximum([-3, -4, 5], 3) == [-4, -3, 5]", "def check(maximum):\n\tassert maximum([3, 3, 2, -27, 243, -396, 5], 3) == [3, 5, 243]", "def check(maximum):\n\tassert maximum([4, -4, 4], 2) == [4, 4]", "def check(maximum):\n\tassert maximum([4, 1, 9, -3], 3) == [1, 4, 9]", "def check(maximum):\n\tassert maximum([2, 5, 1, 2, -6, -2, 5], 6) == [-2, 1, 2, 2, 5, 5]", "def check(maximum):\n\tassert maximum([0, 5, 2, 7, 2, -15], 3) == [2, 5, 7]", "def check(maximum):\n\tassert maximum([-1, 5, 3, 6, -2, -7, 6], 3) == [5, 6, 6]", "def check(maximum):\n\tassert maximum([5, 3, 7, -2], 3) == [3, 5, 7]", "def check(maximum):\n\tassert maximum([2, 1, 9], 1) == [9]", "def check(maximum):\n\tassert maximum([8, 15, 1, 4, -14, -5, 2], 6) == [-5, 1, 2, 4, 8, 15]", "def check(maximum):\n\tassert maximum([-3, 1, 7, 7, 4, -12], 7) == [-12, -3, 1, 4, 7, 7]", "def check(maximum):\n\tassert maximum([7, -2], 7) == [-2, 7]", "def check(maximum):\n\tassert maximum([6, -5], 2) == [-5, 6]", "def check(maximum):\n\tassert maximum([-8, 5], 6) == [-8, 5]", "def check(maximum):\n\tassert maximum([-126, 15, 4, 3, 4, -4], 3) == [4, 4, 15]", "def check(maximum):\n\tassert maximum([5, -2, 1], 6) == [-2, 1, 5]", "def check(maximum):\n\tassert maximum([10, 12, 1, 2, -11, -6, 2], 4) == [2, 2, 10, 12]", "def check(maximum):\n\tassert maximum([-2, 5, 5, 5, -1, 2, 3], 6) == [-1, 2, 3, 5, 5, 5]", "def check(maximum):\n\tassert maximum([-6, -2, 5], 2) == [-2, 5]", "def check(maximum):\n\tassert maximum([3, -9, 1], 4) == [-9, 1, 3]", "def check(maximum):\n\tassert maximum([119, -119, 21, 2, 4, 4, -3], 3) == [4, 21, 119]", "def check(maximum):\n\tassert maximum([2, 6, 6, 3, 4, 3, 1], 2) == [6, 6]", "def check(maximum):\n\tassert maximum([7, -9, 7], 7) == [-9, 7, 7]", "def check(maximum):\n\tassert maximum([118, -119, 17, 4, 1, 1, -7], 2) == [17, 118]", "def check(maximum):\n\tassert maximum([-1, -2, 3], 3) == [-2, -1, 3]", "def check(maximum):\n\tassert maximum([8, -2, 4], 3) == [-2, 4, 8]", "def check(maximum):\n\tassert maximum([-1, 3, 4, 7, 2, -3, 6], 1) == [7]", "def check(maximum):\n\tassert maximum([-14, 6], 4) == [-14, 6]", "def check(maximum):\n\tassert maximum([122, -124, 25, 1, 1, 1, -2], 2) == [25, 122]", "def check(maximum):\n\tassert maximum([1, 1, 2, -2], 2) == [1, 2]", "def check(maximum):\n\tassert maximum([3, 15, 5, 4, -16, -10, 4], 11) == [-16, -10, 3, 4, 4, 5, 15]", "def check(maximum):\n\tassert maximum([8, -6], 7) == [-6, 8]", "def check(maximum):\n\tassert maximum([-12, 8], 2) == [-12, 8]", "def check(maximum):\n\tassert maximum([10, 16, 5, 2, -12, -3, 1], 7) == [-12, -3, 1, 2, 5, 10, 16]", "def check(maximum):\n\tassert maximum([-119, 16, 5, 2, 3, -6], 8) == [-119, -6, 2, 3, 5, 16]", "def check(maximum):\n\tassert maximum([5, 1, 4], 2) == [4, 5]", "def check(maximum):\n\tassert maximum([-1, 2, 1, 5, 6, -13], 2) == [5, 6]", "def check(maximum):\n\tassert maximum([-13, 13], 7) == [-13, 13]", "def check(maximum):\n\tassert maximum([-1, 0, 2, 5, 3, -10], 2) == [3, 5]", "def check(maximum):\n\tassert maximum([4, -6, 8], 4) == [-6, 4, 8]", "def check(maximum):\n\tassert maximum([-2, 1, 1], 1) == [1]", "def check(maximum):\n\tassert maximum([2, 1], 1) == [2]", "def check(maximum):\n\tassert maximum([128, -128, 22, 2, 3, 1, -5], 6) == [-5, 1, 2, 3, 22, 128]", "def check(maximum):\n\tassert maximum([-120, 20, 2, 5, 1, -6], 7) == [-120, -6, 1, 2, 5, 20]", "def check(maximum):\n\tassert maximum([-5, 10], 6) == [-5, 10]", "def check(maximum):\n\tassert maximum([-1, 4, 7, 3, 8, -9], 7) == [-9, -1, 3, 4, 7, 8]", "def check(maximum):\n\tassert maximum([4, 3, 4, -20, 247, -400, 4], 4) == [4, 4, 4, 247]", "def check(maximum):\n\tassert maximum([-3, 1, 2], 4) == [-3, 1, 2]", "def check(maximum):\n\tassert maximum([-1, 2, 1, 2, -5, -5, 2], 3) == [2, 2, 2]", "def check(maximum):\n\tassert maximum([2, 13, 4, 6, -17, -3, 1], 7) == [-17, -3, 1, 2, 4, 6, 13]", "def check(maximum):\n\tassert maximum([-5, -6, 10], 1) == [10]", "def check(maximum):\n\tassert maximum([10, 12, 2, 1, -17, -3, 5], 4) == [2, 5, 10, 12]", "def check(maximum):\n\tassert maximum([119, -118, 15, 3, 3, 3, -8], 1) == [119]", "def check(maximum):\n\tassert maximum([2, -9], 4) == [-9, 2]", "def check(maximum):\n\tassert maximum([-9, 13], 3) == [-9, 13]", "def check(maximum):\n\tassert maximum([6, 0, 5], 4) == [0, 5, 6]", "def check(maximum):\n\tassert maximum([123, -128, 20, 4, 3, 2, 1], 6) == [1, 2, 3, 4, 20, 123]", "def check(maximum):\n\tassert maximum([5, 3, 2, -9], 5) == [-9, 2, 3, 5]", "def check(maximum):\n\tassert maximum([4, -9], 4) == [-9, 4]", "def check(maximum):\n\tassert maximum([1, 2, 3, -23, 243, -400, 0], 0) == []", "def check(maximum):\n\tassert maximum([4, -4], 2) == [-4, 4]", "def check(maximum):\n\tassert maximum([3, 2, 1, -9], 6) == [-9, 1, 2, 3]", "def check(maximum):\n\tassert maximum([1, 0, 5, -7], 1) == [5]", "def check(maximum):\n\tassert maximum([6, 0, 8], 2) == [6, 8]", "def check(maximum):\n\tassert maximum([0, -5, 10], 1) == [10]", "def check(maximum):\n\tassert maximum([-5, 3, 2, 8, 3, -10], 1) == [8]", "def check(maximum):\n\tassert maximum([6, 1, 3, -4], 6) == [-4, 1, 3, 6]", "def check(maximum):\n\tassert maximum([119, -119, 24, 5, 5, 7, -4], 6) == [-4, 5, 5, 7, 24, 119]", "def check(maximum):\n\tassert maximum([6, 5, 2, -10], 5) == [-10, 2, 5, 6]", "def check(maximum):\n\tassert maximum([3, 13, 3, 4, -9, -11, 3], 2) == [4, 13]", "def check(maximum):\n\tassert maximum([1, 1], 4) == [1, 1]", "def check(maximum):\n\tassert maximum([8, -4], 7) == [-4, 8]", "def check(maximum):\n\tassert maximum([9, -9], 1) == [9]", "def check(maximum):\n\tassert maximum([0, 3, 6, 2, -1, 3, 4], 4) == [3, 3, 4, 6]", "def check(maximum):\n\tassert maximum([8, 1, 2], 4) == [1, 2, 8]", "def check(maximum):\n\tassert maximum([-2, 2, 5, 2, 0, 2, 2], 4) == [2, 2, 2, 5]", "def check(maximum):\n\tassert maximum([6, -1], 5) == [-1, 6]", "def check(maximum):\n\tassert maximum([2, 2, 10, -3], 1) == [10]", "def check(maximum):\n\tassert maximum([3, 19, 4, 5, -13, -8, 5], 4) == [4, 5, 5, 19]", "def check(maximum):\n\tassert maximum([-4, 6, 4, 2, 4, -6, 5], 4) == [4, 4, 5, 6]", "def check(maximum):\n\tassert maximum([6, 5, 1, -19, 242, -403, 5], 3) == [5, 6, 242]", "def check(maximum):\n\tassert maximum([-3, 6, 3, 1, 0, -4, 6], 5) == [0, 1, 3, 6, 6]", "def check(maximum):\n\tassert maximum([1, 3, 3, 2, -2, -5, 5], 2) == [3, 5]", "def check(maximum):\n\tassert maximum([127, -124, 16, 1, 5, 7, -6], 7) == [-124, -6, 1, 5, 7, 16, 127]", "def check(maximum):\n\tassert maximum([-7, 10], 7) == [-7, 10]", "def check(maximum):\n\tassert maximum([7, 12, 4, 4, -16, -7, 3], 10) == [-16, -7, 3, 4, 4, 7, 12]", "def check(maximum):\n\tassert maximum([5, 2, 5, -11], 5) == [-11, 2, 5, 5]", "def check(maximum):\n\tassert maximum([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]", "def check(maximum):\n\tassert maximum([6, 7, 8, -20, 243, -398, 5], 3) == [7, 8, 243]", "def check(maximum):\n\tassert maximum([-10, 10], 3) == [-10, 10]", "def check(maximum):\n\tassert maximum([4, 5, 8, -28, 245, -402, 2], 4) == [4, 5, 8, 245]", "def check(maximum):\n\tassert maximum([125, -119, 24, 2, 3, 4, -4], 6) == [-4, 2, 3, 4, 24, 125]", "def check(maximum):\n\tassert maximum([1, -6], 1) == [1]", "def check(maximum):\n\tassert maximum([3, 1, 1, -19, 248, -404, 5], 1) == [248]", "def check(maximum):\n\tassert maximum([1, 4, 4, -9], 3) == [1, 4, 4]", "def check(maximum):\n\tassert maximum([-122, 16, 1, 4, 2, 1], 6) == [-122, 1, 1, 2, 4, 16]", "def check(maximum):\n\tassert maximum([0, 1, 2, 5, 1, -9], 2) == [2, 5]", "def check(maximum):\n\tassert maximum([3, 6, 2, -19, 243, -396, 4], 1) == [243]", "def check(maximum):\n\tassert maximum([-1, 0, 2], 1) == [2]", "def check(maximum):\n\tassert maximum([-120, 25, 1, 5, 6, -3], 7) == [-120, -3, 1, 5, 6, 25]", "def check(maximum):\n\tassert maximum([-126, 22, 2, 2, 5, -3], 3) == [2, 5, 22]", "def check(maximum):\n\tassert maximum([1, -4, 2], 7) == [-4, 1, 2]", "def check(maximum):\n\tassert maximum([3, 1, 2, 7, 8, -11], 5) == [1, 2, 3, 7, 8]", "def check(maximum):\n\tassert maximum([-6, 7], 2) == [-6, 7]", "def check(maximum):\n\tassert maximum([3, 6, 4, -26, 246, -403, 5], 5) == [3, 4, 5, 6, 246]", "def check(maximum):\n\tassert maximum([-2, -7, 4], 4) == [-7, -2, 4]", "def check(maximum):\n\tassert maximum([4, 3, 4, 5, 1, -10], 1) == [5]", "def check(maximum):\n\tassert maximum([128, -127, 25, 1, 3, 2, -8], 5) == [1, 2, 3, 25, 128]", "def check(maximum):\n\tassert maximum([127, -127, 21, 5, 3, 3, -2], 8) == [-127, -2, 3, 3, 5, 21, 127]", "def check(maximum):\n\tassert maximum([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]", "def check(maximum):\n\tassert maximum([-7, 1, 4], 5) == [-7, 1, 4]", "def check(maximum):\n\tassert maximum([-7, -8, 6], 1) == [6]", "def check(maximum):\n\tassert maximum([7, 20, 1, 4, -9, -13, 1], 4) == [1, 4, 7, 20]", "def check(maximum):\n\tassert maximum([123, -121, 22, 4, 2, 2, -6], 1) == [123]", "def check(maximum):\n\tassert maximum([5, 3, 5, -6], 3) == [3, 5, 5]", "def check(maximum):\n\tassert maximum([-121, 15, 3, 4, 7, -5], 3) == [4, 7, 15]", "def check(maximum):\n\tassert maximum([-13, 11], 2) == [-13, 11]", "def check(maximum):\n\tassert maximum([-125, 18, 3, 1, 5, -1], 1) == [18]", "def check(maximum):\n\tassert maximum([9, -3, 1], 3) == [-3, 1, 9]", "def check(maximum):\n\tassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]", "def check(maximum):\n\tassert maximum([-1, 2, 1, 1, 1, -5], 1) == [2]", "def check(maximum):\n\tassert maximum([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]", "def check(maximum):\n\tassert maximum([-2, 7, 4, 5, 0, 0, 4], 3) == [4, 5, 7]", "def check(maximum):\n\tassert maximum([-4, 4, 2, 10, 2, -5], 5) == [-4, 2, 2, 4, 10]", "def check(maximum):\n\tassert maximum([1, 4, 4, 1, 2, -14], 5) == [1, 1, 2, 4, 4]", "def check(maximum):\n\tassert maximum([-123, 19, 4, 5, 6, -2], 3) == [5, 6, 19]"], "test_case_list": ["assert maximum([2, 1, 1], 1) == [2]", "assert maximum([5, 5, 4, -12], 4) == [-12, 4, 5, 5]", "assert maximum([4, 6, 5, -18, 248, -403, 5], 3) == [5, 6, 248]", "assert maximum([2, 3, 5, 3, 1, -15], 3) == [3, 3, 5]", "assert maximum([4, 5, 5, -22, 241, -401, 1], 1) == [241]", "assert maximum([1, 12, 2, 1, -11, -4, 5], 5) == [1, 1, 2, 5, 12]", "assert maximum([8, 13, 4, 2, -11, -4, 1], 11) == [-11, -4, 1, 2, 4, 8, 13]", "assert maximum([3, -4, 7], 3) == [-4, 3, 7]", "assert maximum([-123, 23, 1, 3, 3, 1], 9) == [-123, 1, 1, 3, 3, 23]", "assert maximum([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.", "assert maximum([-9, 11], 3) == [-9, 11]", "assert maximum([6, 6, 2, -24, 240, -402, 4], 1) == [240]", "assert maximum([-11, 5], 4) == [-11, 5]", "assert maximum([6, 1, 3, -26, 247, -400, 1], 1) == [247]", "assert maximum([-119, 24, 5, 4, 1, -8], 9) == [-119, -8, 1, 4, 5, 24]", "assert maximum([-123, 24, 3, 4, 2, -7], 6) == [-123, -7, 2, 3, 4, 24]", "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]", "assert maximum([3, 3, 2, -27, 243, -396, 5], 3) == [3, 5, 243]", "assert maximum([4, -4, 4], 2) == [4, 4]", "assert maximum([4, 1, 9, -3], 3) == [1, 4, 9]", "assert maximum([2, 5, 1, 2, -6, -2, 5], 6) == [-2, 1, 2, 2, 5, 5]", "assert maximum([0, 5, 2, 7, 2, -15], 3) == [2, 5, 7]", "assert maximum([-1, 5, 3, 6, -2, -7, 6], 3) == [5, 6, 6]", "assert maximum([5, 3, 7, -2], 3) == [3, 5, 7]", "assert maximum([2, 1, 9], 1) == [9]", "assert maximum([8, 15, 1, 4, -14, -5, 2], 6) == [-5, 1, 2, 4, 8, 15]", "assert maximum([-3, 1, 7, 7, 4, -12], 7) == [-12, -3, 1, 4, 7, 7]", "assert maximum([7, -2], 7) == [-2, 7]", "assert maximum([6, -5], 2) == [-5, 6]", "assert maximum([-8, 5], 6) == [-8, 5]", "assert maximum([-126, 15, 4, 3, 4, -4], 3) == [4, 4, 15]", "assert maximum([5, -2, 1], 6) == [-2, 1, 5]", "assert maximum([10, 12, 1, 2, -11, -6, 2], 4) == [2, 2, 10, 12]", "assert maximum([-2, 5, 5, 5, -1, 2, 3], 6) == [-1, 2, 3, 5, 5, 5]", "assert maximum([-6, -2, 5], 2) == [-2, 5]", "assert maximum([3, -9, 1], 4) == [-9, 1, 3]", "assert maximum([119, -119, 21, 2, 4, 4, -3], 3) == [4, 21, 119]", "assert maximum([2, 6, 6, 3, 4, 3, 1], 2) == [6, 6]", "assert maximum([7, -9, 7], 7) == [-9, 7, 7]", "assert maximum([118, -119, 17, 4, 1, 1, -7], 2) == [17, 118]", "assert maximum([-1, -2, 3], 3) == [-2, -1, 3]", "assert maximum([8, -2, 4], 3) == [-2, 4, 8]", "assert maximum([-1, 3, 4, 7, 2, -3, 6], 1) == [7]", "assert maximum([-14, 6], 4) == [-14, 6]", "assert maximum([122, -124, 25, 1, 1, 1, -2], 2) == [25, 122]", "assert maximum([1, 1, 2, -2], 2) == [1, 2]", "assert maximum([3, 15, 5, 4, -16, -10, 4], 11) == [-16, -10, 3, 4, 4, 5, 15]", "assert maximum([8, -6], 7) == [-6, 8]", "assert maximum([-12, 8], 2) == [-12, 8]", "assert maximum([10, 16, 5, 2, -12, -3, 1], 7) == [-12, -3, 1, 2, 5, 10, 16]", "assert maximum([-119, 16, 5, 2, 3, -6], 8) == [-119, -6, 2, 3, 5, 16]", "assert maximum([5, 1, 4], 2) == [4, 5]", "assert maximum([-1, 2, 1, 5, 6, -13], 2) == [5, 6]", "assert maximum([-13, 13], 7) == [-13, 13]", "assert maximum([-1, 0, 2, 5, 3, -10], 2) == [3, 5]", "assert maximum([4, -6, 8], 4) == [-6, 4, 8]", "assert maximum([-2, 1, 1], 1) == [1]", "assert maximum([2, 1], 1) == [2]", "assert maximum([128, -128, 22, 2, 3, 1, -5], 6) == [-5, 1, 2, 3, 22, 128]", "assert maximum([-120, 20, 2, 5, 1, -6], 7) == [-120, -6, 1, 2, 5, 20]", "assert maximum([-5, 10], 6) == [-5, 10]", "assert maximum([-1, 4, 7, 3, 8, -9], 7) == [-9, -1, 3, 4, 7, 8]", "assert maximum([4, 3, 4, -20, 247, -400, 4], 4) == [4, 4, 4, 247]", "assert maximum([-3, 1, 2], 4) == [-3, 1, 2]", "assert maximum([-1, 2, 1, 2, -5, -5, 2], 3) == [2, 2, 2]", "assert maximum([2, 13, 4, 6, -17, -3, 1], 7) == [-17, -3, 1, 2, 4, 6, 13]", "assert maximum([-5, -6, 10], 1) == [10]", "assert maximum([10, 12, 2, 1, -17, -3, 5], 4) == [2, 5, 10, 12]", "assert maximum([119, -118, 15, 3, 3, 3, -8], 1) == [119]", "assert maximum([2, -9], 4) == [-9, 2]", "assert maximum([-9, 13], 3) == [-9, 13]", "assert maximum([6, 0, 5], 4) == [0, 5, 6]", "assert maximum([123, -128, 20, 4, 3, 2, 1], 6) == [1, 2, 3, 4, 20, 123]", "assert maximum([5, 3, 2, -9], 5) == [-9, 2, 3, 5]", "assert maximum([4, -9], 4) == [-9, 4]", "assert maximum([1, 2, 3, -23, 243, -400, 0], 0) == []", "assert maximum([4, -4], 2) == [-4, 4]", "assert maximum([3, 2, 1, -9], 6) == [-9, 1, 2, 3]", "assert maximum([1, 0, 5, -7], 1) == [5]", "assert maximum([6, 0, 8], 2) == [6, 8]", "assert maximum([0, -5, 10], 1) == [10]", "assert maximum([-5, 3, 2, 8, 3, -10], 1) == [8]", "assert maximum([6, 1, 3, -4], 6) == [-4, 1, 3, 6]", "assert maximum([119, -119, 24, 5, 5, 7, -4], 6) == [-4, 5, 5, 7, 24, 119]", "assert maximum([6, 5, 2, -10], 5) == [-10, 2, 5, 6]", "assert maximum([3, 13, 3, 4, -9, -11, 3], 2) == [4, 13]", "assert maximum([1, 1], 4) == [1, 1]", "assert maximum([8, -4], 7) == [-4, 8]", "assert maximum([9, -9], 1) == [9]", "assert maximum([0, 3, 6, 2, -1, 3, 4], 4) == [3, 3, 4, 6]", "assert maximum([8, 1, 2], 4) == [1, 2, 8]", "assert maximum([-2, 2, 5, 2, 0, 2, 2], 4) == [2, 2, 2, 5]", "assert maximum([6, -1], 5) == [-1, 6]", "assert maximum([2, 2, 10, -3], 1) == [10]", "assert maximum([3, 19, 4, 5, -13, -8, 5], 4) == [4, 5, 5, 19]", "assert maximum([-4, 6, 4, 2, 4, -6, 5], 4) == [4, 4, 5, 6]", "assert maximum([6, 5, 1, -19, 242, -403, 5], 3) == [5, 6, 242]", "assert maximum([-3, 6, 3, 1, 0, -4, 6], 5) == [0, 1, 3, 6, 6]", "assert maximum([1, 3, 3, 2, -2, -5, 5], 2) == [3, 5]", "assert maximum([127, -124, 16, 1, 5, 7, -6], 7) == [-124, -6, 1, 5, 7, 16, 127]", "assert maximum([-7, 10], 7) == [-7, 10]", "assert maximum([7, 12, 4, 4, -16, -7, 3], 10) == [-16, -7, 3, 4, 4, 7, 12]", "assert maximum([5, 2, 5, -11], 5) == [-11, 2, 5, 5]", "assert maximum([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]", "assert maximum([6, 7, 8, -20, 243, -398, 5], 3) == [7, 8, 243]", "assert maximum([-10, 10], 3) == [-10, 10]", "assert maximum([4, 5, 8, -28, 245, -402, 2], 4) == [4, 5, 8, 245]", "assert maximum([125, -119, 24, 2, 3, 4, -4], 6) == [-4, 2, 3, 4, 24, 125]", "assert maximum([1, -6], 1) == [1]", "assert maximum([3, 1, 1, -19, 248, -404, 5], 1) == [248]", "assert maximum([1, 4, 4, -9], 3) == [1, 4, 4]", "assert maximum([-122, 16, 1, 4, 2, 1], 6) == [-122, 1, 1, 2, 4, 16]", "assert maximum([0, 1, 2, 5, 1, -9], 2) == [2, 5]", "assert maximum([3, 6, 2, -19, 243, -396, 4], 1) == [243]", "assert maximum([-1, 0, 2], 1) == [2]", "assert maximum([-120, 25, 1, 5, 6, -3], 7) == [-120, -3, 1, 5, 6, 25]", "assert maximum([-126, 22, 2, 2, 5, -3], 3) == [2, 5, 22]", "assert maximum([1, -4, 2], 7) == [-4, 1, 2]", "assert maximum([3, 1, 2, 7, 8, -11], 5) == [1, 2, 3, 7, 8]", "assert maximum([-6, 7], 2) == [-6, 7]", "assert maximum([3, 6, 4, -26, 246, -403, 5], 5) == [3, 4, 5, 6, 246]", "assert maximum([-2, -7, 4], 4) == [-7, -2, 4]", "assert maximum([4, 3, 4, 5, 1, -10], 1) == [5]", "assert maximum([128, -127, 25, 1, 3, 2, -8], 5) == [1, 2, 3, 25, 128]", "assert maximum([127, -127, 21, 5, 3, 3, -2], 8) == [-127, -2, 3, 3, 5, 21, 127]", "assert maximum([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]", "assert maximum([-7, 1, 4], 5) == [-7, 1, 4]", "assert maximum([-7, -8, 6], 1) == [6]", "assert maximum([7, 20, 1, 4, -9, -13, 1], 4) == [1, 4, 7, 20]", "assert maximum([123, -121, 22, 4, 2, 2, -6], 1) == [123]", "assert maximum([5, 3, 5, -6], 3) == [3, 5, 5]", "assert maximum([-121, 15, 3, 4, 7, -5], 3) == [4, 7, 15]", "assert maximum([-13, 11], 2) == [-13, 11]", "assert maximum([-125, 18, 3, 1, 5, -1], 1) == [18]", "assert maximum([9, -3, 1], 3) == [-3, 1, 9]", "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]", "assert maximum([-1, 2, 1, 1, 1, -5], 1) == [2]", "assert maximum([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]", "assert maximum([-2, 7, 4, 5, 0, 0, 4], 3) == [4, 5, 7]", "assert maximum([-4, 4, 2, 10, 2, -5], 5) == [-4, 2, 2, 4, 10]", "assert maximum([1, 4, 4, 1, 2, -14], 5) == [1, 1, 2, 4, 4]", "assert maximum([-123, 19, 4, 5, 6, -2], 3) == [5, 6, 19]"], "nl": "\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    ", "func": "def maximum(arr, k):", "examples": "Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    ", "repair_prompt": ["def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum numbers in arr. You need to ensure this list contains exactly the k largest numbers from the array.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''"], "completions": ["from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"Find the k largest elements in an array and return them sorted.\n\n    Args:\n        arr: List of integers from which to find the k largest elements.\n        k: Integer representing the number of largest elements to return.\n\n    Returns:\n        A sorted list of the k largest integers from arr.\n    \"\"\"\n    # Use heapq.nlargest to find the k largest elements\n    k_largest_elements = heapq.nlargest(k, arr)\n    \n    # Sort the k largest elements\n    k_largest_elements.sort()\n    \n    return k_largest_elements\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"Find the k largest elements in an array and return them sorted.\n\n    Args:\n        arr (List[int]): The input array of integers.\n        k (int): The number of maximum elements to return.\n\n    Returns:\n        List[int]: A sorted list of the k largest elements in the array.\n                   If k is 0, returns an empty list.\n                   If k exceeds the length of the array, returns the entire sorted array.\n    \"\"\"\n    # Handle edge case where k is 0\n    if k == 0:\n        return []\n\n    # Handle case where k exceeds the length of the array\n    if k >= len(arr):\n        return sorted(arr)\n\n    # Use heapq.nlargest to find the k largest elements\n    k_largest_elements = heapq.nlargest(k, arr)\n\n    # Return the sorted list of k largest elements\n    return sorted(k_largest_elements)\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"Return a sorted list of the k largest integers from the input list.\n\n    Args:\n        arr (List[int]): A list of integers from which to find the k largest elements.\n        k (int): The number of largest elements to return.\n\n    Returns:\n        List[int]: A sorted list of the k largest integers from the input list.\n                   If k is 0, returns an empty list.\n                   If k is greater than the length of arr, returns the entire sorted array.\n    \"\"\"\n    if k <= 0:\n        return []\n    if k >= len(arr):\n        return sorted(arr)\n    return sorted(heapq.nlargest(k, arr))\n\n# Example usage:\n# result = maximum([3, 1, 5, 7, 9], 3)\n# print(result)  # Output: [5, 7, 9]\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum numbers in arr.\n    \n    Args:\n        arr: List of integers.\n        k: Integer, number of maximum elements to return.\n        \n    Returns:\n        Sorted list of k largest integers from arr.\n    \"\"\"\n    if k == 0 or not arr:\n        return []\n    \n    # Use heapq.nlargest to find the k largest elements\n    k_largest_elements = heapq.nlargest(k, arr)\n    \n    # Sort the k largest elements before returning\n    k_largest_elements.sort()\n    \n    return k_largest_elements\n", "from typing import List\n## main.py\n\nimport heapq\n\ndef maximum(arr: list[int], k: int) -> list[int]:\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum numbers in arr.\n\n    Parameters:\n    arr (list[int]): A list of integers from which to find the k largest numbers.\n    k (int): The number of largest elements to return.\n\n    Returns:\n    list[int]: A sorted list of the k largest integers from the array.\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"Input array must be a list of integers.\")\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError(\"k must be a positive integer.\")\n    if k > len(arr):\n        raise ValueError(\"k cannot be greater than the length of the array.\")\n\n    # Retrieve the k largest elements using heapq.nlargest\n    k_largest_elements = heapq.nlargest(k, arr)\n\n    # Sort the k largest elements in ascending order\n    sorted_k_largest_elements = sorted(k_largest_elements)\n\n    return sorted_k_largest_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport heapq\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum numbers in arr.\n\n    Parameters:\n    arr (List[int]): The input array of integers.\n    k (int): The number of maximum elements to return.\n\n    Returns:\n    List[int]: A sorted list of the k largest elements from arr.\n    \"\"\"\n    # Handle edge cases\n    if k <= 0:\n        return []\n    if k > len(arr):\n        k = len(arr)\n    \n    # Use heapq.nlargest to find the k largest elements\n    k_largest_elements = heapq.nlargest(k, arr)\n    \n    # Sort the k largest elements before returning\n    return sorted(k_largest_elements)\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum numbers in arr.\n    If k is 0, return an empty list. If k is equal to the length of the array, return the entire sorted array.\n\n    Parameters:\n    arr (List[int]): A list of integers.\n    k (int): A positive integer indicating the number of largest elements to return.\n\n    Returns:\n    List[int]: A sorted list of the k largest integers from the array.\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n    \n    if k == 0:\n        return []\n    \n    if k >= len(arr):\n        return sorted(arr, reverse=True)\n    \n    # Use heapq.nlargest to find the k largest elements\n    k_largest_elements = heapq.nlargest(k, arr)\n    \n    # Sort the k largest elements before returning\n    return sorted(k_largest_elements, reverse=True)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport heapq\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum numbers in arr.\n\n    Parameters:\n    arr (List[int]): A list of integers.\n    k (int): A positive integer indicating the number of maximum elements to return.\n\n    Returns:\n    List[int]: A sorted list of the k largest integers from arr.\n    \"\"\"\n    # Handle edge cases\n    if k == 0:\n        return []\n    if k >= len(arr):\n        return sorted(arr)\n\n    # Use heapq.nlargest to find the k largest elements\n    largest_elements = heapq.nlargest(k, arr)\n\n    # Sort the result in ascending order\n    largest_elements.sort()\n\n    return largest_elements\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum numbers in arr.\n\n    This function uses the heapq.nlargest method to efficiently find the k largest elements in the array.\n    The resulting list is then sorted in ascending order before being returned.\n\n    Args:\n        arr (List[int]): A list of integers.\n        k (int): A positive integer indicating the number of largest elements to return.\n\n    Returns:\n        List[int]: A sorted list of the k largest integers from arr.\n    \"\"\"\n    if k <= 0:\n        return []\n\n    # Find the k largest elements using heapq.nlargest\n    largest_elements = heapq.nlargest(k, arr)\n\n    # Sort the k largest elements in ascending order\n    largest_elements.sort()\n\n    return largest_elements\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum numbers in arr.\n\n    Args:\n        arr: List of integers.\n        k: Integer, number of maximum elements to return.\n\n    Returns:\n        Sorted list of k largest integers from arr.\n    \"\"\"\n    if k <= 0:\n        return []\n    \n    # Use heapq.nlargest to find the k largest elements\n    k_largest = heapq.nlargest(k, arr)\n    \n    # Sort the k largest elements\n    k_largest_sorted = sorted(k_largest)\n    \n    return k_largest_sorted\n"], "plans": ["requirement analysis:\nThe function should efficiently return the k largest elements from an array, sorted in ascending order. It must handle edge cases such as k being zero or equal to the length of the array. Performance is crucial, especially for larger arrays, and the function should be easy to understand and integrate.\nrequirement pool:\n- The function must return a sorted list of the k largest numbers.\n- The function should handle edge cases like k=0 or k=len(arr).\n- Optimize the function for performance with large arrays.\n- Ensure the function is easy to read and maintain.\n- Consider using built-in functions for efficiency.\nWe will use Python's built-in heapq library, specifically the nlargest function, to efficiently find the k largest elements in the array. This approach is optimal for performance and simplicity, as heapq is designed for such operations. The function will then sort the result to meet the requirement of returning a sorted list. This method ensures the function is both efficient and easy to integrate into existing projects.\n", "requirement analysis:\nThe function should efficiently sort and return the k largest elements from the array, ensuring it handles edge cases and performs well with large input sizes.\nrequirement pool:\n- Implement the main sorting function to return k largest elements\n- Optimize performance for large arrays\n- Handle edge cases like empty arrays or k=0\n- Ensure output is sorted\n- Provide clear documentation and examples\nWe will use Python's built-in 'heapq' library to efficiently find the k largest elements in the array. This approach is optimal for performance as it leverages a heap data structure, which is well-suited for this type of problem. We will handle edge cases such as when k=0 or when k exceeds the length of the array by returning an empty list or the entire sorted array, respectively.\n", "requirement analysis:\nThe function should efficiently return the k largest elements from an array, sorted in ascending order. It must handle edge cases such as k being zero or equal to the length of the array. Performance is crucial, especially for larger arrays, and the function should be easy to integrate into other projects.\nrequirement pool:\n- Implement the main function to find k largest elements\n- Optimize the function for performance with large arrays\n- Ensure the function handles edge cases gracefully\n- Write comprehensive tests for various scenarios\n- Document the function usage and edge cases\nWe will use Python's built-in heapq module, which is efficient for finding the k largest elements in an array. This approach is both performant and easy to integrate into larger projects. The function will handle edge cases such as k being zero or greater than the length of the array by returning an empty list or the entire sorted array, respectively.\n", "requirement analysis:\nThe function should efficiently find the k largest elements in the array and return them sorted. It must handle edge cases such as when k is 0 or when the array is empty. The function should be optimized for performance, especially when dealing with large arrays.\nrequirement pool:\n- Implement the main function to find k largest elements\n- Ensure the output is sorted\n- Optimize for performance with large arrays\n- Handle edge cases like k=0 or empty arrays\n- Test the function with various input scenarios\nWe will use the `heapq.nlargest` function from Python's standard library, which is efficient for finding the top k largest elements in an array. This function is well-suited for our needs as it provides a good balance between efficiency and ease of use. After obtaining the k largest elements, we will sort them to meet the requirement of returning a sorted list. We will also handle edge cases such as when k is 0 or when the array is empty.\n", "requirement analysis:\nThe function should efficiently return the k largest numbers from an array, sorted in ascending order. It must handle edge cases such as arrays with duplicate numbers and ensure performance is maintained with larger datasets.\nrequirement pool:\n- Implement the function to return k largest numbers sorted.\n- Ensure the function handles edge cases like duplicates.\n- Optimize the function for performance with large arrays.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify function correctness.\nWe will use Python's heapq library, specifically the nlargest function, which is efficient for retrieving the k largest elements from a list. This approach is both efficient and simple, making it suitable for handling large datasets and arrays with duplicate numbers. The function will then sort the result in ascending order before returning it.\n", "requirement analysis:\nThe function should efficiently return the k largest elements from the array, sorted in ascending order. It must handle edge cases such as k being zero or equal to the length of the array. Performance is crucial, especially for larger arrays.\nrequirement pool:\n- Implement the main function to return k largest elements sorted\n- Optimize the function for performance with large arrays\n- Ensure the function handles edge cases like k=0 or k=len(arr)\n- Write comprehensive test cases for various scenarios\n- Document the function usage and edge cases\nWe will use Python's heapq module to efficiently find the k largest elements in the array. This approach is optimal for performance and simplicity, as heapq provides a function specifically for this purpose. We will then sort the resulting list to meet the requirement of returning the elements in ascending order.\n", "requirement analysis:\nThe function should efficiently return the k largest numbers from an array, sorted in ascending order. It must handle edge cases such as arrays with duplicate numbers and ensure performance is maintained with larger arrays. The function should be easy to use and integrate into existing codebases.\nrequirement pool:\n- The function must return a sorted list of the k largest numbers.\n- The function should handle arrays with duplicate numbers correctly.\n- The function should be optimized for performance with large arrays.\n- The function should include clear documentation and examples.\n- The function should be easy to integrate into existing projects.\nWe will use Python's heapq library, specifically the nlargest function, which is efficient for retrieving the k largest elements from an array. This approach is both efficient and simple to implement, making it suitable for large datasets. The function will handle edge cases such as when k is 0 by returning an empty list, and when k is equal to the length of the array by returning the entire sorted array.\n", "requirement analysis:\nThe function should efficiently return the k largest elements from the array, sorted in ascending order. It must handle edge cases such as k being zero or equal to the length of the array. Performance is crucial, especially for larger arrays, so the implementation should be optimized for speed and memory usage.\nrequirement pool:\n- Implement the function to return k largest elements sorted.\n- Optimize the function for performance with large arrays.\n- Ensure the function handles edge cases correctly.\n- Maintain code readability and simplicity.\n- Provide comprehensive test cases for validation.\nWe will use Python's built-in heapq library, specifically the nlargest function, which is efficient for finding the top k elements in an array. This approach is optimal for performance and simplicity, as it directly addresses the requirement to return the k largest elements sorted in ascending order. The function will handle edge cases such as k being zero or equal to the length of the array.\n", "requirement analysis:\nThe function should efficiently return the k largest elements from the array, sorted in ascending order. It must handle edge cases such as k being zero or equal to the length of the array. Performance is crucial, especially for larger arrays, and the function should be easy to understand and integrate.\nrequirement pool:\n- Implement the main function to return k largest elements\n- Optimize the function for performance with large arrays\n- Ensure the function handles edge cases correctly\n- Provide clear documentation and examples\n- Write unit tests to validate function behavior\nWe will use Python's heapq module, which is efficient for finding the largest elements in a list. This approach will ensure high performance and simplicity, making it easy to integrate into existing projects. The function will handle edge cases such as k being zero or equal to the length of the array. The output will be sorted in ascending order as required.\n", "requirement analysis:\nThe function should efficiently return the k largest elements from an array, sorted in ascending order. It must handle edge cases such as k being zero or equal to the length of the array. Performance is crucial, especially for larger arrays, and the solution should be simple and easy to integrate.\nrequirement pool:\n- Implement the function to return k largest elements.\n- Ensure the function handles edge cases correctly.\n- Optimize the function for performance with large arrays.\n- Maintain code readability and simplicity.\n- Provide comprehensive test cases for validation.\nWe will use Python's built-in 'heapq.nlargest' function, which is efficient for finding the top k elements in an array. This approach is optimal for performance and simplicity, as it avoids the overhead of additional libraries while providing a straightforward solution. The function will handle edge cases such as k being zero or equal to the length of the array.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 0.6972, 1.0, 0.2113, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, false, true, false, true, true, true], "pass_test_cases_num": [142, 142, 142, 142, 99, 142, 30, 142, 142, 142], "completion": "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum numbers in arr.\n\n    Args:\n        arr: List of integers.\n        k: Integer, number of maximum elements to return.\n\n    Returns:\n        Sorted list of k largest integers from arr.\n    \"\"\"\n    if k <= 0:\n        return []\n    \n    # Use heapq.nlargest to find the k largest elements\n    k_largest = heapq.nlargest(k, arr)\n    \n    # Sort the k largest elements\n    k_largest_sorted = sorted(k_largest)\n    \n    return k_largest_sorted\n", "passed": true, "pass": true, "pass_num": 8, "round": 170, "mutate_method": "expand_one2two", "parent_index": 168}
