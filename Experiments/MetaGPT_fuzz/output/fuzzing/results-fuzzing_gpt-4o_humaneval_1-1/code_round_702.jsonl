{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a string of numbers from 'zero' to 'nine', separated by spaces. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Provide the string with digits arranged in ascending order.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a string of numbers from 'zero' to 'nine', separated by spaces. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Provide the string with digits arranged in ascending order.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Takes a string of number words and returns a string with the words sorted in ascending order.\n    \n    Parameters:\n    numbers (str): A string containing number words separated by spaces.\n    \n    Returns:\n    str: A string with the number words sorted in ascending order.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    number_word_to_value = {\n        \"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4,\n        \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9,\n        \"ten\": 10\n    }\n    \n    # Mapping of numeric values back to their corresponding number words\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert number words to their numeric values, ignoring invalid words\n    numeric_values = []\n    for word in words:\n        if word in number_word_to_value:\n            numeric_values.append(number_word_to_value[word])\n    \n    # Sort the numeric values\n    numeric_values.sort()\n    \n    # Convert sorted numeric values back to number words\n    sorted_words = [value_to_number_word[value] for value in numeric_values]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of number words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string with the number words sorted in ascending order.\n             Returns an error message if input contains invalid words.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    number_word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of numeric values back to number words\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Convert words to their corresponding numeric values\n    try:\n        numeric_values = [number_word_to_value[word] for word in words]\n    except KeyError:\n        return \"Error: Input contains invalid number words.\"\n\n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n\n    # Convert sorted numeric values back to number words\n    sorted_words = [value_to_number_word[value] for value in sorted_numeric_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of number words in ascending order.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string of number words sorted in ascending order.\n             Returns an error message if input is invalid.\n\n    Example:\n        'three one five' -> 'one three five'\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    number_word_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from numbers to words\n    number_to_word_map = {v: k for k, v in number_word_map.items()}\n\n    # Split the input string into words\n    words = numbers.split()\n\n    # Check for invalid inputs\n    if not words:\n        return \"Error: Input string is empty.\"\n    \n    # Convert words to numbers, handling invalid words\n    try:\n        numeric_values = [number_word_map[word] for word in words]\n    except KeyError as e:\n        return f\"Error: Invalid number word '{e.args[0]}' found.\"\n\n    # Sort the numeric values\n    numeric_values.sort()\n\n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word_map[num] for num in numeric_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_input = \"three one five\"\n    print(sort_numbers(example_input))  # Output: 'one three five'\n", "from typing import List\n## main.py\n\nfrom typing import Dict, List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of number words in ascending order.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string of number words sorted in ascending order or an error message for invalid inputs.\n    \"\"\"\n    # Mapping of number words to their numeric values\n    number_map: Dict[str, int] = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping of numeric values to number words\n    reverse_map: Dict[int, str] = {v: k for k, v in number_map.items()}\n    \n    # Split the input string into words\n    words: List[str] = numbers.split()\n    \n    # Validate and map words to numbers\n    try:\n        number_list: List[int] = [number_map[word] for word in words]\n    except KeyError:\n        return 'Error: Invalid input. Please use number words from zero to nine.'\n    \n    # Sort the numbers\n    number_list.sort()\n    \n    # Map back to words\n    sorted_words: List[str] = [reverse_map[num] for num in number_list]\n    \n    # Join and return the sorted words\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of number words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string with the number words sorted in ascending order.\n             Returns an empty string for invalid inputs.\n\n    Example:\n        sort_numbers('three one five') -> 'one three five'\n    \"\"\"\n    # Mapping of number words to their numeric values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of numeric values back to their word representations\n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Validate input and map words to numbers\n    try:\n        numeric_values = [word_to_number[word] for word in words]\n    except KeyError:\n        # Return an empty string if any word is invalid\n        return \"\"\n\n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n\n    # Map sorted numbers back to words\n    sorted_words = [number_to_word[number] for number in sorted_numeric_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a string of number words in ascending order.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string of the number words sorted in ascending order.\n    \"\"\"\n    # Dictionary to map number words to their numeric values\n    word_to_number = {\n        \"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4,\n        \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9\n    }\n    \n    # Dictionary to map numeric values back to number words\n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Convert words to numbers, ignoring invalid words\n    numeric_values = []\n    for word in words:\n        if word in word_to_number:\n            numeric_values.append(word_to_number[word])\n\n    # Sort the numeric values\n    numeric_values.sort()\n\n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word[num] for num in numeric_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of number words in ascending order.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string of number words sorted in ascending order.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    number_word_map = {\n        \"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4,\n        \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9,\n        \"ten\": 10, \"eleven\": 11, \"twelve\": 12, \"thirteen\": 13,\n        \"fourteen\": 14, \"fifteen\": 15, \"sixteen\": 16, \"seventeen\": 17,\n        \"eighteen\": 18, \"nineteen\": 19, \"twenty\": 20\n    }\n\n    # Reverse mapping from numeric values to number words\n    number_value_map = {v: k for k, v in number_word_map.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Convert valid number words to their numeric values, ignoring invalid words\n    numeric_values = []\n    for word in words:\n        if word in number_word_map:\n            numeric_values.append(number_word_map[word])\n\n    # Sort the numeric values\n    numeric_values.sort()\n\n    # Convert sorted numeric values back to number words\n    sorted_words = [number_value_map[value] for value in numeric_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of number words in ascending order.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string of number words sorted in ascending order or an error message for invalid input.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    number_word_to_digit = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from numeric values to number words\n    digit_to_number_word = {v: k for k, v in number_word_to_digit.items()}\n    \n    def is_valid_number_word(word: str) -> bool:\n        \"\"\"Checks if a word is a valid number word.\"\"\"\n        return word in number_word_to_digit\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Validate each word in the input\n    if not all(is_valid_number_word(word) for word in words):\n        return 'Error: Invalid input detected.'\n    \n    # Map words to digits, sort them, and map back to words\n    sorted_digits = sorted(number_word_to_digit[word] for word in words)\n    sorted_words = [digit_to_number_word[digit] for digit in sorted_digits]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\nfrom typing import Dict, List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a string of number words in ascending order.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string of number words sorted in ascending order or an error message for invalid input.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    number_map: Dict[str, int] = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from numeric values back to number words\n    reverse_map: Dict[int, str] = {v: k for k, v in number_map.items()}\n    \n    # Split the input string into individual words\n    words: List[str] = numbers.split()\n    \n    # Filter out valid number words\n    valid_words: List[str] = [word for word in words if word in number_map]\n    \n    # Check if all words are valid\n    if len(valid_words) != len(words):\n        return 'Invalid input: contains words outside the valid range.'\n    \n    # Map words to their numeric values\n    sorted_numbers: List[int] = sorted(number_map[word] for word in valid_words)\n    \n    # Map sorted numeric values back to words\n    sorted_words: List[str] = [reverse_map[num] for num in sorted_numbers]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of number words and returns them in sorted order.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string of sorted number words or an error message for invalid input.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    number_word_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from numbers to words for output\n    number_to_word_map = {v: k for k, v in number_word_map.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Check for empty input\n    if not words:\n        return \"Error: Input string is empty.\"\n\n    # Convert words to numbers, handling invalid inputs\n    try:\n        numeric_values = [number_word_map[word] for word in words]\n    except KeyError as e:\n        return f\"Error: Invalid input '{e.args[0]}' not recognized as a number word.\"\n\n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n\n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word_map[num] for num in sorted_numeric_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n"], "plans": ["requirement analysis:\nThe function should take a string of number words, validate the input, and return a sorted string. It should handle edge cases like empty strings and invalid inputs gracefully. The implementation should be efficient and easy to maintain.\nrequirement pool:\n- Implement the main sorting function for number words.\n- Handle edge cases such as empty strings and invalid inputs.\n- Optimize the function for performance.\n- Ensure the code is easy to maintain and extend.\n- Provide comprehensive documentation and examples.\nWe will implement a function that maps number words to their corresponding numeric values, sorts them, and then maps them back to words. We will use a dictionary for the mapping and handle edge cases such as empty strings and invalid inputs by ignoring non-number words.\n", "requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine' in ascending order. It must handle various input scenarios, including empty strings and invalid inputs, without errors. Performance optimization is crucial to ensure quick processing.\nrequirement pool:\n- Implement the main sorting algorithm for number words.\n- Handle edge cases like empty strings and invalid inputs.\n- Optimize performance for large input sizes.\n- Provide clear documentation for users.\n- Enhance user experience with intuitive error messages.\nWe will implement a function that maps number words to their corresponding numeric values, sorts them, and then maps them back to words. We will use a dictionary for mapping and handle edge cases like empty strings or invalid inputs by returning an appropriate message. The function will be optimized for performance using Python's built-in sorting capabilities.\n", "requirement analysis:\nThe function should take a string of number words and return them sorted in ascending order. It must handle valid inputs efficiently and provide meaningful error messages for invalid inputs. The focus is on accuracy, speed, and user-friendly error handling.\nrequirement pool:\n- Implement the main sorting logic for number words.\n- Handle edge cases such as empty strings or invalid inputs.\n- Optimize the function for performance with large inputs.\n- Provide detailed error messages for invalid inputs.\n- Ensure the function is easy to integrate into larger systems.\nWe will implement a function that maps number words to their corresponding numeric values, sorts them, and then maps them back to words. We'll use a dictionary for the mapping and handle edge cases such as empty strings or invalid inputs by returning an appropriate error message.\n", "requirement analysis:\nThe function should take a string of number words and return them sorted in ascending order. It must handle valid inputs efficiently and provide meaningful feedback for invalid inputs.\nrequirement pool:\n- Implement the main sorting logic for number words.\n- Handle edge cases such as empty strings or invalid inputs.\n- Optimize the function for performance with large inputs.\n- Provide detailed error messages for invalid inputs.\n- Ensure compatibility with various input formats.\nWe will implement a function that maps number words to their corresponding numeric values, sort them, and then map them back to words. We will use a dictionary for mapping and handle edge cases by checking for valid inputs. The function will return an error message for invalid inputs and handle empty strings gracefully.\n", "requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine' in ascending order. It must handle edge cases such as empty strings or invalid inputs gracefully, ensuring a seamless user experience. Performance optimization is crucial for handling large inputs efficiently.\nrequirement pool:\n- Implement sorting logic for number words\n- Handle edge cases like empty or invalid inputs\n- Optimize performance for large inputs\n- Ensure compatibility with different input formats\n- Provide clear error messages for invalid inputs\nWe will implement a function that maps the number words to their corresponding numeric values, sort these numeric values, and then map them back to their word representations. We will handle edge cases such as empty strings or invalid inputs by returning an appropriate message or an empty string. The function will be optimized for performance by using efficient sorting algorithms and will utilize Python's built-in capabilities for handling strings and lists.\n", "requirement analysis:\nThe requirement is to develop a function that takes a string of number words and returns them sorted in ascending order. The function should handle valid inputs efficiently and provide accurate results. Consideration for edge cases such as empty strings or invalid inputs is necessary.\nrequirement pool:\n- Implement the main sorting function for number words.\n- Handle edge cases such as empty strings or invalid inputs.\n- Optimize the function for performance.\n- Provide user feedback for invalid inputs.\n- Ensure the function is easy to integrate into larger systems.\nWe will implement a function that maps number words to their corresponding numeric values, sorts them, and then maps them back to words. We will use a dictionary for the mapping and handle edge cases by ignoring invalid inputs and returning an empty string for empty inputs.\n", "requirement analysis:\nThe function should take a string of number words and return them sorted in ascending order. It must handle all valid inputs efficiently and provide clear documentation for users.\nrequirement pool:\n- Implement the sorting algorithm for number words.\n- Ensure the function handles edge cases and invalid inputs gracefully.\n- Optimize the function for performance.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify functionality.\nWe will implement a function that maps number words to their corresponding numeric values, sorts them, and then maps them back to words. We will use Python's built-in sorting capabilities for efficiency. The function will handle invalid inputs by ignoring them and only processing valid number words.\n", "requirement analysis:\nThe function should take a string of number words and return them sorted in ascending order. It must handle valid inputs efficiently and provide meaningful error messages for invalid inputs. The focus should be on performance and user experience.\nrequirement pool:\n- Implement the main sorting logic for number words.\n- Handle edge cases such as empty strings or invalid inputs.\n- Optimize the function for performance with large inputs.\n- Provide detailed error messages for invalid inputs.\n- Ensure the function is easy to integrate into larger systems.\nWe will implement a function that maps number words to their corresponding numeric values, sorts them, and then maps them back to words. We'll use a dictionary for efficient mapping and sorting. The function will handle edge cases by checking for valid inputs and returning an error message for invalid inputs. We'll optimize the function for performance by using Python's built-in sorting capabilities.\n", "requirement analysis:\nThe function should take a string of number words and return them sorted in ascending order. It must handle valid inputs efficiently and provide meaningful feedback for invalid inputs.\nrequirement pool:\n- Implement the main sorting logic for number words.\n- Handle edge cases such as empty strings or invalid inputs.\n- Optimize the function for performance with large inputs.\n- Provide user feedback for invalid inputs.\n- Ensure the function is easy to integrate into larger systems.\nWe will implement a function that maps number words to their corresponding numeric values, sort them, and then map them back to words. We will use a dictionary for mapping and handle edge cases such as empty strings or invalid inputs by returning an appropriate message. The function will be optimized for performance by using efficient sorting algorithms and will provide feedback for invalid inputs.\n", "requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine' in ascending order. It must handle edge cases such as empty strings and invalid inputs gracefully, ensuring a seamless user experience. Performance optimization is crucial for quick processing.\nrequirement pool:\n- Implement sorting logic for number words\n- Handle edge cases like empty strings\n- Optimize performance for quick execution\n- Provide error messages for invalid inputs\n- Ensure compatibility with various input formats\nWe will implement a function that maps number words to their corresponding numeric values, sorts them, and then maps them back to words. We'll use a dictionary for mapping and handle edge cases like empty strings and invalid inputs by returning appropriate error messages. The function will be optimized for quick execution using Python's built-in sorting capabilities.\n"], "scores": [1.0, 1.0, 0.9917, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9917], "pass_results": [true, true, false, true, true, true, true, true, true, false], "pass_test_cases_num": [121, 121, 120, 121, 121, 121, 121, 121, 121, 120], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of number words and returns them in sorted order.\n\n    Args:\n        numbers (str): A string of number words separated by spaces.\n\n    Returns:\n        str: A string of sorted number words or an error message for invalid input.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    number_word_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from numbers to words for output\n    number_to_word_map = {v: k for k, v in number_word_map.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Check for empty input\n    if not words:\n        return \"Error: Input string is empty.\"\n\n    # Convert words to numbers, handling invalid inputs\n    try:\n        numeric_values = [number_word_map[word] for word in words]\n    except KeyError as e:\n        return f\"Error: Invalid input '{e.args[0]}' not recognized as a number word.\"\n\n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n\n    # Convert sorted numbers back to words\n    sorted_words = [number_to_word_map[num] for num in sorted_numeric_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n", "passed": true, "pass": true, "pass_num": 8, "round": 702, "mutate_method": "rephrase_one", "parent_index": 319}
