{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input and returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": ["def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 2, 9, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, -2, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 1, -2, 2]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, -1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 5, -3, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 3, -4, 5]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 6, -7, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 6, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 1, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, 8, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 7, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 10, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 1, 8]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 7, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 7, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 5, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 5, 0]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, -4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 1, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 8, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 12]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 2, 6, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 3, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 4, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 7, 3, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 7, 8, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, -2, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, 10, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 8, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, 1, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 0, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 3, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 3, 6, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "test_case_list": ["assert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "assert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "assert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "assert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([4, 2, 9, 3]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "assert pairs_sum_to_zero([3]) == False", "assert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "assert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "assert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "assert pairs_sum_to_zero([2, 8, -2, 3]) == True", "assert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "assert pairs_sum_to_zero([3, 1, -2, 2]) == True", "assert pairs_sum_to_zero([3, 2, -1, 2]) == False", "assert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([6, 5, -3, 3]) == True", "assert pairs_sum_to_zero([4, 3, -4, 5]) == True", "assert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "assert pairs_sum_to_zero([2, 6, -4, 5]) == False", "assert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "assert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "assert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "assert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "assert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "assert pairs_sum_to_zero([6, 6, -7, 6]) == False", "assert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "assert pairs_sum_to_zero([1, 6, 1, 2]) == False", "assert pairs_sum_to_zero([5, 1, 3, 5]) == False", "assert pairs_sum_to_zero([4, 5, 8, 3]) == False", "assert pairs_sum_to_zero([6, 7, 2, 5]) == False", "assert pairs_sum_to_zero([2, 8, 10, 3]) == False", "assert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "assert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "assert pairs_sum_to_zero([2, 3, 1, 8]) == False", "assert pairs_sum_to_zero([1, 7, 4, 6]) == False", "assert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "assert pairs_sum_to_zero([4, 6, 2, 4]) == False", "assert pairs_sum_to_zero([5, 2, 1, 11]) == False", "assert pairs_sum_to_zero([5, 2, 7, 3]) == False", "assert pairs_sum_to_zero([5, 5, 2, 2]) == False", "assert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "assert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "assert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "assert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "assert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "assert pairs_sum_to_zero([2]) == False", "assert pairs_sum_to_zero([2, 3, 7, 1]) == False", "assert pairs_sum_to_zero([6, 1, -4, 6]) == False", "assert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "assert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "assert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "assert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "assert pairs_sum_to_zero([4, 1, 3, 7]) == False", "assert pairs_sum_to_zero([6, 8, 2, 5]) == False", "assert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "assert pairs_sum_to_zero([1, 5, 1, 12]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "assert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "assert pairs_sum_to_zero([2, 3, 7, 4]) == False", "assert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "assert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "assert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "assert pairs_sum_to_zero([2, 2, 6, 4]) == False", "assert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "assert pairs_sum_to_zero([3, 3, 1, 4]) == False", "assert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "assert pairs_sum_to_zero([1, 3, 4, 3]) == False", "assert pairs_sum_to_zero([5, 7, 3, 4]) == False", "assert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "assert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "assert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "assert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "assert pairs_sum_to_zero([4]) == False", "assert pairs_sum_to_zero([2, 7, 8, 5]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "assert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "assert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "assert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "assert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "assert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "assert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "assert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "assert pairs_sum_to_zero([1, 3, 3, 5]) == False", "assert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "assert pairs_sum_to_zero([2, 4, 1, 2]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "assert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "assert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "assert pairs_sum_to_zero([3, 4, 10, 1]) == False", "assert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "assert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "assert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "assert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "assert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "assert pairs_sum_to_zero([1, 5, 1, 3]) == False", "assert pairs_sum_to_zero([5, 8, -4, 5]) == False", "assert pairs_sum_to_zero([3, 2, 1, 6]) == False", "assert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "assert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "assert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "assert pairs_sum_to_zero([6, 1, 0, 3]) == False", "assert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "assert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "assert pairs_sum_to_zero([1, 2, 2, 2]) == False", "assert pairs_sum_to_zero([6]) == False", "assert pairs_sum_to_zero([2, 8, 1, 4]) == False", "assert pairs_sum_to_zero([2, 6, 2, 5]) == False", "assert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "assert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "assert pairs_sum_to_zero([6, 1, 3, 2]) == False", "assert pairs_sum_to_zero([5]) == False", "assert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "assert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "assert pairs_sum_to_zero([5, 3, 6, 7]) == False", "assert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "assert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "nl": "\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    ", "func": "def pairs_sum_to_zero(l):", "examples": ">>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    ", "repair_prompt": ["def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input and returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two distinct elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct elements that sum to zero, False otherwise.\n    \"\"\"\n    seen_elements = set()  # Initialize an empty set to track seen elements\n\n    for element in l:\n        if -element in seen_elements:\n            return True  # Found a pair that sums to zero\n        seen_elements.add(element)  # Add the current element to the set\n\n    return False  # No pairs found that sum to zero\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Checks if there are two distinct elements in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two distinct elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if a pair summing to zero exists, False otherwise.\n    \"\"\"\n    seen_numbers = set()\n    \n    for number in l:\n        if -number in seen_numbers:\n            return True\n        seen_numbers.add(number)\n    \n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Checks if there are two distinct elements in the list that sum to zero.\n\n    This function iterates through the list of integers and uses a set to track\n    the numbers we have seen so far. For each number, it checks if its negation\n    is already in the set, which would indicate a pair summing to zero.\n\n    Args:\n        l: List of integers.\n\n    Returns:\n        Boolean indicating if a pair summing to zero exists.\n    \"\"\"\n    seen_numbers = set()\n\n    for number in l:\n        # Check if the negation of the current number is in the set\n        if -number in seen_numbers:\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Checks if there are two distinct elements in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two distinct elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct elements that sum to zero, False otherwise.\n    \"\"\"\n    seen_numbers = set()\n\n    for number in l:\n        if -number in seen_numbers:\n            return True\n        seen_numbers.add(number)\n\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two distinct elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct elements that sum to zero, False otherwise.\n\n    Examples:\n        >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n        >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n    \"\"\"\n    # Initialize an empty set to store elements\n    seen_elements = set()\n\n    # Iterate over each element in the list\n    for element in l:\n        # Check if the negation of the current element exists in the set\n        if -element in seen_elements:\n            return True\n        # Add the current element to the set\n        seen_elements.add(element)\n\n    # Return False if no pairs found\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum to zero.\n\n    This function takes a list of integers as an input and returns True if there\n    are two distinct elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct elements that sum to zero, False otherwise.\n\n    Examples:\n        >>> pairs_sum_to_zero([1, 3, 5, 0])\n        False\n        >>> pairs_sum_to_zero([1, 3, -2, 1])\n        False\n        >>> pairs_sum_to_zero([1, 2, 3, 7])\n        False\n        >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n        >>> pairs_sum_to_zero([1])\n        False\n    \"\"\"\n    seen_numbers = set()\n\n    for number in l:\n        if -number in seen_numbers:\n            return True\n        seen_numbers.add(number)\n\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Checks if there are two distinct elements in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two distinct elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if a pair summing to zero exists, False otherwise.\n    \"\"\"\n    seen_numbers = set()  # Initialize an empty set to track seen numbers\n\n    for number in l:\n        if -number in seen_numbers:\n            # If the negative of the current number is in the set, a pair is found\n            return True\n        seen_numbers.add(number)  # Add the current number to the set\n\n    return False  # Return False if no pair is found\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Checks if there are two distinct elements in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two distinct elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l: List of integers.\n\n    Returns:\n        Boolean indicating if any two distinct elements sum to zero.\n    \"\"\"\n    seen_numbers = set()\n    \n    for number in l:\n        # Check if the negative of the current number is already in the set\n        if -number in seen_numbers:\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n    \n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Checks if there are two distinct elements in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two distinct elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l: List of integers.\n\n    Returns:\n        Boolean indicating if any two distinct elements sum to zero.\n    \"\"\"\n    # Create a set to store the elements for fast lookup\n    seen_numbers = set()\n\n    # Iterate over each number in the list\n    for number in l:\n        # Check if the negative of the current number is already in the set\n        if -number in seen_numbers:\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    # If no such pair is found, return False\n    return False\n", "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two distinct elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct elements that sum to zero, False otherwise.\n\n    Example:\n        >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n    \"\"\"\n    # Initialize an empty set to keep track of numbers we have seen\n    seen_numbers = set()\n\n    # Iterate over each number in the list\n    for number in l:\n        # Check if the negative of the current number is in the set\n        if -number in seen_numbers:\n            # If found, return True as we have a pair that sums to zero\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    # If no such pair is found, return False\n    return False\n"], "plans": ["requirement analysis:\nThe function should efficiently find two distinct elements in a list that sum to zero. It should handle edge cases such as lists with one element or no valid pairs. The function should be easy to understand and integrate into larger systems.\nrequirement pool:\n- The function must efficiently find pairs summing to zero.\n- The function should handle edge cases gracefully.\n- The function should be well-documented.\n- The function should be easy to integrate into larger systems.\n- The function should have a clear and concise interface.\nWe will use a set to efficiently check for pairs that sum to zero. This approach leverages the average O(1) time complexity for set operations, making it suitable for large lists. The function will iterate through the list and check if the negative of the current element exists in the set, indicating a pair summing to zero. This method handles edge cases like lists with one element or no valid pairs gracefully.\n", "requirement analysis:\nThe function should efficiently check for pairs of numbers that sum to zero, handle edge cases such as empty lists or lists with a single element, and be easy to read and maintain.\nrequirement pool:\n- Implement the main function logic to find pairs summing to zero.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases correctly.\n- Provide comprehensive documentation and examples.\n- Write unit tests to verify function correctness.\nWe will implement a function that uses a set to track the numbers we have seen so far. This approach allows us to efficiently check if the negative of the current number exists in the set, which would mean a pair summing to zero has been found. This method is efficient and works well with large datasets.\n", "requirement analysis:\nThe function should efficiently identify pairs of integers that sum to zero, ensuring accuracy and performance. Documentation should be clear to facilitate integration and understanding.\nrequirement pool:\n- Implement the main function logic to find pairs summing to zero\n- Optimize the function for performance with large lists\n- Provide comprehensive documentation\n- Include error handling for invalid inputs\n- Test the function with various edge cases\nWe will implement a function that iterates through the list of integers and uses a set to track the numbers we have seen so far. For each number, we will check if its negation is already in the set, which would indicate a pair summing to zero. This approach ensures that we only need to traverse the list once, achieving O(n) time complexity, which is efficient for large lists.\n", "requirement analysis:\nThe function should efficiently identify pairs of integers that sum to zero, ensuring it handles edge cases such as empty lists or lists with a single element. Performance optimization is crucial for handling large datasets, and clear documentation is necessary for user understanding.\nrequirement pool:\n- Implement the main function to check pairs summing to zero\n- Optimize the function for large input lists\n- Provide comprehensive documentation\n- Ensure compatibility with existing systems\n- Include unit tests for various scenarios\nWe will implement a function that efficiently checks for pairs of integers in a list that sum to zero. To optimize performance for large input lists, we will use a set to track the numbers we have seen so far, allowing for O(1) average time complexity for lookups. This approach ensures that the function can handle large datasets efficiently. Comprehensive documentation will be provided to explain the function's usage and edge cases.\n", "requirement analysis:\nThe function should efficiently identify pairs of integers that sum to zero, ensuring it handles various list sizes and edge cases. It should be easy to integrate and provide quick results.\nrequirement pool:\n- Implement the main algorithm to find pairs summing to zero\n- Optimize for performance with large lists\n- Ensure comprehensive documentation\n- Handle edge cases such as empty lists or single-element lists\n- Provide examples and test cases\nWe will implement a function that efficiently checks for pairs of integers in a list that sum to zero. To optimize performance, especially for large lists, we will use a set to store elements and check for their negations, which allows for O(n) time complexity. The function will handle edge cases such as empty lists or single-element lists gracefully. Comprehensive documentation and examples will be provided to ensure easy integration and understanding.\n", "requirement analysis:\nThe function should efficiently determine if any two distinct integers in a list sum to zero. It must handle edge cases such as empty lists or lists with a single element. The implementation should prioritize performance and simplicity.\nrequirement pool:\n- Implement the main function logic to check for pairs summing to zero.\n- Optimize the function for performance with large lists.\n- Provide detailed documentation and examples.\n- Ensure compatibility with Python 3.x.\n- Include unit tests to verify function correctness.\nWe will implement a function that uses a set to track the numbers we have seen so far. For each number in the list, we will check if its negation is already in the set. This approach ensures that we only need to traverse the list once, achieving O(n) time complexity, which is efficient for large lists. We will use Python's built-in data structures to maintain simplicity and avoid additional dependencies.\n", "requirement analysis:\nThe function should efficiently identify pairs of numbers that sum to zero, even in large datasets. It should be easy to understand and use, with clear documentation and examples.\nrequirement pool:\n- Implement the main function to find pairs summing to zero.\n- Optimize the function for performance with large lists.\n- Provide comprehensive documentation and examples.\n- Ensure the function handles edge cases gracefully.\n- Conduct user testing to gather feedback on usability.\nWe will implement a function that uses a set to track the numbers we have seen so far. This allows us to efficiently check if the negative of the current number exists in the set, which would mean a pair summing to zero has been found. This approach is optimal for performance as it runs in O(n) time complexity, where n is the number of elements in the list.\n", "requirement analysis:\nThe function should efficiently identify pairs of integers that sum to zero, ensuring it handles edge cases such as empty lists or lists with a single element. Performance optimization is crucial for handling large datasets, and clear documentation is necessary for user understanding.\nrequirement pool:\n- Implement the main function logic to find pairs summing to zero\n- Optimize the function for performance with large lists\n- Provide comprehensive documentation\n- Ensure compatibility with various Python versions\n- Include unit tests for edge cases\nWe will implement a function that efficiently checks for pairs of integers in a list that sum to zero. To optimize performance, especially for large lists, we will use a set to track the numbers we have seen so far. This allows us to check for the existence of the complement (i.e., the negative of the current number) in constant time. This approach ensures that the function runs in O(n) time complexity, where n is the number of elements in the list.\n", "requirement analysis:\nThe function should efficiently check for pairs of numbers that sum to zero, handle edge cases, and be easy to read and maintain. It should be optimized for performance without sacrificing usability.\nrequirement pool:\n- Implement the main function to check for pairs summing to zero.\n- Optimize the function for large input lists.\n- Ensure the function handles edge cases like empty lists.\n- Provide comprehensive documentation and examples.\n- Write unit tests to verify function correctness.\nWe will implement a function that efficiently checks for pairs of numbers that sum to zero using a set for fast look-up operations. This approach will ensure the function is optimized for large input lists and handles edge cases like empty lists or lists with one element. The function will be simple and easy to integrate into larger projects.\n", "requirement analysis:\nThe function should efficiently identify pairs of integers that sum to zero, ensuring it handles edge cases such as empty lists or lists with a single element. It should be optimized for performance and include comprehensive documentation for ease of use.\nrequirement pool:\n- Implement the main algorithm to find pairs summing to zero\n- Optimize the algorithm for large datasets\n- Include detailed documentation and examples\n- Ensure compatibility with various Python versions\n- Conduct thorough testing for edge cases\nWe will implement a function that efficiently checks for pairs of integers in a list that sum to zero. To optimize performance, we will use a set to track the numbers we have seen so far, allowing us to check for the existence of a complement (i.e., the negative of the current number) in constant time. This approach ensures that the function runs in O(n) time complexity, which is suitable for large datasets. We will also include comprehensive documentation and examples to facilitate easy integration and understanding.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\n\ndef pairs_sum_to_zero(l: list[int]) -> bool:\n    \"\"\"Check if there are two distinct elements in the list that sum to zero.\n\n    This function takes a list of integers as input and returns True if there\n    are two distinct elements in the list that sum to zero, and False otherwise.\n\n    Args:\n        l (list[int]): A list of integers.\n\n    Returns:\n        bool: True if there are two distinct elements that sum to zero, False otherwise.\n\n    Example:\n        >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n        True\n    \"\"\"\n    # Initialize an empty set to keep track of numbers we have seen\n    seen_numbers = set()\n\n    # Iterate over each number in the list\n    for number in l:\n        # Check if the negative of the current number is in the set\n        if -number in seen_numbers:\n            # If found, return True as we have a pair that sums to zero\n            return True\n        # Add the current number to the set\n        seen_numbers.add(number)\n\n    # If no such pair is found, return False\n    return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 39, "mutate_method": "condense_two2one", "parent_index": 39}
