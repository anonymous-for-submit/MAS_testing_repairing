{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Ensure your solution handles edge cases such as empty lists or lists with a single element.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Ensure your solution handles edge cases such as empty lists or lists with a single element.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        # A list with 0 or 1 element is trivially monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n        # If the list is neither increasing nor decreasing, return False\n        if not increasing and not decreasing:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l or len(l) == 1:\n        # An empty list or a single-element list is considered monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n    \n    Parameters:\n    l (list): A list of comparable elements.\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determines if a list is monotonically increasing or decreasing.\n\n    This function checks if the given list of numeric elements is either\n    monotonically increasing or monotonically decreasing. It handles edge\n    cases such as empty lists or lists with a single element.\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        # A list with 0 or 1 element is trivially monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n        # If the list is neither increasing nor decreasing, return False\n        if not increasing and not decreasing:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_increasing = False\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n\n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    if not l:\n        # An empty list is considered monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n    \n    Parameters:\n    l (list): A list of numeric elements.\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n        if l[i] < l[i - 1]:\n            is_increasing = False\n\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if not l:\n        # An empty list is considered monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if the list is monotonic.\n\n    A list is considered monotonic if it is either entirely non-increasing or non-decreasing.\n\n    Parameters:\n    l (list): The list of elements to check.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if not l:\n        # An empty list is considered monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe function should determine if a list is monotonically increasing or decreasing. It must handle edge cases such as empty lists or lists with a single element. The solution should be efficient and easy to understand.\nrequirement pool:\n- Implement the main function to check monotonicity\n- Handle edge cases like empty lists and single-element lists\n- Optimize the function for performance with large lists\n- Ensure the code is readable and maintainable\n- Include comprehensive test cases\nWe will implement a simple function to check if a list is monotonically increasing or decreasing. The function will handle edge cases such as empty lists and lists with a single element. We will use basic Python operations to ensure efficiency and readability, avoiding additional dependencies.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling edge cases such as empty lists or single-element lists. It should be optimized for performance with large datasets and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the main monotonic function\n- Handle edge cases like empty and single-element lists\n- Optimize performance for large lists\n- Provide comprehensive documentation\n- Include unit tests for various scenarios\nWe will implement a simple Python function to check if a list is monotonic. The function will handle edge cases such as empty lists and single-element lists. We will use basic Python constructs to ensure the function is efficient and easy to understand, avoiding the need for additional libraries. The function will iterate through the list once, making it efficient for large datasets.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling edge cases such as empty lists or single-element lists. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the main function to check for monotonicity\n- Handle edge cases like empty and single-element lists\n- Optimize the function for large datasets\n- Provide comprehensive documentation and examples\n- Include performance benchmarks in the documentation\nWe will implement a simple function to check for monotonicity using basic Python constructs. The function will handle edge cases such as empty lists and single-element lists efficiently. We will avoid using heavy libraries like NumPy or Pandas to keep the implementation lightweight and focused on performance for large datasets.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonically increasing or decreasing, handling edge cases such as empty lists or single-element lists. It should be optimized for performance and maintain simplicity for ease of understanding and maintenance.\nrequirement pool:\n- The function must correctly identify monotonic sequences.\n- The function should handle edge cases like empty or single-element lists.\n- Optimize the function for performance with large lists.\n- Ensure the function is easy to read and maintain.\n- Consider adding optional parameters for flexibility.\nWe will implement a simple function to check if a list is monotonically increasing or decreasing. The function will handle edge cases such as empty lists or lists with a single element. We will use basic Python operations to ensure the function is efficient and easy to read, avoiding additional dependencies.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonically increasing or decreasing, handling edge cases such as empty lists or single-element lists. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- Handle empty and single-element lists without errors.\n- Correctly identify both increasing and decreasing sequences.\n- Optimize performance for large lists.\n- Provide clear and concise documentation.\n- Include examples and edge case handling in documentation.\nWe will implement a simple function to check if a list is monotonically increasing or decreasing. The function will handle edge cases such as empty lists and single-element lists by returning True, as these can be considered trivially monotonic. We will use Python's built-in capabilities to iterate through the list and compare elements, ensuring the solution is efficient and easy to understand. No additional libraries are necessary for this task, as the built-in capabilities of Python are sufficient.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonically increasing or decreasing, handling edge cases such as empty lists or single-element lists. It should be optimized for performance and maintain simplicity for ease of understanding and maintenance.\nrequirement pool:\n- Implement the main function to check monotonicity\n- Handle edge cases like empty and single-element lists\n- Optimize the function for large list inputs\n- Ensure code readability and simplicity\n- Include comprehensive test cases\nWe will implement a simple Python function to check if a list is monotonically increasing or decreasing. The function will handle edge cases such as empty lists and single-element lists. We will avoid using heavy libraries like NumPy or Pandas to keep the solution lightweight and dependency-free, ensuring it is optimized for performance with large lists while maintaining readability.\n", "requirement analysis:\nThe function should correctly identify if a list is monotonic, handling edge cases such as empty lists or lists with a single element. It should be efficient and easy to use, with clear documentation.\nrequirement pool:\n- Implement the monotonic function to handle all edge cases\n- Optimize the function for performance with large lists\n- Provide comprehensive documentation and examples\n- Ensure compatibility with Python 3.x\n- Include unit tests for various scenarios\nWe will implement a simple Python function that checks if a list is monotonic by iterating through the list and comparing each element with the next one. We will handle edge cases such as empty lists and lists with a single element. The function will be optimized for performance by minimizing the number of comparisons and will include comprehensive documentation.\n", "requirement analysis:\nThe function should determine if a list is monotonically increasing or decreasing. It must handle edge cases such as empty lists and single-element lists. The solution should be efficient and easy to understand.\nrequirement pool:\n- Implement the main function to check for monotonicity\n- Ensure the function handles edge cases like empty and single-element lists\n- Optimize the function for performance with large lists\n- Maintain code readability and simplicity\n- Provide comprehensive test cases for various scenarios\nWe will implement a simple Python function to check if a list is monotonically increasing or decreasing. The function will handle edge cases such as empty lists and single-element lists. We will use basic Python constructs to ensure the solution is efficient and easy to understand, without relying on external libraries.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, handling edge cases such as empty lists and single-element lists. It should be optimized for performance, especially with large lists.\nrequirement pool:\n- Implement monotonic check for lists\n- Handle edge cases like empty and single-element lists\n- Optimize performance for large lists\n- Provide clear documentation and examples\n- Ensure compatibility with Python 3.x\nWe will implement a function to check if a list is monotonic by iterating through the list once to determine if it is either entirely non-increasing or non-decreasing. This approach ensures that we handle edge cases such as empty lists and single-element lists efficiently. We will use Python's built-in capabilities to keep the solution simple and efficient, avoiding the need for additional libraries.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling edge cases such as empty lists or single-element lists. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the main function to check for monotonicity\n- Optimize the function for large lists\n- Ensure the function handles edge cases like empty or single-element lists\n- Provide comprehensive documentation and examples\n- Conduct performance testing and optimization\nWe will implement a simple function to check if a list is monotonic by iterating through the list and comparing each element with the next one. We will handle edge cases such as empty lists and single-element lists by returning True for these cases. The function will be optimized for performance by minimizing the number of comparisons and using efficient list operations.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 617, "mutate_method": "add_1_sentence_at_end", "parent_index": 48}
