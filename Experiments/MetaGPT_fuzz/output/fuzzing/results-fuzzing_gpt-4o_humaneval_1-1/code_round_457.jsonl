{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "entry_point": "right_angle_triangle", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "test": ["def check(right_angle_triangle):\n\tassert right_angle_triangle(273, 936, 975) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 380, 475) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(705, 376, 799) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(870, 464, 986) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3504, 4015, 5329) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(525, 280, 595) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1536, 1760, 2336) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(175, 600, 625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(455, 1560, 1625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(259, 888, 925) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(490, 1680, 1750) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1185, 632, 1343) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2256, 2585, 3431) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1155, 616, 1309) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 7, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(54, 72, 90) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(20, 12, 16) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2736, 3135, 4161) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(518, 1776, 1850) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 7, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 6, 8) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 5, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 15) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(280, 960, 1000) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 9, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 7, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(765, 408, 867) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(69, 92, 115) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(140, 336, 364) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(240, 144, 192) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(780, 468, 624) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3888, 4455, 5913) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(14, 8, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(204, 272, 340) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 7, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1035, 552, 1173) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(243, 324, 405) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(581, 1992, 2075) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(11, 5, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(820, 492, 656) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(900, 480, 1020) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(360, 864, 936) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 1, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 3, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(210, 112, 238) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1000, 600, 800) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 684, 741) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(65, 156, 169) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(960, 576, 768) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3792, 4345, 5767) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 4, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 12, 13) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 6, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(160, 384, 416) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2880, 3300, 4380) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 5, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 24, 25) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 17) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4752, 5445, 7227) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4656, 5335, 7081) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(380, 912, 988) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(350, 840, 910) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 4, 5) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(70, 42, 56) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 9, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(201, 268, 335) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(170, 408, 442) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 16, 20) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(305, 732, 793) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 552, 598) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 5, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(235, 564, 611) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(81, 108, 135) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 28, 35) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(234, 312, 390) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 138, 184) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(168, 576, 600) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1095, 584, 1241) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(320, 192, 256) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 2, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(528, 605, 803) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1455, 776, 1649) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 72, 75) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2544, 2915, 3869) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(610, 366, 488) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 10, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(219, 292, 365) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(192, 220, 292) == True"], "test_case_list": ["assert right_angle_triangle(273, 936, 975) == True", "assert right_angle_triangle(285, 380, 475) == True", "assert right_angle_triangle(705, 376, 799) == True", "assert right_angle_triangle(870, 464, 986) == True", "assert right_angle_triangle(3504, 4015, 5329) == True", "assert right_angle_triangle(525, 280, 595) == True", "assert right_angle_triangle(1536, 1760, 2336) == True", "assert right_angle_triangle(175, 600, 625) == True", "assert right_angle_triangle(455, 1560, 1625) == True", "assert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "assert right_angle_triangle(3, 2, 5) == False", "assert right_angle_triangle(259, 888, 925) == True", "assert right_angle_triangle(490, 1680, 1750) == True", "assert right_angle_triangle(1185, 632, 1343) == True", "assert right_angle_triangle(6, 1, 9) == False", "assert right_angle_triangle(2256, 2585, 3431) == True", "assert right_angle_triangle(1155, 616, 1309) == True", "assert right_angle_triangle(4, 5, 5) == False", "assert right_angle_triangle(5, 7, 1) == False", "assert right_angle_triangle(5, 1, 2) == False", "assert right_angle_triangle(54, 72, 90) == True", "assert right_angle_triangle(20, 12, 16) == True", "assert right_angle_triangle(5, 5, 2) == False", "assert right_angle_triangle(2736, 3135, 4161) == True", "assert right_angle_triangle(518, 1776, 1850) == True", "assert right_angle_triangle(3, 6, 11) == False", "assert right_angle_triangle(7, 7, 5) == False", "assert right_angle_triangle(15, 2, 10) == False", "assert right_angle_triangle(10, 6, 8) == True", "assert right_angle_triangle(15, 5, 11) == False", "assert right_angle_triangle(1, 1, 2) == False", "assert right_angle_triangle(1, 3, 15) == False", "assert right_angle_triangle(280, 960, 1000) == True", "assert right_angle_triangle(6, 1, 7) == False", "assert right_angle_triangle(10, 9, 3) == False", "assert right_angle_triangle(2, 7, 6) == False", "assert right_angle_triangle(1, 7, 4) == False", "assert right_angle_triangle(765, 408, 867) == True", "assert right_angle_triangle(69, 92, 115) == True", "assert right_angle_triangle(140, 336, 364) == True", "assert right_angle_triangle(240, 144, 192) == True", "assert right_angle_triangle(2, 4, 6) == False", "assert right_angle_triangle(780, 468, 624) == True", "assert right_angle_triangle(6, 7, 6) == False", "assert right_angle_triangle(3888, 4455, 5913) == True", "assert right_angle_triangle(6, 7, 7) == False", "assert right_angle_triangle(2, 2, 2) == False", "assert right_angle_triangle(14, 8, 10) == False", "assert right_angle_triangle(204, 272, 340) == True", "assert right_angle_triangle(3, 7, 2) == False", "assert right_angle_triangle(1035, 552, 1173) == True", "assert right_angle_triangle(243, 324, 405) == True", "assert right_angle_triangle(581, 1992, 2075) == True", "assert right_angle_triangle(11, 5, 8) == False", "assert right_angle_triangle(820, 492, 656) == True", "assert right_angle_triangle(5, 4, 4) == False", "assert right_angle_triangle(4, 4, 4) == False", "assert right_angle_triangle(4, 5, 4) == False", "assert right_angle_triangle(12, 1, 2) == False", "assert right_angle_triangle(900, 480, 1020) == True", "assert right_angle_triangle(3, 3, 4) == False", "assert right_angle_triangle(360, 864, 936) == True", "assert right_angle_triangle(7, 1, 6) == False", "assert right_angle_triangle(5, 3, 2) == False", "assert right_angle_triangle(210, 112, 238) == True", "assert right_angle_triangle(1000, 600, 800) == True", "assert right_angle_triangle(285, 684, 741) == True", "assert right_angle_triangle(65, 156, 169) == True", "assert right_angle_triangle(960, 576, 768) == True", "assert right_angle_triangle(3792, 4345, 5767) == True", "assert right_angle_triangle(5, 5, 6) == False", "assert right_angle_triangle(3, 3, 3) == False", "assert right_angle_triangle(3, 2, 3) == False", "assert right_angle_triangle(1, 2, 1) == False", "assert right_angle_triangle(12, 4, 2) == False", "assert right_angle_triangle(6, 4, 1) == False", "assert right_angle_triangle(5, 12, 13) == True", "assert right_angle_triangle(2, 6, 9) == False", "assert right_angle_triangle(160, 384, 416) == True", "assert right_angle_triangle(3, 6, 3) == False", "assert right_angle_triangle(2, 4, 11) == False", "assert right_angle_triangle(2880, 3300, 4380) == True", "assert right_angle_triangle(10, 5, 7) == False", "assert right_angle_triangle(7, 24, 25) == True", "assert right_angle_triangle(15, 8, 17) == True", "assert right_angle_triangle(4752, 5445, 7227) == True", "assert right_angle_triangle(4656, 5335, 7081) == True", "assert right_angle_triangle(380, 912, 988) == True", "assert right_angle_triangle(350, 840, 910) == True", "assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(2, 4, 8) == False", "assert right_angle_triangle(1, 4, 4) == False", "assert right_angle_triangle(70, 42, 56) == True", "assert right_angle_triangle(15, 9, 11) == False", "assert right_angle_triangle(201, 268, 335) == True", "assert right_angle_triangle(170, 408, 442) == True", "assert right_angle_triangle(12, 16, 20) == True", "assert right_angle_triangle(305, 732, 793) == True", "assert right_angle_triangle(2, 2, 10) == False", "assert right_angle_triangle(1, 3, 4) == False", "assert right_angle_triangle(230, 552, 598) == True", "assert right_angle_triangle(1, 1, 1) == False", "assert right_angle_triangle(3, 3, 9) == False", "assert right_angle_triangle(6, 5, 3) == False", "assert right_angle_triangle(235, 564, 611) == True", "assert right_angle_triangle(3, 1, 4) == False", "assert right_angle_triangle(81, 108, 135) == True", "assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(5, 5, 4) == False", "assert right_angle_triangle(21, 28, 35) == True", "assert right_angle_triangle(234, 312, 390) == True", "assert right_angle_triangle(3, 1, 7) == False", "assert right_angle_triangle(230, 138, 184) == True", "assert right_angle_triangle(168, 576, 600) == True", "assert right_angle_triangle(1095, 584, 1241) == True", "assert right_angle_triangle(320, 192, 256) == True", "assert right_angle_triangle(8, 5, 6) == False", "assert right_angle_triangle(5, 2, 4) == False", "assert right_angle_triangle(6, 4, 4) == False", "assert right_angle_triangle(4, 1, 4) == False", "assert right_angle_triangle(528, 605, 803) == True", "assert right_angle_triangle(5, 4, 10) == False", "assert right_angle_triangle(15, 8, 3) == False", "assert right_angle_triangle(1455, 776, 1649) == True", "assert right_angle_triangle(21, 72, 75) == True", "assert right_angle_triangle(2544, 2915, 3869) == True", "assert right_angle_triangle(610, 366, 488) == True", "assert right_angle_triangle(8, 10, 10) == False", "assert right_angle_triangle(2, 4, 5) == False", "assert right_angle_triangle(2, 3, 1) == False", "assert right_angle_triangle(3, 3, 1) == False", "assert right_angle_triangle(219, 292, 365) == True", "assert right_angle_triangle(1, 5, 5) == False", "assert right_angle_triangle(192, 220, 292) == True"], "nl": "\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    ", "func": "def right_angle_triangle(a, b, c):", "examples": "Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    ", "repair_prompt": ["def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n\n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n    c (float): Length of the third side.\n\n    Returns:\n    bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Validate inputs\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(c, (int, float))):\n        raise ValueError(\"All sides must be numeric values.\")\n    \n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All sides must be positive values.\")\n\n    # Check Pythagorean theorem\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# print(right_angle_triangle(3.0, 4.0, 5.0))  # Should return True\n# print(right_angle_triangle(1.0, 2.0, 3.0))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n\n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n    c (float): Length of the third side.\n\n    Returns:\n    bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Validate inputs\n    if not all(isinstance(side, (int, float)) for side in (a, b, c)):\n        raise ValueError(\"All sides must be numbers.\")\n    if any(side <= 0 for side in (a, b, c)):\n        raise ValueError(\"All sides must be positive numbers.\")\n\n    # Sort the sides to ensure the largest is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    hypotenuse, side1, side2 = sides[2], sides[0], sides[1]\n\n    # Check Pythagorean theorem\n    return abs(hypotenuse**2 - (side1**2 + side2**2)) < 1e-9\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Should return True\n# print(right_angle_triangle(5, 12, 13))  # Should return True\n# print(right_angle_triangle(1, 1, 1))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"Determine if three side lengths can form a right-angled triangle.\n\n    This function checks if the given side lengths can form a right-angled\n    triangle using the Pythagorean theorem. It validates the inputs to ensure\n    they are numeric and non-negative.\n\n    Args:\n        a (float): The length of the first side.\n        b (float): The length of the second side.\n        c (float): The length of the third side.\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n\n    Raises:\n        ValueError: If any of the inputs are non-numeric or negative.\n    \"\"\"\n    # Validate inputs\n    if not all(isinstance(side, (int, float)) for side in (a, b, c)):\n        raise ValueError(\"All side lengths must be numeric.\")\n    if any(side <= 0 for side in (a, b, c)):\n        raise ValueError(\"All side lengths must be positive.\")\n\n    # Sort the sides to ensure the largest is considered the hypotenuse\n    sides = sorted([a, b, c])\n    hypotenuse, side1, side2 = sides[2], sides[0], sides[1]\n\n    # Check the Pythagorean theorem\n    return hypotenuse**2 == side1**2 + side2**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n\n    This function uses the Pythagorean theorem to determine if the given sides can form a right-angled triangle.\n    It handles both integer and float inputs and returns a boolean value. The function also checks for edge cases\n    such as zero or negative inputs and returns False in such cases.\n\n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n    c (float): Length of the third side.\n\n    Returns:\n    bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Check for non-positive side lengths\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    # Sort the sides to ensure the largest is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    hypotenuse = sides[2]\n    side1 = sides[0]\n    side2 = sides[1]\n\n    # Check the Pythagorean theorem\n    return abs(hypotenuse**2 - (side1**2 + side2**2)) < 1e-9\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Should return True\n# print(right_angle_triangle(1, 1, 1))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n    \n    Args:\n        a (float): Length of the first side\n        b (float): Length of the second side\n        c (float): Length of the third side\n    \n    Returns:\n        bool: Boolean indicating if the sides form a right-angled triangle\n    \"\"\"\n    # Validate inputs: Check if all sides are positive numbers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    \n    # Check Pythagorean theorem: a^2 + b^2 = c^2\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Should return True\n# print(right_angle_triangle(5, 12, 13))  # Should return True\n# print(right_angle_triangle(1, 2, 3))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n\n    This function uses the Pythagorean theorem to determine if the triangle is right-angled.\n    It checks all permutations of the sides to ensure the largest side is considered as the hypotenuse.\n    The function handles both integer and floating-point inputs and returns False for non-positive side lengths.\n\n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n    c (float): Length of the third side.\n\n    Returns:\n    bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Check for non-positive side lengths\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    # Sort the sides to ensure the largest is considered as the hypotenuse\n    sides = sorted([a, b, c])\n\n    # Apply the Pythagorean theorem: a^2 + b^2 = c^2\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Expected output: True\n# print(right_angle_triangle(5, 12, 13))  # Expected output: True\n# print(right_angle_triangle(1, 2, 3))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle,\n    False otherwise.\n\n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n    c (float): Length of the third side.\n\n    Returns:\n    bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Validate inputs: Check if all sides are positive numbers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    # Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    hypotenuse = sides[2]\n    side1 = sides[0]\n    side2 = sides[1]\n\n    # Check the Pythagorean theorem: a^2 + b^2 = c^2\n    # Use a tolerance for floating-point comparison\n    tolerance = 1e-9\n    return abs((side1 ** 2 + side2 ** 2) - (hypotenuse ** 2)) < tolerance\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle,\n    False otherwise.\n\n    Args:\n        a (float): Length of the first side.\n        b (float): Length of the second side.\n        c (float): Length of the third side.\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Validate inputs: Check if all inputs are positive numbers\n    if not all(isinstance(side, (int, float)) and side > 0 for side in [a, b, c]):\n        return False\n\n    # Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    hypotenuse, side1, side2 = sides[2], sides[0], sides[1]\n\n    # Check the Pythagorean theorem\n    return abs(hypotenuse**2 - (side1**2 + side2**2)) < 1e-9\n\n# Example usage:\n# print(right_angle_triangle(3.0, 4.0, 5.0))  # Should return True\n# print(right_angle_triangle(1.0, 1.0, 1.0))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n\n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n    c (float): Length of the third side.\n\n    Returns:\n    bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Check if any side is non-positive\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    # Sort the sides to identify the hypotenuse\n    sides = sorted([a, b, c])\n    # Apply the Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Should return True\n# print(right_angle_triangle(1, 1, 1))  # Should return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"Determine if three given side lengths form a right-angled triangle.\n\n    This function checks if the given side lengths can form a right-angled triangle\n    using the Pythagorean theorem. It sorts the sides to identify the hypotenuse\n    and then checks if the sum of the squares of the other two sides equals the\n    square of the hypotenuse. It handles edge cases such as non-numeric inputs\n    and sides that do not form a triangle.\n\n    Args:\n        a (float): Length of the first side.\n        b (float): Length of the second side.\n        c (float): Length of the third side.\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Validate input types\n    if not all(isinstance(side, (int, float)) for side in (a, b, c)):\n        raise ValueError(\"All sides must be numeric values.\")\n\n    # Sort the sides to identify the hypotenuse\n    sides = sorted([a, b, c])\n    x, y, z = sides  # x and y are the shorter sides, z is the hypotenuse\n\n    # Check if the sides can form a triangle\n    if x + y <= z:\n        return False\n\n    # Check the Pythagorean theorem\n    return x**2 + y**2 == z**2\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Should return True\n# print(right_angle_triangle(1, 1, 2))  # Should return False\n"], "plans": ["requirement analysis:\nThe function should accurately determine if the given sides form a right-angled triangle using the Pythagorean theorem. It should handle various input scenarios, including non-numeric inputs and negative values, and provide appropriate feedback.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Add input validation to handle non-numeric and negative values.\n- Optimize the function for performance.\n- Develop a user-friendly interface for input and output.\n- Include detailed error messages for invalid inputs.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. We will use Python's built-in capabilities for input validation and error handling. The function will ensure that inputs are numeric and positive, and provide clear error messages for invalid inputs.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle both integer and float inputs and return a boolean value. Edge cases, such as zero or negative lengths, should be considered.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Handle edge cases and invalid inputs gracefully.\n- Provide detailed error messages for invalid inputs.\n- Include unit tests to ensure function accuracy.\nWe will implement a function that checks if three given side lengths can form a right-angled triangle using the Pythagorean theorem. The function will handle both integer and float inputs and return a boolean value. We will use Python's built-in capabilities to handle edge cases such as zero or negative lengths and provide clear error messages for invalid inputs.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle various input scenarios, including non-numeric inputs and negative values, and provide appropriate feedback.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Add input validation to handle non-numeric and negative values.\n- Optimize the function for performance with large inputs.\n- Provide detailed error messages for invalid inputs.\n- Create a user-friendly interface for input and output.\nWe will implement a function that checks if three given side lengths can form a right-angled triangle using the Pythagorean theorem. The function will include input validation to handle non-numeric and negative values, and provide detailed error messages for invalid inputs. We will use Python's built-in capabilities for input validation and error handling, ensuring the function is optimized for performance with large inputs.\n", "requirement analysis:\nThe function should accurately determine if the given sides form a right-angled triangle using the Pythagorean theorem. It should handle both integer and float inputs and provide a boolean output.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance with large inputs.\n- Ensure the function handles edge cases, such as zero or negative inputs.\n- Provide user documentation and examples.\n- Create a simple UI for input and output display.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will handle both integer and float inputs and return a boolean value. We will use the built-in Python capabilities to ensure simplicity and performance. The function will also handle edge cases such as zero or negative inputs by returning False.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle both integer and floating-point inputs and return a boolean value. Edge cases, such as zero or negative lengths, should be considered.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance with large inputs.\n- Include error handling for invalid inputs.\n- Provide a user-friendly interface for input and output.\n- Add documentation and examples for user guidance.\nWe will implement a function that checks if three given side lengths can form a right-angled triangle using the Pythagorean theorem. The function will handle both integer and floating-point inputs and return a boolean value. We will use Python's built-in capabilities for mathematical operations and error handling to ensure performance and accuracy. The function will include checks for invalid inputs such as zero or negative lengths.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle both integer and floating-point inputs and return a boolean value. Edge cases, such as zero or negative lengths, should be considered.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Handle edge cases and invalid inputs gracefully.\n- Provide detailed error messages for invalid inputs.\n- Include additional features like triangle type classification.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will handle both integer and floating-point inputs and return a boolean value. It will also handle edge cases such as zero or negative lengths by returning False. We will use Python's built-in capabilities without any additional libraries to keep the implementation simple and efficient.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle both integer and floating-point inputs and return a boolean value. Edge cases, such as zero or negative lengths, should be considered.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Handle edge cases such as zero or negative lengths.\n- Include support for floating-point precision.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function using the Pythagorean theorem to check if the given side lengths form a right-angled triangle. The function will handle both integer and floating-point inputs, and will include checks for edge cases such as zero or negative lengths. We will use Python's built-in capabilities for mathematical operations, ensuring quick calculations without the need for additional libraries.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle various input scenarios, including non-integer values and edge cases where the sides do not form a triangle.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Ensure the function handles edge cases and invalid inputs.\n- Provide detailed error messages for invalid inputs.\n- Include additional geometric validations if needed.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will handle edge cases such as non-integer values and invalid triangle sides. We will use Python's built-in capabilities to ensure quick calculations and accurate results.\n", "requirement analysis:\nThe function should accurately determine if three given side lengths can form a right-angled triangle using the Pythagorean theorem. It should handle both integer and floating-point inputs and return a boolean value. Edge cases, such as zero or negative lengths, should be considered.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Handle edge cases and invalid inputs gracefully.\n- Provide detailed error messages for invalid inputs.\n- Include additional features like triangle type classification.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will handle both integer and floating-point inputs and return a boolean value. It will also handle edge cases such as zero or negative lengths by returning False. We will use Python's built-in capabilities without any additional libraries to keep the implementation simple and efficient.\n", "requirement analysis:\nThe function should accurately determine if the given sides form a right-angled triangle using the Pythagorean theorem. It should handle various input scenarios, including non-triangle inputs, and return results efficiently.\nrequirement pool:\n- Implement the main function to check for right-angled triangles.\n- Optimize the function for performance.\n- Ensure the function handles edge cases.\n- Provide clear documentation and examples.\n- Include error handling for invalid inputs.\nWe will implement a function that checks if three given side lengths form a right-angled triangle using the Pythagorean theorem. The function will sort the sides to identify the hypotenuse and then check if the sum of the squares of the other two sides equals the square of the hypotenuse. We will handle edge cases such as non-numeric inputs and sides that do not form a triangle. The function will be optimized for performance by minimizing unnecessary calculations.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [134, 134, 134, 134, 134, 134, 134, 134, 134, 134], "completion": "from typing import List\n## main.py\n\ndef right_angle_triangle(a: float, b: float, c: float) -> bool:\n    \"\"\"Determine if three given side lengths form a right-angled triangle.\n\n    This function checks if the given side lengths can form a right-angled triangle\n    using the Pythagorean theorem. It sorts the sides to identify the hypotenuse\n    and then checks if the sum of the squares of the other two sides equals the\n    square of the hypotenuse. It handles edge cases such as non-numeric inputs\n    and sides that do not form a triangle.\n\n    Args:\n        a (float): Length of the first side.\n        b (float): Length of the second side.\n        c (float): Length of the third side.\n\n    Returns:\n        bool: True if the sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Validate input types\n    if not all(isinstance(side, (int, float)) for side in (a, b, c)):\n        raise ValueError(\"All sides must be numeric values.\")\n\n    # Sort the sides to identify the hypotenuse\n    sides = sorted([a, b, c])\n    x, y, z = sides  # x and y are the shorter sides, z is the hypotenuse\n\n    # Check if the sides can form a triangle\n    if x + y <= z:\n        return False\n\n    # Check the Pythagorean theorem\n    return x**2 + y**2 == z**2\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Should return True\n# print(right_angle_triangle(1, 1, 2))  # Should return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 457, "mutate_method": "condense_two2one", "parent_index": 178}
