{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Return length of given string. Ensure you handle both ASCII and Unicode characters correctly in your implementation.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "entry_point": "strlen", "canonical_solution": "    return len(string)\n", "test": ["def check(strlen):\n\tassert strlen('asdasnakj') == 9", "def check(strlen):\n\tassert strlen(\"vc\") == 2", "def check(strlen):\n\tassert strlen(\"yb\") == 2", "def check(strlen):\n\tassert strlen(\"jogcyuitzjrvh\") == 13", "def check(strlen):\n\tassert strlen(\"ucomfyiviag\") == 11", "def check(strlen):\n\tassert strlen(\"ayl\") == 3", "def check(strlen):\n\tassert strlen(\"m\") == 1", "def check(strlen):\n\tassert strlen(\"e\") == 1", "def check(strlen):\n\tassert strlen(\"ktb\") == 3", "def check(strlen):\n\tassert strlen(\"mlibcojl\") == 8", "def check(strlen):\n\tassert strlen(\"atxezdbptfkmt\") == 13", "def check(strlen):\n\tassert strlen(\"ebs\") == 3", "def check(strlen):\n\tassert strlen(\"nys\") == 3", "def check(strlen):\n\tassert strlen(\"bfk\") == 3", "def check(strlen):\n\tassert strlen(\"i\") == 1", "def check(strlen):\n\tassert strlen(\"zoxeghlpn\") == 9", "def check(strlen):\n\tassert strlen(\"yzzbses\") == 7", "def check(strlen):\n\tassert strlen(\"frawhhhlnxbht\") == 13", "def check(strlen):\n\tassert strlen(\"q\") == 1", "def check(strlen):\n\tassert strlen(\"ocgxuaooxl\") == 10", "def check(strlen):\n\tassert strlen(\"v\") == 1", "def check(strlen):\n\tassert strlen(\"j\") == 1", "def check(strlen):\n\tassert strlen(\"wmgueqfzkeltnzs\") == 15", "def check(strlen):\n\tassert strlen(\"pf\") == 2", "def check(strlen):\n\tassert strlen(\"ul\") == 2", "def check(strlen):\n\tassert strlen(\"s\") == 1", "def check(strlen):\n\tassert strlen(\"ju\") == 2", "def check(strlen):\n\tassert strlen(\"awa\") == 3", "def check(strlen):\n\tassert strlen(\"mlymvigwgp\") == 10", "def check(strlen):\n\tassert strlen(\"dag\") == 3", "def check(strlen):\n\tassert strlen(\"mltzwtijfa\") == 10", "def check(strlen):\n\tassert strlen(\"kvkjlinq\") == 8", "def check(strlen):\n\tassert strlen('') == 0", "def check(strlen):\n\tassert strlen(\"y\") == 1", "def check(strlen):\n\tassert strlen(\"synqrbip\") == 8", "def check(strlen):\n\tassert strlen(\"stf\") == 3", "def check(strlen):\n\tassert strlen(\"t\") == 1", "def check(strlen):\n\tassert strlen(\"o\") == 1", "def check(strlen):\n\tassert strlen(\"uikrinzshur\") == 11", "def check(strlen):\n\tassert strlen(\"f\") == 1", "def check(strlen):\n\tassert strlen(\"c\") == 1", "def check(strlen):\n\tassert strlen(\"ri\") == 2", "def check(strlen):\n\tassert strlen(\"fghpnpcwbtt\") == 11", "def check(strlen):\n\tassert strlen(\"hnleeqiivdnkcmg\") == 15", "def check(strlen):\n\tassert strlen(\"z\") == 1", "def check(strlen):\n\tassert strlen(\"hf\") == 2", "def check(strlen):\n\tassert strlen(\"ysgcoonffvro\") == 12", "def check(strlen):\n\tassert strlen(\"htu\") == 3", "def check(strlen):\n\tassert strlen(\"dktbzie\") == 7", "def check(strlen):\n\tassert strlen(\"nda\") == 3", "def check(strlen):\n\tassert strlen(\"lcyfivgvsc\") == 10", "def check(strlen):\n\tassert strlen(\"ovx\") == 3", "def check(strlen):\n\tassert strlen(\"n\") == 1", "def check(strlen):\n\tassert strlen(\"nkcxhu\") == 6", "def check(strlen):\n\tassert strlen(\"ioxinphe\") == 8", "def check(strlen):\n\tassert strlen(\"eldxchtrwpt\") == 11", "def check(strlen):\n\tassert strlen(\"irxccu\") == 6", "def check(strlen):\n\tassert strlen(\"wmprqbpl\") == 8", "def check(strlen):\n\tassert strlen(\"d\") == 1", "def check(strlen):\n\tassert strlen(\"iiapjyy\") == 7", "def check(strlen):\n\tassert strlen(\"he\") == 2", "def check(strlen):\n\tassert strlen(\"xl\") == 2", "def check(strlen):\n\tassert strlen(\"k\") == 1", "def check(strlen):\n\tassert strlen(\"qoaiffxdphe\") == 11", "def check(strlen):\n\tassert strlen(\"jjw\") == 3", "def check(strlen):\n\tassert strlen(\"gok\") == 3", "def check(strlen):\n\tassert strlen(\"sk\") == 2", "def check(strlen):\n\tassert strlen(\"ppfoxwul\") == 8", "def check(strlen):\n\tassert strlen(\"zq\") == 2", "def check(strlen):\n\tassert strlen(\"kehslysfoychuai\") == 15", "def check(strlen):\n\tassert strlen(\"xjtufvdxuuo\") == 11", "def check(strlen):\n\tassert strlen(\"ukycdfhgxcltpl\") == 14", "def check(strlen):\n\tassert strlen(\"b\") == 1", "def check(strlen):\n\tassert strlen(\"w\") == 1", "def check(strlen):\n\tassert strlen(\"hctqxmha\") == 8", "def check(strlen):\n\tassert strlen(\"ljrzldsvk\") == 9", "def check(strlen):\n\tassert strlen(\"a\") == 1", "def check(strlen):\n\tassert strlen(\"bgrmakcbqpwyi\") == 13", "def check(strlen):\n\tassert strlen(\"lvgulxd\") == 7", "def check(strlen):\n\tassert strlen(\"vnaevhphi\") == 9", "def check(strlen):\n\tassert strlen(\"rt\") == 2", "def check(strlen):\n\tassert strlen(\"zrmygypu\") == 8", "def check(strlen):\n\tassert strlen(\"zdr\") == 3", "def check(strlen):\n\tassert strlen(\"tov\") == 3", "def check(strlen):\n\tassert strlen(\"rnlrddf\") == 7", "def check(strlen):\n\tassert strlen(\"u\") == 1", "def check(strlen):\n\tassert strlen(\"ayuzaiwhczpz\") == 12", "def check(strlen):\n\tassert strlen(\"ucwkvbqsngpf\") == 12", "def check(strlen):\n\tassert strlen(\"xt\") == 2", "def check(strlen):\n\tassert strlen(\"gtamobyhrvxgvsr\") == 15", "def check(strlen):\n\tassert strlen(\"luvpxrpa\") == 8", "def check(strlen):\n\tassert strlen('x') == 1", "def check(strlen):\n\tassert strlen(\"zpjtjbmjiapixsz\") == 15", "def check(strlen):\n\tassert strlen(\"ib\") == 2"], "test_case_list": ["assert strlen('asdasnakj') == 9", "assert strlen(\"vc\") == 2", "assert strlen(\"yb\") == 2", "assert strlen(\"jogcyuitzjrvh\") == 13", "assert strlen(\"ucomfyiviag\") == 11", "assert strlen(\"ayl\") == 3", "assert strlen(\"m\") == 1", "assert strlen(\"e\") == 1", "assert strlen(\"ktb\") == 3", "assert strlen(\"mlibcojl\") == 8", "assert strlen(\"atxezdbptfkmt\") == 13", "assert strlen(\"ebs\") == 3", "assert strlen(\"nys\") == 3", "assert strlen(\"bfk\") == 3", "assert strlen(\"i\") == 1", "assert strlen(\"zoxeghlpn\") == 9", "assert strlen(\"yzzbses\") == 7", "assert strlen(\"frawhhhlnxbht\") == 13", "assert strlen(\"q\") == 1", "assert strlen(\"ocgxuaooxl\") == 10", "assert strlen(\"v\") == 1", "assert strlen(\"j\") == 1", "assert strlen(\"wmgueqfzkeltnzs\") == 15", "assert strlen(\"pf\") == 2", "assert strlen(\"ul\") == 2", "assert strlen(\"s\") == 1", "assert strlen(\"ju\") == 2", "assert strlen(\"awa\") == 3", "assert strlen(\"mlymvigwgp\") == 10", "assert strlen(\"dag\") == 3", "assert strlen(\"mltzwtijfa\") == 10", "assert strlen(\"kvkjlinq\") == 8", "assert strlen('') == 0", "assert strlen(\"y\") == 1", "assert strlen(\"synqrbip\") == 8", "assert strlen(\"stf\") == 3", "assert strlen(\"t\") == 1", "assert strlen(\"o\") == 1", "assert strlen(\"uikrinzshur\") == 11", "assert strlen(\"f\") == 1", "assert strlen(\"c\") == 1", "assert strlen(\"ri\") == 2", "assert strlen(\"fghpnpcwbtt\") == 11", "assert strlen(\"hnleeqiivdnkcmg\") == 15", "assert strlen(\"z\") == 1", "assert strlen(\"hf\") == 2", "assert strlen(\"ysgcoonffvro\") == 12", "assert strlen(\"htu\") == 3", "assert strlen(\"dktbzie\") == 7", "assert strlen(\"nda\") == 3", "assert strlen(\"lcyfivgvsc\") == 10", "assert strlen(\"ovx\") == 3", "assert strlen(\"n\") == 1", "assert strlen(\"nkcxhu\") == 6", "assert strlen(\"ioxinphe\") == 8", "assert strlen(\"eldxchtrwpt\") == 11", "assert strlen(\"irxccu\") == 6", "assert strlen(\"wmprqbpl\") == 8", "assert strlen(\"d\") == 1", "assert strlen(\"iiapjyy\") == 7", "assert strlen(\"he\") == 2", "assert strlen(\"xl\") == 2", "assert strlen(\"k\") == 1", "assert strlen(\"qoaiffxdphe\") == 11", "assert strlen(\"jjw\") == 3", "assert strlen(\"gok\") == 3", "assert strlen(\"sk\") == 2", "assert strlen(\"ppfoxwul\") == 8", "assert strlen(\"zq\") == 2", "assert strlen(\"kehslysfoychuai\") == 15", "assert strlen(\"xjtufvdxuuo\") == 11", "assert strlen(\"ukycdfhgxcltpl\") == 14", "assert strlen(\"b\") == 1", "assert strlen(\"w\") == 1", "assert strlen(\"hctqxmha\") == 8", "assert strlen(\"ljrzldsvk\") == 9", "assert strlen(\"a\") == 1", "assert strlen(\"bgrmakcbqpwyi\") == 13", "assert strlen(\"lvgulxd\") == 7", "assert strlen(\"vnaevhphi\") == 9", "assert strlen(\"rt\") == 2", "assert strlen(\"zrmygypu\") == 8", "assert strlen(\"zdr\") == 3", "assert strlen(\"tov\") == 3", "assert strlen(\"rnlrddf\") == 7", "assert strlen(\"u\") == 1", "assert strlen(\"ayuzaiwhczpz\") == 12", "assert strlen(\"ucwkvbqsngpf\") == 12", "assert strlen(\"xt\") == 2", "assert strlen(\"gtamobyhrvxgvsr\") == 15", "assert strlen(\"luvpxrpa\") == 8", "assert strlen('x') == 1", "assert strlen(\"zpjtjbmjiapixsz\") == 15", "assert strlen(\"ib\") == 2"], "nl": " Return length of given string\n    ", "func": "def strlen(string: str) -> int:", "examples": ">>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    ", "repair_prompt": ["def strlen(string: str) -> int:\t\n'''Return length of given string. Ensure you handle both ASCII and Unicode characters correctly in your implementation.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"\n    Calculate the length of the given string, supporting both ASCII and Unicode characters.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the string as an integer.\n    \"\"\"\n    return len(string)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function's capability\n    test_strings = [\n        \"Hello, World!\",  # ASCII characters\n        \"\u3053\u3093\u306b\u3061\u306f\",      # Unicode characters (Japanese)\n        \"\ud83d\ude0a\ud83c\udf1f\ud83d\ude80\",         # Emoji characters\n        \"\",              # Empty string\n        \"1234567890\"     # Numeric characters\n    ]\n\n    for test_string in test_strings:\n        print(f\"The length of '{test_string}' is {strlen(test_string)}.\")\n", "from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"\n    Calculate the length of the given string, supporting both ASCII and Unicode characters.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the string as an integer.\n    \"\"\"\n    return len(string)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the functionality of the strlen function\n    print(strlen('abc'))  # Expected output: 3\n    print(strlen(''))  # Expected output: 0\n    print(strlen('\u3053\u3093\u306b\u3061\u306f'))  # Expected output: 5\n", "from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"Calculate the length of the given string, supporting both ASCII and Unicode characters.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the string as an integer.\n    \"\"\"\n    return len(string)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to verify the function works as expected\n    test_cases = [\n        (\"example\", 7),\n        (\"\u3053\u3093\u306b\u3061\u306f\", 5),\n        (\"\", 0),\n        (\"1234567890\", 10),\n        (\"\ud83d\ude00\ud83d\ude03\ud83d\ude04\ud83d\ude01\ud83d\ude06\", 5),\n        (\"a\" * 1000, 1000)  # Large string test\n    ]\n\n    for test_string, expected_length in test_cases:\n        result = strlen(test_string)\n        assert result == expected_length, f\"Test failed for input: {test_string}. Expected: {expected_length}, Got: {result}\"\n    \n    print(\"All tests passed.\")\n", "from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"\n    Calculate the length of the given string, supporting both ASCII and Unicode characters.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the string as an integer.\n\n    Raises:\n        TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    return len(string)\n", "from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"\n    Return the length of the given string, supporting both ASCII and Unicode characters.\n    \n    Parameters:\n    string (str): The string whose length is to be calculated.\n    \n    Returns:\n    int: The length of the string.\n    \n    Examples:\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    >>> strlen('\u3053\u3093\u306b\u3061\u306f')\n    5\n    \"\"\"\n    return len(string)\n", "from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"Calculate the length of the given string, supporting both ASCII and Unicode characters.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the string as an integer.\n    \"\"\"\n    return len(string)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function usage\n    print(strlen('abc'))  # Expected output: 3\n    print(strlen(''))     # Expected output: 0\n    print(strlen('\u4f60\u597d'))  # Expected output: 2\n", "from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"\n    Calculate the length of the given string, supporting both ASCII and Unicode characters.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the string as an integer.\n    \"\"\"\n    return len(string)\n", "from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"Calculate the length of a given string, supporting both ASCII and Unicode characters.\n\n    This function uses Python's built-in len() function, which is optimized for performance\n    and supports Unicode natively. It ensures compatibility across different Python versions\n    and provides accurate results for strings of any size.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the string as an integer.\n    \"\"\"\n    return len(string)\n", "from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"\n    Calculate the length of the given string, supporting both ASCII and Unicode characters.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the string as an integer.\n    \"\"\"\n    return len(string)\n", "from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"\n    Calculate the length of the given string, supporting both ASCII and Unicode characters.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the string as an integer.\n    \"\"\"\n    return len(string)\n"], "plans": ["requirement analysis:\nThe function must accurately calculate the length of strings containing both ASCII and Unicode characters. It should be optimized for performance to handle large strings efficiently.\nrequirement pool:\n- Implement string length calculation for both ASCII and Unicode.\n- Optimize the function for performance with large strings.\n- Ensure compatibility with various Python versions.\n- Include comprehensive test cases for different character sets.\n- Document the function usage and edge cases.\nWe will use Python's built-in len() function, which is optimized for both ASCII and Unicode characters. This function is highly efficient and widely used for determining string length, making it suitable for handling large strings. We will ensure compatibility with various Python versions and include comprehensive test cases to cover different character sets.\n", "requirement analysis:\nThe function must accurately calculate the length of strings, including those with Unicode characters, and handle edge cases like empty strings. Performance optimization is crucial for handling large strings efficiently.\nrequirement pool:\n- Implement string length calculation for both ASCII and Unicode.\n- Ensure the function handles empty strings correctly.\n- Optimize performance for large strings.\n- Provide comprehensive documentation and examples.\n- Include error handling for invalid inputs.\nWe will implement a function that leverages Python's built-in capabilities to handle both ASCII and Unicode characters efficiently. The built-in len() function in Python is already optimized for performance and supports Unicode, making it an ideal choice for this requirement. We will wrap this functionality in a custom function to meet the requirement of providing a specific interface.\n", "requirement analysis:\nThe function must accurately calculate the length of strings, including those with Unicode characters, to ensure compatibility with international text. Performance should be optimized for handling large strings efficiently.\nrequirement pool:\n- Implement string length calculation for ASCII and Unicode.\n- Optimize performance for large strings.\n- Ensure compatibility with various text encodings.\n- Provide comprehensive test cases for different string types.\n- Document the function usage and edge cases.\nWe will implement a function that calculates the length of a string using Python's built-in capabilities, which inherently support both ASCII and Unicode characters. The built-in len() function is optimized for performance and handles large strings efficiently, making it suitable for our requirements. We will provide comprehensive test cases to ensure the function's accuracy and performance.\n", "requirement analysis:\nThe function must accurately calculate the length of strings containing both ASCII and Unicode characters. It should be optimized for performance, especially when dealing with large strings, to ensure it meets the needs of developers working with diverse text data.\nrequirement pool:\n- Implement accurate string length calculation for ASCII and Unicode.\n- Optimize performance for handling large strings.\n- Ensure compatibility with existing Python string operations.\n- Provide comprehensive documentation and examples.\n- Include error handling for non-string inputs.\nWe will implement a function that leverages Python's built-in capabilities to handle both ASCII and Unicode characters efficiently. The function will use Python's built-in len() function, which is optimized for performance and supports Unicode natively. This approach ensures compatibility with existing Python string operations and provides accurate results for both ASCII and Unicode strings. We will also include error handling to raise exceptions for non-string inputs, ensuring robustness.\n", "requirement analysis:\nThe function must accurately calculate the length of strings, including those with Unicode characters, and perform efficiently even with large inputs.\nrequirement pool:\n- Accurately calculate string length\n- Support Unicode characters\n- Optimize for performance with large strings\n- Provide clear documentation and examples\n- Ensure compatibility with various Python versions\nWe will implement a simple function using Python's built-in capabilities to calculate the length of a string. Python's built-in `len()` function is highly efficient and supports both ASCII and Unicode characters, making it an ideal choice for this requirement. This approach ensures that the function is optimized for performance, even with large strings, and accurately handles Unicode characters.\n", "requirement analysis:\nThe function must accurately calculate the length of strings, including those with Unicode characters, and handle edge cases like empty strings efficiently.\nrequirement pool:\n- Implement accurate length calculation for Unicode strings.\n- Ensure function handles empty strings correctly.\n- Optimize performance for large strings.\n- Test function across different character sets.\n- Document usage and edge cases.\nWe will use Python's built-in len() function, which is optimized for both ASCII and Unicode strings. This function is efficient and handles edge cases like empty strings naturally. Given the competitive analysis, Python's len() function is already highly accurate and performant, making it a suitable choice for our requirements.\n", "requirement analysis:\nThe function must accurately calculate the length of strings, including those with Unicode characters, to ensure compatibility with international text. Performance should be optimized for handling large strings efficiently.\nrequirement pool:\n- Implement string length calculation for ASCII and Unicode.\n- Optimize performance for large strings.\n- Ensure compatibility with various text encodings.\n- Provide comprehensive test cases for different string types.\n- Document the function usage and edge cases.\nWe will implement a function that leverages Python's built-in capabilities to handle both ASCII and Unicode characters efficiently. The built-in len() function in Python is optimized for performance and accuracy, making it suitable for our requirements. We will wrap this functionality in a custom function to meet the requirement of providing a specific interface.\n", "requirement analysis:\nThe function must accurately calculate the length of strings containing both ASCII and Unicode characters. It should be optimized for performance, especially with large strings, and provide consistent results across different character sets.\nrequirement pool:\n- Implement string length calculation for both ASCII and Unicode.\n- Optimize the function for performance with large strings.\n- Ensure compatibility with various Python versions.\n- Provide comprehensive test cases for different character sets.\n- Document the function usage and edge cases.\nWe will implement a function that leverages Python's built-in capabilities to handle both ASCII and Unicode characters efficiently. The function will utilize the built-in len() function, which is optimized for performance and supports Unicode natively. This approach ensures compatibility across different Python versions and provides accurate results for strings of any size.\n", "requirement analysis:\nThe function must accurately calculate the length of strings, including those with Unicode characters, to ensure compatibility with international text. It should be optimized for performance to handle large strings efficiently.\nrequirement pool:\n- Implement the main function to calculate string length.\n- Ensure support for both ASCII and Unicode characters.\n- Optimize the function for performance with large strings.\n- Include comprehensive test cases for various string types.\n- Document the function usage and edge cases.\nWe will implement a simple function using Python's built-in capabilities to calculate the length of a string. Python's len() function inherently supports both ASCII and Unicode characters, making it an optimal choice for this requirement. This approach ensures high accuracy and performance, even for large strings, as Python's internal optimizations handle these cases efficiently.\n", "requirement analysis:\nThe function must accurately calculate the length of strings, including those with Unicode characters. It should be optimized for performance to handle large strings efficiently.\nrequirement pool:\n- Implement string length calculation for both ASCII and Unicode.\n- Optimize the function for performance with large strings.\n- Ensure compatibility with existing Python string handling functions.\nWe will implement a function that calculates the length of a string using Python's built-in capabilities, which inherently support both ASCII and Unicode characters. The built-in len() function is optimized for performance and handles large strings efficiently, making it an ideal choice for this requirement.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [94, 94, 94, 94, 94, 94, 94, 94, 94, 94], "completion": "from typing import List\n## main.py\n\ndef strlen(string: str) -> int:\n    \"\"\"\n    Calculate the length of the given string, supporting both ASCII and Unicode characters.\n\n    Args:\n        string (str): The input string whose length is to be calculated.\n\n    Returns:\n        int: The length of the string as an integer.\n    \"\"\"\n    return len(string)\n", "passed": true, "pass": true, "pass_num": 10, "round": 191, "mutate_method": "add_1_sentence_at_end", "parent_index": 21}
