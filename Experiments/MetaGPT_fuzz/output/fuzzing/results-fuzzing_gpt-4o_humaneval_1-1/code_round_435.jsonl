{"task_id": "HumanEval/93", "prompt": "def encode(message):\t\n'''Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the English alphabet. Assume only letters. Make sure to handle both uppercase and lowercase vowels and swap their cases appropriately.\nExamples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    '''", "entry_point": "encode", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "test": ["def check(encode):\n\tassert encode(\"ZUvOnpFUjJGGWcJQYQmTY W\") == 'zwVqNPfwJjggwCjqyqMty w'", "def check(encode):\n\tassert encode(\"SgPXbDsCxLlYIAFFhhIbRfXHjaZ\") == 'sGpxBdScXlLykcffHHkBrFxhJCz'", "def check(encode):\n\tassert encode(\"TEPUFH\") == 'tgpwfh'", "def check(encode):\n\tassert encode(\"FKRTJOGJR\") == 'fkrtjqgjr'", "def check(encode):\n\tassert encode(\"GWHK\") == 'gwhk'", "def check(encode):\n\tassert encode(\"ElaZse dYXHgdVq\") == 'gLCzSG DyxhGDvQ'", "def check(encode):\n\tassert encode(\"SETPXKRTE\") == 'sgtpxkrtg'", "def check(encode):\n\tassert encode(\"JRG\") == 'jrg'", "def check(encode):\n\tassert encode(\"XQAXbNmLpmobUzQtNvacz\") == 'xqcxBnMlPMQBwZqTnVCCZ'", "def check(encode):\n\tassert encode(\"FPENQAZGK\") == 'fpgnqczgk'", "def check(encode):\n\tassert encode(\"TEIPDCVYN\") == 'tgkpdcvyn'", "def check(encode):\n\tassert encode(\"gIVppcmTSMtmvhg ZjTdBs\") == 'GkvPPCMtsmTMVHG zJtDbS'", "def check(encode):\n\tassert encode(\"nds\") == 'NDS'", "def check(encode):\n\tassert encode(\"CVLBOWSP\") == 'cvlbqwsp'", "def check(encode):\n\tassert encode(\"BRVLN\") == 'brvln'", "def check(encode):\n\tassert encode(\"hnbzSknod dSFfSG\") == 'HNBZsKNQD DsfFsg'", "def check(encode):\n\tassert encode(\"BnHJZme\") == 'bNhjzMG'", "def check(encode):\n\tassert encode(\"zTBpeQNFrEsJ\") == 'ZtbPGqnfRgSj'", "def check(encode):\n\tassert encode(\"IstxgcEpahvkDruGyiK\") == 'kSTXGCgPCHVKdRWgYKk'", "def check(encode):\n\tassert encode(\"HzEMwPWyLehG jFTacHALOraUoB\") == 'hZgmWpwYlGHg JftCChclqRCwQb'", "def check(encode):\n\tassert encode(\" BuOTEofYkQJauJaclURS\") == ' bWqtgQFyKqjCWjCCLwrs'", "def check(encode):\n\tassert encode(\"FHEcvmCWtbF aJg\") == 'fhgCVMcwTBf CjG'", "def check(encode):\n\tassert encode(\"RHO\") == 'rhq'", "def check(encode):\n\tassert encode(\"OJMQGVupooekW\") == 'qjmqgvWPQQGKw'", "def check(encode):\n\tassert encode(\"DARS\") == 'dcrs'", "def check(encode):\n\tassert encode(\"ZTTSSFEL\") == 'zttssfgl'", "def check(encode):\n\tassert encode(\"kkAuzPMaJbY\") == 'KKcWZpmCjBy'", "def check(encode):\n\tassert encode(\"kwfcMJBvOIscxpuRJYMQxX\") == 'KWFCmjbVqkSCXPWrjymqXx'", "def check(encode):\n\tassert encode(\"pUgmIEYWAnzEuqFElVbVs\") == 'PwGMkgywcNZgWQfgLvBvS'", "def check(encode):\n\tassert encode(\"kzLQOefkAweHvGBycjn\") == 'KZlqqGFKcWGhVgbYCJN'", "def check(encode):\n\tassert encode(\"CLY\") == 'cly'", "def check(encode):\n\tassert encode(\"GUAU\") == 'gwcw'", "def check(encode):\n\tassert encode(\"YcxmhivPyJIw\") == 'yCXMHKVpYjkW'", "def check(encode):\n\tassert encode('TEST') == 'tgst'", "def check(encode):\n\tassert encode(\"oSYVfHWo kWWvnziVt\") == 'QsyvFhwQ KwwVNZKvT'", "def check(encode):\n\tassert encode(\"TXAFFIW\") == 'txcffkw'", "def check(encode):\n\tassert encode(\"EORCSH\") == 'gqrcsh'", "def check(encode):\n\tassert encode(\"ETMDXUEBC\") == 'gtmdxwgbc'", "def check(encode):\n\tassert encode(\"TQRZQWU\") == 'tqrzqww'", "def check(encode):\n\tassert encode(\"DPGWLEVT\") == 'dpgwlgvt'", "def check(encode):\n\tassert encode(\"PRREkliEYbvcKGoNqvSfsJ\") == 'prrgKLKgyBVCkgQnQVsFSj'", "def check(encode):\n\tassert encode(\"WWBsZMYcpjfNzyCeVVgesJoJhjy\") == 'wwbSzmyCPJFnZYcGvvGGSjQjHJY'", "def check(encode):\n\tassert encode(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg'", "def check(encode):\n\tassert encode(\"gnJhAIkj\") == 'GNjHckKJ'", "def check(encode):\n\tassert encode(\"OHUJlX\") == 'qhwjLx'", "def check(encode):\n\tassert encode(\"EoisHGBfMOUHhIftINGIdF DJqugm\") == 'gQKShgbFmqwhHkFTkngkDf djQWGM'", "def check(encode):\n\tassert encode(\"JJWNGDOT\") == 'jjwngdqt'", "def check(encode):\n\tassert encode(\"DXZBFN\") == 'dxzbfn'", "def check(encode):\n\tassert encode(\"DVKfMTlbOESs\") == 'dvkFmtLBqgsS'", "def check(encode):\n\tassert encode(\"UEeG\") == 'wgGg'", "def check(encode):\n\tassert encode(\"BCKPNMVO\") == 'bckpnmvq'", "def check(encode):\n\tassert encode(\"IMIJTK\") == 'kmkjtk'", "def check(encode):\n\tassert encode(\"ZyWrbakVZJKkkAmmKNRmUPDCi\") == 'zYwRBCKvzjkKKcMMknrMwpdcK'", "def check(encode):\n\tassert encode(\"URMC\") == 'wrmc'", "def check(encode):\n\tassert encode(\"CNJ\") == 'cnj'", "def check(encode):\n\tassert encode(\"grukYfBTTJtVX\") == 'GRWKyFbttjTvx'", "def check(encode):\n\tassert encode(\"FDMjHnZkEhmsNmlJNItsJQlasO\") == 'fdmJhNzKgHMSnMLjnkTSjqLCSq'", "def check(encode):\n\tassert encode(\"rRrZwWEjxTIMMSNiS\") == 'RrRzWwgJXtkmmsnKs'", "def check(encode):\n\tassert encode(\"LHfTwSNWVA\") == 'lhFtWsnwvc'", "def check(encode):\n\tassert encode(\"QwJoXypNyPZVVwtdhDxHhBKXS\") == 'qWjQxYPnYpzvvWTDHdXhHbkxs'", "def check(encode):\n\tassert encode(\"cJbiuaENQvBuUexfhUuJRbvP\") == 'CjBKWCgnqVbWwGXFHwWjrBVp'", "def check(encode):\n\tassert encode(\"Sjf\") == 'sJF'", "def check(encode):\n\tassert encode(\"DZAXVXQ\") == 'dzcxvxq'", "def check(encode):\n\tassert encode(\"HNDsWbIhInLlAGVoRFZw\") == 'hndSwBkHkNlLcgvQrfzW'", "def check(encode):\n\tassert encode(\"YaFsT\") == 'yCfSt'", "def check(encode):\n\tassert encode(\"WNYEUHDUE\") == 'wnygwhdwg'", "def check(encode):\n\tassert encode(\"ROWVCETC\") == 'rqwvcgtc'", "def check(encode):\n\tassert encode(\"Hmj\") == 'hMJ'", "def check(encode):\n\tassert encode(\"ApBJTja\") == 'cPbjtJC'", "def check(encode):\n\tassert encode(\"NNoTLfuGwSHDJdTlRXSyC\") == 'nnQtlFWgWshdjDtLrxsYc'", "def check(encode):\n\tassert encode(\"pvQeerpuzVbW\") == 'PVqGGRPWZvBw'", "def check(encode):\n\tassert encode(\"LCLBDYXRN\") == 'lclbdyxrn'", "def check(encode):\n\tassert encode(\"RcQZkLoILujJnUJ BK lQgY\") == 'rCqzKlQklWJjNwj bk LqGy'", "def check(encode):\n\tassert encode(\"IzXkNbTRYEDDLFF\") == 'kZxKnBtrygddlff'", "def check(encode):\n\tassert encode(\"bBSM\") == 'Bbsm'", "def check(encode):\n\tassert encode(\"rhgAVJOAnVugEnMSSKWsc\") == 'RHGcvjqcNvWGgNmsskwSC'", "def check(encode):\n\tassert encode(\"KTBXLNF\") == 'ktbxlnf'", "def check(encode):\n\tassert encode(\"gEQTanRJKhLxXlJDZQHPwvbnq\") == 'GgqtCNrjkHlXxLjdzqhpWVBNQ'", "def check(encode):\n\tassert encode(\"EjhSPNSJMPQ\") == 'gJHspnsjmpq'", "def check(encode):\n\tassert encode(\"TLU\") == 'tlw'", "def check(encode):\n\tassert encode(\"rjXQvzxCjzaWcAuNeOiaXPpdYVoxCt\") == 'RJxqVZXcJZCwCcWnGqKCxpPDyvQXcT'", "def check(encode):\n\tassert encode(\"ZVS\") == 'zvs'", "def check(encode):\n\tassert encode(\"BODPGNO\") == 'bqdpgnq'", "def check(encode):\n\tassert encode('This is a message') == 'tHKS KS C MGSSCGG'", "def check(encode):\n\tassert encode(\"jZheceVgKgTLjRwOLeRrrtwbE\") == 'JzHGCGvGkGtlJrWqlGrRRTWBg'", "def check(encode):\n\tassert encode(\"AZOCBJD\") == 'czqcbjd'", "def check(encode):\n\tassert encode(\"HrRcDpPaxYYXID\") == 'hRrCdPpCXyyxkd'", "def check(encode):\n\tassert encode(\"DNHIUUVX\") == 'dnhkwwvx'", "def check(encode):\n\tassert encode(\"TEGPKXNB\") == 'tggpkxnb'", "def check(encode):\n\tassert encode(\"OBEcrSHMuaCS\") == 'qbgCRshmWCcs'", "def check(encode):\n\tassert encode(\"jAqqTMHiqs\") == 'JcQQtmhKQS'", "def check(encode):\n\tassert encode(\"IYS\") == 'kys'", "def check(encode):\n\tassert encode(\"HKWXPGN\") == 'hkwxpgn'", "def check(encode):\n\tassert encode(\"aZPgQ vnmhPPOLdLIutuJO\") == 'CzpGq VNMHppqlDlkWTWjq'", "def check(encode):\n\tassert encode(\"fZoHFcbTcLTUWG VdZ\") == 'FzQhfCBtCltwwg vDz'", "def check(encode):\n\tassert encode(\"SSMAQL\") == 'ssmcql'", "def check(encode):\n\tassert encode(\"ITNaCJiUmgbbsXbJggeE\") == 'ktnCcjKwMGBBSxBjGGGg'", "def check(encode):\n\tassert encode(\"PKKLGPQOY\") == 'pkklgpqqy'", "def check(encode):\n\tassert encode(\"XgnELkHHAAUiCCpSfJ\") == 'xGNglKhhccwKccPsFj'", "def check(encode):\n\tassert encode(\"jjHqlFViqHz\") == 'JJhQLfvKQhZ'", "def check(encode):\n\tassert encode('Mudasir') == 'mWDCSKR'", "def check(encode):\n\tassert encode(\"OpzdoaiWPrtwH\") == 'qPZDQCKwpRTWh'", "def check(encode):\n\tassert encode(\" dNVahxVjKzB JTneIFjKfXsk \") == ' DnvCHXvJkZb jtNGkfJkFxSK '", "def check(encode):\n\tassert encode(\"c XkUXkBchEddL\") == 'C xKwxKbCHgDDl'", "def check(encode):\n\tassert encode(\"PSBSBey\") == 'psbsbGY'", "def check(encode):\n\tassert encode(\"mejsPoZxTWVZINkltbTC\") == 'MGJSpQzXtwvzknKLTBtc'", "def check(encode):\n\tassert encode(\"RkeGn HyKwTJKYqIJSWnu\") == 'rKGgN hYkWtjkyQkjswNW'", "def check(encode):\n\tassert encode(\"JMFDUNNFN\") == 'jmfdwnnfn'", "def check(encode):\n\tassert encode(\"DWUOPpLjiGck\") == 'dwwqpPlJKgCK'", "def check(encode):\n\tassert encode(\"KtvgHCwhJPHhZoPrTShCCFjb\") == 'kTVGhcWHjphHzQpRtsHccfJB'", "def check(encode):\n\tassert encode(\"BGPB\") == 'bgpb'", "def check(encode):\n\tassert encode(\"FVABgUJcvAO\") == 'fvcbGwjCVcq'", "def check(encode):\n\tassert encode(\"LPVHOUZC\") == 'lpvhqwzc'", "def check(encode):\n\tassert encode(\"vFk rhQEfvOP ZgydPEhvIVWD\") == 'VfK RHqgFVqp zGYDpgHVkvwd'", "def check(encode):\n\tassert encode(\"QRX\") == 'qrx'", "def check(encode):\n\tassert encode(\"DXV\") == 'dxv'", "def check(encode):\n\tassert encode(\"qmjcLnfY lObRZrX\") == 'QMJClNFy LqBrzRx'", "def check(encode):\n\tassert encode('YES') == 'ygs'", "def check(encode):\n\tassert encode(\"lljsyoqvdrgHLkvty\") == 'LLJSYQQVDRGhlKVTY'", "def check(encode):\n\tassert encode(\"OSWDQFIR\") == 'qswdqfkr'", "def check(encode):\n\tassert encode(\"ZfDqK\") == 'zFdQk'", "def check(encode):\n\tassert encode(\"BYRAIVE\") == 'byrckvg'", "def check(encode):\n\tassert encode(\"AGMBICYE\") == 'cgmbkcyg'", "def check(encode):\n\tassert encode(\"kqmseH\") == 'KQMSGh'", "def check(encode):\n\tassert encode(\"WYLLSZM\") == 'wyllszm'", "def check(encode):\n\tassert encode(\"hgxUMf\") == 'HGXwmF'", "def check(encode):\n\tassert encode(\"xOzJhrPNcVCLkJeMgwsBcYm\") == 'XqZjHRpnCvclKjGmGWSbCyM'", "def check(encode):\n\tassert encode(\"rKELArbzBNVyXuUr\") == 'RkglcRBZbnvYxWwR'", "def check(encode):\n\tassert encode(\"WNRIIJWGO\") == 'wnrkkjwgq'", "def check(encode):\n\tassert encode(\"UNVEY\") == 'wnvgy'"], "test_case_list": ["assert encode(\"ZUvOnpFUjJGGWcJQYQmTY W\") == 'zwVqNPfwJjggwCjqyqMty w'", "assert encode(\"SgPXbDsCxLlYIAFFhhIbRfXHjaZ\") == 'sGpxBdScXlLykcffHHkBrFxhJCz'", "assert encode(\"TEPUFH\") == 'tgpwfh'", "assert encode(\"FKRTJOGJR\") == 'fkrtjqgjr'", "assert encode(\"GWHK\") == 'gwhk'", "assert encode(\"ElaZse dYXHgdVq\") == 'gLCzSG DyxhGDvQ'", "assert encode(\"SETPXKRTE\") == 'sgtpxkrtg'", "assert encode(\"JRG\") == 'jrg'", "assert encode(\"XQAXbNmLpmobUzQtNvacz\") == 'xqcxBnMlPMQBwZqTnVCCZ'", "assert encode(\"FPENQAZGK\") == 'fpgnqczgk'", "assert encode(\"TEIPDCVYN\") == 'tgkpdcvyn'", "assert encode(\"gIVppcmTSMtmvhg ZjTdBs\") == 'GkvPPCMtsmTMVHG zJtDbS'", "assert encode(\"nds\") == 'NDS'", "assert encode(\"CVLBOWSP\") == 'cvlbqwsp'", "assert encode(\"BRVLN\") == 'brvln'", "assert encode(\"hnbzSknod dSFfSG\") == 'HNBZsKNQD DsfFsg'", "assert encode(\"BnHJZme\") == 'bNhjzMG'", "assert encode(\"zTBpeQNFrEsJ\") == 'ZtbPGqnfRgSj'", "assert encode(\"IstxgcEpahvkDruGyiK\") == 'kSTXGCgPCHVKdRWgYKk'", "assert encode(\"HzEMwPWyLehG jFTacHALOraUoB\") == 'hZgmWpwYlGHg JftCChclqRCwQb'", "assert encode(\" BuOTEofYkQJauJaclURS\") == ' bWqtgQFyKqjCWjCCLwrs'", "assert encode(\"FHEcvmCWtbF aJg\") == 'fhgCVMcwTBf CjG'", "assert encode(\"RHO\") == 'rhq'", "assert encode(\"OJMQGVupooekW\") == 'qjmqgvWPQQGKw'", "assert encode(\"DARS\") == 'dcrs'", "assert encode(\"ZTTSSFEL\") == 'zttssfgl'", "assert encode(\"kkAuzPMaJbY\") == 'KKcWZpmCjBy'", "assert encode(\"kwfcMJBvOIscxpuRJYMQxX\") == 'KWFCmjbVqkSCXPWrjymqXx'", "assert encode(\"pUgmIEYWAnzEuqFElVbVs\") == 'PwGMkgywcNZgWQfgLvBvS'", "assert encode(\"kzLQOefkAweHvGBycjn\") == 'KZlqqGFKcWGhVgbYCJN'", "assert encode(\"CLY\") == 'cly'", "assert encode(\"GUAU\") == 'gwcw'", "assert encode(\"YcxmhivPyJIw\") == 'yCXMHKVpYjkW'", "assert encode('TEST') == 'tgst'", "assert encode(\"oSYVfHWo kWWvnziVt\") == 'QsyvFhwQ KwwVNZKvT'", "assert encode(\"TXAFFIW\") == 'txcffkw'", "assert encode(\"EORCSH\") == 'gqrcsh'", "assert encode(\"ETMDXUEBC\") == 'gtmdxwgbc'", "assert encode(\"TQRZQWU\") == 'tqrzqww'", "assert encode(\"DPGWLEVT\") == 'dpgwlgvt'", "assert encode(\"PRREkliEYbvcKGoNqvSfsJ\") == 'prrgKLKgyBVCkgQnQVsFSj'", "assert encode(\"WWBsZMYcpjfNzyCeVVgesJoJhjy\") == 'wwbSzmyCPJFnZYcGvvGGSjQjHJY'", "assert encode(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg'", "assert encode(\"gnJhAIkj\") == 'GNjHckKJ'", "assert encode(\"OHUJlX\") == 'qhwjLx'", "assert encode(\"EoisHGBfMOUHhIftINGIdF DJqugm\") == 'gQKShgbFmqwhHkFTkngkDf djQWGM'", "assert encode(\"JJWNGDOT\") == 'jjwngdqt'", "assert encode(\"DXZBFN\") == 'dxzbfn'", "assert encode(\"DVKfMTlbOESs\") == 'dvkFmtLBqgsS'", "assert encode(\"UEeG\") == 'wgGg'", "assert encode(\"BCKPNMVO\") == 'bckpnmvq'", "assert encode(\"IMIJTK\") == 'kmkjtk'", "assert encode(\"ZyWrbakVZJKkkAmmKNRmUPDCi\") == 'zYwRBCKvzjkKKcMMknrMwpdcK'", "assert encode(\"URMC\") == 'wrmc'", "assert encode(\"CNJ\") == 'cnj'", "assert encode(\"grukYfBTTJtVX\") == 'GRWKyFbttjTvx'", "assert encode(\"FDMjHnZkEhmsNmlJNItsJQlasO\") == 'fdmJhNzKgHMSnMLjnkTSjqLCSq'", "assert encode(\"rRrZwWEjxTIMMSNiS\") == 'RrRzWwgJXtkmmsnKs'", "assert encode(\"LHfTwSNWVA\") == 'lhFtWsnwvc'", "assert encode(\"QwJoXypNyPZVVwtdhDxHhBKXS\") == 'qWjQxYPnYpzvvWTDHdXhHbkxs'", "assert encode(\"cJbiuaENQvBuUexfhUuJRbvP\") == 'CjBKWCgnqVbWwGXFHwWjrBVp'", "assert encode(\"Sjf\") == 'sJF'", "assert encode(\"DZAXVXQ\") == 'dzcxvxq'", "assert encode(\"HNDsWbIhInLlAGVoRFZw\") == 'hndSwBkHkNlLcgvQrfzW'", "assert encode(\"YaFsT\") == 'yCfSt'", "assert encode(\"WNYEUHDUE\") == 'wnygwhdwg'", "assert encode(\"ROWVCETC\") == 'rqwvcgtc'", "assert encode(\"Hmj\") == 'hMJ'", "assert encode(\"ApBJTja\") == 'cPbjtJC'", "assert encode(\"NNoTLfuGwSHDJdTlRXSyC\") == 'nnQtlFWgWshdjDtLrxsYc'", "assert encode(\"pvQeerpuzVbW\") == 'PVqGGRPWZvBw'", "assert encode(\"LCLBDYXRN\") == 'lclbdyxrn'", "assert encode(\"RcQZkLoILujJnUJ BK lQgY\") == 'rCqzKlQklWJjNwj bk LqGy'", "assert encode(\"IzXkNbTRYEDDLFF\") == 'kZxKnBtrygddlff'", "assert encode(\"bBSM\") == 'Bbsm'", "assert encode(\"rhgAVJOAnVugEnMSSKWsc\") == 'RHGcvjqcNvWGgNmsskwSC'", "assert encode(\"KTBXLNF\") == 'ktbxlnf'", "assert encode(\"gEQTanRJKhLxXlJDZQHPwvbnq\") == 'GgqtCNrjkHlXxLjdzqhpWVBNQ'", "assert encode(\"EjhSPNSJMPQ\") == 'gJHspnsjmpq'", "assert encode(\"TLU\") == 'tlw'", "assert encode(\"rjXQvzxCjzaWcAuNeOiaXPpdYVoxCt\") == 'RJxqVZXcJZCwCcWnGqKCxpPDyvQXcT'", "assert encode(\"ZVS\") == 'zvs'", "assert encode(\"BODPGNO\") == 'bqdpgnq'", "assert encode('This is a message') == 'tHKS KS C MGSSCGG'", "assert encode(\"jZheceVgKgTLjRwOLeRrrtwbE\") == 'JzHGCGvGkGtlJrWqlGrRRTWBg'", "assert encode(\"AZOCBJD\") == 'czqcbjd'", "assert encode(\"HrRcDpPaxYYXID\") == 'hRrCdPpCXyyxkd'", "assert encode(\"DNHIUUVX\") == 'dnhkwwvx'", "assert encode(\"TEGPKXNB\") == 'tggpkxnb'", "assert encode(\"OBEcrSHMuaCS\") == 'qbgCRshmWCcs'", "assert encode(\"jAqqTMHiqs\") == 'JcQQtmhKQS'", "assert encode(\"IYS\") == 'kys'", "assert encode(\"HKWXPGN\") == 'hkwxpgn'", "assert encode(\"aZPgQ vnmhPPOLdLIutuJO\") == 'CzpGq VNMHppqlDlkWTWjq'", "assert encode(\"fZoHFcbTcLTUWG VdZ\") == 'FzQhfCBtCltwwg vDz'", "assert encode(\"SSMAQL\") == 'ssmcql'", "assert encode(\"ITNaCJiUmgbbsXbJggeE\") == 'ktnCcjKwMGBBSxBjGGGg'", "assert encode(\"PKKLGPQOY\") == 'pkklgpqqy'", "assert encode(\"XgnELkHHAAUiCCpSfJ\") == 'xGNglKhhccwKccPsFj'", "assert encode(\"jjHqlFViqHz\") == 'JJhQLfvKQhZ'", "assert encode('Mudasir') == 'mWDCSKR'", "assert encode(\"OpzdoaiWPrtwH\") == 'qPZDQCKwpRTWh'", "assert encode(\" dNVahxVjKzB JTneIFjKfXsk \") == ' DnvCHXvJkZb jtNGkfJkFxSK '", "assert encode(\"c XkUXkBchEddL\") == 'C xKwxKbCHgDDl'", "assert encode(\"PSBSBey\") == 'psbsbGY'", "assert encode(\"mejsPoZxTWVZINkltbTC\") == 'MGJSpQzXtwvzknKLTBtc'", "assert encode(\"RkeGn HyKwTJKYqIJSWnu\") == 'rKGgN hYkWtjkyQkjswNW'", "assert encode(\"JMFDUNNFN\") == 'jmfdwnnfn'", "assert encode(\"DWUOPpLjiGck\") == 'dwwqpPlJKgCK'", "assert encode(\"KtvgHCwhJPHhZoPrTShCCFjb\") == 'kTVGhcWHjphHzQpRtsHccfJB'", "assert encode(\"BGPB\") == 'bgpb'", "assert encode(\"FVABgUJcvAO\") == 'fvcbGwjCVcq'", "assert encode(\"LPVHOUZC\") == 'lpvhqwzc'", "assert encode(\"vFk rhQEfvOP ZgydPEhvIVWD\") == 'VfK RHqgFVqp zGYDpgHVkvwd'", "assert encode(\"QRX\") == 'qrx'", "assert encode(\"DXV\") == 'dxv'", "assert encode(\"qmjcLnfY lObRZrX\") == 'QMJClNFy LqBrzRx'", "assert encode('YES') == 'ygs'", "assert encode(\"lljsyoqvdrgHLkvty\") == 'LLJSYQQVDRGhlKVTY'", "assert encode(\"OSWDQFIR\") == 'qswdqfkr'", "assert encode(\"ZfDqK\") == 'zFdQk'", "assert encode(\"BYRAIVE\") == 'byrckvg'", "assert encode(\"AGMBICYE\") == 'cgmbkcyg'", "assert encode(\"kqmseH\") == 'KQMSGh'", "assert encode(\"WYLLSZM\") == 'wyllszm'", "assert encode(\"hgxUMf\") == 'HGXwmF'", "assert encode(\"xOzJhrPNcVCLkJeMgwsBcYm\") == 'XqZjHRpnCvclKjGmGWSbCyM'", "assert encode(\"rKELArbzBNVyXuUr\") == 'RkglcRBZbnvYxWwR'", "assert encode(\"WNRIIJWGO\") == 'wnrkkjwgq'", "assert encode(\"UNVEY\") == 'wnvgy'"], "nl": "\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    ", "func": "def encode(message):", "examples": "Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    ", "repair_prompt": ["def encode(message):\t\n'''Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the English alphabet. Assume only letters. Make sure to handle both uppercase and lowercase vowels and swap their cases appropriately.\nExamples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Takes a message and encodes it by swapping the case of all letters and \n    replacing vowels with the letter two places ahead in the alphabet.\n    \n    Parameters:\n    message (str): The input message consisting of only letters.\n    \n    Returns:\n    str: The encoded message.\n    \"\"\"\n    def is_vowel(char: str) -> bool:\n        \"\"\"Check if a character is a vowel.\"\"\"\n        return char.lower() in 'aeiou'\n\n    def shift_vowel(char: str) -> str:\n        \"\"\"Shift a vowel two places ahead in the alphabet and swap its case.\"\"\"\n        vowels = 'aeiou'\n        index = vowels.index(char.lower())\n        shifted_vowel = vowels[(index + 2) % len(vowels)]\n        return shifted_vowel.upper() if char.islower() else shifted_vowel.lower()\n\n    def swap_case(char: str) -> str:\n        \"\"\"Swap the case of a character.\"\"\"\n        return char.lower() if char.isupper() else char.upper()\n\n    encoded_message = []\n    for char in message:\n        if is_vowel(char):\n            encoded_message.append(shift_vowel(char))\n        else:\n            encoded_message.append(swap_case(char))\n    \n    return ''.join(encoded_message)\n\n# Example usage:\n# print(encode(\"Hello World\"))  # Output: \"hEllO wOrld\"\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing vowels with the letter two places ahead in the alphabet.\n\n    Parameters:\n    message (str): The input message consisting of only letters.\n\n    Returns:\n    str: The encoded message.\n    \"\"\"\n    def is_vowel(char: str) -> bool:\n        \"\"\"Check if a character is a vowel.\"\"\"\n        return char.lower() in 'aeiou'\n\n    def replace_vowel(char: str) -> str:\n        \"\"\"Replace a vowel with the letter two places ahead in the alphabet, maintaining the case.\"\"\"\n        vowels = 'aeiou'\n        index = vowels.index(char.lower())\n        new_vowel = vowels[(index + 2) % len(vowels)]\n        return new_vowel.upper() if char.islower() else new_vowel.lower()\n\n    encoded_message = []\n\n    for char in message:\n        if char.isalpha():\n            if is_vowel(char):\n                new_char = replace_vowel(char)\n            else:\n                new_char = char.swapcase()\n            encoded_message.append(new_char)\n        else:\n            # Assuming the input consists only of letters, this block should not be executed.\n            # If non-letter characters are encountered, they are left unchanged.\n            encoded_message.append(char)\n\n    return ''.join(encoded_message)\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Takes a message and encodes it by swapping case and replacing vowels.\n\n    Parameters:\n    message (str): The input message containing only letters.\n\n    Returns:\n    str: The encoded message.\n    \"\"\"\n    # Define a dictionary to map vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    # Initialize an empty list to store the encoded characters\n    encoded_message = []\n    \n    # Iterate over each character in the input message\n    for char in message:\n        # Swap the case of the character\n        swapped_char = char.swapcase()\n        \n        # Replace the vowel if it exists in the dictionary\n        if swapped_char in vowel_replacement:\n            encoded_message.append(vowel_replacement[swapped_char])\n        else:\n            encoded_message.append(swapped_char)\n    \n    # Join the list into a string and return the encoded message\n    return ''.join(encoded_message)\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing vowels with the letter two places ahead in the alphabet.\n    \n    Parameters:\n    message (str): The input message consisting of only letters.\n    \n    Returns:\n    str: The encoded message with case swapped and vowels replaced.\n    \"\"\"\n    # Define a dictionary to map vowels to their replacements\n    vowel_mapping = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    # Initialize an empty list to store the encoded characters\n    encoded_message = []\n    \n    # Iterate over each character in the input message\n    for char in message:\n        # Swap the case of the character\n        swapped_char = char.swapcase()\n        \n        # Check if the swapped character is a vowel and replace it if necessary\n        if swapped_char in vowel_mapping:\n            encoded_message.append(vowel_mapping[swapped_char])\n        else:\n            encoded_message.append(swapped_char)\n    \n    # Join the list into a string and return the encoded message\n    return ''.join(encoded_message)\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Takes a message and encodes it by swapping the case of all letters and replacing vowels\n    with the letter two places ahead in the alphabet.\n\n    Parameters:\n    message (str): The input message containing only letters.\n\n    Returns:\n    str: The encoded message.\n    \"\"\"\n    # Define a dictionary to map vowels to their replacements\n    vowel_replacement = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    # Initialize an empty list to store the encoded characters\n    encoded_message = []\n\n    # Iterate over each character in the message\n    for char in message:\n        # Swap the case of the character\n        swapped_char = char.swapcase()\n        \n        # Check if the swapped character is a vowel and replace it if necessary\n        if swapped_char in vowel_replacement:\n            encoded_message.append(vowel_replacement[swapped_char])\n        else:\n            encoded_message.append(swapped_char)\n\n    # Join the list into a string and return the encoded message\n    return ''.join(encoded_message)\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Takes a message and encodes it by swapping the case of all letters and \n    replacing vowels with the letter two places ahead in the alphabet.\n    \n    Parameters:\n    message (str): The input message consisting of only letters.\n    \n    Returns:\n    str: The encoded message.\n    \"\"\"\n    # Define a dictionary to map vowels to their replacements\n    vowel_mapping = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    # Initialize an empty list to store the encoded characters\n    encoded_message = []\n    \n    # Iterate over each character in the input message\n    for char in message:\n        # Swap the case of the character\n        swapped_char = char.swapcase()\n        \n        # Check if the swapped character is a vowel and replace it if necessary\n        if swapped_char in vowel_mapping:\n            encoded_message.append(vowel_mapping[swapped_char])\n        else:\n            encoded_message.append(swapped_char)\n    \n    # Join the list into a string and return the encoded message\n    return ''.join(encoded_message)\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes the input message by swapping the case of all letters and replacing vowels with the letter two places ahead in the alphabet.\n\n    Parameters:\n    message (str): The message to encode.\n\n    Returns:\n    str: The encoded message.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                # Determine the letter two places ahead in the alphabet\n                if char.islower():\n                    new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n                # Swap case\n                encoded_message.append(new_char.swapcase())\n            else:\n                # Swap case for non-vowel characters\n                encoded_message.append(char.swapcase())\n        else:\n            # If the character is not a letter, append it as is\n            encoded_message.append(char)\n\n    return ''.join(encoded_message)\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes the input message by swapping the case of all letters and replacing vowels\n    with the letter two places ahead in the alphabet.\n    \n    Parameters:\n    message (str): The input message consisting only of letters.\n    \n    Returns:\n    str: The encoded message.\n    \"\"\"\n    def is_vowel(char: str) -> bool:\n        \"\"\"Check if a character is a vowel.\"\"\"\n        return char.lower() in 'aeiou'\n\n    def shift_vowel(char: str) -> str:\n        \"\"\"Shift a vowel two places ahead in the alphabet and swap its case.\"\"\"\n        vowels = 'aeiou'\n        shifted_vowels = 'cgk'\n        index = vowels.index(char.lower())\n        shifted_char = shifted_vowels[index]\n        return shifted_char.upper() if char.islower() else shifted_char.lower()\n\n    def swap_case(char: str) -> str:\n        \"\"\"Swap the case of a character.\"\"\"\n        return char.lower() if char.isupper() else char.upper()\n\n    encoded_message = []\n    for char in message:\n        if is_vowel(char):\n            encoded_message.append(shift_vowel(char))\n        else:\n            encoded_message.append(swap_case(char))\n    \n    return ''.join(encoded_message)\n\n# Example usage:\n# print(encode(\"HelloWorld\"))  # Output: \"hGLLmWnRLD\"\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Encodes the input message by swapping the case of all letters and replacing vowels with the letter two places ahead in the alphabet.\n    \n    Parameters:\n    message (str): The input message consisting only of letters.\n    \n    Returns:\n    str: The encoded message.\n    \"\"\"\n    def is_vowel(char: str) -> bool:\n        \"\"\"Check if a character is a vowel.\"\"\"\n        return char.lower() in 'aeiou'\n\n    def replace_vowel(char: str) -> str:\n        \"\"\"Replace a vowel with the letter two places ahead in the alphabet and swap its case.\"\"\"\n        vowels = 'aeiou'\n        index = vowels.index(char.lower())\n        new_vowel = vowels[(index + 2) % len(vowels)]\n        return new_vowel.upper() if char.islower() else new_vowel.lower()\n\n    def swap_case(char: str) -> str:\n        \"\"\"Swap the case of a character.\"\"\"\n        return char.lower() if char.isupper() else char.upper()\n\n    encoded_message = []\n    for char in message:\n        if is_vowel(char):\n            encoded_message.append(replace_vowel(char))\n        else:\n            encoded_message.append(swap_case(char))\n    \n    return ''.join(encoded_message)\n", "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Takes a message, swaps the case of all letters, and replaces all vowels with the letter that appears\n    2 places ahead in the English alphabet.\n    \n    Parameters:\n    message (str): The input message consisting of only letters.\n    \n    Returns:\n    str: The encoded message.\n    \"\"\"\n    def swap_case_and_replace_vowels(char: str) -> str:\n        \"\"\"Helper function to swap case and replace vowels.\"\"\"\n        vowels = 'aeiouAEIOU'\n        # Define the mapping for vowels\n        vowel_mapping = {\n            'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n            'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n        }\n        \n        # Swap case\n        swapped_char = char.swapcase()\n        \n        # Replace vowel if applicable\n        if swapped_char in vowels:\n            return vowel_mapping[swapped_char]\n        else:\n            return swapped_char\n    \n    # Process each character in the message\n    encoded_message = ''.join(swap_case_and_replace_vowels(char) for char in message)\n    \n    return encoded_message\n\n# Example usage:\n# print(encode(\"HelloWorld\"))  # Output: \"hGLLqwqRLD\"\n"], "plans": ["requirement analysis:\nThe function should accurately swap the case of all letters and replace vowels with the letter two places ahead in the alphabet. It should handle both uppercase and lowercase vowels and ensure the output is consistent with the examples provided.\nrequirement pool:\n- Implement case swapping for all letters\n- Replace vowels with the letter two places ahead\n- Ensure performance optimization for quick processing\n- Provide clear examples for user understanding\n- Develop a user-friendly interface\nWe will implement a function that processes each character in the input message. For each character, we will check if it is a vowel and replace it with the letter two places ahead in the alphabet, while also swapping its case. For non-vowel letters, we will simply swap the case. We will use Python's built-in string manipulation capabilities to achieve this efficiently.\n", "requirement analysis:\nThe function should efficiently swap the case of all letters and replace vowels with the letter two places ahead in the alphabet. It should handle both uppercase and lowercase letters, ensuring the output is consistent with the examples provided.\nrequirement pool:\n- Implement case swapping for all letters.\n- Replace vowels with the letter two places ahead in the alphabet.\n- Ensure the function handles both uppercase and lowercase letters.\n- Optimize the function for performance.\n- Provide comprehensive documentation and examples.\nWe will implement a function that iterates over each character in the input message. For each character, we will check if it is a vowel and replace it with the letter two places ahead in the alphabet, while also swapping its case. For non-vowel characters, we will simply swap their case. This approach ensures simplicity and efficiency, as it processes each character in a single pass. We will use Python's built-in string methods to handle case swapping and character replacement.\n", "requirement analysis:\nThe function should accurately swap the case of all letters and replace vowels with the letter two places ahead in the alphabet. It should handle both uppercase and lowercase vowels and ensure the output is consistent with the examples provided.\nrequirement pool:\n- Implement the main encoding function\n- Ensure case swapping is accurate\n- Replace vowels correctly\n- Optimize for performance\n- Provide user examples\nWe will implement a function that swaps the case of all letters and replaces vowels with the letter two places ahead in the alphabet. We will use Python's built-in string methods for case swapping and a dictionary to map vowels to their replacements. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe function should efficiently swap the case of all letters and replace vowels with the letter two places ahead in the alphabet. It should handle both uppercase and lowercase letters, ensuring the output maintains the correct case transformation.\nrequirement pool:\n- Implement case swapping for all letters\n- Replace vowels with the letter two places ahead in the alphabet\n- Ensure the function handles both uppercase and lowercase letters\n- Optimize for performance and simplicity\n- Provide comprehensive documentation and examples\nWe will implement a function that swaps the case of all letters and replaces vowels with the letter two places ahead in the alphabet. The function will handle both uppercase and lowercase letters. We will use Python's built-in string methods for case swapping and a dictionary to map vowels to their replacements. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe function should efficiently swap the case of all letters and replace vowels with the letter two places ahead in the alphabet, ensuring both uppercase and lowercase vowels are handled correctly.\nrequirement pool:\n- Implement case swapping for all letters\n- Replace vowels with the letter two places ahead\n- Ensure the function is efficient and fast\n- Provide clear documentation and examples\n- Optimize for edge cases and unusual inputs\nWe will implement a function that swaps the case of all letters and replaces vowels with the letter two places ahead in the alphabet. We will use Python's built-in string methods for case swapping and a dictionary to map vowels to their replacements. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe function should efficiently swap the case of all letters and replace vowels with the letter two places ahead in the alphabet. It must handle both uppercase and lowercase letters, ensuring the transformation is accurate and consistent.\nrequirement pool:\n- Implement case swapping for all letters\n- Replace vowels with the letter two places ahead\n- Ensure the function is efficient and fast\n- Provide comprehensive documentation\n- Include unit tests for various scenarios\nWe will implement a function that swaps the case of all letters and replaces vowels with the letter two places ahead in the alphabet. The function will handle both uppercase and lowercase letters. We will use Python's built-in string methods for case swapping and a dictionary to map vowels to their replacements. This approach ensures simplicity and efficiency.\n", "requirement analysis:\nThe function should accurately swap the case of all letters and replace vowels with the letter two places ahead in the alphabet. It must handle both uppercase and lowercase vowels and provide clear examples for user understanding.\nrequirement pool:\n- Implement the main encoding function\n- Ensure case swapping is accurate\n- Replace vowels correctly with the specified letter\n- Provide user examples for clarity\n- Optimize for performance\nWe will implement a function that processes each character in the input message. For each character, we will check if it is a vowel and replace it with the letter two places ahead in the alphabet, while also swapping its case. For non-vowel characters, we will simply swap their case. We will use Python's built-in string manipulation capabilities to achieve this efficiently.\n", "requirement analysis:\nThe requirement is to develop a function that encodes messages by swapping the case of all letters and replacing vowels with the letter two places ahead in the alphabet. The function must handle both uppercase and lowercase vowels and swap their cases appropriately.\nrequirement pool:\n- Implement the main encoding function\n- Ensure case swapping for all letters\n- Replace vowels with the correct letter\n- Optimize for performance\n- Create a user-friendly interface\nWe will implement a function that processes the input string by iterating over each character. For each character, we will check if it is a vowel and replace it with the letter two places ahead in the alphabet, while also swapping its case. For non-vowel characters, we will simply swap their case. The function will assume that the input consists only of letters, as per the requirement analysis.\n", "requirement analysis:\nThe function should accurately swap the case of all letters and replace vowels with the letter two places ahead in the alphabet. It should handle both uppercase and lowercase vowels and ensure the output is consistent with the examples provided.\nrequirement pool:\n- Implement case swapping for all letters\n- Replace vowels with the letter two places ahead\n- Optimize for performance and speed\n- Ensure the function handles edge cases\n- Provide user feedback on transformations\nWe will implement a function that processes each character in the input message. For each character, we will check if it is a vowel and replace it with the letter two places ahead in the alphabet, while also swapping its case. For non-vowel characters, we will simply swap their case. The function will handle both uppercase and lowercase letters seamlessly. We will use Python's built-in string manipulation capabilities to achieve this efficiently.\n", "requirement analysis:\nThe function should accurately swap the case of all letters and replace vowels with the letter two places ahead in the alphabet. It must handle both uppercase and lowercase vowels and ensure the output is consistent with the examples provided.\nrequirement pool:\n- Implement case swapping for all letters\n- Replace vowels with the letter two places ahead\n- Optimize for performance and speed\n- Ensure intuitive user interface\n- Provide detailed error messages for invalid inputs\nWe will implement a function that swaps the case of all letters and replaces vowels with the letter two places ahead in the alphabet. We will use Python's built-in string manipulation capabilities to achieve this. The function will handle both uppercase and lowercase letters and ensure the output is consistent with the examples provided. We will not handle non-letter characters as the requirement assumes only letters.\n"], "scores": [0.1462, 0.1462, 1.0, 1.0, 1.0, 1.0, 1.0, 0.4385, 0.1462, 1.0], "pass_results": [false, false, true, true, true, true, true, false, false, true], "pass_test_cases_num": [19, 19, 130, 130, 130, 130, 130, 57, 19, 130], "completion": "from typing import List\n## main.py\n\ndef encode(message: str) -> str:\n    \"\"\"\n    Takes a message, swaps the case of all letters, and replaces all vowels with the letter that appears\n    2 places ahead in the English alphabet.\n    \n    Parameters:\n    message (str): The input message consisting of only letters.\n    \n    Returns:\n    str: The encoded message.\n    \"\"\"\n    def swap_case_and_replace_vowels(char: str) -> str:\n        \"\"\"Helper function to swap case and replace vowels.\"\"\"\n        vowels = 'aeiouAEIOU'\n        # Define the mapping for vowels\n        vowel_mapping = {\n            'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n            'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n        }\n        \n        # Swap case\n        swapped_char = char.swapcase()\n        \n        # Replace vowel if applicable\n        if swapped_char in vowels:\n            return vowel_mapping[swapped_char]\n        else:\n            return swapped_char\n    \n    # Process each character in the message\n    encoded_message = ''.join(swap_case_and_replace_vowels(char) for char in message)\n    \n    return encoded_message\n\n# Example usage:\n# print(encode(\"HelloWorld\"))  # Output: \"hGLLqwqRLD\"\n", "passed": true, "pass": true, "pass_num": 6, "round": 435, "mutate_method": "add_1_sentence_at_end", "parent_index": 162}
